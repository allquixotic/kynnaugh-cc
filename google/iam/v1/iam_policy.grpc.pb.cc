// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: google/iam/v1/iam_policy.proto

#include "google/iam/v1/iam_policy.pb.h"
#include "google/iam/v1/iam_policy.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace google {
namespace iam {
namespace v1 {

static const char* IAMPolicy_method_names[] = {
  "/google.iam.v1.IAMPolicy/SetIamPolicy",
  "/google.iam.v1.IAMPolicy/GetIamPolicy",
  "/google.iam.v1.IAMPolicy/TestIamPermissions",
};

std::unique_ptr< IAMPolicy::Stub> IAMPolicy::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< IAMPolicy::Stub> stub(new IAMPolicy::Stub(channel));
  return stub;
}

IAMPolicy::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SetIamPolicy_(IAMPolicy_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetIamPolicy_(IAMPolicy_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TestIamPermissions_(IAMPolicy_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status IAMPolicy::Stub::SetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::google::iam::v1::Policy* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SetIamPolicy_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* IAMPolicy::Stub::AsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>(channel_.get(), cq, rpcmethod_SetIamPolicy_, context, request);
}

::grpc::Status IAMPolicy::Stub::GetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::google::iam::v1::Policy* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetIamPolicy_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* IAMPolicy::Stub::AsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>(channel_.get(), cq, rpcmethod_GetIamPolicy_, context, request);
}

::grpc::Status IAMPolicy::Stub::TestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::google::iam::v1::TestIamPermissionsResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_TestIamPermissions_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>* IAMPolicy::Stub::AsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>(channel_.get(), cq, rpcmethod_TestIamPermissions_, context, request);
}

IAMPolicy::Service::Service() {
  (void)IAMPolicy_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      IAMPolicy_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< IAMPolicy::Service, ::google::iam::v1::SetIamPolicyRequest, ::google::iam::v1::Policy>(
          std::mem_fn(&IAMPolicy::Service::SetIamPolicy), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      IAMPolicy_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< IAMPolicy::Service, ::google::iam::v1::GetIamPolicyRequest, ::google::iam::v1::Policy>(
          std::mem_fn(&IAMPolicy::Service::GetIamPolicy), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      IAMPolicy_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< IAMPolicy::Service, ::google::iam::v1::TestIamPermissionsRequest, ::google::iam::v1::TestIamPermissionsResponse>(
          std::mem_fn(&IAMPolicy::Service::TestIamPermissions), this)));
}

IAMPolicy::Service::~Service() {
}

::grpc::Status IAMPolicy::Service::SetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IAMPolicy::Service::GetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IAMPolicy::Service::TestIamPermissions(::grpc::ServerContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace iam
}  // namespace v1

