// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/pubsub/v1/pubsub.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/pubsub/v1/pubsub.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace pubsub {
namespace v1 {

namespace {

const ::google::protobuf::Descriptor* Topic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Topic_reflection_ = NULL;
const ::google::protobuf::Descriptor* PubsubMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PubsubMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PubsubMessage_AttributesEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GetTopicRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTopicRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PublishRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PublishRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PublishResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PublishResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListTopicsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListTopicsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListTopicsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListTopicsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListTopicSubscriptionsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListTopicSubscriptionsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListTopicSubscriptionsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListTopicSubscriptionsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteTopicRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteTopicRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Subscription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Subscription_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushConfig_AttributesEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReceivedMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReceivedMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSubscriptionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSubscriptionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListSubscriptionsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListSubscriptionsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListSubscriptionsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListSubscriptionsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteSubscriptionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteSubscriptionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyPushConfigRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyPushConfigRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PullRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PullRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PullResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PullResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyAckDeadlineRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyAckDeadlineRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AcknowledgeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AcknowledgeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamingPullRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamingPullRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamingPullResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamingPullResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_google_2fpubsub_2fv1_2fpubsub_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  protobuf_AddDesc_google_2fpubsub_2fv1_2fpubsub_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "google/pubsub/v1/pubsub.proto");
  GOOGLE_CHECK(file != NULL);
  Topic_descriptor_ = file->message_type(0);
  static const int Topic_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Topic, name_),
  };
  Topic_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Topic_descriptor_,
      Topic::internal_default_instance(),
      Topic_offsets_,
      -1,
      -1,
      -1,
      sizeof(Topic),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Topic, _internal_metadata_));
  PubsubMessage_descriptor_ = file->message_type(1);
  static const int PubsubMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PubsubMessage, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PubsubMessage, attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PubsubMessage, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PubsubMessage, publish_time_),
  };
  PubsubMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PubsubMessage_descriptor_,
      PubsubMessage::internal_default_instance(),
      PubsubMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(PubsubMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PubsubMessage, _internal_metadata_));
  PubsubMessage_AttributesEntry_descriptor_ = PubsubMessage_descriptor_->nested_type(0);
  GetTopicRequest_descriptor_ = file->message_type(2);
  static const int GetTopicRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTopicRequest, topic_),
  };
  GetTopicRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetTopicRequest_descriptor_,
      GetTopicRequest::internal_default_instance(),
      GetTopicRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetTopicRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTopicRequest, _internal_metadata_));
  PublishRequest_descriptor_ = file->message_type(3);
  static const int PublishRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishRequest, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishRequest, messages_),
  };
  PublishRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PublishRequest_descriptor_,
      PublishRequest::internal_default_instance(),
      PublishRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(PublishRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishRequest, _internal_metadata_));
  PublishResponse_descriptor_ = file->message_type(4);
  static const int PublishResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishResponse, message_ids_),
  };
  PublishResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PublishResponse_descriptor_,
      PublishResponse::internal_default_instance(),
      PublishResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(PublishResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishResponse, _internal_metadata_));
  ListTopicsRequest_descriptor_ = file->message_type(5);
  static const int ListTopicsRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTopicsRequest, project_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTopicsRequest, page_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTopicsRequest, page_token_),
  };
  ListTopicsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListTopicsRequest_descriptor_,
      ListTopicsRequest::internal_default_instance(),
      ListTopicsRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListTopicsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTopicsRequest, _internal_metadata_));
  ListTopicsResponse_descriptor_ = file->message_type(6);
  static const int ListTopicsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTopicsResponse, topics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTopicsResponse, next_page_token_),
  };
  ListTopicsResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListTopicsResponse_descriptor_,
      ListTopicsResponse::internal_default_instance(),
      ListTopicsResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListTopicsResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTopicsResponse, _internal_metadata_));
  ListTopicSubscriptionsRequest_descriptor_ = file->message_type(7);
  static const int ListTopicSubscriptionsRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTopicSubscriptionsRequest, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTopicSubscriptionsRequest, page_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTopicSubscriptionsRequest, page_token_),
  };
  ListTopicSubscriptionsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListTopicSubscriptionsRequest_descriptor_,
      ListTopicSubscriptionsRequest::internal_default_instance(),
      ListTopicSubscriptionsRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListTopicSubscriptionsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTopicSubscriptionsRequest, _internal_metadata_));
  ListTopicSubscriptionsResponse_descriptor_ = file->message_type(8);
  static const int ListTopicSubscriptionsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTopicSubscriptionsResponse, subscriptions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTopicSubscriptionsResponse, next_page_token_),
  };
  ListTopicSubscriptionsResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListTopicSubscriptionsResponse_descriptor_,
      ListTopicSubscriptionsResponse::internal_default_instance(),
      ListTopicSubscriptionsResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListTopicSubscriptionsResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTopicSubscriptionsResponse, _internal_metadata_));
  DeleteTopicRequest_descriptor_ = file->message_type(9);
  static const int DeleteTopicRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTopicRequest, topic_),
  };
  DeleteTopicRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeleteTopicRequest_descriptor_,
      DeleteTopicRequest::internal_default_instance(),
      DeleteTopicRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeleteTopicRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTopicRequest, _internal_metadata_));
  Subscription_descriptor_ = file->message_type(10);
  static const int Subscription_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscription, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscription, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscription, push_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscription, ack_deadline_seconds_),
  };
  Subscription_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Subscription_descriptor_,
      Subscription::internal_default_instance(),
      Subscription_offsets_,
      -1,
      -1,
      -1,
      sizeof(Subscription),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscription, _internal_metadata_));
  PushConfig_descriptor_ = file->message_type(11);
  static const int PushConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushConfig, push_endpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushConfig, attributes_),
  };
  PushConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PushConfig_descriptor_,
      PushConfig::internal_default_instance(),
      PushConfig_offsets_,
      -1,
      -1,
      -1,
      sizeof(PushConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushConfig, _internal_metadata_));
  PushConfig_AttributesEntry_descriptor_ = PushConfig_descriptor_->nested_type(0);
  ReceivedMessage_descriptor_ = file->message_type(12);
  static const int ReceivedMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceivedMessage, ack_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceivedMessage, message_),
  };
  ReceivedMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReceivedMessage_descriptor_,
      ReceivedMessage::internal_default_instance(),
      ReceivedMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReceivedMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceivedMessage, _internal_metadata_));
  GetSubscriptionRequest_descriptor_ = file->message_type(13);
  static const int GetSubscriptionRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscriptionRequest, subscription_),
  };
  GetSubscriptionRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetSubscriptionRequest_descriptor_,
      GetSubscriptionRequest::internal_default_instance(),
      GetSubscriptionRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetSubscriptionRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscriptionRequest, _internal_metadata_));
  ListSubscriptionsRequest_descriptor_ = file->message_type(14);
  static const int ListSubscriptionsRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSubscriptionsRequest, project_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSubscriptionsRequest, page_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSubscriptionsRequest, page_token_),
  };
  ListSubscriptionsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListSubscriptionsRequest_descriptor_,
      ListSubscriptionsRequest::internal_default_instance(),
      ListSubscriptionsRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListSubscriptionsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSubscriptionsRequest, _internal_metadata_));
  ListSubscriptionsResponse_descriptor_ = file->message_type(15);
  static const int ListSubscriptionsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSubscriptionsResponse, subscriptions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSubscriptionsResponse, next_page_token_),
  };
  ListSubscriptionsResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListSubscriptionsResponse_descriptor_,
      ListSubscriptionsResponse::internal_default_instance(),
      ListSubscriptionsResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListSubscriptionsResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSubscriptionsResponse, _internal_metadata_));
  DeleteSubscriptionRequest_descriptor_ = file->message_type(16);
  static const int DeleteSubscriptionRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSubscriptionRequest, subscription_),
  };
  DeleteSubscriptionRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeleteSubscriptionRequest_descriptor_,
      DeleteSubscriptionRequest::internal_default_instance(),
      DeleteSubscriptionRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeleteSubscriptionRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSubscriptionRequest, _internal_metadata_));
  ModifyPushConfigRequest_descriptor_ = file->message_type(17);
  static const int ModifyPushConfigRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPushConfigRequest, subscription_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPushConfigRequest, push_config_),
  };
  ModifyPushConfigRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ModifyPushConfigRequest_descriptor_,
      ModifyPushConfigRequest::internal_default_instance(),
      ModifyPushConfigRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ModifyPushConfigRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyPushConfigRequest, _internal_metadata_));
  PullRequest_descriptor_ = file->message_type(18);
  static const int PullRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullRequest, subscription_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullRequest, return_immediately_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullRequest, max_messages_),
  };
  PullRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PullRequest_descriptor_,
      PullRequest::internal_default_instance(),
      PullRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(PullRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullRequest, _internal_metadata_));
  PullResponse_descriptor_ = file->message_type(19);
  static const int PullResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullResponse, received_messages_),
  };
  PullResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PullResponse_descriptor_,
      PullResponse::internal_default_instance(),
      PullResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(PullResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullResponse, _internal_metadata_));
  ModifyAckDeadlineRequest_descriptor_ = file->message_type(20);
  static const int ModifyAckDeadlineRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyAckDeadlineRequest, subscription_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyAckDeadlineRequest, ack_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyAckDeadlineRequest, ack_deadline_seconds_),
  };
  ModifyAckDeadlineRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ModifyAckDeadlineRequest_descriptor_,
      ModifyAckDeadlineRequest::internal_default_instance(),
      ModifyAckDeadlineRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ModifyAckDeadlineRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyAckDeadlineRequest, _internal_metadata_));
  AcknowledgeRequest_descriptor_ = file->message_type(21);
  static const int AcknowledgeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcknowledgeRequest, subscription_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcknowledgeRequest, ack_ids_),
  };
  AcknowledgeRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AcknowledgeRequest_descriptor_,
      AcknowledgeRequest::internal_default_instance(),
      AcknowledgeRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(AcknowledgeRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcknowledgeRequest, _internal_metadata_));
  StreamingPullRequest_descriptor_ = file->message_type(22);
  static const int StreamingPullRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingPullRequest, subscription_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingPullRequest, ack_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingPullRequest, modify_deadline_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingPullRequest, modify_deadline_ack_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingPullRequest, stream_ack_deadline_seconds_),
  };
  StreamingPullRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StreamingPullRequest_descriptor_,
      StreamingPullRequest::internal_default_instance(),
      StreamingPullRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(StreamingPullRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingPullRequest, _internal_metadata_));
  StreamingPullResponse_descriptor_ = file->message_type(23);
  static const int StreamingPullResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingPullResponse, received_messages_),
  };
  StreamingPullResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StreamingPullResponse_descriptor_,
      StreamingPullResponse::internal_default_instance(),
      StreamingPullResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(StreamingPullResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingPullResponse, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_google_2fpubsub_2fv1_2fpubsub_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Topic_descriptor_, Topic::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PubsubMessage_descriptor_, PubsubMessage::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        PubsubMessage_AttributesEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                PubsubMessage_AttributesEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetTopicRequest_descriptor_, GetTopicRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PublishRequest_descriptor_, PublishRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PublishResponse_descriptor_, PublishResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListTopicsRequest_descriptor_, ListTopicsRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListTopicsResponse_descriptor_, ListTopicsResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListTopicSubscriptionsRequest_descriptor_, ListTopicSubscriptionsRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListTopicSubscriptionsResponse_descriptor_, ListTopicSubscriptionsResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeleteTopicRequest_descriptor_, DeleteTopicRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Subscription_descriptor_, Subscription::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PushConfig_descriptor_, PushConfig::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        PushConfig_AttributesEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                PushConfig_AttributesEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReceivedMessage_descriptor_, ReceivedMessage::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetSubscriptionRequest_descriptor_, GetSubscriptionRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListSubscriptionsRequest_descriptor_, ListSubscriptionsRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListSubscriptionsResponse_descriptor_, ListSubscriptionsResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeleteSubscriptionRequest_descriptor_, DeleteSubscriptionRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ModifyPushConfigRequest_descriptor_, ModifyPushConfigRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PullRequest_descriptor_, PullRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PullResponse_descriptor_, PullResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ModifyAckDeadlineRequest_descriptor_, ModifyAckDeadlineRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AcknowledgeRequest_descriptor_, AcknowledgeRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StreamingPullRequest_descriptor_, StreamingPullRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StreamingPullResponse_descriptor_, StreamingPullResponse::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  Topic_default_instance_.Shutdown();
  delete Topic_reflection_;
  PubsubMessage_default_instance_.Shutdown();
  delete PubsubMessage_reflection_;
  GetTopicRequest_default_instance_.Shutdown();
  delete GetTopicRequest_reflection_;
  PublishRequest_default_instance_.Shutdown();
  delete PublishRequest_reflection_;
  PublishResponse_default_instance_.Shutdown();
  delete PublishResponse_reflection_;
  ListTopicsRequest_default_instance_.Shutdown();
  delete ListTopicsRequest_reflection_;
  ListTopicsResponse_default_instance_.Shutdown();
  delete ListTopicsResponse_reflection_;
  ListTopicSubscriptionsRequest_default_instance_.Shutdown();
  delete ListTopicSubscriptionsRequest_reflection_;
  ListTopicSubscriptionsResponse_default_instance_.Shutdown();
  delete ListTopicSubscriptionsResponse_reflection_;
  DeleteTopicRequest_default_instance_.Shutdown();
  delete DeleteTopicRequest_reflection_;
  Subscription_default_instance_.Shutdown();
  delete Subscription_reflection_;
  PushConfig_default_instance_.Shutdown();
  delete PushConfig_reflection_;
  ReceivedMessage_default_instance_.Shutdown();
  delete ReceivedMessage_reflection_;
  GetSubscriptionRequest_default_instance_.Shutdown();
  delete GetSubscriptionRequest_reflection_;
  ListSubscriptionsRequest_default_instance_.Shutdown();
  delete ListSubscriptionsRequest_reflection_;
  ListSubscriptionsResponse_default_instance_.Shutdown();
  delete ListSubscriptionsResponse_reflection_;
  DeleteSubscriptionRequest_default_instance_.Shutdown();
  delete DeleteSubscriptionRequest_reflection_;
  ModifyPushConfigRequest_default_instance_.Shutdown();
  delete ModifyPushConfigRequest_reflection_;
  PullRequest_default_instance_.Shutdown();
  delete PullRequest_reflection_;
  PullResponse_default_instance_.Shutdown();
  delete PullResponse_reflection_;
  ModifyAckDeadlineRequest_default_instance_.Shutdown();
  delete ModifyAckDeadlineRequest_reflection_;
  AcknowledgeRequest_default_instance_.Shutdown();
  delete AcknowledgeRequest_reflection_;
  StreamingPullRequest_default_instance_.Shutdown();
  delete StreamingPullRequest_reflection_;
  StreamingPullResponse_default_instance_.Shutdown();
  delete StreamingPullResponse_reflection_;
}

void protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::api::protobuf_InitDefaults_google_2fapi_2fannotations_2eproto();
  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2fempty_2eproto();
  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2ftimestamp_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  Topic_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  PubsubMessage_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ::google::protobuf::internal::GetEmptyString();
  GetTopicRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  PublishRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  PublishResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ListTopicsRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ListTopicsResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ListTopicSubscriptionsRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ListTopicSubscriptionsResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  DeleteTopicRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Subscription_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  PushConfig_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ReceivedMessage_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  GetSubscriptionRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ListSubscriptionsRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ListSubscriptionsResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  DeleteSubscriptionRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ModifyPushConfigRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  PullRequest_default_instance_.DefaultConstruct();
  PullResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ModifyAckDeadlineRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  AcknowledgeRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  StreamingPullRequest_default_instance_.DefaultConstruct();
  StreamingPullResponse_default_instance_.DefaultConstruct();
  Topic_default_instance_.get_mutable()->InitAsDefaultInstance();
  PubsubMessage_default_instance_.get_mutable()->InitAsDefaultInstance();
  GetTopicRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  PublishRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  PublishResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  ListTopicsRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  ListTopicsResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  ListTopicSubscriptionsRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  ListTopicSubscriptionsResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  DeleteTopicRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  Subscription_default_instance_.get_mutable()->InitAsDefaultInstance();
  PushConfig_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReceivedMessage_default_instance_.get_mutable()->InitAsDefaultInstance();
  GetSubscriptionRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  ListSubscriptionsRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  ListSubscriptionsResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  DeleteSubscriptionRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  ModifyPushConfigRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  PullRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  PullResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  ModifyAckDeadlineRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  AcknowledgeRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  StreamingPullRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  StreamingPullResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto_once_);
void protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto_once_,
                 &protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto_impl);
}
void protobuf_AddDesc_google_2fpubsub_2fv1_2fpubsub_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035google/pubsub/v1/pubsub.proto\022\020google."
    "pubsub.v1\032\034google/api/annotations.proto\032"
    "\033google/protobuf/empty.proto\032\037google/pro"
    "tobuf/timestamp.proto\"\025\n\005Topic\022\014\n\004name\030\001"
    " \001(\t\"\333\001\n\rPubsubMessage\022\014\n\004data\030\001 \001(\014\022C\n\n"
    "attributes\030\002 \003(\0132/.google.pubsub.v1.Pubs"
    "ubMessage.AttributesEntry\022\022\n\nmessage_id\030"
    "\003 \001(\t\0220\n\014publish_time\030\004 \001(\0132\032.google.pro"
    "tobuf.Timestamp\0321\n\017AttributesEntry\022\013\n\003ke"
    "y\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\" \n\017GetTopicRe"
    "quest\022\r\n\005topic\030\001 \001(\t\"R\n\016PublishRequest\022\r"
    "\n\005topic\030\001 \001(\t\0221\n\010messages\030\002 \003(\0132\037.google"
    ".pubsub.v1.PubsubMessage\"&\n\017PublishRespo"
    "nse\022\023\n\013message_ids\030\001 \003(\t\"K\n\021ListTopicsRe"
    "quest\022\017\n\007project\030\001 \001(\t\022\021\n\tpage_size\030\002 \001("
    "\005\022\022\n\npage_token\030\003 \001(\t\"V\n\022ListTopicsRespo"
    "nse\022\'\n\006topics\030\001 \003(\0132\027.google.pubsub.v1.T"
    "opic\022\027\n\017next_page_token\030\002 \001(\t\"U\n\035ListTop"
    "icSubscriptionsRequest\022\r\n\005topic\030\001 \001(\t\022\021\n"
    "\tpage_size\030\002 \001(\005\022\022\n\npage_token\030\003 \001(\t\"P\n\036"
    "ListTopicSubscriptionsResponse\022\025\n\rsubscr"
    "iptions\030\001 \003(\t\022\027\n\017next_page_token\030\002 \001(\t\"#"
    "\n\022DeleteTopicRequest\022\r\n\005topic\030\001 \001(\t\"|\n\014S"
    "ubscription\022\014\n\004name\030\001 \001(\t\022\r\n\005topic\030\002 \001(\t"
    "\0221\n\013push_config\030\004 \001(\0132\034.google.pubsub.v1"
    ".PushConfig\022\034\n\024ack_deadline_seconds\030\005 \001("
    "\005\"\230\001\n\nPushConfig\022\025\n\rpush_endpoint\030\001 \001(\t\022"
    "@\n\nattributes\030\002 \003(\0132,.google.pubsub.v1.P"
    "ushConfig.AttributesEntry\0321\n\017AttributesE"
    "ntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"S\n\017"
    "ReceivedMessage\022\016\n\006ack_id\030\001 \001(\t\0220\n\007messa"
    "ge\030\002 \001(\0132\037.google.pubsub.v1.PubsubMessag"
    "e\".\n\026GetSubscriptionRequest\022\024\n\014subscript"
    "ion\030\001 \001(\t\"R\n\030ListSubscriptionsRequest\022\017\n"
    "\007project\030\001 \001(\t\022\021\n\tpage_size\030\002 \001(\005\022\022\n\npag"
    "e_token\030\003 \001(\t\"k\n\031ListSubscriptionsRespon"
    "se\0225\n\rsubscriptions\030\001 \003(\0132\036.google.pubsu"
    "b.v1.Subscription\022\027\n\017next_page_token\030\002 \001"
    "(\t\"1\n\031DeleteSubscriptionRequest\022\024\n\014subsc"
    "ription\030\001 \001(\t\"b\n\027ModifyPushConfigRequest"
    "\022\024\n\014subscription\030\001 \001(\t\0221\n\013push_config\030\002 "
    "\001(\0132\034.google.pubsub.v1.PushConfig\"U\n\013Pul"
    "lRequest\022\024\n\014subscription\030\001 \001(\t\022\032\n\022return"
    "_immediately\030\002 \001(\010\022\024\n\014max_messages\030\003 \001(\005"
    "\"L\n\014PullResponse\022<\n\021received_messages\030\001 "
    "\003(\0132!.google.pubsub.v1.ReceivedMessage\"_"
    "\n\030ModifyAckDeadlineRequest\022\024\n\014subscripti"
    "on\030\001 \001(\t\022\017\n\007ack_ids\030\004 \003(\t\022\034\n\024ack_deadlin"
    "e_seconds\030\003 \001(\005\";\n\022AcknowledgeRequest\022\024\n"
    "\014subscription\030\001 \001(\t\022\017\n\007ack_ids\030\002 \003(\t\"\244\001\n"
    "\024StreamingPullRequest\022\024\n\014subscription\030\001 "
    "\001(\t\022\017\n\007ack_ids\030\002 \003(\t\022\037\n\027modify_deadline_"
    "seconds\030\003 \003(\005\022\037\n\027modify_deadline_ack_ids"
    "\030\004 \003(\t\022#\n\033stream_ack_deadline_seconds\030\005 "
    "\001(\005\"U\n\025StreamingPullResponse\022<\n\021received"
    "_messages\030\001 \003(\0132!.google.pubsub.v1.Recei"
    "vedMessage2\246\n\n\nSubscriber\022\206\001\n\022CreateSubs"
    "cription\022\036.google.pubsub.v1.Subscription"
    "\032\036.google.pubsub.v1.Subscription\"0\202\323\344\223\002*"
    "\032%/v1/{name=projects/*/subscriptions/*}:"
    "\001*\022\222\001\n\017GetSubscription\022(.google.pubsub.v"
    "1.GetSubscriptionRequest\032\036.google.pubsub"
    ".v1.Subscription\"5\202\323\344\223\002/\022-/v1/{subscript"
    "ion=projects/*/subscriptions/*}\022\234\001\n\021List"
    "Subscriptions\022*.google.pubsub.v1.ListSub"
    "scriptionsRequest\032+.google.pubsub.v1.Lis"
    "tSubscriptionsResponse\".\202\323\344\223\002(\022&/v1/{pro"
    "ject=projects/*}/subscriptions\022\220\001\n\022Delet"
    "eSubscription\022+.google.pubsub.v1.DeleteS"
    "ubscriptionRequest\032\026.google.protobuf.Emp"
    "ty\"5\202\323\344\223\002/*-/v1/{subscription=projects/*"
    "/subscriptions/*}\022\243\001\n\021ModifyAckDeadline\022"
    "*.google.pubsub.v1.ModifyAckDeadlineRequ"
    "est\032\026.google.protobuf.Empty\"J\202\323\344\223\002D\"\?/v1"
    "/{subscription=projects/*/subscriptions/"
    "*}:modifyAckDeadline:\001*\022\221\001\n\013Acknowledge\022"
    "$.google.pubsub.v1.AcknowledgeRequest\032\026."
    "google.protobuf.Empty\"D\202\323\344\223\002>\"9/v1/{subs"
    "cription=projects/*/subscriptions/*}:ack"
    "nowledge:\001*\022\204\001\n\004Pull\022\035.google.pubsub.v1."
    "PullRequest\032\036.google.pubsub.v1.PullRespo"
    "nse\"=\202\323\344\223\0027\"2/v1/{subscription=projects/"
    "*/subscriptions/*}:pull:\001*\022d\n\rStreamingP"
    "ull\022&.google.pubsub.v1.StreamingPullRequ"
    "est\032\'.google.pubsub.v1.StreamingPullResp"
    "onse(\0010\001\022\240\001\n\020ModifyPushConfig\022).google.p"
    "ubsub.v1.ModifyPushConfigRequest\032\026.googl"
    "e.protobuf.Empty\"I\202\323\344\223\002C\">/v1/{subscript"
    "ion=projects/*/subscriptions/*}:modifyPu"
    "shConfig:\001*2\233\006\n\tPublisher\022j\n\013CreateTopic"
    "\022\027.google.pubsub.v1.Topic\032\027.google.pubsu"
    "b.v1.Topic\")\202\323\344\223\002#\032\036/v1/{name=projects/*"
    "/topics/*}:\001*\022\202\001\n\007Publish\022 .google.pubsu"
    "b.v1.PublishRequest\032!.google.pubsub.v1.P"
    "ublishResponse\"2\202\323\344\223\002,\"\'/v1/{topic=proje"
    "cts/*/topics/*}:publish:\001*\022o\n\010GetTopic\022!"
    ".google.pubsub.v1.GetTopicRequest\032\027.goog"
    "le.pubsub.v1.Topic\"\'\202\323\344\223\002!\022\037/v1/{topic=p"
    "rojects/*/topics/*}\022\200\001\n\nListTopics\022#.goo"
    "gle.pubsub.v1.ListTopicsRequest\032$.google"
    ".pubsub.v1.ListTopicsResponse\"\'\202\323\344\223\002!\022\037/"
    "v1/{project=projects/*}/topics\022\262\001\n\026ListT"
    "opicSubscriptions\022/.google.pubsub.v1.Lis"
    "tTopicSubscriptionsRequest\0320.google.pubs"
    "ub.v1.ListTopicSubscriptionsResponse\"5\202\323"
    "\344\223\002/\022-/v1/{topic=projects/*/topics/*}/su"
    "bscriptions\022t\n\013DeleteTopic\022$.google.pubs"
    "ub.v1.DeleteTopicRequest\032\026.google.protob"
    "uf.Empty\"\'\202\323\344\223\002!*\037/v1/{topic=projects/*/"
    "topics/*}By\n\024com.google.pubsub.v1B\013Pubsu"
    "bProtoP\001Z6google.golang.org/genproto/goo"
    "gleapis/pubsub/v1;pubsub\370\001\001\252\002\026Google.Clo"
    "ud.PubSub.V1b\006proto3", 4500);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/pubsub/v1/pubsub.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_AddDesc_google_2fapi_2fannotations_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fempty_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2ftimestamp_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_google_2fpubsub_2fv1_2fpubsub_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_google_2fpubsub_2fv1_2fpubsub_2eproto_once_);
void protobuf_AddDesc_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_google_2fpubsub_2fv1_2fpubsub_2eproto_once_,
                 &protobuf_AddDesc_google_2fpubsub_2fv1_2fpubsub_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_google_2fpubsub_2fv1_2fpubsub_2eproto {
  StaticDescriptorInitializer_google_2fpubsub_2fv1_2fpubsub_2eproto() {
    protobuf_AddDesc_google_2fpubsub_2fv1_2fpubsub_2eproto();
  }
} static_descriptor_initializer_google_2fpubsub_2fv1_2fpubsub_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Topic::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Topic::Topic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.Topic)
}
Topic::Topic(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.Topic)
}

void Topic::InitAsDefaultInstance() {
}

Topic::Topic(const Topic& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.Topic)
}

void Topic::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Topic::~Topic() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.Topic)
  SharedDtor();
}

void Topic::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void Topic::ArenaDtor(void* object) {
  Topic* _this = reinterpret_cast< Topic* >(object);
  (void)_this;
}
void Topic::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Topic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Topic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Topic_descriptor_;
}

const Topic& Topic::default_instance() {
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Topic> Topic_default_instance_;

Topic* Topic::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Topic>(arena);
}

void Topic::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.Topic)
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool Topic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.Topic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.Topic.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.Topic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.Topic)
  return false;
#undef DO_
}

void Topic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.Topic)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.Topic.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.Topic)
}

::google::protobuf::uint8* Topic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.Topic)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.Topic.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.Topic)
  return target;
}

size_t Topic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.Topic)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Topic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.Topic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Topic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Topic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.Topic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.Topic)
    UnsafeMergeFrom(*source);
  }
}

void Topic::MergeFrom(const Topic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.Topic)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Topic::UnsafeMergeFrom(const Topic& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
}

void Topic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.Topic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Topic::CopyFrom(const Topic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.Topic)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Topic::IsInitialized() const {

  return true;
}

void Topic::Swap(Topic* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Topic temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void Topic::UnsafeArenaSwap(Topic* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Topic::InternalSwap(Topic* other) {
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Topic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Topic_descriptor_;
  metadata.reflection = Topic_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Topic

// optional string name = 1;
void Topic::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Topic::name() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Topic.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Topic::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.Topic.name)
}
void Topic::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.Topic.name)
}
void Topic::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.Topic.name)
}
::std::string* Topic::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Topic.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Topic::release_name() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Topic.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Topic::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.Topic.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Topic::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Topic.name)
}
void Topic::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Topic.name)
}

inline const Topic* Topic::internal_default_instance() {
  return &Topic_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void PubsubMessage::_slow_mutable_publish_time() {
  publish_time_ = ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Timestamp >(
      GetArenaNoVirtual());
}
::google::protobuf::Timestamp* PubsubMessage::_slow_release_publish_time() {
  if (publish_time_ == NULL) {
    return NULL;
  } else {
    ::google::protobuf::Timestamp* temp = new ::google::protobuf::Timestamp(*publish_time_);
    publish_time_ = NULL;
    return temp;
  }
}
::google::protobuf::Timestamp* PubsubMessage::unsafe_arena_release_publish_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.PubsubMessage.publish_time)
  
  ::google::protobuf::Timestamp* temp = publish_time_;
  publish_time_ = NULL;
  return temp;
}
void PubsubMessage::_slow_set_allocated_publish_time(
    ::google::protobuf::Arena* message_arena, ::google::protobuf::Timestamp** publish_time) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*publish_time) == NULL) {
      message_arena->Own(*publish_time);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*publish_time)) {
      ::google::protobuf::Timestamp* new_publish_time = 
            ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Timestamp >(
            message_arena);
      new_publish_time->CopyFrom(**publish_time);
      *publish_time = new_publish_time;
    }
}
void PubsubMessage::unsafe_arena_set_allocated_publish_time(
    ::google::protobuf::Timestamp* publish_time) {
  if (GetArenaNoVirtual() == NULL) {
    delete publish_time_;
  }
  publish_time_ = publish_time;
  if (publish_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.PubsubMessage.publish_time)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PubsubMessage::kDataFieldNumber;
const int PubsubMessage::kAttributesFieldNumber;
const int PubsubMessage::kMessageIdFieldNumber;
const int PubsubMessage::kPublishTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PubsubMessage::PubsubMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.PubsubMessage)
}
PubsubMessage::PubsubMessage(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  attributes_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.PubsubMessage)
}

void PubsubMessage::InitAsDefaultInstance() {
  publish_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}

PubsubMessage::PubsubMessage(const PubsubMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.PubsubMessage)
}

void PubsubMessage::SharedCtor() {
  attributes_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  attributes_.SetEntryDescriptor(
      &::google::pubsub::v1::PubsubMessage_AttributesEntry_descriptor_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publish_time_ = NULL;
  _cached_size_ = 0;
}

PubsubMessage::~PubsubMessage() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.PubsubMessage)
  SharedDtor();
}

void PubsubMessage::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  data_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  message_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != &PubsubMessage_default_instance_.get()) {
    delete publish_time_;
  }
}

void PubsubMessage::ArenaDtor(void* object) {
  PubsubMessage* _this = reinterpret_cast< PubsubMessage* >(object);
  (void)_this;
}
void PubsubMessage::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PubsubMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PubsubMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PubsubMessage_descriptor_;
}

const PubsubMessage& PubsubMessage::default_instance() {
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PubsubMessage> PubsubMessage_default_instance_;

PubsubMessage* PubsubMessage::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<PubsubMessage>(arena);
}

void PubsubMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.PubsubMessage)
  data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  message_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && publish_time_ != NULL) delete publish_time_;
  publish_time_ = NULL;
  attributes_.Clear();
}

bool PubsubMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.PubsubMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_attributes;
        break;
      }

      // map<string, string> attributes = 2;
      case 2: {
        if (tag == 18) {
         parse_attributes:
          DO_(input->IncrementRecursionDepth());
         parse_loop_attributes:
          PubsubMessage_AttributesEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&attributes_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.PubsubMessage.AttributesEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.PubsubMessage.AttributesEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_attributes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_message_id;
        break;
      }

      // optional string message_id = 3;
      case 3: {
        if (tag == 26) {
         parse_message_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message_id().data(), this->message_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.PubsubMessage.message_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_publish_time;
        break;
      }

      // optional .google.protobuf.Timestamp publish_time = 4;
      case 4: {
        if (tag == 34) {
         parse_publish_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_publish_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.PubsubMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.PubsubMessage)
  return false;
#undef DO_
}

void PubsubMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.PubsubMessage)
  // optional bytes data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // map<string, string> attributes = 2;
  if (!this->attributes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.PubsubMessage.AttributesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.PubsubMessage.AttributesEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->attributes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->attributes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<PubsubMessage_AttributesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attributes_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<PubsubMessage_AttributesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it) {
        entry.reset(attributes_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional string message_id = 3;
  if (this->message_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_id().data(), this->message_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PubsubMessage.message_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message_id(), output);
  }

  // optional .google.protobuf.Timestamp publish_time = 4;
  if (this->has_publish_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->publish_time_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.PubsubMessage)
}

::google::protobuf::uint8* PubsubMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.PubsubMessage)
  // optional bytes data = 1;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // map<string, string> attributes = 2;
  if (!this->attributes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.PubsubMessage.AttributesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.PubsubMessage.AttributesEntry.value");
      }
    };

    if (deterministic &&
        this->attributes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->attributes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<PubsubMessage_AttributesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attributes_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<PubsubMessage_AttributesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it) {
        entry.reset(attributes_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional string message_id = 3;
  if (this->message_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_id().data(), this->message_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PubsubMessage.message_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message_id(), target);
  }

  // optional .google.protobuf.Timestamp publish_time = 4;
  if (this->has_publish_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->publish_time_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.PubsubMessage)
  return target;
}

size_t PubsubMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.PubsubMessage)
  size_t total_size = 0;

  // optional bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // optional string message_id = 3;
  if (this->message_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message_id());
  }

  // optional .google.protobuf.Timestamp publish_time = 4;
  if (this->has_publish_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->publish_time_);
  }

  // map<string, string> attributes = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->attributes_size());
  {
    ::google::protobuf::scoped_ptr<PubsubMessage_AttributesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->attributes().begin();
        it != this->attributes().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(attributes_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PubsubMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.PubsubMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PubsubMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PubsubMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.PubsubMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.PubsubMessage)
    UnsafeMergeFrom(*source);
  }
}

void PubsubMessage::MergeFrom(const PubsubMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.PubsubMessage)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PubsubMessage::UnsafeMergeFrom(const PubsubMessage& from) {
  GOOGLE_DCHECK(&from != this);
  attributes_.MergeFrom(from.attributes_);
  if (from.data().size() > 0) {
    set_data(from.data());
  }
  if (from.message_id().size() > 0) {
    set_message_id(from.message_id());
  }
  if (from.has_publish_time()) {
    mutable_publish_time()->::google::protobuf::Timestamp::MergeFrom(from.publish_time());
  }
}

void PubsubMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.PubsubMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PubsubMessage::CopyFrom(const PubsubMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.PubsubMessage)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PubsubMessage::IsInitialized() const {

  return true;
}

void PubsubMessage::Swap(PubsubMessage* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PubsubMessage temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void PubsubMessage::UnsafeArenaSwap(PubsubMessage* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PubsubMessage::InternalSwap(PubsubMessage* other) {
  data_.Swap(&other->data_);
  attributes_.Swap(&other->attributes_);
  message_id_.Swap(&other->message_id_);
  std::swap(publish_time_, other->publish_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PubsubMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PubsubMessage_descriptor_;
  metadata.reflection = PubsubMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PubsubMessage

// optional bytes data = 1;
void PubsubMessage::clear_data() {
  data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& PubsubMessage::data() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PubsubMessage.data)
  return data_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PubsubMessage::set_data(const ::std::string& value) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.PubsubMessage.data)
}
void PubsubMessage::set_data(const char* value) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.PubsubMessage.data)
}
void PubsubMessage::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.PubsubMessage.data)
}
::std::string* PubsubMessage::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PubsubMessage.data)
  return data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PubsubMessage::release_data() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.PubsubMessage.data)
  
  return data_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PubsubMessage::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.PubsubMessage.data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void PubsubMessage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.PubsubMessage.data)
}
void PubsubMessage::unsafe_arena_set_allocated_data(
    ::std::string* data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (data != NULL) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.PubsubMessage.data)
}

// map<string, string> attributes = 2;
int PubsubMessage::attributes_size() const {
  return attributes_.size();
}
void PubsubMessage::clear_attributes() {
  attributes_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
PubsubMessage::attributes() const {
  // @@protoc_insertion_point(field_map:google.pubsub.v1.PubsubMessage.attributes)
  return attributes_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
PubsubMessage::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_map:google.pubsub.v1.PubsubMessage.attributes)
  return attributes_.MutableMap();
}

// optional string message_id = 3;
void PubsubMessage::clear_message_id() {
  message_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& PubsubMessage::message_id() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PubsubMessage.message_id)
  return message_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PubsubMessage::set_message_id(const ::std::string& value) {
  
  message_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.PubsubMessage.message_id)
}
void PubsubMessage::set_message_id(const char* value) {
  
  message_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.PubsubMessage.message_id)
}
void PubsubMessage::set_message_id(const char* value,
    size_t size) {
  
  message_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.PubsubMessage.message_id)
}
::std::string* PubsubMessage::mutable_message_id() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PubsubMessage.message_id)
  return message_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PubsubMessage::release_message_id() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.PubsubMessage.message_id)
  
  return message_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PubsubMessage::unsafe_arena_release_message_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.PubsubMessage.message_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return message_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void PubsubMessage::set_allocated_message_id(::std::string* message_id) {
  if (message_id != NULL) {
    
  } else {
    
  }
  message_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.PubsubMessage.message_id)
}
void PubsubMessage::unsafe_arena_set_allocated_message_id(
    ::std::string* message_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (message_id != NULL) {
    
  } else {
    
  }
  message_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      message_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.PubsubMessage.message_id)
}

// optional .google.protobuf.Timestamp publish_time = 4;
bool PubsubMessage::has_publish_time() const {
  return this != internal_default_instance() && publish_time_ != NULL;
}
void PubsubMessage::clear_publish_time() {
  if (GetArenaNoVirtual() == NULL && publish_time_ != NULL) delete publish_time_;
  publish_time_ = NULL;
}
const ::google::protobuf::Timestamp& PubsubMessage::publish_time() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PubsubMessage.publish_time)
  return publish_time_ != NULL ? *publish_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* PubsubMessage::mutable_publish_time() {
  
  if (publish_time_ == NULL) {
    _slow_mutable_publish_time();
  }
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PubsubMessage.publish_time)
  return publish_time_;
}
::google::protobuf::Timestamp* PubsubMessage::release_publish_time() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.PubsubMessage.publish_time)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_publish_time();
  } else {
    ::google::protobuf::Timestamp* temp = publish_time_;
    publish_time_ = NULL;
    return temp;
  }
}
 void PubsubMessage::set_allocated_publish_time(::google::protobuf::Timestamp* publish_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete publish_time_;
  }
  if (publish_time != NULL) {
    _slow_set_allocated_publish_time(message_arena, &publish_time);
  }
  publish_time_ = publish_time;
  if (publish_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.PubsubMessage.publish_time)
}

inline const PubsubMessage* PubsubMessage::internal_default_instance() {
  return &PubsubMessage_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTopicRequest::kTopicFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTopicRequest::GetTopicRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.GetTopicRequest)
}
GetTopicRequest::GetTopicRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.GetTopicRequest)
}

void GetTopicRequest::InitAsDefaultInstance() {
}

GetTopicRequest::GetTopicRequest(const GetTopicRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.GetTopicRequest)
}

void GetTopicRequest::SharedCtor() {
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetTopicRequest::~GetTopicRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.GetTopicRequest)
  SharedDtor();
}

void GetTopicRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  topic_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void GetTopicRequest::ArenaDtor(void* object) {
  GetTopicRequest* _this = reinterpret_cast< GetTopicRequest* >(object);
  (void)_this;
}
void GetTopicRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetTopicRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTopicRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTopicRequest_descriptor_;
}

const GetTopicRequest& GetTopicRequest::default_instance() {
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetTopicRequest> GetTopicRequest_default_instance_;

GetTopicRequest* GetTopicRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetTopicRequest>(arena);
}

void GetTopicRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.GetTopicRequest)
  topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool GetTopicRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.GetTopicRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string topic = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.GetTopicRequest.topic"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.GetTopicRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.GetTopicRequest)
  return false;
#undef DO_
}

void GetTopicRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.GetTopicRequest)
  // optional string topic = 1;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.GetTopicRequest.topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->topic(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.GetTopicRequest)
}

::google::protobuf::uint8* GetTopicRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.GetTopicRequest)
  // optional string topic = 1;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.GetTopicRequest.topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->topic(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.GetTopicRequest)
  return target;
}

size_t GetTopicRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.GetTopicRequest)
  size_t total_size = 0;

  // optional string topic = 1;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTopicRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.GetTopicRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetTopicRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTopicRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.GetTopicRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.GetTopicRequest)
    UnsafeMergeFrom(*source);
  }
}

void GetTopicRequest::MergeFrom(const GetTopicRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.GetTopicRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetTopicRequest::UnsafeMergeFrom(const GetTopicRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.topic().size() > 0) {
    set_topic(from.topic());
  }
}

void GetTopicRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.GetTopicRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTopicRequest::CopyFrom(const GetTopicRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.GetTopicRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetTopicRequest::IsInitialized() const {

  return true;
}

void GetTopicRequest::Swap(GetTopicRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetTopicRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void GetTopicRequest::UnsafeArenaSwap(GetTopicRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetTopicRequest::InternalSwap(GetTopicRequest* other) {
  topic_.Swap(&other->topic_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetTopicRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTopicRequest_descriptor_;
  metadata.reflection = GetTopicRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetTopicRequest

// optional string topic = 1;
void GetTopicRequest::clear_topic() {
  topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetTopicRequest::topic() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.GetTopicRequest.topic)
  return topic_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetTopicRequest::set_topic(const ::std::string& value) {
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.GetTopicRequest.topic)
}
void GetTopicRequest::set_topic(const char* value) {
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.GetTopicRequest.topic)
}
void GetTopicRequest::set_topic(const char* value,
    size_t size) {
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.GetTopicRequest.topic)
}
::std::string* GetTopicRequest::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.GetTopicRequest.topic)
  return topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetTopicRequest::release_topic() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.GetTopicRequest.topic)
  
  return topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetTopicRequest::unsafe_arena_release_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.GetTopicRequest.topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetTopicRequest::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.GetTopicRequest.topic)
}
void GetTopicRequest::unsafe_arena_set_allocated_topic(
    ::std::string* topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.GetTopicRequest.topic)
}

inline const GetTopicRequest* GetTopicRequest::internal_default_instance() {
  return &GetTopicRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishRequest::kTopicFieldNumber;
const int PublishRequest::kMessagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishRequest::PublishRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.PublishRequest)
}
PublishRequest::PublishRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  messages_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.PublishRequest)
}

void PublishRequest::InitAsDefaultInstance() {
}

PublishRequest::PublishRequest(const PublishRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.PublishRequest)
}

void PublishRequest::SharedCtor() {
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

PublishRequest::~PublishRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.PublishRequest)
  SharedDtor();
}

void PublishRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  topic_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void PublishRequest::ArenaDtor(void* object) {
  PublishRequest* _this = reinterpret_cast< PublishRequest* >(object);
  (void)_this;
}
void PublishRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PublishRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PublishRequest_descriptor_;
}

const PublishRequest& PublishRequest::default_instance() {
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PublishRequest> PublishRequest_default_instance_;

PublishRequest* PublishRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<PublishRequest>(arena);
}

void PublishRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.PublishRequest)
  topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  messages_.Clear();
}

bool PublishRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.PublishRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string topic = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.PublishRequest.topic"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_messages;
        break;
      }

      // repeated .google.pubsub.v1.PubsubMessage messages = 2;
      case 2: {
        if (tag == 18) {
         parse_messages:
          DO_(input->IncrementRecursionDepth());
         parse_loop_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_messages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_messages;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.PublishRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.PublishRequest)
  return false;
#undef DO_
}

void PublishRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.PublishRequest)
  // optional string topic = 1;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PublishRequest.topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->topic(), output);
  }

  // repeated .google.pubsub.v1.PubsubMessage messages = 2;
  for (unsigned int i = 0, n = this->messages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->messages(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.PublishRequest)
}

::google::protobuf::uint8* PublishRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.PublishRequest)
  // optional string topic = 1;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PublishRequest.topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->topic(), target);
  }

  // repeated .google.pubsub.v1.PubsubMessage messages = 2;
  for (unsigned int i = 0, n = this->messages_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->messages(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.PublishRequest)
  return target;
}

size_t PublishRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.PublishRequest)
  size_t total_size = 0;

  // optional string topic = 1;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic());
  }

  // repeated .google.pubsub.v1.PubsubMessage messages = 2;
  {
    unsigned int count = this->messages_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->messages(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.PublishRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PublishRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublishRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.PublishRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.PublishRequest)
    UnsafeMergeFrom(*source);
  }
}

void PublishRequest::MergeFrom(const PublishRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.PublishRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PublishRequest::UnsafeMergeFrom(const PublishRequest& from) {
  GOOGLE_DCHECK(&from != this);
  messages_.MergeFrom(from.messages_);
  if (from.topic().size() > 0) {
    set_topic(from.topic());
  }
}

void PublishRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.PublishRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishRequest::CopyFrom(const PublishRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.PublishRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PublishRequest::IsInitialized() const {

  return true;
}

void PublishRequest::Swap(PublishRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PublishRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void PublishRequest::UnsafeArenaSwap(PublishRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PublishRequest::InternalSwap(PublishRequest* other) {
  topic_.Swap(&other->topic_);
  messages_.UnsafeArenaSwap(&other->messages_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PublishRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PublishRequest_descriptor_;
  metadata.reflection = PublishRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PublishRequest

// optional string topic = 1;
void PublishRequest::clear_topic() {
  topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& PublishRequest::topic() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PublishRequest.topic)
  return topic_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PublishRequest::set_topic(const ::std::string& value) {
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.PublishRequest.topic)
}
void PublishRequest::set_topic(const char* value) {
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.PublishRequest.topic)
}
void PublishRequest::set_topic(const char* value,
    size_t size) {
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.PublishRequest.topic)
}
::std::string* PublishRequest::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PublishRequest.topic)
  return topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PublishRequest::release_topic() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.PublishRequest.topic)
  
  return topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PublishRequest::unsafe_arena_release_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.PublishRequest.topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void PublishRequest::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.PublishRequest.topic)
}
void PublishRequest::unsafe_arena_set_allocated_topic(
    ::std::string* topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.PublishRequest.topic)
}

// repeated .google.pubsub.v1.PubsubMessage messages = 2;
int PublishRequest::messages_size() const {
  return messages_.size();
}
void PublishRequest::clear_messages() {
  messages_.Clear();
}
const ::google::pubsub::v1::PubsubMessage& PublishRequest::messages(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PublishRequest.messages)
  return messages_.Get(index);
}
::google::pubsub::v1::PubsubMessage* PublishRequest::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PublishRequest.messages)
  return messages_.Mutable(index);
}
::google::pubsub::v1::PubsubMessage* PublishRequest::add_messages() {
  // @@protoc_insertion_point(field_add:google.pubsub.v1.PublishRequest.messages)
  return messages_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::PubsubMessage >*
PublishRequest::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.PublishRequest.messages)
  return &messages_;
}
const ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::PubsubMessage >&
PublishRequest::messages() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.PublishRequest.messages)
  return messages_;
}

inline const PublishRequest* PublishRequest::internal_default_instance() {
  return &PublishRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishResponse::kMessageIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishResponse::PublishResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.PublishResponse)
}
PublishResponse::PublishResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  message_ids_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.PublishResponse)
}

void PublishResponse::InitAsDefaultInstance() {
}

PublishResponse::PublishResponse(const PublishResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.PublishResponse)
}

void PublishResponse::SharedCtor() {
  _cached_size_ = 0;
}

PublishResponse::~PublishResponse() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.PublishResponse)
  SharedDtor();
}

void PublishResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void PublishResponse::ArenaDtor(void* object) {
  PublishResponse* _this = reinterpret_cast< PublishResponse* >(object);
  (void)_this;
}
void PublishResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PublishResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PublishResponse_descriptor_;
}

const PublishResponse& PublishResponse::default_instance() {
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PublishResponse> PublishResponse_default_instance_;

PublishResponse* PublishResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<PublishResponse>(arena);
}

void PublishResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.PublishResponse)
  message_ids_.Clear();
}

bool PublishResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.PublishResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string message_ids = 1;
      case 1: {
        if (tag == 10) {
         parse_message_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_message_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message_ids(this->message_ids_size() - 1).data(),
            this->message_ids(this->message_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.PublishResponse.message_ids"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_message_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.PublishResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.PublishResponse)
  return false;
#undef DO_
}

void PublishResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.PublishResponse)
  // repeated string message_ids = 1;
  for (int i = 0; i < this->message_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_ids(i).data(), this->message_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PublishResponse.message_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->message_ids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.PublishResponse)
}

::google::protobuf::uint8* PublishResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.PublishResponse)
  // repeated string message_ids = 1;
  for (int i = 0; i < this->message_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_ids(i).data(), this->message_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PublishResponse.message_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->message_ids(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.PublishResponse)
  return target;
}

size_t PublishResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.PublishResponse)
  size_t total_size = 0;

  // repeated string message_ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->message_ids_size());
  for (int i = 0; i < this->message_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->message_ids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.PublishResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PublishResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublishResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.PublishResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.PublishResponse)
    UnsafeMergeFrom(*source);
  }
}

void PublishResponse::MergeFrom(const PublishResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.PublishResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PublishResponse::UnsafeMergeFrom(const PublishResponse& from) {
  GOOGLE_DCHECK(&from != this);
  message_ids_.UnsafeMergeFrom(from.message_ids_);
}

void PublishResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.PublishResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishResponse::CopyFrom(const PublishResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.PublishResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PublishResponse::IsInitialized() const {

  return true;
}

void PublishResponse::Swap(PublishResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PublishResponse temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void PublishResponse::UnsafeArenaSwap(PublishResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PublishResponse::InternalSwap(PublishResponse* other) {
  message_ids_.UnsafeArenaSwap(&other->message_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PublishResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PublishResponse_descriptor_;
  metadata.reflection = PublishResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PublishResponse

// repeated string message_ids = 1;
int PublishResponse::message_ids_size() const {
  return message_ids_.size();
}
void PublishResponse::clear_message_ids() {
  message_ids_.Clear();
}
const ::std::string& PublishResponse::message_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PublishResponse.message_ids)
  return message_ids_.Get(index);
}
::std::string* PublishResponse::mutable_message_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PublishResponse.message_ids)
  return message_ids_.Mutable(index);
}
void PublishResponse::set_message_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.pubsub.v1.PublishResponse.message_ids)
  message_ids_.Mutable(index)->assign(value);
}
void PublishResponse::set_message_ids(int index, const char* value) {
  message_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.PublishResponse.message_ids)
}
void PublishResponse::set_message_ids(int index, const char* value, size_t size) {
  message_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.PublishResponse.message_ids)
}
::std::string* PublishResponse::add_message_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.pubsub.v1.PublishResponse.message_ids)
  return message_ids_.Add();
}
void PublishResponse::add_message_ids(const ::std::string& value) {
  message_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.pubsub.v1.PublishResponse.message_ids)
}
void PublishResponse::add_message_ids(const char* value) {
  message_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.pubsub.v1.PublishResponse.message_ids)
}
void PublishResponse::add_message_ids(const char* value, size_t size) {
  message_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.pubsub.v1.PublishResponse.message_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
PublishResponse::message_ids() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.PublishResponse.message_ids)
  return message_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
PublishResponse::mutable_message_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.PublishResponse.message_ids)
  return &message_ids_;
}

inline const PublishResponse* PublishResponse::internal_default_instance() {
  return &PublishResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListTopicsRequest::kProjectFieldNumber;
const int ListTopicsRequest::kPageSizeFieldNumber;
const int ListTopicsRequest::kPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListTopicsRequest::ListTopicsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ListTopicsRequest)
}
ListTopicsRequest::ListTopicsRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ListTopicsRequest)
}

void ListTopicsRequest::InitAsDefaultInstance() {
}

ListTopicsRequest::ListTopicsRequest(const ListTopicsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ListTopicsRequest)
}

void ListTopicsRequest::SharedCtor() {
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
  _cached_size_ = 0;
}

ListTopicsRequest::~ListTopicsRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ListTopicsRequest)
  SharedDtor();
}

void ListTopicsRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  project_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  page_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void ListTopicsRequest::ArenaDtor(void* object) {
  ListTopicsRequest* _this = reinterpret_cast< ListTopicsRequest* >(object);
  (void)_this;
}
void ListTopicsRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ListTopicsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListTopicsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListTopicsRequest_descriptor_;
}

const ListTopicsRequest& ListTopicsRequest::default_instance() {
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ListTopicsRequest> ListTopicsRequest_default_instance_;

ListTopicsRequest* ListTopicsRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ListTopicsRequest>(arena);
}

void ListTopicsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ListTopicsRequest)
  project_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_size_ = 0;
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool ListTopicsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.ListTopicsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string project = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project().data(), this->project().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ListTopicsRequest.project"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_page_size;
        break;
      }

      // optional int32 page_size = 2;
      case 2: {
        if (tag == 16) {
         parse_page_size:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_page_token;
        break;
      }

      // optional string page_token = 3;
      case 3: {
        if (tag == 26) {
         parse_page_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), this->page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ListTopicsRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.ListTopicsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.ListTopicsRequest)
  return false;
#undef DO_
}

void ListTopicsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.ListTopicsRequest)
  // optional string project = 1;
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), this->project().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicsRequest.project");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project(), output);
  }

  // optional int32 page_size = 2;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page_size(), output);
  }

  // optional string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicsRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.ListTopicsRequest)
}

::google::protobuf::uint8* ListTopicsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ListTopicsRequest)
  // optional string project = 1;
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), this->project().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicsRequest.project");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project(), target);
  }

  // optional int32 page_size = 2;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page_size(), target);
  }

  // optional string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicsRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ListTopicsRequest)
  return target;
}

size_t ListTopicsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ListTopicsRequest)
  size_t total_size = 0;

  // optional string project = 1;
  if (this->project().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project());
  }

  // optional int32 page_size = 2;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  // optional string page_token = 3;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListTopicsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ListTopicsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListTopicsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListTopicsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ListTopicsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ListTopicsRequest)
    UnsafeMergeFrom(*source);
  }
}

void ListTopicsRequest::MergeFrom(const ListTopicsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ListTopicsRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ListTopicsRequest::UnsafeMergeFrom(const ListTopicsRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.project().size() > 0) {
    set_project(from.project());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
  if (from.page_token().size() > 0) {
    set_page_token(from.page_token());
  }
}

void ListTopicsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ListTopicsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTopicsRequest::CopyFrom(const ListTopicsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ListTopicsRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ListTopicsRequest::IsInitialized() const {

  return true;
}

void ListTopicsRequest::Swap(ListTopicsRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListTopicsRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ListTopicsRequest::UnsafeArenaSwap(ListTopicsRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListTopicsRequest::InternalSwap(ListTopicsRequest* other) {
  project_.Swap(&other->project_);
  std::swap(page_size_, other->page_size_);
  page_token_.Swap(&other->page_token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListTopicsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListTopicsRequest_descriptor_;
  metadata.reflection = ListTopicsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListTopicsRequest

// optional string project = 1;
void ListTopicsRequest::clear_project() {
  project_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ListTopicsRequest::project() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicsRequest.project)
  return project_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListTopicsRequest::set_project(const ::std::string& value) {
  
  project_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicsRequest.project)
}
void ListTopicsRequest::set_project(const char* value) {
  
  project_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ListTopicsRequest.project)
}
void ListTopicsRequest::set_project(const char* value,
    size_t size) {
  
  project_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ListTopicsRequest.project)
}
::std::string* ListTopicsRequest::mutable_project() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListTopicsRequest.project)
  return project_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListTopicsRequest::release_project() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListTopicsRequest.project)
  
  return project_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListTopicsRequest::unsafe_arena_release_project() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ListTopicsRequest.project)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return project_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ListTopicsRequest::set_allocated_project(::std::string* project) {
  if (project != NULL) {
    
  } else {
    
  }
  project_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListTopicsRequest.project)
}
void ListTopicsRequest::unsafe_arena_set_allocated_project(
    ::std::string* project) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (project != NULL) {
    
  } else {
    
  }
  project_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      project, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ListTopicsRequest.project)
}

// optional int32 page_size = 2;
void ListTopicsRequest::clear_page_size() {
  page_size_ = 0;
}
::google::protobuf::int32 ListTopicsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicsRequest.page_size)
  return page_size_;
}
void ListTopicsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicsRequest.page_size)
}

// optional string page_token = 3;
void ListTopicsRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ListTopicsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicsRequest.page_token)
  return page_token_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListTopicsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicsRequest.page_token)
}
void ListTopicsRequest::set_page_token(const char* value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ListTopicsRequest.page_token)
}
void ListTopicsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ListTopicsRequest.page_token)
}
::std::string* ListTopicsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListTopicsRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListTopicsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListTopicsRequest.page_token)
  
  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListTopicsRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ListTopicsRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ListTopicsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListTopicsRequest.page_token)
}
void ListTopicsRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ListTopicsRequest.page_token)
}

inline const ListTopicsRequest* ListTopicsRequest::internal_default_instance() {
  return &ListTopicsRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListTopicsResponse::kTopicsFieldNumber;
const int ListTopicsResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListTopicsResponse::ListTopicsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ListTopicsResponse)
}
ListTopicsResponse::ListTopicsResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  topics_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ListTopicsResponse)
}

void ListTopicsResponse::InitAsDefaultInstance() {
}

ListTopicsResponse::ListTopicsResponse(const ListTopicsResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ListTopicsResponse)
}

void ListTopicsResponse::SharedCtor() {
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ListTopicsResponse::~ListTopicsResponse() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ListTopicsResponse)
  SharedDtor();
}

void ListTopicsResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  next_page_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void ListTopicsResponse::ArenaDtor(void* object) {
  ListTopicsResponse* _this = reinterpret_cast< ListTopicsResponse* >(object);
  (void)_this;
}
void ListTopicsResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ListTopicsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListTopicsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListTopicsResponse_descriptor_;
}

const ListTopicsResponse& ListTopicsResponse::default_instance() {
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ListTopicsResponse> ListTopicsResponse_default_instance_;

ListTopicsResponse* ListTopicsResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ListTopicsResponse>(arena);
}

void ListTopicsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ListTopicsResponse)
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  topics_.Clear();
}

bool ListTopicsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.ListTopicsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.pubsub.v1.Topic topics = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_topics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_topics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_topics;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_next_page_token;
        break;
      }

      // optional string next_page_token = 2;
      case 2: {
        if (tag == 18) {
         parse_next_page_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), this->next_page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ListTopicsResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.ListTopicsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.ListTopicsResponse)
  return false;
#undef DO_
}

void ListTopicsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.ListTopicsResponse)
  // repeated .google.pubsub.v1.Topic topics = 1;
  for (unsigned int i = 0, n = this->topics_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->topics(i), output);
  }

  // optional string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicsResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.ListTopicsResponse)
}

::google::protobuf::uint8* ListTopicsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ListTopicsResponse)
  // repeated .google.pubsub.v1.Topic topics = 1;
  for (unsigned int i = 0, n = this->topics_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->topics(i), false, target);
  }

  // optional string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicsResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ListTopicsResponse)
  return target;
}

size_t ListTopicsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ListTopicsResponse)
  size_t total_size = 0;

  // optional string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  // repeated .google.pubsub.v1.Topic topics = 1;
  {
    unsigned int count = this->topics_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->topics(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListTopicsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ListTopicsResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListTopicsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListTopicsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ListTopicsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ListTopicsResponse)
    UnsafeMergeFrom(*source);
  }
}

void ListTopicsResponse::MergeFrom(const ListTopicsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ListTopicsResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ListTopicsResponse::UnsafeMergeFrom(const ListTopicsResponse& from) {
  GOOGLE_DCHECK(&from != this);
  topics_.MergeFrom(from.topics_);
  if (from.next_page_token().size() > 0) {
    set_next_page_token(from.next_page_token());
  }
}

void ListTopicsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ListTopicsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTopicsResponse::CopyFrom(const ListTopicsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ListTopicsResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ListTopicsResponse::IsInitialized() const {

  return true;
}

void ListTopicsResponse::Swap(ListTopicsResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListTopicsResponse temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ListTopicsResponse::UnsafeArenaSwap(ListTopicsResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListTopicsResponse::InternalSwap(ListTopicsResponse* other) {
  topics_.UnsafeArenaSwap(&other->topics_);
  next_page_token_.Swap(&other->next_page_token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListTopicsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListTopicsResponse_descriptor_;
  metadata.reflection = ListTopicsResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListTopicsResponse

// repeated .google.pubsub.v1.Topic topics = 1;
int ListTopicsResponse::topics_size() const {
  return topics_.size();
}
void ListTopicsResponse::clear_topics() {
  topics_.Clear();
}
const ::google::pubsub::v1::Topic& ListTopicsResponse::topics(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicsResponse.topics)
  return topics_.Get(index);
}
::google::pubsub::v1::Topic* ListTopicsResponse::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListTopicsResponse.topics)
  return topics_.Mutable(index);
}
::google::pubsub::v1::Topic* ListTopicsResponse::add_topics() {
  // @@protoc_insertion_point(field_add:google.pubsub.v1.ListTopicsResponse.topics)
  return topics_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::Topic >*
ListTopicsResponse::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.ListTopicsResponse.topics)
  return &topics_;
}
const ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::Topic >&
ListTopicsResponse::topics() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.ListTopicsResponse.topics)
  return topics_;
}

// optional string next_page_token = 2;
void ListTopicsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ListTopicsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicsResponse.next_page_token)
  return next_page_token_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListTopicsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicsResponse.next_page_token)
}
void ListTopicsResponse::set_next_page_token(const char* value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ListTopicsResponse.next_page_token)
}
void ListTopicsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ListTopicsResponse.next_page_token)
}
::std::string* ListTopicsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListTopicsResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListTopicsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListTopicsResponse.next_page_token)
  
  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListTopicsResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ListTopicsResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ListTopicsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListTopicsResponse.next_page_token)
}
void ListTopicsResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ListTopicsResponse.next_page_token)
}

inline const ListTopicsResponse* ListTopicsResponse::internal_default_instance() {
  return &ListTopicsResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListTopicSubscriptionsRequest::kTopicFieldNumber;
const int ListTopicSubscriptionsRequest::kPageSizeFieldNumber;
const int ListTopicSubscriptionsRequest::kPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListTopicSubscriptionsRequest::ListTopicSubscriptionsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ListTopicSubscriptionsRequest)
}
ListTopicSubscriptionsRequest::ListTopicSubscriptionsRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ListTopicSubscriptionsRequest)
}

void ListTopicSubscriptionsRequest::InitAsDefaultInstance() {
}

ListTopicSubscriptionsRequest::ListTopicSubscriptionsRequest(const ListTopicSubscriptionsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ListTopicSubscriptionsRequest)
}

void ListTopicSubscriptionsRequest::SharedCtor() {
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
  _cached_size_ = 0;
}

ListTopicSubscriptionsRequest::~ListTopicSubscriptionsRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ListTopicSubscriptionsRequest)
  SharedDtor();
}

void ListTopicSubscriptionsRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  topic_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  page_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void ListTopicSubscriptionsRequest::ArenaDtor(void* object) {
  ListTopicSubscriptionsRequest* _this = reinterpret_cast< ListTopicSubscriptionsRequest* >(object);
  (void)_this;
}
void ListTopicSubscriptionsRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ListTopicSubscriptionsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListTopicSubscriptionsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListTopicSubscriptionsRequest_descriptor_;
}

const ListTopicSubscriptionsRequest& ListTopicSubscriptionsRequest::default_instance() {
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ListTopicSubscriptionsRequest> ListTopicSubscriptionsRequest_default_instance_;

ListTopicSubscriptionsRequest* ListTopicSubscriptionsRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ListTopicSubscriptionsRequest>(arena);
}

void ListTopicSubscriptionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ListTopicSubscriptionsRequest)
  topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_size_ = 0;
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool ListTopicSubscriptionsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.ListTopicSubscriptionsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string topic = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ListTopicSubscriptionsRequest.topic"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_page_size;
        break;
      }

      // optional int32 page_size = 2;
      case 2: {
        if (tag == 16) {
         parse_page_size:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_page_token;
        break;
      }

      // optional string page_token = 3;
      case 3: {
        if (tag == 26) {
         parse_page_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), this->page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ListTopicSubscriptionsRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.ListTopicSubscriptionsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.ListTopicSubscriptionsRequest)
  return false;
#undef DO_
}

void ListTopicSubscriptionsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.ListTopicSubscriptionsRequest)
  // optional string topic = 1;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicSubscriptionsRequest.topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->topic(), output);
  }

  // optional int32 page_size = 2;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page_size(), output);
  }

  // optional string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicSubscriptionsRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.ListTopicSubscriptionsRequest)
}

::google::protobuf::uint8* ListTopicSubscriptionsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ListTopicSubscriptionsRequest)
  // optional string topic = 1;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicSubscriptionsRequest.topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->topic(), target);
  }

  // optional int32 page_size = 2;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page_size(), target);
  }

  // optional string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicSubscriptionsRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ListTopicSubscriptionsRequest)
  return target;
}

size_t ListTopicSubscriptionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ListTopicSubscriptionsRequest)
  size_t total_size = 0;

  // optional string topic = 1;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic());
  }

  // optional int32 page_size = 2;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  // optional string page_token = 3;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListTopicSubscriptionsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ListTopicSubscriptionsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListTopicSubscriptionsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListTopicSubscriptionsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ListTopicSubscriptionsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ListTopicSubscriptionsRequest)
    UnsafeMergeFrom(*source);
  }
}

void ListTopicSubscriptionsRequest::MergeFrom(const ListTopicSubscriptionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ListTopicSubscriptionsRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ListTopicSubscriptionsRequest::UnsafeMergeFrom(const ListTopicSubscriptionsRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.topic().size() > 0) {
    set_topic(from.topic());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
  if (from.page_token().size() > 0) {
    set_page_token(from.page_token());
  }
}

void ListTopicSubscriptionsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ListTopicSubscriptionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTopicSubscriptionsRequest::CopyFrom(const ListTopicSubscriptionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ListTopicSubscriptionsRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ListTopicSubscriptionsRequest::IsInitialized() const {

  return true;
}

void ListTopicSubscriptionsRequest::Swap(ListTopicSubscriptionsRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListTopicSubscriptionsRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ListTopicSubscriptionsRequest::UnsafeArenaSwap(ListTopicSubscriptionsRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListTopicSubscriptionsRequest::InternalSwap(ListTopicSubscriptionsRequest* other) {
  topic_.Swap(&other->topic_);
  std::swap(page_size_, other->page_size_);
  page_token_.Swap(&other->page_token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListTopicSubscriptionsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListTopicSubscriptionsRequest_descriptor_;
  metadata.reflection = ListTopicSubscriptionsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListTopicSubscriptionsRequest

// optional string topic = 1;
void ListTopicSubscriptionsRequest::clear_topic() {
  topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ListTopicSubscriptionsRequest::topic() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicSubscriptionsRequest.topic)
  return topic_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListTopicSubscriptionsRequest::set_topic(const ::std::string& value) {
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicSubscriptionsRequest.topic)
}
void ListTopicSubscriptionsRequest::set_topic(const char* value) {
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ListTopicSubscriptionsRequest.topic)
}
void ListTopicSubscriptionsRequest::set_topic(const char* value,
    size_t size) {
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ListTopicSubscriptionsRequest.topic)
}
::std::string* ListTopicSubscriptionsRequest::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListTopicSubscriptionsRequest.topic)
  return topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListTopicSubscriptionsRequest::release_topic() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListTopicSubscriptionsRequest.topic)
  
  return topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListTopicSubscriptionsRequest::unsafe_arena_release_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ListTopicSubscriptionsRequest.topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ListTopicSubscriptionsRequest::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListTopicSubscriptionsRequest.topic)
}
void ListTopicSubscriptionsRequest::unsafe_arena_set_allocated_topic(
    ::std::string* topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ListTopicSubscriptionsRequest.topic)
}

// optional int32 page_size = 2;
void ListTopicSubscriptionsRequest::clear_page_size() {
  page_size_ = 0;
}
::google::protobuf::int32 ListTopicSubscriptionsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicSubscriptionsRequest.page_size)
  return page_size_;
}
void ListTopicSubscriptionsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicSubscriptionsRequest.page_size)
}

// optional string page_token = 3;
void ListTopicSubscriptionsRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ListTopicSubscriptionsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicSubscriptionsRequest.page_token)
  return page_token_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListTopicSubscriptionsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicSubscriptionsRequest.page_token)
}
void ListTopicSubscriptionsRequest::set_page_token(const char* value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ListTopicSubscriptionsRequest.page_token)
}
void ListTopicSubscriptionsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ListTopicSubscriptionsRequest.page_token)
}
::std::string* ListTopicSubscriptionsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListTopicSubscriptionsRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListTopicSubscriptionsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListTopicSubscriptionsRequest.page_token)
  
  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListTopicSubscriptionsRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ListTopicSubscriptionsRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ListTopicSubscriptionsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListTopicSubscriptionsRequest.page_token)
}
void ListTopicSubscriptionsRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ListTopicSubscriptionsRequest.page_token)
}

inline const ListTopicSubscriptionsRequest* ListTopicSubscriptionsRequest::internal_default_instance() {
  return &ListTopicSubscriptionsRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListTopicSubscriptionsResponse::kSubscriptionsFieldNumber;
const int ListTopicSubscriptionsResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListTopicSubscriptionsResponse::ListTopicSubscriptionsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ListTopicSubscriptionsResponse)
}
ListTopicSubscriptionsResponse::ListTopicSubscriptionsResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  subscriptions_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ListTopicSubscriptionsResponse)
}

void ListTopicSubscriptionsResponse::InitAsDefaultInstance() {
}

ListTopicSubscriptionsResponse::ListTopicSubscriptionsResponse(const ListTopicSubscriptionsResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ListTopicSubscriptionsResponse)
}

void ListTopicSubscriptionsResponse::SharedCtor() {
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ListTopicSubscriptionsResponse::~ListTopicSubscriptionsResponse() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ListTopicSubscriptionsResponse)
  SharedDtor();
}

void ListTopicSubscriptionsResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  next_page_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void ListTopicSubscriptionsResponse::ArenaDtor(void* object) {
  ListTopicSubscriptionsResponse* _this = reinterpret_cast< ListTopicSubscriptionsResponse* >(object);
  (void)_this;
}
void ListTopicSubscriptionsResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ListTopicSubscriptionsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListTopicSubscriptionsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListTopicSubscriptionsResponse_descriptor_;
}

const ListTopicSubscriptionsResponse& ListTopicSubscriptionsResponse::default_instance() {
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ListTopicSubscriptionsResponse> ListTopicSubscriptionsResponse_default_instance_;

ListTopicSubscriptionsResponse* ListTopicSubscriptionsResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ListTopicSubscriptionsResponse>(arena);
}

void ListTopicSubscriptionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ListTopicSubscriptionsResponse)
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  subscriptions_.Clear();
}

bool ListTopicSubscriptionsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.ListTopicSubscriptionsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string subscriptions = 1;
      case 1: {
        if (tag == 10) {
         parse_subscriptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_subscriptions()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subscriptions(this->subscriptions_size() - 1).data(),
            this->subscriptions(this->subscriptions_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_subscriptions;
        if (input->ExpectTag(18)) goto parse_next_page_token;
        break;
      }

      // optional string next_page_token = 2;
      case 2: {
        if (tag == 18) {
         parse_next_page_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), this->next_page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.ListTopicSubscriptionsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.ListTopicSubscriptionsResponse)
  return false;
#undef DO_
}

void ListTopicSubscriptionsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.ListTopicSubscriptionsResponse)
  // repeated string subscriptions = 1;
  for (int i = 0; i < this->subscriptions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscriptions(i).data(), this->subscriptions(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->subscriptions(i), output);
  }

  // optional string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.ListTopicSubscriptionsResponse)
}

::google::protobuf::uint8* ListTopicSubscriptionsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ListTopicSubscriptionsResponse)
  // repeated string subscriptions = 1;
  for (int i = 0; i < this->subscriptions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscriptions(i).data(), this->subscriptions(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->subscriptions(i), target);
  }

  // optional string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ListTopicSubscriptionsResponse)
  return target;
}

size_t ListTopicSubscriptionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ListTopicSubscriptionsResponse)
  size_t total_size = 0;

  // optional string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  // repeated string subscriptions = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->subscriptions_size());
  for (int i = 0; i < this->subscriptions_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->subscriptions(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListTopicSubscriptionsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ListTopicSubscriptionsResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListTopicSubscriptionsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListTopicSubscriptionsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ListTopicSubscriptionsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ListTopicSubscriptionsResponse)
    UnsafeMergeFrom(*source);
  }
}

void ListTopicSubscriptionsResponse::MergeFrom(const ListTopicSubscriptionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ListTopicSubscriptionsResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ListTopicSubscriptionsResponse::UnsafeMergeFrom(const ListTopicSubscriptionsResponse& from) {
  GOOGLE_DCHECK(&from != this);
  subscriptions_.UnsafeMergeFrom(from.subscriptions_);
  if (from.next_page_token().size() > 0) {
    set_next_page_token(from.next_page_token());
  }
}

void ListTopicSubscriptionsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ListTopicSubscriptionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTopicSubscriptionsResponse::CopyFrom(const ListTopicSubscriptionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ListTopicSubscriptionsResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ListTopicSubscriptionsResponse::IsInitialized() const {

  return true;
}

void ListTopicSubscriptionsResponse::Swap(ListTopicSubscriptionsResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListTopicSubscriptionsResponse temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ListTopicSubscriptionsResponse::UnsafeArenaSwap(ListTopicSubscriptionsResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListTopicSubscriptionsResponse::InternalSwap(ListTopicSubscriptionsResponse* other) {
  subscriptions_.UnsafeArenaSwap(&other->subscriptions_);
  next_page_token_.Swap(&other->next_page_token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListTopicSubscriptionsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListTopicSubscriptionsResponse_descriptor_;
  metadata.reflection = ListTopicSubscriptionsResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListTopicSubscriptionsResponse

// repeated string subscriptions = 1;
int ListTopicSubscriptionsResponse::subscriptions_size() const {
  return subscriptions_.size();
}
void ListTopicSubscriptionsResponse::clear_subscriptions() {
  subscriptions_.Clear();
}
const ::std::string& ListTopicSubscriptionsResponse::subscriptions(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
  return subscriptions_.Get(index);
}
::std::string* ListTopicSubscriptionsResponse::mutable_subscriptions(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
  return subscriptions_.Mutable(index);
}
void ListTopicSubscriptionsResponse::set_subscriptions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
  subscriptions_.Mutable(index)->assign(value);
}
void ListTopicSubscriptionsResponse::set_subscriptions(int index, const char* value) {
  subscriptions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
}
void ListTopicSubscriptionsResponse::set_subscriptions(int index, const char* value, size_t size) {
  subscriptions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
}
::std::string* ListTopicSubscriptionsResponse::add_subscriptions() {
  // @@protoc_insertion_point(field_add_mutable:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
  return subscriptions_.Add();
}
void ListTopicSubscriptionsResponse::add_subscriptions(const ::std::string& value) {
  subscriptions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
}
void ListTopicSubscriptionsResponse::add_subscriptions(const char* value) {
  subscriptions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
}
void ListTopicSubscriptionsResponse::add_subscriptions(const char* value, size_t size) {
  subscriptions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ListTopicSubscriptionsResponse::subscriptions() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
  return subscriptions_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ListTopicSubscriptionsResponse::mutable_subscriptions() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
  return &subscriptions_;
}

// optional string next_page_token = 2;
void ListTopicSubscriptionsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ListTopicSubscriptionsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token)
  return next_page_token_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListTopicSubscriptionsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token)
}
void ListTopicSubscriptionsResponse::set_next_page_token(const char* value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token)
}
void ListTopicSubscriptionsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token)
}
::std::string* ListTopicSubscriptionsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListTopicSubscriptionsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token)
  
  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListTopicSubscriptionsResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ListTopicSubscriptionsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token)
}
void ListTopicSubscriptionsResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token)
}

inline const ListTopicSubscriptionsResponse* ListTopicSubscriptionsResponse::internal_default_instance() {
  return &ListTopicSubscriptionsResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteTopicRequest::kTopicFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteTopicRequest::DeleteTopicRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.DeleteTopicRequest)
}
DeleteTopicRequest::DeleteTopicRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.DeleteTopicRequest)
}

void DeleteTopicRequest::InitAsDefaultInstance() {
}

DeleteTopicRequest::DeleteTopicRequest(const DeleteTopicRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.DeleteTopicRequest)
}

void DeleteTopicRequest::SharedCtor() {
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DeleteTopicRequest::~DeleteTopicRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.DeleteTopicRequest)
  SharedDtor();
}

void DeleteTopicRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  topic_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void DeleteTopicRequest::ArenaDtor(void* object) {
  DeleteTopicRequest* _this = reinterpret_cast< DeleteTopicRequest* >(object);
  (void)_this;
}
void DeleteTopicRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DeleteTopicRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteTopicRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteTopicRequest_descriptor_;
}

const DeleteTopicRequest& DeleteTopicRequest::default_instance() {
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DeleteTopicRequest> DeleteTopicRequest_default_instance_;

DeleteTopicRequest* DeleteTopicRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DeleteTopicRequest>(arena);
}

void DeleteTopicRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.DeleteTopicRequest)
  topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool DeleteTopicRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.DeleteTopicRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string topic = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.DeleteTopicRequest.topic"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.DeleteTopicRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.DeleteTopicRequest)
  return false;
#undef DO_
}

void DeleteTopicRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.DeleteTopicRequest)
  // optional string topic = 1;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.DeleteTopicRequest.topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->topic(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.DeleteTopicRequest)
}

::google::protobuf::uint8* DeleteTopicRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.DeleteTopicRequest)
  // optional string topic = 1;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.DeleteTopicRequest.topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->topic(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.DeleteTopicRequest)
  return target;
}

size_t DeleteTopicRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.DeleteTopicRequest)
  size_t total_size = 0;

  // optional string topic = 1;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteTopicRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.DeleteTopicRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DeleteTopicRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteTopicRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.DeleteTopicRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.DeleteTopicRequest)
    UnsafeMergeFrom(*source);
  }
}

void DeleteTopicRequest::MergeFrom(const DeleteTopicRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.DeleteTopicRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DeleteTopicRequest::UnsafeMergeFrom(const DeleteTopicRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.topic().size() > 0) {
    set_topic(from.topic());
  }
}

void DeleteTopicRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.DeleteTopicRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteTopicRequest::CopyFrom(const DeleteTopicRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.DeleteTopicRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DeleteTopicRequest::IsInitialized() const {

  return true;
}

void DeleteTopicRequest::Swap(DeleteTopicRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeleteTopicRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void DeleteTopicRequest::UnsafeArenaSwap(DeleteTopicRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeleteTopicRequest::InternalSwap(DeleteTopicRequest* other) {
  topic_.Swap(&other->topic_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteTopicRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteTopicRequest_descriptor_;
  metadata.reflection = DeleteTopicRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteTopicRequest

// optional string topic = 1;
void DeleteTopicRequest::clear_topic() {
  topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& DeleteTopicRequest::topic() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.DeleteTopicRequest.topic)
  return topic_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteTopicRequest::set_topic(const ::std::string& value) {
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.DeleteTopicRequest.topic)
}
void DeleteTopicRequest::set_topic(const char* value) {
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.DeleteTopicRequest.topic)
}
void DeleteTopicRequest::set_topic(const char* value,
    size_t size) {
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.DeleteTopicRequest.topic)
}
::std::string* DeleteTopicRequest::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.DeleteTopicRequest.topic)
  return topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeleteTopicRequest::release_topic() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.DeleteTopicRequest.topic)
  
  return topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeleteTopicRequest::unsafe_arena_release_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.DeleteTopicRequest.topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void DeleteTopicRequest::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.DeleteTopicRequest.topic)
}
void DeleteTopicRequest::unsafe_arena_set_allocated_topic(
    ::std::string* topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.DeleteTopicRequest.topic)
}

inline const DeleteTopicRequest* DeleteTopicRequest::internal_default_instance() {
  return &DeleteTopicRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void Subscription::_slow_mutable_push_config() {
  push_config_ = ::google::protobuf::Arena::CreateMessage< ::google::pubsub::v1::PushConfig >(
      GetArenaNoVirtual());
}
::google::pubsub::v1::PushConfig* Subscription::_slow_release_push_config() {
  if (push_config_ == NULL) {
    return NULL;
  } else {
    ::google::pubsub::v1::PushConfig* temp = new ::google::pubsub::v1::PushConfig(*push_config_);
    push_config_ = NULL;
    return temp;
  }
}
::google::pubsub::v1::PushConfig* Subscription::unsafe_arena_release_push_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.Subscription.push_config)
  
  ::google::pubsub::v1::PushConfig* temp = push_config_;
  push_config_ = NULL;
  return temp;
}
void Subscription::_slow_set_allocated_push_config(
    ::google::protobuf::Arena* message_arena, ::google::pubsub::v1::PushConfig** push_config) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*push_config) == NULL) {
      message_arena->Own(*push_config);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*push_config)) {
      ::google::pubsub::v1::PushConfig* new_push_config = 
            ::google::protobuf::Arena::CreateMessage< ::google::pubsub::v1::PushConfig >(
            message_arena);
      new_push_config->CopyFrom(**push_config);
      *push_config = new_push_config;
    }
}
void Subscription::unsafe_arena_set_allocated_push_config(
    ::google::pubsub::v1::PushConfig* push_config) {
  if (GetArenaNoVirtual() == NULL) {
    delete push_config_;
  }
  push_config_ = push_config;
  if (push_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Subscription.push_config)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Subscription::kNameFieldNumber;
const int Subscription::kTopicFieldNumber;
const int Subscription::kPushConfigFieldNumber;
const int Subscription::kAckDeadlineSecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Subscription::Subscription()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.Subscription)
}
Subscription::Subscription(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.Subscription)
}

void Subscription::InitAsDefaultInstance() {
  push_config_ = const_cast< ::google::pubsub::v1::PushConfig*>(
      ::google::pubsub::v1::PushConfig::internal_default_instance());
}

Subscription::Subscription(const Subscription& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.Subscription)
}

void Subscription::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  push_config_ = NULL;
  ack_deadline_seconds_ = 0;
  _cached_size_ = 0;
}

Subscription::~Subscription() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.Subscription)
  SharedDtor();
}

void Subscription::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  topic_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != &Subscription_default_instance_.get()) {
    delete push_config_;
  }
}

void Subscription::ArenaDtor(void* object) {
  Subscription* _this = reinterpret_cast< Subscription* >(object);
  (void)_this;
}
void Subscription::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Subscription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Subscription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Subscription_descriptor_;
}

const Subscription& Subscription::default_instance() {
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Subscription> Subscription_default_instance_;

Subscription* Subscription::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Subscription>(arena);
}

void Subscription::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.Subscription)
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && push_config_ != NULL) delete push_config_;
  push_config_ = NULL;
  ack_deadline_seconds_ = 0;
}

bool Subscription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.Subscription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.Subscription.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_topic;
        break;
      }

      // optional string topic = 2;
      case 2: {
        if (tag == 18) {
         parse_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.Subscription.topic"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_push_config;
        break;
      }

      // optional .google.pubsub.v1.PushConfig push_config = 4;
      case 4: {
        if (tag == 34) {
         parse_push_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_push_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ack_deadline_seconds;
        break;
      }

      // optional int32 ack_deadline_seconds = 5;
      case 5: {
        if (tag == 40) {
         parse_ack_deadline_seconds:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ack_deadline_seconds_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.Subscription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.Subscription)
  return false;
#undef DO_
}

void Subscription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.Subscription)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.Subscription.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string topic = 2;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.Subscription.topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->topic(), output);
  }

  // optional .google.pubsub.v1.PushConfig push_config = 4;
  if (this->has_push_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->push_config_, output);
  }

  // optional int32 ack_deadline_seconds = 5;
  if (this->ack_deadline_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ack_deadline_seconds(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.Subscription)
}

::google::protobuf::uint8* Subscription::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.Subscription)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.Subscription.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string topic = 2;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.Subscription.topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->topic(), target);
  }

  // optional .google.pubsub.v1.PushConfig push_config = 4;
  if (this->has_push_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->push_config_, false, target);
  }

  // optional int32 ack_deadline_seconds = 5;
  if (this->ack_deadline_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ack_deadline_seconds(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.Subscription)
  return target;
}

size_t Subscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.Subscription)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string topic = 2;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic());
  }

  // optional .google.pubsub.v1.PushConfig push_config = 4;
  if (this->has_push_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->push_config_);
  }

  // optional int32 ack_deadline_seconds = 5;
  if (this->ack_deadline_seconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ack_deadline_seconds());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Subscription::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.Subscription)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Subscription* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Subscription>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.Subscription)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.Subscription)
    UnsafeMergeFrom(*source);
  }
}

void Subscription::MergeFrom(const Subscription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.Subscription)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Subscription::UnsafeMergeFrom(const Subscription& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.topic().size() > 0) {
    set_topic(from.topic());
  }
  if (from.has_push_config()) {
    mutable_push_config()->::google::pubsub::v1::PushConfig::MergeFrom(from.push_config());
  }
  if (from.ack_deadline_seconds() != 0) {
    set_ack_deadline_seconds(from.ack_deadline_seconds());
  }
}

void Subscription::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.Subscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Subscription::CopyFrom(const Subscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.Subscription)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Subscription::IsInitialized() const {

  return true;
}

void Subscription::Swap(Subscription* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Subscription temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void Subscription::UnsafeArenaSwap(Subscription* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Subscription::InternalSwap(Subscription* other) {
  name_.Swap(&other->name_);
  topic_.Swap(&other->topic_);
  std::swap(push_config_, other->push_config_);
  std::swap(ack_deadline_seconds_, other->ack_deadline_seconds_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Subscription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Subscription_descriptor_;
  metadata.reflection = Subscription_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Subscription

// optional string name = 1;
void Subscription::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Subscription::name() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Subscription.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Subscription::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.Subscription.name)
}
void Subscription::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.Subscription.name)
}
void Subscription::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.Subscription.name)
}
::std::string* Subscription::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Subscription.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Subscription::release_name() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Subscription.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Subscription::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.Subscription.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Subscription::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Subscription.name)
}
void Subscription::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Subscription.name)
}

// optional string topic = 2;
void Subscription::clear_topic() {
  topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Subscription::topic() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Subscription.topic)
  return topic_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Subscription::set_topic(const ::std::string& value) {
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.Subscription.topic)
}
void Subscription::set_topic(const char* value) {
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.Subscription.topic)
}
void Subscription::set_topic(const char* value,
    size_t size) {
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.Subscription.topic)
}
::std::string* Subscription::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Subscription.topic)
  return topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Subscription::release_topic() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Subscription.topic)
  
  return topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Subscription::unsafe_arena_release_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.Subscription.topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Subscription::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Subscription.topic)
}
void Subscription::unsafe_arena_set_allocated_topic(
    ::std::string* topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Subscription.topic)
}

// optional .google.pubsub.v1.PushConfig push_config = 4;
bool Subscription::has_push_config() const {
  return this != internal_default_instance() && push_config_ != NULL;
}
void Subscription::clear_push_config() {
  if (GetArenaNoVirtual() == NULL && push_config_ != NULL) delete push_config_;
  push_config_ = NULL;
}
const ::google::pubsub::v1::PushConfig& Subscription::push_config() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Subscription.push_config)
  return push_config_ != NULL ? *push_config_
                         : *::google::pubsub::v1::PushConfig::internal_default_instance();
}
::google::pubsub::v1::PushConfig* Subscription::mutable_push_config() {
  
  if (push_config_ == NULL) {
    _slow_mutable_push_config();
  }
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Subscription.push_config)
  return push_config_;
}
::google::pubsub::v1::PushConfig* Subscription::release_push_config() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Subscription.push_config)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_push_config();
  } else {
    ::google::pubsub::v1::PushConfig* temp = push_config_;
    push_config_ = NULL;
    return temp;
  }
}
 void Subscription::set_allocated_push_config(::google::pubsub::v1::PushConfig* push_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete push_config_;
  }
  if (push_config != NULL) {
    _slow_set_allocated_push_config(message_arena, &push_config);
  }
  push_config_ = push_config;
  if (push_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Subscription.push_config)
}

// optional int32 ack_deadline_seconds = 5;
void Subscription::clear_ack_deadline_seconds() {
  ack_deadline_seconds_ = 0;
}
::google::protobuf::int32 Subscription::ack_deadline_seconds() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Subscription.ack_deadline_seconds)
  return ack_deadline_seconds_;
}
void Subscription::set_ack_deadline_seconds(::google::protobuf::int32 value) {
  
  ack_deadline_seconds_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1.Subscription.ack_deadline_seconds)
}

inline const Subscription* Subscription::internal_default_instance() {
  return &Subscription_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PushConfig::kPushEndpointFieldNumber;
const int PushConfig::kAttributesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PushConfig::PushConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.PushConfig)
}
PushConfig::PushConfig(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  attributes_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.PushConfig)
}

void PushConfig::InitAsDefaultInstance() {
}

PushConfig::PushConfig(const PushConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.PushConfig)
}

void PushConfig::SharedCtor() {
  attributes_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  attributes_.SetEntryDescriptor(
      &::google::pubsub::v1::PushConfig_AttributesEntry_descriptor_);
  push_endpoint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

PushConfig::~PushConfig() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.PushConfig)
  SharedDtor();
}

void PushConfig::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  push_endpoint_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void PushConfig::ArenaDtor(void* object) {
  PushConfig* _this = reinterpret_cast< PushConfig* >(object);
  (void)_this;
}
void PushConfig::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PushConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushConfig_descriptor_;
}

const PushConfig& PushConfig::default_instance() {
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PushConfig> PushConfig_default_instance_;

PushConfig* PushConfig::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<PushConfig>(arena);
}

void PushConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.PushConfig)
  push_endpoint_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  attributes_.Clear();
}

bool PushConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.PushConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string push_endpoint = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_push_endpoint()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->push_endpoint().data(), this->push_endpoint().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.PushConfig.push_endpoint"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_attributes;
        break;
      }

      // map<string, string> attributes = 2;
      case 2: {
        if (tag == 18) {
         parse_attributes:
          DO_(input->IncrementRecursionDepth());
         parse_loop_attributes:
          PushConfig_AttributesEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&attributes_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.PushConfig.AttributesEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.PushConfig.AttributesEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_attributes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.PushConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.PushConfig)
  return false;
#undef DO_
}

void PushConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.PushConfig)
  // optional string push_endpoint = 1;
  if (this->push_endpoint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->push_endpoint().data(), this->push_endpoint().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PushConfig.push_endpoint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->push_endpoint(), output);
  }

  // map<string, string> attributes = 2;
  if (!this->attributes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.PushConfig.AttributesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.PushConfig.AttributesEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->attributes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->attributes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<PushConfig_AttributesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attributes_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<PushConfig_AttributesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it) {
        entry.reset(attributes_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.PushConfig)
}

::google::protobuf::uint8* PushConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.PushConfig)
  // optional string push_endpoint = 1;
  if (this->push_endpoint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->push_endpoint().data(), this->push_endpoint().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PushConfig.push_endpoint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->push_endpoint(), target);
  }

  // map<string, string> attributes = 2;
  if (!this->attributes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.PushConfig.AttributesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.PushConfig.AttributesEntry.value");
      }
    };

    if (deterministic &&
        this->attributes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->attributes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<PushConfig_AttributesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attributes_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<PushConfig_AttributesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it) {
        entry.reset(attributes_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.PushConfig)
  return target;
}

size_t PushConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.PushConfig)
  size_t total_size = 0;

  // optional string push_endpoint = 1;
  if (this->push_endpoint().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->push_endpoint());
  }

  // map<string, string> attributes = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->attributes_size());
  {
    ::google::protobuf::scoped_ptr<PushConfig_AttributesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->attributes().begin();
        it != this->attributes().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(attributes_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.PushConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PushConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PushConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.PushConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.PushConfig)
    UnsafeMergeFrom(*source);
  }
}

void PushConfig::MergeFrom(const PushConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.PushConfig)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PushConfig::UnsafeMergeFrom(const PushConfig& from) {
  GOOGLE_DCHECK(&from != this);
  attributes_.MergeFrom(from.attributes_);
  if (from.push_endpoint().size() > 0) {
    set_push_endpoint(from.push_endpoint());
  }
}

void PushConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.PushConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushConfig::CopyFrom(const PushConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.PushConfig)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PushConfig::IsInitialized() const {

  return true;
}

void PushConfig::Swap(PushConfig* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PushConfig temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void PushConfig::UnsafeArenaSwap(PushConfig* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PushConfig::InternalSwap(PushConfig* other) {
  push_endpoint_.Swap(&other->push_endpoint_);
  attributes_.Swap(&other->attributes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PushConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushConfig_descriptor_;
  metadata.reflection = PushConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PushConfig

// optional string push_endpoint = 1;
void PushConfig::clear_push_endpoint() {
  push_endpoint_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& PushConfig::push_endpoint() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PushConfig.push_endpoint)
  return push_endpoint_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PushConfig::set_push_endpoint(const ::std::string& value) {
  
  push_endpoint_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.PushConfig.push_endpoint)
}
void PushConfig::set_push_endpoint(const char* value) {
  
  push_endpoint_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.PushConfig.push_endpoint)
}
void PushConfig::set_push_endpoint(const char* value,
    size_t size) {
  
  push_endpoint_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.PushConfig.push_endpoint)
}
::std::string* PushConfig::mutable_push_endpoint() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PushConfig.push_endpoint)
  return push_endpoint_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PushConfig::release_push_endpoint() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.PushConfig.push_endpoint)
  
  return push_endpoint_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PushConfig::unsafe_arena_release_push_endpoint() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.PushConfig.push_endpoint)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return push_endpoint_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void PushConfig::set_allocated_push_endpoint(::std::string* push_endpoint) {
  if (push_endpoint != NULL) {
    
  } else {
    
  }
  push_endpoint_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), push_endpoint,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.PushConfig.push_endpoint)
}
void PushConfig::unsafe_arena_set_allocated_push_endpoint(
    ::std::string* push_endpoint) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (push_endpoint != NULL) {
    
  } else {
    
  }
  push_endpoint_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      push_endpoint, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.PushConfig.push_endpoint)
}

// map<string, string> attributes = 2;
int PushConfig::attributes_size() const {
  return attributes_.size();
}
void PushConfig::clear_attributes() {
  attributes_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
PushConfig::attributes() const {
  // @@protoc_insertion_point(field_map:google.pubsub.v1.PushConfig.attributes)
  return attributes_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
PushConfig::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_map:google.pubsub.v1.PushConfig.attributes)
  return attributes_.MutableMap();
}

inline const PushConfig* PushConfig::internal_default_instance() {
  return &PushConfig_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void ReceivedMessage::_slow_mutable_message() {
  message_ = ::google::protobuf::Arena::CreateMessage< ::google::pubsub::v1::PubsubMessage >(
      GetArenaNoVirtual());
}
::google::pubsub::v1::PubsubMessage* ReceivedMessage::_slow_release_message() {
  if (message_ == NULL) {
    return NULL;
  } else {
    ::google::pubsub::v1::PubsubMessage* temp = new ::google::pubsub::v1::PubsubMessage(*message_);
    message_ = NULL;
    return temp;
  }
}
::google::pubsub::v1::PubsubMessage* ReceivedMessage::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ReceivedMessage.message)
  
  ::google::pubsub::v1::PubsubMessage* temp = message_;
  message_ = NULL;
  return temp;
}
void ReceivedMessage::_slow_set_allocated_message(
    ::google::protobuf::Arena* message_arena, ::google::pubsub::v1::PubsubMessage** message) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*message) == NULL) {
      message_arena->Own(*message);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*message)) {
      ::google::pubsub::v1::PubsubMessage* new_message = 
            ::google::protobuf::Arena::CreateMessage< ::google::pubsub::v1::PubsubMessage >(
            message_arena);
      new_message->CopyFrom(**message);
      *message = new_message;
    }
}
void ReceivedMessage::unsafe_arena_set_allocated_message(
    ::google::pubsub::v1::PubsubMessage* message) {
  if (GetArenaNoVirtual() == NULL) {
    delete message_;
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ReceivedMessage.message)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReceivedMessage::kAckIdFieldNumber;
const int ReceivedMessage::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReceivedMessage::ReceivedMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ReceivedMessage)
}
ReceivedMessage::ReceivedMessage(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ReceivedMessage)
}

void ReceivedMessage::InitAsDefaultInstance() {
  message_ = const_cast< ::google::pubsub::v1::PubsubMessage*>(
      ::google::pubsub::v1::PubsubMessage::internal_default_instance());
}

ReceivedMessage::ReceivedMessage(const ReceivedMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ReceivedMessage)
}

void ReceivedMessage::SharedCtor() {
  ack_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_ = NULL;
  _cached_size_ = 0;
}

ReceivedMessage::~ReceivedMessage() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ReceivedMessage)
  SharedDtor();
}

void ReceivedMessage::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  ack_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != &ReceivedMessage_default_instance_.get()) {
    delete message_;
  }
}

void ReceivedMessage::ArenaDtor(void* object) {
  ReceivedMessage* _this = reinterpret_cast< ReceivedMessage* >(object);
  (void)_this;
}
void ReceivedMessage::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ReceivedMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceivedMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceivedMessage_descriptor_;
}

const ReceivedMessage& ReceivedMessage::default_instance() {
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReceivedMessage> ReceivedMessage_default_instance_;

ReceivedMessage* ReceivedMessage::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ReceivedMessage>(arena);
}

void ReceivedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ReceivedMessage)
  ack_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && message_ != NULL) delete message_;
  message_ = NULL;
}

bool ReceivedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.ReceivedMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ack_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ack_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ack_id().data(), this->ack_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ReceivedMessage.ack_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional .google.pubsub.v1.PubsubMessage message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.ReceivedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.ReceivedMessage)
  return false;
#undef DO_
}

void ReceivedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.ReceivedMessage)
  // optional string ack_id = 1;
  if (this->ack_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ack_id().data(), this->ack_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ReceivedMessage.ack_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ack_id(), output);
  }

  // optional .google.pubsub.v1.PubsubMessage message = 2;
  if (this->has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->message_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.ReceivedMessage)
}

::google::protobuf::uint8* ReceivedMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ReceivedMessage)
  // optional string ack_id = 1;
  if (this->ack_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ack_id().data(), this->ack_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ReceivedMessage.ack_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ack_id(), target);
  }

  // optional .google.pubsub.v1.PubsubMessage message = 2;
  if (this->has_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->message_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ReceivedMessage)
  return target;
}

size_t ReceivedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ReceivedMessage)
  size_t total_size = 0;

  // optional string ack_id = 1;
  if (this->ack_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ack_id());
  }

  // optional .google.pubsub.v1.PubsubMessage message = 2;
  if (this->has_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->message_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceivedMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ReceivedMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReceivedMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReceivedMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ReceivedMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ReceivedMessage)
    UnsafeMergeFrom(*source);
  }
}

void ReceivedMessage::MergeFrom(const ReceivedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ReceivedMessage)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReceivedMessage::UnsafeMergeFrom(const ReceivedMessage& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.ack_id().size() > 0) {
    set_ack_id(from.ack_id());
  }
  if (from.has_message()) {
    mutable_message()->::google::pubsub::v1::PubsubMessage::MergeFrom(from.message());
  }
}

void ReceivedMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ReceivedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceivedMessage::CopyFrom(const ReceivedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ReceivedMessage)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReceivedMessage::IsInitialized() const {

  return true;
}

void ReceivedMessage::Swap(ReceivedMessage* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ReceivedMessage temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ReceivedMessage::UnsafeArenaSwap(ReceivedMessage* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ReceivedMessage::InternalSwap(ReceivedMessage* other) {
  ack_id_.Swap(&other->ack_id_);
  std::swap(message_, other->message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReceivedMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReceivedMessage_descriptor_;
  metadata.reflection = ReceivedMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReceivedMessage

// optional string ack_id = 1;
void ReceivedMessage::clear_ack_id() {
  ack_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ReceivedMessage::ack_id() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ReceivedMessage.ack_id)
  return ack_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReceivedMessage::set_ack_id(const ::std::string& value) {
  
  ack_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ReceivedMessage.ack_id)
}
void ReceivedMessage::set_ack_id(const char* value) {
  
  ack_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ReceivedMessage.ack_id)
}
void ReceivedMessage::set_ack_id(const char* value,
    size_t size) {
  
  ack_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ReceivedMessage.ack_id)
}
::std::string* ReceivedMessage::mutable_ack_id() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ReceivedMessage.ack_id)
  return ack_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ReceivedMessage::release_ack_id() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ReceivedMessage.ack_id)
  
  return ack_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ReceivedMessage::unsafe_arena_release_ack_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ReceivedMessage.ack_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return ack_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ReceivedMessage::set_allocated_ack_id(::std::string* ack_id) {
  if (ack_id != NULL) {
    
  } else {
    
  }
  ack_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ack_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ReceivedMessage.ack_id)
}
void ReceivedMessage::unsafe_arena_set_allocated_ack_id(
    ::std::string* ack_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ack_id != NULL) {
    
  } else {
    
  }
  ack_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ack_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ReceivedMessage.ack_id)
}

// optional .google.pubsub.v1.PubsubMessage message = 2;
bool ReceivedMessage::has_message() const {
  return this != internal_default_instance() && message_ != NULL;
}
void ReceivedMessage::clear_message() {
  if (GetArenaNoVirtual() == NULL && message_ != NULL) delete message_;
  message_ = NULL;
}
const ::google::pubsub::v1::PubsubMessage& ReceivedMessage::message() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ReceivedMessage.message)
  return message_ != NULL ? *message_
                         : *::google::pubsub::v1::PubsubMessage::internal_default_instance();
}
::google::pubsub::v1::PubsubMessage* ReceivedMessage::mutable_message() {
  
  if (message_ == NULL) {
    _slow_mutable_message();
  }
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ReceivedMessage.message)
  return message_;
}
::google::pubsub::v1::PubsubMessage* ReceivedMessage::release_message() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ReceivedMessage.message)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_message();
  } else {
    ::google::pubsub::v1::PubsubMessage* temp = message_;
    message_ = NULL;
    return temp;
  }
}
 void ReceivedMessage::set_allocated_message(::google::pubsub::v1::PubsubMessage* message) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete message_;
  }
  if (message != NULL) {
    _slow_set_allocated_message(message_arena, &message);
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ReceivedMessage.message)
}

inline const ReceivedMessage* ReceivedMessage::internal_default_instance() {
  return &ReceivedMessage_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetSubscriptionRequest::kSubscriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetSubscriptionRequest::GetSubscriptionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.GetSubscriptionRequest)
}
GetSubscriptionRequest::GetSubscriptionRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.GetSubscriptionRequest)
}

void GetSubscriptionRequest::InitAsDefaultInstance() {
}

GetSubscriptionRequest::GetSubscriptionRequest(const GetSubscriptionRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.GetSubscriptionRequest)
}

void GetSubscriptionRequest::SharedCtor() {
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetSubscriptionRequest::~GetSubscriptionRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.GetSubscriptionRequest)
  SharedDtor();
}

void GetSubscriptionRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  subscription_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void GetSubscriptionRequest::ArenaDtor(void* object) {
  GetSubscriptionRequest* _this = reinterpret_cast< GetSubscriptionRequest* >(object);
  (void)_this;
}
void GetSubscriptionRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetSubscriptionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSubscriptionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSubscriptionRequest_descriptor_;
}

const GetSubscriptionRequest& GetSubscriptionRequest::default_instance() {
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetSubscriptionRequest> GetSubscriptionRequest_default_instance_;

GetSubscriptionRequest* GetSubscriptionRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetSubscriptionRequest>(arena);
}

void GetSubscriptionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.GetSubscriptionRequest)
  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool GetSubscriptionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.GetSubscriptionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string subscription = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subscription()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subscription().data(), this->subscription().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.GetSubscriptionRequest.subscription"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.GetSubscriptionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.GetSubscriptionRequest)
  return false;
#undef DO_
}

void GetSubscriptionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.GetSubscriptionRequest)
  // optional string subscription = 1;
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), this->subscription().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.GetSubscriptionRequest.subscription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->subscription(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.GetSubscriptionRequest)
}

::google::protobuf::uint8* GetSubscriptionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.GetSubscriptionRequest)
  // optional string subscription = 1;
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), this->subscription().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.GetSubscriptionRequest.subscription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->subscription(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.GetSubscriptionRequest)
  return target;
}

size_t GetSubscriptionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.GetSubscriptionRequest)
  size_t total_size = 0;

  // optional string subscription = 1;
  if (this->subscription().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subscription());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSubscriptionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.GetSubscriptionRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetSubscriptionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetSubscriptionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.GetSubscriptionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.GetSubscriptionRequest)
    UnsafeMergeFrom(*source);
  }
}

void GetSubscriptionRequest::MergeFrom(const GetSubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.GetSubscriptionRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetSubscriptionRequest::UnsafeMergeFrom(const GetSubscriptionRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.subscription().size() > 0) {
    set_subscription(from.subscription());
  }
}

void GetSubscriptionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.GetSubscriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSubscriptionRequest::CopyFrom(const GetSubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.GetSubscriptionRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetSubscriptionRequest::IsInitialized() const {

  return true;
}

void GetSubscriptionRequest::Swap(GetSubscriptionRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetSubscriptionRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void GetSubscriptionRequest::UnsafeArenaSwap(GetSubscriptionRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetSubscriptionRequest::InternalSwap(GetSubscriptionRequest* other) {
  subscription_.Swap(&other->subscription_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetSubscriptionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSubscriptionRequest_descriptor_;
  metadata.reflection = GetSubscriptionRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetSubscriptionRequest

// optional string subscription = 1;
void GetSubscriptionRequest::clear_subscription() {
  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetSubscriptionRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.GetSubscriptionRequest.subscription)
  return subscription_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetSubscriptionRequest::set_subscription(const ::std::string& value) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.GetSubscriptionRequest.subscription)
}
void GetSubscriptionRequest::set_subscription(const char* value) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.GetSubscriptionRequest.subscription)
}
void GetSubscriptionRequest::set_subscription(const char* value,
    size_t size) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.GetSubscriptionRequest.subscription)
}
::std::string* GetSubscriptionRequest::mutable_subscription() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.GetSubscriptionRequest.subscription)
  return subscription_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetSubscriptionRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.GetSubscriptionRequest.subscription)
  
  return subscription_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetSubscriptionRequest::unsafe_arena_release_subscription() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.GetSubscriptionRequest.subscription)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return subscription_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetSubscriptionRequest::set_allocated_subscription(::std::string* subscription) {
  if (subscription != NULL) {
    
  } else {
    
  }
  subscription_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscription,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.GetSubscriptionRequest.subscription)
}
void GetSubscriptionRequest::unsafe_arena_set_allocated_subscription(
    ::std::string* subscription) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (subscription != NULL) {
    
  } else {
    
  }
  subscription_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      subscription, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.GetSubscriptionRequest.subscription)
}

inline const GetSubscriptionRequest* GetSubscriptionRequest::internal_default_instance() {
  return &GetSubscriptionRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListSubscriptionsRequest::kProjectFieldNumber;
const int ListSubscriptionsRequest::kPageSizeFieldNumber;
const int ListSubscriptionsRequest::kPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListSubscriptionsRequest::ListSubscriptionsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ListSubscriptionsRequest)
}
ListSubscriptionsRequest::ListSubscriptionsRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ListSubscriptionsRequest)
}

void ListSubscriptionsRequest::InitAsDefaultInstance() {
}

ListSubscriptionsRequest::ListSubscriptionsRequest(const ListSubscriptionsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ListSubscriptionsRequest)
}

void ListSubscriptionsRequest::SharedCtor() {
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
  _cached_size_ = 0;
}

ListSubscriptionsRequest::~ListSubscriptionsRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ListSubscriptionsRequest)
  SharedDtor();
}

void ListSubscriptionsRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  project_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  page_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void ListSubscriptionsRequest::ArenaDtor(void* object) {
  ListSubscriptionsRequest* _this = reinterpret_cast< ListSubscriptionsRequest* >(object);
  (void)_this;
}
void ListSubscriptionsRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ListSubscriptionsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListSubscriptionsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListSubscriptionsRequest_descriptor_;
}

const ListSubscriptionsRequest& ListSubscriptionsRequest::default_instance() {
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ListSubscriptionsRequest> ListSubscriptionsRequest_default_instance_;

ListSubscriptionsRequest* ListSubscriptionsRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ListSubscriptionsRequest>(arena);
}

void ListSubscriptionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ListSubscriptionsRequest)
  project_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_size_ = 0;
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool ListSubscriptionsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.ListSubscriptionsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string project = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project().data(), this->project().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ListSubscriptionsRequest.project"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_page_size;
        break;
      }

      // optional int32 page_size = 2;
      case 2: {
        if (tag == 16) {
         parse_page_size:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_page_token;
        break;
      }

      // optional string page_token = 3;
      case 3: {
        if (tag == 26) {
         parse_page_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), this->page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ListSubscriptionsRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.ListSubscriptionsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.ListSubscriptionsRequest)
  return false;
#undef DO_
}

void ListSubscriptionsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.ListSubscriptionsRequest)
  // optional string project = 1;
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), this->project().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListSubscriptionsRequest.project");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project(), output);
  }

  // optional int32 page_size = 2;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page_size(), output);
  }

  // optional string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListSubscriptionsRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.ListSubscriptionsRequest)
}

::google::protobuf::uint8* ListSubscriptionsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ListSubscriptionsRequest)
  // optional string project = 1;
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), this->project().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListSubscriptionsRequest.project");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project(), target);
  }

  // optional int32 page_size = 2;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page_size(), target);
  }

  // optional string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListSubscriptionsRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ListSubscriptionsRequest)
  return target;
}

size_t ListSubscriptionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ListSubscriptionsRequest)
  size_t total_size = 0;

  // optional string project = 1;
  if (this->project().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project());
  }

  // optional int32 page_size = 2;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  // optional string page_token = 3;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListSubscriptionsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ListSubscriptionsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListSubscriptionsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListSubscriptionsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ListSubscriptionsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ListSubscriptionsRequest)
    UnsafeMergeFrom(*source);
  }
}

void ListSubscriptionsRequest::MergeFrom(const ListSubscriptionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ListSubscriptionsRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ListSubscriptionsRequest::UnsafeMergeFrom(const ListSubscriptionsRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.project().size() > 0) {
    set_project(from.project());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
  if (from.page_token().size() > 0) {
    set_page_token(from.page_token());
  }
}

void ListSubscriptionsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ListSubscriptionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListSubscriptionsRequest::CopyFrom(const ListSubscriptionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ListSubscriptionsRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ListSubscriptionsRequest::IsInitialized() const {

  return true;
}

void ListSubscriptionsRequest::Swap(ListSubscriptionsRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListSubscriptionsRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ListSubscriptionsRequest::UnsafeArenaSwap(ListSubscriptionsRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListSubscriptionsRequest::InternalSwap(ListSubscriptionsRequest* other) {
  project_.Swap(&other->project_);
  std::swap(page_size_, other->page_size_);
  page_token_.Swap(&other->page_token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListSubscriptionsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListSubscriptionsRequest_descriptor_;
  metadata.reflection = ListSubscriptionsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListSubscriptionsRequest

// optional string project = 1;
void ListSubscriptionsRequest::clear_project() {
  project_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ListSubscriptionsRequest::project() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListSubscriptionsRequest.project)
  return project_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListSubscriptionsRequest::set_project(const ::std::string& value) {
  
  project_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListSubscriptionsRequest.project)
}
void ListSubscriptionsRequest::set_project(const char* value) {
  
  project_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ListSubscriptionsRequest.project)
}
void ListSubscriptionsRequest::set_project(const char* value,
    size_t size) {
  
  project_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ListSubscriptionsRequest.project)
}
::std::string* ListSubscriptionsRequest::mutable_project() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListSubscriptionsRequest.project)
  return project_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListSubscriptionsRequest::release_project() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListSubscriptionsRequest.project)
  
  return project_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListSubscriptionsRequest::unsafe_arena_release_project() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ListSubscriptionsRequest.project)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return project_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ListSubscriptionsRequest::set_allocated_project(::std::string* project) {
  if (project != NULL) {
    
  } else {
    
  }
  project_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListSubscriptionsRequest.project)
}
void ListSubscriptionsRequest::unsafe_arena_set_allocated_project(
    ::std::string* project) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (project != NULL) {
    
  } else {
    
  }
  project_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      project, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ListSubscriptionsRequest.project)
}

// optional int32 page_size = 2;
void ListSubscriptionsRequest::clear_page_size() {
  page_size_ = 0;
}
::google::protobuf::int32 ListSubscriptionsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListSubscriptionsRequest.page_size)
  return page_size_;
}
void ListSubscriptionsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListSubscriptionsRequest.page_size)
}

// optional string page_token = 3;
void ListSubscriptionsRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ListSubscriptionsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListSubscriptionsRequest.page_token)
  return page_token_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListSubscriptionsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListSubscriptionsRequest.page_token)
}
void ListSubscriptionsRequest::set_page_token(const char* value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ListSubscriptionsRequest.page_token)
}
void ListSubscriptionsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ListSubscriptionsRequest.page_token)
}
::std::string* ListSubscriptionsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListSubscriptionsRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListSubscriptionsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListSubscriptionsRequest.page_token)
  
  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListSubscriptionsRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ListSubscriptionsRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ListSubscriptionsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListSubscriptionsRequest.page_token)
}
void ListSubscriptionsRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ListSubscriptionsRequest.page_token)
}

inline const ListSubscriptionsRequest* ListSubscriptionsRequest::internal_default_instance() {
  return &ListSubscriptionsRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListSubscriptionsResponse::kSubscriptionsFieldNumber;
const int ListSubscriptionsResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListSubscriptionsResponse::ListSubscriptionsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ListSubscriptionsResponse)
}
ListSubscriptionsResponse::ListSubscriptionsResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  subscriptions_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ListSubscriptionsResponse)
}

void ListSubscriptionsResponse::InitAsDefaultInstance() {
}

ListSubscriptionsResponse::ListSubscriptionsResponse(const ListSubscriptionsResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ListSubscriptionsResponse)
}

void ListSubscriptionsResponse::SharedCtor() {
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ListSubscriptionsResponse::~ListSubscriptionsResponse() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ListSubscriptionsResponse)
  SharedDtor();
}

void ListSubscriptionsResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  next_page_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void ListSubscriptionsResponse::ArenaDtor(void* object) {
  ListSubscriptionsResponse* _this = reinterpret_cast< ListSubscriptionsResponse* >(object);
  (void)_this;
}
void ListSubscriptionsResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ListSubscriptionsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListSubscriptionsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListSubscriptionsResponse_descriptor_;
}

const ListSubscriptionsResponse& ListSubscriptionsResponse::default_instance() {
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ListSubscriptionsResponse> ListSubscriptionsResponse_default_instance_;

ListSubscriptionsResponse* ListSubscriptionsResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ListSubscriptionsResponse>(arena);
}

void ListSubscriptionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ListSubscriptionsResponse)
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  subscriptions_.Clear();
}

bool ListSubscriptionsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.ListSubscriptionsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.pubsub.v1.Subscription subscriptions = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_subscriptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_subscriptions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_subscriptions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_next_page_token;
        break;
      }

      // optional string next_page_token = 2;
      case 2: {
        if (tag == 18) {
         parse_next_page_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), this->next_page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ListSubscriptionsResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.ListSubscriptionsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.ListSubscriptionsResponse)
  return false;
#undef DO_
}

void ListSubscriptionsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.ListSubscriptionsResponse)
  // repeated .google.pubsub.v1.Subscription subscriptions = 1;
  for (unsigned int i = 0, n = this->subscriptions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->subscriptions(i), output);
  }

  // optional string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListSubscriptionsResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.ListSubscriptionsResponse)
}

::google::protobuf::uint8* ListSubscriptionsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ListSubscriptionsResponse)
  // repeated .google.pubsub.v1.Subscription subscriptions = 1;
  for (unsigned int i = 0, n = this->subscriptions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->subscriptions(i), false, target);
  }

  // optional string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListSubscriptionsResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ListSubscriptionsResponse)
  return target;
}

size_t ListSubscriptionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ListSubscriptionsResponse)
  size_t total_size = 0;

  // optional string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  // repeated .google.pubsub.v1.Subscription subscriptions = 1;
  {
    unsigned int count = this->subscriptions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subscriptions(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListSubscriptionsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ListSubscriptionsResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListSubscriptionsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListSubscriptionsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ListSubscriptionsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ListSubscriptionsResponse)
    UnsafeMergeFrom(*source);
  }
}

void ListSubscriptionsResponse::MergeFrom(const ListSubscriptionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ListSubscriptionsResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ListSubscriptionsResponse::UnsafeMergeFrom(const ListSubscriptionsResponse& from) {
  GOOGLE_DCHECK(&from != this);
  subscriptions_.MergeFrom(from.subscriptions_);
  if (from.next_page_token().size() > 0) {
    set_next_page_token(from.next_page_token());
  }
}

void ListSubscriptionsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ListSubscriptionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListSubscriptionsResponse::CopyFrom(const ListSubscriptionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ListSubscriptionsResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ListSubscriptionsResponse::IsInitialized() const {

  return true;
}

void ListSubscriptionsResponse::Swap(ListSubscriptionsResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListSubscriptionsResponse temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ListSubscriptionsResponse::UnsafeArenaSwap(ListSubscriptionsResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListSubscriptionsResponse::InternalSwap(ListSubscriptionsResponse* other) {
  subscriptions_.UnsafeArenaSwap(&other->subscriptions_);
  next_page_token_.Swap(&other->next_page_token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListSubscriptionsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListSubscriptionsResponse_descriptor_;
  metadata.reflection = ListSubscriptionsResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListSubscriptionsResponse

// repeated .google.pubsub.v1.Subscription subscriptions = 1;
int ListSubscriptionsResponse::subscriptions_size() const {
  return subscriptions_.size();
}
void ListSubscriptionsResponse::clear_subscriptions() {
  subscriptions_.Clear();
}
const ::google::pubsub::v1::Subscription& ListSubscriptionsResponse::subscriptions(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListSubscriptionsResponse.subscriptions)
  return subscriptions_.Get(index);
}
::google::pubsub::v1::Subscription* ListSubscriptionsResponse::mutable_subscriptions(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListSubscriptionsResponse.subscriptions)
  return subscriptions_.Mutable(index);
}
::google::pubsub::v1::Subscription* ListSubscriptionsResponse::add_subscriptions() {
  // @@protoc_insertion_point(field_add:google.pubsub.v1.ListSubscriptionsResponse.subscriptions)
  return subscriptions_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::Subscription >*
ListSubscriptionsResponse::mutable_subscriptions() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.ListSubscriptionsResponse.subscriptions)
  return &subscriptions_;
}
const ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::Subscription >&
ListSubscriptionsResponse::subscriptions() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.ListSubscriptionsResponse.subscriptions)
  return subscriptions_;
}

// optional string next_page_token = 2;
void ListSubscriptionsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ListSubscriptionsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListSubscriptionsResponse.next_page_token)
  return next_page_token_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListSubscriptionsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListSubscriptionsResponse.next_page_token)
}
void ListSubscriptionsResponse::set_next_page_token(const char* value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ListSubscriptionsResponse.next_page_token)
}
void ListSubscriptionsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ListSubscriptionsResponse.next_page_token)
}
::std::string* ListSubscriptionsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListSubscriptionsResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListSubscriptionsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListSubscriptionsResponse.next_page_token)
  
  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListSubscriptionsResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ListSubscriptionsResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ListSubscriptionsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListSubscriptionsResponse.next_page_token)
}
void ListSubscriptionsResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ListSubscriptionsResponse.next_page_token)
}

inline const ListSubscriptionsResponse* ListSubscriptionsResponse::internal_default_instance() {
  return &ListSubscriptionsResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteSubscriptionRequest::kSubscriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteSubscriptionRequest::DeleteSubscriptionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.DeleteSubscriptionRequest)
}
DeleteSubscriptionRequest::DeleteSubscriptionRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.DeleteSubscriptionRequest)
}

void DeleteSubscriptionRequest::InitAsDefaultInstance() {
}

DeleteSubscriptionRequest::DeleteSubscriptionRequest(const DeleteSubscriptionRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.DeleteSubscriptionRequest)
}

void DeleteSubscriptionRequest::SharedCtor() {
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DeleteSubscriptionRequest::~DeleteSubscriptionRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.DeleteSubscriptionRequest)
  SharedDtor();
}

void DeleteSubscriptionRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  subscription_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void DeleteSubscriptionRequest::ArenaDtor(void* object) {
  DeleteSubscriptionRequest* _this = reinterpret_cast< DeleteSubscriptionRequest* >(object);
  (void)_this;
}
void DeleteSubscriptionRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DeleteSubscriptionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteSubscriptionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteSubscriptionRequest_descriptor_;
}

const DeleteSubscriptionRequest& DeleteSubscriptionRequest::default_instance() {
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DeleteSubscriptionRequest> DeleteSubscriptionRequest_default_instance_;

DeleteSubscriptionRequest* DeleteSubscriptionRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DeleteSubscriptionRequest>(arena);
}

void DeleteSubscriptionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.DeleteSubscriptionRequest)
  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool DeleteSubscriptionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.DeleteSubscriptionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string subscription = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subscription()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subscription().data(), this->subscription().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.DeleteSubscriptionRequest.subscription"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.DeleteSubscriptionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.DeleteSubscriptionRequest)
  return false;
#undef DO_
}

void DeleteSubscriptionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.DeleteSubscriptionRequest)
  // optional string subscription = 1;
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), this->subscription().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.DeleteSubscriptionRequest.subscription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->subscription(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.DeleteSubscriptionRequest)
}

::google::protobuf::uint8* DeleteSubscriptionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.DeleteSubscriptionRequest)
  // optional string subscription = 1;
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), this->subscription().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.DeleteSubscriptionRequest.subscription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->subscription(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.DeleteSubscriptionRequest)
  return target;
}

size_t DeleteSubscriptionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.DeleteSubscriptionRequest)
  size_t total_size = 0;

  // optional string subscription = 1;
  if (this->subscription().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subscription());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteSubscriptionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.DeleteSubscriptionRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DeleteSubscriptionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteSubscriptionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.DeleteSubscriptionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.DeleteSubscriptionRequest)
    UnsafeMergeFrom(*source);
  }
}

void DeleteSubscriptionRequest::MergeFrom(const DeleteSubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.DeleteSubscriptionRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DeleteSubscriptionRequest::UnsafeMergeFrom(const DeleteSubscriptionRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.subscription().size() > 0) {
    set_subscription(from.subscription());
  }
}

void DeleteSubscriptionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.DeleteSubscriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteSubscriptionRequest::CopyFrom(const DeleteSubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.DeleteSubscriptionRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DeleteSubscriptionRequest::IsInitialized() const {

  return true;
}

void DeleteSubscriptionRequest::Swap(DeleteSubscriptionRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeleteSubscriptionRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void DeleteSubscriptionRequest::UnsafeArenaSwap(DeleteSubscriptionRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeleteSubscriptionRequest::InternalSwap(DeleteSubscriptionRequest* other) {
  subscription_.Swap(&other->subscription_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteSubscriptionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteSubscriptionRequest_descriptor_;
  metadata.reflection = DeleteSubscriptionRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteSubscriptionRequest

// optional string subscription = 1;
void DeleteSubscriptionRequest::clear_subscription() {
  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& DeleteSubscriptionRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.DeleteSubscriptionRequest.subscription)
  return subscription_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteSubscriptionRequest::set_subscription(const ::std::string& value) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.DeleteSubscriptionRequest.subscription)
}
void DeleteSubscriptionRequest::set_subscription(const char* value) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.DeleteSubscriptionRequest.subscription)
}
void DeleteSubscriptionRequest::set_subscription(const char* value,
    size_t size) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.DeleteSubscriptionRequest.subscription)
}
::std::string* DeleteSubscriptionRequest::mutable_subscription() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.DeleteSubscriptionRequest.subscription)
  return subscription_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeleteSubscriptionRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.DeleteSubscriptionRequest.subscription)
  
  return subscription_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeleteSubscriptionRequest::unsafe_arena_release_subscription() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.DeleteSubscriptionRequest.subscription)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return subscription_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void DeleteSubscriptionRequest::set_allocated_subscription(::std::string* subscription) {
  if (subscription != NULL) {
    
  } else {
    
  }
  subscription_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscription,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.DeleteSubscriptionRequest.subscription)
}
void DeleteSubscriptionRequest::unsafe_arena_set_allocated_subscription(
    ::std::string* subscription) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (subscription != NULL) {
    
  } else {
    
  }
  subscription_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      subscription, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.DeleteSubscriptionRequest.subscription)
}

inline const DeleteSubscriptionRequest* DeleteSubscriptionRequest::internal_default_instance() {
  return &DeleteSubscriptionRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void ModifyPushConfigRequest::_slow_mutable_push_config() {
  push_config_ = ::google::protobuf::Arena::CreateMessage< ::google::pubsub::v1::PushConfig >(
      GetArenaNoVirtual());
}
::google::pubsub::v1::PushConfig* ModifyPushConfigRequest::_slow_release_push_config() {
  if (push_config_ == NULL) {
    return NULL;
  } else {
    ::google::pubsub::v1::PushConfig* temp = new ::google::pubsub::v1::PushConfig(*push_config_);
    push_config_ = NULL;
    return temp;
  }
}
::google::pubsub::v1::PushConfig* ModifyPushConfigRequest::unsafe_arena_release_push_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ModifyPushConfigRequest.push_config)
  
  ::google::pubsub::v1::PushConfig* temp = push_config_;
  push_config_ = NULL;
  return temp;
}
void ModifyPushConfigRequest::_slow_set_allocated_push_config(
    ::google::protobuf::Arena* message_arena, ::google::pubsub::v1::PushConfig** push_config) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*push_config) == NULL) {
      message_arena->Own(*push_config);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*push_config)) {
      ::google::pubsub::v1::PushConfig* new_push_config = 
            ::google::protobuf::Arena::CreateMessage< ::google::pubsub::v1::PushConfig >(
            message_arena);
      new_push_config->CopyFrom(**push_config);
      *push_config = new_push_config;
    }
}
void ModifyPushConfigRequest::unsafe_arena_set_allocated_push_config(
    ::google::pubsub::v1::PushConfig* push_config) {
  if (GetArenaNoVirtual() == NULL) {
    delete push_config_;
  }
  push_config_ = push_config;
  if (push_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ModifyPushConfigRequest.push_config)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModifyPushConfigRequest::kSubscriptionFieldNumber;
const int ModifyPushConfigRequest::kPushConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModifyPushConfigRequest::ModifyPushConfigRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ModifyPushConfigRequest)
}
ModifyPushConfigRequest::ModifyPushConfigRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ModifyPushConfigRequest)
}

void ModifyPushConfigRequest::InitAsDefaultInstance() {
  push_config_ = const_cast< ::google::pubsub::v1::PushConfig*>(
      ::google::pubsub::v1::PushConfig::internal_default_instance());
}

ModifyPushConfigRequest::ModifyPushConfigRequest(const ModifyPushConfigRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ModifyPushConfigRequest)
}

void ModifyPushConfigRequest::SharedCtor() {
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  push_config_ = NULL;
  _cached_size_ = 0;
}

ModifyPushConfigRequest::~ModifyPushConfigRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ModifyPushConfigRequest)
  SharedDtor();
}

void ModifyPushConfigRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  subscription_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != &ModifyPushConfigRequest_default_instance_.get()) {
    delete push_config_;
  }
}

void ModifyPushConfigRequest::ArenaDtor(void* object) {
  ModifyPushConfigRequest* _this = reinterpret_cast< ModifyPushConfigRequest* >(object);
  (void)_this;
}
void ModifyPushConfigRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ModifyPushConfigRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyPushConfigRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyPushConfigRequest_descriptor_;
}

const ModifyPushConfigRequest& ModifyPushConfigRequest::default_instance() {
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ModifyPushConfigRequest> ModifyPushConfigRequest_default_instance_;

ModifyPushConfigRequest* ModifyPushConfigRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ModifyPushConfigRequest>(arena);
}

void ModifyPushConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ModifyPushConfigRequest)
  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && push_config_ != NULL) delete push_config_;
  push_config_ = NULL;
}

bool ModifyPushConfigRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.ModifyPushConfigRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string subscription = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subscription()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subscription().data(), this->subscription().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ModifyPushConfigRequest.subscription"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_push_config;
        break;
      }

      // optional .google.pubsub.v1.PushConfig push_config = 2;
      case 2: {
        if (tag == 18) {
         parse_push_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_push_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.ModifyPushConfigRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.ModifyPushConfigRequest)
  return false;
#undef DO_
}

void ModifyPushConfigRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.ModifyPushConfigRequest)
  // optional string subscription = 1;
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), this->subscription().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ModifyPushConfigRequest.subscription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->subscription(), output);
  }

  // optional .google.pubsub.v1.PushConfig push_config = 2;
  if (this->has_push_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->push_config_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.ModifyPushConfigRequest)
}

::google::protobuf::uint8* ModifyPushConfigRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ModifyPushConfigRequest)
  // optional string subscription = 1;
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), this->subscription().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ModifyPushConfigRequest.subscription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->subscription(), target);
  }

  // optional .google.pubsub.v1.PushConfig push_config = 2;
  if (this->has_push_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->push_config_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ModifyPushConfigRequest)
  return target;
}

size_t ModifyPushConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ModifyPushConfigRequest)
  size_t total_size = 0;

  // optional string subscription = 1;
  if (this->subscription().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subscription());
  }

  // optional .google.pubsub.v1.PushConfig push_config = 2;
  if (this->has_push_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->push_config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyPushConfigRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ModifyPushConfigRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ModifyPushConfigRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModifyPushConfigRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ModifyPushConfigRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ModifyPushConfigRequest)
    UnsafeMergeFrom(*source);
  }
}

void ModifyPushConfigRequest::MergeFrom(const ModifyPushConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ModifyPushConfigRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ModifyPushConfigRequest::UnsafeMergeFrom(const ModifyPushConfigRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.subscription().size() > 0) {
    set_subscription(from.subscription());
  }
  if (from.has_push_config()) {
    mutable_push_config()->::google::pubsub::v1::PushConfig::MergeFrom(from.push_config());
  }
}

void ModifyPushConfigRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ModifyPushConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyPushConfigRequest::CopyFrom(const ModifyPushConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ModifyPushConfigRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ModifyPushConfigRequest::IsInitialized() const {

  return true;
}

void ModifyPushConfigRequest::Swap(ModifyPushConfigRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ModifyPushConfigRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ModifyPushConfigRequest::UnsafeArenaSwap(ModifyPushConfigRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ModifyPushConfigRequest::InternalSwap(ModifyPushConfigRequest* other) {
  subscription_.Swap(&other->subscription_);
  std::swap(push_config_, other->push_config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModifyPushConfigRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyPushConfigRequest_descriptor_;
  metadata.reflection = ModifyPushConfigRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModifyPushConfigRequest

// optional string subscription = 1;
void ModifyPushConfigRequest::clear_subscription() {
  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ModifyPushConfigRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ModifyPushConfigRequest.subscription)
  return subscription_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModifyPushConfigRequest::set_subscription(const ::std::string& value) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ModifyPushConfigRequest.subscription)
}
void ModifyPushConfigRequest::set_subscription(const char* value) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ModifyPushConfigRequest.subscription)
}
void ModifyPushConfigRequest::set_subscription(const char* value,
    size_t size) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ModifyPushConfigRequest.subscription)
}
::std::string* ModifyPushConfigRequest::mutable_subscription() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ModifyPushConfigRequest.subscription)
  return subscription_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ModifyPushConfigRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ModifyPushConfigRequest.subscription)
  
  return subscription_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ModifyPushConfigRequest::unsafe_arena_release_subscription() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ModifyPushConfigRequest.subscription)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return subscription_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ModifyPushConfigRequest::set_allocated_subscription(::std::string* subscription) {
  if (subscription != NULL) {
    
  } else {
    
  }
  subscription_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscription,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ModifyPushConfigRequest.subscription)
}
void ModifyPushConfigRequest::unsafe_arena_set_allocated_subscription(
    ::std::string* subscription) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (subscription != NULL) {
    
  } else {
    
  }
  subscription_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      subscription, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ModifyPushConfigRequest.subscription)
}

// optional .google.pubsub.v1.PushConfig push_config = 2;
bool ModifyPushConfigRequest::has_push_config() const {
  return this != internal_default_instance() && push_config_ != NULL;
}
void ModifyPushConfigRequest::clear_push_config() {
  if (GetArenaNoVirtual() == NULL && push_config_ != NULL) delete push_config_;
  push_config_ = NULL;
}
const ::google::pubsub::v1::PushConfig& ModifyPushConfigRequest::push_config() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ModifyPushConfigRequest.push_config)
  return push_config_ != NULL ? *push_config_
                         : *::google::pubsub::v1::PushConfig::internal_default_instance();
}
::google::pubsub::v1::PushConfig* ModifyPushConfigRequest::mutable_push_config() {
  
  if (push_config_ == NULL) {
    _slow_mutable_push_config();
  }
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ModifyPushConfigRequest.push_config)
  return push_config_;
}
::google::pubsub::v1::PushConfig* ModifyPushConfigRequest::release_push_config() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ModifyPushConfigRequest.push_config)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_push_config();
  } else {
    ::google::pubsub::v1::PushConfig* temp = push_config_;
    push_config_ = NULL;
    return temp;
  }
}
 void ModifyPushConfigRequest::set_allocated_push_config(::google::pubsub::v1::PushConfig* push_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete push_config_;
  }
  if (push_config != NULL) {
    _slow_set_allocated_push_config(message_arena, &push_config);
  }
  push_config_ = push_config;
  if (push_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ModifyPushConfigRequest.push_config)
}

inline const ModifyPushConfigRequest* ModifyPushConfigRequest::internal_default_instance() {
  return &ModifyPushConfigRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PullRequest::kSubscriptionFieldNumber;
const int PullRequest::kReturnImmediatelyFieldNumber;
const int PullRequest::kMaxMessagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PullRequest::PullRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.PullRequest)
}
PullRequest::PullRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.PullRequest)
}

void PullRequest::InitAsDefaultInstance() {
}

PullRequest::PullRequest(const PullRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.PullRequest)
}

void PullRequest::SharedCtor() {
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&return_immediately_, 0, reinterpret_cast<char*>(&max_messages_) -
    reinterpret_cast<char*>(&return_immediately_) + sizeof(max_messages_));
  _cached_size_ = 0;
}

PullRequest::~PullRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.PullRequest)
  SharedDtor();
}

void PullRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  subscription_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void PullRequest::ArenaDtor(void* object) {
  PullRequest* _this = reinterpret_cast< PullRequest* >(object);
  (void)_this;
}
void PullRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PullRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PullRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PullRequest_descriptor_;
}

const PullRequest& PullRequest::default_instance() {
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PullRequest> PullRequest_default_instance_;

PullRequest* PullRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<PullRequest>(arena);
}

void PullRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.PullRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PullRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PullRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(return_immediately_, max_messages_);
  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef ZR_HELPER_
#undef ZR_

}

bool PullRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.PullRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string subscription = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subscription()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subscription().data(), this->subscription().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.PullRequest.subscription"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_return_immediately;
        break;
      }

      // optional bool return_immediately = 2;
      case 2: {
        if (tag == 16) {
         parse_return_immediately:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &return_immediately_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max_messages;
        break;
      }

      // optional int32 max_messages = 3;
      case 3: {
        if (tag == 24) {
         parse_max_messages:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_messages_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.PullRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.PullRequest)
  return false;
#undef DO_
}

void PullRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.PullRequest)
  // optional string subscription = 1;
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), this->subscription().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PullRequest.subscription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->subscription(), output);
  }

  // optional bool return_immediately = 2;
  if (this->return_immediately() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->return_immediately(), output);
  }

  // optional int32 max_messages = 3;
  if (this->max_messages() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_messages(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.PullRequest)
}

::google::protobuf::uint8* PullRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.PullRequest)
  // optional string subscription = 1;
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), this->subscription().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PullRequest.subscription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->subscription(), target);
  }

  // optional bool return_immediately = 2;
  if (this->return_immediately() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->return_immediately(), target);
  }

  // optional int32 max_messages = 3;
  if (this->max_messages() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_messages(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.PullRequest)
  return target;
}

size_t PullRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.PullRequest)
  size_t total_size = 0;

  // optional string subscription = 1;
  if (this->subscription().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subscription());
  }

  // optional bool return_immediately = 2;
  if (this->return_immediately() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 max_messages = 3;
  if (this->max_messages() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_messages());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PullRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.PullRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PullRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PullRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.PullRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.PullRequest)
    UnsafeMergeFrom(*source);
  }
}

void PullRequest::MergeFrom(const PullRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.PullRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PullRequest::UnsafeMergeFrom(const PullRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.subscription().size() > 0) {
    set_subscription(from.subscription());
  }
  if (from.return_immediately() != 0) {
    set_return_immediately(from.return_immediately());
  }
  if (from.max_messages() != 0) {
    set_max_messages(from.max_messages());
  }
}

void PullRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.PullRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PullRequest::CopyFrom(const PullRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.PullRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PullRequest::IsInitialized() const {

  return true;
}

void PullRequest::Swap(PullRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PullRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void PullRequest::UnsafeArenaSwap(PullRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PullRequest::InternalSwap(PullRequest* other) {
  subscription_.Swap(&other->subscription_);
  std::swap(return_immediately_, other->return_immediately_);
  std::swap(max_messages_, other->max_messages_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PullRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PullRequest_descriptor_;
  metadata.reflection = PullRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PullRequest

// optional string subscription = 1;
void PullRequest::clear_subscription() {
  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& PullRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PullRequest.subscription)
  return subscription_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PullRequest::set_subscription(const ::std::string& value) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.PullRequest.subscription)
}
void PullRequest::set_subscription(const char* value) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.PullRequest.subscription)
}
void PullRequest::set_subscription(const char* value,
    size_t size) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.PullRequest.subscription)
}
::std::string* PullRequest::mutable_subscription() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PullRequest.subscription)
  return subscription_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PullRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.PullRequest.subscription)
  
  return subscription_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PullRequest::unsafe_arena_release_subscription() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.PullRequest.subscription)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return subscription_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void PullRequest::set_allocated_subscription(::std::string* subscription) {
  if (subscription != NULL) {
    
  } else {
    
  }
  subscription_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscription,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.PullRequest.subscription)
}
void PullRequest::unsafe_arena_set_allocated_subscription(
    ::std::string* subscription) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (subscription != NULL) {
    
  } else {
    
  }
  subscription_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      subscription, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.PullRequest.subscription)
}

// optional bool return_immediately = 2;
void PullRequest::clear_return_immediately() {
  return_immediately_ = false;
}
bool PullRequest::return_immediately() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PullRequest.return_immediately)
  return return_immediately_;
}
void PullRequest::set_return_immediately(bool value) {
  
  return_immediately_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1.PullRequest.return_immediately)
}

// optional int32 max_messages = 3;
void PullRequest::clear_max_messages() {
  max_messages_ = 0;
}
::google::protobuf::int32 PullRequest::max_messages() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PullRequest.max_messages)
  return max_messages_;
}
void PullRequest::set_max_messages(::google::protobuf::int32 value) {
  
  max_messages_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1.PullRequest.max_messages)
}

inline const PullRequest* PullRequest::internal_default_instance() {
  return &PullRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PullResponse::kReceivedMessagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PullResponse::PullResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.PullResponse)
}
PullResponse::PullResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  received_messages_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.PullResponse)
}

void PullResponse::InitAsDefaultInstance() {
}

PullResponse::PullResponse(const PullResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.PullResponse)
}

void PullResponse::SharedCtor() {
  _cached_size_ = 0;
}

PullResponse::~PullResponse() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.PullResponse)
  SharedDtor();
}

void PullResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void PullResponse::ArenaDtor(void* object) {
  PullResponse* _this = reinterpret_cast< PullResponse* >(object);
  (void)_this;
}
void PullResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PullResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PullResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PullResponse_descriptor_;
}

const PullResponse& PullResponse::default_instance() {
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PullResponse> PullResponse_default_instance_;

PullResponse* PullResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<PullResponse>(arena);
}

void PullResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.PullResponse)
  received_messages_.Clear();
}

bool PullResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.PullResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_received_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_received_messages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_received_messages;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.PullResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.PullResponse)
  return false;
#undef DO_
}

void PullResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.PullResponse)
  // repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
  for (unsigned int i = 0, n = this->received_messages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->received_messages(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.PullResponse)
}

::google::protobuf::uint8* PullResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.PullResponse)
  // repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
  for (unsigned int i = 0, n = this->received_messages_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->received_messages(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.PullResponse)
  return target;
}

size_t PullResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.PullResponse)
  size_t total_size = 0;

  // repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
  {
    unsigned int count = this->received_messages_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->received_messages(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PullResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.PullResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PullResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PullResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.PullResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.PullResponse)
    UnsafeMergeFrom(*source);
  }
}

void PullResponse::MergeFrom(const PullResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.PullResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PullResponse::UnsafeMergeFrom(const PullResponse& from) {
  GOOGLE_DCHECK(&from != this);
  received_messages_.MergeFrom(from.received_messages_);
}

void PullResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.PullResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PullResponse::CopyFrom(const PullResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.PullResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PullResponse::IsInitialized() const {

  return true;
}

void PullResponse::Swap(PullResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PullResponse temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void PullResponse::UnsafeArenaSwap(PullResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PullResponse::InternalSwap(PullResponse* other) {
  received_messages_.UnsafeArenaSwap(&other->received_messages_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PullResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PullResponse_descriptor_;
  metadata.reflection = PullResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PullResponse

// repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
int PullResponse::received_messages_size() const {
  return received_messages_.size();
}
void PullResponse::clear_received_messages() {
  received_messages_.Clear();
}
const ::google::pubsub::v1::ReceivedMessage& PullResponse::received_messages(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PullResponse.received_messages)
  return received_messages_.Get(index);
}
::google::pubsub::v1::ReceivedMessage* PullResponse::mutable_received_messages(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PullResponse.received_messages)
  return received_messages_.Mutable(index);
}
::google::pubsub::v1::ReceivedMessage* PullResponse::add_received_messages() {
  // @@protoc_insertion_point(field_add:google.pubsub.v1.PullResponse.received_messages)
  return received_messages_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::ReceivedMessage >*
PullResponse::mutable_received_messages() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.PullResponse.received_messages)
  return &received_messages_;
}
const ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::ReceivedMessage >&
PullResponse::received_messages() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.PullResponse.received_messages)
  return received_messages_;
}

inline const PullResponse* PullResponse::internal_default_instance() {
  return &PullResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModifyAckDeadlineRequest::kSubscriptionFieldNumber;
const int ModifyAckDeadlineRequest::kAckIdsFieldNumber;
const int ModifyAckDeadlineRequest::kAckDeadlineSecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModifyAckDeadlineRequest::ModifyAckDeadlineRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ModifyAckDeadlineRequest)
}
ModifyAckDeadlineRequest::ModifyAckDeadlineRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  ack_ids_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ModifyAckDeadlineRequest)
}

void ModifyAckDeadlineRequest::InitAsDefaultInstance() {
}

ModifyAckDeadlineRequest::ModifyAckDeadlineRequest(const ModifyAckDeadlineRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ModifyAckDeadlineRequest)
}

void ModifyAckDeadlineRequest::SharedCtor() {
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ack_deadline_seconds_ = 0;
  _cached_size_ = 0;
}

ModifyAckDeadlineRequest::~ModifyAckDeadlineRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ModifyAckDeadlineRequest)
  SharedDtor();
}

void ModifyAckDeadlineRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  subscription_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void ModifyAckDeadlineRequest::ArenaDtor(void* object) {
  ModifyAckDeadlineRequest* _this = reinterpret_cast< ModifyAckDeadlineRequest* >(object);
  (void)_this;
}
void ModifyAckDeadlineRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ModifyAckDeadlineRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyAckDeadlineRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyAckDeadlineRequest_descriptor_;
}

const ModifyAckDeadlineRequest& ModifyAckDeadlineRequest::default_instance() {
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ModifyAckDeadlineRequest> ModifyAckDeadlineRequest_default_instance_;

ModifyAckDeadlineRequest* ModifyAckDeadlineRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ModifyAckDeadlineRequest>(arena);
}

void ModifyAckDeadlineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ModifyAckDeadlineRequest)
  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ack_deadline_seconds_ = 0;
  ack_ids_.Clear();
}

bool ModifyAckDeadlineRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.ModifyAckDeadlineRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string subscription = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subscription()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subscription().data(), this->subscription().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ModifyAckDeadlineRequest.subscription"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ack_deadline_seconds;
        break;
      }

      // optional int32 ack_deadline_seconds = 3;
      case 3: {
        if (tag == 24) {
         parse_ack_deadline_seconds:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ack_deadline_seconds_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ack_ids;
        break;
      }

      // repeated string ack_ids = 4;
      case 4: {
        if (tag == 34) {
         parse_ack_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ack_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ack_ids(this->ack_ids_size() - 1).data(),
            this->ack_ids(this->ack_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ack_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.ModifyAckDeadlineRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.ModifyAckDeadlineRequest)
  return false;
#undef DO_
}

void ModifyAckDeadlineRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.ModifyAckDeadlineRequest)
  // optional string subscription = 1;
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), this->subscription().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ModifyAckDeadlineRequest.subscription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->subscription(), output);
  }

  // optional int32 ack_deadline_seconds = 3;
  if (this->ack_deadline_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ack_deadline_seconds(), output);
  }

  // repeated string ack_ids = 4;
  for (int i = 0; i < this->ack_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ack_ids(i).data(), this->ack_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ack_ids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.ModifyAckDeadlineRequest)
}

::google::protobuf::uint8* ModifyAckDeadlineRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ModifyAckDeadlineRequest)
  // optional string subscription = 1;
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), this->subscription().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ModifyAckDeadlineRequest.subscription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->subscription(), target);
  }

  // optional int32 ack_deadline_seconds = 3;
  if (this->ack_deadline_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ack_deadline_seconds(), target);
  }

  // repeated string ack_ids = 4;
  for (int i = 0; i < this->ack_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ack_ids(i).data(), this->ack_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->ack_ids(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ModifyAckDeadlineRequest)
  return target;
}

size_t ModifyAckDeadlineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ModifyAckDeadlineRequest)
  size_t total_size = 0;

  // optional string subscription = 1;
  if (this->subscription().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subscription());
  }

  // optional int32 ack_deadline_seconds = 3;
  if (this->ack_deadline_seconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ack_deadline_seconds());
  }

  // repeated string ack_ids = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ack_ids_size());
  for (int i = 0; i < this->ack_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ack_ids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyAckDeadlineRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ModifyAckDeadlineRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ModifyAckDeadlineRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModifyAckDeadlineRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ModifyAckDeadlineRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ModifyAckDeadlineRequest)
    UnsafeMergeFrom(*source);
  }
}

void ModifyAckDeadlineRequest::MergeFrom(const ModifyAckDeadlineRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ModifyAckDeadlineRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ModifyAckDeadlineRequest::UnsafeMergeFrom(const ModifyAckDeadlineRequest& from) {
  GOOGLE_DCHECK(&from != this);
  ack_ids_.UnsafeMergeFrom(from.ack_ids_);
  if (from.subscription().size() > 0) {
    set_subscription(from.subscription());
  }
  if (from.ack_deadline_seconds() != 0) {
    set_ack_deadline_seconds(from.ack_deadline_seconds());
  }
}

void ModifyAckDeadlineRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ModifyAckDeadlineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyAckDeadlineRequest::CopyFrom(const ModifyAckDeadlineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ModifyAckDeadlineRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ModifyAckDeadlineRequest::IsInitialized() const {

  return true;
}

void ModifyAckDeadlineRequest::Swap(ModifyAckDeadlineRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ModifyAckDeadlineRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ModifyAckDeadlineRequest::UnsafeArenaSwap(ModifyAckDeadlineRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ModifyAckDeadlineRequest::InternalSwap(ModifyAckDeadlineRequest* other) {
  subscription_.Swap(&other->subscription_);
  ack_ids_.UnsafeArenaSwap(&other->ack_ids_);
  std::swap(ack_deadline_seconds_, other->ack_deadline_seconds_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModifyAckDeadlineRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyAckDeadlineRequest_descriptor_;
  metadata.reflection = ModifyAckDeadlineRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModifyAckDeadlineRequest

// optional string subscription = 1;
void ModifyAckDeadlineRequest::clear_subscription() {
  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ModifyAckDeadlineRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ModifyAckDeadlineRequest.subscription)
  return subscription_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModifyAckDeadlineRequest::set_subscription(const ::std::string& value) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ModifyAckDeadlineRequest.subscription)
}
void ModifyAckDeadlineRequest::set_subscription(const char* value) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ModifyAckDeadlineRequest.subscription)
}
void ModifyAckDeadlineRequest::set_subscription(const char* value,
    size_t size) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ModifyAckDeadlineRequest.subscription)
}
::std::string* ModifyAckDeadlineRequest::mutable_subscription() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ModifyAckDeadlineRequest.subscription)
  return subscription_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ModifyAckDeadlineRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ModifyAckDeadlineRequest.subscription)
  
  return subscription_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ModifyAckDeadlineRequest::unsafe_arena_release_subscription() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ModifyAckDeadlineRequest.subscription)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return subscription_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ModifyAckDeadlineRequest::set_allocated_subscription(::std::string* subscription) {
  if (subscription != NULL) {
    
  } else {
    
  }
  subscription_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscription,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ModifyAckDeadlineRequest.subscription)
}
void ModifyAckDeadlineRequest::unsafe_arena_set_allocated_subscription(
    ::std::string* subscription) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (subscription != NULL) {
    
  } else {
    
  }
  subscription_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      subscription, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ModifyAckDeadlineRequest.subscription)
}

// repeated string ack_ids = 4;
int ModifyAckDeadlineRequest::ack_ids_size() const {
  return ack_ids_.size();
}
void ModifyAckDeadlineRequest::clear_ack_ids() {
  ack_ids_.Clear();
}
const ::std::string& ModifyAckDeadlineRequest::ack_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
  return ack_ids_.Get(index);
}
::std::string* ModifyAckDeadlineRequest::mutable_ack_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
  return ack_ids_.Mutable(index);
}
void ModifyAckDeadlineRequest::set_ack_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
  ack_ids_.Mutable(index)->assign(value);
}
void ModifyAckDeadlineRequest::set_ack_ids(int index, const char* value) {
  ack_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
}
void ModifyAckDeadlineRequest::set_ack_ids(int index, const char* value, size_t size) {
  ack_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
}
::std::string* ModifyAckDeadlineRequest::add_ack_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
  return ack_ids_.Add();
}
void ModifyAckDeadlineRequest::add_ack_ids(const ::std::string& value) {
  ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
}
void ModifyAckDeadlineRequest::add_ack_ids(const char* value) {
  ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
}
void ModifyAckDeadlineRequest::add_ack_ids(const char* value, size_t size) {
  ack_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ModifyAckDeadlineRequest::ack_ids() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
  return ack_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ModifyAckDeadlineRequest::mutable_ack_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
  return &ack_ids_;
}

// optional int32 ack_deadline_seconds = 3;
void ModifyAckDeadlineRequest::clear_ack_deadline_seconds() {
  ack_deadline_seconds_ = 0;
}
::google::protobuf::int32 ModifyAckDeadlineRequest::ack_deadline_seconds() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ModifyAckDeadlineRequest.ack_deadline_seconds)
  return ack_deadline_seconds_;
}
void ModifyAckDeadlineRequest::set_ack_deadline_seconds(::google::protobuf::int32 value) {
  
  ack_deadline_seconds_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ModifyAckDeadlineRequest.ack_deadline_seconds)
}

inline const ModifyAckDeadlineRequest* ModifyAckDeadlineRequest::internal_default_instance() {
  return &ModifyAckDeadlineRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcknowledgeRequest::kSubscriptionFieldNumber;
const int AcknowledgeRequest::kAckIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcknowledgeRequest::AcknowledgeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.AcknowledgeRequest)
}
AcknowledgeRequest::AcknowledgeRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  ack_ids_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.AcknowledgeRequest)
}

void AcknowledgeRequest::InitAsDefaultInstance() {
}

AcknowledgeRequest::AcknowledgeRequest(const AcknowledgeRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.AcknowledgeRequest)
}

void AcknowledgeRequest::SharedCtor() {
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AcknowledgeRequest::~AcknowledgeRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.AcknowledgeRequest)
  SharedDtor();
}

void AcknowledgeRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  subscription_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void AcknowledgeRequest::ArenaDtor(void* object) {
  AcknowledgeRequest* _this = reinterpret_cast< AcknowledgeRequest* >(object);
  (void)_this;
}
void AcknowledgeRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void AcknowledgeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcknowledgeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcknowledgeRequest_descriptor_;
}

const AcknowledgeRequest& AcknowledgeRequest::default_instance() {
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AcknowledgeRequest> AcknowledgeRequest_default_instance_;

AcknowledgeRequest* AcknowledgeRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<AcknowledgeRequest>(arena);
}

void AcknowledgeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.AcknowledgeRequest)
  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ack_ids_.Clear();
}

bool AcknowledgeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.AcknowledgeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string subscription = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subscription()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subscription().data(), this->subscription().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.AcknowledgeRequest.subscription"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ack_ids;
        break;
      }

      // repeated string ack_ids = 2;
      case 2: {
        if (tag == 18) {
         parse_ack_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ack_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ack_ids(this->ack_ids_size() - 1).data(),
            this->ack_ids(this->ack_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.AcknowledgeRequest.ack_ids"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ack_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.AcknowledgeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.AcknowledgeRequest)
  return false;
#undef DO_
}

void AcknowledgeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.AcknowledgeRequest)
  // optional string subscription = 1;
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), this->subscription().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.AcknowledgeRequest.subscription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->subscription(), output);
  }

  // repeated string ack_ids = 2;
  for (int i = 0; i < this->ack_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ack_ids(i).data(), this->ack_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.AcknowledgeRequest.ack_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ack_ids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.AcknowledgeRequest)
}

::google::protobuf::uint8* AcknowledgeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.AcknowledgeRequest)
  // optional string subscription = 1;
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), this->subscription().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.AcknowledgeRequest.subscription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->subscription(), target);
  }

  // repeated string ack_ids = 2;
  for (int i = 0; i < this->ack_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ack_ids(i).data(), this->ack_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.AcknowledgeRequest.ack_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->ack_ids(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.AcknowledgeRequest)
  return target;
}

size_t AcknowledgeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.AcknowledgeRequest)
  size_t total_size = 0;

  // optional string subscription = 1;
  if (this->subscription().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subscription());
  }

  // repeated string ack_ids = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ack_ids_size());
  for (int i = 0; i < this->ack_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ack_ids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcknowledgeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.AcknowledgeRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AcknowledgeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AcknowledgeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.AcknowledgeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.AcknowledgeRequest)
    UnsafeMergeFrom(*source);
  }
}

void AcknowledgeRequest::MergeFrom(const AcknowledgeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.AcknowledgeRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AcknowledgeRequest::UnsafeMergeFrom(const AcknowledgeRequest& from) {
  GOOGLE_DCHECK(&from != this);
  ack_ids_.UnsafeMergeFrom(from.ack_ids_);
  if (from.subscription().size() > 0) {
    set_subscription(from.subscription());
  }
}

void AcknowledgeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.AcknowledgeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcknowledgeRequest::CopyFrom(const AcknowledgeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.AcknowledgeRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AcknowledgeRequest::IsInitialized() const {

  return true;
}

void AcknowledgeRequest::Swap(AcknowledgeRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    AcknowledgeRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void AcknowledgeRequest::UnsafeArenaSwap(AcknowledgeRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void AcknowledgeRequest::InternalSwap(AcknowledgeRequest* other) {
  subscription_.Swap(&other->subscription_);
  ack_ids_.UnsafeArenaSwap(&other->ack_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcknowledgeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AcknowledgeRequest_descriptor_;
  metadata.reflection = AcknowledgeRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AcknowledgeRequest

// optional string subscription = 1;
void AcknowledgeRequest::clear_subscription() {
  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& AcknowledgeRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.AcknowledgeRequest.subscription)
  return subscription_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AcknowledgeRequest::set_subscription(const ::std::string& value) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.AcknowledgeRequest.subscription)
}
void AcknowledgeRequest::set_subscription(const char* value) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.AcknowledgeRequest.subscription)
}
void AcknowledgeRequest::set_subscription(const char* value,
    size_t size) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.AcknowledgeRequest.subscription)
}
::std::string* AcknowledgeRequest::mutable_subscription() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.AcknowledgeRequest.subscription)
  return subscription_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* AcknowledgeRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.AcknowledgeRequest.subscription)
  
  return subscription_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* AcknowledgeRequest::unsafe_arena_release_subscription() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.AcknowledgeRequest.subscription)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return subscription_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void AcknowledgeRequest::set_allocated_subscription(::std::string* subscription) {
  if (subscription != NULL) {
    
  } else {
    
  }
  subscription_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscription,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.AcknowledgeRequest.subscription)
}
void AcknowledgeRequest::unsafe_arena_set_allocated_subscription(
    ::std::string* subscription) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (subscription != NULL) {
    
  } else {
    
  }
  subscription_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      subscription, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.AcknowledgeRequest.subscription)
}

// repeated string ack_ids = 2;
int AcknowledgeRequest::ack_ids_size() const {
  return ack_ids_.size();
}
void AcknowledgeRequest::clear_ack_ids() {
  ack_ids_.Clear();
}
const ::std::string& AcknowledgeRequest::ack_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.AcknowledgeRequest.ack_ids)
  return ack_ids_.Get(index);
}
::std::string* AcknowledgeRequest::mutable_ack_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.AcknowledgeRequest.ack_ids)
  return ack_ids_.Mutable(index);
}
void AcknowledgeRequest::set_ack_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.pubsub.v1.AcknowledgeRequest.ack_ids)
  ack_ids_.Mutable(index)->assign(value);
}
void AcknowledgeRequest::set_ack_ids(int index, const char* value) {
  ack_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.AcknowledgeRequest.ack_ids)
}
void AcknowledgeRequest::set_ack_ids(int index, const char* value, size_t size) {
  ack_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.AcknowledgeRequest.ack_ids)
}
::std::string* AcknowledgeRequest::add_ack_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.pubsub.v1.AcknowledgeRequest.ack_ids)
  return ack_ids_.Add();
}
void AcknowledgeRequest::add_ack_ids(const ::std::string& value) {
  ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.pubsub.v1.AcknowledgeRequest.ack_ids)
}
void AcknowledgeRequest::add_ack_ids(const char* value) {
  ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.pubsub.v1.AcknowledgeRequest.ack_ids)
}
void AcknowledgeRequest::add_ack_ids(const char* value, size_t size) {
  ack_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.pubsub.v1.AcknowledgeRequest.ack_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
AcknowledgeRequest::ack_ids() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.AcknowledgeRequest.ack_ids)
  return ack_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
AcknowledgeRequest::mutable_ack_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.AcknowledgeRequest.ack_ids)
  return &ack_ids_;
}

inline const AcknowledgeRequest* AcknowledgeRequest::internal_default_instance() {
  return &AcknowledgeRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamingPullRequest::kSubscriptionFieldNumber;
const int StreamingPullRequest::kAckIdsFieldNumber;
const int StreamingPullRequest::kModifyDeadlineSecondsFieldNumber;
const int StreamingPullRequest::kModifyDeadlineAckIdsFieldNumber;
const int StreamingPullRequest::kStreamAckDeadlineSecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamingPullRequest::StreamingPullRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.StreamingPullRequest)
}
StreamingPullRequest::StreamingPullRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  ack_ids_(arena),
  modify_deadline_seconds_(arena),
  modify_deadline_ack_ids_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.StreamingPullRequest)
}

void StreamingPullRequest::InitAsDefaultInstance() {
}

StreamingPullRequest::StreamingPullRequest(const StreamingPullRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.StreamingPullRequest)
}

void StreamingPullRequest::SharedCtor() {
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_ack_deadline_seconds_ = 0;
  _cached_size_ = 0;
}

StreamingPullRequest::~StreamingPullRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.StreamingPullRequest)
  SharedDtor();
}

void StreamingPullRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  subscription_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void StreamingPullRequest::ArenaDtor(void* object) {
  StreamingPullRequest* _this = reinterpret_cast< StreamingPullRequest* >(object);
  (void)_this;
}
void StreamingPullRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StreamingPullRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamingPullRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamingPullRequest_descriptor_;
}

const StreamingPullRequest& StreamingPullRequest::default_instance() {
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<StreamingPullRequest> StreamingPullRequest_default_instance_;

StreamingPullRequest* StreamingPullRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<StreamingPullRequest>(arena);
}

void StreamingPullRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.StreamingPullRequest)
  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  stream_ack_deadline_seconds_ = 0;
  ack_ids_.Clear();
  modify_deadline_seconds_.Clear();
  modify_deadline_ack_ids_.Clear();
}

bool StreamingPullRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.StreamingPullRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string subscription = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subscription()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subscription().data(), this->subscription().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.StreamingPullRequest.subscription"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ack_ids;
        break;
      }

      // repeated string ack_ids = 2;
      case 2: {
        if (tag == 18) {
         parse_ack_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ack_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ack_ids(this->ack_ids_size() - 1).data(),
            this->ack_ids(this->ack_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.StreamingPullRequest.ack_ids"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ack_ids;
        if (input->ExpectTag(26)) goto parse_modify_deadline_seconds;
        break;
      }

      // repeated int32 modify_deadline_seconds = 3;
      case 3: {
        if (tag == 26) {
         parse_modify_deadline_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_modify_deadline_seconds())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_modify_deadline_seconds())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_modify_deadline_ack_ids;
        break;
      }

      // repeated string modify_deadline_ack_ids = 4;
      case 4: {
        if (tag == 34) {
         parse_modify_deadline_ack_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_modify_deadline_ack_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->modify_deadline_ack_ids(this->modify_deadline_ack_ids_size() - 1).data(),
            this->modify_deadline_ack_ids(this->modify_deadline_ack_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_modify_deadline_ack_ids;
        if (input->ExpectTag(40)) goto parse_stream_ack_deadline_seconds;
        break;
      }

      // optional int32 stream_ack_deadline_seconds = 5;
      case 5: {
        if (tag == 40) {
         parse_stream_ack_deadline_seconds:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stream_ack_deadline_seconds_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.StreamingPullRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.StreamingPullRequest)
  return false;
#undef DO_
}

void StreamingPullRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.StreamingPullRequest)
  // optional string subscription = 1;
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), this->subscription().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.StreamingPullRequest.subscription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->subscription(), output);
  }

  // repeated string ack_ids = 2;
  for (int i = 0; i < this->ack_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ack_ids(i).data(), this->ack_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.StreamingPullRequest.ack_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ack_ids(i), output);
  }

  // repeated int32 modify_deadline_seconds = 3;
  if (this->modify_deadline_seconds_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_modify_deadline_seconds_cached_byte_size_);
  }
  for (int i = 0; i < this->modify_deadline_seconds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->modify_deadline_seconds(i), output);
  }

  // repeated string modify_deadline_ack_ids = 4;
  for (int i = 0; i < this->modify_deadline_ack_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modify_deadline_ack_ids(i).data(), this->modify_deadline_ack_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->modify_deadline_ack_ids(i), output);
  }

  // optional int32 stream_ack_deadline_seconds = 5;
  if (this->stream_ack_deadline_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->stream_ack_deadline_seconds(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.StreamingPullRequest)
}

::google::protobuf::uint8* StreamingPullRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.StreamingPullRequest)
  // optional string subscription = 1;
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), this->subscription().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.StreamingPullRequest.subscription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->subscription(), target);
  }

  // repeated string ack_ids = 2;
  for (int i = 0; i < this->ack_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ack_ids(i).data(), this->ack_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.StreamingPullRequest.ack_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->ack_ids(i), target);
  }

  // repeated int32 modify_deadline_seconds = 3;
  if (this->modify_deadline_seconds_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _modify_deadline_seconds_cached_byte_size_, target);
  }
  for (int i = 0; i < this->modify_deadline_seconds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->modify_deadline_seconds(i), target);
  }

  // repeated string modify_deadline_ack_ids = 4;
  for (int i = 0; i < this->modify_deadline_ack_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modify_deadline_ack_ids(i).data(), this->modify_deadline_ack_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->modify_deadline_ack_ids(i), target);
  }

  // optional int32 stream_ack_deadline_seconds = 5;
  if (this->stream_ack_deadline_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->stream_ack_deadline_seconds(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.StreamingPullRequest)
  return target;
}

size_t StreamingPullRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.StreamingPullRequest)
  size_t total_size = 0;

  // optional string subscription = 1;
  if (this->subscription().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subscription());
  }

  // optional int32 stream_ack_deadline_seconds = 5;
  if (this->stream_ack_deadline_seconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stream_ack_deadline_seconds());
  }

  // repeated string ack_ids = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ack_ids_size());
  for (int i = 0; i < this->ack_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ack_ids(i));
  }

  // repeated int32 modify_deadline_seconds = 3;
  {
    size_t data_size = 0;
    unsigned int count = this->modify_deadline_seconds_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->modify_deadline_seconds(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _modify_deadline_seconds_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string modify_deadline_ack_ids = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->modify_deadline_ack_ids_size());
  for (int i = 0; i < this->modify_deadline_ack_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->modify_deadline_ack_ids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamingPullRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.StreamingPullRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StreamingPullRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamingPullRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.StreamingPullRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.StreamingPullRequest)
    UnsafeMergeFrom(*source);
  }
}

void StreamingPullRequest::MergeFrom(const StreamingPullRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.StreamingPullRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void StreamingPullRequest::UnsafeMergeFrom(const StreamingPullRequest& from) {
  GOOGLE_DCHECK(&from != this);
  ack_ids_.UnsafeMergeFrom(from.ack_ids_);
  modify_deadline_seconds_.UnsafeMergeFrom(from.modify_deadline_seconds_);
  modify_deadline_ack_ids_.UnsafeMergeFrom(from.modify_deadline_ack_ids_);
  if (from.subscription().size() > 0) {
    set_subscription(from.subscription());
  }
  if (from.stream_ack_deadline_seconds() != 0) {
    set_stream_ack_deadline_seconds(from.stream_ack_deadline_seconds());
  }
}

void StreamingPullRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.StreamingPullRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingPullRequest::CopyFrom(const StreamingPullRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.StreamingPullRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool StreamingPullRequest::IsInitialized() const {

  return true;
}

void StreamingPullRequest::Swap(StreamingPullRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamingPullRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void StreamingPullRequest::UnsafeArenaSwap(StreamingPullRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamingPullRequest::InternalSwap(StreamingPullRequest* other) {
  subscription_.Swap(&other->subscription_);
  ack_ids_.UnsafeArenaSwap(&other->ack_ids_);
  modify_deadline_seconds_.UnsafeArenaSwap(&other->modify_deadline_seconds_);
  modify_deadline_ack_ids_.UnsafeArenaSwap(&other->modify_deadline_ack_ids_);
  std::swap(stream_ack_deadline_seconds_, other->stream_ack_deadline_seconds_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamingPullRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamingPullRequest_descriptor_;
  metadata.reflection = StreamingPullRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamingPullRequest

// optional string subscription = 1;
void StreamingPullRequest::clear_subscription() {
  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& StreamingPullRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.StreamingPullRequest.subscription)
  return subscription_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StreamingPullRequest::set_subscription(const ::std::string& value) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullRequest.subscription)
}
void StreamingPullRequest::set_subscription(const char* value) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.StreamingPullRequest.subscription)
}
void StreamingPullRequest::set_subscription(const char* value,
    size_t size) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.StreamingPullRequest.subscription)
}
::std::string* StreamingPullRequest::mutable_subscription() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.StreamingPullRequest.subscription)
  return subscription_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamingPullRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.StreamingPullRequest.subscription)
  
  return subscription_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamingPullRequest::unsafe_arena_release_subscription() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.StreamingPullRequest.subscription)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return subscription_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void StreamingPullRequest::set_allocated_subscription(::std::string* subscription) {
  if (subscription != NULL) {
    
  } else {
    
  }
  subscription_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscription,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.StreamingPullRequest.subscription)
}
void StreamingPullRequest::unsafe_arena_set_allocated_subscription(
    ::std::string* subscription) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (subscription != NULL) {
    
  } else {
    
  }
  subscription_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      subscription, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.StreamingPullRequest.subscription)
}

// repeated string ack_ids = 2;
int StreamingPullRequest::ack_ids_size() const {
  return ack_ids_.size();
}
void StreamingPullRequest::clear_ack_ids() {
  ack_ids_.Clear();
}
const ::std::string& StreamingPullRequest::ack_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.StreamingPullRequest.ack_ids)
  return ack_ids_.Get(index);
}
::std::string* StreamingPullRequest::mutable_ack_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.StreamingPullRequest.ack_ids)
  return ack_ids_.Mutable(index);
}
void StreamingPullRequest::set_ack_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullRequest.ack_ids)
  ack_ids_.Mutable(index)->assign(value);
}
void StreamingPullRequest::set_ack_ids(int index, const char* value) {
  ack_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.StreamingPullRequest.ack_ids)
}
void StreamingPullRequest::set_ack_ids(int index, const char* value, size_t size) {
  ack_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.StreamingPullRequest.ack_ids)
}
::std::string* StreamingPullRequest::add_ack_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.pubsub.v1.StreamingPullRequest.ack_ids)
  return ack_ids_.Add();
}
void StreamingPullRequest::add_ack_ids(const ::std::string& value) {
  ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.pubsub.v1.StreamingPullRequest.ack_ids)
}
void StreamingPullRequest::add_ack_ids(const char* value) {
  ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.pubsub.v1.StreamingPullRequest.ack_ids)
}
void StreamingPullRequest::add_ack_ids(const char* value, size_t size) {
  ack_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.pubsub.v1.StreamingPullRequest.ack_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
StreamingPullRequest::ack_ids() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.StreamingPullRequest.ack_ids)
  return ack_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
StreamingPullRequest::mutable_ack_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.StreamingPullRequest.ack_ids)
  return &ack_ids_;
}

// repeated int32 modify_deadline_seconds = 3;
int StreamingPullRequest::modify_deadline_seconds_size() const {
  return modify_deadline_seconds_.size();
}
void StreamingPullRequest::clear_modify_deadline_seconds() {
  modify_deadline_seconds_.Clear();
}
::google::protobuf::int32 StreamingPullRequest::modify_deadline_seconds(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.StreamingPullRequest.modify_deadline_seconds)
  return modify_deadline_seconds_.Get(index);
}
void StreamingPullRequest::set_modify_deadline_seconds(int index, ::google::protobuf::int32 value) {
  modify_deadline_seconds_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullRequest.modify_deadline_seconds)
}
void StreamingPullRequest::add_modify_deadline_seconds(::google::protobuf::int32 value) {
  modify_deadline_seconds_.Add(value);
  // @@protoc_insertion_point(field_add:google.pubsub.v1.StreamingPullRequest.modify_deadline_seconds)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
StreamingPullRequest::modify_deadline_seconds() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.StreamingPullRequest.modify_deadline_seconds)
  return modify_deadline_seconds_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
StreamingPullRequest::mutable_modify_deadline_seconds() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.StreamingPullRequest.modify_deadline_seconds)
  return &modify_deadline_seconds_;
}

// repeated string modify_deadline_ack_ids = 4;
int StreamingPullRequest::modify_deadline_ack_ids_size() const {
  return modify_deadline_ack_ids_.size();
}
void StreamingPullRequest::clear_modify_deadline_ack_ids() {
  modify_deadline_ack_ids_.Clear();
}
const ::std::string& StreamingPullRequest::modify_deadline_ack_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
  return modify_deadline_ack_ids_.Get(index);
}
::std::string* StreamingPullRequest::mutable_modify_deadline_ack_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
  return modify_deadline_ack_ids_.Mutable(index);
}
void StreamingPullRequest::set_modify_deadline_ack_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
  modify_deadline_ack_ids_.Mutable(index)->assign(value);
}
void StreamingPullRequest::set_modify_deadline_ack_ids(int index, const char* value) {
  modify_deadline_ack_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
}
void StreamingPullRequest::set_modify_deadline_ack_ids(int index, const char* value, size_t size) {
  modify_deadline_ack_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
}
::std::string* StreamingPullRequest::add_modify_deadline_ack_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
  return modify_deadline_ack_ids_.Add();
}
void StreamingPullRequest::add_modify_deadline_ack_ids(const ::std::string& value) {
  modify_deadline_ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
}
void StreamingPullRequest::add_modify_deadline_ack_ids(const char* value) {
  modify_deadline_ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
}
void StreamingPullRequest::add_modify_deadline_ack_ids(const char* value, size_t size) {
  modify_deadline_ack_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
StreamingPullRequest::modify_deadline_ack_ids() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
  return modify_deadline_ack_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
StreamingPullRequest::mutable_modify_deadline_ack_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
  return &modify_deadline_ack_ids_;
}

// optional int32 stream_ack_deadline_seconds = 5;
void StreamingPullRequest::clear_stream_ack_deadline_seconds() {
  stream_ack_deadline_seconds_ = 0;
}
::google::protobuf::int32 StreamingPullRequest::stream_ack_deadline_seconds() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.StreamingPullRequest.stream_ack_deadline_seconds)
  return stream_ack_deadline_seconds_;
}
void StreamingPullRequest::set_stream_ack_deadline_seconds(::google::protobuf::int32 value) {
  
  stream_ack_deadline_seconds_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullRequest.stream_ack_deadline_seconds)
}

inline const StreamingPullRequest* StreamingPullRequest::internal_default_instance() {
  return &StreamingPullRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamingPullResponse::kReceivedMessagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamingPullResponse::StreamingPullResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.StreamingPullResponse)
}
StreamingPullResponse::StreamingPullResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  received_messages_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.StreamingPullResponse)
}

void StreamingPullResponse::InitAsDefaultInstance() {
}

StreamingPullResponse::StreamingPullResponse(const StreamingPullResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.StreamingPullResponse)
}

void StreamingPullResponse::SharedCtor() {
  _cached_size_ = 0;
}

StreamingPullResponse::~StreamingPullResponse() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.StreamingPullResponse)
  SharedDtor();
}

void StreamingPullResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void StreamingPullResponse::ArenaDtor(void* object) {
  StreamingPullResponse* _this = reinterpret_cast< StreamingPullResponse* >(object);
  (void)_this;
}
void StreamingPullResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StreamingPullResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamingPullResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamingPullResponse_descriptor_;
}

const StreamingPullResponse& StreamingPullResponse::default_instance() {
  protobuf_InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<StreamingPullResponse> StreamingPullResponse_default_instance_;

StreamingPullResponse* StreamingPullResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<StreamingPullResponse>(arena);
}

void StreamingPullResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.StreamingPullResponse)
  received_messages_.Clear();
}

bool StreamingPullResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.StreamingPullResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_received_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_received_messages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_received_messages;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.StreamingPullResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.StreamingPullResponse)
  return false;
#undef DO_
}

void StreamingPullResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.StreamingPullResponse)
  // repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
  for (unsigned int i = 0, n = this->received_messages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->received_messages(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.StreamingPullResponse)
}

::google::protobuf::uint8* StreamingPullResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.StreamingPullResponse)
  // repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
  for (unsigned int i = 0, n = this->received_messages_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->received_messages(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.StreamingPullResponse)
  return target;
}

size_t StreamingPullResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.StreamingPullResponse)
  size_t total_size = 0;

  // repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
  {
    unsigned int count = this->received_messages_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->received_messages(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamingPullResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.StreamingPullResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StreamingPullResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamingPullResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.StreamingPullResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.StreamingPullResponse)
    UnsafeMergeFrom(*source);
  }
}

void StreamingPullResponse::MergeFrom(const StreamingPullResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.StreamingPullResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void StreamingPullResponse::UnsafeMergeFrom(const StreamingPullResponse& from) {
  GOOGLE_DCHECK(&from != this);
  received_messages_.MergeFrom(from.received_messages_);
}

void StreamingPullResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.StreamingPullResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingPullResponse::CopyFrom(const StreamingPullResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.StreamingPullResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool StreamingPullResponse::IsInitialized() const {

  return true;
}

void StreamingPullResponse::Swap(StreamingPullResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamingPullResponse temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void StreamingPullResponse::UnsafeArenaSwap(StreamingPullResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamingPullResponse::InternalSwap(StreamingPullResponse* other) {
  received_messages_.UnsafeArenaSwap(&other->received_messages_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamingPullResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamingPullResponse_descriptor_;
  metadata.reflection = StreamingPullResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamingPullResponse

// repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
int StreamingPullResponse::received_messages_size() const {
  return received_messages_.size();
}
void StreamingPullResponse::clear_received_messages() {
  received_messages_.Clear();
}
const ::google::pubsub::v1::ReceivedMessage& StreamingPullResponse::received_messages(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.StreamingPullResponse.received_messages)
  return received_messages_.Get(index);
}
::google::pubsub::v1::ReceivedMessage* StreamingPullResponse::mutable_received_messages(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.StreamingPullResponse.received_messages)
  return received_messages_.Mutable(index);
}
::google::pubsub::v1::ReceivedMessage* StreamingPullResponse::add_received_messages() {
  // @@protoc_insertion_point(field_add:google.pubsub.v1.StreamingPullResponse.received_messages)
  return received_messages_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::ReceivedMessage >*
StreamingPullResponse::mutable_received_messages() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.StreamingPullResponse.received_messages)
  return &received_messages_;
}
const ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::ReceivedMessage >&
StreamingPullResponse::received_messages() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.StreamingPullResponse.received_messages)
  return received_messages_;
}

inline const StreamingPullResponse* StreamingPullResponse::internal_default_instance() {
  return &StreamingPullResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace pubsub
}  // namespace google

// @@protoc_insertion_point(global_scope)
