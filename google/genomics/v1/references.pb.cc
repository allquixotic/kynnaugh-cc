// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/genomics/v1/references.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/genomics/v1/references.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace genomics {
namespace v1 {

namespace {

const ::google::protobuf::Descriptor* Reference_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reference_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReferenceSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReferenceSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchReferenceSetsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchReferenceSetsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchReferenceSetsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchReferenceSetsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetReferenceSetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetReferenceSetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchReferencesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchReferencesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchReferencesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchReferencesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetReferenceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetReferenceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListBasesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListBasesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListBasesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListBasesResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_google_2fgenomics_2fv1_2freferences_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_google_2fgenomics_2fv1_2freferences_2eproto() {
  protobuf_AddDesc_google_2fgenomics_2fv1_2freferences_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "google/genomics/v1/references.proto");
  GOOGLE_CHECK(file != NULL);
  Reference_descriptor_ = file->message_type(0);
  static const int Reference_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reference, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reference, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reference, md5checksum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reference, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reference, source_uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reference, source_accessions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reference, ncbi_taxon_id_),
  };
  Reference_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Reference_descriptor_,
      Reference::internal_default_instance(),
      Reference_offsets_,
      -1,
      -1,
      -1,
      sizeof(Reference),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reference, _internal_metadata_));
  ReferenceSet_descriptor_ = file->message_type(1);
  static const int ReferenceSet_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceSet, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceSet, reference_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceSet, md5checksum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceSet, ncbi_taxon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceSet, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceSet, assembly_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceSet, source_uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceSet, source_accessions_),
  };
  ReferenceSet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReferenceSet_descriptor_,
      ReferenceSet::internal_default_instance(),
      ReferenceSet_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReferenceSet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceSet, _internal_metadata_));
  SearchReferenceSetsRequest_descriptor_ = file->message_type(2);
  static const int SearchReferenceSetsRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReferenceSetsRequest, md5checksums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReferenceSetsRequest, accessions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReferenceSetsRequest, assembly_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReferenceSetsRequest, page_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReferenceSetsRequest, page_size_),
  };
  SearchReferenceSetsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SearchReferenceSetsRequest_descriptor_,
      SearchReferenceSetsRequest::internal_default_instance(),
      SearchReferenceSetsRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SearchReferenceSetsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReferenceSetsRequest, _internal_metadata_));
  SearchReferenceSetsResponse_descriptor_ = file->message_type(3);
  static const int SearchReferenceSetsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReferenceSetsResponse, reference_sets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReferenceSetsResponse, next_page_token_),
  };
  SearchReferenceSetsResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SearchReferenceSetsResponse_descriptor_,
      SearchReferenceSetsResponse::internal_default_instance(),
      SearchReferenceSetsResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SearchReferenceSetsResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReferenceSetsResponse, _internal_metadata_));
  GetReferenceSetRequest_descriptor_ = file->message_type(4);
  static const int GetReferenceSetRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetReferenceSetRequest, reference_set_id_),
  };
  GetReferenceSetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetReferenceSetRequest_descriptor_,
      GetReferenceSetRequest::internal_default_instance(),
      GetReferenceSetRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetReferenceSetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetReferenceSetRequest, _internal_metadata_));
  SearchReferencesRequest_descriptor_ = file->message_type(5);
  static const int SearchReferencesRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReferencesRequest, md5checksums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReferencesRequest, accessions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReferencesRequest, reference_set_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReferencesRequest, page_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReferencesRequest, page_size_),
  };
  SearchReferencesRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SearchReferencesRequest_descriptor_,
      SearchReferencesRequest::internal_default_instance(),
      SearchReferencesRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SearchReferencesRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReferencesRequest, _internal_metadata_));
  SearchReferencesResponse_descriptor_ = file->message_type(6);
  static const int SearchReferencesResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReferencesResponse, references_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReferencesResponse, next_page_token_),
  };
  SearchReferencesResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SearchReferencesResponse_descriptor_,
      SearchReferencesResponse::internal_default_instance(),
      SearchReferencesResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SearchReferencesResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReferencesResponse, _internal_metadata_));
  GetReferenceRequest_descriptor_ = file->message_type(7);
  static const int GetReferenceRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetReferenceRequest, reference_id_),
  };
  GetReferenceRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetReferenceRequest_descriptor_,
      GetReferenceRequest::internal_default_instance(),
      GetReferenceRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetReferenceRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetReferenceRequest, _internal_metadata_));
  ListBasesRequest_descriptor_ = file->message_type(8);
  static const int ListBasesRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBasesRequest, reference_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBasesRequest, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBasesRequest, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBasesRequest, page_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBasesRequest, page_size_),
  };
  ListBasesRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListBasesRequest_descriptor_,
      ListBasesRequest::internal_default_instance(),
      ListBasesRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListBasesRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBasesRequest, _internal_metadata_));
  ListBasesResponse_descriptor_ = file->message_type(9);
  static const int ListBasesResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBasesResponse, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBasesResponse, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBasesResponse, next_page_token_),
  };
  ListBasesResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListBasesResponse_descriptor_,
      ListBasesResponse::internal_default_instance(),
      ListBasesResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListBasesResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBasesResponse, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_google_2fgenomics_2fv1_2freferences_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Reference_descriptor_, Reference::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReferenceSet_descriptor_, ReferenceSet::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SearchReferenceSetsRequest_descriptor_, SearchReferenceSetsRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SearchReferenceSetsResponse_descriptor_, SearchReferenceSetsResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetReferenceSetRequest_descriptor_, GetReferenceSetRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SearchReferencesRequest_descriptor_, SearchReferencesRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SearchReferencesResponse_descriptor_, SearchReferencesResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetReferenceRequest_descriptor_, GetReferenceRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListBasesRequest_descriptor_, ListBasesRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListBasesResponse_descriptor_, ListBasesResponse::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_google_2fgenomics_2fv1_2freferences_2eproto() {
  Reference_default_instance_.Shutdown();
  delete Reference_reflection_;
  ReferenceSet_default_instance_.Shutdown();
  delete ReferenceSet_reflection_;
  SearchReferenceSetsRequest_default_instance_.Shutdown();
  delete SearchReferenceSetsRequest_reflection_;
  SearchReferenceSetsResponse_default_instance_.Shutdown();
  delete SearchReferenceSetsResponse_reflection_;
  GetReferenceSetRequest_default_instance_.Shutdown();
  delete GetReferenceSetRequest_reflection_;
  SearchReferencesRequest_default_instance_.Shutdown();
  delete SearchReferencesRequest_reflection_;
  SearchReferencesResponse_default_instance_.Shutdown();
  delete SearchReferencesResponse_reflection_;
  GetReferenceRequest_default_instance_.Shutdown();
  delete GetReferenceRequest_reflection_;
  ListBasesRequest_default_instance_.Shutdown();
  delete ListBasesRequest_reflection_;
  ListBasesResponse_default_instance_.Shutdown();
  delete ListBasesResponse_reflection_;
}

void protobuf_InitDefaults_google_2fgenomics_2fv1_2freferences_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::api::protobuf_InitDefaults_google_2fapi_2fannotations_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  Reference_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ReferenceSet_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SearchReferenceSetsRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SearchReferenceSetsResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  GetReferenceSetRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SearchReferencesRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SearchReferencesResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  GetReferenceRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ListBasesRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ListBasesResponse_default_instance_.DefaultConstruct();
  Reference_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReferenceSet_default_instance_.get_mutable()->InitAsDefaultInstance();
  SearchReferenceSetsRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  SearchReferenceSetsResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  GetReferenceSetRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  SearchReferencesRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  SearchReferencesResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  GetReferenceRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  ListBasesRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  ListBasesResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_google_2fgenomics_2fv1_2freferences_2eproto_once_);
void protobuf_InitDefaults_google_2fgenomics_2fv1_2freferences_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_google_2fgenomics_2fv1_2freferences_2eproto_once_,
                 &protobuf_InitDefaults_google_2fgenomics_2fv1_2freferences_2eproto_impl);
}
void protobuf_AddDesc_google_2fgenomics_2fv1_2freferences_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_google_2fgenomics_2fv1_2freferences_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#google/genomics/v1/references.proto\022\022g"
    "oogle.genomics.v1\032\034google/api/annotation"
    "s.proto\"\220\001\n\tReference\022\n\n\002id\030\001 \001(\t\022\016\n\006len"
    "gth\030\002 \001(\003\022\023\n\013md5checksum\030\003 \001(\t\022\014\n\004name\030\004"
    " \001(\t\022\022\n\nsource_uri\030\005 \001(\t\022\031\n\021source_acces"
    "sions\030\006 \003(\t\022\025\n\rncbi_taxon_id\030\007 \001(\005\"\266\001\n\014R"
    "eferenceSet\022\n\n\002id\030\001 \001(\t\022\025\n\rreference_ids"
    "\030\002 \003(\t\022\023\n\013md5checksum\030\003 \001(\t\022\025\n\rncbi_taxo"
    "n_id\030\004 \001(\005\022\023\n\013description\030\005 \001(\t\022\023\n\013assem"
    "bly_id\030\006 \001(\t\022\022\n\nsource_uri\030\007 \001(\t\022\031\n\021sour"
    "ce_accessions\030\010 \003(\t\"\202\001\n\032SearchReferenceS"
    "etsRequest\022\024\n\014md5checksums\030\001 \003(\t\022\022\n\nacce"
    "ssions\030\002 \003(\t\022\023\n\013assembly_id\030\003 \001(\t\022\022\n\npag"
    "e_token\030\004 \001(\t\022\021\n\tpage_size\030\005 \001(\005\"p\n\033Sear"
    "chReferenceSetsResponse\0228\n\016reference_set"
    "s\030\001 \003(\0132 .google.genomics.v1.ReferenceSe"
    "t\022\027\n\017next_page_token\030\002 \001(\t\"2\n\026GetReferen"
    "ceSetRequest\022\030\n\020reference_set_id\030\001 \001(\t\"\204"
    "\001\n\027SearchReferencesRequest\022\024\n\014md5checksu"
    "ms\030\001 \003(\t\022\022\n\naccessions\030\002 \003(\t\022\030\n\020referenc"
    "e_set_id\030\003 \001(\t\022\022\n\npage_token\030\004 \001(\t\022\021\n\tpa"
    "ge_size\030\005 \001(\005\"f\n\030SearchReferencesRespons"
    "e\0221\n\nreferences\030\001 \003(\0132\035.google.genomics."
    "v1.Reference\022\027\n\017next_page_token\030\002 \001(\t\"+\n"
    "\023GetReferenceRequest\022\024\n\014reference_id\030\001 \001"
    "(\t\"k\n\020ListBasesRequest\022\024\n\014reference_id\030\001"
    " \001(\t\022\r\n\005start\030\002 \001(\003\022\013\n\003end\030\003 \001(\003\022\022\n\npage"
    "_token\030\004 \001(\t\022\021\n\tpage_size\030\005 \001(\005\"N\n\021ListB"
    "asesResponse\022\016\n\006offset\030\001 \001(\003\022\020\n\010sequence"
    "\030\002 \001(\t\022\027\n\017next_page_token\030\003 \001(\t2\333\005\n\022Refe"
    "renceServiceV1\022\233\001\n\023SearchReferenceSets\022."
    ".google.genomics.v1.SearchReferenceSetsR"
    "equest\032/.google.genomics.v1.SearchRefere"
    "nceSetsResponse\"#\202\323\344\223\002\035\"\030/v1/referencese"
    "ts/search:\001*\022\215\001\n\017GetReferenceSet\022*.googl"
    "e.genomics.v1.GetReferenceSetRequest\032 .g"
    "oogle.genomics.v1.ReferenceSet\",\202\323\344\223\002&\022$"
    "/v1/referencesets/{reference_set_id}\022\217\001\n"
    "\020SearchReferences\022+.google.genomics.v1.S"
    "earchReferencesRequest\032,.google.genomics"
    ".v1.SearchReferencesResponse\" \202\323\344\223\002\032\"\025/v"
    "1/references/search:\001*\022}\n\014GetReference\022\'"
    ".google.genomics.v1.GetReferenceRequest\032"
    "\035.google.genomics.v1.Reference\"%\202\323\344\223\002\037\022\035"
    "/v1/references/{reference_id}\022\205\001\n\tListBa"
    "ses\022$.google.genomics.v1.ListBasesReques"
    "t\032%.google.genomics.v1.ListBasesResponse"
    "\"+\202\323\344\223\002%\022#/v1/references/{reference_id}/"
    "basesBj\n\026com.google.genomics.v1B\017Referen"
    "cesProtoP\001Z:google.golang.org/genproto/g"
    "oogleapis/genomics/v1;genomics\370\001\001b\006proto"
    "3", 2041);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/genomics/v1/references.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_AddDesc_google_2fapi_2fannotations_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_google_2fgenomics_2fv1_2freferences_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_google_2fgenomics_2fv1_2freferences_2eproto_once_);
void protobuf_AddDesc_google_2fgenomics_2fv1_2freferences_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_google_2fgenomics_2fv1_2freferences_2eproto_once_,
                 &protobuf_AddDesc_google_2fgenomics_2fv1_2freferences_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_google_2fgenomics_2fv1_2freferences_2eproto {
  StaticDescriptorInitializer_google_2fgenomics_2fv1_2freferences_2eproto() {
    protobuf_AddDesc_google_2fgenomics_2fv1_2freferences_2eproto();
  }
} static_descriptor_initializer_google_2fgenomics_2fv1_2freferences_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Reference::kIdFieldNumber;
const int Reference::kLengthFieldNumber;
const int Reference::kMd5ChecksumFieldNumber;
const int Reference::kNameFieldNumber;
const int Reference::kSourceUriFieldNumber;
const int Reference::kSourceAccessionsFieldNumber;
const int Reference::kNcbiTaxonIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Reference::Reference()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2freferences_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.Reference)
}
Reference::Reference(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  source_accessions_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2freferences_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.Reference)
}

void Reference::InitAsDefaultInstance() {
}

Reference::Reference(const Reference& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.Reference)
}

void Reference::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5checksum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&length_, 0, reinterpret_cast<char*>(&ncbi_taxon_id_) -
    reinterpret_cast<char*>(&length_) + sizeof(ncbi_taxon_id_));
  _cached_size_ = 0;
}

Reference::~Reference() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.Reference)
  SharedDtor();
}

void Reference::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  md5checksum_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  source_uri_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void Reference::ArenaDtor(void* object) {
  Reference* _this = reinterpret_cast< Reference* >(object);
  (void)_this;
}
void Reference::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Reference::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reference::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reference_descriptor_;
}

const Reference& Reference::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2freferences_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Reference> Reference_default_instance_;

Reference* Reference::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Reference>(arena);
}

void Reference::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.Reference)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Reference, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Reference*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(length_, ncbi_taxon_id_);
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  md5checksum_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  source_uri_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef ZR_HELPER_
#undef ZR_

  source_accessions_.Clear();
}

bool Reference::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.Reference)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Reference.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_length;
        break;
      }

      // optional int64 length = 2;
      case 2: {
        if (tag == 16) {
         parse_length:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_md5checksum;
        break;
      }

      // optional string md5checksum = 3;
      case 3: {
        if (tag == 26) {
         parse_md5checksum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5checksum()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->md5checksum().data(), this->md5checksum().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Reference.md5checksum"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Reference.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_source_uri;
        break;
      }

      // optional string source_uri = 5;
      case 5: {
        if (tag == 42) {
         parse_source_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_uri().data(), this->source_uri().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Reference.source_uri"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_source_accessions;
        break;
      }

      // repeated string source_accessions = 6;
      case 6: {
        if (tag == 50) {
         parse_source_accessions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_source_accessions()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_accessions(this->source_accessions_size() - 1).data(),
            this->source_accessions(this->source_accessions_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Reference.source_accessions"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_source_accessions;
        if (input->ExpectTag(56)) goto parse_ncbi_taxon_id;
        break;
      }

      // optional int32 ncbi_taxon_id = 7;
      case 7: {
        if (tag == 56) {
         parse_ncbi_taxon_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncbi_taxon_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.Reference)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.Reference)
  return false;
#undef DO_
}

void Reference::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.Reference)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Reference.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional int64 length = 2;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->length(), output);
  }

  // optional string md5checksum = 3;
  if (this->md5checksum().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->md5checksum().data(), this->md5checksum().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Reference.md5checksum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->md5checksum(), output);
  }

  // optional string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Reference.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional string source_uri = 5;
  if (this->source_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_uri().data(), this->source_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Reference.source_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->source_uri(), output);
  }

  // repeated string source_accessions = 6;
  for (int i = 0; i < this->source_accessions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_accessions(i).data(), this->source_accessions(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Reference.source_accessions");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->source_accessions(i), output);
  }

  // optional int32 ncbi_taxon_id = 7;
  if (this->ncbi_taxon_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ncbi_taxon_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.Reference)
}

::google::protobuf::uint8* Reference::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.Reference)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Reference.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional int64 length = 2;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->length(), target);
  }

  // optional string md5checksum = 3;
  if (this->md5checksum().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->md5checksum().data(), this->md5checksum().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Reference.md5checksum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->md5checksum(), target);
  }

  // optional string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Reference.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional string source_uri = 5;
  if (this->source_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_uri().data(), this->source_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Reference.source_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->source_uri(), target);
  }

  // repeated string source_accessions = 6;
  for (int i = 0; i < this->source_accessions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_accessions(i).data(), this->source_accessions(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Reference.source_accessions");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->source_accessions(i), target);
  }

  // optional int32 ncbi_taxon_id = 7;
  if (this->ncbi_taxon_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ncbi_taxon_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.Reference)
  return target;
}

size_t Reference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.Reference)
  size_t total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional int64 length = 2;
  if (this->length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->length());
  }

  // optional string md5checksum = 3;
  if (this->md5checksum().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->md5checksum());
  }

  // optional string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string source_uri = 5;
  if (this->source_uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_uri());
  }

  // optional int32 ncbi_taxon_id = 7;
  if (this->ncbi_taxon_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ncbi_taxon_id());
  }

  // repeated string source_accessions = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->source_accessions_size());
  for (int i = 0; i < this->source_accessions_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->source_accessions(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reference::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.Reference)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Reference* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Reference>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.Reference)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.Reference)
    UnsafeMergeFrom(*source);
  }
}

void Reference::MergeFrom(const Reference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.Reference)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Reference::UnsafeMergeFrom(const Reference& from) {
  GOOGLE_DCHECK(&from != this);
  source_accessions_.UnsafeMergeFrom(from.source_accessions_);
  if (from.id().size() > 0) {
    set_id(from.id());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.md5checksum().size() > 0) {
    set_md5checksum(from.md5checksum());
  }
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.source_uri().size() > 0) {
    set_source_uri(from.source_uri());
  }
  if (from.ncbi_taxon_id() != 0) {
    set_ncbi_taxon_id(from.ncbi_taxon_id());
  }
}

void Reference::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.Reference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reference::CopyFrom(const Reference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.Reference)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Reference::IsInitialized() const {

  return true;
}

void Reference::Swap(Reference* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Reference temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void Reference::UnsafeArenaSwap(Reference* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Reference::InternalSwap(Reference* other) {
  id_.Swap(&other->id_);
  std::swap(length_, other->length_);
  md5checksum_.Swap(&other->md5checksum_);
  name_.Swap(&other->name_);
  source_uri_.Swap(&other->source_uri_);
  source_accessions_.UnsafeArenaSwap(&other->source_accessions_);
  std::swap(ncbi_taxon_id_, other->ncbi_taxon_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Reference::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reference_descriptor_;
  metadata.reflection = Reference_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Reference

// optional string id = 1;
void Reference::clear_id() {
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Reference::id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Reference.id)
  return id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Reference::set_id(const ::std::string& value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.Reference.id)
}
void Reference::set_id(const char* value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.Reference.id)
}
void Reference::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.Reference.id)
}
::std::string* Reference::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Reference.id)
  return id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Reference::release_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.Reference.id)
  
  return id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Reference::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.Reference.id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Reference::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.Reference.id)
}
void Reference::unsafe_arena_set_allocated_id(
    ::std::string* id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (id != NULL) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.Reference.id)
}

// optional int64 length = 2;
void Reference::clear_length() {
  length_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Reference::length() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Reference.length)
  return length_;
}
void Reference::set_length(::google::protobuf::int64 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.Reference.length)
}

// optional string md5checksum = 3;
void Reference::clear_md5checksum() {
  md5checksum_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Reference::md5checksum() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Reference.md5checksum)
  return md5checksum_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Reference::set_md5checksum(const ::std::string& value) {
  
  md5checksum_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.Reference.md5checksum)
}
void Reference::set_md5checksum(const char* value) {
  
  md5checksum_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.Reference.md5checksum)
}
void Reference::set_md5checksum(const char* value,
    size_t size) {
  
  md5checksum_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.Reference.md5checksum)
}
::std::string* Reference::mutable_md5checksum() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Reference.md5checksum)
  return md5checksum_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Reference::release_md5checksum() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.Reference.md5checksum)
  
  return md5checksum_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Reference::unsafe_arena_release_md5checksum() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.Reference.md5checksum)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return md5checksum_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Reference::set_allocated_md5checksum(::std::string* md5checksum) {
  if (md5checksum != NULL) {
    
  } else {
    
  }
  md5checksum_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5checksum,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.Reference.md5checksum)
}
void Reference::unsafe_arena_set_allocated_md5checksum(
    ::std::string* md5checksum) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (md5checksum != NULL) {
    
  } else {
    
  }
  md5checksum_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      md5checksum, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.Reference.md5checksum)
}

// optional string name = 4;
void Reference::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Reference::name() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Reference.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Reference::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.Reference.name)
}
void Reference::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.Reference.name)
}
void Reference::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.Reference.name)
}
::std::string* Reference::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Reference.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Reference::release_name() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.Reference.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Reference::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.Reference.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Reference::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.Reference.name)
}
void Reference::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.Reference.name)
}

// optional string source_uri = 5;
void Reference::clear_source_uri() {
  source_uri_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Reference::source_uri() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Reference.source_uri)
  return source_uri_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Reference::set_source_uri(const ::std::string& value) {
  
  source_uri_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.Reference.source_uri)
}
void Reference::set_source_uri(const char* value) {
  
  source_uri_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.Reference.source_uri)
}
void Reference::set_source_uri(const char* value,
    size_t size) {
  
  source_uri_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.Reference.source_uri)
}
::std::string* Reference::mutable_source_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Reference.source_uri)
  return source_uri_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Reference::release_source_uri() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.Reference.source_uri)
  
  return source_uri_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Reference::unsafe_arena_release_source_uri() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.Reference.source_uri)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return source_uri_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Reference::set_allocated_source_uri(::std::string* source_uri) {
  if (source_uri != NULL) {
    
  } else {
    
  }
  source_uri_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_uri,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.Reference.source_uri)
}
void Reference::unsafe_arena_set_allocated_source_uri(
    ::std::string* source_uri) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (source_uri != NULL) {
    
  } else {
    
  }
  source_uri_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      source_uri, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.Reference.source_uri)
}

// repeated string source_accessions = 6;
int Reference::source_accessions_size() const {
  return source_accessions_.size();
}
void Reference::clear_source_accessions() {
  source_accessions_.Clear();
}
const ::std::string& Reference::source_accessions(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Reference.source_accessions)
  return source_accessions_.Get(index);
}
::std::string* Reference::mutable_source_accessions(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Reference.source_accessions)
  return source_accessions_.Mutable(index);
}
void Reference::set_source_accessions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.Reference.source_accessions)
  source_accessions_.Mutable(index)->assign(value);
}
void Reference::set_source_accessions(int index, const char* value) {
  source_accessions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.Reference.source_accessions)
}
void Reference::set_source_accessions(int index, const char* value, size_t size) {
  source_accessions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.Reference.source_accessions)
}
::std::string* Reference::add_source_accessions() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.Reference.source_accessions)
  return source_accessions_.Add();
}
void Reference::add_source_accessions(const ::std::string& value) {
  source_accessions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.Reference.source_accessions)
}
void Reference::add_source_accessions(const char* value) {
  source_accessions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.Reference.source_accessions)
}
void Reference::add_source_accessions(const char* value, size_t size) {
  source_accessions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.Reference.source_accessions)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Reference::source_accessions() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.Reference.source_accessions)
  return source_accessions_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Reference::mutable_source_accessions() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.Reference.source_accessions)
  return &source_accessions_;
}

// optional int32 ncbi_taxon_id = 7;
void Reference::clear_ncbi_taxon_id() {
  ncbi_taxon_id_ = 0;
}
::google::protobuf::int32 Reference::ncbi_taxon_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Reference.ncbi_taxon_id)
  return ncbi_taxon_id_;
}
void Reference::set_ncbi_taxon_id(::google::protobuf::int32 value) {
  
  ncbi_taxon_id_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.Reference.ncbi_taxon_id)
}

inline const Reference* Reference::internal_default_instance() {
  return &Reference_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReferenceSet::kIdFieldNumber;
const int ReferenceSet::kReferenceIdsFieldNumber;
const int ReferenceSet::kMd5ChecksumFieldNumber;
const int ReferenceSet::kNcbiTaxonIdFieldNumber;
const int ReferenceSet::kDescriptionFieldNumber;
const int ReferenceSet::kAssemblyIdFieldNumber;
const int ReferenceSet::kSourceUriFieldNumber;
const int ReferenceSet::kSourceAccessionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReferenceSet::ReferenceSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2freferences_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.ReferenceSet)
}
ReferenceSet::ReferenceSet(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  reference_ids_(arena),
  source_accessions_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2freferences_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.ReferenceSet)
}

void ReferenceSet::InitAsDefaultInstance() {
}

ReferenceSet::ReferenceSet(const ReferenceSet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.ReferenceSet)
}

void ReferenceSet::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5checksum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  assembly_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ncbi_taxon_id_ = 0;
  _cached_size_ = 0;
}

ReferenceSet::~ReferenceSet() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.ReferenceSet)
  SharedDtor();
}

void ReferenceSet::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  md5checksum_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  description_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  assembly_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  source_uri_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void ReferenceSet::ArenaDtor(void* object) {
  ReferenceSet* _this = reinterpret_cast< ReferenceSet* >(object);
  (void)_this;
}
void ReferenceSet::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ReferenceSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReferenceSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReferenceSet_descriptor_;
}

const ReferenceSet& ReferenceSet::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2freferences_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReferenceSet> ReferenceSet_default_instance_;

ReferenceSet* ReferenceSet::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ReferenceSet>(arena);
}

void ReferenceSet::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.ReferenceSet)
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  md5checksum_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ncbi_taxon_id_ = 0;
  description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  assembly_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  source_uri_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  reference_ids_.Clear();
  source_accessions_.Clear();
}

bool ReferenceSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.ReferenceSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ReferenceSet.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reference_ids;
        break;
      }

      // repeated string reference_ids = 2;
      case 2: {
        if (tag == 18) {
         parse_reference_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_reference_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_ids(this->reference_ids_size() - 1).data(),
            this->reference_ids(this->reference_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ReferenceSet.reference_ids"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reference_ids;
        if (input->ExpectTag(26)) goto parse_md5checksum;
        break;
      }

      // optional string md5checksum = 3;
      case 3: {
        if (tag == 26) {
         parse_md5checksum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5checksum()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->md5checksum().data(), this->md5checksum().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ReferenceSet.md5checksum"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ncbi_taxon_id;
        break;
      }

      // optional int32 ncbi_taxon_id = 4;
      case 4: {
        if (tag == 32) {
         parse_ncbi_taxon_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncbi_taxon_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_description;
        break;
      }

      // optional string description = 5;
      case 5: {
        if (tag == 42) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ReferenceSet.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_assembly_id;
        break;
      }

      // optional string assembly_id = 6;
      case 6: {
        if (tag == 50) {
         parse_assembly_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_assembly_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->assembly_id().data(), this->assembly_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ReferenceSet.assembly_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_source_uri;
        break;
      }

      // optional string source_uri = 7;
      case 7: {
        if (tag == 58) {
         parse_source_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_uri().data(), this->source_uri().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ReferenceSet.source_uri"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_source_accessions;
        break;
      }

      // repeated string source_accessions = 8;
      case 8: {
        if (tag == 66) {
         parse_source_accessions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_source_accessions()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_accessions(this->source_accessions_size() - 1).data(),
            this->source_accessions(this->source_accessions_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ReferenceSet.source_accessions"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_source_accessions;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.ReferenceSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.ReferenceSet)
  return false;
#undef DO_
}

void ReferenceSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.ReferenceSet)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceSet.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // repeated string reference_ids = 2;
  for (int i = 0; i < this->reference_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_ids(i).data(), this->reference_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceSet.reference_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->reference_ids(i), output);
  }

  // optional string md5checksum = 3;
  if (this->md5checksum().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->md5checksum().data(), this->md5checksum().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceSet.md5checksum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->md5checksum(), output);
  }

  // optional int32 ncbi_taxon_id = 4;
  if (this->ncbi_taxon_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ncbi_taxon_id(), output);
  }

  // optional string description = 5;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceSet.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->description(), output);
  }

  // optional string assembly_id = 6;
  if (this->assembly_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->assembly_id().data(), this->assembly_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceSet.assembly_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->assembly_id(), output);
  }

  // optional string source_uri = 7;
  if (this->source_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_uri().data(), this->source_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceSet.source_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->source_uri(), output);
  }

  // repeated string source_accessions = 8;
  for (int i = 0; i < this->source_accessions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_accessions(i).data(), this->source_accessions(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceSet.source_accessions");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->source_accessions(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.ReferenceSet)
}

::google::protobuf::uint8* ReferenceSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.ReferenceSet)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceSet.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated string reference_ids = 2;
  for (int i = 0; i < this->reference_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_ids(i).data(), this->reference_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceSet.reference_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->reference_ids(i), target);
  }

  // optional string md5checksum = 3;
  if (this->md5checksum().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->md5checksum().data(), this->md5checksum().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceSet.md5checksum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->md5checksum(), target);
  }

  // optional int32 ncbi_taxon_id = 4;
  if (this->ncbi_taxon_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ncbi_taxon_id(), target);
  }

  // optional string description = 5;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceSet.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->description(), target);
  }

  // optional string assembly_id = 6;
  if (this->assembly_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->assembly_id().data(), this->assembly_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceSet.assembly_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->assembly_id(), target);
  }

  // optional string source_uri = 7;
  if (this->source_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_uri().data(), this->source_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceSet.source_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->source_uri(), target);
  }

  // repeated string source_accessions = 8;
  for (int i = 0; i < this->source_accessions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_accessions(i).data(), this->source_accessions(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceSet.source_accessions");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->source_accessions(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.ReferenceSet)
  return target;
}

size_t ReferenceSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.ReferenceSet)
  size_t total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional string md5checksum = 3;
  if (this->md5checksum().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->md5checksum());
  }

  // optional int32 ncbi_taxon_id = 4;
  if (this->ncbi_taxon_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ncbi_taxon_id());
  }

  // optional string description = 5;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // optional string assembly_id = 6;
  if (this->assembly_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->assembly_id());
  }

  // optional string source_uri = 7;
  if (this->source_uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_uri());
  }

  // repeated string reference_ids = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->reference_ids_size());
  for (int i = 0; i < this->reference_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->reference_ids(i));
  }

  // repeated string source_accessions = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->source_accessions_size());
  for (int i = 0; i < this->source_accessions_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->source_accessions(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReferenceSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.ReferenceSet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReferenceSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReferenceSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.ReferenceSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.ReferenceSet)
    UnsafeMergeFrom(*source);
  }
}

void ReferenceSet::MergeFrom(const ReferenceSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.ReferenceSet)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReferenceSet::UnsafeMergeFrom(const ReferenceSet& from) {
  GOOGLE_DCHECK(&from != this);
  reference_ids_.UnsafeMergeFrom(from.reference_ids_);
  source_accessions_.UnsafeMergeFrom(from.source_accessions_);
  if (from.id().size() > 0) {
    set_id(from.id());
  }
  if (from.md5checksum().size() > 0) {
    set_md5checksum(from.md5checksum());
  }
  if (from.ncbi_taxon_id() != 0) {
    set_ncbi_taxon_id(from.ncbi_taxon_id());
  }
  if (from.description().size() > 0) {
    set_description(from.description());
  }
  if (from.assembly_id().size() > 0) {
    set_assembly_id(from.assembly_id());
  }
  if (from.source_uri().size() > 0) {
    set_source_uri(from.source_uri());
  }
}

void ReferenceSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.ReferenceSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceSet::CopyFrom(const ReferenceSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.ReferenceSet)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReferenceSet::IsInitialized() const {

  return true;
}

void ReferenceSet::Swap(ReferenceSet* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ReferenceSet temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ReferenceSet::UnsafeArenaSwap(ReferenceSet* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ReferenceSet::InternalSwap(ReferenceSet* other) {
  id_.Swap(&other->id_);
  reference_ids_.UnsafeArenaSwap(&other->reference_ids_);
  md5checksum_.Swap(&other->md5checksum_);
  std::swap(ncbi_taxon_id_, other->ncbi_taxon_id_);
  description_.Swap(&other->description_);
  assembly_id_.Swap(&other->assembly_id_);
  source_uri_.Swap(&other->source_uri_);
  source_accessions_.UnsafeArenaSwap(&other->source_accessions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReferenceSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReferenceSet_descriptor_;
  metadata.reflection = ReferenceSet_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReferenceSet

// optional string id = 1;
void ReferenceSet::clear_id() {
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ReferenceSet::id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ReferenceSet.id)
  return id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReferenceSet::set_id(const ::std::string& value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ReferenceSet.id)
}
void ReferenceSet::set_id(const char* value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ReferenceSet.id)
}
void ReferenceSet::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ReferenceSet.id)
}
::std::string* ReferenceSet::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ReferenceSet.id)
  return id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ReferenceSet::release_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ReferenceSet.id)
  
  return id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ReferenceSet::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ReferenceSet.id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ReferenceSet::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ReferenceSet.id)
}
void ReferenceSet::unsafe_arena_set_allocated_id(
    ::std::string* id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (id != NULL) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ReferenceSet.id)
}

// repeated string reference_ids = 2;
int ReferenceSet::reference_ids_size() const {
  return reference_ids_.size();
}
void ReferenceSet::clear_reference_ids() {
  reference_ids_.Clear();
}
const ::std::string& ReferenceSet::reference_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ReferenceSet.reference_ids)
  return reference_ids_.Get(index);
}
::std::string* ReferenceSet::mutable_reference_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ReferenceSet.reference_ids)
  return reference_ids_.Mutable(index);
}
void ReferenceSet::set_reference_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.ReferenceSet.reference_ids)
  reference_ids_.Mutable(index)->assign(value);
}
void ReferenceSet::set_reference_ids(int index, const char* value) {
  reference_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ReferenceSet.reference_ids)
}
void ReferenceSet::set_reference_ids(int index, const char* value, size_t size) {
  reference_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ReferenceSet.reference_ids)
}
::std::string* ReferenceSet::add_reference_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.ReferenceSet.reference_ids)
  return reference_ids_.Add();
}
void ReferenceSet::add_reference_ids(const ::std::string& value) {
  reference_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.ReferenceSet.reference_ids)
}
void ReferenceSet::add_reference_ids(const char* value) {
  reference_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.ReferenceSet.reference_ids)
}
void ReferenceSet::add_reference_ids(const char* value, size_t size) {
  reference_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.ReferenceSet.reference_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReferenceSet::reference_ids() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.ReferenceSet.reference_ids)
  return reference_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ReferenceSet::mutable_reference_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.ReferenceSet.reference_ids)
  return &reference_ids_;
}

// optional string md5checksum = 3;
void ReferenceSet::clear_md5checksum() {
  md5checksum_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ReferenceSet::md5checksum() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ReferenceSet.md5checksum)
  return md5checksum_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReferenceSet::set_md5checksum(const ::std::string& value) {
  
  md5checksum_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ReferenceSet.md5checksum)
}
void ReferenceSet::set_md5checksum(const char* value) {
  
  md5checksum_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ReferenceSet.md5checksum)
}
void ReferenceSet::set_md5checksum(const char* value,
    size_t size) {
  
  md5checksum_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ReferenceSet.md5checksum)
}
::std::string* ReferenceSet::mutable_md5checksum() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ReferenceSet.md5checksum)
  return md5checksum_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ReferenceSet::release_md5checksum() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ReferenceSet.md5checksum)
  
  return md5checksum_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ReferenceSet::unsafe_arena_release_md5checksum() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ReferenceSet.md5checksum)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return md5checksum_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ReferenceSet::set_allocated_md5checksum(::std::string* md5checksum) {
  if (md5checksum != NULL) {
    
  } else {
    
  }
  md5checksum_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5checksum,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ReferenceSet.md5checksum)
}
void ReferenceSet::unsafe_arena_set_allocated_md5checksum(
    ::std::string* md5checksum) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (md5checksum != NULL) {
    
  } else {
    
  }
  md5checksum_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      md5checksum, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ReferenceSet.md5checksum)
}

// optional int32 ncbi_taxon_id = 4;
void ReferenceSet::clear_ncbi_taxon_id() {
  ncbi_taxon_id_ = 0;
}
::google::protobuf::int32 ReferenceSet::ncbi_taxon_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ReferenceSet.ncbi_taxon_id)
  return ncbi_taxon_id_;
}
void ReferenceSet::set_ncbi_taxon_id(::google::protobuf::int32 value) {
  
  ncbi_taxon_id_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.ReferenceSet.ncbi_taxon_id)
}

// optional string description = 5;
void ReferenceSet::clear_description() {
  description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ReferenceSet::description() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ReferenceSet.description)
  return description_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReferenceSet::set_description(const ::std::string& value) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ReferenceSet.description)
}
void ReferenceSet::set_description(const char* value) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ReferenceSet.description)
}
void ReferenceSet::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ReferenceSet.description)
}
::std::string* ReferenceSet::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ReferenceSet.description)
  return description_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ReferenceSet::release_description() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ReferenceSet.description)
  
  return description_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ReferenceSet::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ReferenceSet.description)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return description_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ReferenceSet::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ReferenceSet.description)
}
void ReferenceSet::unsafe_arena_set_allocated_description(
    ::std::string* description) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (description != NULL) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      description, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ReferenceSet.description)
}

// optional string assembly_id = 6;
void ReferenceSet::clear_assembly_id() {
  assembly_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ReferenceSet::assembly_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ReferenceSet.assembly_id)
  return assembly_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReferenceSet::set_assembly_id(const ::std::string& value) {
  
  assembly_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ReferenceSet.assembly_id)
}
void ReferenceSet::set_assembly_id(const char* value) {
  
  assembly_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ReferenceSet.assembly_id)
}
void ReferenceSet::set_assembly_id(const char* value,
    size_t size) {
  
  assembly_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ReferenceSet.assembly_id)
}
::std::string* ReferenceSet::mutable_assembly_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ReferenceSet.assembly_id)
  return assembly_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ReferenceSet::release_assembly_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ReferenceSet.assembly_id)
  
  return assembly_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ReferenceSet::unsafe_arena_release_assembly_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ReferenceSet.assembly_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return assembly_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ReferenceSet::set_allocated_assembly_id(::std::string* assembly_id) {
  if (assembly_id != NULL) {
    
  } else {
    
  }
  assembly_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), assembly_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ReferenceSet.assembly_id)
}
void ReferenceSet::unsafe_arena_set_allocated_assembly_id(
    ::std::string* assembly_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (assembly_id != NULL) {
    
  } else {
    
  }
  assembly_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      assembly_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ReferenceSet.assembly_id)
}

// optional string source_uri = 7;
void ReferenceSet::clear_source_uri() {
  source_uri_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ReferenceSet::source_uri() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ReferenceSet.source_uri)
  return source_uri_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReferenceSet::set_source_uri(const ::std::string& value) {
  
  source_uri_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ReferenceSet.source_uri)
}
void ReferenceSet::set_source_uri(const char* value) {
  
  source_uri_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ReferenceSet.source_uri)
}
void ReferenceSet::set_source_uri(const char* value,
    size_t size) {
  
  source_uri_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ReferenceSet.source_uri)
}
::std::string* ReferenceSet::mutable_source_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ReferenceSet.source_uri)
  return source_uri_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ReferenceSet::release_source_uri() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ReferenceSet.source_uri)
  
  return source_uri_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ReferenceSet::unsafe_arena_release_source_uri() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ReferenceSet.source_uri)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return source_uri_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ReferenceSet::set_allocated_source_uri(::std::string* source_uri) {
  if (source_uri != NULL) {
    
  } else {
    
  }
  source_uri_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_uri,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ReferenceSet.source_uri)
}
void ReferenceSet::unsafe_arena_set_allocated_source_uri(
    ::std::string* source_uri) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (source_uri != NULL) {
    
  } else {
    
  }
  source_uri_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      source_uri, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ReferenceSet.source_uri)
}

// repeated string source_accessions = 8;
int ReferenceSet::source_accessions_size() const {
  return source_accessions_.size();
}
void ReferenceSet::clear_source_accessions() {
  source_accessions_.Clear();
}
const ::std::string& ReferenceSet::source_accessions(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ReferenceSet.source_accessions)
  return source_accessions_.Get(index);
}
::std::string* ReferenceSet::mutable_source_accessions(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ReferenceSet.source_accessions)
  return source_accessions_.Mutable(index);
}
void ReferenceSet::set_source_accessions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.ReferenceSet.source_accessions)
  source_accessions_.Mutable(index)->assign(value);
}
void ReferenceSet::set_source_accessions(int index, const char* value) {
  source_accessions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ReferenceSet.source_accessions)
}
void ReferenceSet::set_source_accessions(int index, const char* value, size_t size) {
  source_accessions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ReferenceSet.source_accessions)
}
::std::string* ReferenceSet::add_source_accessions() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.ReferenceSet.source_accessions)
  return source_accessions_.Add();
}
void ReferenceSet::add_source_accessions(const ::std::string& value) {
  source_accessions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.ReferenceSet.source_accessions)
}
void ReferenceSet::add_source_accessions(const char* value) {
  source_accessions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.ReferenceSet.source_accessions)
}
void ReferenceSet::add_source_accessions(const char* value, size_t size) {
  source_accessions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.ReferenceSet.source_accessions)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReferenceSet::source_accessions() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.ReferenceSet.source_accessions)
  return source_accessions_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ReferenceSet::mutable_source_accessions() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.ReferenceSet.source_accessions)
  return &source_accessions_;
}

inline const ReferenceSet* ReferenceSet::internal_default_instance() {
  return &ReferenceSet_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchReferenceSetsRequest::kMd5ChecksumsFieldNumber;
const int SearchReferenceSetsRequest::kAccessionsFieldNumber;
const int SearchReferenceSetsRequest::kAssemblyIdFieldNumber;
const int SearchReferenceSetsRequest::kPageTokenFieldNumber;
const int SearchReferenceSetsRequest::kPageSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchReferenceSetsRequest::SearchReferenceSetsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2freferences_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.SearchReferenceSetsRequest)
}
SearchReferenceSetsRequest::SearchReferenceSetsRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  md5checksums_(arena),
  accessions_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2freferences_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.SearchReferenceSetsRequest)
}

void SearchReferenceSetsRequest::InitAsDefaultInstance() {
}

SearchReferenceSetsRequest::SearchReferenceSetsRequest(const SearchReferenceSetsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.SearchReferenceSetsRequest)
}

void SearchReferenceSetsRequest::SharedCtor() {
  assembly_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
  _cached_size_ = 0;
}

SearchReferenceSetsRequest::~SearchReferenceSetsRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.SearchReferenceSetsRequest)
  SharedDtor();
}

void SearchReferenceSetsRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  assembly_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  page_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void SearchReferenceSetsRequest::ArenaDtor(void* object) {
  SearchReferenceSetsRequest* _this = reinterpret_cast< SearchReferenceSetsRequest* >(object);
  (void)_this;
}
void SearchReferenceSetsRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SearchReferenceSetsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchReferenceSetsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchReferenceSetsRequest_descriptor_;
}

const SearchReferenceSetsRequest& SearchReferenceSetsRequest::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2freferences_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SearchReferenceSetsRequest> SearchReferenceSetsRequest_default_instance_;

SearchReferenceSetsRequest* SearchReferenceSetsRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SearchReferenceSetsRequest>(arena);
}

void SearchReferenceSetsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.SearchReferenceSetsRequest)
  assembly_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_size_ = 0;
  md5checksums_.Clear();
  accessions_.Clear();
}

bool SearchReferenceSetsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.SearchReferenceSetsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string md5checksums = 1;
      case 1: {
        if (tag == 10) {
         parse_md5checksums:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_md5checksums()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->md5checksums(this->md5checksums_size() - 1).data(),
            this->md5checksums(this->md5checksums_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchReferenceSetsRequest.md5checksums"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_md5checksums;
        if (input->ExpectTag(18)) goto parse_accessions;
        break;
      }

      // repeated string accessions = 2;
      case 2: {
        if (tag == 18) {
         parse_accessions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_accessions()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->accessions(this->accessions_size() - 1).data(),
            this->accessions(this->accessions_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchReferenceSetsRequest.accessions"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_accessions;
        if (input->ExpectTag(26)) goto parse_assembly_id;
        break;
      }

      // optional string assembly_id = 3;
      case 3: {
        if (tag == 26) {
         parse_assembly_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_assembly_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->assembly_id().data(), this->assembly_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchReferenceSetsRequest.assembly_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_page_token;
        break;
      }

      // optional string page_token = 4;
      case 4: {
        if (tag == 34) {
         parse_page_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), this->page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchReferenceSetsRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_page_size;
        break;
      }

      // optional int32 page_size = 5;
      case 5: {
        if (tag == 40) {
         parse_page_size:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.SearchReferenceSetsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.SearchReferenceSetsRequest)
  return false;
#undef DO_
}

void SearchReferenceSetsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.SearchReferenceSetsRequest)
  // repeated string md5checksums = 1;
  for (int i = 0; i < this->md5checksums_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->md5checksums(i).data(), this->md5checksums(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferenceSetsRequest.md5checksums");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->md5checksums(i), output);
  }

  // repeated string accessions = 2;
  for (int i = 0; i < this->accessions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accessions(i).data(), this->accessions(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferenceSetsRequest.accessions");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->accessions(i), output);
  }

  // optional string assembly_id = 3;
  if (this->assembly_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->assembly_id().data(), this->assembly_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferenceSetsRequest.assembly_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->assembly_id(), output);
  }

  // optional string page_token = 4;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferenceSetsRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->page_token(), output);
  }

  // optional int32 page_size = 5;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->page_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.SearchReferenceSetsRequest)
}

::google::protobuf::uint8* SearchReferenceSetsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.SearchReferenceSetsRequest)
  // repeated string md5checksums = 1;
  for (int i = 0; i < this->md5checksums_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->md5checksums(i).data(), this->md5checksums(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferenceSetsRequest.md5checksums");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->md5checksums(i), target);
  }

  // repeated string accessions = 2;
  for (int i = 0; i < this->accessions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accessions(i).data(), this->accessions(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferenceSetsRequest.accessions");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->accessions(i), target);
  }

  // optional string assembly_id = 3;
  if (this->assembly_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->assembly_id().data(), this->assembly_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferenceSetsRequest.assembly_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->assembly_id(), target);
  }

  // optional string page_token = 4;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferenceSetsRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->page_token(), target);
  }

  // optional int32 page_size = 5;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->page_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.SearchReferenceSetsRequest)
  return target;
}

size_t SearchReferenceSetsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.SearchReferenceSetsRequest)
  size_t total_size = 0;

  // optional string assembly_id = 3;
  if (this->assembly_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->assembly_id());
  }

  // optional string page_token = 4;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // optional int32 page_size = 5;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  // repeated string md5checksums = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->md5checksums_size());
  for (int i = 0; i < this->md5checksums_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->md5checksums(i));
  }

  // repeated string accessions = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->accessions_size());
  for (int i = 0; i < this->accessions_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->accessions(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchReferenceSetsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.SearchReferenceSetsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SearchReferenceSetsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchReferenceSetsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.SearchReferenceSetsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.SearchReferenceSetsRequest)
    UnsafeMergeFrom(*source);
  }
}

void SearchReferenceSetsRequest::MergeFrom(const SearchReferenceSetsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.SearchReferenceSetsRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SearchReferenceSetsRequest::UnsafeMergeFrom(const SearchReferenceSetsRequest& from) {
  GOOGLE_DCHECK(&from != this);
  md5checksums_.UnsafeMergeFrom(from.md5checksums_);
  accessions_.UnsafeMergeFrom(from.accessions_);
  if (from.assembly_id().size() > 0) {
    set_assembly_id(from.assembly_id());
  }
  if (from.page_token().size() > 0) {
    set_page_token(from.page_token());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void SearchReferenceSetsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.SearchReferenceSetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchReferenceSetsRequest::CopyFrom(const SearchReferenceSetsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.SearchReferenceSetsRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SearchReferenceSetsRequest::IsInitialized() const {

  return true;
}

void SearchReferenceSetsRequest::Swap(SearchReferenceSetsRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SearchReferenceSetsRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void SearchReferenceSetsRequest::UnsafeArenaSwap(SearchReferenceSetsRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SearchReferenceSetsRequest::InternalSwap(SearchReferenceSetsRequest* other) {
  md5checksums_.UnsafeArenaSwap(&other->md5checksums_);
  accessions_.UnsafeArenaSwap(&other->accessions_);
  assembly_id_.Swap(&other->assembly_id_);
  page_token_.Swap(&other->page_token_);
  std::swap(page_size_, other->page_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchReferenceSetsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchReferenceSetsRequest_descriptor_;
  metadata.reflection = SearchReferenceSetsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchReferenceSetsRequest

// repeated string md5checksums = 1;
int SearchReferenceSetsRequest::md5checksums_size() const {
  return md5checksums_.size();
}
void SearchReferenceSetsRequest::clear_md5checksums() {
  md5checksums_.Clear();
}
const ::std::string& SearchReferenceSetsRequest::md5checksums(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReferenceSetsRequest.md5checksums)
  return md5checksums_.Get(index);
}
::std::string* SearchReferenceSetsRequest::mutable_md5checksums(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReferenceSetsRequest.md5checksums)
  return md5checksums_.Mutable(index);
}
void SearchReferenceSetsRequest::set_md5checksums(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferenceSetsRequest.md5checksums)
  md5checksums_.Mutable(index)->assign(value);
}
void SearchReferenceSetsRequest::set_md5checksums(int index, const char* value) {
  md5checksums_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchReferenceSetsRequest.md5checksums)
}
void SearchReferenceSetsRequest::set_md5checksums(int index, const char* value, size_t size) {
  md5checksums_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchReferenceSetsRequest.md5checksums)
}
::std::string* SearchReferenceSetsRequest::add_md5checksums() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.SearchReferenceSetsRequest.md5checksums)
  return md5checksums_.Add();
}
void SearchReferenceSetsRequest::add_md5checksums(const ::std::string& value) {
  md5checksums_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchReferenceSetsRequest.md5checksums)
}
void SearchReferenceSetsRequest::add_md5checksums(const char* value) {
  md5checksums_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.SearchReferenceSetsRequest.md5checksums)
}
void SearchReferenceSetsRequest::add_md5checksums(const char* value, size_t size) {
  md5checksums_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.SearchReferenceSetsRequest.md5checksums)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SearchReferenceSetsRequest::md5checksums() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.SearchReferenceSetsRequest.md5checksums)
  return md5checksums_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SearchReferenceSetsRequest::mutable_md5checksums() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.SearchReferenceSetsRequest.md5checksums)
  return &md5checksums_;
}

// repeated string accessions = 2;
int SearchReferenceSetsRequest::accessions_size() const {
  return accessions_.size();
}
void SearchReferenceSetsRequest::clear_accessions() {
  accessions_.Clear();
}
const ::std::string& SearchReferenceSetsRequest::accessions(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReferenceSetsRequest.accessions)
  return accessions_.Get(index);
}
::std::string* SearchReferenceSetsRequest::mutable_accessions(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReferenceSetsRequest.accessions)
  return accessions_.Mutable(index);
}
void SearchReferenceSetsRequest::set_accessions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferenceSetsRequest.accessions)
  accessions_.Mutable(index)->assign(value);
}
void SearchReferenceSetsRequest::set_accessions(int index, const char* value) {
  accessions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchReferenceSetsRequest.accessions)
}
void SearchReferenceSetsRequest::set_accessions(int index, const char* value, size_t size) {
  accessions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchReferenceSetsRequest.accessions)
}
::std::string* SearchReferenceSetsRequest::add_accessions() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.SearchReferenceSetsRequest.accessions)
  return accessions_.Add();
}
void SearchReferenceSetsRequest::add_accessions(const ::std::string& value) {
  accessions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchReferenceSetsRequest.accessions)
}
void SearchReferenceSetsRequest::add_accessions(const char* value) {
  accessions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.SearchReferenceSetsRequest.accessions)
}
void SearchReferenceSetsRequest::add_accessions(const char* value, size_t size) {
  accessions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.SearchReferenceSetsRequest.accessions)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SearchReferenceSetsRequest::accessions() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.SearchReferenceSetsRequest.accessions)
  return accessions_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SearchReferenceSetsRequest::mutable_accessions() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.SearchReferenceSetsRequest.accessions)
  return &accessions_;
}

// optional string assembly_id = 3;
void SearchReferenceSetsRequest::clear_assembly_id() {
  assembly_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SearchReferenceSetsRequest::assembly_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReferenceSetsRequest.assembly_id)
  return assembly_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchReferenceSetsRequest::set_assembly_id(const ::std::string& value) {
  
  assembly_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferenceSetsRequest.assembly_id)
}
void SearchReferenceSetsRequest::set_assembly_id(const char* value) {
  
  assembly_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchReferenceSetsRequest.assembly_id)
}
void SearchReferenceSetsRequest::set_assembly_id(const char* value,
    size_t size) {
  
  assembly_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchReferenceSetsRequest.assembly_id)
}
::std::string* SearchReferenceSetsRequest::mutable_assembly_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReferenceSetsRequest.assembly_id)
  return assembly_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchReferenceSetsRequest::release_assembly_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.SearchReferenceSetsRequest.assembly_id)
  
  return assembly_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchReferenceSetsRequest::unsafe_arena_release_assembly_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.SearchReferenceSetsRequest.assembly_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return assembly_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SearchReferenceSetsRequest::set_allocated_assembly_id(::std::string* assembly_id) {
  if (assembly_id != NULL) {
    
  } else {
    
  }
  assembly_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), assembly_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.SearchReferenceSetsRequest.assembly_id)
}
void SearchReferenceSetsRequest::unsafe_arena_set_allocated_assembly_id(
    ::std::string* assembly_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (assembly_id != NULL) {
    
  } else {
    
  }
  assembly_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      assembly_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.SearchReferenceSetsRequest.assembly_id)
}

// optional string page_token = 4;
void SearchReferenceSetsRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SearchReferenceSetsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReferenceSetsRequest.page_token)
  return page_token_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchReferenceSetsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferenceSetsRequest.page_token)
}
void SearchReferenceSetsRequest::set_page_token(const char* value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchReferenceSetsRequest.page_token)
}
void SearchReferenceSetsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchReferenceSetsRequest.page_token)
}
::std::string* SearchReferenceSetsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReferenceSetsRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchReferenceSetsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.SearchReferenceSetsRequest.page_token)
  
  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchReferenceSetsRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.SearchReferenceSetsRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SearchReferenceSetsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.SearchReferenceSetsRequest.page_token)
}
void SearchReferenceSetsRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.SearchReferenceSetsRequest.page_token)
}

// optional int32 page_size = 5;
void SearchReferenceSetsRequest::clear_page_size() {
  page_size_ = 0;
}
::google::protobuf::int32 SearchReferenceSetsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReferenceSetsRequest.page_size)
  return page_size_;
}
void SearchReferenceSetsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferenceSetsRequest.page_size)
}

inline const SearchReferenceSetsRequest* SearchReferenceSetsRequest::internal_default_instance() {
  return &SearchReferenceSetsRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchReferenceSetsResponse::kReferenceSetsFieldNumber;
const int SearchReferenceSetsResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchReferenceSetsResponse::SearchReferenceSetsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2freferences_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.SearchReferenceSetsResponse)
}
SearchReferenceSetsResponse::SearchReferenceSetsResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  reference_sets_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2freferences_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.SearchReferenceSetsResponse)
}

void SearchReferenceSetsResponse::InitAsDefaultInstance() {
}

SearchReferenceSetsResponse::SearchReferenceSetsResponse(const SearchReferenceSetsResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.SearchReferenceSetsResponse)
}

void SearchReferenceSetsResponse::SharedCtor() {
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SearchReferenceSetsResponse::~SearchReferenceSetsResponse() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.SearchReferenceSetsResponse)
  SharedDtor();
}

void SearchReferenceSetsResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  next_page_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void SearchReferenceSetsResponse::ArenaDtor(void* object) {
  SearchReferenceSetsResponse* _this = reinterpret_cast< SearchReferenceSetsResponse* >(object);
  (void)_this;
}
void SearchReferenceSetsResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SearchReferenceSetsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchReferenceSetsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchReferenceSetsResponse_descriptor_;
}

const SearchReferenceSetsResponse& SearchReferenceSetsResponse::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2freferences_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SearchReferenceSetsResponse> SearchReferenceSetsResponse_default_instance_;

SearchReferenceSetsResponse* SearchReferenceSetsResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SearchReferenceSetsResponse>(arena);
}

void SearchReferenceSetsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.SearchReferenceSetsResponse)
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  reference_sets_.Clear();
}

bool SearchReferenceSetsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.SearchReferenceSetsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.genomics.v1.ReferenceSet reference_sets = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_reference_sets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_reference_sets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_reference_sets;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_next_page_token;
        break;
      }

      // optional string next_page_token = 2;
      case 2: {
        if (tag == 18) {
         parse_next_page_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), this->next_page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchReferenceSetsResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.SearchReferenceSetsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.SearchReferenceSetsResponse)
  return false;
#undef DO_
}

void SearchReferenceSetsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.SearchReferenceSetsResponse)
  // repeated .google.genomics.v1.ReferenceSet reference_sets = 1;
  for (unsigned int i = 0, n = this->reference_sets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reference_sets(i), output);
  }

  // optional string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferenceSetsResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.SearchReferenceSetsResponse)
}

::google::protobuf::uint8* SearchReferenceSetsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.SearchReferenceSetsResponse)
  // repeated .google.genomics.v1.ReferenceSet reference_sets = 1;
  for (unsigned int i = 0, n = this->reference_sets_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->reference_sets(i), false, target);
  }

  // optional string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferenceSetsResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.SearchReferenceSetsResponse)
  return target;
}

size_t SearchReferenceSetsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.SearchReferenceSetsResponse)
  size_t total_size = 0;

  // optional string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  // repeated .google.genomics.v1.ReferenceSet reference_sets = 1;
  {
    unsigned int count = this->reference_sets_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reference_sets(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchReferenceSetsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.SearchReferenceSetsResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SearchReferenceSetsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchReferenceSetsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.SearchReferenceSetsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.SearchReferenceSetsResponse)
    UnsafeMergeFrom(*source);
  }
}

void SearchReferenceSetsResponse::MergeFrom(const SearchReferenceSetsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.SearchReferenceSetsResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SearchReferenceSetsResponse::UnsafeMergeFrom(const SearchReferenceSetsResponse& from) {
  GOOGLE_DCHECK(&from != this);
  reference_sets_.MergeFrom(from.reference_sets_);
  if (from.next_page_token().size() > 0) {
    set_next_page_token(from.next_page_token());
  }
}

void SearchReferenceSetsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.SearchReferenceSetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchReferenceSetsResponse::CopyFrom(const SearchReferenceSetsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.SearchReferenceSetsResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SearchReferenceSetsResponse::IsInitialized() const {

  return true;
}

void SearchReferenceSetsResponse::Swap(SearchReferenceSetsResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SearchReferenceSetsResponse temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void SearchReferenceSetsResponse::UnsafeArenaSwap(SearchReferenceSetsResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SearchReferenceSetsResponse::InternalSwap(SearchReferenceSetsResponse* other) {
  reference_sets_.UnsafeArenaSwap(&other->reference_sets_);
  next_page_token_.Swap(&other->next_page_token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchReferenceSetsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchReferenceSetsResponse_descriptor_;
  metadata.reflection = SearchReferenceSetsResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchReferenceSetsResponse

// repeated .google.genomics.v1.ReferenceSet reference_sets = 1;
int SearchReferenceSetsResponse::reference_sets_size() const {
  return reference_sets_.size();
}
void SearchReferenceSetsResponse::clear_reference_sets() {
  reference_sets_.Clear();
}
const ::google::genomics::v1::ReferenceSet& SearchReferenceSetsResponse::reference_sets(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReferenceSetsResponse.reference_sets)
  return reference_sets_.Get(index);
}
::google::genomics::v1::ReferenceSet* SearchReferenceSetsResponse::mutable_reference_sets(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReferenceSetsResponse.reference_sets)
  return reference_sets_.Mutable(index);
}
::google::genomics::v1::ReferenceSet* SearchReferenceSetsResponse::add_reference_sets() {
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchReferenceSetsResponse.reference_sets)
  return reference_sets_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::genomics::v1::ReferenceSet >*
SearchReferenceSetsResponse::mutable_reference_sets() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.SearchReferenceSetsResponse.reference_sets)
  return &reference_sets_;
}
const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1::ReferenceSet >&
SearchReferenceSetsResponse::reference_sets() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.SearchReferenceSetsResponse.reference_sets)
  return reference_sets_;
}

// optional string next_page_token = 2;
void SearchReferenceSetsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SearchReferenceSetsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReferenceSetsResponse.next_page_token)
  return next_page_token_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchReferenceSetsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferenceSetsResponse.next_page_token)
}
void SearchReferenceSetsResponse::set_next_page_token(const char* value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchReferenceSetsResponse.next_page_token)
}
void SearchReferenceSetsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchReferenceSetsResponse.next_page_token)
}
::std::string* SearchReferenceSetsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReferenceSetsResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchReferenceSetsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.SearchReferenceSetsResponse.next_page_token)
  
  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchReferenceSetsResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.SearchReferenceSetsResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SearchReferenceSetsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.SearchReferenceSetsResponse.next_page_token)
}
void SearchReferenceSetsResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.SearchReferenceSetsResponse.next_page_token)
}

inline const SearchReferenceSetsResponse* SearchReferenceSetsResponse::internal_default_instance() {
  return &SearchReferenceSetsResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetReferenceSetRequest::kReferenceSetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetReferenceSetRequest::GetReferenceSetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2freferences_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.GetReferenceSetRequest)
}
GetReferenceSetRequest::GetReferenceSetRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2freferences_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.GetReferenceSetRequest)
}

void GetReferenceSetRequest::InitAsDefaultInstance() {
}

GetReferenceSetRequest::GetReferenceSetRequest(const GetReferenceSetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.GetReferenceSetRequest)
}

void GetReferenceSetRequest::SharedCtor() {
  reference_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetReferenceSetRequest::~GetReferenceSetRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.GetReferenceSetRequest)
  SharedDtor();
}

void GetReferenceSetRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  reference_set_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void GetReferenceSetRequest::ArenaDtor(void* object) {
  GetReferenceSetRequest* _this = reinterpret_cast< GetReferenceSetRequest* >(object);
  (void)_this;
}
void GetReferenceSetRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetReferenceSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetReferenceSetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetReferenceSetRequest_descriptor_;
}

const GetReferenceSetRequest& GetReferenceSetRequest::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2freferences_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetReferenceSetRequest> GetReferenceSetRequest_default_instance_;

GetReferenceSetRequest* GetReferenceSetRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetReferenceSetRequest>(arena);
}

void GetReferenceSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.GetReferenceSetRequest)
  reference_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool GetReferenceSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.GetReferenceSetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string reference_set_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_set_id().data(), this->reference_set_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.GetReferenceSetRequest.reference_set_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.GetReferenceSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.GetReferenceSetRequest)
  return false;
#undef DO_
}

void GetReferenceSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.GetReferenceSetRequest)
  // optional string reference_set_id = 1;
  if (this->reference_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_set_id().data(), this->reference_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.GetReferenceSetRequest.reference_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reference_set_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.GetReferenceSetRequest)
}

::google::protobuf::uint8* GetReferenceSetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.GetReferenceSetRequest)
  // optional string reference_set_id = 1;
  if (this->reference_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_set_id().data(), this->reference_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.GetReferenceSetRequest.reference_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reference_set_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.GetReferenceSetRequest)
  return target;
}

size_t GetReferenceSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.GetReferenceSetRequest)
  size_t total_size = 0;

  // optional string reference_set_id = 1;
  if (this->reference_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference_set_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetReferenceSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.GetReferenceSetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetReferenceSetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetReferenceSetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.GetReferenceSetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.GetReferenceSetRequest)
    UnsafeMergeFrom(*source);
  }
}

void GetReferenceSetRequest::MergeFrom(const GetReferenceSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.GetReferenceSetRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetReferenceSetRequest::UnsafeMergeFrom(const GetReferenceSetRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.reference_set_id().size() > 0) {
    set_reference_set_id(from.reference_set_id());
  }
}

void GetReferenceSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.GetReferenceSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetReferenceSetRequest::CopyFrom(const GetReferenceSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.GetReferenceSetRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetReferenceSetRequest::IsInitialized() const {

  return true;
}

void GetReferenceSetRequest::Swap(GetReferenceSetRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetReferenceSetRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void GetReferenceSetRequest::UnsafeArenaSwap(GetReferenceSetRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetReferenceSetRequest::InternalSwap(GetReferenceSetRequest* other) {
  reference_set_id_.Swap(&other->reference_set_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetReferenceSetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetReferenceSetRequest_descriptor_;
  metadata.reflection = GetReferenceSetRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetReferenceSetRequest

// optional string reference_set_id = 1;
void GetReferenceSetRequest::clear_reference_set_id() {
  reference_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetReferenceSetRequest::reference_set_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.GetReferenceSetRequest.reference_set_id)
  return reference_set_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetReferenceSetRequest::set_reference_set_id(const ::std::string& value) {
  
  reference_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.GetReferenceSetRequest.reference_set_id)
}
void GetReferenceSetRequest::set_reference_set_id(const char* value) {
  
  reference_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.GetReferenceSetRequest.reference_set_id)
}
void GetReferenceSetRequest::set_reference_set_id(const char* value,
    size_t size) {
  
  reference_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.GetReferenceSetRequest.reference_set_id)
}
::std::string* GetReferenceSetRequest::mutable_reference_set_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.GetReferenceSetRequest.reference_set_id)
  return reference_set_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetReferenceSetRequest::release_reference_set_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.GetReferenceSetRequest.reference_set_id)
  
  return reference_set_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetReferenceSetRequest::unsafe_arena_release_reference_set_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.GetReferenceSetRequest.reference_set_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return reference_set_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetReferenceSetRequest::set_allocated_reference_set_id(::std::string* reference_set_id) {
  if (reference_set_id != NULL) {
    
  } else {
    
  }
  reference_set_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference_set_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.GetReferenceSetRequest.reference_set_id)
}
void GetReferenceSetRequest::unsafe_arena_set_allocated_reference_set_id(
    ::std::string* reference_set_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reference_set_id != NULL) {
    
  } else {
    
  }
  reference_set_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reference_set_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.GetReferenceSetRequest.reference_set_id)
}

inline const GetReferenceSetRequest* GetReferenceSetRequest::internal_default_instance() {
  return &GetReferenceSetRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchReferencesRequest::kMd5ChecksumsFieldNumber;
const int SearchReferencesRequest::kAccessionsFieldNumber;
const int SearchReferencesRequest::kReferenceSetIdFieldNumber;
const int SearchReferencesRequest::kPageTokenFieldNumber;
const int SearchReferencesRequest::kPageSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchReferencesRequest::SearchReferencesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2freferences_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.SearchReferencesRequest)
}
SearchReferencesRequest::SearchReferencesRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  md5checksums_(arena),
  accessions_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2freferences_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.SearchReferencesRequest)
}

void SearchReferencesRequest::InitAsDefaultInstance() {
}

SearchReferencesRequest::SearchReferencesRequest(const SearchReferencesRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.SearchReferencesRequest)
}

void SearchReferencesRequest::SharedCtor() {
  reference_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
  _cached_size_ = 0;
}

SearchReferencesRequest::~SearchReferencesRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.SearchReferencesRequest)
  SharedDtor();
}

void SearchReferencesRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  reference_set_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  page_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void SearchReferencesRequest::ArenaDtor(void* object) {
  SearchReferencesRequest* _this = reinterpret_cast< SearchReferencesRequest* >(object);
  (void)_this;
}
void SearchReferencesRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SearchReferencesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchReferencesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchReferencesRequest_descriptor_;
}

const SearchReferencesRequest& SearchReferencesRequest::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2freferences_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SearchReferencesRequest> SearchReferencesRequest_default_instance_;

SearchReferencesRequest* SearchReferencesRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SearchReferencesRequest>(arena);
}

void SearchReferencesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.SearchReferencesRequest)
  reference_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_size_ = 0;
  md5checksums_.Clear();
  accessions_.Clear();
}

bool SearchReferencesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.SearchReferencesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string md5checksums = 1;
      case 1: {
        if (tag == 10) {
         parse_md5checksums:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_md5checksums()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->md5checksums(this->md5checksums_size() - 1).data(),
            this->md5checksums(this->md5checksums_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchReferencesRequest.md5checksums"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_md5checksums;
        if (input->ExpectTag(18)) goto parse_accessions;
        break;
      }

      // repeated string accessions = 2;
      case 2: {
        if (tag == 18) {
         parse_accessions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_accessions()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->accessions(this->accessions_size() - 1).data(),
            this->accessions(this->accessions_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchReferencesRequest.accessions"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_accessions;
        if (input->ExpectTag(26)) goto parse_reference_set_id;
        break;
      }

      // optional string reference_set_id = 3;
      case 3: {
        if (tag == 26) {
         parse_reference_set_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_set_id().data(), this->reference_set_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchReferencesRequest.reference_set_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_page_token;
        break;
      }

      // optional string page_token = 4;
      case 4: {
        if (tag == 34) {
         parse_page_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), this->page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchReferencesRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_page_size;
        break;
      }

      // optional int32 page_size = 5;
      case 5: {
        if (tag == 40) {
         parse_page_size:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.SearchReferencesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.SearchReferencesRequest)
  return false;
#undef DO_
}

void SearchReferencesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.SearchReferencesRequest)
  // repeated string md5checksums = 1;
  for (int i = 0; i < this->md5checksums_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->md5checksums(i).data(), this->md5checksums(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferencesRequest.md5checksums");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->md5checksums(i), output);
  }

  // repeated string accessions = 2;
  for (int i = 0; i < this->accessions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accessions(i).data(), this->accessions(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferencesRequest.accessions");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->accessions(i), output);
  }

  // optional string reference_set_id = 3;
  if (this->reference_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_set_id().data(), this->reference_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferencesRequest.reference_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->reference_set_id(), output);
  }

  // optional string page_token = 4;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferencesRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->page_token(), output);
  }

  // optional int32 page_size = 5;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->page_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.SearchReferencesRequest)
}

::google::protobuf::uint8* SearchReferencesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.SearchReferencesRequest)
  // repeated string md5checksums = 1;
  for (int i = 0; i < this->md5checksums_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->md5checksums(i).data(), this->md5checksums(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferencesRequest.md5checksums");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->md5checksums(i), target);
  }

  // repeated string accessions = 2;
  for (int i = 0; i < this->accessions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accessions(i).data(), this->accessions(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferencesRequest.accessions");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->accessions(i), target);
  }

  // optional string reference_set_id = 3;
  if (this->reference_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_set_id().data(), this->reference_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferencesRequest.reference_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->reference_set_id(), target);
  }

  // optional string page_token = 4;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferencesRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->page_token(), target);
  }

  // optional int32 page_size = 5;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->page_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.SearchReferencesRequest)
  return target;
}

size_t SearchReferencesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.SearchReferencesRequest)
  size_t total_size = 0;

  // optional string reference_set_id = 3;
  if (this->reference_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference_set_id());
  }

  // optional string page_token = 4;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // optional int32 page_size = 5;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  // repeated string md5checksums = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->md5checksums_size());
  for (int i = 0; i < this->md5checksums_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->md5checksums(i));
  }

  // repeated string accessions = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->accessions_size());
  for (int i = 0; i < this->accessions_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->accessions(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchReferencesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.SearchReferencesRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SearchReferencesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchReferencesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.SearchReferencesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.SearchReferencesRequest)
    UnsafeMergeFrom(*source);
  }
}

void SearchReferencesRequest::MergeFrom(const SearchReferencesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.SearchReferencesRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SearchReferencesRequest::UnsafeMergeFrom(const SearchReferencesRequest& from) {
  GOOGLE_DCHECK(&from != this);
  md5checksums_.UnsafeMergeFrom(from.md5checksums_);
  accessions_.UnsafeMergeFrom(from.accessions_);
  if (from.reference_set_id().size() > 0) {
    set_reference_set_id(from.reference_set_id());
  }
  if (from.page_token().size() > 0) {
    set_page_token(from.page_token());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void SearchReferencesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.SearchReferencesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchReferencesRequest::CopyFrom(const SearchReferencesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.SearchReferencesRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SearchReferencesRequest::IsInitialized() const {

  return true;
}

void SearchReferencesRequest::Swap(SearchReferencesRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SearchReferencesRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void SearchReferencesRequest::UnsafeArenaSwap(SearchReferencesRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SearchReferencesRequest::InternalSwap(SearchReferencesRequest* other) {
  md5checksums_.UnsafeArenaSwap(&other->md5checksums_);
  accessions_.UnsafeArenaSwap(&other->accessions_);
  reference_set_id_.Swap(&other->reference_set_id_);
  page_token_.Swap(&other->page_token_);
  std::swap(page_size_, other->page_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchReferencesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchReferencesRequest_descriptor_;
  metadata.reflection = SearchReferencesRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchReferencesRequest

// repeated string md5checksums = 1;
int SearchReferencesRequest::md5checksums_size() const {
  return md5checksums_.size();
}
void SearchReferencesRequest::clear_md5checksums() {
  md5checksums_.Clear();
}
const ::std::string& SearchReferencesRequest::md5checksums(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReferencesRequest.md5checksums)
  return md5checksums_.Get(index);
}
::std::string* SearchReferencesRequest::mutable_md5checksums(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReferencesRequest.md5checksums)
  return md5checksums_.Mutable(index);
}
void SearchReferencesRequest::set_md5checksums(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferencesRequest.md5checksums)
  md5checksums_.Mutable(index)->assign(value);
}
void SearchReferencesRequest::set_md5checksums(int index, const char* value) {
  md5checksums_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchReferencesRequest.md5checksums)
}
void SearchReferencesRequest::set_md5checksums(int index, const char* value, size_t size) {
  md5checksums_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchReferencesRequest.md5checksums)
}
::std::string* SearchReferencesRequest::add_md5checksums() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.SearchReferencesRequest.md5checksums)
  return md5checksums_.Add();
}
void SearchReferencesRequest::add_md5checksums(const ::std::string& value) {
  md5checksums_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchReferencesRequest.md5checksums)
}
void SearchReferencesRequest::add_md5checksums(const char* value) {
  md5checksums_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.SearchReferencesRequest.md5checksums)
}
void SearchReferencesRequest::add_md5checksums(const char* value, size_t size) {
  md5checksums_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.SearchReferencesRequest.md5checksums)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SearchReferencesRequest::md5checksums() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.SearchReferencesRequest.md5checksums)
  return md5checksums_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SearchReferencesRequest::mutable_md5checksums() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.SearchReferencesRequest.md5checksums)
  return &md5checksums_;
}

// repeated string accessions = 2;
int SearchReferencesRequest::accessions_size() const {
  return accessions_.size();
}
void SearchReferencesRequest::clear_accessions() {
  accessions_.Clear();
}
const ::std::string& SearchReferencesRequest::accessions(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReferencesRequest.accessions)
  return accessions_.Get(index);
}
::std::string* SearchReferencesRequest::mutable_accessions(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReferencesRequest.accessions)
  return accessions_.Mutable(index);
}
void SearchReferencesRequest::set_accessions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferencesRequest.accessions)
  accessions_.Mutable(index)->assign(value);
}
void SearchReferencesRequest::set_accessions(int index, const char* value) {
  accessions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchReferencesRequest.accessions)
}
void SearchReferencesRequest::set_accessions(int index, const char* value, size_t size) {
  accessions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchReferencesRequest.accessions)
}
::std::string* SearchReferencesRequest::add_accessions() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.SearchReferencesRequest.accessions)
  return accessions_.Add();
}
void SearchReferencesRequest::add_accessions(const ::std::string& value) {
  accessions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchReferencesRequest.accessions)
}
void SearchReferencesRequest::add_accessions(const char* value) {
  accessions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.SearchReferencesRequest.accessions)
}
void SearchReferencesRequest::add_accessions(const char* value, size_t size) {
  accessions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.SearchReferencesRequest.accessions)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SearchReferencesRequest::accessions() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.SearchReferencesRequest.accessions)
  return accessions_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SearchReferencesRequest::mutable_accessions() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.SearchReferencesRequest.accessions)
  return &accessions_;
}

// optional string reference_set_id = 3;
void SearchReferencesRequest::clear_reference_set_id() {
  reference_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SearchReferencesRequest::reference_set_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReferencesRequest.reference_set_id)
  return reference_set_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchReferencesRequest::set_reference_set_id(const ::std::string& value) {
  
  reference_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferencesRequest.reference_set_id)
}
void SearchReferencesRequest::set_reference_set_id(const char* value) {
  
  reference_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchReferencesRequest.reference_set_id)
}
void SearchReferencesRequest::set_reference_set_id(const char* value,
    size_t size) {
  
  reference_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchReferencesRequest.reference_set_id)
}
::std::string* SearchReferencesRequest::mutable_reference_set_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReferencesRequest.reference_set_id)
  return reference_set_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchReferencesRequest::release_reference_set_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.SearchReferencesRequest.reference_set_id)
  
  return reference_set_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchReferencesRequest::unsafe_arena_release_reference_set_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.SearchReferencesRequest.reference_set_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return reference_set_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SearchReferencesRequest::set_allocated_reference_set_id(::std::string* reference_set_id) {
  if (reference_set_id != NULL) {
    
  } else {
    
  }
  reference_set_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference_set_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.SearchReferencesRequest.reference_set_id)
}
void SearchReferencesRequest::unsafe_arena_set_allocated_reference_set_id(
    ::std::string* reference_set_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reference_set_id != NULL) {
    
  } else {
    
  }
  reference_set_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reference_set_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.SearchReferencesRequest.reference_set_id)
}

// optional string page_token = 4;
void SearchReferencesRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SearchReferencesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReferencesRequest.page_token)
  return page_token_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchReferencesRequest::set_page_token(const ::std::string& value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferencesRequest.page_token)
}
void SearchReferencesRequest::set_page_token(const char* value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchReferencesRequest.page_token)
}
void SearchReferencesRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchReferencesRequest.page_token)
}
::std::string* SearchReferencesRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReferencesRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchReferencesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.SearchReferencesRequest.page_token)
  
  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchReferencesRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.SearchReferencesRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SearchReferencesRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.SearchReferencesRequest.page_token)
}
void SearchReferencesRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.SearchReferencesRequest.page_token)
}

// optional int32 page_size = 5;
void SearchReferencesRequest::clear_page_size() {
  page_size_ = 0;
}
::google::protobuf::int32 SearchReferencesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReferencesRequest.page_size)
  return page_size_;
}
void SearchReferencesRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferencesRequest.page_size)
}

inline const SearchReferencesRequest* SearchReferencesRequest::internal_default_instance() {
  return &SearchReferencesRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchReferencesResponse::kReferencesFieldNumber;
const int SearchReferencesResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchReferencesResponse::SearchReferencesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2freferences_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.SearchReferencesResponse)
}
SearchReferencesResponse::SearchReferencesResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  references_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2freferences_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.SearchReferencesResponse)
}

void SearchReferencesResponse::InitAsDefaultInstance() {
}

SearchReferencesResponse::SearchReferencesResponse(const SearchReferencesResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.SearchReferencesResponse)
}

void SearchReferencesResponse::SharedCtor() {
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SearchReferencesResponse::~SearchReferencesResponse() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.SearchReferencesResponse)
  SharedDtor();
}

void SearchReferencesResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  next_page_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void SearchReferencesResponse::ArenaDtor(void* object) {
  SearchReferencesResponse* _this = reinterpret_cast< SearchReferencesResponse* >(object);
  (void)_this;
}
void SearchReferencesResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SearchReferencesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchReferencesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchReferencesResponse_descriptor_;
}

const SearchReferencesResponse& SearchReferencesResponse::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2freferences_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SearchReferencesResponse> SearchReferencesResponse_default_instance_;

SearchReferencesResponse* SearchReferencesResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SearchReferencesResponse>(arena);
}

void SearchReferencesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.SearchReferencesResponse)
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  references_.Clear();
}

bool SearchReferencesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.SearchReferencesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.genomics.v1.Reference references = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_references:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_references()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_references;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_next_page_token;
        break;
      }

      // optional string next_page_token = 2;
      case 2: {
        if (tag == 18) {
         parse_next_page_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), this->next_page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchReferencesResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.SearchReferencesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.SearchReferencesResponse)
  return false;
#undef DO_
}

void SearchReferencesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.SearchReferencesResponse)
  // repeated .google.genomics.v1.Reference references = 1;
  for (unsigned int i = 0, n = this->references_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->references(i), output);
  }

  // optional string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferencesResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.SearchReferencesResponse)
}

::google::protobuf::uint8* SearchReferencesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.SearchReferencesResponse)
  // repeated .google.genomics.v1.Reference references = 1;
  for (unsigned int i = 0, n = this->references_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->references(i), false, target);
  }

  // optional string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferencesResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.SearchReferencesResponse)
  return target;
}

size_t SearchReferencesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.SearchReferencesResponse)
  size_t total_size = 0;

  // optional string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  // repeated .google.genomics.v1.Reference references = 1;
  {
    unsigned int count = this->references_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->references(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchReferencesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.SearchReferencesResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SearchReferencesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchReferencesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.SearchReferencesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.SearchReferencesResponse)
    UnsafeMergeFrom(*source);
  }
}

void SearchReferencesResponse::MergeFrom(const SearchReferencesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.SearchReferencesResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SearchReferencesResponse::UnsafeMergeFrom(const SearchReferencesResponse& from) {
  GOOGLE_DCHECK(&from != this);
  references_.MergeFrom(from.references_);
  if (from.next_page_token().size() > 0) {
    set_next_page_token(from.next_page_token());
  }
}

void SearchReferencesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.SearchReferencesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchReferencesResponse::CopyFrom(const SearchReferencesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.SearchReferencesResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SearchReferencesResponse::IsInitialized() const {

  return true;
}

void SearchReferencesResponse::Swap(SearchReferencesResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SearchReferencesResponse temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void SearchReferencesResponse::UnsafeArenaSwap(SearchReferencesResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SearchReferencesResponse::InternalSwap(SearchReferencesResponse* other) {
  references_.UnsafeArenaSwap(&other->references_);
  next_page_token_.Swap(&other->next_page_token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchReferencesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchReferencesResponse_descriptor_;
  metadata.reflection = SearchReferencesResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchReferencesResponse

// repeated .google.genomics.v1.Reference references = 1;
int SearchReferencesResponse::references_size() const {
  return references_.size();
}
void SearchReferencesResponse::clear_references() {
  references_.Clear();
}
const ::google::genomics::v1::Reference& SearchReferencesResponse::references(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReferencesResponse.references)
  return references_.Get(index);
}
::google::genomics::v1::Reference* SearchReferencesResponse::mutable_references(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReferencesResponse.references)
  return references_.Mutable(index);
}
::google::genomics::v1::Reference* SearchReferencesResponse::add_references() {
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchReferencesResponse.references)
  return references_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::genomics::v1::Reference >*
SearchReferencesResponse::mutable_references() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.SearchReferencesResponse.references)
  return &references_;
}
const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1::Reference >&
SearchReferencesResponse::references() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.SearchReferencesResponse.references)
  return references_;
}

// optional string next_page_token = 2;
void SearchReferencesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SearchReferencesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchReferencesResponse.next_page_token)
  return next_page_token_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchReferencesResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchReferencesResponse.next_page_token)
}
void SearchReferencesResponse::set_next_page_token(const char* value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchReferencesResponse.next_page_token)
}
void SearchReferencesResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchReferencesResponse.next_page_token)
}
::std::string* SearchReferencesResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchReferencesResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchReferencesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.SearchReferencesResponse.next_page_token)
  
  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchReferencesResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.SearchReferencesResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SearchReferencesResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.SearchReferencesResponse.next_page_token)
}
void SearchReferencesResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.SearchReferencesResponse.next_page_token)
}

inline const SearchReferencesResponse* SearchReferencesResponse::internal_default_instance() {
  return &SearchReferencesResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetReferenceRequest::kReferenceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetReferenceRequest::GetReferenceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2freferences_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.GetReferenceRequest)
}
GetReferenceRequest::GetReferenceRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2freferences_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.GetReferenceRequest)
}

void GetReferenceRequest::InitAsDefaultInstance() {
}

GetReferenceRequest::GetReferenceRequest(const GetReferenceRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.GetReferenceRequest)
}

void GetReferenceRequest::SharedCtor() {
  reference_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetReferenceRequest::~GetReferenceRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.GetReferenceRequest)
  SharedDtor();
}

void GetReferenceRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  reference_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void GetReferenceRequest::ArenaDtor(void* object) {
  GetReferenceRequest* _this = reinterpret_cast< GetReferenceRequest* >(object);
  (void)_this;
}
void GetReferenceRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetReferenceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetReferenceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetReferenceRequest_descriptor_;
}

const GetReferenceRequest& GetReferenceRequest::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2freferences_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetReferenceRequest> GetReferenceRequest_default_instance_;

GetReferenceRequest* GetReferenceRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetReferenceRequest>(arena);
}

void GetReferenceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.GetReferenceRequest)
  reference_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool GetReferenceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.GetReferenceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string reference_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_id().data(), this->reference_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.GetReferenceRequest.reference_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.GetReferenceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.GetReferenceRequest)
  return false;
#undef DO_
}

void GetReferenceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.GetReferenceRequest)
  // optional string reference_id = 1;
  if (this->reference_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_id().data(), this->reference_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.GetReferenceRequest.reference_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reference_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.GetReferenceRequest)
}

::google::protobuf::uint8* GetReferenceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.GetReferenceRequest)
  // optional string reference_id = 1;
  if (this->reference_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_id().data(), this->reference_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.GetReferenceRequest.reference_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reference_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.GetReferenceRequest)
  return target;
}

size_t GetReferenceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.GetReferenceRequest)
  size_t total_size = 0;

  // optional string reference_id = 1;
  if (this->reference_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetReferenceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.GetReferenceRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetReferenceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetReferenceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.GetReferenceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.GetReferenceRequest)
    UnsafeMergeFrom(*source);
  }
}

void GetReferenceRequest::MergeFrom(const GetReferenceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.GetReferenceRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetReferenceRequest::UnsafeMergeFrom(const GetReferenceRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.reference_id().size() > 0) {
    set_reference_id(from.reference_id());
  }
}

void GetReferenceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.GetReferenceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetReferenceRequest::CopyFrom(const GetReferenceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.GetReferenceRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetReferenceRequest::IsInitialized() const {

  return true;
}

void GetReferenceRequest::Swap(GetReferenceRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetReferenceRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void GetReferenceRequest::UnsafeArenaSwap(GetReferenceRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetReferenceRequest::InternalSwap(GetReferenceRequest* other) {
  reference_id_.Swap(&other->reference_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetReferenceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetReferenceRequest_descriptor_;
  metadata.reflection = GetReferenceRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetReferenceRequest

// optional string reference_id = 1;
void GetReferenceRequest::clear_reference_id() {
  reference_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetReferenceRequest::reference_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.GetReferenceRequest.reference_id)
  return reference_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetReferenceRequest::set_reference_id(const ::std::string& value) {
  
  reference_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.GetReferenceRequest.reference_id)
}
void GetReferenceRequest::set_reference_id(const char* value) {
  
  reference_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.GetReferenceRequest.reference_id)
}
void GetReferenceRequest::set_reference_id(const char* value,
    size_t size) {
  
  reference_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.GetReferenceRequest.reference_id)
}
::std::string* GetReferenceRequest::mutable_reference_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.GetReferenceRequest.reference_id)
  return reference_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetReferenceRequest::release_reference_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.GetReferenceRequest.reference_id)
  
  return reference_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetReferenceRequest::unsafe_arena_release_reference_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.GetReferenceRequest.reference_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return reference_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetReferenceRequest::set_allocated_reference_id(::std::string* reference_id) {
  if (reference_id != NULL) {
    
  } else {
    
  }
  reference_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.GetReferenceRequest.reference_id)
}
void GetReferenceRequest::unsafe_arena_set_allocated_reference_id(
    ::std::string* reference_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reference_id != NULL) {
    
  } else {
    
  }
  reference_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reference_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.GetReferenceRequest.reference_id)
}

inline const GetReferenceRequest* GetReferenceRequest::internal_default_instance() {
  return &GetReferenceRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListBasesRequest::kReferenceIdFieldNumber;
const int ListBasesRequest::kStartFieldNumber;
const int ListBasesRequest::kEndFieldNumber;
const int ListBasesRequest::kPageTokenFieldNumber;
const int ListBasesRequest::kPageSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListBasesRequest::ListBasesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2freferences_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.ListBasesRequest)
}
ListBasesRequest::ListBasesRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2freferences_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.ListBasesRequest)
}

void ListBasesRequest::InitAsDefaultInstance() {
}

ListBasesRequest::ListBasesRequest(const ListBasesRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.ListBasesRequest)
}

void ListBasesRequest::SharedCtor() {
  reference_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&start_) + sizeof(page_size_));
  _cached_size_ = 0;
}

ListBasesRequest::~ListBasesRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.ListBasesRequest)
  SharedDtor();
}

void ListBasesRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  reference_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  page_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void ListBasesRequest::ArenaDtor(void* object) {
  ListBasesRequest* _this = reinterpret_cast< ListBasesRequest* >(object);
  (void)_this;
}
void ListBasesRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ListBasesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListBasesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListBasesRequest_descriptor_;
}

const ListBasesRequest& ListBasesRequest::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2freferences_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ListBasesRequest> ListBasesRequest_default_instance_;

ListBasesRequest* ListBasesRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ListBasesRequest>(arena);
}

void ListBasesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.ListBasesRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ListBasesRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ListBasesRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(start_, page_size_);
  reference_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef ZR_HELPER_
#undef ZR_

}

bool ListBasesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.ListBasesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string reference_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_id().data(), this->reference_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ListBasesRequest.reference_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start;
        break;
      }

      // optional int64 start = 2;
      case 2: {
        if (tag == 16) {
         parse_start:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_end;
        break;
      }

      // optional int64 end = 3;
      case 3: {
        if (tag == 24) {
         parse_end:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_page_token;
        break;
      }

      // optional string page_token = 4;
      case 4: {
        if (tag == 34) {
         parse_page_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), this->page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ListBasesRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_page_size;
        break;
      }

      // optional int32 page_size = 5;
      case 5: {
        if (tag == 40) {
         parse_page_size:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.ListBasesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.ListBasesRequest)
  return false;
#undef DO_
}

void ListBasesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.ListBasesRequest)
  // optional string reference_id = 1;
  if (this->reference_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_id().data(), this->reference_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ListBasesRequest.reference_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reference_id(), output);
  }

  // optional int64 start = 2;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->start(), output);
  }

  // optional int64 end = 3;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->end(), output);
  }

  // optional string page_token = 4;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ListBasesRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->page_token(), output);
  }

  // optional int32 page_size = 5;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->page_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.ListBasesRequest)
}

::google::protobuf::uint8* ListBasesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.ListBasesRequest)
  // optional string reference_id = 1;
  if (this->reference_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_id().data(), this->reference_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ListBasesRequest.reference_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reference_id(), target);
  }

  // optional int64 start = 2;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->start(), target);
  }

  // optional int64 end = 3;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->end(), target);
  }

  // optional string page_token = 4;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ListBasesRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->page_token(), target);
  }

  // optional int32 page_size = 5;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->page_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.ListBasesRequest)
  return target;
}

size_t ListBasesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.ListBasesRequest)
  size_t total_size = 0;

  // optional string reference_id = 1;
  if (this->reference_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference_id());
  }

  // optional int64 start = 2;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start());
  }

  // optional int64 end = 3;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end());
  }

  // optional string page_token = 4;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // optional int32 page_size = 5;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListBasesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.ListBasesRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListBasesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListBasesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.ListBasesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.ListBasesRequest)
    UnsafeMergeFrom(*source);
  }
}

void ListBasesRequest::MergeFrom(const ListBasesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.ListBasesRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ListBasesRequest::UnsafeMergeFrom(const ListBasesRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.reference_id().size() > 0) {
    set_reference_id(from.reference_id());
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
  if (from.page_token().size() > 0) {
    set_page_token(from.page_token());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void ListBasesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.ListBasesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListBasesRequest::CopyFrom(const ListBasesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.ListBasesRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ListBasesRequest::IsInitialized() const {

  return true;
}

void ListBasesRequest::Swap(ListBasesRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListBasesRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ListBasesRequest::UnsafeArenaSwap(ListBasesRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListBasesRequest::InternalSwap(ListBasesRequest* other) {
  reference_id_.Swap(&other->reference_id_);
  std::swap(start_, other->start_);
  std::swap(end_, other->end_);
  page_token_.Swap(&other->page_token_);
  std::swap(page_size_, other->page_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListBasesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListBasesRequest_descriptor_;
  metadata.reflection = ListBasesRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListBasesRequest

// optional string reference_id = 1;
void ListBasesRequest::clear_reference_id() {
  reference_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ListBasesRequest::reference_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListBasesRequest.reference_id)
  return reference_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListBasesRequest::set_reference_id(const ::std::string& value) {
  
  reference_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ListBasesRequest.reference_id)
}
void ListBasesRequest::set_reference_id(const char* value) {
  
  reference_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ListBasesRequest.reference_id)
}
void ListBasesRequest::set_reference_id(const char* value,
    size_t size) {
  
  reference_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ListBasesRequest.reference_id)
}
::std::string* ListBasesRequest::mutable_reference_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ListBasesRequest.reference_id)
  return reference_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListBasesRequest::release_reference_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ListBasesRequest.reference_id)
  
  return reference_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListBasesRequest::unsafe_arena_release_reference_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ListBasesRequest.reference_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return reference_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ListBasesRequest::set_allocated_reference_id(::std::string* reference_id) {
  if (reference_id != NULL) {
    
  } else {
    
  }
  reference_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ListBasesRequest.reference_id)
}
void ListBasesRequest::unsafe_arena_set_allocated_reference_id(
    ::std::string* reference_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reference_id != NULL) {
    
  } else {
    
  }
  reference_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reference_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ListBasesRequest.reference_id)
}

// optional int64 start = 2;
void ListBasesRequest::clear_start() {
  start_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ListBasesRequest::start() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListBasesRequest.start)
  return start_;
}
void ListBasesRequest::set_start(::google::protobuf::int64 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.ListBasesRequest.start)
}

// optional int64 end = 3;
void ListBasesRequest::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ListBasesRequest::end() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListBasesRequest.end)
  return end_;
}
void ListBasesRequest::set_end(::google::protobuf::int64 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.ListBasesRequest.end)
}

// optional string page_token = 4;
void ListBasesRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ListBasesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListBasesRequest.page_token)
  return page_token_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListBasesRequest::set_page_token(const ::std::string& value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ListBasesRequest.page_token)
}
void ListBasesRequest::set_page_token(const char* value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ListBasesRequest.page_token)
}
void ListBasesRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ListBasesRequest.page_token)
}
::std::string* ListBasesRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ListBasesRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListBasesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ListBasesRequest.page_token)
  
  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListBasesRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ListBasesRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ListBasesRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ListBasesRequest.page_token)
}
void ListBasesRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ListBasesRequest.page_token)
}

// optional int32 page_size = 5;
void ListBasesRequest::clear_page_size() {
  page_size_ = 0;
}
::google::protobuf::int32 ListBasesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListBasesRequest.page_size)
  return page_size_;
}
void ListBasesRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.ListBasesRequest.page_size)
}

inline const ListBasesRequest* ListBasesRequest::internal_default_instance() {
  return &ListBasesRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListBasesResponse::kOffsetFieldNumber;
const int ListBasesResponse::kSequenceFieldNumber;
const int ListBasesResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListBasesResponse::ListBasesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2freferences_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.ListBasesResponse)
}
ListBasesResponse::ListBasesResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2freferences_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.ListBasesResponse)
}

void ListBasesResponse::InitAsDefaultInstance() {
}

ListBasesResponse::ListBasesResponse(const ListBasesResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.ListBasesResponse)
}

void ListBasesResponse::SharedCtor() {
  sequence_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offset_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

ListBasesResponse::~ListBasesResponse() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.ListBasesResponse)
  SharedDtor();
}

void ListBasesResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  sequence_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  next_page_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void ListBasesResponse::ArenaDtor(void* object) {
  ListBasesResponse* _this = reinterpret_cast< ListBasesResponse* >(object);
  (void)_this;
}
void ListBasesResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ListBasesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListBasesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListBasesResponse_descriptor_;
}

const ListBasesResponse& ListBasesResponse::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2freferences_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ListBasesResponse> ListBasesResponse_default_instance_;

ListBasesResponse* ListBasesResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ListBasesResponse>(arena);
}

void ListBasesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.ListBasesResponse)
  offset_ = GOOGLE_LONGLONG(0);
  sequence_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool ListBasesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.ListBasesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 offset = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sequence;
        break;
      }

      // optional string sequence = 2;
      case 2: {
        if (tag == 18) {
         parse_sequence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sequence()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sequence().data(), this->sequence().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ListBasesResponse.sequence"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_next_page_token;
        break;
      }

      // optional string next_page_token = 3;
      case 3: {
        if (tag == 26) {
         parse_next_page_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), this->next_page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ListBasesResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.ListBasesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.ListBasesResponse)
  return false;
#undef DO_
}

void ListBasesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.ListBasesResponse)
  // optional int64 offset = 1;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->offset(), output);
  }

  // optional string sequence = 2;
  if (this->sequence().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sequence().data(), this->sequence().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ListBasesResponse.sequence");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sequence(), output);
  }

  // optional string next_page_token = 3;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ListBasesResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->next_page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.ListBasesResponse)
}

::google::protobuf::uint8* ListBasesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.ListBasesResponse)
  // optional int64 offset = 1;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->offset(), target);
  }

  // optional string sequence = 2;
  if (this->sequence().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sequence().data(), this->sequence().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ListBasesResponse.sequence");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sequence(), target);
  }

  // optional string next_page_token = 3;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ListBasesResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->next_page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.ListBasesResponse)
  return target;
}

size_t ListBasesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.ListBasesResponse)
  size_t total_size = 0;

  // optional int64 offset = 1;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->offset());
  }

  // optional string sequence = 2;
  if (this->sequence().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sequence());
  }

  // optional string next_page_token = 3;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListBasesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.ListBasesResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListBasesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListBasesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.ListBasesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.ListBasesResponse)
    UnsafeMergeFrom(*source);
  }
}

void ListBasesResponse::MergeFrom(const ListBasesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.ListBasesResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ListBasesResponse::UnsafeMergeFrom(const ListBasesResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
  if (from.sequence().size() > 0) {
    set_sequence(from.sequence());
  }
  if (from.next_page_token().size() > 0) {
    set_next_page_token(from.next_page_token());
  }
}

void ListBasesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.ListBasesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListBasesResponse::CopyFrom(const ListBasesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.ListBasesResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ListBasesResponse::IsInitialized() const {

  return true;
}

void ListBasesResponse::Swap(ListBasesResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListBasesResponse temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ListBasesResponse::UnsafeArenaSwap(ListBasesResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListBasesResponse::InternalSwap(ListBasesResponse* other) {
  std::swap(offset_, other->offset_);
  sequence_.Swap(&other->sequence_);
  next_page_token_.Swap(&other->next_page_token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListBasesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListBasesResponse_descriptor_;
  metadata.reflection = ListBasesResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListBasesResponse

// optional int64 offset = 1;
void ListBasesResponse::clear_offset() {
  offset_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ListBasesResponse::offset() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListBasesResponse.offset)
  return offset_;
}
void ListBasesResponse::set_offset(::google::protobuf::int64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.ListBasesResponse.offset)
}

// optional string sequence = 2;
void ListBasesResponse::clear_sequence() {
  sequence_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ListBasesResponse::sequence() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListBasesResponse.sequence)
  return sequence_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListBasesResponse::set_sequence(const ::std::string& value) {
  
  sequence_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ListBasesResponse.sequence)
}
void ListBasesResponse::set_sequence(const char* value) {
  
  sequence_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ListBasesResponse.sequence)
}
void ListBasesResponse::set_sequence(const char* value,
    size_t size) {
  
  sequence_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ListBasesResponse.sequence)
}
::std::string* ListBasesResponse::mutable_sequence() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ListBasesResponse.sequence)
  return sequence_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListBasesResponse::release_sequence() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ListBasesResponse.sequence)
  
  return sequence_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListBasesResponse::unsafe_arena_release_sequence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ListBasesResponse.sequence)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return sequence_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ListBasesResponse::set_allocated_sequence(::std::string* sequence) {
  if (sequence != NULL) {
    
  } else {
    
  }
  sequence_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sequence,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ListBasesResponse.sequence)
}
void ListBasesResponse::unsafe_arena_set_allocated_sequence(
    ::std::string* sequence) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (sequence != NULL) {
    
  } else {
    
  }
  sequence_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      sequence, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ListBasesResponse.sequence)
}

// optional string next_page_token = 3;
void ListBasesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ListBasesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListBasesResponse.next_page_token)
  return next_page_token_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListBasesResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ListBasesResponse.next_page_token)
}
void ListBasesResponse::set_next_page_token(const char* value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ListBasesResponse.next_page_token)
}
void ListBasesResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ListBasesResponse.next_page_token)
}
::std::string* ListBasesResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ListBasesResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListBasesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ListBasesResponse.next_page_token)
  
  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListBasesResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ListBasesResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ListBasesResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ListBasesResponse.next_page_token)
}
void ListBasesResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ListBasesResponse.next_page_token)
}

inline const ListBasesResponse* ListBasesResponse::internal_default_instance() {
  return &ListBasesResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace genomics
}  // namespace google

// @@protoc_insertion_point(global_scope)
