// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/metric.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/api/metric.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace api {

namespace {

const ::google::protobuf::Descriptor* MetricDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetricDescriptor_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MetricDescriptor_MetricKind_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MetricDescriptor_ValueType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Metric_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Metric_reflection_ = NULL;
const ::google::protobuf::Descriptor* Metric_LabelsEntry_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_google_2fapi_2fmetric_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_google_2fapi_2fmetric_2eproto() {
  protobuf_AddDesc_google_2fapi_2fmetric_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "google/api/metric.proto");
  GOOGLE_CHECK(file != NULL);
  MetricDescriptor_descriptor_ = file->message_type(0);
  static const int MetricDescriptor_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricDescriptor, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricDescriptor, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricDescriptor, labels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricDescriptor, metric_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricDescriptor, value_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricDescriptor, unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricDescriptor, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricDescriptor, display_name_),
  };
  MetricDescriptor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MetricDescriptor_descriptor_,
      MetricDescriptor::internal_default_instance(),
      MetricDescriptor_offsets_,
      -1,
      -1,
      -1,
      sizeof(MetricDescriptor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricDescriptor, _internal_metadata_));
  MetricDescriptor_MetricKind_descriptor_ = MetricDescriptor_descriptor_->enum_type(0);
  MetricDescriptor_ValueType_descriptor_ = MetricDescriptor_descriptor_->enum_type(1);
  Metric_descriptor_ = file->message_type(1);
  static const int Metric_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metric, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metric, labels_),
  };
  Metric_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Metric_descriptor_,
      Metric::internal_default_instance(),
      Metric_offsets_,
      -1,
      -1,
      -1,
      sizeof(Metric),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metric, _internal_metadata_));
  Metric_LabelsEntry_descriptor_ = Metric_descriptor_->nested_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_google_2fapi_2fmetric_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MetricDescriptor_descriptor_, MetricDescriptor::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Metric_descriptor_, Metric::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Metric_LabelsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                Metric_LabelsEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_google_2fapi_2fmetric_2eproto() {
  MetricDescriptor_default_instance_.Shutdown();
  delete MetricDescriptor_reflection_;
  Metric_default_instance_.Shutdown();
  delete Metric_reflection_;
}

void protobuf_InitDefaults_google_2fapi_2fmetric_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::api::protobuf_InitDefaults_google_2fapi_2flabel_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  MetricDescriptor_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Metric_default_instance_.DefaultConstruct();
  MetricDescriptor_default_instance_.get_mutable()->InitAsDefaultInstance();
  Metric_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_google_2fapi_2fmetric_2eproto_once_);
void protobuf_InitDefaults_google_2fapi_2fmetric_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_google_2fapi_2fmetric_2eproto_once_,
                 &protobuf_InitDefaults_google_2fapi_2fmetric_2eproto_impl);
}
void protobuf_AddDesc_google_2fapi_2fmetric_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_google_2fapi_2fmetric_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027google/api/metric.proto\022\ngoogle.api\032\026g"
    "oogle/api/label.proto\"\322\003\n\020MetricDescript"
    "or\022\014\n\004name\030\001 \001(\t\022\014\n\004type\030\010 \001(\t\022+\n\006labels"
    "\030\002 \003(\0132\033.google.api.LabelDescriptor\022<\n\013m"
    "etric_kind\030\003 \001(\0162\'.google.api.MetricDesc"
    "riptor.MetricKind\022:\n\nvalue_type\030\004 \001(\0162&."
    "google.api.MetricDescriptor.ValueType\022\014\n"
    "\004unit\030\005 \001(\t\022\023\n\013description\030\006 \001(\t\022\024\n\014disp"
    "lay_name\030\007 \001(\t\"O\n\nMetricKind\022\033\n\027METRIC_K"
    "IND_UNSPECIFIED\020\000\022\t\n\005GAUGE\020\001\022\t\n\005DELTA\020\002\022"
    "\016\n\nCUMULATIVE\020\003\"q\n\tValueType\022\032\n\026VALUE_TY"
    "PE_UNSPECIFIED\020\000\022\010\n\004BOOL\020\001\022\t\n\005INT64\020\002\022\n\n"
    "\006DOUBLE\020\003\022\n\n\006STRING\020\004\022\020\n\014DISTRIBUTION\020\005\022"
    "\t\n\005MONEY\020\006\"u\n\006Metric\022\014\n\004type\030\003 \001(\t\022.\n\006la"
    "bels\030\002 \003(\0132\036.google.api.Metric.LabelsEnt"
    "ry\032-\n\013LabelsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030"
    "\002 \001(\t:\0028\001B_\n\016com.google.apiB\013MetricProto"
    "P\001Z7google.golang.org/genproto/googleapi"
    "s/api/metric;metric\242\002\004GAPIb\006proto3", 754);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/api/metric.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_AddDesc_google_2fapi_2flabel_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_google_2fapi_2fmetric_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_google_2fapi_2fmetric_2eproto_once_);
void protobuf_AddDesc_google_2fapi_2fmetric_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_google_2fapi_2fmetric_2eproto_once_,
                 &protobuf_AddDesc_google_2fapi_2fmetric_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_google_2fapi_2fmetric_2eproto {
  StaticDescriptorInitializer_google_2fapi_2fmetric_2eproto() {
    protobuf_AddDesc_google_2fapi_2fmetric_2eproto();
  }
} static_descriptor_initializer_google_2fapi_2fmetric_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* MetricDescriptor_MetricKind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetricDescriptor_MetricKind_descriptor_;
}
bool MetricDescriptor_MetricKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MetricDescriptor_MetricKind MetricDescriptor::METRIC_KIND_UNSPECIFIED;
const MetricDescriptor_MetricKind MetricDescriptor::GAUGE;
const MetricDescriptor_MetricKind MetricDescriptor::DELTA;
const MetricDescriptor_MetricKind MetricDescriptor::CUMULATIVE;
const MetricDescriptor_MetricKind MetricDescriptor::MetricKind_MIN;
const MetricDescriptor_MetricKind MetricDescriptor::MetricKind_MAX;
const int MetricDescriptor::MetricKind_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MetricDescriptor_ValueType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetricDescriptor_ValueType_descriptor_;
}
bool MetricDescriptor_ValueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MetricDescriptor_ValueType MetricDescriptor::VALUE_TYPE_UNSPECIFIED;
const MetricDescriptor_ValueType MetricDescriptor::BOOL;
const MetricDescriptor_ValueType MetricDescriptor::INT64;
const MetricDescriptor_ValueType MetricDescriptor::DOUBLE;
const MetricDescriptor_ValueType MetricDescriptor::STRING;
const MetricDescriptor_ValueType MetricDescriptor::DISTRIBUTION;
const MetricDescriptor_ValueType MetricDescriptor::MONEY;
const MetricDescriptor_ValueType MetricDescriptor::ValueType_MIN;
const MetricDescriptor_ValueType MetricDescriptor::ValueType_MAX;
const int MetricDescriptor::ValueType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MetricDescriptor::kNameFieldNumber;
const int MetricDescriptor::kTypeFieldNumber;
const int MetricDescriptor::kLabelsFieldNumber;
const int MetricDescriptor::kMetricKindFieldNumber;
const int MetricDescriptor::kValueTypeFieldNumber;
const int MetricDescriptor::kUnitFieldNumber;
const int MetricDescriptor::kDescriptionFieldNumber;
const int MetricDescriptor::kDisplayNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MetricDescriptor::MetricDescriptor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fapi_2fmetric_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.MetricDescriptor)
}

void MetricDescriptor::InitAsDefaultInstance() {
}

MetricDescriptor::MetricDescriptor(const MetricDescriptor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.api.MetricDescriptor)
}

void MetricDescriptor::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&metric_kind_, 0, reinterpret_cast<char*>(&value_type_) -
    reinterpret_cast<char*>(&metric_kind_) + sizeof(value_type_));
  _cached_size_ = 0;
}

MetricDescriptor::~MetricDescriptor() {
  // @@protoc_insertion_point(destructor:google.api.MetricDescriptor)
  SharedDtor();
}

void MetricDescriptor::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unit_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MetricDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetricDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetricDescriptor_descriptor_;
}

const MetricDescriptor& MetricDescriptor::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fmetric_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MetricDescriptor> MetricDescriptor_default_instance_;

MetricDescriptor* MetricDescriptor::New(::google::protobuf::Arena* arena) const {
  MetricDescriptor* n = new MetricDescriptor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MetricDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.MetricDescriptor)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MetricDescriptor, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MetricDescriptor*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(metric_kind_, value_type_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  labels_.Clear();
}

bool MetricDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.MetricDescriptor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.MetricDescriptor.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_labels;
        break;
      }

      // repeated .google.api.LabelDescriptor labels = 2;
      case 2: {
        if (tag == 18) {
         parse_labels:
          DO_(input->IncrementRecursionDepth());
         parse_loop_labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_labels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_labels;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_metric_kind;
        break;
      }

      // optional .google.api.MetricDescriptor.MetricKind metric_kind = 3;
      case 3: {
        if (tag == 24) {
         parse_metric_kind:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_metric_kind(static_cast< ::google::api::MetricDescriptor_MetricKind >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_value_type;
        break;
      }

      // optional .google.api.MetricDescriptor.ValueType value_type = 4;
      case 4: {
        if (tag == 32) {
         parse_value_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_value_type(static_cast< ::google::api::MetricDescriptor_ValueType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_unit;
        break;
      }

      // optional string unit = 5;
      case 5: {
        if (tag == 42) {
         parse_unit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unit()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->unit().data(), this->unit().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.MetricDescriptor.unit"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_description;
        break;
      }

      // optional string description = 6;
      case 6: {
        if (tag == 50) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.MetricDescriptor.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_display_name;
        break;
      }

      // optional string display_name = 7;
      case 7: {
        if (tag == 58) {
         parse_display_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->display_name().data(), this->display_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.MetricDescriptor.display_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_type;
        break;
      }

      // optional string type = 8;
      case 8: {
        if (tag == 66) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.MetricDescriptor.type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.MetricDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.MetricDescriptor)
  return false;
#undef DO_
}

void MetricDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.MetricDescriptor)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.MetricDescriptor.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .google.api.LabelDescriptor labels = 2;
  for (unsigned int i = 0, n = this->labels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->labels(i), output);
  }

  // optional .google.api.MetricDescriptor.MetricKind metric_kind = 3;
  if (this->metric_kind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->metric_kind(), output);
  }

  // optional .google.api.MetricDescriptor.ValueType value_type = 4;
  if (this->value_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->value_type(), output);
  }

  // optional string unit = 5;
  if (this->unit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unit().data(), this->unit().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.MetricDescriptor.unit");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->unit(), output);
  }

  // optional string description = 6;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.MetricDescriptor.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->description(), output);
  }

  // optional string display_name = 7;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.MetricDescriptor.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->display_name(), output);
  }

  // optional string type = 8;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.MetricDescriptor.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.MetricDescriptor)
}

::google::protobuf::uint8* MetricDescriptor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.MetricDescriptor)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.MetricDescriptor.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .google.api.LabelDescriptor labels = 2;
  for (unsigned int i = 0, n = this->labels_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->labels(i), false, target);
  }

  // optional .google.api.MetricDescriptor.MetricKind metric_kind = 3;
  if (this->metric_kind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->metric_kind(), target);
  }

  // optional .google.api.MetricDescriptor.ValueType value_type = 4;
  if (this->value_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->value_type(), target);
  }

  // optional string unit = 5;
  if (this->unit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unit().data(), this->unit().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.MetricDescriptor.unit");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->unit(), target);
  }

  // optional string description = 6;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.MetricDescriptor.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->description(), target);
  }

  // optional string display_name = 7;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.MetricDescriptor.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->display_name(), target);
  }

  // optional string type = 8;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.MetricDescriptor.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.MetricDescriptor)
  return target;
}

size_t MetricDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.MetricDescriptor)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string type = 8;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // optional .google.api.MetricDescriptor.MetricKind metric_kind = 3;
  if (this->metric_kind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->metric_kind());
  }

  // optional .google.api.MetricDescriptor.ValueType value_type = 4;
  if (this->value_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->value_type());
  }

  // optional string unit = 5;
  if (this->unit().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->unit());
  }

  // optional string description = 6;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // optional string display_name = 7;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_name());
  }

  // repeated .google.api.LabelDescriptor labels = 2;
  {
    unsigned int count = this->labels_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->labels(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetricDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.MetricDescriptor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MetricDescriptor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MetricDescriptor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.MetricDescriptor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.MetricDescriptor)
    UnsafeMergeFrom(*source);
  }
}

void MetricDescriptor::MergeFrom(const MetricDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.MetricDescriptor)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MetricDescriptor::UnsafeMergeFrom(const MetricDescriptor& from) {
  GOOGLE_DCHECK(&from != this);
  labels_.MergeFrom(from.labels_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.metric_kind() != 0) {
    set_metric_kind(from.metric_kind());
  }
  if (from.value_type() != 0) {
    set_value_type(from.value_type());
  }
  if (from.unit().size() > 0) {

    unit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unit_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.display_name().size() > 0) {

    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
}

void MetricDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.MetricDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetricDescriptor::CopyFrom(const MetricDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.MetricDescriptor)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MetricDescriptor::IsInitialized() const {

  return true;
}

void MetricDescriptor::Swap(MetricDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MetricDescriptor::InternalSwap(MetricDescriptor* other) {
  name_.Swap(&other->name_);
  type_.Swap(&other->type_);
  labels_.UnsafeArenaSwap(&other->labels_);
  std::swap(metric_kind_, other->metric_kind_);
  std::swap(value_type_, other->value_type_);
  unit_.Swap(&other->unit_);
  description_.Swap(&other->description_);
  display_name_.Swap(&other->display_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MetricDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetricDescriptor_descriptor_;
  metadata.reflection = MetricDescriptor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MetricDescriptor

// optional string name = 1;
void MetricDescriptor::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MetricDescriptor::name() const {
  // @@protoc_insertion_point(field_get:google.api.MetricDescriptor.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MetricDescriptor::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.MetricDescriptor.name)
}
void MetricDescriptor::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.MetricDescriptor.name)
}
void MetricDescriptor::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.MetricDescriptor.name)
}
::std::string* MetricDescriptor::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.api.MetricDescriptor.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MetricDescriptor::release_name() {
  // @@protoc_insertion_point(field_release:google.api.MetricDescriptor.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MetricDescriptor::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.api.MetricDescriptor.name)
}

// optional string type = 8;
void MetricDescriptor::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MetricDescriptor::type() const {
  // @@protoc_insertion_point(field_get:google.api.MetricDescriptor.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MetricDescriptor::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.MetricDescriptor.type)
}
void MetricDescriptor::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.MetricDescriptor.type)
}
void MetricDescriptor::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.MetricDescriptor.type)
}
::std::string* MetricDescriptor::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:google.api.MetricDescriptor.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MetricDescriptor::release_type() {
  // @@protoc_insertion_point(field_release:google.api.MetricDescriptor.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MetricDescriptor::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:google.api.MetricDescriptor.type)
}

// repeated .google.api.LabelDescriptor labels = 2;
int MetricDescriptor::labels_size() const {
  return labels_.size();
}
void MetricDescriptor::clear_labels() {
  labels_.Clear();
}
const ::google::api::LabelDescriptor& MetricDescriptor::labels(int index) const {
  // @@protoc_insertion_point(field_get:google.api.MetricDescriptor.labels)
  return labels_.Get(index);
}
::google::api::LabelDescriptor* MetricDescriptor::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.MetricDescriptor.labels)
  return labels_.Mutable(index);
}
::google::api::LabelDescriptor* MetricDescriptor::add_labels() {
  // @@protoc_insertion_point(field_add:google.api.MetricDescriptor.labels)
  return labels_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::api::LabelDescriptor >*
MetricDescriptor::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:google.api.MetricDescriptor.labels)
  return &labels_;
}
const ::google::protobuf::RepeatedPtrField< ::google::api::LabelDescriptor >&
MetricDescriptor::labels() const {
  // @@protoc_insertion_point(field_list:google.api.MetricDescriptor.labels)
  return labels_;
}

// optional .google.api.MetricDescriptor.MetricKind metric_kind = 3;
void MetricDescriptor::clear_metric_kind() {
  metric_kind_ = 0;
}
::google::api::MetricDescriptor_MetricKind MetricDescriptor::metric_kind() const {
  // @@protoc_insertion_point(field_get:google.api.MetricDescriptor.metric_kind)
  return static_cast< ::google::api::MetricDescriptor_MetricKind >(metric_kind_);
}
void MetricDescriptor::set_metric_kind(::google::api::MetricDescriptor_MetricKind value) {
  
  metric_kind_ = value;
  // @@protoc_insertion_point(field_set:google.api.MetricDescriptor.metric_kind)
}

// optional .google.api.MetricDescriptor.ValueType value_type = 4;
void MetricDescriptor::clear_value_type() {
  value_type_ = 0;
}
::google::api::MetricDescriptor_ValueType MetricDescriptor::value_type() const {
  // @@protoc_insertion_point(field_get:google.api.MetricDescriptor.value_type)
  return static_cast< ::google::api::MetricDescriptor_ValueType >(value_type_);
}
void MetricDescriptor::set_value_type(::google::api::MetricDescriptor_ValueType value) {
  
  value_type_ = value;
  // @@protoc_insertion_point(field_set:google.api.MetricDescriptor.value_type)
}

// optional string unit = 5;
void MetricDescriptor::clear_unit() {
  unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MetricDescriptor::unit() const {
  // @@protoc_insertion_point(field_get:google.api.MetricDescriptor.unit)
  return unit_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MetricDescriptor::set_unit(const ::std::string& value) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.MetricDescriptor.unit)
}
void MetricDescriptor::set_unit(const char* value) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.MetricDescriptor.unit)
}
void MetricDescriptor::set_unit(const char* value, size_t size) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.MetricDescriptor.unit)
}
::std::string* MetricDescriptor::mutable_unit() {
  
  // @@protoc_insertion_point(field_mutable:google.api.MetricDescriptor.unit)
  return unit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MetricDescriptor::release_unit() {
  // @@protoc_insertion_point(field_release:google.api.MetricDescriptor.unit)
  
  return unit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MetricDescriptor::set_allocated_unit(::std::string* unit) {
  if (unit != NULL) {
    
  } else {
    
  }
  unit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unit);
  // @@protoc_insertion_point(field_set_allocated:google.api.MetricDescriptor.unit)
}

// optional string description = 6;
void MetricDescriptor::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MetricDescriptor::description() const {
  // @@protoc_insertion_point(field_get:google.api.MetricDescriptor.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MetricDescriptor::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.MetricDescriptor.description)
}
void MetricDescriptor::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.MetricDescriptor.description)
}
void MetricDescriptor::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.MetricDescriptor.description)
}
::std::string* MetricDescriptor::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.api.MetricDescriptor.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MetricDescriptor::release_description() {
  // @@protoc_insertion_point(field_release:google.api.MetricDescriptor.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MetricDescriptor::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.api.MetricDescriptor.description)
}

// optional string display_name = 7;
void MetricDescriptor::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MetricDescriptor::display_name() const {
  // @@protoc_insertion_point(field_get:google.api.MetricDescriptor.display_name)
  return display_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MetricDescriptor::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.MetricDescriptor.display_name)
}
void MetricDescriptor::set_display_name(const char* value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.MetricDescriptor.display_name)
}
void MetricDescriptor::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.MetricDescriptor.display_name)
}
::std::string* MetricDescriptor::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.api.MetricDescriptor.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MetricDescriptor::release_display_name() {
  // @@protoc_insertion_point(field_release:google.api.MetricDescriptor.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MetricDescriptor::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.api.MetricDescriptor.display_name)
}

inline const MetricDescriptor* MetricDescriptor::internal_default_instance() {
  return &MetricDescriptor_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Metric::kTypeFieldNumber;
const int Metric::kLabelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Metric::Metric()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fapi_2fmetric_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.Metric)
}

void Metric::InitAsDefaultInstance() {
}

Metric::Metric(const Metric& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.api.Metric)
}

void Metric::SharedCtor() {
  labels_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  labels_.SetEntryDescriptor(
      &::google::api::Metric_LabelsEntry_descriptor_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Metric::~Metric() {
  // @@protoc_insertion_point(destructor:google.api.Metric)
  SharedDtor();
}

void Metric::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Metric::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Metric::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Metric_descriptor_;
}

const Metric& Metric::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fmetric_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Metric> Metric_default_instance_;

Metric* Metric::New(::google::protobuf::Arena* arena) const {
  Metric* n = new Metric;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Metric::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.Metric)
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  labels_.Clear();
}

bool Metric::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.Metric)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, string> labels = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_labels:
          Metric_LabelsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.Metric.LabelsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.Metric.LabelsEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_labels;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }

      // optional string type = 3;
      case 3: {
        if (tag == 26) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.Metric.type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.Metric)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.Metric)
  return false;
#undef DO_
}

void Metric::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.Metric)
  // map<string, string> labels = 2;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.api.Metric.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.api.Metric.LabelsEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Metric_LabelsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Metric_LabelsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional string type = 3;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.Metric.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.Metric)
}

::google::protobuf::uint8* Metric::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.Metric)
  // map<string, string> labels = 2;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.api.Metric.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.api.Metric.LabelsEntry.value");
      }
    };

    if (deterministic &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Metric_LabelsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Metric_LabelsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional string type = 3;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.Metric.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.Metric)
  return target;
}

size_t Metric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.Metric)
  size_t total_size = 0;

  // optional string type = 3;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // map<string, string> labels = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  {
    ::google::protobuf::scoped_ptr<Metric_LabelsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->labels().begin();
        it != this->labels().end(); ++it) {
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Metric::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.Metric)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Metric* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Metric>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.Metric)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.Metric)
    UnsafeMergeFrom(*source);
  }
}

void Metric::MergeFrom(const Metric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.Metric)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Metric::UnsafeMergeFrom(const Metric& from) {
  GOOGLE_DCHECK(&from != this);
  labels_.MergeFrom(from.labels_);
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
}

void Metric::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.Metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metric::CopyFrom(const Metric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.Metric)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Metric::IsInitialized() const {

  return true;
}

void Metric::Swap(Metric* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Metric::InternalSwap(Metric* other) {
  type_.Swap(&other->type_);
  labels_.Swap(&other->labels_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Metric::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Metric_descriptor_;
  metadata.reflection = Metric_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Metric

// optional string type = 3;
void Metric::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Metric::type() const {
  // @@protoc_insertion_point(field_get:google.api.Metric.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Metric::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.Metric.type)
}
void Metric::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.Metric.type)
}
void Metric::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.Metric.type)
}
::std::string* Metric::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:google.api.Metric.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Metric::release_type() {
  // @@protoc_insertion_point(field_release:google.api.Metric.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Metric::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:google.api.Metric.type)
}

// map<string, string> labels = 2;
int Metric::labels_size() const {
  return labels_.size();
}
void Metric::clear_labels() {
  labels_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
Metric::labels() const {
  // @@protoc_insertion_point(field_map:google.api.Metric.labels)
  return labels_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
Metric::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.api.Metric.labels)
  return labels_.MutableMap();
}

inline const Metric* Metric::internal_default_instance() {
  return &Metric_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace google

// @@protoc_insertion_point(global_scope)
