// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/source/v1/source_context.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/devtools/source/v1/source_context.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace devtools {
namespace source {
namespace v1 {

namespace {

const ::google::protobuf::Descriptor* SourceContext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SourceContext_reflection_ = NULL;
struct SourceContextOneofInstance {
  const ::google::devtools::source::v1::CloudRepoSourceContext* cloud_repo_;
  const ::google::devtools::source::v1::CloudWorkspaceSourceContext* cloud_workspace_;
  const ::google::devtools::source::v1::GerritSourceContext* gerrit_;
  const ::google::devtools::source::v1::GitSourceContext* git_;
}* SourceContext_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* ExtendedSourceContext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExtendedSourceContext_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExtendedSourceContext_LabelsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AliasContext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AliasContext_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AliasContext_Kind_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CloudRepoSourceContext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloudRepoSourceContext_reflection_ = NULL;
struct CloudRepoSourceContextOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr revision_id_;
  ::google::protobuf::internal::ArenaStringPtr alias_name_;
  const ::google::devtools::source::v1::AliasContext* alias_context_;
}* CloudRepoSourceContext_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* CloudWorkspaceSourceContext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloudWorkspaceSourceContext_reflection_ = NULL;
const ::google::protobuf::Descriptor* GerritSourceContext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GerritSourceContext_reflection_ = NULL;
struct GerritSourceContextOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr revision_id_;
  ::google::protobuf::internal::ArenaStringPtr alias_name_;
  const ::google::devtools::source::v1::AliasContext* alias_context_;
}* GerritSourceContext_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* GitSourceContext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GitSourceContext_reflection_ = NULL;
const ::google::protobuf::Descriptor* RepoId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RepoId_reflection_ = NULL;
struct RepoIdOneofInstance {
  const ::google::devtools::source::v1::ProjectRepoId* project_repo_id_;
  ::google::protobuf::internal::ArenaStringPtr uid_;
}* RepoId_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* ProjectRepoId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProjectRepoId_reflection_ = NULL;
const ::google::protobuf::Descriptor* CloudWorkspaceId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloudWorkspaceId_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto() {
  protobuf_AddDesc_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "google/devtools/source/v1/source_context.proto");
  GOOGLE_CHECK(file != NULL);
  SourceContext_descriptor_ = file->message_type(0);
  static const int SourceContext_offsets_[5] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(SourceContext_default_oneof_instance_, cloud_repo_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(SourceContext_default_oneof_instance_, cloud_workspace_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(SourceContext_default_oneof_instance_, gerrit_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(SourceContext_default_oneof_instance_, git_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceContext, context_),
  };
  SourceContext_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SourceContext_descriptor_,
      SourceContext::internal_default_instance(),
      SourceContext_offsets_,
      -1,
      -1,
      -1,
      SourceContext_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceContext, _oneof_case_[0]),
      sizeof(SourceContext),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceContext, _internal_metadata_));
  ExtendedSourceContext_descriptor_ = file->message_type(1);
  static const int ExtendedSourceContext_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSourceContext, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSourceContext, labels_),
  };
  ExtendedSourceContext_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExtendedSourceContext_descriptor_,
      ExtendedSourceContext::internal_default_instance(),
      ExtendedSourceContext_offsets_,
      -1,
      -1,
      -1,
      sizeof(ExtendedSourceContext),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSourceContext, _internal_metadata_));
  ExtendedSourceContext_LabelsEntry_descriptor_ = ExtendedSourceContext_descriptor_->nested_type(0);
  AliasContext_descriptor_ = file->message_type(2);
  static const int AliasContext_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AliasContext, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AliasContext, name_),
  };
  AliasContext_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AliasContext_descriptor_,
      AliasContext::internal_default_instance(),
      AliasContext_offsets_,
      -1,
      -1,
      -1,
      sizeof(AliasContext),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AliasContext, _internal_metadata_));
  AliasContext_Kind_descriptor_ = AliasContext_descriptor_->enum_type(0);
  CloudRepoSourceContext_descriptor_ = file->message_type(3);
  static const int CloudRepoSourceContext_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudRepoSourceContext, repo_id_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CloudRepoSourceContext_default_oneof_instance_, revision_id_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CloudRepoSourceContext_default_oneof_instance_, alias_name_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CloudRepoSourceContext_default_oneof_instance_, alias_context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudRepoSourceContext, revision_),
  };
  CloudRepoSourceContext_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CloudRepoSourceContext_descriptor_,
      CloudRepoSourceContext::internal_default_instance(),
      CloudRepoSourceContext_offsets_,
      -1,
      -1,
      -1,
      CloudRepoSourceContext_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudRepoSourceContext, _oneof_case_[0]),
      sizeof(CloudRepoSourceContext),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudRepoSourceContext, _internal_metadata_));
  CloudWorkspaceSourceContext_descriptor_ = file->message_type(4);
  static const int CloudWorkspaceSourceContext_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudWorkspaceSourceContext, workspace_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudWorkspaceSourceContext, snapshot_id_),
  };
  CloudWorkspaceSourceContext_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CloudWorkspaceSourceContext_descriptor_,
      CloudWorkspaceSourceContext::internal_default_instance(),
      CloudWorkspaceSourceContext_offsets_,
      -1,
      -1,
      -1,
      sizeof(CloudWorkspaceSourceContext),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudWorkspaceSourceContext, _internal_metadata_));
  GerritSourceContext_descriptor_ = file->message_type(5);
  static const int GerritSourceContext_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GerritSourceContext, host_uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GerritSourceContext, gerrit_project_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(GerritSourceContext_default_oneof_instance_, revision_id_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(GerritSourceContext_default_oneof_instance_, alias_name_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(GerritSourceContext_default_oneof_instance_, alias_context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GerritSourceContext, revision_),
  };
  GerritSourceContext_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GerritSourceContext_descriptor_,
      GerritSourceContext::internal_default_instance(),
      GerritSourceContext_offsets_,
      -1,
      -1,
      -1,
      GerritSourceContext_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GerritSourceContext, _oneof_case_[0]),
      sizeof(GerritSourceContext),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GerritSourceContext, _internal_metadata_));
  GitSourceContext_descriptor_ = file->message_type(6);
  static const int GitSourceContext_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GitSourceContext, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GitSourceContext, revision_id_),
  };
  GitSourceContext_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GitSourceContext_descriptor_,
      GitSourceContext::internal_default_instance(),
      GitSourceContext_offsets_,
      -1,
      -1,
      -1,
      sizeof(GitSourceContext),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GitSourceContext, _internal_metadata_));
  RepoId_descriptor_ = file->message_type(7);
  static const int RepoId_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RepoId_default_oneof_instance_, project_repo_id_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RepoId_default_oneof_instance_, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepoId, id_),
  };
  RepoId_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RepoId_descriptor_,
      RepoId::internal_default_instance(),
      RepoId_offsets_,
      -1,
      -1,
      -1,
      RepoId_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepoId, _oneof_case_[0]),
      sizeof(RepoId),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepoId, _internal_metadata_));
  ProjectRepoId_descriptor_ = file->message_type(8);
  static const int ProjectRepoId_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectRepoId, project_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectRepoId, repo_name_),
  };
  ProjectRepoId_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProjectRepoId_descriptor_,
      ProjectRepoId::internal_default_instance(),
      ProjectRepoId_offsets_,
      -1,
      -1,
      -1,
      sizeof(ProjectRepoId),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectRepoId, _internal_metadata_));
  CloudWorkspaceId_descriptor_ = file->message_type(9);
  static const int CloudWorkspaceId_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudWorkspaceId, repo_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudWorkspaceId, name_),
  };
  CloudWorkspaceId_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CloudWorkspaceId_descriptor_,
      CloudWorkspaceId::internal_default_instance(),
      CloudWorkspaceId_offsets_,
      -1,
      -1,
      -1,
      sizeof(CloudWorkspaceId),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudWorkspaceId, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SourceContext_descriptor_, SourceContext::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExtendedSourceContext_descriptor_, ExtendedSourceContext::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ExtendedSourceContext_LabelsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                ExtendedSourceContext_LabelsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AliasContext_descriptor_, AliasContext::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CloudRepoSourceContext_descriptor_, CloudRepoSourceContext::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CloudWorkspaceSourceContext_descriptor_, CloudWorkspaceSourceContext::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GerritSourceContext_descriptor_, GerritSourceContext::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GitSourceContext_descriptor_, GitSourceContext::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RepoId_descriptor_, RepoId::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProjectRepoId_descriptor_, ProjectRepoId::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CloudWorkspaceId_descriptor_, CloudWorkspaceId::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto() {
  SourceContext_default_instance_.Shutdown();
  delete SourceContext_default_oneof_instance_;
  delete SourceContext_reflection_;
  ExtendedSourceContext_default_instance_.Shutdown();
  delete ExtendedSourceContext_reflection_;
  AliasContext_default_instance_.Shutdown();
  delete AliasContext_reflection_;
  CloudRepoSourceContext_default_instance_.Shutdown();
  delete CloudRepoSourceContext_default_oneof_instance_;
  delete CloudRepoSourceContext_reflection_;
  CloudWorkspaceSourceContext_default_instance_.Shutdown();
  delete CloudWorkspaceSourceContext_reflection_;
  GerritSourceContext_default_instance_.Shutdown();
  delete GerritSourceContext_default_oneof_instance_;
  delete GerritSourceContext_reflection_;
  GitSourceContext_default_instance_.Shutdown();
  delete GitSourceContext_reflection_;
  RepoId_default_instance_.Shutdown();
  delete RepoId_default_oneof_instance_;
  delete RepoId_reflection_;
  ProjectRepoId_default_instance_.Shutdown();
  delete ProjectRepoId_reflection_;
  CloudWorkspaceId_default_instance_.Shutdown();
  delete CloudWorkspaceId_reflection_;
}

void protobuf_InitDefaults_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::api::protobuf_InitDefaults_google_2fapi_2fannotations_2eproto();
  SourceContext_default_instance_.DefaultConstruct();
  SourceContext_default_oneof_instance_ = new SourceContextOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  ExtendedSourceContext_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  AliasContext_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CloudRepoSourceContext_default_instance_.DefaultConstruct();
  CloudRepoSourceContext_default_oneof_instance_ = new CloudRepoSourceContextOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  CloudWorkspaceSourceContext_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  GerritSourceContext_default_instance_.DefaultConstruct();
  GerritSourceContext_default_oneof_instance_ = new GerritSourceContextOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  GitSourceContext_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  RepoId_default_instance_.DefaultConstruct();
  RepoId_default_oneof_instance_ = new RepoIdOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  ProjectRepoId_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CloudWorkspaceId_default_instance_.DefaultConstruct();
  SourceContext_default_instance_.get_mutable()->InitAsDefaultInstance();
  ExtendedSourceContext_default_instance_.get_mutable()->InitAsDefaultInstance();
  AliasContext_default_instance_.get_mutable()->InitAsDefaultInstance();
  CloudRepoSourceContext_default_instance_.get_mutable()->InitAsDefaultInstance();
  CloudWorkspaceSourceContext_default_instance_.get_mutable()->InitAsDefaultInstance();
  GerritSourceContext_default_instance_.get_mutable()->InitAsDefaultInstance();
  GitSourceContext_default_instance_.get_mutable()->InitAsDefaultInstance();
  RepoId_default_instance_.get_mutable()->InitAsDefaultInstance();
  ProjectRepoId_default_instance_.get_mutable()->InitAsDefaultInstance();
  CloudWorkspaceId_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto_once_);
void protobuf_InitDefaults_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto_once_,
                 &protobuf_InitDefaults_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto_impl);
}
void protobuf_AddDesc_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n.google/devtools/source/v1/source_conte"
    "xt.proto\022\031google.devtools.source.v1\032\034goo"
    "gle/api/annotations.proto\"\264\002\n\rSourceCont"
    "ext\022G\n\ncloud_repo\030\001 \001(\01321.google.devtool"
    "s.source.v1.CloudRepoSourceContextH\000\022Q\n\017"
    "cloud_workspace\030\002 \001(\01326.google.devtools."
    "source.v1.CloudWorkspaceSourceContextH\000\022"
    "@\n\006gerrit\030\003 \001(\0132..google.devtools.source"
    ".v1.GerritSourceContextH\000\022:\n\003git\030\006 \001(\0132+"
    ".google.devtools.source.v1.GitSourceCont"
    "extH\000B\t\n\007context\"\317\001\n\025ExtendedSourceConte"
    "xt\0229\n\007context\030\001 \001(\0132(.google.devtools.so"
    "urce.v1.SourceContext\022L\n\006labels\030\002 \003(\0132<."
    "google.devtools.source.v1.ExtendedSource"
    "Context.LabelsEntry\032-\n\013LabelsEntry\022\013\n\003ke"
    "y\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\214\001\n\014AliasCont"
    "ext\022:\n\004kind\030\001 \001(\0162,.google.devtools.sour"
    "ce.v1.AliasContext.Kind\022\014\n\004name\030\002 \001(\t\"2\n"
    "\004Kind\022\007\n\003ANY\020\000\022\t\n\005FIXED\020\001\022\013\n\007MOVABLE\020\002\022\t"
    "\n\005OTHER\020\004\"\307\001\n\026CloudRepoSourceContext\0222\n\007"
    "repo_id\030\001 \001(\0132!.google.devtools.source.v"
    "1.RepoId\022\025\n\013revision_id\030\002 \001(\tH\000\022\024\n\nalias"
    "_name\030\003 \001(\tH\000\022@\n\ralias_context\030\004 \001(\0132\'.g"
    "oogle.devtools.source.v1.AliasContextH\000B"
    "\n\n\010revision\"u\n\033CloudWorkspaceSourceConte"
    "xt\022A\n\014workspace_id\030\001 \001(\0132+.google.devtoo"
    "ls.source.v1.CloudWorkspaceId\022\023\n\013snapsho"
    "t_id\030\002 \001(\t\"\272\001\n\023GerritSourceContext\022\020\n\010ho"
    "st_uri\030\001 \001(\t\022\026\n\016gerrit_project\030\002 \001(\t\022\025\n\013"
    "revision_id\030\003 \001(\tH\000\022\024\n\nalias_name\030\004 \001(\tH"
    "\000\022@\n\ralias_context\030\005 \001(\0132\'.google.devtoo"
    "ls.source.v1.AliasContextH\000B\n\n\010revision\""
    "4\n\020GitSourceContext\022\013\n\003url\030\001 \001(\t\022\023\n\013revi"
    "sion_id\030\002 \001(\t\"b\n\006RepoId\022C\n\017project_repo_"
    "id\030\001 \001(\0132(.google.devtools.source.v1.Pro"
    "jectRepoIdH\000\022\r\n\003uid\030\002 \001(\tH\000B\004\n\002id\"6\n\rPro"
    "jectRepoId\022\022\n\nproject_id\030\001 \001(\t\022\021\n\trepo_n"
    "ame\030\002 \001(\t\"T\n\020CloudWorkspaceId\0222\n\007repo_id"
    "\030\001 \001(\0132!.google.devtools.source.v1.RepoI"
    "d\022\014\n\004name\030\002 \001(\tBv\n\035com.google.devtools.s"
    "ource.v1B\022SourceContextProtoP\001Z\?google.g"
    "olang.org/genproto/googleapis/devtools/s"
    "ource/v1;sourceb\006proto3", 1703);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/devtools/source/v1/source_context.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_AddDesc_google_2fapi_2fannotations_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto_once_);
void protobuf_AddDesc_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto_once_,
                 &protobuf_AddDesc_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto {
  StaticDescriptorInitializer_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto() {
    protobuf_AddDesc_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto();
  }
} static_descriptor_initializer_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SourceContext::kCloudRepoFieldNumber;
const int SourceContext::kCloudWorkspaceFieldNumber;
const int SourceContext::kGerritFieldNumber;
const int SourceContext::kGitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SourceContext::SourceContext()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.devtools.source.v1.SourceContext)
}

void SourceContext::InitAsDefaultInstance() {
  SourceContext_default_oneof_instance_->cloud_repo_ = const_cast< ::google::devtools::source::v1::CloudRepoSourceContext*>(
      ::google::devtools::source::v1::CloudRepoSourceContext::internal_default_instance());
  SourceContext_default_oneof_instance_->cloud_workspace_ = const_cast< ::google::devtools::source::v1::CloudWorkspaceSourceContext*>(
      ::google::devtools::source::v1::CloudWorkspaceSourceContext::internal_default_instance());
  SourceContext_default_oneof_instance_->gerrit_ = const_cast< ::google::devtools::source::v1::GerritSourceContext*>(
      ::google::devtools::source::v1::GerritSourceContext::internal_default_instance());
  SourceContext_default_oneof_instance_->git_ = const_cast< ::google::devtools::source::v1::GitSourceContext*>(
      ::google::devtools::source::v1::GitSourceContext::internal_default_instance());
}

SourceContext::SourceContext(const SourceContext& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.devtools.source.v1.SourceContext)
}

void SourceContext::SharedCtor() {
  clear_has_context();
  _cached_size_ = 0;
}

SourceContext::~SourceContext() {
  // @@protoc_insertion_point(destructor:google.devtools.source.v1.SourceContext)
  SharedDtor();
}

void SourceContext::SharedDtor() {
  if (has_context()) {
    clear_context();
  }
}

void SourceContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SourceContext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SourceContext_descriptor_;
}

const SourceContext& SourceContext::default_instance() {
  protobuf_InitDefaults_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SourceContext> SourceContext_default_instance_;

SourceContext* SourceContext::New(::google::protobuf::Arena* arena) const {
  SourceContext* n = new SourceContext;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SourceContext::clear_context() {
// @@protoc_insertion_point(one_of_clear_start:google.devtools.source.v1.SourceContext)
  switch (context_case()) {
    case kCloudRepo: {
      delete context_.cloud_repo_;
      break;
    }
    case kCloudWorkspace: {
      delete context_.cloud_workspace_;
      break;
    }
    case kGerrit: {
      delete context_.gerrit_;
      break;
    }
    case kGit: {
      delete context_.git_;
      break;
    }
    case CONTEXT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTEXT_NOT_SET;
}


void SourceContext::Clear() {
// @@protoc_insertion_point(message_clear_start:google.devtools.source.v1.SourceContext)
  clear_context();
}

bool SourceContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.devtools.source.v1.SourceContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.devtools.source.v1.CloudRepoSourceContext cloud_repo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cloud_repo()));
        } else {
          goto handle_unusual;
        }
        goto after_git;
        break;
      }

      // optional .google.devtools.source.v1.CloudWorkspaceSourceContext cloud_workspace = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cloud_workspace()));
        } else {
          goto handle_unusual;
        }
        goto after_git;
        break;
      }

      // optional .google.devtools.source.v1.GerritSourceContext gerrit = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gerrit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_git;
        break;
      }

      // optional .google.devtools.source.v1.GitSourceContext git = 6;
      case 6: {
        if (tag == 50) {
         parse_git:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_git()));
        } else {
          goto handle_unusual;
        }
       after_git:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.devtools.source.v1.SourceContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.devtools.source.v1.SourceContext)
  return false;
#undef DO_
}

void SourceContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.devtools.source.v1.SourceContext)
  // optional .google.devtools.source.v1.CloudRepoSourceContext cloud_repo = 1;
  if (has_cloud_repo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *context_.cloud_repo_, output);
  }

  // optional .google.devtools.source.v1.CloudWorkspaceSourceContext cloud_workspace = 2;
  if (has_cloud_workspace()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *context_.cloud_workspace_, output);
  }

  // optional .google.devtools.source.v1.GerritSourceContext gerrit = 3;
  if (has_gerrit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *context_.gerrit_, output);
  }

  // optional .google.devtools.source.v1.GitSourceContext git = 6;
  if (has_git()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *context_.git_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.devtools.source.v1.SourceContext)
}

::google::protobuf::uint8* SourceContext::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.devtools.source.v1.SourceContext)
  // optional .google.devtools.source.v1.CloudRepoSourceContext cloud_repo = 1;
  if (has_cloud_repo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *context_.cloud_repo_, false, target);
  }

  // optional .google.devtools.source.v1.CloudWorkspaceSourceContext cloud_workspace = 2;
  if (has_cloud_workspace()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *context_.cloud_workspace_, false, target);
  }

  // optional .google.devtools.source.v1.GerritSourceContext gerrit = 3;
  if (has_gerrit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *context_.gerrit_, false, target);
  }

  // optional .google.devtools.source.v1.GitSourceContext git = 6;
  if (has_git()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *context_.git_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.devtools.source.v1.SourceContext)
  return target;
}

size_t SourceContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.devtools.source.v1.SourceContext)
  size_t total_size = 0;

  switch (context_case()) {
    // optional .google.devtools.source.v1.CloudRepoSourceContext cloud_repo = 1;
    case kCloudRepo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *context_.cloud_repo_);
      break;
    }
    // optional .google.devtools.source.v1.CloudWorkspaceSourceContext cloud_workspace = 2;
    case kCloudWorkspace: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *context_.cloud_workspace_);
      break;
    }
    // optional .google.devtools.source.v1.GerritSourceContext gerrit = 3;
    case kGerrit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *context_.gerrit_);
      break;
    }
    // optional .google.devtools.source.v1.GitSourceContext git = 6;
    case kGit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *context_.git_);
      break;
    }
    case CONTEXT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceContext::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.devtools.source.v1.SourceContext)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SourceContext* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SourceContext>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.devtools.source.v1.SourceContext)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.devtools.source.v1.SourceContext)
    UnsafeMergeFrom(*source);
  }
}

void SourceContext::MergeFrom(const SourceContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.devtools.source.v1.SourceContext)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SourceContext::UnsafeMergeFrom(const SourceContext& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.context_case()) {
    case kCloudRepo: {
      mutable_cloud_repo()->::google::devtools::source::v1::CloudRepoSourceContext::MergeFrom(from.cloud_repo());
      break;
    }
    case kCloudWorkspace: {
      mutable_cloud_workspace()->::google::devtools::source::v1::CloudWorkspaceSourceContext::MergeFrom(from.cloud_workspace());
      break;
    }
    case kGerrit: {
      mutable_gerrit()->::google::devtools::source::v1::GerritSourceContext::MergeFrom(from.gerrit());
      break;
    }
    case kGit: {
      mutable_git()->::google::devtools::source::v1::GitSourceContext::MergeFrom(from.git());
      break;
    }
    case CONTEXT_NOT_SET: {
      break;
    }
  }
}

void SourceContext::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.devtools.source.v1.SourceContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceContext::CopyFrom(const SourceContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.devtools.source.v1.SourceContext)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SourceContext::IsInitialized() const {

  return true;
}

void SourceContext::Swap(SourceContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SourceContext::InternalSwap(SourceContext* other) {
  std::swap(context_, other->context_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SourceContext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SourceContext_descriptor_;
  metadata.reflection = SourceContext_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SourceContext

// optional .google.devtools.source.v1.CloudRepoSourceContext cloud_repo = 1;
bool SourceContext::has_cloud_repo() const {
  return context_case() == kCloudRepo;
}
void SourceContext::set_has_cloud_repo() {
  _oneof_case_[0] = kCloudRepo;
}
void SourceContext::clear_cloud_repo() {
  if (has_cloud_repo()) {
    delete context_.cloud_repo_;
    clear_has_context();
  }
}
 const ::google::devtools::source::v1::CloudRepoSourceContext& SourceContext::cloud_repo() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.SourceContext.cloud_repo)
  return has_cloud_repo()
      ? *context_.cloud_repo_
      : ::google::devtools::source::v1::CloudRepoSourceContext::default_instance();
}
::google::devtools::source::v1::CloudRepoSourceContext* SourceContext::mutable_cloud_repo() {
  if (!has_cloud_repo()) {
    clear_context();
    set_has_cloud_repo();
    context_.cloud_repo_ = new ::google::devtools::source::v1::CloudRepoSourceContext;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.SourceContext.cloud_repo)
  return context_.cloud_repo_;
}
::google::devtools::source::v1::CloudRepoSourceContext* SourceContext::release_cloud_repo() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.SourceContext.cloud_repo)
  if (has_cloud_repo()) {
    clear_has_context();
    ::google::devtools::source::v1::CloudRepoSourceContext* temp = context_.cloud_repo_;
    context_.cloud_repo_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SourceContext::set_allocated_cloud_repo(::google::devtools::source::v1::CloudRepoSourceContext* cloud_repo) {
  clear_context();
  if (cloud_repo) {
    set_has_cloud_repo();
    context_.cloud_repo_ = cloud_repo;
  }
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.SourceContext.cloud_repo)
}

// optional .google.devtools.source.v1.CloudWorkspaceSourceContext cloud_workspace = 2;
bool SourceContext::has_cloud_workspace() const {
  return context_case() == kCloudWorkspace;
}
void SourceContext::set_has_cloud_workspace() {
  _oneof_case_[0] = kCloudWorkspace;
}
void SourceContext::clear_cloud_workspace() {
  if (has_cloud_workspace()) {
    delete context_.cloud_workspace_;
    clear_has_context();
  }
}
 const ::google::devtools::source::v1::CloudWorkspaceSourceContext& SourceContext::cloud_workspace() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.SourceContext.cloud_workspace)
  return has_cloud_workspace()
      ? *context_.cloud_workspace_
      : ::google::devtools::source::v1::CloudWorkspaceSourceContext::default_instance();
}
::google::devtools::source::v1::CloudWorkspaceSourceContext* SourceContext::mutable_cloud_workspace() {
  if (!has_cloud_workspace()) {
    clear_context();
    set_has_cloud_workspace();
    context_.cloud_workspace_ = new ::google::devtools::source::v1::CloudWorkspaceSourceContext;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.SourceContext.cloud_workspace)
  return context_.cloud_workspace_;
}
::google::devtools::source::v1::CloudWorkspaceSourceContext* SourceContext::release_cloud_workspace() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.SourceContext.cloud_workspace)
  if (has_cloud_workspace()) {
    clear_has_context();
    ::google::devtools::source::v1::CloudWorkspaceSourceContext* temp = context_.cloud_workspace_;
    context_.cloud_workspace_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SourceContext::set_allocated_cloud_workspace(::google::devtools::source::v1::CloudWorkspaceSourceContext* cloud_workspace) {
  clear_context();
  if (cloud_workspace) {
    set_has_cloud_workspace();
    context_.cloud_workspace_ = cloud_workspace;
  }
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.SourceContext.cloud_workspace)
}

// optional .google.devtools.source.v1.GerritSourceContext gerrit = 3;
bool SourceContext::has_gerrit() const {
  return context_case() == kGerrit;
}
void SourceContext::set_has_gerrit() {
  _oneof_case_[0] = kGerrit;
}
void SourceContext::clear_gerrit() {
  if (has_gerrit()) {
    delete context_.gerrit_;
    clear_has_context();
  }
}
 const ::google::devtools::source::v1::GerritSourceContext& SourceContext::gerrit() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.SourceContext.gerrit)
  return has_gerrit()
      ? *context_.gerrit_
      : ::google::devtools::source::v1::GerritSourceContext::default_instance();
}
::google::devtools::source::v1::GerritSourceContext* SourceContext::mutable_gerrit() {
  if (!has_gerrit()) {
    clear_context();
    set_has_gerrit();
    context_.gerrit_ = new ::google::devtools::source::v1::GerritSourceContext;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.SourceContext.gerrit)
  return context_.gerrit_;
}
::google::devtools::source::v1::GerritSourceContext* SourceContext::release_gerrit() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.SourceContext.gerrit)
  if (has_gerrit()) {
    clear_has_context();
    ::google::devtools::source::v1::GerritSourceContext* temp = context_.gerrit_;
    context_.gerrit_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SourceContext::set_allocated_gerrit(::google::devtools::source::v1::GerritSourceContext* gerrit) {
  clear_context();
  if (gerrit) {
    set_has_gerrit();
    context_.gerrit_ = gerrit;
  }
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.SourceContext.gerrit)
}

// optional .google.devtools.source.v1.GitSourceContext git = 6;
bool SourceContext::has_git() const {
  return context_case() == kGit;
}
void SourceContext::set_has_git() {
  _oneof_case_[0] = kGit;
}
void SourceContext::clear_git() {
  if (has_git()) {
    delete context_.git_;
    clear_has_context();
  }
}
 const ::google::devtools::source::v1::GitSourceContext& SourceContext::git() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.SourceContext.git)
  return has_git()
      ? *context_.git_
      : ::google::devtools::source::v1::GitSourceContext::default_instance();
}
::google::devtools::source::v1::GitSourceContext* SourceContext::mutable_git() {
  if (!has_git()) {
    clear_context();
    set_has_git();
    context_.git_ = new ::google::devtools::source::v1::GitSourceContext;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.SourceContext.git)
  return context_.git_;
}
::google::devtools::source::v1::GitSourceContext* SourceContext::release_git() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.SourceContext.git)
  if (has_git()) {
    clear_has_context();
    ::google::devtools::source::v1::GitSourceContext* temp = context_.git_;
    context_.git_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SourceContext::set_allocated_git(::google::devtools::source::v1::GitSourceContext* git) {
  clear_context();
  if (git) {
    set_has_git();
    context_.git_ = git;
  }
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.SourceContext.git)
}

bool SourceContext::has_context() const {
  return context_case() != CONTEXT_NOT_SET;
}
void SourceContext::clear_has_context() {
  _oneof_case_[0] = CONTEXT_NOT_SET;
}
SourceContext::ContextCase SourceContext::context_case() const {
  return SourceContext::ContextCase(_oneof_case_[0]);
}
inline const SourceContext* SourceContext::internal_default_instance() {
  return &SourceContext_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExtendedSourceContext::kContextFieldNumber;
const int ExtendedSourceContext::kLabelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExtendedSourceContext::ExtendedSourceContext()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.devtools.source.v1.ExtendedSourceContext)
}

void ExtendedSourceContext::InitAsDefaultInstance() {
  context_ = const_cast< ::google::devtools::source::v1::SourceContext*>(
      ::google::devtools::source::v1::SourceContext::internal_default_instance());
}

ExtendedSourceContext::ExtendedSourceContext(const ExtendedSourceContext& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.devtools.source.v1.ExtendedSourceContext)
}

void ExtendedSourceContext::SharedCtor() {
  labels_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  labels_.SetEntryDescriptor(
      &::google::devtools::source::v1::ExtendedSourceContext_LabelsEntry_descriptor_);
  context_ = NULL;
  _cached_size_ = 0;
}

ExtendedSourceContext::~ExtendedSourceContext() {
  // @@protoc_insertion_point(destructor:google.devtools.source.v1.ExtendedSourceContext)
  SharedDtor();
}

void ExtendedSourceContext::SharedDtor() {
  if (this != &ExtendedSourceContext_default_instance_.get()) {
    delete context_;
  }
}

void ExtendedSourceContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtendedSourceContext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtendedSourceContext_descriptor_;
}

const ExtendedSourceContext& ExtendedSourceContext::default_instance() {
  protobuf_InitDefaults_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ExtendedSourceContext> ExtendedSourceContext_default_instance_;

ExtendedSourceContext* ExtendedSourceContext::New(::google::protobuf::Arena* arena) const {
  ExtendedSourceContext* n = new ExtendedSourceContext;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExtendedSourceContext::Clear() {
// @@protoc_insertion_point(message_clear_start:google.devtools.source.v1.ExtendedSourceContext)
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
  labels_.Clear();
}

bool ExtendedSourceContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.devtools.source.v1.ExtendedSourceContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.devtools.source.v1.SourceContext context = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_labels;
        break;
      }

      // map<string, string> labels = 2;
      case 2: {
        if (tag == 18) {
         parse_labels:
          DO_(input->IncrementRecursionDepth());
         parse_loop_labels:
          ExtendedSourceContext_LabelsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.devtools.source.v1.ExtendedSourceContext.LabelsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.devtools.source.v1.ExtendedSourceContext.LabelsEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_labels;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.devtools.source.v1.ExtendedSourceContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.devtools.source.v1.ExtendedSourceContext)
  return false;
#undef DO_
}

void ExtendedSourceContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.devtools.source.v1.ExtendedSourceContext)
  // optional .google.devtools.source.v1.SourceContext context = 1;
  if (this->has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->context_, output);
  }

  // map<string, string> labels = 2;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.devtools.source.v1.ExtendedSourceContext.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.devtools.source.v1.ExtendedSourceContext.LabelsEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ExtendedSourceContext_LabelsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ExtendedSourceContext_LabelsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:google.devtools.source.v1.ExtendedSourceContext)
}

::google::protobuf::uint8* ExtendedSourceContext::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.devtools.source.v1.ExtendedSourceContext)
  // optional .google.devtools.source.v1.SourceContext context = 1;
  if (this->has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->context_, false, target);
  }

  // map<string, string> labels = 2;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.devtools.source.v1.ExtendedSourceContext.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.devtools.source.v1.ExtendedSourceContext.LabelsEntry.value");
      }
    };

    if (deterministic &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ExtendedSourceContext_LabelsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ExtendedSourceContext_LabelsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.devtools.source.v1.ExtendedSourceContext)
  return target;
}

size_t ExtendedSourceContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.devtools.source.v1.ExtendedSourceContext)
  size_t total_size = 0;

  // optional .google.devtools.source.v1.SourceContext context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->context_);
  }

  // map<string, string> labels = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  {
    ::google::protobuf::scoped_ptr<ExtendedSourceContext_LabelsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->labels().begin();
        it != this->labels().end(); ++it) {
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtendedSourceContext::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.devtools.source.v1.ExtendedSourceContext)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ExtendedSourceContext* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExtendedSourceContext>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.devtools.source.v1.ExtendedSourceContext)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.devtools.source.v1.ExtendedSourceContext)
    UnsafeMergeFrom(*source);
  }
}

void ExtendedSourceContext::MergeFrom(const ExtendedSourceContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.devtools.source.v1.ExtendedSourceContext)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ExtendedSourceContext::UnsafeMergeFrom(const ExtendedSourceContext& from) {
  GOOGLE_DCHECK(&from != this);
  labels_.MergeFrom(from.labels_);
  if (from.has_context()) {
    mutable_context()->::google::devtools::source::v1::SourceContext::MergeFrom(from.context());
  }
}

void ExtendedSourceContext::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.devtools.source.v1.ExtendedSourceContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtendedSourceContext::CopyFrom(const ExtendedSourceContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.devtools.source.v1.ExtendedSourceContext)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ExtendedSourceContext::IsInitialized() const {

  return true;
}

void ExtendedSourceContext::Swap(ExtendedSourceContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExtendedSourceContext::InternalSwap(ExtendedSourceContext* other) {
  std::swap(context_, other->context_);
  labels_.Swap(&other->labels_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExtendedSourceContext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExtendedSourceContext_descriptor_;
  metadata.reflection = ExtendedSourceContext_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExtendedSourceContext

// optional .google.devtools.source.v1.SourceContext context = 1;
bool ExtendedSourceContext::has_context() const {
  return this != internal_default_instance() && context_ != NULL;
}
void ExtendedSourceContext::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}
const ::google::devtools::source::v1::SourceContext& ExtendedSourceContext::context() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.ExtendedSourceContext.context)
  return context_ != NULL ? *context_
                         : *::google::devtools::source::v1::SourceContext::internal_default_instance();
}
::google::devtools::source::v1::SourceContext* ExtendedSourceContext::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::google::devtools::source::v1::SourceContext;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.ExtendedSourceContext.context)
  return context_;
}
::google::devtools::source::v1::SourceContext* ExtendedSourceContext::release_context() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.ExtendedSourceContext.context)
  
  ::google::devtools::source::v1::SourceContext* temp = context_;
  context_ = NULL;
  return temp;
}
void ExtendedSourceContext::set_allocated_context(::google::devtools::source::v1::SourceContext* context) {
  delete context_;
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.ExtendedSourceContext.context)
}

// map<string, string> labels = 2;
int ExtendedSourceContext::labels_size() const {
  return labels_.size();
}
void ExtendedSourceContext::clear_labels() {
  labels_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
ExtendedSourceContext::labels() const {
  // @@protoc_insertion_point(field_map:google.devtools.source.v1.ExtendedSourceContext.labels)
  return labels_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
ExtendedSourceContext::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.devtools.source.v1.ExtendedSourceContext.labels)
  return labels_.MutableMap();
}

inline const ExtendedSourceContext* ExtendedSourceContext::internal_default_instance() {
  return &ExtendedSourceContext_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* AliasContext_Kind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AliasContext_Kind_descriptor_;
}
bool AliasContext_Kind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AliasContext_Kind AliasContext::ANY;
const AliasContext_Kind AliasContext::FIXED;
const AliasContext_Kind AliasContext::MOVABLE;
const AliasContext_Kind AliasContext::OTHER;
const AliasContext_Kind AliasContext::Kind_MIN;
const AliasContext_Kind AliasContext::Kind_MAX;
const int AliasContext::Kind_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AliasContext::kKindFieldNumber;
const int AliasContext::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AliasContext::AliasContext()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.devtools.source.v1.AliasContext)
}

void AliasContext::InitAsDefaultInstance() {
}

AliasContext::AliasContext(const AliasContext& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.devtools.source.v1.AliasContext)
}

void AliasContext::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kind_ = 0;
  _cached_size_ = 0;
}

AliasContext::~AliasContext() {
  // @@protoc_insertion_point(destructor:google.devtools.source.v1.AliasContext)
  SharedDtor();
}

void AliasContext::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AliasContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AliasContext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AliasContext_descriptor_;
}

const AliasContext& AliasContext::default_instance() {
  protobuf_InitDefaults_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AliasContext> AliasContext_default_instance_;

AliasContext* AliasContext::New(::google::protobuf::Arena* arena) const {
  AliasContext* n = new AliasContext;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AliasContext::Clear() {
// @@protoc_insertion_point(message_clear_start:google.devtools.source.v1.AliasContext)
  kind_ = 0;
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AliasContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.devtools.source.v1.AliasContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.devtools.source.v1.AliasContext.Kind kind = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_kind(static_cast< ::google::devtools::source::v1::AliasContext_Kind >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.devtools.source.v1.AliasContext.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.devtools.source.v1.AliasContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.devtools.source.v1.AliasContext)
  return false;
#undef DO_
}

void AliasContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.devtools.source.v1.AliasContext)
  // optional .google.devtools.source.v1.AliasContext.Kind kind = 1;
  if (this->kind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->kind(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.source.v1.AliasContext.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.devtools.source.v1.AliasContext)
}

::google::protobuf::uint8* AliasContext::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.devtools.source.v1.AliasContext)
  // optional .google.devtools.source.v1.AliasContext.Kind kind = 1;
  if (this->kind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->kind(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.source.v1.AliasContext.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.devtools.source.v1.AliasContext)
  return target;
}

size_t AliasContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.devtools.source.v1.AliasContext)
  size_t total_size = 0;

  // optional .google.devtools.source.v1.AliasContext.Kind kind = 1;
  if (this->kind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AliasContext::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.devtools.source.v1.AliasContext)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AliasContext* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AliasContext>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.devtools.source.v1.AliasContext)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.devtools.source.v1.AliasContext)
    UnsafeMergeFrom(*source);
  }
}

void AliasContext::MergeFrom(const AliasContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.devtools.source.v1.AliasContext)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AliasContext::UnsafeMergeFrom(const AliasContext& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.kind() != 0) {
    set_kind(from.kind());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void AliasContext::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.devtools.source.v1.AliasContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AliasContext::CopyFrom(const AliasContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.devtools.source.v1.AliasContext)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AliasContext::IsInitialized() const {

  return true;
}

void AliasContext::Swap(AliasContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AliasContext::InternalSwap(AliasContext* other) {
  std::swap(kind_, other->kind_);
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AliasContext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AliasContext_descriptor_;
  metadata.reflection = AliasContext_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AliasContext

// optional .google.devtools.source.v1.AliasContext.Kind kind = 1;
void AliasContext::clear_kind() {
  kind_ = 0;
}
::google::devtools::source::v1::AliasContext_Kind AliasContext::kind() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.AliasContext.kind)
  return static_cast< ::google::devtools::source::v1::AliasContext_Kind >(kind_);
}
void AliasContext::set_kind(::google::devtools::source::v1::AliasContext_Kind value) {
  
  kind_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.AliasContext.kind)
}

// optional string name = 2;
void AliasContext::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AliasContext::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.AliasContext.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AliasContext::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.AliasContext.name)
}
void AliasContext::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.source.v1.AliasContext.name)
}
void AliasContext::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.source.v1.AliasContext.name)
}
::std::string* AliasContext::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.AliasContext.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AliasContext::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.AliasContext.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AliasContext::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.AliasContext.name)
}

inline const AliasContext* AliasContext::internal_default_instance() {
  return &AliasContext_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloudRepoSourceContext::kRepoIdFieldNumber;
const int CloudRepoSourceContext::kRevisionIdFieldNumber;
const int CloudRepoSourceContext::kAliasNameFieldNumber;
const int CloudRepoSourceContext::kAliasContextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloudRepoSourceContext::CloudRepoSourceContext()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.devtools.source.v1.CloudRepoSourceContext)
}

void CloudRepoSourceContext::InitAsDefaultInstance() {
  repo_id_ = const_cast< ::google::devtools::source::v1::RepoId*>(
      ::google::devtools::source::v1::RepoId::internal_default_instance());
  CloudRepoSourceContext_default_oneof_instance_->revision_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  CloudRepoSourceContext_default_oneof_instance_->alias_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  CloudRepoSourceContext_default_oneof_instance_->alias_context_ = const_cast< ::google::devtools::source::v1::AliasContext*>(
      ::google::devtools::source::v1::AliasContext::internal_default_instance());
}

CloudRepoSourceContext::CloudRepoSourceContext(const CloudRepoSourceContext& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.devtools.source.v1.CloudRepoSourceContext)
}

void CloudRepoSourceContext::SharedCtor() {
  repo_id_ = NULL;
  clear_has_revision();
  _cached_size_ = 0;
}

CloudRepoSourceContext::~CloudRepoSourceContext() {
  // @@protoc_insertion_point(destructor:google.devtools.source.v1.CloudRepoSourceContext)
  SharedDtor();
}

void CloudRepoSourceContext::SharedDtor() {
  if (has_revision()) {
    clear_revision();
  }
  if (this != &CloudRepoSourceContext_default_instance_.get()) {
    delete repo_id_;
  }
}

void CloudRepoSourceContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloudRepoSourceContext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloudRepoSourceContext_descriptor_;
}

const CloudRepoSourceContext& CloudRepoSourceContext::default_instance() {
  protobuf_InitDefaults_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CloudRepoSourceContext> CloudRepoSourceContext_default_instance_;

CloudRepoSourceContext* CloudRepoSourceContext::New(::google::protobuf::Arena* arena) const {
  CloudRepoSourceContext* n = new CloudRepoSourceContext;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CloudRepoSourceContext::clear_revision() {
// @@protoc_insertion_point(one_of_clear_start:google.devtools.source.v1.CloudRepoSourceContext)
  switch (revision_case()) {
    case kRevisionId: {
      revision_.revision_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kAliasName: {
      revision_.alias_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kAliasContext: {
      delete revision_.alias_context_;
      break;
    }
    case REVISION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REVISION_NOT_SET;
}


void CloudRepoSourceContext::Clear() {
// @@protoc_insertion_point(message_clear_start:google.devtools.source.v1.CloudRepoSourceContext)
  if (GetArenaNoVirtual() == NULL && repo_id_ != NULL) delete repo_id_;
  repo_id_ = NULL;
  clear_revision();
}

bool CloudRepoSourceContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.devtools.source.v1.CloudRepoSourceContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.devtools.source.v1.RepoId repo_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_repo_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_revision_id;
        break;
      }

      // optional string revision_id = 2;
      case 2: {
        if (tag == 18) {
         parse_revision_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_revision_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->revision_id().data(), this->revision_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.devtools.source.v1.CloudRepoSourceContext.revision_id"));
        } else {
          goto handle_unusual;
        }
        goto after_alias_context;
        break;
      }

      // optional string alias_name = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alias_name().data(), this->alias_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.devtools.source.v1.CloudRepoSourceContext.alias_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_alias_context;
        break;
      }

      // optional .google.devtools.source.v1.AliasContext alias_context = 4;
      case 4: {
        if (tag == 34) {
         parse_alias_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alias_context()));
        } else {
          goto handle_unusual;
        }
       after_alias_context:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.devtools.source.v1.CloudRepoSourceContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.devtools.source.v1.CloudRepoSourceContext)
  return false;
#undef DO_
}

void CloudRepoSourceContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.devtools.source.v1.CloudRepoSourceContext)
  // optional .google.devtools.source.v1.RepoId repo_id = 1;
  if (this->has_repo_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->repo_id_, output);
  }

  // optional string revision_id = 2;
  if (has_revision_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->revision_id().data(), this->revision_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.source.v1.CloudRepoSourceContext.revision_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->revision_id(), output);
  }

  // optional string alias_name = 3;
  if (has_alias_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alias_name().data(), this->alias_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.source.v1.CloudRepoSourceContext.alias_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->alias_name(), output);
  }

  // optional .google.devtools.source.v1.AliasContext alias_context = 4;
  if (has_alias_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *revision_.alias_context_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.devtools.source.v1.CloudRepoSourceContext)
}

::google::protobuf::uint8* CloudRepoSourceContext::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.devtools.source.v1.CloudRepoSourceContext)
  // optional .google.devtools.source.v1.RepoId repo_id = 1;
  if (this->has_repo_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->repo_id_, false, target);
  }

  // optional string revision_id = 2;
  if (has_revision_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->revision_id().data(), this->revision_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.source.v1.CloudRepoSourceContext.revision_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->revision_id(), target);
  }

  // optional string alias_name = 3;
  if (has_alias_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alias_name().data(), this->alias_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.source.v1.CloudRepoSourceContext.alias_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->alias_name(), target);
  }

  // optional .google.devtools.source.v1.AliasContext alias_context = 4;
  if (has_alias_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *revision_.alias_context_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.devtools.source.v1.CloudRepoSourceContext)
  return target;
}

size_t CloudRepoSourceContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.devtools.source.v1.CloudRepoSourceContext)
  size_t total_size = 0;

  // optional .google.devtools.source.v1.RepoId repo_id = 1;
  if (this->has_repo_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->repo_id_);
  }

  switch (revision_case()) {
    // optional string revision_id = 2;
    case kRevisionId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->revision_id());
      break;
    }
    // optional string alias_name = 3;
    case kAliasName: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alias_name());
      break;
    }
    // optional .google.devtools.source.v1.AliasContext alias_context = 4;
    case kAliasContext: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *revision_.alias_context_);
      break;
    }
    case REVISION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloudRepoSourceContext::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.devtools.source.v1.CloudRepoSourceContext)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CloudRepoSourceContext* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CloudRepoSourceContext>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.devtools.source.v1.CloudRepoSourceContext)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.devtools.source.v1.CloudRepoSourceContext)
    UnsafeMergeFrom(*source);
  }
}

void CloudRepoSourceContext::MergeFrom(const CloudRepoSourceContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.devtools.source.v1.CloudRepoSourceContext)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CloudRepoSourceContext::UnsafeMergeFrom(const CloudRepoSourceContext& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.revision_case()) {
    case kRevisionId: {
      set_revision_id(from.revision_id());
      break;
    }
    case kAliasName: {
      set_alias_name(from.alias_name());
      break;
    }
    case kAliasContext: {
      mutable_alias_context()->::google::devtools::source::v1::AliasContext::MergeFrom(from.alias_context());
      break;
    }
    case REVISION_NOT_SET: {
      break;
    }
  }
  if (from.has_repo_id()) {
    mutable_repo_id()->::google::devtools::source::v1::RepoId::MergeFrom(from.repo_id());
  }
}

void CloudRepoSourceContext::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.devtools.source.v1.CloudRepoSourceContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudRepoSourceContext::CopyFrom(const CloudRepoSourceContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.devtools.source.v1.CloudRepoSourceContext)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CloudRepoSourceContext::IsInitialized() const {

  return true;
}

void CloudRepoSourceContext::Swap(CloudRepoSourceContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloudRepoSourceContext::InternalSwap(CloudRepoSourceContext* other) {
  std::swap(repo_id_, other->repo_id_);
  std::swap(revision_, other->revision_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloudRepoSourceContext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloudRepoSourceContext_descriptor_;
  metadata.reflection = CloudRepoSourceContext_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CloudRepoSourceContext

// optional .google.devtools.source.v1.RepoId repo_id = 1;
bool CloudRepoSourceContext::has_repo_id() const {
  return this != internal_default_instance() && repo_id_ != NULL;
}
void CloudRepoSourceContext::clear_repo_id() {
  if (GetArenaNoVirtual() == NULL && repo_id_ != NULL) delete repo_id_;
  repo_id_ = NULL;
}
const ::google::devtools::source::v1::RepoId& CloudRepoSourceContext::repo_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.CloudRepoSourceContext.repo_id)
  return repo_id_ != NULL ? *repo_id_
                         : *::google::devtools::source::v1::RepoId::internal_default_instance();
}
::google::devtools::source::v1::RepoId* CloudRepoSourceContext::mutable_repo_id() {
  
  if (repo_id_ == NULL) {
    repo_id_ = new ::google::devtools::source::v1::RepoId;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.CloudRepoSourceContext.repo_id)
  return repo_id_;
}
::google::devtools::source::v1::RepoId* CloudRepoSourceContext::release_repo_id() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.CloudRepoSourceContext.repo_id)
  
  ::google::devtools::source::v1::RepoId* temp = repo_id_;
  repo_id_ = NULL;
  return temp;
}
void CloudRepoSourceContext::set_allocated_repo_id(::google::devtools::source::v1::RepoId* repo_id) {
  delete repo_id_;
  repo_id_ = repo_id;
  if (repo_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.CloudRepoSourceContext.repo_id)
}

// optional string revision_id = 2;
bool CloudRepoSourceContext::has_revision_id() const {
  return revision_case() == kRevisionId;
}
void CloudRepoSourceContext::set_has_revision_id() {
  _oneof_case_[0] = kRevisionId;
}
void CloudRepoSourceContext::clear_revision_id() {
  if (has_revision_id()) {
    revision_.revision_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_revision();
  }
}
const ::std::string& CloudRepoSourceContext::revision_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.CloudRepoSourceContext.revision_id)
  if (has_revision_id()) {
    return revision_.revision_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void CloudRepoSourceContext::set_revision_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.CloudRepoSourceContext.revision_id)
  if (!has_revision_id()) {
    clear_revision();
    set_has_revision_id();
    revision_.revision_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  revision_.revision_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.CloudRepoSourceContext.revision_id)
}
void CloudRepoSourceContext::set_revision_id(const char* value) {
  if (!has_revision_id()) {
    clear_revision();
    set_has_revision_id();
    revision_.revision_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  revision_.revision_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.source.v1.CloudRepoSourceContext.revision_id)
}
void CloudRepoSourceContext::set_revision_id(const char* value, size_t size) {
  if (!has_revision_id()) {
    clear_revision();
    set_has_revision_id();
    revision_.revision_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  revision_.revision_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.source.v1.CloudRepoSourceContext.revision_id)
}
::std::string* CloudRepoSourceContext::mutable_revision_id() {
  if (!has_revision_id()) {
    clear_revision();
    set_has_revision_id();
    revision_.revision_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.CloudRepoSourceContext.revision_id)
  return revision_.revision_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CloudRepoSourceContext::release_revision_id() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.CloudRepoSourceContext.revision_id)
  if (has_revision_id()) {
    clear_has_revision();
    return revision_.revision_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void CloudRepoSourceContext::set_allocated_revision_id(::std::string* revision_id) {
  if (!has_revision_id()) {
    revision_.revision_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_revision();
  if (revision_id != NULL) {
    set_has_revision_id();
    revision_.revision_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        revision_id);
  }
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.CloudRepoSourceContext.revision_id)
}

// optional string alias_name = 3;
bool CloudRepoSourceContext::has_alias_name() const {
  return revision_case() == kAliasName;
}
void CloudRepoSourceContext::set_has_alias_name() {
  _oneof_case_[0] = kAliasName;
}
void CloudRepoSourceContext::clear_alias_name() {
  if (has_alias_name()) {
    revision_.alias_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_revision();
  }
}
const ::std::string& CloudRepoSourceContext::alias_name() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.CloudRepoSourceContext.alias_name)
  if (has_alias_name()) {
    return revision_.alias_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void CloudRepoSourceContext::set_alias_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.CloudRepoSourceContext.alias_name)
  if (!has_alias_name()) {
    clear_revision();
    set_has_alias_name();
    revision_.alias_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  revision_.alias_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.CloudRepoSourceContext.alias_name)
}
void CloudRepoSourceContext::set_alias_name(const char* value) {
  if (!has_alias_name()) {
    clear_revision();
    set_has_alias_name();
    revision_.alias_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  revision_.alias_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.source.v1.CloudRepoSourceContext.alias_name)
}
void CloudRepoSourceContext::set_alias_name(const char* value, size_t size) {
  if (!has_alias_name()) {
    clear_revision();
    set_has_alias_name();
    revision_.alias_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  revision_.alias_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.source.v1.CloudRepoSourceContext.alias_name)
}
::std::string* CloudRepoSourceContext::mutable_alias_name() {
  if (!has_alias_name()) {
    clear_revision();
    set_has_alias_name();
    revision_.alias_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.CloudRepoSourceContext.alias_name)
  return revision_.alias_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CloudRepoSourceContext::release_alias_name() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.CloudRepoSourceContext.alias_name)
  if (has_alias_name()) {
    clear_has_revision();
    return revision_.alias_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void CloudRepoSourceContext::set_allocated_alias_name(::std::string* alias_name) {
  if (!has_alias_name()) {
    revision_.alias_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_revision();
  if (alias_name != NULL) {
    set_has_alias_name();
    revision_.alias_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        alias_name);
  }
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.CloudRepoSourceContext.alias_name)
}

// optional .google.devtools.source.v1.AliasContext alias_context = 4;
bool CloudRepoSourceContext::has_alias_context() const {
  return revision_case() == kAliasContext;
}
void CloudRepoSourceContext::set_has_alias_context() {
  _oneof_case_[0] = kAliasContext;
}
void CloudRepoSourceContext::clear_alias_context() {
  if (has_alias_context()) {
    delete revision_.alias_context_;
    clear_has_revision();
  }
}
 const ::google::devtools::source::v1::AliasContext& CloudRepoSourceContext::alias_context() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.CloudRepoSourceContext.alias_context)
  return has_alias_context()
      ? *revision_.alias_context_
      : ::google::devtools::source::v1::AliasContext::default_instance();
}
::google::devtools::source::v1::AliasContext* CloudRepoSourceContext::mutable_alias_context() {
  if (!has_alias_context()) {
    clear_revision();
    set_has_alias_context();
    revision_.alias_context_ = new ::google::devtools::source::v1::AliasContext;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.CloudRepoSourceContext.alias_context)
  return revision_.alias_context_;
}
::google::devtools::source::v1::AliasContext* CloudRepoSourceContext::release_alias_context() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.CloudRepoSourceContext.alias_context)
  if (has_alias_context()) {
    clear_has_revision();
    ::google::devtools::source::v1::AliasContext* temp = revision_.alias_context_;
    revision_.alias_context_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void CloudRepoSourceContext::set_allocated_alias_context(::google::devtools::source::v1::AliasContext* alias_context) {
  clear_revision();
  if (alias_context) {
    set_has_alias_context();
    revision_.alias_context_ = alias_context;
  }
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.CloudRepoSourceContext.alias_context)
}

bool CloudRepoSourceContext::has_revision() const {
  return revision_case() != REVISION_NOT_SET;
}
void CloudRepoSourceContext::clear_has_revision() {
  _oneof_case_[0] = REVISION_NOT_SET;
}
CloudRepoSourceContext::RevisionCase CloudRepoSourceContext::revision_case() const {
  return CloudRepoSourceContext::RevisionCase(_oneof_case_[0]);
}
inline const CloudRepoSourceContext* CloudRepoSourceContext::internal_default_instance() {
  return &CloudRepoSourceContext_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloudWorkspaceSourceContext::kWorkspaceIdFieldNumber;
const int CloudWorkspaceSourceContext::kSnapshotIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloudWorkspaceSourceContext::CloudWorkspaceSourceContext()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.devtools.source.v1.CloudWorkspaceSourceContext)
}

void CloudWorkspaceSourceContext::InitAsDefaultInstance() {
  workspace_id_ = const_cast< ::google::devtools::source::v1::CloudWorkspaceId*>(
      ::google::devtools::source::v1::CloudWorkspaceId::internal_default_instance());
}

CloudWorkspaceSourceContext::CloudWorkspaceSourceContext(const CloudWorkspaceSourceContext& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.devtools.source.v1.CloudWorkspaceSourceContext)
}

void CloudWorkspaceSourceContext::SharedCtor() {
  snapshot_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  workspace_id_ = NULL;
  _cached_size_ = 0;
}

CloudWorkspaceSourceContext::~CloudWorkspaceSourceContext() {
  // @@protoc_insertion_point(destructor:google.devtools.source.v1.CloudWorkspaceSourceContext)
  SharedDtor();
}

void CloudWorkspaceSourceContext::SharedDtor() {
  snapshot_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &CloudWorkspaceSourceContext_default_instance_.get()) {
    delete workspace_id_;
  }
}

void CloudWorkspaceSourceContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloudWorkspaceSourceContext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloudWorkspaceSourceContext_descriptor_;
}

const CloudWorkspaceSourceContext& CloudWorkspaceSourceContext::default_instance() {
  protobuf_InitDefaults_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CloudWorkspaceSourceContext> CloudWorkspaceSourceContext_default_instance_;

CloudWorkspaceSourceContext* CloudWorkspaceSourceContext::New(::google::protobuf::Arena* arena) const {
  CloudWorkspaceSourceContext* n = new CloudWorkspaceSourceContext;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CloudWorkspaceSourceContext::Clear() {
// @@protoc_insertion_point(message_clear_start:google.devtools.source.v1.CloudWorkspaceSourceContext)
  if (GetArenaNoVirtual() == NULL && workspace_id_ != NULL) delete workspace_id_;
  workspace_id_ = NULL;
  snapshot_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CloudWorkspaceSourceContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.devtools.source.v1.CloudWorkspaceSourceContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.devtools.source.v1.CloudWorkspaceId workspace_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_workspace_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_snapshot_id;
        break;
      }

      // optional string snapshot_id = 2;
      case 2: {
        if (tag == 18) {
         parse_snapshot_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapshot_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->snapshot_id().data(), this->snapshot_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.devtools.source.v1.CloudWorkspaceSourceContext.snapshot_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.devtools.source.v1.CloudWorkspaceSourceContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.devtools.source.v1.CloudWorkspaceSourceContext)
  return false;
#undef DO_
}

void CloudWorkspaceSourceContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.devtools.source.v1.CloudWorkspaceSourceContext)
  // optional .google.devtools.source.v1.CloudWorkspaceId workspace_id = 1;
  if (this->has_workspace_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->workspace_id_, output);
  }

  // optional string snapshot_id = 2;
  if (this->snapshot_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->snapshot_id().data(), this->snapshot_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.source.v1.CloudWorkspaceSourceContext.snapshot_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->snapshot_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.devtools.source.v1.CloudWorkspaceSourceContext)
}

::google::protobuf::uint8* CloudWorkspaceSourceContext::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.devtools.source.v1.CloudWorkspaceSourceContext)
  // optional .google.devtools.source.v1.CloudWorkspaceId workspace_id = 1;
  if (this->has_workspace_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->workspace_id_, false, target);
  }

  // optional string snapshot_id = 2;
  if (this->snapshot_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->snapshot_id().data(), this->snapshot_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.source.v1.CloudWorkspaceSourceContext.snapshot_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->snapshot_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.devtools.source.v1.CloudWorkspaceSourceContext)
  return target;
}

size_t CloudWorkspaceSourceContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.devtools.source.v1.CloudWorkspaceSourceContext)
  size_t total_size = 0;

  // optional .google.devtools.source.v1.CloudWorkspaceId workspace_id = 1;
  if (this->has_workspace_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->workspace_id_);
  }

  // optional string snapshot_id = 2;
  if (this->snapshot_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->snapshot_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloudWorkspaceSourceContext::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.devtools.source.v1.CloudWorkspaceSourceContext)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CloudWorkspaceSourceContext* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CloudWorkspaceSourceContext>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.devtools.source.v1.CloudWorkspaceSourceContext)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.devtools.source.v1.CloudWorkspaceSourceContext)
    UnsafeMergeFrom(*source);
  }
}

void CloudWorkspaceSourceContext::MergeFrom(const CloudWorkspaceSourceContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.devtools.source.v1.CloudWorkspaceSourceContext)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CloudWorkspaceSourceContext::UnsafeMergeFrom(const CloudWorkspaceSourceContext& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_workspace_id()) {
    mutable_workspace_id()->::google::devtools::source::v1::CloudWorkspaceId::MergeFrom(from.workspace_id());
  }
  if (from.snapshot_id().size() > 0) {

    snapshot_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snapshot_id_);
  }
}

void CloudWorkspaceSourceContext::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.devtools.source.v1.CloudWorkspaceSourceContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudWorkspaceSourceContext::CopyFrom(const CloudWorkspaceSourceContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.devtools.source.v1.CloudWorkspaceSourceContext)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CloudWorkspaceSourceContext::IsInitialized() const {

  return true;
}

void CloudWorkspaceSourceContext::Swap(CloudWorkspaceSourceContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloudWorkspaceSourceContext::InternalSwap(CloudWorkspaceSourceContext* other) {
  std::swap(workspace_id_, other->workspace_id_);
  snapshot_id_.Swap(&other->snapshot_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloudWorkspaceSourceContext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloudWorkspaceSourceContext_descriptor_;
  metadata.reflection = CloudWorkspaceSourceContext_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CloudWorkspaceSourceContext

// optional .google.devtools.source.v1.CloudWorkspaceId workspace_id = 1;
bool CloudWorkspaceSourceContext::has_workspace_id() const {
  return this != internal_default_instance() && workspace_id_ != NULL;
}
void CloudWorkspaceSourceContext::clear_workspace_id() {
  if (GetArenaNoVirtual() == NULL && workspace_id_ != NULL) delete workspace_id_;
  workspace_id_ = NULL;
}
const ::google::devtools::source::v1::CloudWorkspaceId& CloudWorkspaceSourceContext::workspace_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.CloudWorkspaceSourceContext.workspace_id)
  return workspace_id_ != NULL ? *workspace_id_
                         : *::google::devtools::source::v1::CloudWorkspaceId::internal_default_instance();
}
::google::devtools::source::v1::CloudWorkspaceId* CloudWorkspaceSourceContext::mutable_workspace_id() {
  
  if (workspace_id_ == NULL) {
    workspace_id_ = new ::google::devtools::source::v1::CloudWorkspaceId;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.CloudWorkspaceSourceContext.workspace_id)
  return workspace_id_;
}
::google::devtools::source::v1::CloudWorkspaceId* CloudWorkspaceSourceContext::release_workspace_id() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.CloudWorkspaceSourceContext.workspace_id)
  
  ::google::devtools::source::v1::CloudWorkspaceId* temp = workspace_id_;
  workspace_id_ = NULL;
  return temp;
}
void CloudWorkspaceSourceContext::set_allocated_workspace_id(::google::devtools::source::v1::CloudWorkspaceId* workspace_id) {
  delete workspace_id_;
  workspace_id_ = workspace_id;
  if (workspace_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.CloudWorkspaceSourceContext.workspace_id)
}

// optional string snapshot_id = 2;
void CloudWorkspaceSourceContext::clear_snapshot_id() {
  snapshot_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CloudWorkspaceSourceContext::snapshot_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.CloudWorkspaceSourceContext.snapshot_id)
  return snapshot_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CloudWorkspaceSourceContext::set_snapshot_id(const ::std::string& value) {
  
  snapshot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.CloudWorkspaceSourceContext.snapshot_id)
}
void CloudWorkspaceSourceContext::set_snapshot_id(const char* value) {
  
  snapshot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.source.v1.CloudWorkspaceSourceContext.snapshot_id)
}
void CloudWorkspaceSourceContext::set_snapshot_id(const char* value, size_t size) {
  
  snapshot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.source.v1.CloudWorkspaceSourceContext.snapshot_id)
}
::std::string* CloudWorkspaceSourceContext::mutable_snapshot_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.CloudWorkspaceSourceContext.snapshot_id)
  return snapshot_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CloudWorkspaceSourceContext::release_snapshot_id() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.CloudWorkspaceSourceContext.snapshot_id)
  
  return snapshot_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CloudWorkspaceSourceContext::set_allocated_snapshot_id(::std::string* snapshot_id) {
  if (snapshot_id != NULL) {
    
  } else {
    
  }
  snapshot_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snapshot_id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.CloudWorkspaceSourceContext.snapshot_id)
}

inline const CloudWorkspaceSourceContext* CloudWorkspaceSourceContext::internal_default_instance() {
  return &CloudWorkspaceSourceContext_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GerritSourceContext::kHostUriFieldNumber;
const int GerritSourceContext::kGerritProjectFieldNumber;
const int GerritSourceContext::kRevisionIdFieldNumber;
const int GerritSourceContext::kAliasNameFieldNumber;
const int GerritSourceContext::kAliasContextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GerritSourceContext::GerritSourceContext()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.devtools.source.v1.GerritSourceContext)
}

void GerritSourceContext::InitAsDefaultInstance() {
  GerritSourceContext_default_oneof_instance_->revision_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  GerritSourceContext_default_oneof_instance_->alias_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  GerritSourceContext_default_oneof_instance_->alias_context_ = const_cast< ::google::devtools::source::v1::AliasContext*>(
      ::google::devtools::source::v1::AliasContext::internal_default_instance());
}

GerritSourceContext::GerritSourceContext(const GerritSourceContext& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.devtools.source.v1.GerritSourceContext)
}

void GerritSourceContext::SharedCtor() {
  host_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gerrit_project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_revision();
  _cached_size_ = 0;
}

GerritSourceContext::~GerritSourceContext() {
  // @@protoc_insertion_point(destructor:google.devtools.source.v1.GerritSourceContext)
  SharedDtor();
}

void GerritSourceContext::SharedDtor() {
  host_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gerrit_project_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_revision()) {
    clear_revision();
  }
}

void GerritSourceContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GerritSourceContext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GerritSourceContext_descriptor_;
}

const GerritSourceContext& GerritSourceContext::default_instance() {
  protobuf_InitDefaults_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GerritSourceContext> GerritSourceContext_default_instance_;

GerritSourceContext* GerritSourceContext::New(::google::protobuf::Arena* arena) const {
  GerritSourceContext* n = new GerritSourceContext;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GerritSourceContext::clear_revision() {
// @@protoc_insertion_point(one_of_clear_start:google.devtools.source.v1.GerritSourceContext)
  switch (revision_case()) {
    case kRevisionId: {
      revision_.revision_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kAliasName: {
      revision_.alias_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kAliasContext: {
      delete revision_.alias_context_;
      break;
    }
    case REVISION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REVISION_NOT_SET;
}


void GerritSourceContext::Clear() {
// @@protoc_insertion_point(message_clear_start:google.devtools.source.v1.GerritSourceContext)
  host_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gerrit_project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_revision();
}

bool GerritSourceContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.devtools.source.v1.GerritSourceContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string host_uri = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host_uri().data(), this->host_uri().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.devtools.source.v1.GerritSourceContext.host_uri"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_gerrit_project;
        break;
      }

      // optional string gerrit_project = 2;
      case 2: {
        if (tag == 18) {
         parse_gerrit_project:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gerrit_project()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gerrit_project().data(), this->gerrit_project().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.devtools.source.v1.GerritSourceContext.gerrit_project"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_revision_id;
        break;
      }

      // optional string revision_id = 3;
      case 3: {
        if (tag == 26) {
         parse_revision_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_revision_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->revision_id().data(), this->revision_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.devtools.source.v1.GerritSourceContext.revision_id"));
        } else {
          goto handle_unusual;
        }
        goto after_alias_context;
        break;
      }

      // optional string alias_name = 4;
      case 4: {
        if (tag == 34) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alias_name().data(), this->alias_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.devtools.source.v1.GerritSourceContext.alias_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_alias_context;
        break;
      }

      // optional .google.devtools.source.v1.AliasContext alias_context = 5;
      case 5: {
        if (tag == 42) {
         parse_alias_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alias_context()));
        } else {
          goto handle_unusual;
        }
       after_alias_context:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.devtools.source.v1.GerritSourceContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.devtools.source.v1.GerritSourceContext)
  return false;
#undef DO_
}

void GerritSourceContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.devtools.source.v1.GerritSourceContext)
  // optional string host_uri = 1;
  if (this->host_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host_uri().data(), this->host_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.source.v1.GerritSourceContext.host_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host_uri(), output);
  }

  // optional string gerrit_project = 2;
  if (this->gerrit_project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gerrit_project().data(), this->gerrit_project().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.source.v1.GerritSourceContext.gerrit_project");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gerrit_project(), output);
  }

  // optional string revision_id = 3;
  if (has_revision_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->revision_id().data(), this->revision_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.source.v1.GerritSourceContext.revision_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->revision_id(), output);
  }

  // optional string alias_name = 4;
  if (has_alias_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alias_name().data(), this->alias_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.source.v1.GerritSourceContext.alias_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->alias_name(), output);
  }

  // optional .google.devtools.source.v1.AliasContext alias_context = 5;
  if (has_alias_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *revision_.alias_context_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.devtools.source.v1.GerritSourceContext)
}

::google::protobuf::uint8* GerritSourceContext::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.devtools.source.v1.GerritSourceContext)
  // optional string host_uri = 1;
  if (this->host_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host_uri().data(), this->host_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.source.v1.GerritSourceContext.host_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host_uri(), target);
  }

  // optional string gerrit_project = 2;
  if (this->gerrit_project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gerrit_project().data(), this->gerrit_project().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.source.v1.GerritSourceContext.gerrit_project");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gerrit_project(), target);
  }

  // optional string revision_id = 3;
  if (has_revision_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->revision_id().data(), this->revision_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.source.v1.GerritSourceContext.revision_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->revision_id(), target);
  }

  // optional string alias_name = 4;
  if (has_alias_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alias_name().data(), this->alias_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.source.v1.GerritSourceContext.alias_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->alias_name(), target);
  }

  // optional .google.devtools.source.v1.AliasContext alias_context = 5;
  if (has_alias_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *revision_.alias_context_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.devtools.source.v1.GerritSourceContext)
  return target;
}

size_t GerritSourceContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.devtools.source.v1.GerritSourceContext)
  size_t total_size = 0;

  // optional string host_uri = 1;
  if (this->host_uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host_uri());
  }

  // optional string gerrit_project = 2;
  if (this->gerrit_project().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gerrit_project());
  }

  switch (revision_case()) {
    // optional string revision_id = 3;
    case kRevisionId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->revision_id());
      break;
    }
    // optional string alias_name = 4;
    case kAliasName: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alias_name());
      break;
    }
    // optional .google.devtools.source.v1.AliasContext alias_context = 5;
    case kAliasContext: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *revision_.alias_context_);
      break;
    }
    case REVISION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GerritSourceContext::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.devtools.source.v1.GerritSourceContext)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GerritSourceContext* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GerritSourceContext>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.devtools.source.v1.GerritSourceContext)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.devtools.source.v1.GerritSourceContext)
    UnsafeMergeFrom(*source);
  }
}

void GerritSourceContext::MergeFrom(const GerritSourceContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.devtools.source.v1.GerritSourceContext)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GerritSourceContext::UnsafeMergeFrom(const GerritSourceContext& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.revision_case()) {
    case kRevisionId: {
      set_revision_id(from.revision_id());
      break;
    }
    case kAliasName: {
      set_alias_name(from.alias_name());
      break;
    }
    case kAliasContext: {
      mutable_alias_context()->::google::devtools::source::v1::AliasContext::MergeFrom(from.alias_context());
      break;
    }
    case REVISION_NOT_SET: {
      break;
    }
  }
  if (from.host_uri().size() > 0) {

    host_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_uri_);
  }
  if (from.gerrit_project().size() > 0) {

    gerrit_project_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gerrit_project_);
  }
}

void GerritSourceContext::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.devtools.source.v1.GerritSourceContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GerritSourceContext::CopyFrom(const GerritSourceContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.devtools.source.v1.GerritSourceContext)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GerritSourceContext::IsInitialized() const {

  return true;
}

void GerritSourceContext::Swap(GerritSourceContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GerritSourceContext::InternalSwap(GerritSourceContext* other) {
  host_uri_.Swap(&other->host_uri_);
  gerrit_project_.Swap(&other->gerrit_project_);
  std::swap(revision_, other->revision_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GerritSourceContext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GerritSourceContext_descriptor_;
  metadata.reflection = GerritSourceContext_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GerritSourceContext

// optional string host_uri = 1;
void GerritSourceContext::clear_host_uri() {
  host_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GerritSourceContext::host_uri() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.GerritSourceContext.host_uri)
  return host_uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GerritSourceContext::set_host_uri(const ::std::string& value) {
  
  host_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.GerritSourceContext.host_uri)
}
void GerritSourceContext::set_host_uri(const char* value) {
  
  host_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.source.v1.GerritSourceContext.host_uri)
}
void GerritSourceContext::set_host_uri(const char* value, size_t size) {
  
  host_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.source.v1.GerritSourceContext.host_uri)
}
::std::string* GerritSourceContext::mutable_host_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.GerritSourceContext.host_uri)
  return host_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GerritSourceContext::release_host_uri() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.GerritSourceContext.host_uri)
  
  return host_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GerritSourceContext::set_allocated_host_uri(::std::string* host_uri) {
  if (host_uri != NULL) {
    
  } else {
    
  }
  host_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_uri);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.GerritSourceContext.host_uri)
}

// optional string gerrit_project = 2;
void GerritSourceContext::clear_gerrit_project() {
  gerrit_project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GerritSourceContext::gerrit_project() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.GerritSourceContext.gerrit_project)
  return gerrit_project_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GerritSourceContext::set_gerrit_project(const ::std::string& value) {
  
  gerrit_project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.GerritSourceContext.gerrit_project)
}
void GerritSourceContext::set_gerrit_project(const char* value) {
  
  gerrit_project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.source.v1.GerritSourceContext.gerrit_project)
}
void GerritSourceContext::set_gerrit_project(const char* value, size_t size) {
  
  gerrit_project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.source.v1.GerritSourceContext.gerrit_project)
}
::std::string* GerritSourceContext::mutable_gerrit_project() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.GerritSourceContext.gerrit_project)
  return gerrit_project_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GerritSourceContext::release_gerrit_project() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.GerritSourceContext.gerrit_project)
  
  return gerrit_project_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GerritSourceContext::set_allocated_gerrit_project(::std::string* gerrit_project) {
  if (gerrit_project != NULL) {
    
  } else {
    
  }
  gerrit_project_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gerrit_project);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.GerritSourceContext.gerrit_project)
}

// optional string revision_id = 3;
bool GerritSourceContext::has_revision_id() const {
  return revision_case() == kRevisionId;
}
void GerritSourceContext::set_has_revision_id() {
  _oneof_case_[0] = kRevisionId;
}
void GerritSourceContext::clear_revision_id() {
  if (has_revision_id()) {
    revision_.revision_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_revision();
  }
}
const ::std::string& GerritSourceContext::revision_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.GerritSourceContext.revision_id)
  if (has_revision_id()) {
    return revision_.revision_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void GerritSourceContext::set_revision_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.GerritSourceContext.revision_id)
  if (!has_revision_id()) {
    clear_revision();
    set_has_revision_id();
    revision_.revision_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  revision_.revision_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.GerritSourceContext.revision_id)
}
void GerritSourceContext::set_revision_id(const char* value) {
  if (!has_revision_id()) {
    clear_revision();
    set_has_revision_id();
    revision_.revision_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  revision_.revision_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.source.v1.GerritSourceContext.revision_id)
}
void GerritSourceContext::set_revision_id(const char* value, size_t size) {
  if (!has_revision_id()) {
    clear_revision();
    set_has_revision_id();
    revision_.revision_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  revision_.revision_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.source.v1.GerritSourceContext.revision_id)
}
::std::string* GerritSourceContext::mutable_revision_id() {
  if (!has_revision_id()) {
    clear_revision();
    set_has_revision_id();
    revision_.revision_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.GerritSourceContext.revision_id)
  return revision_.revision_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GerritSourceContext::release_revision_id() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.GerritSourceContext.revision_id)
  if (has_revision_id()) {
    clear_has_revision();
    return revision_.revision_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void GerritSourceContext::set_allocated_revision_id(::std::string* revision_id) {
  if (!has_revision_id()) {
    revision_.revision_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_revision();
  if (revision_id != NULL) {
    set_has_revision_id();
    revision_.revision_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        revision_id);
  }
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.GerritSourceContext.revision_id)
}

// optional string alias_name = 4;
bool GerritSourceContext::has_alias_name() const {
  return revision_case() == kAliasName;
}
void GerritSourceContext::set_has_alias_name() {
  _oneof_case_[0] = kAliasName;
}
void GerritSourceContext::clear_alias_name() {
  if (has_alias_name()) {
    revision_.alias_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_revision();
  }
}
const ::std::string& GerritSourceContext::alias_name() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.GerritSourceContext.alias_name)
  if (has_alias_name()) {
    return revision_.alias_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void GerritSourceContext::set_alias_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.GerritSourceContext.alias_name)
  if (!has_alias_name()) {
    clear_revision();
    set_has_alias_name();
    revision_.alias_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  revision_.alias_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.GerritSourceContext.alias_name)
}
void GerritSourceContext::set_alias_name(const char* value) {
  if (!has_alias_name()) {
    clear_revision();
    set_has_alias_name();
    revision_.alias_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  revision_.alias_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.source.v1.GerritSourceContext.alias_name)
}
void GerritSourceContext::set_alias_name(const char* value, size_t size) {
  if (!has_alias_name()) {
    clear_revision();
    set_has_alias_name();
    revision_.alias_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  revision_.alias_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.source.v1.GerritSourceContext.alias_name)
}
::std::string* GerritSourceContext::mutable_alias_name() {
  if (!has_alias_name()) {
    clear_revision();
    set_has_alias_name();
    revision_.alias_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.GerritSourceContext.alias_name)
  return revision_.alias_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GerritSourceContext::release_alias_name() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.GerritSourceContext.alias_name)
  if (has_alias_name()) {
    clear_has_revision();
    return revision_.alias_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void GerritSourceContext::set_allocated_alias_name(::std::string* alias_name) {
  if (!has_alias_name()) {
    revision_.alias_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_revision();
  if (alias_name != NULL) {
    set_has_alias_name();
    revision_.alias_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        alias_name);
  }
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.GerritSourceContext.alias_name)
}

// optional .google.devtools.source.v1.AliasContext alias_context = 5;
bool GerritSourceContext::has_alias_context() const {
  return revision_case() == kAliasContext;
}
void GerritSourceContext::set_has_alias_context() {
  _oneof_case_[0] = kAliasContext;
}
void GerritSourceContext::clear_alias_context() {
  if (has_alias_context()) {
    delete revision_.alias_context_;
    clear_has_revision();
  }
}
 const ::google::devtools::source::v1::AliasContext& GerritSourceContext::alias_context() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.GerritSourceContext.alias_context)
  return has_alias_context()
      ? *revision_.alias_context_
      : ::google::devtools::source::v1::AliasContext::default_instance();
}
::google::devtools::source::v1::AliasContext* GerritSourceContext::mutable_alias_context() {
  if (!has_alias_context()) {
    clear_revision();
    set_has_alias_context();
    revision_.alias_context_ = new ::google::devtools::source::v1::AliasContext;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.GerritSourceContext.alias_context)
  return revision_.alias_context_;
}
::google::devtools::source::v1::AliasContext* GerritSourceContext::release_alias_context() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.GerritSourceContext.alias_context)
  if (has_alias_context()) {
    clear_has_revision();
    ::google::devtools::source::v1::AliasContext* temp = revision_.alias_context_;
    revision_.alias_context_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GerritSourceContext::set_allocated_alias_context(::google::devtools::source::v1::AliasContext* alias_context) {
  clear_revision();
  if (alias_context) {
    set_has_alias_context();
    revision_.alias_context_ = alias_context;
  }
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.GerritSourceContext.alias_context)
}

bool GerritSourceContext::has_revision() const {
  return revision_case() != REVISION_NOT_SET;
}
void GerritSourceContext::clear_has_revision() {
  _oneof_case_[0] = REVISION_NOT_SET;
}
GerritSourceContext::RevisionCase GerritSourceContext::revision_case() const {
  return GerritSourceContext::RevisionCase(_oneof_case_[0]);
}
inline const GerritSourceContext* GerritSourceContext::internal_default_instance() {
  return &GerritSourceContext_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GitSourceContext::kUrlFieldNumber;
const int GitSourceContext::kRevisionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GitSourceContext::GitSourceContext()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.devtools.source.v1.GitSourceContext)
}

void GitSourceContext::InitAsDefaultInstance() {
}

GitSourceContext::GitSourceContext(const GitSourceContext& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.devtools.source.v1.GitSourceContext)
}

void GitSourceContext::SharedCtor() {
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  revision_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GitSourceContext::~GitSourceContext() {
  // @@protoc_insertion_point(destructor:google.devtools.source.v1.GitSourceContext)
  SharedDtor();
}

void GitSourceContext::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  revision_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GitSourceContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GitSourceContext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GitSourceContext_descriptor_;
}

const GitSourceContext& GitSourceContext::default_instance() {
  protobuf_InitDefaults_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GitSourceContext> GitSourceContext_default_instance_;

GitSourceContext* GitSourceContext::New(::google::protobuf::Arena* arena) const {
  GitSourceContext* n = new GitSourceContext;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GitSourceContext::Clear() {
// @@protoc_insertion_point(message_clear_start:google.devtools.source.v1.GitSourceContext)
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  revision_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GitSourceContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.devtools.source.v1.GitSourceContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.devtools.source.v1.GitSourceContext.url"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_revision_id;
        break;
      }

      // optional string revision_id = 2;
      case 2: {
        if (tag == 18) {
         parse_revision_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_revision_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->revision_id().data(), this->revision_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.devtools.source.v1.GitSourceContext.revision_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.devtools.source.v1.GitSourceContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.devtools.source.v1.GitSourceContext)
  return false;
#undef DO_
}

void GitSourceContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.devtools.source.v1.GitSourceContext)
  // optional string url = 1;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.source.v1.GitSourceContext.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional string revision_id = 2;
  if (this->revision_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->revision_id().data(), this->revision_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.source.v1.GitSourceContext.revision_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->revision_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.devtools.source.v1.GitSourceContext)
}

::google::protobuf::uint8* GitSourceContext::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.devtools.source.v1.GitSourceContext)
  // optional string url = 1;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.source.v1.GitSourceContext.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // optional string revision_id = 2;
  if (this->revision_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->revision_id().data(), this->revision_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.source.v1.GitSourceContext.revision_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->revision_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.devtools.source.v1.GitSourceContext)
  return target;
}

size_t GitSourceContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.devtools.source.v1.GitSourceContext)
  size_t total_size = 0;

  // optional string url = 1;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  // optional string revision_id = 2;
  if (this->revision_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->revision_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GitSourceContext::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.devtools.source.v1.GitSourceContext)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GitSourceContext* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GitSourceContext>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.devtools.source.v1.GitSourceContext)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.devtools.source.v1.GitSourceContext)
    UnsafeMergeFrom(*source);
  }
}

void GitSourceContext::MergeFrom(const GitSourceContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.devtools.source.v1.GitSourceContext)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GitSourceContext::UnsafeMergeFrom(const GitSourceContext& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.revision_id().size() > 0) {

    revision_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.revision_id_);
  }
}

void GitSourceContext::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.devtools.source.v1.GitSourceContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GitSourceContext::CopyFrom(const GitSourceContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.devtools.source.v1.GitSourceContext)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GitSourceContext::IsInitialized() const {

  return true;
}

void GitSourceContext::Swap(GitSourceContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GitSourceContext::InternalSwap(GitSourceContext* other) {
  url_.Swap(&other->url_);
  revision_id_.Swap(&other->revision_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GitSourceContext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GitSourceContext_descriptor_;
  metadata.reflection = GitSourceContext_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GitSourceContext

// optional string url = 1;
void GitSourceContext::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GitSourceContext::url() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.GitSourceContext.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GitSourceContext::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.GitSourceContext.url)
}
void GitSourceContext::set_url(const char* value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.source.v1.GitSourceContext.url)
}
void GitSourceContext::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.source.v1.GitSourceContext.url)
}
::std::string* GitSourceContext::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.GitSourceContext.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GitSourceContext::release_url() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.GitSourceContext.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GitSourceContext::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.GitSourceContext.url)
}

// optional string revision_id = 2;
void GitSourceContext::clear_revision_id() {
  revision_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GitSourceContext::revision_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.GitSourceContext.revision_id)
  return revision_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GitSourceContext::set_revision_id(const ::std::string& value) {
  
  revision_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.GitSourceContext.revision_id)
}
void GitSourceContext::set_revision_id(const char* value) {
  
  revision_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.source.v1.GitSourceContext.revision_id)
}
void GitSourceContext::set_revision_id(const char* value, size_t size) {
  
  revision_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.source.v1.GitSourceContext.revision_id)
}
::std::string* GitSourceContext::mutable_revision_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.GitSourceContext.revision_id)
  return revision_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GitSourceContext::release_revision_id() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.GitSourceContext.revision_id)
  
  return revision_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GitSourceContext::set_allocated_revision_id(::std::string* revision_id) {
  if (revision_id != NULL) {
    
  } else {
    
  }
  revision_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), revision_id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.GitSourceContext.revision_id)
}

inline const GitSourceContext* GitSourceContext::internal_default_instance() {
  return &GitSourceContext_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RepoId::kProjectRepoIdFieldNumber;
const int RepoId::kUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RepoId::RepoId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.devtools.source.v1.RepoId)
}

void RepoId::InitAsDefaultInstance() {
  RepoId_default_oneof_instance_->project_repo_id_ = const_cast< ::google::devtools::source::v1::ProjectRepoId*>(
      ::google::devtools::source::v1::ProjectRepoId::internal_default_instance());
  RepoId_default_oneof_instance_->uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RepoId::RepoId(const RepoId& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.devtools.source.v1.RepoId)
}

void RepoId::SharedCtor() {
  clear_has_id();
  _cached_size_ = 0;
}

RepoId::~RepoId() {
  // @@protoc_insertion_point(destructor:google.devtools.source.v1.RepoId)
  SharedDtor();
}

void RepoId::SharedDtor() {
  if (has_id()) {
    clear_id();
  }
}

void RepoId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RepoId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RepoId_descriptor_;
}

const RepoId& RepoId::default_instance() {
  protobuf_InitDefaults_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RepoId> RepoId_default_instance_;

RepoId* RepoId::New(::google::protobuf::Arena* arena) const {
  RepoId* n = new RepoId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RepoId::clear_id() {
// @@protoc_insertion_point(one_of_clear_start:google.devtools.source.v1.RepoId)
  switch (id_case()) {
    case kProjectRepoId: {
      delete id_.project_repo_id_;
      break;
    }
    case kUid: {
      id_.uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ID_NOT_SET;
}


void RepoId::Clear() {
// @@protoc_insertion_point(message_clear_start:google.devtools.source.v1.RepoId)
  clear_id();
}

bool RepoId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.devtools.source.v1.RepoId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.devtools.source.v1.ProjectRepoId project_repo_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_project_repo_id()));
        } else {
          goto handle_unusual;
        }
        goto after_uid;
        break;
      }

      // optional string uid = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.devtools.source.v1.RepoId.uid"));
        } else {
          goto handle_unusual;
        }
       after_uid:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.devtools.source.v1.RepoId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.devtools.source.v1.RepoId)
  return false;
#undef DO_
}

void RepoId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.devtools.source.v1.RepoId)
  // optional .google.devtools.source.v1.ProjectRepoId project_repo_id = 1;
  if (has_project_repo_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *id_.project_repo_id_, output);
  }

  // optional string uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.source.v1.RepoId.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uid(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.devtools.source.v1.RepoId)
}

::google::protobuf::uint8* RepoId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.devtools.source.v1.RepoId)
  // optional .google.devtools.source.v1.ProjectRepoId project_repo_id = 1;
  if (has_project_repo_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *id_.project_repo_id_, false, target);
  }

  // optional string uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.source.v1.RepoId.uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.devtools.source.v1.RepoId)
  return target;
}

size_t RepoId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.devtools.source.v1.RepoId)
  size_t total_size = 0;

  switch (id_case()) {
    // optional .google.devtools.source.v1.ProjectRepoId project_repo_id = 1;
    case kProjectRepoId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *id_.project_repo_id_);
      break;
    }
    // optional string uid = 2;
    case kUid: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RepoId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.devtools.source.v1.RepoId)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RepoId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RepoId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.devtools.source.v1.RepoId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.devtools.source.v1.RepoId)
    UnsafeMergeFrom(*source);
  }
}

void RepoId::MergeFrom(const RepoId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.devtools.source.v1.RepoId)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RepoId::UnsafeMergeFrom(const RepoId& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.id_case()) {
    case kProjectRepoId: {
      mutable_project_repo_id()->::google::devtools::source::v1::ProjectRepoId::MergeFrom(from.project_repo_id());
      break;
    }
    case kUid: {
      set_uid(from.uid());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
}

void RepoId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.devtools.source.v1.RepoId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RepoId::CopyFrom(const RepoId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.devtools.source.v1.RepoId)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RepoId::IsInitialized() const {

  return true;
}

void RepoId::Swap(RepoId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RepoId::InternalSwap(RepoId* other) {
  std::swap(id_, other->id_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RepoId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RepoId_descriptor_;
  metadata.reflection = RepoId_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RepoId

// optional .google.devtools.source.v1.ProjectRepoId project_repo_id = 1;
bool RepoId::has_project_repo_id() const {
  return id_case() == kProjectRepoId;
}
void RepoId::set_has_project_repo_id() {
  _oneof_case_[0] = kProjectRepoId;
}
void RepoId::clear_project_repo_id() {
  if (has_project_repo_id()) {
    delete id_.project_repo_id_;
    clear_has_id();
  }
}
 const ::google::devtools::source::v1::ProjectRepoId& RepoId::project_repo_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.RepoId.project_repo_id)
  return has_project_repo_id()
      ? *id_.project_repo_id_
      : ::google::devtools::source::v1::ProjectRepoId::default_instance();
}
::google::devtools::source::v1::ProjectRepoId* RepoId::mutable_project_repo_id() {
  if (!has_project_repo_id()) {
    clear_id();
    set_has_project_repo_id();
    id_.project_repo_id_ = new ::google::devtools::source::v1::ProjectRepoId;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.RepoId.project_repo_id)
  return id_.project_repo_id_;
}
::google::devtools::source::v1::ProjectRepoId* RepoId::release_project_repo_id() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.RepoId.project_repo_id)
  if (has_project_repo_id()) {
    clear_has_id();
    ::google::devtools::source::v1::ProjectRepoId* temp = id_.project_repo_id_;
    id_.project_repo_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RepoId::set_allocated_project_repo_id(::google::devtools::source::v1::ProjectRepoId* project_repo_id) {
  clear_id();
  if (project_repo_id) {
    set_has_project_repo_id();
    id_.project_repo_id_ = project_repo_id;
  }
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.RepoId.project_repo_id)
}

// optional string uid = 2;
bool RepoId::has_uid() const {
  return id_case() == kUid;
}
void RepoId::set_has_uid() {
  _oneof_case_[0] = kUid;
}
void RepoId::clear_uid() {
  if (has_uid()) {
    id_.uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& RepoId::uid() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.RepoId.uid)
  if (has_uid()) {
    return id_.uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void RepoId::set_uid(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.RepoId.uid)
  if (!has_uid()) {
    clear_id();
    set_has_uid();
    id_.uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.RepoId.uid)
}
void RepoId::set_uid(const char* value) {
  if (!has_uid()) {
    clear_id();
    set_has_uid();
    id_.uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.source.v1.RepoId.uid)
}
void RepoId::set_uid(const char* value, size_t size) {
  if (!has_uid()) {
    clear_id();
    set_has_uid();
    id_.uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.source.v1.RepoId.uid)
}
::std::string* RepoId::mutable_uid() {
  if (!has_uid()) {
    clear_id();
    set_has_uid();
    id_.uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.RepoId.uid)
  return id_.uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RepoId::release_uid() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.RepoId.uid)
  if (has_uid()) {
    clear_has_id();
    return id_.uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void RepoId::set_allocated_uid(::std::string* uid) {
  if (!has_uid()) {
    id_.uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (uid != NULL) {
    set_has_uid();
    id_.uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        uid);
  }
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.RepoId.uid)
}

bool RepoId::has_id() const {
  return id_case() != ID_NOT_SET;
}
void RepoId::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
RepoId::IdCase RepoId::id_case() const {
  return RepoId::IdCase(_oneof_case_[0]);
}
inline const RepoId* RepoId::internal_default_instance() {
  return &RepoId_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProjectRepoId::kProjectIdFieldNumber;
const int ProjectRepoId::kRepoNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProjectRepoId::ProjectRepoId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.devtools.source.v1.ProjectRepoId)
}

void ProjectRepoId::InitAsDefaultInstance() {
}

ProjectRepoId::ProjectRepoId(const ProjectRepoId& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.devtools.source.v1.ProjectRepoId)
}

void ProjectRepoId::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  repo_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ProjectRepoId::~ProjectRepoId() {
  // @@protoc_insertion_point(destructor:google.devtools.source.v1.ProjectRepoId)
  SharedDtor();
}

void ProjectRepoId::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  repo_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProjectRepoId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProjectRepoId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProjectRepoId_descriptor_;
}

const ProjectRepoId& ProjectRepoId::default_instance() {
  protobuf_InitDefaults_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ProjectRepoId> ProjectRepoId_default_instance_;

ProjectRepoId* ProjectRepoId::New(::google::protobuf::Arena* arena) const {
  ProjectRepoId* n = new ProjectRepoId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProjectRepoId::Clear() {
// @@protoc_insertion_point(message_clear_start:google.devtools.source.v1.ProjectRepoId)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  repo_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ProjectRepoId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.devtools.source.v1.ProjectRepoId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string project_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.devtools.source.v1.ProjectRepoId.project_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_repo_name;
        break;
      }

      // optional string repo_name = 2;
      case 2: {
        if (tag == 18) {
         parse_repo_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_repo_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->repo_name().data(), this->repo_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.devtools.source.v1.ProjectRepoId.repo_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.devtools.source.v1.ProjectRepoId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.devtools.source.v1.ProjectRepoId)
  return false;
#undef DO_
}

void ProjectRepoId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.devtools.source.v1.ProjectRepoId)
  // optional string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.source.v1.ProjectRepoId.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // optional string repo_name = 2;
  if (this->repo_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->repo_name().data(), this->repo_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.source.v1.ProjectRepoId.repo_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->repo_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.devtools.source.v1.ProjectRepoId)
}

::google::protobuf::uint8* ProjectRepoId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.devtools.source.v1.ProjectRepoId)
  // optional string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.source.v1.ProjectRepoId.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // optional string repo_name = 2;
  if (this->repo_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->repo_name().data(), this->repo_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.source.v1.ProjectRepoId.repo_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->repo_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.devtools.source.v1.ProjectRepoId)
  return target;
}

size_t ProjectRepoId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.devtools.source.v1.ProjectRepoId)
  size_t total_size = 0;

  // optional string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // optional string repo_name = 2;
  if (this->repo_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->repo_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProjectRepoId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.devtools.source.v1.ProjectRepoId)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ProjectRepoId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProjectRepoId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.devtools.source.v1.ProjectRepoId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.devtools.source.v1.ProjectRepoId)
    UnsafeMergeFrom(*source);
  }
}

void ProjectRepoId::MergeFrom(const ProjectRepoId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.devtools.source.v1.ProjectRepoId)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ProjectRepoId::UnsafeMergeFrom(const ProjectRepoId& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.repo_name().size() > 0) {

    repo_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.repo_name_);
  }
}

void ProjectRepoId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.devtools.source.v1.ProjectRepoId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjectRepoId::CopyFrom(const ProjectRepoId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.devtools.source.v1.ProjectRepoId)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ProjectRepoId::IsInitialized() const {

  return true;
}

void ProjectRepoId::Swap(ProjectRepoId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProjectRepoId::InternalSwap(ProjectRepoId* other) {
  project_id_.Swap(&other->project_id_);
  repo_name_.Swap(&other->repo_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProjectRepoId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProjectRepoId_descriptor_;
  metadata.reflection = ProjectRepoId_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProjectRepoId

// optional string project_id = 1;
void ProjectRepoId::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProjectRepoId::project_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.ProjectRepoId.project_id)
  return project_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProjectRepoId::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.ProjectRepoId.project_id)
}
void ProjectRepoId::set_project_id(const char* value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.source.v1.ProjectRepoId.project_id)
}
void ProjectRepoId::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.source.v1.ProjectRepoId.project_id)
}
::std::string* ProjectRepoId::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.ProjectRepoId.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProjectRepoId::release_project_id() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.ProjectRepoId.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProjectRepoId::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.ProjectRepoId.project_id)
}

// optional string repo_name = 2;
void ProjectRepoId::clear_repo_name() {
  repo_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProjectRepoId::repo_name() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.ProjectRepoId.repo_name)
  return repo_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProjectRepoId::set_repo_name(const ::std::string& value) {
  
  repo_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.ProjectRepoId.repo_name)
}
void ProjectRepoId::set_repo_name(const char* value) {
  
  repo_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.source.v1.ProjectRepoId.repo_name)
}
void ProjectRepoId::set_repo_name(const char* value, size_t size) {
  
  repo_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.source.v1.ProjectRepoId.repo_name)
}
::std::string* ProjectRepoId::mutable_repo_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.ProjectRepoId.repo_name)
  return repo_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProjectRepoId::release_repo_name() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.ProjectRepoId.repo_name)
  
  return repo_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProjectRepoId::set_allocated_repo_name(::std::string* repo_name) {
  if (repo_name != NULL) {
    
  } else {
    
  }
  repo_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), repo_name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.ProjectRepoId.repo_name)
}

inline const ProjectRepoId* ProjectRepoId::internal_default_instance() {
  return &ProjectRepoId_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloudWorkspaceId::kRepoIdFieldNumber;
const int CloudWorkspaceId::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloudWorkspaceId::CloudWorkspaceId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.devtools.source.v1.CloudWorkspaceId)
}

void CloudWorkspaceId::InitAsDefaultInstance() {
  repo_id_ = const_cast< ::google::devtools::source::v1::RepoId*>(
      ::google::devtools::source::v1::RepoId::internal_default_instance());
}

CloudWorkspaceId::CloudWorkspaceId(const CloudWorkspaceId& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.devtools.source.v1.CloudWorkspaceId)
}

void CloudWorkspaceId::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  repo_id_ = NULL;
  _cached_size_ = 0;
}

CloudWorkspaceId::~CloudWorkspaceId() {
  // @@protoc_insertion_point(destructor:google.devtools.source.v1.CloudWorkspaceId)
  SharedDtor();
}

void CloudWorkspaceId::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &CloudWorkspaceId_default_instance_.get()) {
    delete repo_id_;
  }
}

void CloudWorkspaceId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloudWorkspaceId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloudWorkspaceId_descriptor_;
}

const CloudWorkspaceId& CloudWorkspaceId::default_instance() {
  protobuf_InitDefaults_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CloudWorkspaceId> CloudWorkspaceId_default_instance_;

CloudWorkspaceId* CloudWorkspaceId::New(::google::protobuf::Arena* arena) const {
  CloudWorkspaceId* n = new CloudWorkspaceId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CloudWorkspaceId::Clear() {
// @@protoc_insertion_point(message_clear_start:google.devtools.source.v1.CloudWorkspaceId)
  if (GetArenaNoVirtual() == NULL && repo_id_ != NULL) delete repo_id_;
  repo_id_ = NULL;
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CloudWorkspaceId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.devtools.source.v1.CloudWorkspaceId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.devtools.source.v1.RepoId repo_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_repo_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.devtools.source.v1.CloudWorkspaceId.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.devtools.source.v1.CloudWorkspaceId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.devtools.source.v1.CloudWorkspaceId)
  return false;
#undef DO_
}

void CloudWorkspaceId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.devtools.source.v1.CloudWorkspaceId)
  // optional .google.devtools.source.v1.RepoId repo_id = 1;
  if (this->has_repo_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->repo_id_, output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.source.v1.CloudWorkspaceId.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.devtools.source.v1.CloudWorkspaceId)
}

::google::protobuf::uint8* CloudWorkspaceId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.devtools.source.v1.CloudWorkspaceId)
  // optional .google.devtools.source.v1.RepoId repo_id = 1;
  if (this->has_repo_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->repo_id_, false, target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.source.v1.CloudWorkspaceId.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.devtools.source.v1.CloudWorkspaceId)
  return target;
}

size_t CloudWorkspaceId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.devtools.source.v1.CloudWorkspaceId)
  size_t total_size = 0;

  // optional .google.devtools.source.v1.RepoId repo_id = 1;
  if (this->has_repo_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->repo_id_);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloudWorkspaceId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.devtools.source.v1.CloudWorkspaceId)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CloudWorkspaceId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CloudWorkspaceId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.devtools.source.v1.CloudWorkspaceId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.devtools.source.v1.CloudWorkspaceId)
    UnsafeMergeFrom(*source);
  }
}

void CloudWorkspaceId::MergeFrom(const CloudWorkspaceId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.devtools.source.v1.CloudWorkspaceId)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CloudWorkspaceId::UnsafeMergeFrom(const CloudWorkspaceId& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_repo_id()) {
    mutable_repo_id()->::google::devtools::source::v1::RepoId::MergeFrom(from.repo_id());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void CloudWorkspaceId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.devtools.source.v1.CloudWorkspaceId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudWorkspaceId::CopyFrom(const CloudWorkspaceId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.devtools.source.v1.CloudWorkspaceId)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CloudWorkspaceId::IsInitialized() const {

  return true;
}

void CloudWorkspaceId::Swap(CloudWorkspaceId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloudWorkspaceId::InternalSwap(CloudWorkspaceId* other) {
  std::swap(repo_id_, other->repo_id_);
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloudWorkspaceId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloudWorkspaceId_descriptor_;
  metadata.reflection = CloudWorkspaceId_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CloudWorkspaceId

// optional .google.devtools.source.v1.RepoId repo_id = 1;
bool CloudWorkspaceId::has_repo_id() const {
  return this != internal_default_instance() && repo_id_ != NULL;
}
void CloudWorkspaceId::clear_repo_id() {
  if (GetArenaNoVirtual() == NULL && repo_id_ != NULL) delete repo_id_;
  repo_id_ = NULL;
}
const ::google::devtools::source::v1::RepoId& CloudWorkspaceId::repo_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.CloudWorkspaceId.repo_id)
  return repo_id_ != NULL ? *repo_id_
                         : *::google::devtools::source::v1::RepoId::internal_default_instance();
}
::google::devtools::source::v1::RepoId* CloudWorkspaceId::mutable_repo_id() {
  
  if (repo_id_ == NULL) {
    repo_id_ = new ::google::devtools::source::v1::RepoId;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.CloudWorkspaceId.repo_id)
  return repo_id_;
}
::google::devtools::source::v1::RepoId* CloudWorkspaceId::release_repo_id() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.CloudWorkspaceId.repo_id)
  
  ::google::devtools::source::v1::RepoId* temp = repo_id_;
  repo_id_ = NULL;
  return temp;
}
void CloudWorkspaceId::set_allocated_repo_id(::google::devtools::source::v1::RepoId* repo_id) {
  delete repo_id_;
  repo_id_ = repo_id;
  if (repo_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.CloudWorkspaceId.repo_id)
}

// optional string name = 2;
void CloudWorkspaceId::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CloudWorkspaceId::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.CloudWorkspaceId.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CloudWorkspaceId::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.CloudWorkspaceId.name)
}
void CloudWorkspaceId::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.source.v1.CloudWorkspaceId.name)
}
void CloudWorkspaceId::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.source.v1.CloudWorkspaceId.name)
}
::std::string* CloudWorkspaceId::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.CloudWorkspaceId.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CloudWorkspaceId::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.CloudWorkspaceId.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CloudWorkspaceId::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.CloudWorkspaceId.name)
}

inline const CloudWorkspaceId* CloudWorkspaceId::internal_default_instance() {
  return &CloudWorkspaceId_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace source
}  // namespace devtools
}  // namespace google

// @@protoc_insertion_point(global_scope)
