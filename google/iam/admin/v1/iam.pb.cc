// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/iam/admin/v1/iam.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/iam/admin/v1/iam.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace iam {
namespace admin {
namespace v1 {

namespace {

const ::google::protobuf::Descriptor* ServiceAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceAccount_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateServiceAccountRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateServiceAccountRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListServiceAccountsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListServiceAccountsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListServiceAccountsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListServiceAccountsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetServiceAccountRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetServiceAccountRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteServiceAccountRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteServiceAccountRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListServiceAccountKeysRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListServiceAccountKeysRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ListServiceAccountKeysRequest_KeyType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ListServiceAccountKeysResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListServiceAccountKeysResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetServiceAccountKeyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetServiceAccountKeyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceAccountKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceAccountKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateServiceAccountKeyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateServiceAccountKeyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteServiceAccountKeyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteServiceAccountKeyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignBlobRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignBlobRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignBlobResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignBlobResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Role_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Role_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryGrantableRolesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryGrantableRolesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryGrantableRolesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryGrantableRolesResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ServiceAccountKeyAlgorithm_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ServiceAccountPrivateKeyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ServiceAccountPublicKeyType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto() {
  protobuf_AddDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "google/iam/admin/v1/iam.proto");
  GOOGLE_CHECK(file != NULL);
  ServiceAccount_descriptor_ = file->message_type(0);
  static const int ServiceAccount_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceAccount, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceAccount, project_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceAccount, unique_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceAccount, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceAccount, display_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceAccount, etag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceAccount, oauth2_client_id_),
  };
  ServiceAccount_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServiceAccount_descriptor_,
      ServiceAccount::internal_default_instance(),
      ServiceAccount_offsets_,
      -1,
      -1,
      -1,
      sizeof(ServiceAccount),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceAccount, _internal_metadata_));
  CreateServiceAccountRequest_descriptor_ = file->message_type(1);
  static const int CreateServiceAccountRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateServiceAccountRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateServiceAccountRequest, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateServiceAccountRequest, service_account_),
  };
  CreateServiceAccountRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateServiceAccountRequest_descriptor_,
      CreateServiceAccountRequest::internal_default_instance(),
      CreateServiceAccountRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateServiceAccountRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateServiceAccountRequest, _internal_metadata_));
  ListServiceAccountsRequest_descriptor_ = file->message_type(2);
  static const int ListServiceAccountsRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListServiceAccountsRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListServiceAccountsRequest, page_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListServiceAccountsRequest, page_token_),
  };
  ListServiceAccountsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListServiceAccountsRequest_descriptor_,
      ListServiceAccountsRequest::internal_default_instance(),
      ListServiceAccountsRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListServiceAccountsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListServiceAccountsRequest, _internal_metadata_));
  ListServiceAccountsResponse_descriptor_ = file->message_type(3);
  static const int ListServiceAccountsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListServiceAccountsResponse, accounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListServiceAccountsResponse, next_page_token_),
  };
  ListServiceAccountsResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListServiceAccountsResponse_descriptor_,
      ListServiceAccountsResponse::internal_default_instance(),
      ListServiceAccountsResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListServiceAccountsResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListServiceAccountsResponse, _internal_metadata_));
  GetServiceAccountRequest_descriptor_ = file->message_type(4);
  static const int GetServiceAccountRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceAccountRequest, name_),
  };
  GetServiceAccountRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetServiceAccountRequest_descriptor_,
      GetServiceAccountRequest::internal_default_instance(),
      GetServiceAccountRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetServiceAccountRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceAccountRequest, _internal_metadata_));
  DeleteServiceAccountRequest_descriptor_ = file->message_type(5);
  static const int DeleteServiceAccountRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteServiceAccountRequest, name_),
  };
  DeleteServiceAccountRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeleteServiceAccountRequest_descriptor_,
      DeleteServiceAccountRequest::internal_default_instance(),
      DeleteServiceAccountRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeleteServiceAccountRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteServiceAccountRequest, _internal_metadata_));
  ListServiceAccountKeysRequest_descriptor_ = file->message_type(6);
  static const int ListServiceAccountKeysRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListServiceAccountKeysRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListServiceAccountKeysRequest, key_types_),
  };
  ListServiceAccountKeysRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListServiceAccountKeysRequest_descriptor_,
      ListServiceAccountKeysRequest::internal_default_instance(),
      ListServiceAccountKeysRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListServiceAccountKeysRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListServiceAccountKeysRequest, _internal_metadata_));
  ListServiceAccountKeysRequest_KeyType_descriptor_ = ListServiceAccountKeysRequest_descriptor_->enum_type(0);
  ListServiceAccountKeysResponse_descriptor_ = file->message_type(7);
  static const int ListServiceAccountKeysResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListServiceAccountKeysResponse, keys_),
  };
  ListServiceAccountKeysResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListServiceAccountKeysResponse_descriptor_,
      ListServiceAccountKeysResponse::internal_default_instance(),
      ListServiceAccountKeysResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListServiceAccountKeysResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListServiceAccountKeysResponse, _internal_metadata_));
  GetServiceAccountKeyRequest_descriptor_ = file->message_type(8);
  static const int GetServiceAccountKeyRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceAccountKeyRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceAccountKeyRequest, public_key_type_),
  };
  GetServiceAccountKeyRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetServiceAccountKeyRequest_descriptor_,
      GetServiceAccountKeyRequest::internal_default_instance(),
      GetServiceAccountKeyRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetServiceAccountKeyRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceAccountKeyRequest, _internal_metadata_));
  ServiceAccountKey_descriptor_ = file->message_type(9);
  static const int ServiceAccountKey_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceAccountKey, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceAccountKey, private_key_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceAccountKey, key_algorithm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceAccountKey, private_key_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceAccountKey, public_key_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceAccountKey, valid_after_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceAccountKey, valid_before_time_),
  };
  ServiceAccountKey_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServiceAccountKey_descriptor_,
      ServiceAccountKey::internal_default_instance(),
      ServiceAccountKey_offsets_,
      -1,
      -1,
      -1,
      sizeof(ServiceAccountKey),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceAccountKey, _internal_metadata_));
  CreateServiceAccountKeyRequest_descriptor_ = file->message_type(10);
  static const int CreateServiceAccountKeyRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateServiceAccountKeyRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateServiceAccountKeyRequest, private_key_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateServiceAccountKeyRequest, key_algorithm_),
  };
  CreateServiceAccountKeyRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateServiceAccountKeyRequest_descriptor_,
      CreateServiceAccountKeyRequest::internal_default_instance(),
      CreateServiceAccountKeyRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateServiceAccountKeyRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateServiceAccountKeyRequest, _internal_metadata_));
  DeleteServiceAccountKeyRequest_descriptor_ = file->message_type(11);
  static const int DeleteServiceAccountKeyRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteServiceAccountKeyRequest, name_),
  };
  DeleteServiceAccountKeyRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeleteServiceAccountKeyRequest_descriptor_,
      DeleteServiceAccountKeyRequest::internal_default_instance(),
      DeleteServiceAccountKeyRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeleteServiceAccountKeyRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteServiceAccountKeyRequest, _internal_metadata_));
  SignBlobRequest_descriptor_ = file->message_type(12);
  static const int SignBlobRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignBlobRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignBlobRequest, bytes_to_sign_),
  };
  SignBlobRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SignBlobRequest_descriptor_,
      SignBlobRequest::internal_default_instance(),
      SignBlobRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SignBlobRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignBlobRequest, _internal_metadata_));
  SignBlobResponse_descriptor_ = file->message_type(13);
  static const int SignBlobResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignBlobResponse, key_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignBlobResponse, signature_),
  };
  SignBlobResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SignBlobResponse_descriptor_,
      SignBlobResponse::internal_default_instance(),
      SignBlobResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SignBlobResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignBlobResponse, _internal_metadata_));
  Role_descriptor_ = file->message_type(14);
  static const int Role_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, description_),
  };
  Role_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Role_descriptor_,
      Role::internal_default_instance(),
      Role_offsets_,
      -1,
      -1,
      -1,
      sizeof(Role),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, _internal_metadata_));
  QueryGrantableRolesRequest_descriptor_ = file->message_type(15);
  static const int QueryGrantableRolesRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGrantableRolesRequest, full_resource_name_),
  };
  QueryGrantableRolesRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryGrantableRolesRequest_descriptor_,
      QueryGrantableRolesRequest::internal_default_instance(),
      QueryGrantableRolesRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(QueryGrantableRolesRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGrantableRolesRequest, _internal_metadata_));
  QueryGrantableRolesResponse_descriptor_ = file->message_type(16);
  static const int QueryGrantableRolesResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGrantableRolesResponse, roles_),
  };
  QueryGrantableRolesResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryGrantableRolesResponse_descriptor_,
      QueryGrantableRolesResponse::internal_default_instance(),
      QueryGrantableRolesResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(QueryGrantableRolesResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGrantableRolesResponse, _internal_metadata_));
  ServiceAccountKeyAlgorithm_descriptor_ = file->enum_type(0);
  ServiceAccountPrivateKeyType_descriptor_ = file->enum_type(1);
  ServiceAccountPublicKeyType_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServiceAccount_descriptor_, ServiceAccount::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateServiceAccountRequest_descriptor_, CreateServiceAccountRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListServiceAccountsRequest_descriptor_, ListServiceAccountsRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListServiceAccountsResponse_descriptor_, ListServiceAccountsResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetServiceAccountRequest_descriptor_, GetServiceAccountRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeleteServiceAccountRequest_descriptor_, DeleteServiceAccountRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListServiceAccountKeysRequest_descriptor_, ListServiceAccountKeysRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListServiceAccountKeysResponse_descriptor_, ListServiceAccountKeysResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetServiceAccountKeyRequest_descriptor_, GetServiceAccountKeyRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServiceAccountKey_descriptor_, ServiceAccountKey::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateServiceAccountKeyRequest_descriptor_, CreateServiceAccountKeyRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeleteServiceAccountKeyRequest_descriptor_, DeleteServiceAccountKeyRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SignBlobRequest_descriptor_, SignBlobRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SignBlobResponse_descriptor_, SignBlobResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Role_descriptor_, Role::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryGrantableRolesRequest_descriptor_, QueryGrantableRolesRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryGrantableRolesResponse_descriptor_, QueryGrantableRolesResponse::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_google_2fiam_2fadmin_2fv1_2fiam_2eproto() {
  ServiceAccount_default_instance_.Shutdown();
  delete ServiceAccount_reflection_;
  CreateServiceAccountRequest_default_instance_.Shutdown();
  delete CreateServiceAccountRequest_reflection_;
  ListServiceAccountsRequest_default_instance_.Shutdown();
  delete ListServiceAccountsRequest_reflection_;
  ListServiceAccountsResponse_default_instance_.Shutdown();
  delete ListServiceAccountsResponse_reflection_;
  GetServiceAccountRequest_default_instance_.Shutdown();
  delete GetServiceAccountRequest_reflection_;
  DeleteServiceAccountRequest_default_instance_.Shutdown();
  delete DeleteServiceAccountRequest_reflection_;
  ListServiceAccountKeysRequest_default_instance_.Shutdown();
  delete ListServiceAccountKeysRequest_reflection_;
  ListServiceAccountKeysResponse_default_instance_.Shutdown();
  delete ListServiceAccountKeysResponse_reflection_;
  GetServiceAccountKeyRequest_default_instance_.Shutdown();
  delete GetServiceAccountKeyRequest_reflection_;
  ServiceAccountKey_default_instance_.Shutdown();
  delete ServiceAccountKey_reflection_;
  CreateServiceAccountKeyRequest_default_instance_.Shutdown();
  delete CreateServiceAccountKeyRequest_reflection_;
  DeleteServiceAccountKeyRequest_default_instance_.Shutdown();
  delete DeleteServiceAccountKeyRequest_reflection_;
  SignBlobRequest_default_instance_.Shutdown();
  delete SignBlobRequest_reflection_;
  SignBlobResponse_default_instance_.Shutdown();
  delete SignBlobResponse_reflection_;
  Role_default_instance_.Shutdown();
  delete Role_reflection_;
  QueryGrantableRolesRequest_default_instance_.Shutdown();
  delete QueryGrantableRolesRequest_reflection_;
  QueryGrantableRolesResponse_default_instance_.Shutdown();
  delete QueryGrantableRolesResponse_reflection_;
}

void protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::api::protobuf_InitDefaults_google_2fapi_2fannotations_2eproto();
  ::google::iam::v1::protobuf_InitDefaults_google_2fiam_2fv1_2fiam_5fpolicy_2eproto();
  ::google::iam::v1::protobuf_InitDefaults_google_2fiam_2fv1_2fpolicy_2eproto();
  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2fempty_2eproto();
  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2ffield_5fmask_2eproto();
  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2ftimestamp_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  ServiceAccount_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CreateServiceAccountRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ListServiceAccountsRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ListServiceAccountsResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  GetServiceAccountRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  DeleteServiceAccountRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ListServiceAccountKeysRequest_default_instance_.DefaultConstruct();
  ListServiceAccountKeysResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  GetServiceAccountKeyRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ServiceAccountKey_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CreateServiceAccountKeyRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  DeleteServiceAccountKeyRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SignBlobRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SignBlobResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Role_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  QueryGrantableRolesRequest_default_instance_.DefaultConstruct();
  QueryGrantableRolesResponse_default_instance_.DefaultConstruct();
  ServiceAccount_default_instance_.get_mutable()->InitAsDefaultInstance();
  CreateServiceAccountRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  ListServiceAccountsRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  ListServiceAccountsResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  GetServiceAccountRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  DeleteServiceAccountRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  ListServiceAccountKeysRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  ListServiceAccountKeysResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  GetServiceAccountKeyRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  ServiceAccountKey_default_instance_.get_mutable()->InitAsDefaultInstance();
  CreateServiceAccountKeyRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  DeleteServiceAccountKeyRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  SignBlobRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  SignBlobResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  Role_default_instance_.get_mutable()->InitAsDefaultInstance();
  QueryGrantableRolesRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  QueryGrantableRolesResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto_once_);
void protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto_once_,
                 &protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto_impl);
}
void protobuf_AddDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035google/iam/admin/v1/iam.proto\022\023google."
    "iam.admin.v1\032\034google/api/annotations.pro"
    "to\032\036google/iam/v1/iam_policy.proto\032\032goog"
    "le/iam/v1/policy.proto\032\033google/protobuf/"
    "empty.proto\032 google/protobuf/field_mask."
    "proto\032\037google/protobuf/timestamp.proto\"\222"
    "\001\n\016ServiceAccount\022\014\n\004name\030\001 \001(\t\022\022\n\nproje"
    "ct_id\030\002 \001(\t\022\021\n\tunique_id\030\004 \001(\t\022\r\n\005email\030"
    "\005 \001(\t\022\024\n\014display_name\030\006 \001(\t\022\014\n\004etag\030\007 \001("
    "\014\022\030\n\020oauth2_client_id\030\t \001(\t\"}\n\033CreateSer"
    "viceAccountRequest\022\014\n\004name\030\001 \001(\t\022\022\n\nacco"
    "unt_id\030\002 \001(\t\022<\n\017service_account\030\003 \001(\0132#."
    "google.iam.admin.v1.ServiceAccount\"Q\n\032Li"
    "stServiceAccountsRequest\022\014\n\004name\030\001 \001(\t\022\021"
    "\n\tpage_size\030\002 \001(\005\022\022\n\npage_token\030\003 \001(\t\"m\n"
    "\033ListServiceAccountsResponse\0225\n\010accounts"
    "\030\001 \003(\0132#.google.iam.admin.v1.ServiceAcco"
    "unt\022\027\n\017next_page_token\030\002 \001(\t\"(\n\030GetServi"
    "ceAccountRequest\022\014\n\004name\030\001 \001(\t\"+\n\033Delete"
    "ServiceAccountRequest\022\014\n\004name\030\001 \001(\t\"\307\001\n\035"
    "ListServiceAccountKeysRequest\022\014\n\004name\030\001 "
    "\001(\t\022M\n\tkey_types\030\002 \003(\0162:.google.iam.admi"
    "n.v1.ListServiceAccountKeysRequest.KeyTy"
    "pe\"I\n\007KeyType\022\030\n\024KEY_TYPE_UNSPECIFIED\020\000\022"
    "\020\n\014USER_MANAGED\020\001\022\022\n\016SYSTEM_MANAGED\020\002\"V\n"
    "\036ListServiceAccountKeysResponse\0224\n\004keys\030"
    "\001 \003(\0132&.google.iam.admin.v1.ServiceAccou"
    "ntKey\"v\n\033GetServiceAccountKeyRequest\022\014\n\004"
    "name\030\001 \001(\t\022I\n\017public_key_type\030\002 \001(\01620.go"
    "ogle.iam.admin.v1.ServiceAccountPublicKe"
    "yType\"\326\002\n\021ServiceAccountKey\022\014\n\004name\030\001 \001("
    "\t\022K\n\020private_key_type\030\002 \001(\01621.google.iam"
    ".admin.v1.ServiceAccountPrivateKeyType\022F"
    "\n\rkey_algorithm\030\010 \001(\0162/.google.iam.admin"
    ".v1.ServiceAccountKeyAlgorithm\022\030\n\020privat"
    "e_key_data\030\003 \001(\014\022\027\n\017public_key_data\030\007 \001("
    "\014\0224\n\020valid_after_time\030\004 \001(\0132\032.google.pro"
    "tobuf.Timestamp\0225\n\021valid_before_time\030\005 \001"
    "(\0132\032.google.protobuf.Timestamp\"\303\001\n\036Creat"
    "eServiceAccountKeyRequest\022\014\n\004name\030\001 \001(\t\022"
    "K\n\020private_key_type\030\002 \001(\01621.google.iam.a"
    "dmin.v1.ServiceAccountPrivateKeyType\022F\n\r"
    "key_algorithm\030\003 \001(\0162/.google.iam.admin.v"
    "1.ServiceAccountKeyAlgorithm\".\n\036DeleteSe"
    "rviceAccountKeyRequest\022\014\n\004name\030\001 \001(\t\"6\n\017"
    "SignBlobRequest\022\014\n\004name\030\001 \001(\t\022\025\n\rbytes_t"
    "o_sign\030\002 \001(\014\"5\n\020SignBlobResponse\022\016\n\006key_"
    "id\030\001 \001(\t\022\021\n\tsignature\030\002 \001(\014\"8\n\004Role\022\014\n\004n"
    "ame\030\001 \001(\t\022\r\n\005title\030\002 \001(\t\022\023\n\013description\030"
    "\003 \001(\t\"8\n\032QueryGrantableRolesRequest\022\032\n\022f"
    "ull_resource_name\030\001 \001(\t\"G\n\033QueryGrantabl"
    "eRolesResponse\022(\n\005roles\030\001 \003(\0132\031.google.i"
    "am.admin.v1.Role*a\n\032ServiceAccountKeyAlg"
    "orithm\022\027\n\023KEY_ALG_UNSPECIFIED\020\000\022\024\n\020KEY_A"
    "LG_RSA_1024\020\001\022\024\n\020KEY_ALG_RSA_2048\020\002*l\n\034S"
    "erviceAccountPrivateKeyType\022\024\n\020TYPE_UNSP"
    "ECIFIED\020\000\022\024\n\020TYPE_PKCS12_FILE\020\001\022 \n\034TYPE_"
    "GOOGLE_CREDENTIALS_FILE\020\002*]\n\033ServiceAcco"
    "untPublicKeyType\022\r\n\tTYPE_NONE\020\000\022\026\n\022TYPE_"
    "X509_PEM_FILE\020\001\022\027\n\023TYPE_RAW_PUBLIC_KEY\020\002"
    "2\341\021\n\003IAM\022\247\001\n\023ListServiceAccounts\022/.googl"
    "e.iam.admin.v1.ListServiceAccountsReques"
    "t\0320.google.iam.admin.v1.ListServiceAccou"
    "ntsResponse\"-\202\323\344\223\002\'\022%/v1/{name=projects/"
    "*}/serviceAccounts\022\230\001\n\021GetServiceAccount"
    "\022-.google.iam.admin.v1.GetServiceAccount"
    "Request\032#.google.iam.admin.v1.ServiceAcc"
    "ount\"/\202\323\344\223\002)\022\'/v1/{name=projects/*/servi"
    "ceAccounts/*}\022\237\001\n\024CreateServiceAccount\0220"
    ".google.iam.admin.v1.CreateServiceAccoun"
    "tRequest\032#.google.iam.admin.v1.ServiceAc"
    "count\"0\202\323\344\223\002*\"%/v1/{name=projects/*}/ser"
    "viceAccounts:\001*\022\224\001\n\024UpdateServiceAccount"
    "\022#.google.iam.admin.v1.ServiceAccount\032#."
    "google.iam.admin.v1.ServiceAccount\"2\202\323\344\223"
    "\002,\032\'/v1/{name=projects/*/serviceAccounts"
    "/*}:\001*\022\221\001\n\024DeleteServiceAccount\0220.google"
    ".iam.admin.v1.DeleteServiceAccountReques"
    "t\032\026.google.protobuf.Empty\"/\202\323\344\223\002)*\'/v1/{"
    "name=projects/*/serviceAccounts/*}\022\267\001\n\026L"
    "istServiceAccountKeys\0222.google.iam.admin"
    ".v1.ListServiceAccountKeysRequest\0323.goog"
    "le.iam.admin.v1.ListServiceAccountKeysRe"
    "sponse\"4\202\323\344\223\002.\022,/v1/{name=projects/*/ser"
    "viceAccounts/*}/keys\022\250\001\n\024GetServiceAccou"
    "ntKey\0220.google.iam.admin.v1.GetServiceAc"
    "countKeyRequest\032&.google.iam.admin.v1.Se"
    "rviceAccountKey\"6\202\323\344\223\0020\022./v1/{name=proje"
    "cts/*/serviceAccounts/*/keys/*}\022\257\001\n\027Crea"
    "teServiceAccountKey\0223.google.iam.admin.v"
    "1.CreateServiceAccountKeyRequest\032&.googl"
    "e.iam.admin.v1.ServiceAccountKey\"7\202\323\344\223\0021"
    "\",/v1/{name=projects/*/serviceAccounts/*"
    "}/keys:\001*\022\236\001\n\027DeleteServiceAccountKey\0223."
    "google.iam.admin.v1.DeleteServiceAccount"
    "KeyRequest\032\026.google.protobuf.Empty\"6\202\323\344\223"
    "\0020*./v1/{name=projects/*/serviceAccounts"
    "/*/keys/*}\022\224\001\n\010SignBlob\022$.google.iam.adm"
    "in.v1.SignBlobRequest\032%.google.iam.admin"
    ".v1.SignBlobResponse\";\202\323\344\223\0025\"0/v1/{name="
    "projects/*/serviceAccounts/*}:signBlob:\001"
    "*\022\213\001\n\014GetIamPolicy\022\".google.iam.v1.GetIa"
    "mPolicyRequest\032\025.google.iam.v1.Policy\"@\202"
    "\323\344\223\002:\"8/v1/{resource=projects/*/serviceA"
    "ccounts/*}:getIamPolicy\022\216\001\n\014SetIamPolicy"
    "\022\".google.iam.v1.SetIamPolicyRequest\032\025.g"
    "oogle.iam.v1.Policy\"C\202\323\344\223\002=\"8/v1/{resour"
    "ce=projects/*/serviceAccounts/*}:setIamP"
    "olicy:\001*\022\264\001\n\022TestIamPermissions\022(.google"
    ".iam.v1.TestIamPermissionsRequest\032).goog"
    "le.iam.v1.TestIamPermissionsResponse\"I\202\323"
    "\344\223\002C\">/v1/{resource=projects/*/serviceAc"
    "counts/*}:testIamPermissions:\001*\022\242\001\n\023Quer"
    "yGrantableRoles\022/.google.iam.admin.v1.Qu"
    "eryGrantableRolesRequest\0320.google.iam.ad"
    "min.v1.QueryGrantableRolesResponse\"(\202\323\344\223"
    "\002\"\"\035/v1/roles:queryGrantableRoles:\001*Bb\n\027"
    "com.google.iam.admin.v1B\010IamProtoP\001Z8goo"
    "gle.golang.org/genproto/googleapis/iam/a"
    "dmin/v1;admin\370\001\001b\006proto3", 4784);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/iam/admin/v1/iam.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_AddDesc_google_2fapi_2fannotations_2eproto();
  ::google::iam::v1::protobuf_AddDesc_google_2fiam_2fv1_2fiam_5fpolicy_2eproto();
  ::google::iam::v1::protobuf_AddDesc_google_2fiam_2fv1_2fpolicy_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fempty_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2ffield_5fmask_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2ftimestamp_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_google_2fiam_2fadmin_2fv1_2fiam_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto_once_);
void protobuf_AddDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto_once_,
                 &protobuf_AddDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_google_2fiam_2fadmin_2fv1_2fiam_2eproto {
  StaticDescriptorInitializer_google_2fiam_2fadmin_2fv1_2fiam_2eproto() {
    protobuf_AddDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  }
} static_descriptor_initializer_google_2fiam_2fadmin_2fv1_2fiam_2eproto_;
const ::google::protobuf::EnumDescriptor* ServiceAccountKeyAlgorithm_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceAccountKeyAlgorithm_descriptor_;
}
bool ServiceAccountKeyAlgorithm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ServiceAccountPrivateKeyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceAccountPrivateKeyType_descriptor_;
}
bool ServiceAccountPrivateKeyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ServiceAccountPublicKeyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceAccountPublicKeyType_descriptor_;
}
bool ServiceAccountPublicKeyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceAccount::kNameFieldNumber;
const int ServiceAccount::kProjectIdFieldNumber;
const int ServiceAccount::kUniqueIdFieldNumber;
const int ServiceAccount::kEmailFieldNumber;
const int ServiceAccount::kDisplayNameFieldNumber;
const int ServiceAccount::kEtagFieldNumber;
const int ServiceAccount::kOauth2ClientIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceAccount::ServiceAccount()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.ServiceAccount)
}
ServiceAccount::ServiceAccount(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.ServiceAccount)
}

void ServiceAccount::InitAsDefaultInstance() {
}

ServiceAccount::ServiceAccount(const ServiceAccount& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.ServiceAccount)
}

void ServiceAccount::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unique_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  etag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oauth2_client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ServiceAccount::~ServiceAccount() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.ServiceAccount)
  SharedDtor();
}

void ServiceAccount::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  project_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  unique_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  email_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  display_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  etag_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  oauth2_client_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void ServiceAccount::ArenaDtor(void* object) {
  ServiceAccount* _this = reinterpret_cast< ServiceAccount* >(object);
  (void)_this;
}
void ServiceAccount::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ServiceAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceAccount_descriptor_;
}

const ServiceAccount& ServiceAccount::default_instance() {
  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ServiceAccount> ServiceAccount_default_instance_;

ServiceAccount* ServiceAccount::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ServiceAccount>(arena);
}

void ServiceAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.ServiceAccount)
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  project_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  unique_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  email_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  display_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  etag_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  oauth2_client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool ServiceAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.ServiceAccount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.ServiceAccount.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_project_id;
        break;
      }

      // optional string project_id = 2;
      case 2: {
        if (tag == 18) {
         parse_project_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.ServiceAccount.project_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_unique_id;
        break;
      }

      // optional string unique_id = 4;
      case 4: {
        if (tag == 34) {
         parse_unique_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unique_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->unique_id().data(), this->unique_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.ServiceAccount.unique_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_email;
        break;
      }

      // optional string email = 5;
      case 5: {
        if (tag == 42) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.ServiceAccount.email"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_display_name;
        break;
      }

      // optional string display_name = 6;
      case 6: {
        if (tag == 50) {
         parse_display_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->display_name().data(), this->display_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.ServiceAccount.display_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_etag;
        break;
      }

      // optional bytes etag = 7;
      case 7: {
        if (tag == 58) {
         parse_etag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_etag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_oauth2_client_id;
        break;
      }

      // optional string oauth2_client_id = 9;
      case 9: {
        if (tag == 74) {
         parse_oauth2_client_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oauth2_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->oauth2_client_id().data(), this->oauth2_client_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.ServiceAccount.oauth2_client_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.ServiceAccount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.ServiceAccount)
  return false;
#undef DO_
}

void ServiceAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.ServiceAccount)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ServiceAccount.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string project_id = 2;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ServiceAccount.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->project_id(), output);
  }

  // optional string unique_id = 4;
  if (this->unique_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unique_id().data(), this->unique_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ServiceAccount.unique_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->unique_id(), output);
  }

  // optional string email = 5;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ServiceAccount.email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->email(), output);
  }

  // optional string display_name = 6;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ServiceAccount.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->display_name(), output);
  }

  // optional bytes etag = 7;
  if (this->etag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->etag(), output);
  }

  // optional string oauth2_client_id = 9;
  if (this->oauth2_client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->oauth2_client_id().data(), this->oauth2_client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ServiceAccount.oauth2_client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->oauth2_client_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.ServiceAccount)
}

::google::protobuf::uint8* ServiceAccount::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.ServiceAccount)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ServiceAccount.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string project_id = 2;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ServiceAccount.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->project_id(), target);
  }

  // optional string unique_id = 4;
  if (this->unique_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unique_id().data(), this->unique_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ServiceAccount.unique_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->unique_id(), target);
  }

  // optional string email = 5;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ServiceAccount.email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->email(), target);
  }

  // optional string display_name = 6;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ServiceAccount.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->display_name(), target);
  }

  // optional bytes etag = 7;
  if (this->etag().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->etag(), target);
  }

  // optional string oauth2_client_id = 9;
  if (this->oauth2_client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->oauth2_client_id().data(), this->oauth2_client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ServiceAccount.oauth2_client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->oauth2_client_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.ServiceAccount)
  return target;
}

size_t ServiceAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.ServiceAccount)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string project_id = 2;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // optional string unique_id = 4;
  if (this->unique_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->unique_id());
  }

  // optional string email = 5;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->email());
  }

  // optional string display_name = 6;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_name());
  }

  // optional bytes etag = 7;
  if (this->etag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->etag());
  }

  // optional string oauth2_client_id = 9;
  if (this->oauth2_client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->oauth2_client_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceAccount::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.ServiceAccount)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ServiceAccount* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServiceAccount>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.ServiceAccount)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.ServiceAccount)
    UnsafeMergeFrom(*source);
  }
}

void ServiceAccount::MergeFrom(const ServiceAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.ServiceAccount)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ServiceAccount::UnsafeMergeFrom(const ServiceAccount& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.project_id().size() > 0) {
    set_project_id(from.project_id());
  }
  if (from.unique_id().size() > 0) {
    set_unique_id(from.unique_id());
  }
  if (from.email().size() > 0) {
    set_email(from.email());
  }
  if (from.display_name().size() > 0) {
    set_display_name(from.display_name());
  }
  if (from.etag().size() > 0) {
    set_etag(from.etag());
  }
  if (from.oauth2_client_id().size() > 0) {
    set_oauth2_client_id(from.oauth2_client_id());
  }
}

void ServiceAccount::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.ServiceAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceAccount::CopyFrom(const ServiceAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.ServiceAccount)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ServiceAccount::IsInitialized() const {

  return true;
}

void ServiceAccount::Swap(ServiceAccount* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ServiceAccount temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ServiceAccount::UnsafeArenaSwap(ServiceAccount* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ServiceAccount::InternalSwap(ServiceAccount* other) {
  name_.Swap(&other->name_);
  project_id_.Swap(&other->project_id_);
  unique_id_.Swap(&other->unique_id_);
  email_.Swap(&other->email_);
  display_name_.Swap(&other->display_name_);
  etag_.Swap(&other->etag_);
  oauth2_client_id_.Swap(&other->oauth2_client_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServiceAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceAccount_descriptor_;
  metadata.reflection = ServiceAccount_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceAccount

// optional string name = 1;
void ServiceAccount::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ServiceAccount::name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ServiceAccount.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServiceAccount::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ServiceAccount.name)
}
void ServiceAccount::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ServiceAccount.name)
}
void ServiceAccount::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ServiceAccount.name)
}
::std::string* ServiceAccount::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ServiceAccount.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceAccount::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ServiceAccount.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceAccount::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ServiceAccount.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ServiceAccount::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ServiceAccount.name)
}
void ServiceAccount::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ServiceAccount.name)
}

// optional string project_id = 2;
void ServiceAccount::clear_project_id() {
  project_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ServiceAccount::project_id() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ServiceAccount.project_id)
  return project_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServiceAccount::set_project_id(const ::std::string& value) {
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ServiceAccount.project_id)
}
void ServiceAccount::set_project_id(const char* value) {
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ServiceAccount.project_id)
}
void ServiceAccount::set_project_id(const char* value,
    size_t size) {
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ServiceAccount.project_id)
}
::std::string* ServiceAccount::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ServiceAccount.project_id)
  return project_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceAccount::release_project_id() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ServiceAccount.project_id)
  
  return project_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceAccount::unsafe_arena_release_project_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ServiceAccount.project_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return project_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ServiceAccount::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ServiceAccount.project_id)
}
void ServiceAccount::unsafe_arena_set_allocated_project_id(
    ::std::string* project_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      project_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ServiceAccount.project_id)
}

// optional string unique_id = 4;
void ServiceAccount::clear_unique_id() {
  unique_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ServiceAccount::unique_id() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ServiceAccount.unique_id)
  return unique_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServiceAccount::set_unique_id(const ::std::string& value) {
  
  unique_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ServiceAccount.unique_id)
}
void ServiceAccount::set_unique_id(const char* value) {
  
  unique_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ServiceAccount.unique_id)
}
void ServiceAccount::set_unique_id(const char* value,
    size_t size) {
  
  unique_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ServiceAccount.unique_id)
}
::std::string* ServiceAccount::mutable_unique_id() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ServiceAccount.unique_id)
  return unique_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceAccount::release_unique_id() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ServiceAccount.unique_id)
  
  return unique_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceAccount::unsafe_arena_release_unique_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ServiceAccount.unique_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return unique_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ServiceAccount::set_allocated_unique_id(::std::string* unique_id) {
  if (unique_id != NULL) {
    
  } else {
    
  }
  unique_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unique_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ServiceAccount.unique_id)
}
void ServiceAccount::unsafe_arena_set_allocated_unique_id(
    ::std::string* unique_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (unique_id != NULL) {
    
  } else {
    
  }
  unique_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      unique_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ServiceAccount.unique_id)
}

// optional string email = 5;
void ServiceAccount::clear_email() {
  email_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ServiceAccount::email() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ServiceAccount.email)
  return email_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServiceAccount::set_email(const ::std::string& value) {
  
  email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ServiceAccount.email)
}
void ServiceAccount::set_email(const char* value) {
  
  email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ServiceAccount.email)
}
void ServiceAccount::set_email(const char* value,
    size_t size) {
  
  email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ServiceAccount.email)
}
::std::string* ServiceAccount::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ServiceAccount.email)
  return email_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceAccount::release_email() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ServiceAccount.email)
  
  return email_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceAccount::unsafe_arena_release_email() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ServiceAccount.email)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return email_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ServiceAccount::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ServiceAccount.email)
}
void ServiceAccount::unsafe_arena_set_allocated_email(
    ::std::string* email) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (email != NULL) {
    
  } else {
    
  }
  email_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      email, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ServiceAccount.email)
}

// optional string display_name = 6;
void ServiceAccount::clear_display_name() {
  display_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ServiceAccount::display_name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ServiceAccount.display_name)
  return display_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServiceAccount::set_display_name(const ::std::string& value) {
  
  display_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ServiceAccount.display_name)
}
void ServiceAccount::set_display_name(const char* value) {
  
  display_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ServiceAccount.display_name)
}
void ServiceAccount::set_display_name(const char* value,
    size_t size) {
  
  display_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ServiceAccount.display_name)
}
::std::string* ServiceAccount::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ServiceAccount.display_name)
  return display_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceAccount::release_display_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ServiceAccount.display_name)
  
  return display_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceAccount::unsafe_arena_release_display_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ServiceAccount.display_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return display_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ServiceAccount::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ServiceAccount.display_name)
}
void ServiceAccount::unsafe_arena_set_allocated_display_name(
    ::std::string* display_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      display_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ServiceAccount.display_name)
}

// optional bytes etag = 7;
void ServiceAccount::clear_etag() {
  etag_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ServiceAccount::etag() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ServiceAccount.etag)
  return etag_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServiceAccount::set_etag(const ::std::string& value) {
  
  etag_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ServiceAccount.etag)
}
void ServiceAccount::set_etag(const char* value) {
  
  etag_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ServiceAccount.etag)
}
void ServiceAccount::set_etag(const void* value,
    size_t size) {
  
  etag_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ServiceAccount.etag)
}
::std::string* ServiceAccount::mutable_etag() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ServiceAccount.etag)
  return etag_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceAccount::release_etag() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ServiceAccount.etag)
  
  return etag_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceAccount::unsafe_arena_release_etag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ServiceAccount.etag)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return etag_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ServiceAccount::set_allocated_etag(::std::string* etag) {
  if (etag != NULL) {
    
  } else {
    
  }
  etag_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), etag,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ServiceAccount.etag)
}
void ServiceAccount::unsafe_arena_set_allocated_etag(
    ::std::string* etag) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (etag != NULL) {
    
  } else {
    
  }
  etag_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      etag, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ServiceAccount.etag)
}

// optional string oauth2_client_id = 9;
void ServiceAccount::clear_oauth2_client_id() {
  oauth2_client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ServiceAccount::oauth2_client_id() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ServiceAccount.oauth2_client_id)
  return oauth2_client_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServiceAccount::set_oauth2_client_id(const ::std::string& value) {
  
  oauth2_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ServiceAccount.oauth2_client_id)
}
void ServiceAccount::set_oauth2_client_id(const char* value) {
  
  oauth2_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ServiceAccount.oauth2_client_id)
}
void ServiceAccount::set_oauth2_client_id(const char* value,
    size_t size) {
  
  oauth2_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ServiceAccount.oauth2_client_id)
}
::std::string* ServiceAccount::mutable_oauth2_client_id() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ServiceAccount.oauth2_client_id)
  return oauth2_client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceAccount::release_oauth2_client_id() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ServiceAccount.oauth2_client_id)
  
  return oauth2_client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceAccount::unsafe_arena_release_oauth2_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ServiceAccount.oauth2_client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return oauth2_client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ServiceAccount::set_allocated_oauth2_client_id(::std::string* oauth2_client_id) {
  if (oauth2_client_id != NULL) {
    
  } else {
    
  }
  oauth2_client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), oauth2_client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ServiceAccount.oauth2_client_id)
}
void ServiceAccount::unsafe_arena_set_allocated_oauth2_client_id(
    ::std::string* oauth2_client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (oauth2_client_id != NULL) {
    
  } else {
    
  }
  oauth2_client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      oauth2_client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ServiceAccount.oauth2_client_id)
}

inline const ServiceAccount* ServiceAccount::internal_default_instance() {
  return &ServiceAccount_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void CreateServiceAccountRequest::_slow_mutable_service_account() {
  service_account_ = ::google::protobuf::Arena::CreateMessage< ::google::iam::admin::v1::ServiceAccount >(
      GetArenaNoVirtual());
}
::google::iam::admin::v1::ServiceAccount* CreateServiceAccountRequest::_slow_release_service_account() {
  if (service_account_ == NULL) {
    return NULL;
  } else {
    ::google::iam::admin::v1::ServiceAccount* temp = new ::google::iam::admin::v1::ServiceAccount(*service_account_);
    service_account_ = NULL;
    return temp;
  }
}
::google::iam::admin::v1::ServiceAccount* CreateServiceAccountRequest::unsafe_arena_release_service_account() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.CreateServiceAccountRequest.service_account)
  
  ::google::iam::admin::v1::ServiceAccount* temp = service_account_;
  service_account_ = NULL;
  return temp;
}
void CreateServiceAccountRequest::_slow_set_allocated_service_account(
    ::google::protobuf::Arena* message_arena, ::google::iam::admin::v1::ServiceAccount** service_account) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*service_account) == NULL) {
      message_arena->Own(*service_account);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*service_account)) {
      ::google::iam::admin::v1::ServiceAccount* new_service_account = 
            ::google::protobuf::Arena::CreateMessage< ::google::iam::admin::v1::ServiceAccount >(
            message_arena);
      new_service_account->CopyFrom(**service_account);
      *service_account = new_service_account;
    }
}
void CreateServiceAccountRequest::unsafe_arena_set_allocated_service_account(
    ::google::iam::admin::v1::ServiceAccount* service_account) {
  if (GetArenaNoVirtual() == NULL) {
    delete service_account_;
  }
  service_account_ = service_account;
  if (service_account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.CreateServiceAccountRequest.service_account)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateServiceAccountRequest::kNameFieldNumber;
const int CreateServiceAccountRequest::kAccountIdFieldNumber;
const int CreateServiceAccountRequest::kServiceAccountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateServiceAccountRequest::CreateServiceAccountRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.CreateServiceAccountRequest)
}
CreateServiceAccountRequest::CreateServiceAccountRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.CreateServiceAccountRequest)
}

void CreateServiceAccountRequest::InitAsDefaultInstance() {
  service_account_ = const_cast< ::google::iam::admin::v1::ServiceAccount*>(
      ::google::iam::admin::v1::ServiceAccount::internal_default_instance());
}

CreateServiceAccountRequest::CreateServiceAccountRequest(const CreateServiceAccountRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.CreateServiceAccountRequest)
}

void CreateServiceAccountRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_account_ = NULL;
  _cached_size_ = 0;
}

CreateServiceAccountRequest::~CreateServiceAccountRequest() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.CreateServiceAccountRequest)
  SharedDtor();
}

void CreateServiceAccountRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  account_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != &CreateServiceAccountRequest_default_instance_.get()) {
    delete service_account_;
  }
}

void CreateServiceAccountRequest::ArenaDtor(void* object) {
  CreateServiceAccountRequest* _this = reinterpret_cast< CreateServiceAccountRequest* >(object);
  (void)_this;
}
void CreateServiceAccountRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CreateServiceAccountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateServiceAccountRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateServiceAccountRequest_descriptor_;
}

const CreateServiceAccountRequest& CreateServiceAccountRequest::default_instance() {
  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CreateServiceAccountRequest> CreateServiceAccountRequest_default_instance_;

CreateServiceAccountRequest* CreateServiceAccountRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CreateServiceAccountRequest>(arena);
}

void CreateServiceAccountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.CreateServiceAccountRequest)
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  account_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && service_account_ != NULL) delete service_account_;
  service_account_ = NULL;
}

bool CreateServiceAccountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.CreateServiceAccountRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.CreateServiceAccountRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_account_id;
        break;
      }

      // optional string account_id = 2;
      case 2: {
        if (tag == 18) {
         parse_account_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account_id().data(), this->account_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.CreateServiceAccountRequest.account_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_service_account;
        break;
      }

      // optional .google.iam.admin.v1.ServiceAccount service_account = 3;
      case 3: {
        if (tag == 26) {
         parse_service_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_service_account()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.CreateServiceAccountRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.CreateServiceAccountRequest)
  return false;
#undef DO_
}

void CreateServiceAccountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.CreateServiceAccountRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.CreateServiceAccountRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string account_id = 2;
  if (this->account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_id().data(), this->account_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.CreateServiceAccountRequest.account_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->account_id(), output);
  }

  // optional .google.iam.admin.v1.ServiceAccount service_account = 3;
  if (this->has_service_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->service_account_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.CreateServiceAccountRequest)
}

::google::protobuf::uint8* CreateServiceAccountRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.CreateServiceAccountRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.CreateServiceAccountRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string account_id = 2;
  if (this->account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_id().data(), this->account_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.CreateServiceAccountRequest.account_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account_id(), target);
  }

  // optional .google.iam.admin.v1.ServiceAccount service_account = 3;
  if (this->has_service_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->service_account_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.CreateServiceAccountRequest)
  return target;
}

size_t CreateServiceAccountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.CreateServiceAccountRequest)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string account_id = 2;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account_id());
  }

  // optional .google.iam.admin.v1.ServiceAccount service_account = 3;
  if (this->has_service_account()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->service_account_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateServiceAccountRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.CreateServiceAccountRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CreateServiceAccountRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateServiceAccountRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.CreateServiceAccountRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.CreateServiceAccountRequest)
    UnsafeMergeFrom(*source);
  }
}

void CreateServiceAccountRequest::MergeFrom(const CreateServiceAccountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.CreateServiceAccountRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CreateServiceAccountRequest::UnsafeMergeFrom(const CreateServiceAccountRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.account_id().size() > 0) {
    set_account_id(from.account_id());
  }
  if (from.has_service_account()) {
    mutable_service_account()->::google::iam::admin::v1::ServiceAccount::MergeFrom(from.service_account());
  }
}

void CreateServiceAccountRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.CreateServiceAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateServiceAccountRequest::CopyFrom(const CreateServiceAccountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.CreateServiceAccountRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CreateServiceAccountRequest::IsInitialized() const {

  return true;
}

void CreateServiceAccountRequest::Swap(CreateServiceAccountRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CreateServiceAccountRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void CreateServiceAccountRequest::UnsafeArenaSwap(CreateServiceAccountRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CreateServiceAccountRequest::InternalSwap(CreateServiceAccountRequest* other) {
  name_.Swap(&other->name_);
  account_id_.Swap(&other->account_id_);
  std::swap(service_account_, other->service_account_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateServiceAccountRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateServiceAccountRequest_descriptor_;
  metadata.reflection = CreateServiceAccountRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateServiceAccountRequest

// optional string name = 1;
void CreateServiceAccountRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& CreateServiceAccountRequest::name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.CreateServiceAccountRequest.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateServiceAccountRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.CreateServiceAccountRequest.name)
}
void CreateServiceAccountRequest::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.CreateServiceAccountRequest.name)
}
void CreateServiceAccountRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.CreateServiceAccountRequest.name)
}
::std::string* CreateServiceAccountRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.CreateServiceAccountRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CreateServiceAccountRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.CreateServiceAccountRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CreateServiceAccountRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.CreateServiceAccountRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void CreateServiceAccountRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.CreateServiceAccountRequest.name)
}
void CreateServiceAccountRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.CreateServiceAccountRequest.name)
}

// optional string account_id = 2;
void CreateServiceAccountRequest::clear_account_id() {
  account_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& CreateServiceAccountRequest::account_id() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.CreateServiceAccountRequest.account_id)
  return account_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateServiceAccountRequest::set_account_id(const ::std::string& value) {
  
  account_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.CreateServiceAccountRequest.account_id)
}
void CreateServiceAccountRequest::set_account_id(const char* value) {
  
  account_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.CreateServiceAccountRequest.account_id)
}
void CreateServiceAccountRequest::set_account_id(const char* value,
    size_t size) {
  
  account_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.CreateServiceAccountRequest.account_id)
}
::std::string* CreateServiceAccountRequest::mutable_account_id() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.CreateServiceAccountRequest.account_id)
  return account_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CreateServiceAccountRequest::release_account_id() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.CreateServiceAccountRequest.account_id)
  
  return account_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CreateServiceAccountRequest::unsafe_arena_release_account_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.CreateServiceAccountRequest.account_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return account_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void CreateServiceAccountRequest::set_allocated_account_id(::std::string* account_id) {
  if (account_id != NULL) {
    
  } else {
    
  }
  account_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.CreateServiceAccountRequest.account_id)
}
void CreateServiceAccountRequest::unsafe_arena_set_allocated_account_id(
    ::std::string* account_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (account_id != NULL) {
    
  } else {
    
  }
  account_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      account_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.CreateServiceAccountRequest.account_id)
}

// optional .google.iam.admin.v1.ServiceAccount service_account = 3;
bool CreateServiceAccountRequest::has_service_account() const {
  return this != internal_default_instance() && service_account_ != NULL;
}
void CreateServiceAccountRequest::clear_service_account() {
  if (GetArenaNoVirtual() == NULL && service_account_ != NULL) delete service_account_;
  service_account_ = NULL;
}
const ::google::iam::admin::v1::ServiceAccount& CreateServiceAccountRequest::service_account() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.CreateServiceAccountRequest.service_account)
  return service_account_ != NULL ? *service_account_
                         : *::google::iam::admin::v1::ServiceAccount::internal_default_instance();
}
::google::iam::admin::v1::ServiceAccount* CreateServiceAccountRequest::mutable_service_account() {
  
  if (service_account_ == NULL) {
    _slow_mutable_service_account();
  }
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.CreateServiceAccountRequest.service_account)
  return service_account_;
}
::google::iam::admin::v1::ServiceAccount* CreateServiceAccountRequest::release_service_account() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.CreateServiceAccountRequest.service_account)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_service_account();
  } else {
    ::google::iam::admin::v1::ServiceAccount* temp = service_account_;
    service_account_ = NULL;
    return temp;
  }
}
 void CreateServiceAccountRequest::set_allocated_service_account(::google::iam::admin::v1::ServiceAccount* service_account) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete service_account_;
  }
  if (service_account != NULL) {
    _slow_set_allocated_service_account(message_arena, &service_account);
  }
  service_account_ = service_account;
  if (service_account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.CreateServiceAccountRequest.service_account)
}

inline const CreateServiceAccountRequest* CreateServiceAccountRequest::internal_default_instance() {
  return &CreateServiceAccountRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListServiceAccountsRequest::kNameFieldNumber;
const int ListServiceAccountsRequest::kPageSizeFieldNumber;
const int ListServiceAccountsRequest::kPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListServiceAccountsRequest::ListServiceAccountsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.ListServiceAccountsRequest)
}
ListServiceAccountsRequest::ListServiceAccountsRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.ListServiceAccountsRequest)
}

void ListServiceAccountsRequest::InitAsDefaultInstance() {
}

ListServiceAccountsRequest::ListServiceAccountsRequest(const ListServiceAccountsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.ListServiceAccountsRequest)
}

void ListServiceAccountsRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
  _cached_size_ = 0;
}

ListServiceAccountsRequest::~ListServiceAccountsRequest() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.ListServiceAccountsRequest)
  SharedDtor();
}

void ListServiceAccountsRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  page_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void ListServiceAccountsRequest::ArenaDtor(void* object) {
  ListServiceAccountsRequest* _this = reinterpret_cast< ListServiceAccountsRequest* >(object);
  (void)_this;
}
void ListServiceAccountsRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ListServiceAccountsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListServiceAccountsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListServiceAccountsRequest_descriptor_;
}

const ListServiceAccountsRequest& ListServiceAccountsRequest::default_instance() {
  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ListServiceAccountsRequest> ListServiceAccountsRequest_default_instance_;

ListServiceAccountsRequest* ListServiceAccountsRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ListServiceAccountsRequest>(arena);
}

void ListServiceAccountsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.ListServiceAccountsRequest)
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_size_ = 0;
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool ListServiceAccountsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.ListServiceAccountsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.ListServiceAccountsRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_page_size;
        break;
      }

      // optional int32 page_size = 2;
      case 2: {
        if (tag == 16) {
         parse_page_size:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_page_token;
        break;
      }

      // optional string page_token = 3;
      case 3: {
        if (tag == 26) {
         parse_page_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), this->page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.ListServiceAccountsRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.ListServiceAccountsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.ListServiceAccountsRequest)
  return false;
#undef DO_
}

void ListServiceAccountsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.ListServiceAccountsRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ListServiceAccountsRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 page_size = 2;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page_size(), output);
  }

  // optional string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ListServiceAccountsRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.ListServiceAccountsRequest)
}

::google::protobuf::uint8* ListServiceAccountsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.ListServiceAccountsRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ListServiceAccountsRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 page_size = 2;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page_size(), target);
  }

  // optional string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ListServiceAccountsRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.ListServiceAccountsRequest)
  return target;
}

size_t ListServiceAccountsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.ListServiceAccountsRequest)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional int32 page_size = 2;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  // optional string page_token = 3;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListServiceAccountsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.ListServiceAccountsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListServiceAccountsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListServiceAccountsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.ListServiceAccountsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.ListServiceAccountsRequest)
    UnsafeMergeFrom(*source);
  }
}

void ListServiceAccountsRequest::MergeFrom(const ListServiceAccountsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.ListServiceAccountsRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ListServiceAccountsRequest::UnsafeMergeFrom(const ListServiceAccountsRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
  if (from.page_token().size() > 0) {
    set_page_token(from.page_token());
  }
}

void ListServiceAccountsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.ListServiceAccountsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListServiceAccountsRequest::CopyFrom(const ListServiceAccountsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.ListServiceAccountsRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ListServiceAccountsRequest::IsInitialized() const {

  return true;
}

void ListServiceAccountsRequest::Swap(ListServiceAccountsRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListServiceAccountsRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ListServiceAccountsRequest::UnsafeArenaSwap(ListServiceAccountsRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListServiceAccountsRequest::InternalSwap(ListServiceAccountsRequest* other) {
  name_.Swap(&other->name_);
  std::swap(page_size_, other->page_size_);
  page_token_.Swap(&other->page_token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListServiceAccountsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListServiceAccountsRequest_descriptor_;
  metadata.reflection = ListServiceAccountsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListServiceAccountsRequest

// optional string name = 1;
void ListServiceAccountsRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ListServiceAccountsRequest::name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ListServiceAccountsRequest.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListServiceAccountsRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ListServiceAccountsRequest.name)
}
void ListServiceAccountsRequest::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ListServiceAccountsRequest.name)
}
void ListServiceAccountsRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ListServiceAccountsRequest.name)
}
::std::string* ListServiceAccountsRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ListServiceAccountsRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListServiceAccountsRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ListServiceAccountsRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListServiceAccountsRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ListServiceAccountsRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ListServiceAccountsRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ListServiceAccountsRequest.name)
}
void ListServiceAccountsRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ListServiceAccountsRequest.name)
}

// optional int32 page_size = 2;
void ListServiceAccountsRequest::clear_page_size() {
  page_size_ = 0;
}
::google::protobuf::int32 ListServiceAccountsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ListServiceAccountsRequest.page_size)
  return page_size_;
}
void ListServiceAccountsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ListServiceAccountsRequest.page_size)
}

// optional string page_token = 3;
void ListServiceAccountsRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ListServiceAccountsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ListServiceAccountsRequest.page_token)
  return page_token_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListServiceAccountsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ListServiceAccountsRequest.page_token)
}
void ListServiceAccountsRequest::set_page_token(const char* value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ListServiceAccountsRequest.page_token)
}
void ListServiceAccountsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ListServiceAccountsRequest.page_token)
}
::std::string* ListServiceAccountsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ListServiceAccountsRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListServiceAccountsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ListServiceAccountsRequest.page_token)
  
  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListServiceAccountsRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ListServiceAccountsRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ListServiceAccountsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ListServiceAccountsRequest.page_token)
}
void ListServiceAccountsRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ListServiceAccountsRequest.page_token)
}

inline const ListServiceAccountsRequest* ListServiceAccountsRequest::internal_default_instance() {
  return &ListServiceAccountsRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListServiceAccountsResponse::kAccountsFieldNumber;
const int ListServiceAccountsResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListServiceAccountsResponse::ListServiceAccountsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.ListServiceAccountsResponse)
}
ListServiceAccountsResponse::ListServiceAccountsResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  accounts_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.ListServiceAccountsResponse)
}

void ListServiceAccountsResponse::InitAsDefaultInstance() {
}

ListServiceAccountsResponse::ListServiceAccountsResponse(const ListServiceAccountsResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.ListServiceAccountsResponse)
}

void ListServiceAccountsResponse::SharedCtor() {
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ListServiceAccountsResponse::~ListServiceAccountsResponse() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.ListServiceAccountsResponse)
  SharedDtor();
}

void ListServiceAccountsResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  next_page_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void ListServiceAccountsResponse::ArenaDtor(void* object) {
  ListServiceAccountsResponse* _this = reinterpret_cast< ListServiceAccountsResponse* >(object);
  (void)_this;
}
void ListServiceAccountsResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ListServiceAccountsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListServiceAccountsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListServiceAccountsResponse_descriptor_;
}

const ListServiceAccountsResponse& ListServiceAccountsResponse::default_instance() {
  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ListServiceAccountsResponse> ListServiceAccountsResponse_default_instance_;

ListServiceAccountsResponse* ListServiceAccountsResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ListServiceAccountsResponse>(arena);
}

void ListServiceAccountsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.ListServiceAccountsResponse)
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  accounts_.Clear();
}

bool ListServiceAccountsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.ListServiceAccountsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.iam.admin.v1.ServiceAccount accounts = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_accounts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_accounts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_accounts;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_next_page_token;
        break;
      }

      // optional string next_page_token = 2;
      case 2: {
        if (tag == 18) {
         parse_next_page_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), this->next_page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.ListServiceAccountsResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.ListServiceAccountsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.ListServiceAccountsResponse)
  return false;
#undef DO_
}

void ListServiceAccountsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.ListServiceAccountsResponse)
  // repeated .google.iam.admin.v1.ServiceAccount accounts = 1;
  for (unsigned int i = 0, n = this->accounts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->accounts(i), output);
  }

  // optional string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ListServiceAccountsResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.ListServiceAccountsResponse)
}

::google::protobuf::uint8* ListServiceAccountsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.ListServiceAccountsResponse)
  // repeated .google.iam.admin.v1.ServiceAccount accounts = 1;
  for (unsigned int i = 0, n = this->accounts_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->accounts(i), false, target);
  }

  // optional string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ListServiceAccountsResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.ListServiceAccountsResponse)
  return target;
}

size_t ListServiceAccountsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.ListServiceAccountsResponse)
  size_t total_size = 0;

  // optional string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  // repeated .google.iam.admin.v1.ServiceAccount accounts = 1;
  {
    unsigned int count = this->accounts_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->accounts(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListServiceAccountsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.ListServiceAccountsResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListServiceAccountsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListServiceAccountsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.ListServiceAccountsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.ListServiceAccountsResponse)
    UnsafeMergeFrom(*source);
  }
}

void ListServiceAccountsResponse::MergeFrom(const ListServiceAccountsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.ListServiceAccountsResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ListServiceAccountsResponse::UnsafeMergeFrom(const ListServiceAccountsResponse& from) {
  GOOGLE_DCHECK(&from != this);
  accounts_.MergeFrom(from.accounts_);
  if (from.next_page_token().size() > 0) {
    set_next_page_token(from.next_page_token());
  }
}

void ListServiceAccountsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.ListServiceAccountsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListServiceAccountsResponse::CopyFrom(const ListServiceAccountsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.ListServiceAccountsResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ListServiceAccountsResponse::IsInitialized() const {

  return true;
}

void ListServiceAccountsResponse::Swap(ListServiceAccountsResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListServiceAccountsResponse temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ListServiceAccountsResponse::UnsafeArenaSwap(ListServiceAccountsResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListServiceAccountsResponse::InternalSwap(ListServiceAccountsResponse* other) {
  accounts_.UnsafeArenaSwap(&other->accounts_);
  next_page_token_.Swap(&other->next_page_token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListServiceAccountsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListServiceAccountsResponse_descriptor_;
  metadata.reflection = ListServiceAccountsResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListServiceAccountsResponse

// repeated .google.iam.admin.v1.ServiceAccount accounts = 1;
int ListServiceAccountsResponse::accounts_size() const {
  return accounts_.size();
}
void ListServiceAccountsResponse::clear_accounts() {
  accounts_.Clear();
}
const ::google::iam::admin::v1::ServiceAccount& ListServiceAccountsResponse::accounts(int index) const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ListServiceAccountsResponse.accounts)
  return accounts_.Get(index);
}
::google::iam::admin::v1::ServiceAccount* ListServiceAccountsResponse::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ListServiceAccountsResponse.accounts)
  return accounts_.Mutable(index);
}
::google::iam::admin::v1::ServiceAccount* ListServiceAccountsResponse::add_accounts() {
  // @@protoc_insertion_point(field_add:google.iam.admin.v1.ListServiceAccountsResponse.accounts)
  return accounts_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::ServiceAccount >*
ListServiceAccountsResponse::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:google.iam.admin.v1.ListServiceAccountsResponse.accounts)
  return &accounts_;
}
const ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::ServiceAccount >&
ListServiceAccountsResponse::accounts() const {
  // @@protoc_insertion_point(field_list:google.iam.admin.v1.ListServiceAccountsResponse.accounts)
  return accounts_;
}

// optional string next_page_token = 2;
void ListServiceAccountsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ListServiceAccountsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ListServiceAccountsResponse.next_page_token)
  return next_page_token_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListServiceAccountsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ListServiceAccountsResponse.next_page_token)
}
void ListServiceAccountsResponse::set_next_page_token(const char* value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ListServiceAccountsResponse.next_page_token)
}
void ListServiceAccountsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ListServiceAccountsResponse.next_page_token)
}
::std::string* ListServiceAccountsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ListServiceAccountsResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListServiceAccountsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ListServiceAccountsResponse.next_page_token)
  
  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListServiceAccountsResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ListServiceAccountsResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ListServiceAccountsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ListServiceAccountsResponse.next_page_token)
}
void ListServiceAccountsResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ListServiceAccountsResponse.next_page_token)
}

inline const ListServiceAccountsResponse* ListServiceAccountsResponse::internal_default_instance() {
  return &ListServiceAccountsResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetServiceAccountRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetServiceAccountRequest::GetServiceAccountRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.GetServiceAccountRequest)
}
GetServiceAccountRequest::GetServiceAccountRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.GetServiceAccountRequest)
}

void GetServiceAccountRequest::InitAsDefaultInstance() {
}

GetServiceAccountRequest::GetServiceAccountRequest(const GetServiceAccountRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.GetServiceAccountRequest)
}

void GetServiceAccountRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetServiceAccountRequest::~GetServiceAccountRequest() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.GetServiceAccountRequest)
  SharedDtor();
}

void GetServiceAccountRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void GetServiceAccountRequest::ArenaDtor(void* object) {
  GetServiceAccountRequest* _this = reinterpret_cast< GetServiceAccountRequest* >(object);
  (void)_this;
}
void GetServiceAccountRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetServiceAccountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetServiceAccountRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetServiceAccountRequest_descriptor_;
}

const GetServiceAccountRequest& GetServiceAccountRequest::default_instance() {
  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetServiceAccountRequest> GetServiceAccountRequest_default_instance_;

GetServiceAccountRequest* GetServiceAccountRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetServiceAccountRequest>(arena);
}

void GetServiceAccountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.GetServiceAccountRequest)
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool GetServiceAccountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.GetServiceAccountRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.GetServiceAccountRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.GetServiceAccountRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.GetServiceAccountRequest)
  return false;
#undef DO_
}

void GetServiceAccountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.GetServiceAccountRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.GetServiceAccountRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.GetServiceAccountRequest)
}

::google::protobuf::uint8* GetServiceAccountRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.GetServiceAccountRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.GetServiceAccountRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.GetServiceAccountRequest)
  return target;
}

size_t GetServiceAccountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.GetServiceAccountRequest)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServiceAccountRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.GetServiceAccountRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetServiceAccountRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetServiceAccountRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.GetServiceAccountRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.GetServiceAccountRequest)
    UnsafeMergeFrom(*source);
  }
}

void GetServiceAccountRequest::MergeFrom(const GetServiceAccountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.GetServiceAccountRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetServiceAccountRequest::UnsafeMergeFrom(const GetServiceAccountRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
}

void GetServiceAccountRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.GetServiceAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceAccountRequest::CopyFrom(const GetServiceAccountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.GetServiceAccountRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetServiceAccountRequest::IsInitialized() const {

  return true;
}

void GetServiceAccountRequest::Swap(GetServiceAccountRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetServiceAccountRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void GetServiceAccountRequest::UnsafeArenaSwap(GetServiceAccountRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetServiceAccountRequest::InternalSwap(GetServiceAccountRequest* other) {
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetServiceAccountRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetServiceAccountRequest_descriptor_;
  metadata.reflection = GetServiceAccountRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetServiceAccountRequest

// optional string name = 1;
void GetServiceAccountRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetServiceAccountRequest::name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.GetServiceAccountRequest.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetServiceAccountRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.GetServiceAccountRequest.name)
}
void GetServiceAccountRequest::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.GetServiceAccountRequest.name)
}
void GetServiceAccountRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.GetServiceAccountRequest.name)
}
::std::string* GetServiceAccountRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.GetServiceAccountRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetServiceAccountRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.GetServiceAccountRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetServiceAccountRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.GetServiceAccountRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetServiceAccountRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.GetServiceAccountRequest.name)
}
void GetServiceAccountRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.GetServiceAccountRequest.name)
}

inline const GetServiceAccountRequest* GetServiceAccountRequest::internal_default_instance() {
  return &GetServiceAccountRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteServiceAccountRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteServiceAccountRequest::DeleteServiceAccountRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.DeleteServiceAccountRequest)
}
DeleteServiceAccountRequest::DeleteServiceAccountRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.DeleteServiceAccountRequest)
}

void DeleteServiceAccountRequest::InitAsDefaultInstance() {
}

DeleteServiceAccountRequest::DeleteServiceAccountRequest(const DeleteServiceAccountRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.DeleteServiceAccountRequest)
}

void DeleteServiceAccountRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DeleteServiceAccountRequest::~DeleteServiceAccountRequest() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.DeleteServiceAccountRequest)
  SharedDtor();
}

void DeleteServiceAccountRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void DeleteServiceAccountRequest::ArenaDtor(void* object) {
  DeleteServiceAccountRequest* _this = reinterpret_cast< DeleteServiceAccountRequest* >(object);
  (void)_this;
}
void DeleteServiceAccountRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DeleteServiceAccountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteServiceAccountRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteServiceAccountRequest_descriptor_;
}

const DeleteServiceAccountRequest& DeleteServiceAccountRequest::default_instance() {
  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DeleteServiceAccountRequest> DeleteServiceAccountRequest_default_instance_;

DeleteServiceAccountRequest* DeleteServiceAccountRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DeleteServiceAccountRequest>(arena);
}

void DeleteServiceAccountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.DeleteServiceAccountRequest)
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool DeleteServiceAccountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.DeleteServiceAccountRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.DeleteServiceAccountRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.DeleteServiceAccountRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.DeleteServiceAccountRequest)
  return false;
#undef DO_
}

void DeleteServiceAccountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.DeleteServiceAccountRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.DeleteServiceAccountRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.DeleteServiceAccountRequest)
}

::google::protobuf::uint8* DeleteServiceAccountRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.DeleteServiceAccountRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.DeleteServiceAccountRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.DeleteServiceAccountRequest)
  return target;
}

size_t DeleteServiceAccountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.DeleteServiceAccountRequest)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteServiceAccountRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.DeleteServiceAccountRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DeleteServiceAccountRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteServiceAccountRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.DeleteServiceAccountRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.DeleteServiceAccountRequest)
    UnsafeMergeFrom(*source);
  }
}

void DeleteServiceAccountRequest::MergeFrom(const DeleteServiceAccountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.DeleteServiceAccountRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DeleteServiceAccountRequest::UnsafeMergeFrom(const DeleteServiceAccountRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
}

void DeleteServiceAccountRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.DeleteServiceAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteServiceAccountRequest::CopyFrom(const DeleteServiceAccountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.DeleteServiceAccountRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DeleteServiceAccountRequest::IsInitialized() const {

  return true;
}

void DeleteServiceAccountRequest::Swap(DeleteServiceAccountRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeleteServiceAccountRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void DeleteServiceAccountRequest::UnsafeArenaSwap(DeleteServiceAccountRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeleteServiceAccountRequest::InternalSwap(DeleteServiceAccountRequest* other) {
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteServiceAccountRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteServiceAccountRequest_descriptor_;
  metadata.reflection = DeleteServiceAccountRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteServiceAccountRequest

// optional string name = 1;
void DeleteServiceAccountRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& DeleteServiceAccountRequest::name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.DeleteServiceAccountRequest.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteServiceAccountRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.DeleteServiceAccountRequest.name)
}
void DeleteServiceAccountRequest::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.DeleteServiceAccountRequest.name)
}
void DeleteServiceAccountRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.DeleteServiceAccountRequest.name)
}
::std::string* DeleteServiceAccountRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.DeleteServiceAccountRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeleteServiceAccountRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.DeleteServiceAccountRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeleteServiceAccountRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.DeleteServiceAccountRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void DeleteServiceAccountRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.DeleteServiceAccountRequest.name)
}
void DeleteServiceAccountRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.DeleteServiceAccountRequest.name)
}

inline const DeleteServiceAccountRequest* DeleteServiceAccountRequest::internal_default_instance() {
  return &DeleteServiceAccountRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ListServiceAccountKeysRequest_KeyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListServiceAccountKeysRequest_KeyType_descriptor_;
}
bool ListServiceAccountKeysRequest_KeyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ListServiceAccountKeysRequest_KeyType ListServiceAccountKeysRequest::KEY_TYPE_UNSPECIFIED;
const ListServiceAccountKeysRequest_KeyType ListServiceAccountKeysRequest::USER_MANAGED;
const ListServiceAccountKeysRequest_KeyType ListServiceAccountKeysRequest::SYSTEM_MANAGED;
const ListServiceAccountKeysRequest_KeyType ListServiceAccountKeysRequest::KeyType_MIN;
const ListServiceAccountKeysRequest_KeyType ListServiceAccountKeysRequest::KeyType_MAX;
const int ListServiceAccountKeysRequest::KeyType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListServiceAccountKeysRequest::kNameFieldNumber;
const int ListServiceAccountKeysRequest::kKeyTypesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListServiceAccountKeysRequest::ListServiceAccountKeysRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.ListServiceAccountKeysRequest)
}
ListServiceAccountKeysRequest::ListServiceAccountKeysRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  key_types_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.ListServiceAccountKeysRequest)
}

void ListServiceAccountKeysRequest::InitAsDefaultInstance() {
}

ListServiceAccountKeysRequest::ListServiceAccountKeysRequest(const ListServiceAccountKeysRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.ListServiceAccountKeysRequest)
}

void ListServiceAccountKeysRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ListServiceAccountKeysRequest::~ListServiceAccountKeysRequest() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.ListServiceAccountKeysRequest)
  SharedDtor();
}

void ListServiceAccountKeysRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void ListServiceAccountKeysRequest::ArenaDtor(void* object) {
  ListServiceAccountKeysRequest* _this = reinterpret_cast< ListServiceAccountKeysRequest* >(object);
  (void)_this;
}
void ListServiceAccountKeysRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ListServiceAccountKeysRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListServiceAccountKeysRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListServiceAccountKeysRequest_descriptor_;
}

const ListServiceAccountKeysRequest& ListServiceAccountKeysRequest::default_instance() {
  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ListServiceAccountKeysRequest> ListServiceAccountKeysRequest_default_instance_;

ListServiceAccountKeysRequest* ListServiceAccountKeysRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ListServiceAccountKeysRequest>(arena);
}

void ListServiceAccountKeysRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.ListServiceAccountKeysRequest)
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  key_types_.Clear();
}

bool ListServiceAccountKeysRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.ListServiceAccountKeysRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.ListServiceAccountKeysRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key_types;
        break;
      }

      // repeated .google.iam.admin.v1.ListServiceAccountKeysRequest.KeyType key_types = 2;
      case 2: {
        if (tag == 18) {
         parse_key_types:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_key_types(static_cast< ::google::iam::admin::v1::ListServiceAccountKeysRequest_KeyType >(value));
          }
          input->PopLimit(limit);
        } else if (tag == 16) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_key_types(static_cast< ::google::iam::admin::v1::ListServiceAccountKeysRequest_KeyType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.ListServiceAccountKeysRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.ListServiceAccountKeysRequest)
  return false;
#undef DO_
}

void ListServiceAccountKeysRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.ListServiceAccountKeysRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ListServiceAccountKeysRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .google.iam.admin.v1.ListServiceAccountKeysRequest.KeyType key_types = 2;
  if (this->key_types_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_key_types_cached_byte_size_);
  }
  for (int i = 0; i < this->key_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->key_types(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.ListServiceAccountKeysRequest)
}

::google::protobuf::uint8* ListServiceAccountKeysRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.ListServiceAccountKeysRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ListServiceAccountKeysRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .google.iam.admin.v1.ListServiceAccountKeysRequest.KeyType key_types = 2;
  if (this->key_types_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _key_types_cached_byte_size_, target);
  }
  for (int i = 0; i < this->key_types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->key_types(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.ListServiceAccountKeysRequest)
  return target;
}

size_t ListServiceAccountKeysRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.ListServiceAccountKeysRequest)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // repeated .google.iam.admin.v1.ListServiceAccountKeysRequest.KeyType key_types = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->key_types_size();for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->key_types(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _key_types_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListServiceAccountKeysRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.ListServiceAccountKeysRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListServiceAccountKeysRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListServiceAccountKeysRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.ListServiceAccountKeysRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.ListServiceAccountKeysRequest)
    UnsafeMergeFrom(*source);
  }
}

void ListServiceAccountKeysRequest::MergeFrom(const ListServiceAccountKeysRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.ListServiceAccountKeysRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ListServiceAccountKeysRequest::UnsafeMergeFrom(const ListServiceAccountKeysRequest& from) {
  GOOGLE_DCHECK(&from != this);
  key_types_.UnsafeMergeFrom(from.key_types_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
}

void ListServiceAccountKeysRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.ListServiceAccountKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListServiceAccountKeysRequest::CopyFrom(const ListServiceAccountKeysRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.ListServiceAccountKeysRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ListServiceAccountKeysRequest::IsInitialized() const {

  return true;
}

void ListServiceAccountKeysRequest::Swap(ListServiceAccountKeysRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListServiceAccountKeysRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ListServiceAccountKeysRequest::UnsafeArenaSwap(ListServiceAccountKeysRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListServiceAccountKeysRequest::InternalSwap(ListServiceAccountKeysRequest* other) {
  name_.Swap(&other->name_);
  key_types_.UnsafeArenaSwap(&other->key_types_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListServiceAccountKeysRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListServiceAccountKeysRequest_descriptor_;
  metadata.reflection = ListServiceAccountKeysRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListServiceAccountKeysRequest

// optional string name = 1;
void ListServiceAccountKeysRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ListServiceAccountKeysRequest::name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ListServiceAccountKeysRequest.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListServiceAccountKeysRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ListServiceAccountKeysRequest.name)
}
void ListServiceAccountKeysRequest::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ListServiceAccountKeysRequest.name)
}
void ListServiceAccountKeysRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ListServiceAccountKeysRequest.name)
}
::std::string* ListServiceAccountKeysRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ListServiceAccountKeysRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListServiceAccountKeysRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ListServiceAccountKeysRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListServiceAccountKeysRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ListServiceAccountKeysRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ListServiceAccountKeysRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ListServiceAccountKeysRequest.name)
}
void ListServiceAccountKeysRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ListServiceAccountKeysRequest.name)
}

// repeated .google.iam.admin.v1.ListServiceAccountKeysRequest.KeyType key_types = 2;
int ListServiceAccountKeysRequest::key_types_size() const {
  return key_types_.size();
}
void ListServiceAccountKeysRequest::clear_key_types() {
  key_types_.Clear();
}
::google::iam::admin::v1::ListServiceAccountKeysRequest_KeyType ListServiceAccountKeysRequest::key_types(int index) const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ListServiceAccountKeysRequest.key_types)
  return static_cast< ::google::iam::admin::v1::ListServiceAccountKeysRequest_KeyType >(key_types_.Get(index));
}
void ListServiceAccountKeysRequest::set_key_types(int index, ::google::iam::admin::v1::ListServiceAccountKeysRequest_KeyType value) {
  key_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ListServiceAccountKeysRequest.key_types)
}
void ListServiceAccountKeysRequest::add_key_types(::google::iam::admin::v1::ListServiceAccountKeysRequest_KeyType value) {
  key_types_.Add(value);
  // @@protoc_insertion_point(field_add:google.iam.admin.v1.ListServiceAccountKeysRequest.key_types)
}
const ::google::protobuf::RepeatedField<int>&
ListServiceAccountKeysRequest::key_types() const {
  // @@protoc_insertion_point(field_list:google.iam.admin.v1.ListServiceAccountKeysRequest.key_types)
  return key_types_;
}
::google::protobuf::RepeatedField<int>*
ListServiceAccountKeysRequest::mutable_key_types() {
  // @@protoc_insertion_point(field_mutable_list:google.iam.admin.v1.ListServiceAccountKeysRequest.key_types)
  return &key_types_;
}

inline const ListServiceAccountKeysRequest* ListServiceAccountKeysRequest::internal_default_instance() {
  return &ListServiceAccountKeysRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListServiceAccountKeysResponse::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListServiceAccountKeysResponse::ListServiceAccountKeysResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.ListServiceAccountKeysResponse)
}
ListServiceAccountKeysResponse::ListServiceAccountKeysResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  keys_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.ListServiceAccountKeysResponse)
}

void ListServiceAccountKeysResponse::InitAsDefaultInstance() {
}

ListServiceAccountKeysResponse::ListServiceAccountKeysResponse(const ListServiceAccountKeysResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.ListServiceAccountKeysResponse)
}

void ListServiceAccountKeysResponse::SharedCtor() {
  _cached_size_ = 0;
}

ListServiceAccountKeysResponse::~ListServiceAccountKeysResponse() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.ListServiceAccountKeysResponse)
  SharedDtor();
}

void ListServiceAccountKeysResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void ListServiceAccountKeysResponse::ArenaDtor(void* object) {
  ListServiceAccountKeysResponse* _this = reinterpret_cast< ListServiceAccountKeysResponse* >(object);
  (void)_this;
}
void ListServiceAccountKeysResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ListServiceAccountKeysResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListServiceAccountKeysResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListServiceAccountKeysResponse_descriptor_;
}

const ListServiceAccountKeysResponse& ListServiceAccountKeysResponse::default_instance() {
  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ListServiceAccountKeysResponse> ListServiceAccountKeysResponse_default_instance_;

ListServiceAccountKeysResponse* ListServiceAccountKeysResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ListServiceAccountKeysResponse>(arena);
}

void ListServiceAccountKeysResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.ListServiceAccountKeysResponse)
  keys_.Clear();
}

bool ListServiceAccountKeysResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.ListServiceAccountKeysResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.iam.admin.v1.ServiceAccountKey keys = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_keys;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.ListServiceAccountKeysResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.ListServiceAccountKeysResponse)
  return false;
#undef DO_
}

void ListServiceAccountKeysResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.ListServiceAccountKeysResponse)
  // repeated .google.iam.admin.v1.ServiceAccountKey keys = 1;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->keys(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.ListServiceAccountKeysResponse)
}

::google::protobuf::uint8* ListServiceAccountKeysResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.ListServiceAccountKeysResponse)
  // repeated .google.iam.admin.v1.ServiceAccountKey keys = 1;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->keys(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.ListServiceAccountKeysResponse)
  return target;
}

size_t ListServiceAccountKeysResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.ListServiceAccountKeysResponse)
  size_t total_size = 0;

  // repeated .google.iam.admin.v1.ServiceAccountKey keys = 1;
  {
    unsigned int count = this->keys_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keys(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListServiceAccountKeysResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.ListServiceAccountKeysResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListServiceAccountKeysResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListServiceAccountKeysResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.ListServiceAccountKeysResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.ListServiceAccountKeysResponse)
    UnsafeMergeFrom(*source);
  }
}

void ListServiceAccountKeysResponse::MergeFrom(const ListServiceAccountKeysResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.ListServiceAccountKeysResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ListServiceAccountKeysResponse::UnsafeMergeFrom(const ListServiceAccountKeysResponse& from) {
  GOOGLE_DCHECK(&from != this);
  keys_.MergeFrom(from.keys_);
}

void ListServiceAccountKeysResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.ListServiceAccountKeysResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListServiceAccountKeysResponse::CopyFrom(const ListServiceAccountKeysResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.ListServiceAccountKeysResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ListServiceAccountKeysResponse::IsInitialized() const {

  return true;
}

void ListServiceAccountKeysResponse::Swap(ListServiceAccountKeysResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListServiceAccountKeysResponse temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ListServiceAccountKeysResponse::UnsafeArenaSwap(ListServiceAccountKeysResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListServiceAccountKeysResponse::InternalSwap(ListServiceAccountKeysResponse* other) {
  keys_.UnsafeArenaSwap(&other->keys_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListServiceAccountKeysResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListServiceAccountKeysResponse_descriptor_;
  metadata.reflection = ListServiceAccountKeysResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListServiceAccountKeysResponse

// repeated .google.iam.admin.v1.ServiceAccountKey keys = 1;
int ListServiceAccountKeysResponse::keys_size() const {
  return keys_.size();
}
void ListServiceAccountKeysResponse::clear_keys() {
  keys_.Clear();
}
const ::google::iam::admin::v1::ServiceAccountKey& ListServiceAccountKeysResponse::keys(int index) const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ListServiceAccountKeysResponse.keys)
  return keys_.Get(index);
}
::google::iam::admin::v1::ServiceAccountKey* ListServiceAccountKeysResponse::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ListServiceAccountKeysResponse.keys)
  return keys_.Mutable(index);
}
::google::iam::admin::v1::ServiceAccountKey* ListServiceAccountKeysResponse::add_keys() {
  // @@protoc_insertion_point(field_add:google.iam.admin.v1.ListServiceAccountKeysResponse.keys)
  return keys_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::ServiceAccountKey >*
ListServiceAccountKeysResponse::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:google.iam.admin.v1.ListServiceAccountKeysResponse.keys)
  return &keys_;
}
const ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::ServiceAccountKey >&
ListServiceAccountKeysResponse::keys() const {
  // @@protoc_insertion_point(field_list:google.iam.admin.v1.ListServiceAccountKeysResponse.keys)
  return keys_;
}

inline const ListServiceAccountKeysResponse* ListServiceAccountKeysResponse::internal_default_instance() {
  return &ListServiceAccountKeysResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetServiceAccountKeyRequest::kNameFieldNumber;
const int GetServiceAccountKeyRequest::kPublicKeyTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetServiceAccountKeyRequest::GetServiceAccountKeyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.GetServiceAccountKeyRequest)
}
GetServiceAccountKeyRequest::GetServiceAccountKeyRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.GetServiceAccountKeyRequest)
}

void GetServiceAccountKeyRequest::InitAsDefaultInstance() {
}

GetServiceAccountKeyRequest::GetServiceAccountKeyRequest(const GetServiceAccountKeyRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.GetServiceAccountKeyRequest)
}

void GetServiceAccountKeyRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_type_ = 0;
  _cached_size_ = 0;
}

GetServiceAccountKeyRequest::~GetServiceAccountKeyRequest() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.GetServiceAccountKeyRequest)
  SharedDtor();
}

void GetServiceAccountKeyRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void GetServiceAccountKeyRequest::ArenaDtor(void* object) {
  GetServiceAccountKeyRequest* _this = reinterpret_cast< GetServiceAccountKeyRequest* >(object);
  (void)_this;
}
void GetServiceAccountKeyRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetServiceAccountKeyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetServiceAccountKeyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetServiceAccountKeyRequest_descriptor_;
}

const GetServiceAccountKeyRequest& GetServiceAccountKeyRequest::default_instance() {
  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetServiceAccountKeyRequest> GetServiceAccountKeyRequest_default_instance_;

GetServiceAccountKeyRequest* GetServiceAccountKeyRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetServiceAccountKeyRequest>(arena);
}

void GetServiceAccountKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.GetServiceAccountKeyRequest)
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  public_key_type_ = 0;
}

bool GetServiceAccountKeyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.GetServiceAccountKeyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.GetServiceAccountKeyRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_public_key_type;
        break;
      }

      // optional .google.iam.admin.v1.ServiceAccountPublicKeyType public_key_type = 2;
      case 2: {
        if (tag == 16) {
         parse_public_key_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_public_key_type(static_cast< ::google::iam::admin::v1::ServiceAccountPublicKeyType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.GetServiceAccountKeyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.GetServiceAccountKeyRequest)
  return false;
#undef DO_
}

void GetServiceAccountKeyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.GetServiceAccountKeyRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.GetServiceAccountKeyRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .google.iam.admin.v1.ServiceAccountPublicKeyType public_key_type = 2;
  if (this->public_key_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->public_key_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.GetServiceAccountKeyRequest)
}

::google::protobuf::uint8* GetServiceAccountKeyRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.GetServiceAccountKeyRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.GetServiceAccountKeyRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .google.iam.admin.v1.ServiceAccountPublicKeyType public_key_type = 2;
  if (this->public_key_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->public_key_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.GetServiceAccountKeyRequest)
  return target;
}

size_t GetServiceAccountKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.GetServiceAccountKeyRequest)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .google.iam.admin.v1.ServiceAccountPublicKeyType public_key_type = 2;
  if (this->public_key_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->public_key_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServiceAccountKeyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.GetServiceAccountKeyRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetServiceAccountKeyRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetServiceAccountKeyRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.GetServiceAccountKeyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.GetServiceAccountKeyRequest)
    UnsafeMergeFrom(*source);
  }
}

void GetServiceAccountKeyRequest::MergeFrom(const GetServiceAccountKeyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.GetServiceAccountKeyRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetServiceAccountKeyRequest::UnsafeMergeFrom(const GetServiceAccountKeyRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.public_key_type() != 0) {
    set_public_key_type(from.public_key_type());
  }
}

void GetServiceAccountKeyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.GetServiceAccountKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceAccountKeyRequest::CopyFrom(const GetServiceAccountKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.GetServiceAccountKeyRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetServiceAccountKeyRequest::IsInitialized() const {

  return true;
}

void GetServiceAccountKeyRequest::Swap(GetServiceAccountKeyRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetServiceAccountKeyRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void GetServiceAccountKeyRequest::UnsafeArenaSwap(GetServiceAccountKeyRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetServiceAccountKeyRequest::InternalSwap(GetServiceAccountKeyRequest* other) {
  name_.Swap(&other->name_);
  std::swap(public_key_type_, other->public_key_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetServiceAccountKeyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetServiceAccountKeyRequest_descriptor_;
  metadata.reflection = GetServiceAccountKeyRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetServiceAccountKeyRequest

// optional string name = 1;
void GetServiceAccountKeyRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetServiceAccountKeyRequest::name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.GetServiceAccountKeyRequest.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetServiceAccountKeyRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.GetServiceAccountKeyRequest.name)
}
void GetServiceAccountKeyRequest::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.GetServiceAccountKeyRequest.name)
}
void GetServiceAccountKeyRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.GetServiceAccountKeyRequest.name)
}
::std::string* GetServiceAccountKeyRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.GetServiceAccountKeyRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetServiceAccountKeyRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.GetServiceAccountKeyRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetServiceAccountKeyRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.GetServiceAccountKeyRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetServiceAccountKeyRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.GetServiceAccountKeyRequest.name)
}
void GetServiceAccountKeyRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.GetServiceAccountKeyRequest.name)
}

// optional .google.iam.admin.v1.ServiceAccountPublicKeyType public_key_type = 2;
void GetServiceAccountKeyRequest::clear_public_key_type() {
  public_key_type_ = 0;
}
::google::iam::admin::v1::ServiceAccountPublicKeyType GetServiceAccountKeyRequest::public_key_type() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.GetServiceAccountKeyRequest.public_key_type)
  return static_cast< ::google::iam::admin::v1::ServiceAccountPublicKeyType >(public_key_type_);
}
void GetServiceAccountKeyRequest::set_public_key_type(::google::iam::admin::v1::ServiceAccountPublicKeyType value) {
  
  public_key_type_ = value;
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.GetServiceAccountKeyRequest.public_key_type)
}

inline const GetServiceAccountKeyRequest* GetServiceAccountKeyRequest::internal_default_instance() {
  return &GetServiceAccountKeyRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void ServiceAccountKey::_slow_mutable_valid_after_time() {
  valid_after_time_ = ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Timestamp >(
      GetArenaNoVirtual());
}
::google::protobuf::Timestamp* ServiceAccountKey::_slow_release_valid_after_time() {
  if (valid_after_time_ == NULL) {
    return NULL;
  } else {
    ::google::protobuf::Timestamp* temp = new ::google::protobuf::Timestamp(*valid_after_time_);
    valid_after_time_ = NULL;
    return temp;
  }
}
::google::protobuf::Timestamp* ServiceAccountKey::unsafe_arena_release_valid_after_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ServiceAccountKey.valid_after_time)
  
  ::google::protobuf::Timestamp* temp = valid_after_time_;
  valid_after_time_ = NULL;
  return temp;
}
void ServiceAccountKey::_slow_set_allocated_valid_after_time(
    ::google::protobuf::Arena* message_arena, ::google::protobuf::Timestamp** valid_after_time) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*valid_after_time) == NULL) {
      message_arena->Own(*valid_after_time);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*valid_after_time)) {
      ::google::protobuf::Timestamp* new_valid_after_time = 
            ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Timestamp >(
            message_arena);
      new_valid_after_time->CopyFrom(**valid_after_time);
      *valid_after_time = new_valid_after_time;
    }
}
void ServiceAccountKey::unsafe_arena_set_allocated_valid_after_time(
    ::google::protobuf::Timestamp* valid_after_time) {
  if (GetArenaNoVirtual() == NULL) {
    delete valid_after_time_;
  }
  valid_after_time_ = valid_after_time;
  if (valid_after_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ServiceAccountKey.valid_after_time)
}
void ServiceAccountKey::_slow_mutable_valid_before_time() {
  valid_before_time_ = ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Timestamp >(
      GetArenaNoVirtual());
}
::google::protobuf::Timestamp* ServiceAccountKey::_slow_release_valid_before_time() {
  if (valid_before_time_ == NULL) {
    return NULL;
  } else {
    ::google::protobuf::Timestamp* temp = new ::google::protobuf::Timestamp(*valid_before_time_);
    valid_before_time_ = NULL;
    return temp;
  }
}
::google::protobuf::Timestamp* ServiceAccountKey::unsafe_arena_release_valid_before_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ServiceAccountKey.valid_before_time)
  
  ::google::protobuf::Timestamp* temp = valid_before_time_;
  valid_before_time_ = NULL;
  return temp;
}
void ServiceAccountKey::_slow_set_allocated_valid_before_time(
    ::google::protobuf::Arena* message_arena, ::google::protobuf::Timestamp** valid_before_time) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*valid_before_time) == NULL) {
      message_arena->Own(*valid_before_time);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*valid_before_time)) {
      ::google::protobuf::Timestamp* new_valid_before_time = 
            ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Timestamp >(
            message_arena);
      new_valid_before_time->CopyFrom(**valid_before_time);
      *valid_before_time = new_valid_before_time;
    }
}
void ServiceAccountKey::unsafe_arena_set_allocated_valid_before_time(
    ::google::protobuf::Timestamp* valid_before_time) {
  if (GetArenaNoVirtual() == NULL) {
    delete valid_before_time_;
  }
  valid_before_time_ = valid_before_time;
  if (valid_before_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ServiceAccountKey.valid_before_time)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceAccountKey::kNameFieldNumber;
const int ServiceAccountKey::kPrivateKeyTypeFieldNumber;
const int ServiceAccountKey::kKeyAlgorithmFieldNumber;
const int ServiceAccountKey::kPrivateKeyDataFieldNumber;
const int ServiceAccountKey::kPublicKeyDataFieldNumber;
const int ServiceAccountKey::kValidAfterTimeFieldNumber;
const int ServiceAccountKey::kValidBeforeTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceAccountKey::ServiceAccountKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.ServiceAccountKey)
}
ServiceAccountKey::ServiceAccountKey(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.ServiceAccountKey)
}

void ServiceAccountKey::InitAsDefaultInstance() {
  valid_after_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  valid_before_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}

ServiceAccountKey::ServiceAccountKey(const ServiceAccountKey& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.ServiceAccountKey)
}

void ServiceAccountKey::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  private_key_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  valid_after_time_ = NULL;
  valid_before_time_ = NULL;
  ::memset(&private_key_type_, 0, reinterpret_cast<char*>(&key_algorithm_) -
    reinterpret_cast<char*>(&private_key_type_) + sizeof(key_algorithm_));
  _cached_size_ = 0;
}

ServiceAccountKey::~ServiceAccountKey() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.ServiceAccountKey)
  SharedDtor();
}

void ServiceAccountKey::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  private_key_data_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  public_key_data_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != &ServiceAccountKey_default_instance_.get()) {
    delete valid_after_time_;
    delete valid_before_time_;
  }
}

void ServiceAccountKey::ArenaDtor(void* object) {
  ServiceAccountKey* _this = reinterpret_cast< ServiceAccountKey* >(object);
  (void)_this;
}
void ServiceAccountKey::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ServiceAccountKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceAccountKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceAccountKey_descriptor_;
}

const ServiceAccountKey& ServiceAccountKey::default_instance() {
  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ServiceAccountKey> ServiceAccountKey_default_instance_;

ServiceAccountKey* ServiceAccountKey::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ServiceAccountKey>(arena);
}

void ServiceAccountKey::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.ServiceAccountKey)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ServiceAccountKey, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ServiceAccountKey*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(private_key_type_, key_algorithm_);
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  private_key_data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  public_key_data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && valid_after_time_ != NULL) delete valid_after_time_;
  valid_after_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && valid_before_time_ != NULL) delete valid_before_time_;
  valid_before_time_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool ServiceAccountKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.ServiceAccountKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.ServiceAccountKey.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_private_key_type;
        break;
      }

      // optional .google.iam.admin.v1.ServiceAccountPrivateKeyType private_key_type = 2;
      case 2: {
        if (tag == 16) {
         parse_private_key_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_private_key_type(static_cast< ::google::iam::admin::v1::ServiceAccountPrivateKeyType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_private_key_data;
        break;
      }

      // optional bytes private_key_data = 3;
      case 3: {
        if (tag == 26) {
         parse_private_key_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_private_key_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_valid_after_time;
        break;
      }

      // optional .google.protobuf.Timestamp valid_after_time = 4;
      case 4: {
        if (tag == 34) {
         parse_valid_after_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_valid_after_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_valid_before_time;
        break;
      }

      // optional .google.protobuf.Timestamp valid_before_time = 5;
      case 5: {
        if (tag == 42) {
         parse_valid_before_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_valid_before_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_public_key_data;
        break;
      }

      // optional bytes public_key_data = 7;
      case 7: {
        if (tag == 58) {
         parse_public_key_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_key_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_key_algorithm;
        break;
      }

      // optional .google.iam.admin.v1.ServiceAccountKeyAlgorithm key_algorithm = 8;
      case 8: {
        if (tag == 64) {
         parse_key_algorithm:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_key_algorithm(static_cast< ::google::iam::admin::v1::ServiceAccountKeyAlgorithm >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.ServiceAccountKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.ServiceAccountKey)
  return false;
#undef DO_
}

void ServiceAccountKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.ServiceAccountKey)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ServiceAccountKey.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .google.iam.admin.v1.ServiceAccountPrivateKeyType private_key_type = 2;
  if (this->private_key_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->private_key_type(), output);
  }

  // optional bytes private_key_data = 3;
  if (this->private_key_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->private_key_data(), output);
  }

  // optional .google.protobuf.Timestamp valid_after_time = 4;
  if (this->has_valid_after_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->valid_after_time_, output);
  }

  // optional .google.protobuf.Timestamp valid_before_time = 5;
  if (this->has_valid_before_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->valid_before_time_, output);
  }

  // optional bytes public_key_data = 7;
  if (this->public_key_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->public_key_data(), output);
  }

  // optional .google.iam.admin.v1.ServiceAccountKeyAlgorithm key_algorithm = 8;
  if (this->key_algorithm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->key_algorithm(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.ServiceAccountKey)
}

::google::protobuf::uint8* ServiceAccountKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.ServiceAccountKey)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ServiceAccountKey.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .google.iam.admin.v1.ServiceAccountPrivateKeyType private_key_type = 2;
  if (this->private_key_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->private_key_type(), target);
  }

  // optional bytes private_key_data = 3;
  if (this->private_key_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->private_key_data(), target);
  }

  // optional .google.protobuf.Timestamp valid_after_time = 4;
  if (this->has_valid_after_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->valid_after_time_, false, target);
  }

  // optional .google.protobuf.Timestamp valid_before_time = 5;
  if (this->has_valid_before_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->valid_before_time_, false, target);
  }

  // optional bytes public_key_data = 7;
  if (this->public_key_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->public_key_data(), target);
  }

  // optional .google.iam.admin.v1.ServiceAccountKeyAlgorithm key_algorithm = 8;
  if (this->key_algorithm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->key_algorithm(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.ServiceAccountKey)
  return target;
}

size_t ServiceAccountKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.ServiceAccountKey)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .google.iam.admin.v1.ServiceAccountPrivateKeyType private_key_type = 2;
  if (this->private_key_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->private_key_type());
  }

  // optional .google.iam.admin.v1.ServiceAccountKeyAlgorithm key_algorithm = 8;
  if (this->key_algorithm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->key_algorithm());
  }

  // optional bytes private_key_data = 3;
  if (this->private_key_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->private_key_data());
  }

  // optional bytes public_key_data = 7;
  if (this->public_key_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->public_key_data());
  }

  // optional .google.protobuf.Timestamp valid_after_time = 4;
  if (this->has_valid_after_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->valid_after_time_);
  }

  // optional .google.protobuf.Timestamp valid_before_time = 5;
  if (this->has_valid_before_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->valid_before_time_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceAccountKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.ServiceAccountKey)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ServiceAccountKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServiceAccountKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.ServiceAccountKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.ServiceAccountKey)
    UnsafeMergeFrom(*source);
  }
}

void ServiceAccountKey::MergeFrom(const ServiceAccountKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.ServiceAccountKey)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ServiceAccountKey::UnsafeMergeFrom(const ServiceAccountKey& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.private_key_type() != 0) {
    set_private_key_type(from.private_key_type());
  }
  if (from.key_algorithm() != 0) {
    set_key_algorithm(from.key_algorithm());
  }
  if (from.private_key_data().size() > 0) {
    set_private_key_data(from.private_key_data());
  }
  if (from.public_key_data().size() > 0) {
    set_public_key_data(from.public_key_data());
  }
  if (from.has_valid_after_time()) {
    mutable_valid_after_time()->::google::protobuf::Timestamp::MergeFrom(from.valid_after_time());
  }
  if (from.has_valid_before_time()) {
    mutable_valid_before_time()->::google::protobuf::Timestamp::MergeFrom(from.valid_before_time());
  }
}

void ServiceAccountKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.ServiceAccountKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceAccountKey::CopyFrom(const ServiceAccountKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.ServiceAccountKey)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ServiceAccountKey::IsInitialized() const {

  return true;
}

void ServiceAccountKey::Swap(ServiceAccountKey* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ServiceAccountKey temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ServiceAccountKey::UnsafeArenaSwap(ServiceAccountKey* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ServiceAccountKey::InternalSwap(ServiceAccountKey* other) {
  name_.Swap(&other->name_);
  std::swap(private_key_type_, other->private_key_type_);
  std::swap(key_algorithm_, other->key_algorithm_);
  private_key_data_.Swap(&other->private_key_data_);
  public_key_data_.Swap(&other->public_key_data_);
  std::swap(valid_after_time_, other->valid_after_time_);
  std::swap(valid_before_time_, other->valid_before_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServiceAccountKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceAccountKey_descriptor_;
  metadata.reflection = ServiceAccountKey_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceAccountKey

// optional string name = 1;
void ServiceAccountKey::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ServiceAccountKey::name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ServiceAccountKey.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServiceAccountKey::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ServiceAccountKey.name)
}
void ServiceAccountKey::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ServiceAccountKey.name)
}
void ServiceAccountKey::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ServiceAccountKey.name)
}
::std::string* ServiceAccountKey::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ServiceAccountKey.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceAccountKey::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ServiceAccountKey.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceAccountKey::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ServiceAccountKey.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ServiceAccountKey::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ServiceAccountKey.name)
}
void ServiceAccountKey::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ServiceAccountKey.name)
}

// optional .google.iam.admin.v1.ServiceAccountPrivateKeyType private_key_type = 2;
void ServiceAccountKey::clear_private_key_type() {
  private_key_type_ = 0;
}
::google::iam::admin::v1::ServiceAccountPrivateKeyType ServiceAccountKey::private_key_type() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ServiceAccountKey.private_key_type)
  return static_cast< ::google::iam::admin::v1::ServiceAccountPrivateKeyType >(private_key_type_);
}
void ServiceAccountKey::set_private_key_type(::google::iam::admin::v1::ServiceAccountPrivateKeyType value) {
  
  private_key_type_ = value;
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ServiceAccountKey.private_key_type)
}

// optional .google.iam.admin.v1.ServiceAccountKeyAlgorithm key_algorithm = 8;
void ServiceAccountKey::clear_key_algorithm() {
  key_algorithm_ = 0;
}
::google::iam::admin::v1::ServiceAccountKeyAlgorithm ServiceAccountKey::key_algorithm() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ServiceAccountKey.key_algorithm)
  return static_cast< ::google::iam::admin::v1::ServiceAccountKeyAlgorithm >(key_algorithm_);
}
void ServiceAccountKey::set_key_algorithm(::google::iam::admin::v1::ServiceAccountKeyAlgorithm value) {
  
  key_algorithm_ = value;
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ServiceAccountKey.key_algorithm)
}

// optional bytes private_key_data = 3;
void ServiceAccountKey::clear_private_key_data() {
  private_key_data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ServiceAccountKey::private_key_data() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ServiceAccountKey.private_key_data)
  return private_key_data_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServiceAccountKey::set_private_key_data(const ::std::string& value) {
  
  private_key_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ServiceAccountKey.private_key_data)
}
void ServiceAccountKey::set_private_key_data(const char* value) {
  
  private_key_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ServiceAccountKey.private_key_data)
}
void ServiceAccountKey::set_private_key_data(const void* value,
    size_t size) {
  
  private_key_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ServiceAccountKey.private_key_data)
}
::std::string* ServiceAccountKey::mutable_private_key_data() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ServiceAccountKey.private_key_data)
  return private_key_data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceAccountKey::release_private_key_data() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ServiceAccountKey.private_key_data)
  
  return private_key_data_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceAccountKey::unsafe_arena_release_private_key_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ServiceAccountKey.private_key_data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return private_key_data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ServiceAccountKey::set_allocated_private_key_data(::std::string* private_key_data) {
  if (private_key_data != NULL) {
    
  } else {
    
  }
  private_key_data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_key_data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ServiceAccountKey.private_key_data)
}
void ServiceAccountKey::unsafe_arena_set_allocated_private_key_data(
    ::std::string* private_key_data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (private_key_data != NULL) {
    
  } else {
    
  }
  private_key_data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      private_key_data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ServiceAccountKey.private_key_data)
}

// optional bytes public_key_data = 7;
void ServiceAccountKey::clear_public_key_data() {
  public_key_data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ServiceAccountKey::public_key_data() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ServiceAccountKey.public_key_data)
  return public_key_data_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServiceAccountKey::set_public_key_data(const ::std::string& value) {
  
  public_key_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ServiceAccountKey.public_key_data)
}
void ServiceAccountKey::set_public_key_data(const char* value) {
  
  public_key_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ServiceAccountKey.public_key_data)
}
void ServiceAccountKey::set_public_key_data(const void* value,
    size_t size) {
  
  public_key_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ServiceAccountKey.public_key_data)
}
::std::string* ServiceAccountKey::mutable_public_key_data() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ServiceAccountKey.public_key_data)
  return public_key_data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceAccountKey::release_public_key_data() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ServiceAccountKey.public_key_data)
  
  return public_key_data_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceAccountKey::unsafe_arena_release_public_key_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ServiceAccountKey.public_key_data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return public_key_data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ServiceAccountKey::set_allocated_public_key_data(::std::string* public_key_data) {
  if (public_key_data != NULL) {
    
  } else {
    
  }
  public_key_data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key_data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ServiceAccountKey.public_key_data)
}
void ServiceAccountKey::unsafe_arena_set_allocated_public_key_data(
    ::std::string* public_key_data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (public_key_data != NULL) {
    
  } else {
    
  }
  public_key_data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      public_key_data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ServiceAccountKey.public_key_data)
}

// optional .google.protobuf.Timestamp valid_after_time = 4;
bool ServiceAccountKey::has_valid_after_time() const {
  return this != internal_default_instance() && valid_after_time_ != NULL;
}
void ServiceAccountKey::clear_valid_after_time() {
  if (GetArenaNoVirtual() == NULL && valid_after_time_ != NULL) delete valid_after_time_;
  valid_after_time_ = NULL;
}
const ::google::protobuf::Timestamp& ServiceAccountKey::valid_after_time() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ServiceAccountKey.valid_after_time)
  return valid_after_time_ != NULL ? *valid_after_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* ServiceAccountKey::mutable_valid_after_time() {
  
  if (valid_after_time_ == NULL) {
    _slow_mutable_valid_after_time();
  }
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ServiceAccountKey.valid_after_time)
  return valid_after_time_;
}
::google::protobuf::Timestamp* ServiceAccountKey::release_valid_after_time() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ServiceAccountKey.valid_after_time)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_valid_after_time();
  } else {
    ::google::protobuf::Timestamp* temp = valid_after_time_;
    valid_after_time_ = NULL;
    return temp;
  }
}
 void ServiceAccountKey::set_allocated_valid_after_time(::google::protobuf::Timestamp* valid_after_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete valid_after_time_;
  }
  if (valid_after_time != NULL) {
    _slow_set_allocated_valid_after_time(message_arena, &valid_after_time);
  }
  valid_after_time_ = valid_after_time;
  if (valid_after_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ServiceAccountKey.valid_after_time)
}

// optional .google.protobuf.Timestamp valid_before_time = 5;
bool ServiceAccountKey::has_valid_before_time() const {
  return this != internal_default_instance() && valid_before_time_ != NULL;
}
void ServiceAccountKey::clear_valid_before_time() {
  if (GetArenaNoVirtual() == NULL && valid_before_time_ != NULL) delete valid_before_time_;
  valid_before_time_ = NULL;
}
const ::google::protobuf::Timestamp& ServiceAccountKey::valid_before_time() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ServiceAccountKey.valid_before_time)
  return valid_before_time_ != NULL ? *valid_before_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* ServiceAccountKey::mutable_valid_before_time() {
  
  if (valid_before_time_ == NULL) {
    _slow_mutable_valid_before_time();
  }
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ServiceAccountKey.valid_before_time)
  return valid_before_time_;
}
::google::protobuf::Timestamp* ServiceAccountKey::release_valid_before_time() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ServiceAccountKey.valid_before_time)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_valid_before_time();
  } else {
    ::google::protobuf::Timestamp* temp = valid_before_time_;
    valid_before_time_ = NULL;
    return temp;
  }
}
 void ServiceAccountKey::set_allocated_valid_before_time(::google::protobuf::Timestamp* valid_before_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete valid_before_time_;
  }
  if (valid_before_time != NULL) {
    _slow_set_allocated_valid_before_time(message_arena, &valid_before_time);
  }
  valid_before_time_ = valid_before_time;
  if (valid_before_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ServiceAccountKey.valid_before_time)
}

inline const ServiceAccountKey* ServiceAccountKey::internal_default_instance() {
  return &ServiceAccountKey_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateServiceAccountKeyRequest::kNameFieldNumber;
const int CreateServiceAccountKeyRequest::kPrivateKeyTypeFieldNumber;
const int CreateServiceAccountKeyRequest::kKeyAlgorithmFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateServiceAccountKeyRequest::CreateServiceAccountKeyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.CreateServiceAccountKeyRequest)
}
CreateServiceAccountKeyRequest::CreateServiceAccountKeyRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.CreateServiceAccountKeyRequest)
}

void CreateServiceAccountKeyRequest::InitAsDefaultInstance() {
}

CreateServiceAccountKeyRequest::CreateServiceAccountKeyRequest(const CreateServiceAccountKeyRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.CreateServiceAccountKeyRequest)
}

void CreateServiceAccountKeyRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&private_key_type_, 0, reinterpret_cast<char*>(&key_algorithm_) -
    reinterpret_cast<char*>(&private_key_type_) + sizeof(key_algorithm_));
  _cached_size_ = 0;
}

CreateServiceAccountKeyRequest::~CreateServiceAccountKeyRequest() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.CreateServiceAccountKeyRequest)
  SharedDtor();
}

void CreateServiceAccountKeyRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void CreateServiceAccountKeyRequest::ArenaDtor(void* object) {
  CreateServiceAccountKeyRequest* _this = reinterpret_cast< CreateServiceAccountKeyRequest* >(object);
  (void)_this;
}
void CreateServiceAccountKeyRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CreateServiceAccountKeyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateServiceAccountKeyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateServiceAccountKeyRequest_descriptor_;
}

const CreateServiceAccountKeyRequest& CreateServiceAccountKeyRequest::default_instance() {
  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CreateServiceAccountKeyRequest> CreateServiceAccountKeyRequest_default_instance_;

CreateServiceAccountKeyRequest* CreateServiceAccountKeyRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CreateServiceAccountKeyRequest>(arena);
}

void CreateServiceAccountKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.CreateServiceAccountKeyRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CreateServiceAccountKeyRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CreateServiceAccountKeyRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(private_key_type_, key_algorithm_);
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef ZR_HELPER_
#undef ZR_

}

bool CreateServiceAccountKeyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.CreateServiceAccountKeyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.CreateServiceAccountKeyRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_private_key_type;
        break;
      }

      // optional .google.iam.admin.v1.ServiceAccountPrivateKeyType private_key_type = 2;
      case 2: {
        if (tag == 16) {
         parse_private_key_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_private_key_type(static_cast< ::google::iam::admin::v1::ServiceAccountPrivateKeyType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_key_algorithm;
        break;
      }

      // optional .google.iam.admin.v1.ServiceAccountKeyAlgorithm key_algorithm = 3;
      case 3: {
        if (tag == 24) {
         parse_key_algorithm:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_key_algorithm(static_cast< ::google::iam::admin::v1::ServiceAccountKeyAlgorithm >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.CreateServiceAccountKeyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.CreateServiceAccountKeyRequest)
  return false;
#undef DO_
}

void CreateServiceAccountKeyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.CreateServiceAccountKeyRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.CreateServiceAccountKeyRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .google.iam.admin.v1.ServiceAccountPrivateKeyType private_key_type = 2;
  if (this->private_key_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->private_key_type(), output);
  }

  // optional .google.iam.admin.v1.ServiceAccountKeyAlgorithm key_algorithm = 3;
  if (this->key_algorithm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->key_algorithm(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.CreateServiceAccountKeyRequest)
}

::google::protobuf::uint8* CreateServiceAccountKeyRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.CreateServiceAccountKeyRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.CreateServiceAccountKeyRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .google.iam.admin.v1.ServiceAccountPrivateKeyType private_key_type = 2;
  if (this->private_key_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->private_key_type(), target);
  }

  // optional .google.iam.admin.v1.ServiceAccountKeyAlgorithm key_algorithm = 3;
  if (this->key_algorithm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->key_algorithm(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.CreateServiceAccountKeyRequest)
  return target;
}

size_t CreateServiceAccountKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.CreateServiceAccountKeyRequest)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .google.iam.admin.v1.ServiceAccountPrivateKeyType private_key_type = 2;
  if (this->private_key_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->private_key_type());
  }

  // optional .google.iam.admin.v1.ServiceAccountKeyAlgorithm key_algorithm = 3;
  if (this->key_algorithm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->key_algorithm());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateServiceAccountKeyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.CreateServiceAccountKeyRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CreateServiceAccountKeyRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateServiceAccountKeyRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.CreateServiceAccountKeyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.CreateServiceAccountKeyRequest)
    UnsafeMergeFrom(*source);
  }
}

void CreateServiceAccountKeyRequest::MergeFrom(const CreateServiceAccountKeyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.CreateServiceAccountKeyRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CreateServiceAccountKeyRequest::UnsafeMergeFrom(const CreateServiceAccountKeyRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.private_key_type() != 0) {
    set_private_key_type(from.private_key_type());
  }
  if (from.key_algorithm() != 0) {
    set_key_algorithm(from.key_algorithm());
  }
}

void CreateServiceAccountKeyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.CreateServiceAccountKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateServiceAccountKeyRequest::CopyFrom(const CreateServiceAccountKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.CreateServiceAccountKeyRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CreateServiceAccountKeyRequest::IsInitialized() const {

  return true;
}

void CreateServiceAccountKeyRequest::Swap(CreateServiceAccountKeyRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CreateServiceAccountKeyRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void CreateServiceAccountKeyRequest::UnsafeArenaSwap(CreateServiceAccountKeyRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CreateServiceAccountKeyRequest::InternalSwap(CreateServiceAccountKeyRequest* other) {
  name_.Swap(&other->name_);
  std::swap(private_key_type_, other->private_key_type_);
  std::swap(key_algorithm_, other->key_algorithm_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateServiceAccountKeyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateServiceAccountKeyRequest_descriptor_;
  metadata.reflection = CreateServiceAccountKeyRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateServiceAccountKeyRequest

// optional string name = 1;
void CreateServiceAccountKeyRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& CreateServiceAccountKeyRequest::name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.CreateServiceAccountKeyRequest.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateServiceAccountKeyRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.CreateServiceAccountKeyRequest.name)
}
void CreateServiceAccountKeyRequest::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.CreateServiceAccountKeyRequest.name)
}
void CreateServiceAccountKeyRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.CreateServiceAccountKeyRequest.name)
}
::std::string* CreateServiceAccountKeyRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.CreateServiceAccountKeyRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CreateServiceAccountKeyRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.CreateServiceAccountKeyRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CreateServiceAccountKeyRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.CreateServiceAccountKeyRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void CreateServiceAccountKeyRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.CreateServiceAccountKeyRequest.name)
}
void CreateServiceAccountKeyRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.CreateServiceAccountKeyRequest.name)
}

// optional .google.iam.admin.v1.ServiceAccountPrivateKeyType private_key_type = 2;
void CreateServiceAccountKeyRequest::clear_private_key_type() {
  private_key_type_ = 0;
}
::google::iam::admin::v1::ServiceAccountPrivateKeyType CreateServiceAccountKeyRequest::private_key_type() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.CreateServiceAccountKeyRequest.private_key_type)
  return static_cast< ::google::iam::admin::v1::ServiceAccountPrivateKeyType >(private_key_type_);
}
void CreateServiceAccountKeyRequest::set_private_key_type(::google::iam::admin::v1::ServiceAccountPrivateKeyType value) {
  
  private_key_type_ = value;
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.CreateServiceAccountKeyRequest.private_key_type)
}

// optional .google.iam.admin.v1.ServiceAccountKeyAlgorithm key_algorithm = 3;
void CreateServiceAccountKeyRequest::clear_key_algorithm() {
  key_algorithm_ = 0;
}
::google::iam::admin::v1::ServiceAccountKeyAlgorithm CreateServiceAccountKeyRequest::key_algorithm() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.CreateServiceAccountKeyRequest.key_algorithm)
  return static_cast< ::google::iam::admin::v1::ServiceAccountKeyAlgorithm >(key_algorithm_);
}
void CreateServiceAccountKeyRequest::set_key_algorithm(::google::iam::admin::v1::ServiceAccountKeyAlgorithm value) {
  
  key_algorithm_ = value;
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.CreateServiceAccountKeyRequest.key_algorithm)
}

inline const CreateServiceAccountKeyRequest* CreateServiceAccountKeyRequest::internal_default_instance() {
  return &CreateServiceAccountKeyRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteServiceAccountKeyRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteServiceAccountKeyRequest::DeleteServiceAccountKeyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.DeleteServiceAccountKeyRequest)
}
DeleteServiceAccountKeyRequest::DeleteServiceAccountKeyRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.DeleteServiceAccountKeyRequest)
}

void DeleteServiceAccountKeyRequest::InitAsDefaultInstance() {
}

DeleteServiceAccountKeyRequest::DeleteServiceAccountKeyRequest(const DeleteServiceAccountKeyRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.DeleteServiceAccountKeyRequest)
}

void DeleteServiceAccountKeyRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DeleteServiceAccountKeyRequest::~DeleteServiceAccountKeyRequest() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.DeleteServiceAccountKeyRequest)
  SharedDtor();
}

void DeleteServiceAccountKeyRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void DeleteServiceAccountKeyRequest::ArenaDtor(void* object) {
  DeleteServiceAccountKeyRequest* _this = reinterpret_cast< DeleteServiceAccountKeyRequest* >(object);
  (void)_this;
}
void DeleteServiceAccountKeyRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DeleteServiceAccountKeyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteServiceAccountKeyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteServiceAccountKeyRequest_descriptor_;
}

const DeleteServiceAccountKeyRequest& DeleteServiceAccountKeyRequest::default_instance() {
  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DeleteServiceAccountKeyRequest> DeleteServiceAccountKeyRequest_default_instance_;

DeleteServiceAccountKeyRequest* DeleteServiceAccountKeyRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DeleteServiceAccountKeyRequest>(arena);
}

void DeleteServiceAccountKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.DeleteServiceAccountKeyRequest)
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool DeleteServiceAccountKeyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.DeleteServiceAccountKeyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.DeleteServiceAccountKeyRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.DeleteServiceAccountKeyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.DeleteServiceAccountKeyRequest)
  return false;
#undef DO_
}

void DeleteServiceAccountKeyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.DeleteServiceAccountKeyRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.DeleteServiceAccountKeyRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.DeleteServiceAccountKeyRequest)
}

::google::protobuf::uint8* DeleteServiceAccountKeyRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.DeleteServiceAccountKeyRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.DeleteServiceAccountKeyRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.DeleteServiceAccountKeyRequest)
  return target;
}

size_t DeleteServiceAccountKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.DeleteServiceAccountKeyRequest)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteServiceAccountKeyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.DeleteServiceAccountKeyRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DeleteServiceAccountKeyRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteServiceAccountKeyRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.DeleteServiceAccountKeyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.DeleteServiceAccountKeyRequest)
    UnsafeMergeFrom(*source);
  }
}

void DeleteServiceAccountKeyRequest::MergeFrom(const DeleteServiceAccountKeyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.DeleteServiceAccountKeyRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DeleteServiceAccountKeyRequest::UnsafeMergeFrom(const DeleteServiceAccountKeyRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
}

void DeleteServiceAccountKeyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.DeleteServiceAccountKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteServiceAccountKeyRequest::CopyFrom(const DeleteServiceAccountKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.DeleteServiceAccountKeyRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DeleteServiceAccountKeyRequest::IsInitialized() const {

  return true;
}

void DeleteServiceAccountKeyRequest::Swap(DeleteServiceAccountKeyRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeleteServiceAccountKeyRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void DeleteServiceAccountKeyRequest::UnsafeArenaSwap(DeleteServiceAccountKeyRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeleteServiceAccountKeyRequest::InternalSwap(DeleteServiceAccountKeyRequest* other) {
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteServiceAccountKeyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteServiceAccountKeyRequest_descriptor_;
  metadata.reflection = DeleteServiceAccountKeyRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteServiceAccountKeyRequest

// optional string name = 1;
void DeleteServiceAccountKeyRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& DeleteServiceAccountKeyRequest::name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.DeleteServiceAccountKeyRequest.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteServiceAccountKeyRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.DeleteServiceAccountKeyRequest.name)
}
void DeleteServiceAccountKeyRequest::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.DeleteServiceAccountKeyRequest.name)
}
void DeleteServiceAccountKeyRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.DeleteServiceAccountKeyRequest.name)
}
::std::string* DeleteServiceAccountKeyRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.DeleteServiceAccountKeyRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeleteServiceAccountKeyRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.DeleteServiceAccountKeyRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeleteServiceAccountKeyRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.DeleteServiceAccountKeyRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void DeleteServiceAccountKeyRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.DeleteServiceAccountKeyRequest.name)
}
void DeleteServiceAccountKeyRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.DeleteServiceAccountKeyRequest.name)
}

inline const DeleteServiceAccountKeyRequest* DeleteServiceAccountKeyRequest::internal_default_instance() {
  return &DeleteServiceAccountKeyRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignBlobRequest::kNameFieldNumber;
const int SignBlobRequest::kBytesToSignFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignBlobRequest::SignBlobRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.SignBlobRequest)
}
SignBlobRequest::SignBlobRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.SignBlobRequest)
}

void SignBlobRequest::InitAsDefaultInstance() {
}

SignBlobRequest::SignBlobRequest(const SignBlobRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.SignBlobRequest)
}

void SignBlobRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bytes_to_sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SignBlobRequest::~SignBlobRequest() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.SignBlobRequest)
  SharedDtor();
}

void SignBlobRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  bytes_to_sign_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void SignBlobRequest::ArenaDtor(void* object) {
  SignBlobRequest* _this = reinterpret_cast< SignBlobRequest* >(object);
  (void)_this;
}
void SignBlobRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SignBlobRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignBlobRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignBlobRequest_descriptor_;
}

const SignBlobRequest& SignBlobRequest::default_instance() {
  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SignBlobRequest> SignBlobRequest_default_instance_;

SignBlobRequest* SignBlobRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SignBlobRequest>(arena);
}

void SignBlobRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.SignBlobRequest)
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  bytes_to_sign_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool SignBlobRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.SignBlobRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.SignBlobRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bytes_to_sign;
        break;
      }

      // optional bytes bytes_to_sign = 2;
      case 2: {
        if (tag == 18) {
         parse_bytes_to_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytes_to_sign()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.SignBlobRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.SignBlobRequest)
  return false;
#undef DO_
}

void SignBlobRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.SignBlobRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.SignBlobRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional bytes bytes_to_sign = 2;
  if (this->bytes_to_sign().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->bytes_to_sign(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.SignBlobRequest)
}

::google::protobuf::uint8* SignBlobRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.SignBlobRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.SignBlobRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bytes bytes_to_sign = 2;
  if (this->bytes_to_sign().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->bytes_to_sign(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.SignBlobRequest)
  return target;
}

size_t SignBlobRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.SignBlobRequest)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional bytes bytes_to_sign = 2;
  if (this->bytes_to_sign().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->bytes_to_sign());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignBlobRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.SignBlobRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SignBlobRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SignBlobRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.SignBlobRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.SignBlobRequest)
    UnsafeMergeFrom(*source);
  }
}

void SignBlobRequest::MergeFrom(const SignBlobRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.SignBlobRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SignBlobRequest::UnsafeMergeFrom(const SignBlobRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.bytes_to_sign().size() > 0) {
    set_bytes_to_sign(from.bytes_to_sign());
  }
}

void SignBlobRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.SignBlobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignBlobRequest::CopyFrom(const SignBlobRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.SignBlobRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SignBlobRequest::IsInitialized() const {

  return true;
}

void SignBlobRequest::Swap(SignBlobRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SignBlobRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void SignBlobRequest::UnsafeArenaSwap(SignBlobRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SignBlobRequest::InternalSwap(SignBlobRequest* other) {
  name_.Swap(&other->name_);
  bytes_to_sign_.Swap(&other->bytes_to_sign_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SignBlobRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignBlobRequest_descriptor_;
  metadata.reflection = SignBlobRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SignBlobRequest

// optional string name = 1;
void SignBlobRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SignBlobRequest::name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.SignBlobRequest.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignBlobRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.SignBlobRequest.name)
}
void SignBlobRequest::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.SignBlobRequest.name)
}
void SignBlobRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.SignBlobRequest.name)
}
::std::string* SignBlobRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.SignBlobRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SignBlobRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.SignBlobRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SignBlobRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.SignBlobRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SignBlobRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.SignBlobRequest.name)
}
void SignBlobRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.SignBlobRequest.name)
}

// optional bytes bytes_to_sign = 2;
void SignBlobRequest::clear_bytes_to_sign() {
  bytes_to_sign_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SignBlobRequest::bytes_to_sign() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.SignBlobRequest.bytes_to_sign)
  return bytes_to_sign_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignBlobRequest::set_bytes_to_sign(const ::std::string& value) {
  
  bytes_to_sign_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.SignBlobRequest.bytes_to_sign)
}
void SignBlobRequest::set_bytes_to_sign(const char* value) {
  
  bytes_to_sign_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.SignBlobRequest.bytes_to_sign)
}
void SignBlobRequest::set_bytes_to_sign(const void* value,
    size_t size) {
  
  bytes_to_sign_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.SignBlobRequest.bytes_to_sign)
}
::std::string* SignBlobRequest::mutable_bytes_to_sign() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.SignBlobRequest.bytes_to_sign)
  return bytes_to_sign_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SignBlobRequest::release_bytes_to_sign() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.SignBlobRequest.bytes_to_sign)
  
  return bytes_to_sign_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SignBlobRequest::unsafe_arena_release_bytes_to_sign() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.SignBlobRequest.bytes_to_sign)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return bytes_to_sign_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SignBlobRequest::set_allocated_bytes_to_sign(::std::string* bytes_to_sign) {
  if (bytes_to_sign != NULL) {
    
  } else {
    
  }
  bytes_to_sign_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bytes_to_sign,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.SignBlobRequest.bytes_to_sign)
}
void SignBlobRequest::unsafe_arena_set_allocated_bytes_to_sign(
    ::std::string* bytes_to_sign) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (bytes_to_sign != NULL) {
    
  } else {
    
  }
  bytes_to_sign_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      bytes_to_sign, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.SignBlobRequest.bytes_to_sign)
}

inline const SignBlobRequest* SignBlobRequest::internal_default_instance() {
  return &SignBlobRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignBlobResponse::kKeyIdFieldNumber;
const int SignBlobResponse::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignBlobResponse::SignBlobResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.SignBlobResponse)
}
SignBlobResponse::SignBlobResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.SignBlobResponse)
}

void SignBlobResponse::InitAsDefaultInstance() {
}

SignBlobResponse::SignBlobResponse(const SignBlobResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.SignBlobResponse)
}

void SignBlobResponse::SharedCtor() {
  key_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SignBlobResponse::~SignBlobResponse() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.SignBlobResponse)
  SharedDtor();
}

void SignBlobResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  key_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  signature_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void SignBlobResponse::ArenaDtor(void* object) {
  SignBlobResponse* _this = reinterpret_cast< SignBlobResponse* >(object);
  (void)_this;
}
void SignBlobResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SignBlobResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignBlobResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignBlobResponse_descriptor_;
}

const SignBlobResponse& SignBlobResponse::default_instance() {
  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SignBlobResponse> SignBlobResponse_default_instance_;

SignBlobResponse* SignBlobResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SignBlobResponse>(arena);
}

void SignBlobResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.SignBlobResponse)
  key_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  signature_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool SignBlobResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.SignBlobResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key_id().data(), this->key_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.SignBlobResponse.key_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_signature;
        break;
      }

      // optional bytes signature = 2;
      case 2: {
        if (tag == 18) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.SignBlobResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.SignBlobResponse)
  return false;
#undef DO_
}

void SignBlobResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.SignBlobResponse)
  // optional string key_id = 1;
  if (this->key_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key_id().data(), this->key_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.SignBlobResponse.key_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key_id(), output);
  }

  // optional bytes signature = 2;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->signature(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.SignBlobResponse)
}

::google::protobuf::uint8* SignBlobResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.SignBlobResponse)
  // optional string key_id = 1;
  if (this->key_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key_id().data(), this->key_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.SignBlobResponse.key_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key_id(), target);
  }

  // optional bytes signature = 2;
  if (this->signature().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->signature(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.SignBlobResponse)
  return target;
}

size_t SignBlobResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.SignBlobResponse)
  size_t total_size = 0;

  // optional string key_id = 1;
  if (this->key_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key_id());
  }

  // optional bytes signature = 2;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->signature());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignBlobResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.SignBlobResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SignBlobResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SignBlobResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.SignBlobResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.SignBlobResponse)
    UnsafeMergeFrom(*source);
  }
}

void SignBlobResponse::MergeFrom(const SignBlobResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.SignBlobResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SignBlobResponse::UnsafeMergeFrom(const SignBlobResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.key_id().size() > 0) {
    set_key_id(from.key_id());
  }
  if (from.signature().size() > 0) {
    set_signature(from.signature());
  }
}

void SignBlobResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.SignBlobResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignBlobResponse::CopyFrom(const SignBlobResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.SignBlobResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SignBlobResponse::IsInitialized() const {

  return true;
}

void SignBlobResponse::Swap(SignBlobResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SignBlobResponse temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void SignBlobResponse::UnsafeArenaSwap(SignBlobResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SignBlobResponse::InternalSwap(SignBlobResponse* other) {
  key_id_.Swap(&other->key_id_);
  signature_.Swap(&other->signature_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SignBlobResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignBlobResponse_descriptor_;
  metadata.reflection = SignBlobResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SignBlobResponse

// optional string key_id = 1;
void SignBlobResponse::clear_key_id() {
  key_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SignBlobResponse::key_id() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.SignBlobResponse.key_id)
  return key_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignBlobResponse::set_key_id(const ::std::string& value) {
  
  key_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.SignBlobResponse.key_id)
}
void SignBlobResponse::set_key_id(const char* value) {
  
  key_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.SignBlobResponse.key_id)
}
void SignBlobResponse::set_key_id(const char* value,
    size_t size) {
  
  key_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.SignBlobResponse.key_id)
}
::std::string* SignBlobResponse::mutable_key_id() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.SignBlobResponse.key_id)
  return key_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SignBlobResponse::release_key_id() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.SignBlobResponse.key_id)
  
  return key_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SignBlobResponse::unsafe_arena_release_key_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.SignBlobResponse.key_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return key_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SignBlobResponse::set_allocated_key_id(::std::string* key_id) {
  if (key_id != NULL) {
    
  } else {
    
  }
  key_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.SignBlobResponse.key_id)
}
void SignBlobResponse::unsafe_arena_set_allocated_key_id(
    ::std::string* key_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (key_id != NULL) {
    
  } else {
    
  }
  key_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      key_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.SignBlobResponse.key_id)
}

// optional bytes signature = 2;
void SignBlobResponse::clear_signature() {
  signature_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SignBlobResponse::signature() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.SignBlobResponse.signature)
  return signature_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignBlobResponse::set_signature(const ::std::string& value) {
  
  signature_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.SignBlobResponse.signature)
}
void SignBlobResponse::set_signature(const char* value) {
  
  signature_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.SignBlobResponse.signature)
}
void SignBlobResponse::set_signature(const void* value,
    size_t size) {
  
  signature_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.SignBlobResponse.signature)
}
::std::string* SignBlobResponse::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.SignBlobResponse.signature)
  return signature_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SignBlobResponse::release_signature() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.SignBlobResponse.signature)
  
  return signature_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SignBlobResponse::unsafe_arena_release_signature() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.SignBlobResponse.signature)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return signature_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SignBlobResponse::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.SignBlobResponse.signature)
}
void SignBlobResponse::unsafe_arena_set_allocated_signature(
    ::std::string* signature) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      signature, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.SignBlobResponse.signature)
}

inline const SignBlobResponse* SignBlobResponse::internal_default_instance() {
  return &SignBlobResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Role::kNameFieldNumber;
const int Role::kTitleFieldNumber;
const int Role::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Role::Role()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.Role)
}
Role::Role(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.Role)
}

void Role::InitAsDefaultInstance() {
}

Role::Role(const Role& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.Role)
}

void Role::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Role::~Role() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.Role)
  SharedDtor();
}

void Role::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  title_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  description_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void Role::ArenaDtor(void* object) {
  Role* _this = reinterpret_cast< Role* >(object);
  (void)_this;
}
void Role::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Role::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Role::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Role_descriptor_;
}

const Role& Role::default_instance() {
  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Role> Role_default_instance_;

Role* Role::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Role>(arena);
}

void Role::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.Role)
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  title_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool Role::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.Role)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.Role.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional string title = 2;
      case 2: {
        if (tag == 18) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.Role.title"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_description;
        break;
      }

      // optional string description = 3;
      case 3: {
        if (tag == 26) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.Role.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.Role)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.Role)
  return false;
#undef DO_
}

void Role::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.Role)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.Role.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.Role.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // optional string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.Role.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.Role)
}

::google::protobuf::uint8* Role::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.Role)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.Role.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.Role.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.Role.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.Role)
  return target;
}

size_t Role::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.Role)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // optional string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Role::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.Role)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Role* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Role>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.Role)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.Role)
    UnsafeMergeFrom(*source);
  }
}

void Role::MergeFrom(const Role& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.Role)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Role::UnsafeMergeFrom(const Role& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.title().size() > 0) {
    set_title(from.title());
  }
  if (from.description().size() > 0) {
    set_description(from.description());
  }
}

void Role::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.Role)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Role::CopyFrom(const Role& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.Role)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Role::IsInitialized() const {

  return true;
}

void Role::Swap(Role* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Role temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void Role::UnsafeArenaSwap(Role* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Role::InternalSwap(Role* other) {
  name_.Swap(&other->name_);
  title_.Swap(&other->title_);
  description_.Swap(&other->description_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Role::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Role_descriptor_;
  metadata.reflection = Role_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Role

// optional string name = 1;
void Role::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Role::name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.Role.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Role::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.Role.name)
}
void Role::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.Role.name)
}
void Role::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.Role.name)
}
::std::string* Role::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.Role.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Role::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.Role.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Role::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.Role.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Role::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.Role.name)
}
void Role::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.Role.name)
}

// optional string title = 2;
void Role::clear_title() {
  title_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Role::title() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.Role.title)
  return title_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Role::set_title(const ::std::string& value) {
  
  title_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.Role.title)
}
void Role::set_title(const char* value) {
  
  title_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.Role.title)
}
void Role::set_title(const char* value,
    size_t size) {
  
  title_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.Role.title)
}
::std::string* Role::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.Role.title)
  return title_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Role::release_title() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.Role.title)
  
  return title_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Role::unsafe_arena_release_title() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.Role.title)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return title_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Role::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.Role.title)
}
void Role::unsafe_arena_set_allocated_title(
    ::std::string* title) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (title != NULL) {
    
  } else {
    
  }
  title_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      title, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.Role.title)
}

// optional string description = 3;
void Role::clear_description() {
  description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Role::description() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.Role.description)
  return description_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Role::set_description(const ::std::string& value) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.Role.description)
}
void Role::set_description(const char* value) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.Role.description)
}
void Role::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.Role.description)
}
::std::string* Role::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.Role.description)
  return description_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Role::release_description() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.Role.description)
  
  return description_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Role::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.Role.description)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return description_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Role::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.Role.description)
}
void Role::unsafe_arena_set_allocated_description(
    ::std::string* description) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (description != NULL) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      description, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.Role.description)
}

inline const Role* Role::internal_default_instance() {
  return &Role_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryGrantableRolesRequest::kFullResourceNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryGrantableRolesRequest::QueryGrantableRolesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.QueryGrantableRolesRequest)
}
QueryGrantableRolesRequest::QueryGrantableRolesRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.QueryGrantableRolesRequest)
}

void QueryGrantableRolesRequest::InitAsDefaultInstance() {
}

QueryGrantableRolesRequest::QueryGrantableRolesRequest(const QueryGrantableRolesRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.QueryGrantableRolesRequest)
}

void QueryGrantableRolesRequest::SharedCtor() {
  full_resource_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

QueryGrantableRolesRequest::~QueryGrantableRolesRequest() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.QueryGrantableRolesRequest)
  SharedDtor();
}

void QueryGrantableRolesRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  full_resource_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void QueryGrantableRolesRequest::ArenaDtor(void* object) {
  QueryGrantableRolesRequest* _this = reinterpret_cast< QueryGrantableRolesRequest* >(object);
  (void)_this;
}
void QueryGrantableRolesRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void QueryGrantableRolesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryGrantableRolesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryGrantableRolesRequest_descriptor_;
}

const QueryGrantableRolesRequest& QueryGrantableRolesRequest::default_instance() {
  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<QueryGrantableRolesRequest> QueryGrantableRolesRequest_default_instance_;

QueryGrantableRolesRequest* QueryGrantableRolesRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<QueryGrantableRolesRequest>(arena);
}

void QueryGrantableRolesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.QueryGrantableRolesRequest)
  full_resource_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool QueryGrantableRolesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.QueryGrantableRolesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string full_resource_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_full_resource_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->full_resource_name().data(), this->full_resource_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.QueryGrantableRolesRequest.full_resource_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.QueryGrantableRolesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.QueryGrantableRolesRequest)
  return false;
#undef DO_
}

void QueryGrantableRolesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.QueryGrantableRolesRequest)
  // optional string full_resource_name = 1;
  if (this->full_resource_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->full_resource_name().data(), this->full_resource_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.QueryGrantableRolesRequest.full_resource_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->full_resource_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.QueryGrantableRolesRequest)
}

::google::protobuf::uint8* QueryGrantableRolesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.QueryGrantableRolesRequest)
  // optional string full_resource_name = 1;
  if (this->full_resource_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->full_resource_name().data(), this->full_resource_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.QueryGrantableRolesRequest.full_resource_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->full_resource_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.QueryGrantableRolesRequest)
  return target;
}

size_t QueryGrantableRolesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.QueryGrantableRolesRequest)
  size_t total_size = 0;

  // optional string full_resource_name = 1;
  if (this->full_resource_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->full_resource_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryGrantableRolesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.QueryGrantableRolesRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QueryGrantableRolesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryGrantableRolesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.QueryGrantableRolesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.QueryGrantableRolesRequest)
    UnsafeMergeFrom(*source);
  }
}

void QueryGrantableRolesRequest::MergeFrom(const QueryGrantableRolesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.QueryGrantableRolesRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void QueryGrantableRolesRequest::UnsafeMergeFrom(const QueryGrantableRolesRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.full_resource_name().size() > 0) {
    set_full_resource_name(from.full_resource_name());
  }
}

void QueryGrantableRolesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.QueryGrantableRolesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryGrantableRolesRequest::CopyFrom(const QueryGrantableRolesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.QueryGrantableRolesRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool QueryGrantableRolesRequest::IsInitialized() const {

  return true;
}

void QueryGrantableRolesRequest::Swap(QueryGrantableRolesRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    QueryGrantableRolesRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void QueryGrantableRolesRequest::UnsafeArenaSwap(QueryGrantableRolesRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void QueryGrantableRolesRequest::InternalSwap(QueryGrantableRolesRequest* other) {
  full_resource_name_.Swap(&other->full_resource_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryGrantableRolesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryGrantableRolesRequest_descriptor_;
  metadata.reflection = QueryGrantableRolesRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryGrantableRolesRequest

// optional string full_resource_name = 1;
void QueryGrantableRolesRequest::clear_full_resource_name() {
  full_resource_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& QueryGrantableRolesRequest::full_resource_name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.QueryGrantableRolesRequest.full_resource_name)
  return full_resource_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryGrantableRolesRequest::set_full_resource_name(const ::std::string& value) {
  
  full_resource_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.QueryGrantableRolesRequest.full_resource_name)
}
void QueryGrantableRolesRequest::set_full_resource_name(const char* value) {
  
  full_resource_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.QueryGrantableRolesRequest.full_resource_name)
}
void QueryGrantableRolesRequest::set_full_resource_name(const char* value,
    size_t size) {
  
  full_resource_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.QueryGrantableRolesRequest.full_resource_name)
}
::std::string* QueryGrantableRolesRequest::mutable_full_resource_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.QueryGrantableRolesRequest.full_resource_name)
  return full_resource_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* QueryGrantableRolesRequest::release_full_resource_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.QueryGrantableRolesRequest.full_resource_name)
  
  return full_resource_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* QueryGrantableRolesRequest::unsafe_arena_release_full_resource_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.QueryGrantableRolesRequest.full_resource_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return full_resource_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void QueryGrantableRolesRequest::set_allocated_full_resource_name(::std::string* full_resource_name) {
  if (full_resource_name != NULL) {
    
  } else {
    
  }
  full_resource_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), full_resource_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.QueryGrantableRolesRequest.full_resource_name)
}
void QueryGrantableRolesRequest::unsafe_arena_set_allocated_full_resource_name(
    ::std::string* full_resource_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (full_resource_name != NULL) {
    
  } else {
    
  }
  full_resource_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      full_resource_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.QueryGrantableRolesRequest.full_resource_name)
}

inline const QueryGrantableRolesRequest* QueryGrantableRolesRequest::internal_default_instance() {
  return &QueryGrantableRolesRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryGrantableRolesResponse::kRolesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryGrantableRolesResponse::QueryGrantableRolesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.QueryGrantableRolesResponse)
}
QueryGrantableRolesResponse::QueryGrantableRolesResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  roles_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.QueryGrantableRolesResponse)
}

void QueryGrantableRolesResponse::InitAsDefaultInstance() {
}

QueryGrantableRolesResponse::QueryGrantableRolesResponse(const QueryGrantableRolesResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.QueryGrantableRolesResponse)
}

void QueryGrantableRolesResponse::SharedCtor() {
  _cached_size_ = 0;
}

QueryGrantableRolesResponse::~QueryGrantableRolesResponse() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.QueryGrantableRolesResponse)
  SharedDtor();
}

void QueryGrantableRolesResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void QueryGrantableRolesResponse::ArenaDtor(void* object) {
  QueryGrantableRolesResponse* _this = reinterpret_cast< QueryGrantableRolesResponse* >(object);
  (void)_this;
}
void QueryGrantableRolesResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void QueryGrantableRolesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryGrantableRolesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryGrantableRolesResponse_descriptor_;
}

const QueryGrantableRolesResponse& QueryGrantableRolesResponse::default_instance() {
  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<QueryGrantableRolesResponse> QueryGrantableRolesResponse_default_instance_;

QueryGrantableRolesResponse* QueryGrantableRolesResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<QueryGrantableRolesResponse>(arena);
}

void QueryGrantableRolesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.QueryGrantableRolesResponse)
  roles_.Clear();
}

bool QueryGrantableRolesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.QueryGrantableRolesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.iam.admin.v1.Role roles = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_roles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_roles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_roles;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.QueryGrantableRolesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.QueryGrantableRolesResponse)
  return false;
#undef DO_
}

void QueryGrantableRolesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.QueryGrantableRolesResponse)
  // repeated .google.iam.admin.v1.Role roles = 1;
  for (unsigned int i = 0, n = this->roles_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roles(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.QueryGrantableRolesResponse)
}

::google::protobuf::uint8* QueryGrantableRolesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.QueryGrantableRolesResponse)
  // repeated .google.iam.admin.v1.Role roles = 1;
  for (unsigned int i = 0, n = this->roles_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->roles(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.QueryGrantableRolesResponse)
  return target;
}

size_t QueryGrantableRolesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.QueryGrantableRolesResponse)
  size_t total_size = 0;

  // repeated .google.iam.admin.v1.Role roles = 1;
  {
    unsigned int count = this->roles_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roles(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryGrantableRolesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.QueryGrantableRolesResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QueryGrantableRolesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryGrantableRolesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.QueryGrantableRolesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.QueryGrantableRolesResponse)
    UnsafeMergeFrom(*source);
  }
}

void QueryGrantableRolesResponse::MergeFrom(const QueryGrantableRolesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.QueryGrantableRolesResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void QueryGrantableRolesResponse::UnsafeMergeFrom(const QueryGrantableRolesResponse& from) {
  GOOGLE_DCHECK(&from != this);
  roles_.MergeFrom(from.roles_);
}

void QueryGrantableRolesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.QueryGrantableRolesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryGrantableRolesResponse::CopyFrom(const QueryGrantableRolesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.QueryGrantableRolesResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool QueryGrantableRolesResponse::IsInitialized() const {

  return true;
}

void QueryGrantableRolesResponse::Swap(QueryGrantableRolesResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    QueryGrantableRolesResponse temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void QueryGrantableRolesResponse::UnsafeArenaSwap(QueryGrantableRolesResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void QueryGrantableRolesResponse::InternalSwap(QueryGrantableRolesResponse* other) {
  roles_.UnsafeArenaSwap(&other->roles_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryGrantableRolesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryGrantableRolesResponse_descriptor_;
  metadata.reflection = QueryGrantableRolesResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryGrantableRolesResponse

// repeated .google.iam.admin.v1.Role roles = 1;
int QueryGrantableRolesResponse::roles_size() const {
  return roles_.size();
}
void QueryGrantableRolesResponse::clear_roles() {
  roles_.Clear();
}
const ::google::iam::admin::v1::Role& QueryGrantableRolesResponse::roles(int index) const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.QueryGrantableRolesResponse.roles)
  return roles_.Get(index);
}
::google::iam::admin::v1::Role* QueryGrantableRolesResponse::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.QueryGrantableRolesResponse.roles)
  return roles_.Mutable(index);
}
::google::iam::admin::v1::Role* QueryGrantableRolesResponse::add_roles() {
  // @@protoc_insertion_point(field_add:google.iam.admin.v1.QueryGrantableRolesResponse.roles)
  return roles_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::Role >*
QueryGrantableRolesResponse::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:google.iam.admin.v1.QueryGrantableRolesResponse.roles)
  return &roles_;
}
const ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::Role >&
QueryGrantableRolesResponse::roles() const {
  // @@protoc_insertion_point(field_list:google.iam.admin.v1.QueryGrantableRolesResponse.roles)
  return roles_;
}

inline const QueryGrantableRolesResponse* QueryGrantableRolesResponse::internal_default_instance() {
  return &QueryGrantableRolesResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace admin
}  // namespace iam
}  // namespace google

// @@protoc_insertion_point(global_scope)
