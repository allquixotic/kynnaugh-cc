// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/iam/admin/v1/iam.proto

#ifndef PROTOBUF_google_2fiam_2fadmin_2fv1_2fiam_2eproto__INCLUDED
#define PROTOBUF_google_2fiam_2fadmin_2fv1_2fiam_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/iam/v1/iam_policy.pb.h"
#include "google/iam/v1/policy.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace iam {
namespace admin {
namespace v1 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
void protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
void protobuf_AssignDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
void protobuf_ShutdownFile_google_2fiam_2fadmin_2fv1_2fiam_2eproto();

class CreateServiceAccountKeyRequest;
class CreateServiceAccountRequest;
class DeleteServiceAccountKeyRequest;
class DeleteServiceAccountRequest;
class GetServiceAccountKeyRequest;
class GetServiceAccountRequest;
class ListServiceAccountKeysRequest;
class ListServiceAccountKeysResponse;
class ListServiceAccountsRequest;
class ListServiceAccountsResponse;
class QueryGrantableRolesRequest;
class QueryGrantableRolesResponse;
class Role;
class ServiceAccount;
class ServiceAccountKey;
class SignBlobRequest;
class SignBlobResponse;

enum ListServiceAccountKeysRequest_KeyType {
  ListServiceAccountKeysRequest_KeyType_KEY_TYPE_UNSPECIFIED = 0,
  ListServiceAccountKeysRequest_KeyType_USER_MANAGED = 1,
  ListServiceAccountKeysRequest_KeyType_SYSTEM_MANAGED = 2,
  ListServiceAccountKeysRequest_KeyType_ListServiceAccountKeysRequest_KeyType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ListServiceAccountKeysRequest_KeyType_ListServiceAccountKeysRequest_KeyType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ListServiceAccountKeysRequest_KeyType_IsValid(int value);
const ListServiceAccountKeysRequest_KeyType ListServiceAccountKeysRequest_KeyType_KeyType_MIN = ListServiceAccountKeysRequest_KeyType_KEY_TYPE_UNSPECIFIED;
const ListServiceAccountKeysRequest_KeyType ListServiceAccountKeysRequest_KeyType_KeyType_MAX = ListServiceAccountKeysRequest_KeyType_SYSTEM_MANAGED;
const int ListServiceAccountKeysRequest_KeyType_KeyType_ARRAYSIZE = ListServiceAccountKeysRequest_KeyType_KeyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ListServiceAccountKeysRequest_KeyType_descriptor();
inline const ::std::string& ListServiceAccountKeysRequest_KeyType_Name(ListServiceAccountKeysRequest_KeyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ListServiceAccountKeysRequest_KeyType_descriptor(), value);
}
inline bool ListServiceAccountKeysRequest_KeyType_Parse(
    const ::std::string& name, ListServiceAccountKeysRequest_KeyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ListServiceAccountKeysRequest_KeyType>(
    ListServiceAccountKeysRequest_KeyType_descriptor(), name, value);
}
enum ServiceAccountKeyAlgorithm {
  KEY_ALG_UNSPECIFIED = 0,
  KEY_ALG_RSA_1024 = 1,
  KEY_ALG_RSA_2048 = 2,
  ServiceAccountKeyAlgorithm_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ServiceAccountKeyAlgorithm_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ServiceAccountKeyAlgorithm_IsValid(int value);
const ServiceAccountKeyAlgorithm ServiceAccountKeyAlgorithm_MIN = KEY_ALG_UNSPECIFIED;
const ServiceAccountKeyAlgorithm ServiceAccountKeyAlgorithm_MAX = KEY_ALG_RSA_2048;
const int ServiceAccountKeyAlgorithm_ARRAYSIZE = ServiceAccountKeyAlgorithm_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServiceAccountKeyAlgorithm_descriptor();
inline const ::std::string& ServiceAccountKeyAlgorithm_Name(ServiceAccountKeyAlgorithm value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServiceAccountKeyAlgorithm_descriptor(), value);
}
inline bool ServiceAccountKeyAlgorithm_Parse(
    const ::std::string& name, ServiceAccountKeyAlgorithm* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServiceAccountKeyAlgorithm>(
    ServiceAccountKeyAlgorithm_descriptor(), name, value);
}
enum ServiceAccountPrivateKeyType {
  TYPE_UNSPECIFIED = 0,
  TYPE_PKCS12_FILE = 1,
  TYPE_GOOGLE_CREDENTIALS_FILE = 2,
  ServiceAccountPrivateKeyType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ServiceAccountPrivateKeyType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ServiceAccountPrivateKeyType_IsValid(int value);
const ServiceAccountPrivateKeyType ServiceAccountPrivateKeyType_MIN = TYPE_UNSPECIFIED;
const ServiceAccountPrivateKeyType ServiceAccountPrivateKeyType_MAX = TYPE_GOOGLE_CREDENTIALS_FILE;
const int ServiceAccountPrivateKeyType_ARRAYSIZE = ServiceAccountPrivateKeyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServiceAccountPrivateKeyType_descriptor();
inline const ::std::string& ServiceAccountPrivateKeyType_Name(ServiceAccountPrivateKeyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServiceAccountPrivateKeyType_descriptor(), value);
}
inline bool ServiceAccountPrivateKeyType_Parse(
    const ::std::string& name, ServiceAccountPrivateKeyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServiceAccountPrivateKeyType>(
    ServiceAccountPrivateKeyType_descriptor(), name, value);
}
enum ServiceAccountPublicKeyType {
  TYPE_NONE = 0,
  TYPE_X509_PEM_FILE = 1,
  TYPE_RAW_PUBLIC_KEY = 2,
  ServiceAccountPublicKeyType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ServiceAccountPublicKeyType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ServiceAccountPublicKeyType_IsValid(int value);
const ServiceAccountPublicKeyType ServiceAccountPublicKeyType_MIN = TYPE_NONE;
const ServiceAccountPublicKeyType ServiceAccountPublicKeyType_MAX = TYPE_RAW_PUBLIC_KEY;
const int ServiceAccountPublicKeyType_ARRAYSIZE = ServiceAccountPublicKeyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServiceAccountPublicKeyType_descriptor();
inline const ::std::string& ServiceAccountPublicKeyType_Name(ServiceAccountPublicKeyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServiceAccountPublicKeyType_descriptor(), value);
}
inline bool ServiceAccountPublicKeyType_Parse(
    const ::std::string& name, ServiceAccountPublicKeyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServiceAccountPublicKeyType>(
    ServiceAccountPublicKeyType_descriptor(), name, value);
}
// ===================================================================

class ServiceAccount : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.ServiceAccount) */ {
 public:
  ServiceAccount();
  virtual ~ServiceAccount();

  ServiceAccount(const ServiceAccount& from);

  inline ServiceAccount& operator=(const ServiceAccount& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceAccount& default_instance();

  static const ServiceAccount* internal_default_instance();

  void UnsafeArenaSwap(ServiceAccount* other);
  void Swap(ServiceAccount* other);

  // implements Message ----------------------------------------------

  inline ServiceAccount* New() const { return New(NULL); }

  ServiceAccount* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServiceAccount& from);
  void MergeFrom(const ServiceAccount& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServiceAccount* other);
  void UnsafeMergeFrom(const ServiceAccount& from);
  protected:
  explicit ServiceAccount(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  ::std::string* unsafe_arena_release_name();
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // optional string project_id = 2;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 2;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);
  ::std::string* unsafe_arena_release_project_id();
  void unsafe_arena_set_allocated_project_id(
      ::std::string* project_id);

  // optional string unique_id = 4;
  void clear_unique_id();
  static const int kUniqueIdFieldNumber = 4;
  const ::std::string& unique_id() const;
  void set_unique_id(const ::std::string& value);
  void set_unique_id(const char* value);
  void set_unique_id(const char* value, size_t size);
  ::std::string* mutable_unique_id();
  ::std::string* release_unique_id();
  void set_allocated_unique_id(::std::string* unique_id);
  ::std::string* unsafe_arena_release_unique_id();
  void unsafe_arena_set_allocated_unique_id(
      ::std::string* unique_id);

  // optional string email = 5;
  void clear_email();
  static const int kEmailFieldNumber = 5;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);
  ::std::string* unsafe_arena_release_email();
  void unsafe_arena_set_allocated_email(
      ::std::string* email);

  // optional string display_name = 6;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 6;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);
  ::std::string* unsafe_arena_release_display_name();
  void unsafe_arena_set_allocated_display_name(
      ::std::string* display_name);

  // optional bytes etag = 7;
  void clear_etag();
  static const int kEtagFieldNumber = 7;
  const ::std::string& etag() const;
  void set_etag(const ::std::string& value);
  void set_etag(const char* value);
  void set_etag(const void* value, size_t size);
  ::std::string* mutable_etag();
  ::std::string* release_etag();
  void set_allocated_etag(::std::string* etag);
  ::std::string* unsafe_arena_release_etag();
  void unsafe_arena_set_allocated_etag(
      ::std::string* etag);

  // optional string oauth2_client_id = 9;
  void clear_oauth2_client_id();
  static const int kOauth2ClientIdFieldNumber = 9;
  const ::std::string& oauth2_client_id() const;
  void set_oauth2_client_id(const ::std::string& value);
  void set_oauth2_client_id(const char* value);
  void set_oauth2_client_id(const char* value, size_t size);
  ::std::string* mutable_oauth2_client_id();
  ::std::string* release_oauth2_client_id();
  void set_allocated_oauth2_client_id(::std::string* oauth2_client_id);
  ::std::string* unsafe_arena_release_oauth2_client_id();
  void unsafe_arena_set_allocated_oauth2_client_id(
      ::std::string* oauth2_client_id);

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.ServiceAccount)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr unique_id_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::protobuf::internal::ArenaStringPtr etag_;
  ::google::protobuf::internal::ArenaStringPtr oauth2_client_id_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  friend void protobuf_ShutdownFile_google_2fiam_2fadmin_2fv1_2fiam_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ServiceAccount> ServiceAccount_default_instance_;

// -------------------------------------------------------------------

class CreateServiceAccountRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.CreateServiceAccountRequest) */ {
 public:
  CreateServiceAccountRequest();
  virtual ~CreateServiceAccountRequest();

  CreateServiceAccountRequest(const CreateServiceAccountRequest& from);

  inline CreateServiceAccountRequest& operator=(const CreateServiceAccountRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateServiceAccountRequest& default_instance();

  static const CreateServiceAccountRequest* internal_default_instance();

  void UnsafeArenaSwap(CreateServiceAccountRequest* other);
  void Swap(CreateServiceAccountRequest* other);

  // implements Message ----------------------------------------------

  inline CreateServiceAccountRequest* New() const { return New(NULL); }

  CreateServiceAccountRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateServiceAccountRequest& from);
  void MergeFrom(const CreateServiceAccountRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CreateServiceAccountRequest* other);
  void UnsafeMergeFrom(const CreateServiceAccountRequest& from);
  protected:
  explicit CreateServiceAccountRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  ::std::string* unsafe_arena_release_name();
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // optional string account_id = 2;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 2;
  const ::std::string& account_id() const;
  void set_account_id(const ::std::string& value);
  void set_account_id(const char* value);
  void set_account_id(const char* value, size_t size);
  ::std::string* mutable_account_id();
  ::std::string* release_account_id();
  void set_allocated_account_id(::std::string* account_id);
  ::std::string* unsafe_arena_release_account_id();
  void unsafe_arena_set_allocated_account_id(
      ::std::string* account_id);

  // optional .google.iam.admin.v1.ServiceAccount service_account = 3;
  bool has_service_account() const;
  void clear_service_account();
  static const int kServiceAccountFieldNumber = 3;
  private:
  void _slow_mutable_service_account();
  void _slow_set_allocated_service_account(
      ::google::protobuf::Arena* message_arena, ::google::iam::admin::v1::ServiceAccount** service_account);
  ::google::iam::admin::v1::ServiceAccount* _slow_release_service_account();
  public:
  const ::google::iam::admin::v1::ServiceAccount& service_account() const;
  ::google::iam::admin::v1::ServiceAccount* mutable_service_account();
  ::google::iam::admin::v1::ServiceAccount* release_service_account();
  void set_allocated_service_account(::google::iam::admin::v1::ServiceAccount* service_account);
  ::google::iam::admin::v1::ServiceAccount* unsafe_arena_release_service_account();
  void unsafe_arena_set_allocated_service_account(
      ::google::iam::admin::v1::ServiceAccount* service_account);

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.CreateServiceAccountRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr account_id_;
  ::google::iam::admin::v1::ServiceAccount* service_account_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  friend void protobuf_ShutdownFile_google_2fiam_2fadmin_2fv1_2fiam_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<CreateServiceAccountRequest> CreateServiceAccountRequest_default_instance_;

// -------------------------------------------------------------------

class ListServiceAccountsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.ListServiceAccountsRequest) */ {
 public:
  ListServiceAccountsRequest();
  virtual ~ListServiceAccountsRequest();

  ListServiceAccountsRequest(const ListServiceAccountsRequest& from);

  inline ListServiceAccountsRequest& operator=(const ListServiceAccountsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListServiceAccountsRequest& default_instance();

  static const ListServiceAccountsRequest* internal_default_instance();

  void UnsafeArenaSwap(ListServiceAccountsRequest* other);
  void Swap(ListServiceAccountsRequest* other);

  // implements Message ----------------------------------------------

  inline ListServiceAccountsRequest* New() const { return New(NULL); }

  ListServiceAccountsRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListServiceAccountsRequest& from);
  void MergeFrom(const ListServiceAccountsRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ListServiceAccountsRequest* other);
  void UnsafeMergeFrom(const ListServiceAccountsRequest& from);
  protected:
  explicit ListServiceAccountsRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  ::std::string* unsafe_arena_release_name();
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // optional int32 page_size = 2;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 2;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // optional string page_token = 3;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 3;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);
  ::std::string* unsafe_arena_release_page_token();
  void unsafe_arena_set_allocated_page_token(
      ::std::string* page_token);

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.ListServiceAccountsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  friend void protobuf_ShutdownFile_google_2fiam_2fadmin_2fv1_2fiam_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ListServiceAccountsRequest> ListServiceAccountsRequest_default_instance_;

// -------------------------------------------------------------------

class ListServiceAccountsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.ListServiceAccountsResponse) */ {
 public:
  ListServiceAccountsResponse();
  virtual ~ListServiceAccountsResponse();

  ListServiceAccountsResponse(const ListServiceAccountsResponse& from);

  inline ListServiceAccountsResponse& operator=(const ListServiceAccountsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListServiceAccountsResponse& default_instance();

  static const ListServiceAccountsResponse* internal_default_instance();

  void UnsafeArenaSwap(ListServiceAccountsResponse* other);
  void Swap(ListServiceAccountsResponse* other);

  // implements Message ----------------------------------------------

  inline ListServiceAccountsResponse* New() const { return New(NULL); }

  ListServiceAccountsResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListServiceAccountsResponse& from);
  void MergeFrom(const ListServiceAccountsResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ListServiceAccountsResponse* other);
  void UnsafeMergeFrom(const ListServiceAccountsResponse& from);
  protected:
  explicit ListServiceAccountsResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.iam.admin.v1.ServiceAccount accounts = 1;
  int accounts_size() const;
  void clear_accounts();
  static const int kAccountsFieldNumber = 1;
  const ::google::iam::admin::v1::ServiceAccount& accounts(int index) const;
  ::google::iam::admin::v1::ServiceAccount* mutable_accounts(int index);
  ::google::iam::admin::v1::ServiceAccount* add_accounts();
  ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::ServiceAccount >*
      mutable_accounts();
  const ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::ServiceAccount >&
      accounts() const;

  // optional string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);
  ::std::string* unsafe_arena_release_next_page_token();
  void unsafe_arena_set_allocated_next_page_token(
      ::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.ListServiceAccountsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::ServiceAccount > accounts_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  friend void protobuf_ShutdownFile_google_2fiam_2fadmin_2fv1_2fiam_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ListServiceAccountsResponse> ListServiceAccountsResponse_default_instance_;

// -------------------------------------------------------------------

class GetServiceAccountRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.GetServiceAccountRequest) */ {
 public:
  GetServiceAccountRequest();
  virtual ~GetServiceAccountRequest();

  GetServiceAccountRequest(const GetServiceAccountRequest& from);

  inline GetServiceAccountRequest& operator=(const GetServiceAccountRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetServiceAccountRequest& default_instance();

  static const GetServiceAccountRequest* internal_default_instance();

  void UnsafeArenaSwap(GetServiceAccountRequest* other);
  void Swap(GetServiceAccountRequest* other);

  // implements Message ----------------------------------------------

  inline GetServiceAccountRequest* New() const { return New(NULL); }

  GetServiceAccountRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetServiceAccountRequest& from);
  void MergeFrom(const GetServiceAccountRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetServiceAccountRequest* other);
  void UnsafeMergeFrom(const GetServiceAccountRequest& from);
  protected:
  explicit GetServiceAccountRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  ::std::string* unsafe_arena_release_name();
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.GetServiceAccountRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  friend void protobuf_ShutdownFile_google_2fiam_2fadmin_2fv1_2fiam_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<GetServiceAccountRequest> GetServiceAccountRequest_default_instance_;

// -------------------------------------------------------------------

class DeleteServiceAccountRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.DeleteServiceAccountRequest) */ {
 public:
  DeleteServiceAccountRequest();
  virtual ~DeleteServiceAccountRequest();

  DeleteServiceAccountRequest(const DeleteServiceAccountRequest& from);

  inline DeleteServiceAccountRequest& operator=(const DeleteServiceAccountRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteServiceAccountRequest& default_instance();

  static const DeleteServiceAccountRequest* internal_default_instance();

  void UnsafeArenaSwap(DeleteServiceAccountRequest* other);
  void Swap(DeleteServiceAccountRequest* other);

  // implements Message ----------------------------------------------

  inline DeleteServiceAccountRequest* New() const { return New(NULL); }

  DeleteServiceAccountRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteServiceAccountRequest& from);
  void MergeFrom(const DeleteServiceAccountRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteServiceAccountRequest* other);
  void UnsafeMergeFrom(const DeleteServiceAccountRequest& from);
  protected:
  explicit DeleteServiceAccountRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  ::std::string* unsafe_arena_release_name();
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.DeleteServiceAccountRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  friend void protobuf_ShutdownFile_google_2fiam_2fadmin_2fv1_2fiam_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<DeleteServiceAccountRequest> DeleteServiceAccountRequest_default_instance_;

// -------------------------------------------------------------------

class ListServiceAccountKeysRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.ListServiceAccountKeysRequest) */ {
 public:
  ListServiceAccountKeysRequest();
  virtual ~ListServiceAccountKeysRequest();

  ListServiceAccountKeysRequest(const ListServiceAccountKeysRequest& from);

  inline ListServiceAccountKeysRequest& operator=(const ListServiceAccountKeysRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListServiceAccountKeysRequest& default_instance();

  static const ListServiceAccountKeysRequest* internal_default_instance();

  void UnsafeArenaSwap(ListServiceAccountKeysRequest* other);
  void Swap(ListServiceAccountKeysRequest* other);

  // implements Message ----------------------------------------------

  inline ListServiceAccountKeysRequest* New() const { return New(NULL); }

  ListServiceAccountKeysRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListServiceAccountKeysRequest& from);
  void MergeFrom(const ListServiceAccountKeysRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ListServiceAccountKeysRequest* other);
  void UnsafeMergeFrom(const ListServiceAccountKeysRequest& from);
  protected:
  explicit ListServiceAccountKeysRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ListServiceAccountKeysRequest_KeyType KeyType;
  static const KeyType KEY_TYPE_UNSPECIFIED =
    ListServiceAccountKeysRequest_KeyType_KEY_TYPE_UNSPECIFIED;
  static const KeyType USER_MANAGED =
    ListServiceAccountKeysRequest_KeyType_USER_MANAGED;
  static const KeyType SYSTEM_MANAGED =
    ListServiceAccountKeysRequest_KeyType_SYSTEM_MANAGED;
  static inline bool KeyType_IsValid(int value) {
    return ListServiceAccountKeysRequest_KeyType_IsValid(value);
  }
  static const KeyType KeyType_MIN =
    ListServiceAccountKeysRequest_KeyType_KeyType_MIN;
  static const KeyType KeyType_MAX =
    ListServiceAccountKeysRequest_KeyType_KeyType_MAX;
  static const int KeyType_ARRAYSIZE =
    ListServiceAccountKeysRequest_KeyType_KeyType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  KeyType_descriptor() {
    return ListServiceAccountKeysRequest_KeyType_descriptor();
  }
  static inline const ::std::string& KeyType_Name(KeyType value) {
    return ListServiceAccountKeysRequest_KeyType_Name(value);
  }
  static inline bool KeyType_Parse(const ::std::string& name,
      KeyType* value) {
    return ListServiceAccountKeysRequest_KeyType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  ::std::string* unsafe_arena_release_name();
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // repeated .google.iam.admin.v1.ListServiceAccountKeysRequest.KeyType key_types = 2;
  int key_types_size() const;
  void clear_key_types();
  static const int kKeyTypesFieldNumber = 2;
  ::google::iam::admin::v1::ListServiceAccountKeysRequest_KeyType key_types(int index) const;
  void set_key_types(int index, ::google::iam::admin::v1::ListServiceAccountKeysRequest_KeyType value);
  void add_key_types(::google::iam::admin::v1::ListServiceAccountKeysRequest_KeyType value);
  const ::google::protobuf::RepeatedField<int>& key_types() const;
  ::google::protobuf::RepeatedField<int>* mutable_key_types();

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.ListServiceAccountKeysRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedField<int> key_types_;
  mutable int _key_types_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  friend void protobuf_ShutdownFile_google_2fiam_2fadmin_2fv1_2fiam_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ListServiceAccountKeysRequest> ListServiceAccountKeysRequest_default_instance_;

// -------------------------------------------------------------------

class ListServiceAccountKeysResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.ListServiceAccountKeysResponse) */ {
 public:
  ListServiceAccountKeysResponse();
  virtual ~ListServiceAccountKeysResponse();

  ListServiceAccountKeysResponse(const ListServiceAccountKeysResponse& from);

  inline ListServiceAccountKeysResponse& operator=(const ListServiceAccountKeysResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListServiceAccountKeysResponse& default_instance();

  static const ListServiceAccountKeysResponse* internal_default_instance();

  void UnsafeArenaSwap(ListServiceAccountKeysResponse* other);
  void Swap(ListServiceAccountKeysResponse* other);

  // implements Message ----------------------------------------------

  inline ListServiceAccountKeysResponse* New() const { return New(NULL); }

  ListServiceAccountKeysResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListServiceAccountKeysResponse& from);
  void MergeFrom(const ListServiceAccountKeysResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ListServiceAccountKeysResponse* other);
  void UnsafeMergeFrom(const ListServiceAccountKeysResponse& from);
  protected:
  explicit ListServiceAccountKeysResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.iam.admin.v1.ServiceAccountKey keys = 1;
  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 1;
  const ::google::iam::admin::v1::ServiceAccountKey& keys(int index) const;
  ::google::iam::admin::v1::ServiceAccountKey* mutable_keys(int index);
  ::google::iam::admin::v1::ServiceAccountKey* add_keys();
  ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::ServiceAccountKey >*
      mutable_keys();
  const ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::ServiceAccountKey >&
      keys() const;

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.ListServiceAccountKeysResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::ServiceAccountKey > keys_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  friend void protobuf_ShutdownFile_google_2fiam_2fadmin_2fv1_2fiam_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ListServiceAccountKeysResponse> ListServiceAccountKeysResponse_default_instance_;

// -------------------------------------------------------------------

class GetServiceAccountKeyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.GetServiceAccountKeyRequest) */ {
 public:
  GetServiceAccountKeyRequest();
  virtual ~GetServiceAccountKeyRequest();

  GetServiceAccountKeyRequest(const GetServiceAccountKeyRequest& from);

  inline GetServiceAccountKeyRequest& operator=(const GetServiceAccountKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetServiceAccountKeyRequest& default_instance();

  static const GetServiceAccountKeyRequest* internal_default_instance();

  void UnsafeArenaSwap(GetServiceAccountKeyRequest* other);
  void Swap(GetServiceAccountKeyRequest* other);

  // implements Message ----------------------------------------------

  inline GetServiceAccountKeyRequest* New() const { return New(NULL); }

  GetServiceAccountKeyRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetServiceAccountKeyRequest& from);
  void MergeFrom(const GetServiceAccountKeyRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetServiceAccountKeyRequest* other);
  void UnsafeMergeFrom(const GetServiceAccountKeyRequest& from);
  protected:
  explicit GetServiceAccountKeyRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  ::std::string* unsafe_arena_release_name();
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // optional .google.iam.admin.v1.ServiceAccountPublicKeyType public_key_type = 2;
  void clear_public_key_type();
  static const int kPublicKeyTypeFieldNumber = 2;
  ::google::iam::admin::v1::ServiceAccountPublicKeyType public_key_type() const;
  void set_public_key_type(::google::iam::admin::v1::ServiceAccountPublicKeyType value);

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.GetServiceAccountKeyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int public_key_type_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  friend void protobuf_ShutdownFile_google_2fiam_2fadmin_2fv1_2fiam_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<GetServiceAccountKeyRequest> GetServiceAccountKeyRequest_default_instance_;

// -------------------------------------------------------------------

class ServiceAccountKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.ServiceAccountKey) */ {
 public:
  ServiceAccountKey();
  virtual ~ServiceAccountKey();

  ServiceAccountKey(const ServiceAccountKey& from);

  inline ServiceAccountKey& operator=(const ServiceAccountKey& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceAccountKey& default_instance();

  static const ServiceAccountKey* internal_default_instance();

  void UnsafeArenaSwap(ServiceAccountKey* other);
  void Swap(ServiceAccountKey* other);

  // implements Message ----------------------------------------------

  inline ServiceAccountKey* New() const { return New(NULL); }

  ServiceAccountKey* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServiceAccountKey& from);
  void MergeFrom(const ServiceAccountKey& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServiceAccountKey* other);
  void UnsafeMergeFrom(const ServiceAccountKey& from);
  protected:
  explicit ServiceAccountKey(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  ::std::string* unsafe_arena_release_name();
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // optional .google.iam.admin.v1.ServiceAccountPrivateKeyType private_key_type = 2;
  void clear_private_key_type();
  static const int kPrivateKeyTypeFieldNumber = 2;
  ::google::iam::admin::v1::ServiceAccountPrivateKeyType private_key_type() const;
  void set_private_key_type(::google::iam::admin::v1::ServiceAccountPrivateKeyType value);

  // optional .google.iam.admin.v1.ServiceAccountKeyAlgorithm key_algorithm = 8;
  void clear_key_algorithm();
  static const int kKeyAlgorithmFieldNumber = 8;
  ::google::iam::admin::v1::ServiceAccountKeyAlgorithm key_algorithm() const;
  void set_key_algorithm(::google::iam::admin::v1::ServiceAccountKeyAlgorithm value);

  // optional bytes private_key_data = 3;
  void clear_private_key_data();
  static const int kPrivateKeyDataFieldNumber = 3;
  const ::std::string& private_key_data() const;
  void set_private_key_data(const ::std::string& value);
  void set_private_key_data(const char* value);
  void set_private_key_data(const void* value, size_t size);
  ::std::string* mutable_private_key_data();
  ::std::string* release_private_key_data();
  void set_allocated_private_key_data(::std::string* private_key_data);
  ::std::string* unsafe_arena_release_private_key_data();
  void unsafe_arena_set_allocated_private_key_data(
      ::std::string* private_key_data);

  // optional bytes public_key_data = 7;
  void clear_public_key_data();
  static const int kPublicKeyDataFieldNumber = 7;
  const ::std::string& public_key_data() const;
  void set_public_key_data(const ::std::string& value);
  void set_public_key_data(const char* value);
  void set_public_key_data(const void* value, size_t size);
  ::std::string* mutable_public_key_data();
  ::std::string* release_public_key_data();
  void set_allocated_public_key_data(::std::string* public_key_data);
  ::std::string* unsafe_arena_release_public_key_data();
  void unsafe_arena_set_allocated_public_key_data(
      ::std::string* public_key_data);

  // optional .google.protobuf.Timestamp valid_after_time = 4;
  bool has_valid_after_time() const;
  void clear_valid_after_time();
  static const int kValidAfterTimeFieldNumber = 4;
  private:
  void _slow_mutable_valid_after_time();
  void _slow_set_allocated_valid_after_time(
      ::google::protobuf::Arena* message_arena, ::google::protobuf::Timestamp** valid_after_time);
  ::google::protobuf::Timestamp* _slow_release_valid_after_time();
  public:
  const ::google::protobuf::Timestamp& valid_after_time() const;
  ::google::protobuf::Timestamp* mutable_valid_after_time();
  ::google::protobuf::Timestamp* release_valid_after_time();
  void set_allocated_valid_after_time(::google::protobuf::Timestamp* valid_after_time);
  ::google::protobuf::Timestamp* unsafe_arena_release_valid_after_time();
  void unsafe_arena_set_allocated_valid_after_time(
      ::google::protobuf::Timestamp* valid_after_time);

  // optional .google.protobuf.Timestamp valid_before_time = 5;
  bool has_valid_before_time() const;
  void clear_valid_before_time();
  static const int kValidBeforeTimeFieldNumber = 5;
  private:
  void _slow_mutable_valid_before_time();
  void _slow_set_allocated_valid_before_time(
      ::google::protobuf::Arena* message_arena, ::google::protobuf::Timestamp** valid_before_time);
  ::google::protobuf::Timestamp* _slow_release_valid_before_time();
  public:
  const ::google::protobuf::Timestamp& valid_before_time() const;
  ::google::protobuf::Timestamp* mutable_valid_before_time();
  ::google::protobuf::Timestamp* release_valid_before_time();
  void set_allocated_valid_before_time(::google::protobuf::Timestamp* valid_before_time);
  ::google::protobuf::Timestamp* unsafe_arena_release_valid_before_time();
  void unsafe_arena_set_allocated_valid_before_time(
      ::google::protobuf::Timestamp* valid_before_time);

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.ServiceAccountKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr private_key_data_;
  ::google::protobuf::internal::ArenaStringPtr public_key_data_;
  ::google::protobuf::Timestamp* valid_after_time_;
  ::google::protobuf::Timestamp* valid_before_time_;
  int private_key_type_;
  int key_algorithm_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  friend void protobuf_ShutdownFile_google_2fiam_2fadmin_2fv1_2fiam_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ServiceAccountKey> ServiceAccountKey_default_instance_;

// -------------------------------------------------------------------

class CreateServiceAccountKeyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.CreateServiceAccountKeyRequest) */ {
 public:
  CreateServiceAccountKeyRequest();
  virtual ~CreateServiceAccountKeyRequest();

  CreateServiceAccountKeyRequest(const CreateServiceAccountKeyRequest& from);

  inline CreateServiceAccountKeyRequest& operator=(const CreateServiceAccountKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateServiceAccountKeyRequest& default_instance();

  static const CreateServiceAccountKeyRequest* internal_default_instance();

  void UnsafeArenaSwap(CreateServiceAccountKeyRequest* other);
  void Swap(CreateServiceAccountKeyRequest* other);

  // implements Message ----------------------------------------------

  inline CreateServiceAccountKeyRequest* New() const { return New(NULL); }

  CreateServiceAccountKeyRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateServiceAccountKeyRequest& from);
  void MergeFrom(const CreateServiceAccountKeyRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CreateServiceAccountKeyRequest* other);
  void UnsafeMergeFrom(const CreateServiceAccountKeyRequest& from);
  protected:
  explicit CreateServiceAccountKeyRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  ::std::string* unsafe_arena_release_name();
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // optional .google.iam.admin.v1.ServiceAccountPrivateKeyType private_key_type = 2;
  void clear_private_key_type();
  static const int kPrivateKeyTypeFieldNumber = 2;
  ::google::iam::admin::v1::ServiceAccountPrivateKeyType private_key_type() const;
  void set_private_key_type(::google::iam::admin::v1::ServiceAccountPrivateKeyType value);

  // optional .google.iam.admin.v1.ServiceAccountKeyAlgorithm key_algorithm = 3;
  void clear_key_algorithm();
  static const int kKeyAlgorithmFieldNumber = 3;
  ::google::iam::admin::v1::ServiceAccountKeyAlgorithm key_algorithm() const;
  void set_key_algorithm(::google::iam::admin::v1::ServiceAccountKeyAlgorithm value);

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.CreateServiceAccountKeyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int private_key_type_;
  int key_algorithm_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  friend void protobuf_ShutdownFile_google_2fiam_2fadmin_2fv1_2fiam_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<CreateServiceAccountKeyRequest> CreateServiceAccountKeyRequest_default_instance_;

// -------------------------------------------------------------------

class DeleteServiceAccountKeyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.DeleteServiceAccountKeyRequest) */ {
 public:
  DeleteServiceAccountKeyRequest();
  virtual ~DeleteServiceAccountKeyRequest();

  DeleteServiceAccountKeyRequest(const DeleteServiceAccountKeyRequest& from);

  inline DeleteServiceAccountKeyRequest& operator=(const DeleteServiceAccountKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteServiceAccountKeyRequest& default_instance();

  static const DeleteServiceAccountKeyRequest* internal_default_instance();

  void UnsafeArenaSwap(DeleteServiceAccountKeyRequest* other);
  void Swap(DeleteServiceAccountKeyRequest* other);

  // implements Message ----------------------------------------------

  inline DeleteServiceAccountKeyRequest* New() const { return New(NULL); }

  DeleteServiceAccountKeyRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteServiceAccountKeyRequest& from);
  void MergeFrom(const DeleteServiceAccountKeyRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteServiceAccountKeyRequest* other);
  void UnsafeMergeFrom(const DeleteServiceAccountKeyRequest& from);
  protected:
  explicit DeleteServiceAccountKeyRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  ::std::string* unsafe_arena_release_name();
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.DeleteServiceAccountKeyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  friend void protobuf_ShutdownFile_google_2fiam_2fadmin_2fv1_2fiam_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<DeleteServiceAccountKeyRequest> DeleteServiceAccountKeyRequest_default_instance_;

// -------------------------------------------------------------------

class SignBlobRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.SignBlobRequest) */ {
 public:
  SignBlobRequest();
  virtual ~SignBlobRequest();

  SignBlobRequest(const SignBlobRequest& from);

  inline SignBlobRequest& operator=(const SignBlobRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SignBlobRequest& default_instance();

  static const SignBlobRequest* internal_default_instance();

  void UnsafeArenaSwap(SignBlobRequest* other);
  void Swap(SignBlobRequest* other);

  // implements Message ----------------------------------------------

  inline SignBlobRequest* New() const { return New(NULL); }

  SignBlobRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignBlobRequest& from);
  void MergeFrom(const SignBlobRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SignBlobRequest* other);
  void UnsafeMergeFrom(const SignBlobRequest& from);
  protected:
  explicit SignBlobRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  ::std::string* unsafe_arena_release_name();
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // optional bytes bytes_to_sign = 2;
  void clear_bytes_to_sign();
  static const int kBytesToSignFieldNumber = 2;
  const ::std::string& bytes_to_sign() const;
  void set_bytes_to_sign(const ::std::string& value);
  void set_bytes_to_sign(const char* value);
  void set_bytes_to_sign(const void* value, size_t size);
  ::std::string* mutable_bytes_to_sign();
  ::std::string* release_bytes_to_sign();
  void set_allocated_bytes_to_sign(::std::string* bytes_to_sign);
  ::std::string* unsafe_arena_release_bytes_to_sign();
  void unsafe_arena_set_allocated_bytes_to_sign(
      ::std::string* bytes_to_sign);

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.SignBlobRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr bytes_to_sign_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  friend void protobuf_ShutdownFile_google_2fiam_2fadmin_2fv1_2fiam_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SignBlobRequest> SignBlobRequest_default_instance_;

// -------------------------------------------------------------------

class SignBlobResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.SignBlobResponse) */ {
 public:
  SignBlobResponse();
  virtual ~SignBlobResponse();

  SignBlobResponse(const SignBlobResponse& from);

  inline SignBlobResponse& operator=(const SignBlobResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SignBlobResponse& default_instance();

  static const SignBlobResponse* internal_default_instance();

  void UnsafeArenaSwap(SignBlobResponse* other);
  void Swap(SignBlobResponse* other);

  // implements Message ----------------------------------------------

  inline SignBlobResponse* New() const { return New(NULL); }

  SignBlobResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignBlobResponse& from);
  void MergeFrom(const SignBlobResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SignBlobResponse* other);
  void UnsafeMergeFrom(const SignBlobResponse& from);
  protected:
  explicit SignBlobResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key_id = 1;
  void clear_key_id();
  static const int kKeyIdFieldNumber = 1;
  const ::std::string& key_id() const;
  void set_key_id(const ::std::string& value);
  void set_key_id(const char* value);
  void set_key_id(const char* value, size_t size);
  ::std::string* mutable_key_id();
  ::std::string* release_key_id();
  void set_allocated_key_id(::std::string* key_id);
  ::std::string* unsafe_arena_release_key_id();
  void unsafe_arena_set_allocated_key_id(
      ::std::string* key_id);

  // optional bytes signature = 2;
  void clear_signature();
  static const int kSignatureFieldNumber = 2;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);
  ::std::string* unsafe_arena_release_signature();
  void unsafe_arena_set_allocated_signature(
      ::std::string* signature);

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.SignBlobResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr key_id_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  friend void protobuf_ShutdownFile_google_2fiam_2fadmin_2fv1_2fiam_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SignBlobResponse> SignBlobResponse_default_instance_;

// -------------------------------------------------------------------

class Role : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.Role) */ {
 public:
  Role();
  virtual ~Role();

  Role(const Role& from);

  inline Role& operator=(const Role& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Role& default_instance();

  static const Role* internal_default_instance();

  void UnsafeArenaSwap(Role* other);
  void Swap(Role* other);

  // implements Message ----------------------------------------------

  inline Role* New() const { return New(NULL); }

  Role* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Role& from);
  void MergeFrom(const Role& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Role* other);
  void UnsafeMergeFrom(const Role& from);
  protected:
  explicit Role(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  ::std::string* unsafe_arena_release_name();
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // optional string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);
  ::std::string* unsafe_arena_release_title();
  void unsafe_arena_set_allocated_title(
      ::std::string* title);

  // optional string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);
  ::std::string* unsafe_arena_release_description();
  void unsafe_arena_set_allocated_description(
      ::std::string* description);

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.Role)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  friend void protobuf_ShutdownFile_google_2fiam_2fadmin_2fv1_2fiam_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Role> Role_default_instance_;

// -------------------------------------------------------------------

class QueryGrantableRolesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.QueryGrantableRolesRequest) */ {
 public:
  QueryGrantableRolesRequest();
  virtual ~QueryGrantableRolesRequest();

  QueryGrantableRolesRequest(const QueryGrantableRolesRequest& from);

  inline QueryGrantableRolesRequest& operator=(const QueryGrantableRolesRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryGrantableRolesRequest& default_instance();

  static const QueryGrantableRolesRequest* internal_default_instance();

  void UnsafeArenaSwap(QueryGrantableRolesRequest* other);
  void Swap(QueryGrantableRolesRequest* other);

  // implements Message ----------------------------------------------

  inline QueryGrantableRolesRequest* New() const { return New(NULL); }

  QueryGrantableRolesRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryGrantableRolesRequest& from);
  void MergeFrom(const QueryGrantableRolesRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryGrantableRolesRequest* other);
  void UnsafeMergeFrom(const QueryGrantableRolesRequest& from);
  protected:
  explicit QueryGrantableRolesRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string full_resource_name = 1;
  void clear_full_resource_name();
  static const int kFullResourceNameFieldNumber = 1;
  const ::std::string& full_resource_name() const;
  void set_full_resource_name(const ::std::string& value);
  void set_full_resource_name(const char* value);
  void set_full_resource_name(const char* value, size_t size);
  ::std::string* mutable_full_resource_name();
  ::std::string* release_full_resource_name();
  void set_allocated_full_resource_name(::std::string* full_resource_name);
  ::std::string* unsafe_arena_release_full_resource_name();
  void unsafe_arena_set_allocated_full_resource_name(
      ::std::string* full_resource_name);

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.QueryGrantableRolesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr full_resource_name_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  friend void protobuf_ShutdownFile_google_2fiam_2fadmin_2fv1_2fiam_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<QueryGrantableRolesRequest> QueryGrantableRolesRequest_default_instance_;

// -------------------------------------------------------------------

class QueryGrantableRolesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.QueryGrantableRolesResponse) */ {
 public:
  QueryGrantableRolesResponse();
  virtual ~QueryGrantableRolesResponse();

  QueryGrantableRolesResponse(const QueryGrantableRolesResponse& from);

  inline QueryGrantableRolesResponse& operator=(const QueryGrantableRolesResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryGrantableRolesResponse& default_instance();

  static const QueryGrantableRolesResponse* internal_default_instance();

  void UnsafeArenaSwap(QueryGrantableRolesResponse* other);
  void Swap(QueryGrantableRolesResponse* other);

  // implements Message ----------------------------------------------

  inline QueryGrantableRolesResponse* New() const { return New(NULL); }

  QueryGrantableRolesResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryGrantableRolesResponse& from);
  void MergeFrom(const QueryGrantableRolesResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryGrantableRolesResponse* other);
  void UnsafeMergeFrom(const QueryGrantableRolesResponse& from);
  protected:
  explicit QueryGrantableRolesResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.iam.admin.v1.Role roles = 1;
  int roles_size() const;
  void clear_roles();
  static const int kRolesFieldNumber = 1;
  const ::google::iam::admin::v1::Role& roles(int index) const;
  ::google::iam::admin::v1::Role* mutable_roles(int index);
  ::google::iam::admin::v1::Role* add_roles();
  ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::Role >*
      mutable_roles();
  const ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::Role >&
      roles() const;

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.QueryGrantableRolesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::Role > roles_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fiam_2fadmin_2fv1_2fiam_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fiam_2fadmin_2fv1_2fiam_2eproto();
  friend void protobuf_ShutdownFile_google_2fiam_2fadmin_2fv1_2fiam_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<QueryGrantableRolesResponse> QueryGrantableRolesResponse_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceAccount

// optional string name = 1;
inline void ServiceAccount::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ServiceAccount::name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ServiceAccount.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceAccount::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ServiceAccount.name)
}
inline void ServiceAccount::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ServiceAccount.name)
}
inline void ServiceAccount::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ServiceAccount.name)
}
inline ::std::string* ServiceAccount::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ServiceAccount.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceAccount::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ServiceAccount.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceAccount::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ServiceAccount.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ServiceAccount::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ServiceAccount.name)
}
inline void ServiceAccount::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ServiceAccount.name)
}

// optional string project_id = 2;
inline void ServiceAccount::clear_project_id() {
  project_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ServiceAccount::project_id() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ServiceAccount.project_id)
  return project_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceAccount::set_project_id(const ::std::string& value) {
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ServiceAccount.project_id)
}
inline void ServiceAccount::set_project_id(const char* value) {
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ServiceAccount.project_id)
}
inline void ServiceAccount::set_project_id(const char* value,
    size_t size) {
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ServiceAccount.project_id)
}
inline ::std::string* ServiceAccount::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ServiceAccount.project_id)
  return project_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceAccount::release_project_id() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ServiceAccount.project_id)
  
  return project_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceAccount::unsafe_arena_release_project_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ServiceAccount.project_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return project_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ServiceAccount::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ServiceAccount.project_id)
}
inline void ServiceAccount::unsafe_arena_set_allocated_project_id(
    ::std::string* project_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      project_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ServiceAccount.project_id)
}

// optional string unique_id = 4;
inline void ServiceAccount::clear_unique_id() {
  unique_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ServiceAccount::unique_id() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ServiceAccount.unique_id)
  return unique_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceAccount::set_unique_id(const ::std::string& value) {
  
  unique_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ServiceAccount.unique_id)
}
inline void ServiceAccount::set_unique_id(const char* value) {
  
  unique_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ServiceAccount.unique_id)
}
inline void ServiceAccount::set_unique_id(const char* value,
    size_t size) {
  
  unique_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ServiceAccount.unique_id)
}
inline ::std::string* ServiceAccount::mutable_unique_id() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ServiceAccount.unique_id)
  return unique_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceAccount::release_unique_id() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ServiceAccount.unique_id)
  
  return unique_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceAccount::unsafe_arena_release_unique_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ServiceAccount.unique_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return unique_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ServiceAccount::set_allocated_unique_id(::std::string* unique_id) {
  if (unique_id != NULL) {
    
  } else {
    
  }
  unique_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unique_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ServiceAccount.unique_id)
}
inline void ServiceAccount::unsafe_arena_set_allocated_unique_id(
    ::std::string* unique_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (unique_id != NULL) {
    
  } else {
    
  }
  unique_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      unique_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ServiceAccount.unique_id)
}

// optional string email = 5;
inline void ServiceAccount::clear_email() {
  email_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ServiceAccount::email() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ServiceAccount.email)
  return email_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceAccount::set_email(const ::std::string& value) {
  
  email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ServiceAccount.email)
}
inline void ServiceAccount::set_email(const char* value) {
  
  email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ServiceAccount.email)
}
inline void ServiceAccount::set_email(const char* value,
    size_t size) {
  
  email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ServiceAccount.email)
}
inline ::std::string* ServiceAccount::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ServiceAccount.email)
  return email_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceAccount::release_email() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ServiceAccount.email)
  
  return email_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceAccount::unsafe_arena_release_email() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ServiceAccount.email)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return email_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ServiceAccount::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ServiceAccount.email)
}
inline void ServiceAccount::unsafe_arena_set_allocated_email(
    ::std::string* email) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (email != NULL) {
    
  } else {
    
  }
  email_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      email, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ServiceAccount.email)
}

// optional string display_name = 6;
inline void ServiceAccount::clear_display_name() {
  display_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ServiceAccount::display_name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ServiceAccount.display_name)
  return display_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceAccount::set_display_name(const ::std::string& value) {
  
  display_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ServiceAccount.display_name)
}
inline void ServiceAccount::set_display_name(const char* value) {
  
  display_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ServiceAccount.display_name)
}
inline void ServiceAccount::set_display_name(const char* value,
    size_t size) {
  
  display_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ServiceAccount.display_name)
}
inline ::std::string* ServiceAccount::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ServiceAccount.display_name)
  return display_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceAccount::release_display_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ServiceAccount.display_name)
  
  return display_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceAccount::unsafe_arena_release_display_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ServiceAccount.display_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return display_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ServiceAccount::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ServiceAccount.display_name)
}
inline void ServiceAccount::unsafe_arena_set_allocated_display_name(
    ::std::string* display_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      display_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ServiceAccount.display_name)
}

// optional bytes etag = 7;
inline void ServiceAccount::clear_etag() {
  etag_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ServiceAccount::etag() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ServiceAccount.etag)
  return etag_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceAccount::set_etag(const ::std::string& value) {
  
  etag_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ServiceAccount.etag)
}
inline void ServiceAccount::set_etag(const char* value) {
  
  etag_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ServiceAccount.etag)
}
inline void ServiceAccount::set_etag(const void* value,
    size_t size) {
  
  etag_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ServiceAccount.etag)
}
inline ::std::string* ServiceAccount::mutable_etag() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ServiceAccount.etag)
  return etag_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceAccount::release_etag() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ServiceAccount.etag)
  
  return etag_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceAccount::unsafe_arena_release_etag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ServiceAccount.etag)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return etag_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ServiceAccount::set_allocated_etag(::std::string* etag) {
  if (etag != NULL) {
    
  } else {
    
  }
  etag_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), etag,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ServiceAccount.etag)
}
inline void ServiceAccount::unsafe_arena_set_allocated_etag(
    ::std::string* etag) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (etag != NULL) {
    
  } else {
    
  }
  etag_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      etag, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ServiceAccount.etag)
}

// optional string oauth2_client_id = 9;
inline void ServiceAccount::clear_oauth2_client_id() {
  oauth2_client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ServiceAccount::oauth2_client_id() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ServiceAccount.oauth2_client_id)
  return oauth2_client_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceAccount::set_oauth2_client_id(const ::std::string& value) {
  
  oauth2_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ServiceAccount.oauth2_client_id)
}
inline void ServiceAccount::set_oauth2_client_id(const char* value) {
  
  oauth2_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ServiceAccount.oauth2_client_id)
}
inline void ServiceAccount::set_oauth2_client_id(const char* value,
    size_t size) {
  
  oauth2_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ServiceAccount.oauth2_client_id)
}
inline ::std::string* ServiceAccount::mutable_oauth2_client_id() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ServiceAccount.oauth2_client_id)
  return oauth2_client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceAccount::release_oauth2_client_id() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ServiceAccount.oauth2_client_id)
  
  return oauth2_client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceAccount::unsafe_arena_release_oauth2_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ServiceAccount.oauth2_client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return oauth2_client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ServiceAccount::set_allocated_oauth2_client_id(::std::string* oauth2_client_id) {
  if (oauth2_client_id != NULL) {
    
  } else {
    
  }
  oauth2_client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), oauth2_client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ServiceAccount.oauth2_client_id)
}
inline void ServiceAccount::unsafe_arena_set_allocated_oauth2_client_id(
    ::std::string* oauth2_client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (oauth2_client_id != NULL) {
    
  } else {
    
  }
  oauth2_client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      oauth2_client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ServiceAccount.oauth2_client_id)
}

inline const ServiceAccount* ServiceAccount::internal_default_instance() {
  return &ServiceAccount_default_instance_.get();
}
// -------------------------------------------------------------------

// CreateServiceAccountRequest

// optional string name = 1;
inline void CreateServiceAccountRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CreateServiceAccountRequest::name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.CreateServiceAccountRequest.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateServiceAccountRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.CreateServiceAccountRequest.name)
}
inline void CreateServiceAccountRequest::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.CreateServiceAccountRequest.name)
}
inline void CreateServiceAccountRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.CreateServiceAccountRequest.name)
}
inline ::std::string* CreateServiceAccountRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.CreateServiceAccountRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CreateServiceAccountRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.CreateServiceAccountRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CreateServiceAccountRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.CreateServiceAccountRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CreateServiceAccountRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.CreateServiceAccountRequest.name)
}
inline void CreateServiceAccountRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.CreateServiceAccountRequest.name)
}

// optional string account_id = 2;
inline void CreateServiceAccountRequest::clear_account_id() {
  account_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CreateServiceAccountRequest::account_id() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.CreateServiceAccountRequest.account_id)
  return account_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateServiceAccountRequest::set_account_id(const ::std::string& value) {
  
  account_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.CreateServiceAccountRequest.account_id)
}
inline void CreateServiceAccountRequest::set_account_id(const char* value) {
  
  account_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.CreateServiceAccountRequest.account_id)
}
inline void CreateServiceAccountRequest::set_account_id(const char* value,
    size_t size) {
  
  account_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.CreateServiceAccountRequest.account_id)
}
inline ::std::string* CreateServiceAccountRequest::mutable_account_id() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.CreateServiceAccountRequest.account_id)
  return account_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CreateServiceAccountRequest::release_account_id() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.CreateServiceAccountRequest.account_id)
  
  return account_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CreateServiceAccountRequest::unsafe_arena_release_account_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.CreateServiceAccountRequest.account_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return account_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CreateServiceAccountRequest::set_allocated_account_id(::std::string* account_id) {
  if (account_id != NULL) {
    
  } else {
    
  }
  account_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.CreateServiceAccountRequest.account_id)
}
inline void CreateServiceAccountRequest::unsafe_arena_set_allocated_account_id(
    ::std::string* account_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (account_id != NULL) {
    
  } else {
    
  }
  account_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      account_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.CreateServiceAccountRequest.account_id)
}

// optional .google.iam.admin.v1.ServiceAccount service_account = 3;
inline bool CreateServiceAccountRequest::has_service_account() const {
  return this != internal_default_instance() && service_account_ != NULL;
}
inline void CreateServiceAccountRequest::clear_service_account() {
  if (GetArenaNoVirtual() == NULL && service_account_ != NULL) delete service_account_;
  service_account_ = NULL;
}
inline const ::google::iam::admin::v1::ServiceAccount& CreateServiceAccountRequest::service_account() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.CreateServiceAccountRequest.service_account)
  return service_account_ != NULL ? *service_account_
                         : *::google::iam::admin::v1::ServiceAccount::internal_default_instance();
}
inline ::google::iam::admin::v1::ServiceAccount* CreateServiceAccountRequest::mutable_service_account() {
  
  if (service_account_ == NULL) {
    _slow_mutable_service_account();
  }
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.CreateServiceAccountRequest.service_account)
  return service_account_;
}
inline ::google::iam::admin::v1::ServiceAccount* CreateServiceAccountRequest::release_service_account() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.CreateServiceAccountRequest.service_account)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_service_account();
  } else {
    ::google::iam::admin::v1::ServiceAccount* temp = service_account_;
    service_account_ = NULL;
    return temp;
  }
}
inline  void CreateServiceAccountRequest::set_allocated_service_account(::google::iam::admin::v1::ServiceAccount* service_account) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete service_account_;
  }
  if (service_account != NULL) {
    _slow_set_allocated_service_account(message_arena, &service_account);
  }
  service_account_ = service_account;
  if (service_account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.CreateServiceAccountRequest.service_account)
}

inline const CreateServiceAccountRequest* CreateServiceAccountRequest::internal_default_instance() {
  return &CreateServiceAccountRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// ListServiceAccountsRequest

// optional string name = 1;
inline void ListServiceAccountsRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListServiceAccountsRequest::name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ListServiceAccountsRequest.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListServiceAccountsRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ListServiceAccountsRequest.name)
}
inline void ListServiceAccountsRequest::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ListServiceAccountsRequest.name)
}
inline void ListServiceAccountsRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ListServiceAccountsRequest.name)
}
inline ::std::string* ListServiceAccountsRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ListServiceAccountsRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListServiceAccountsRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ListServiceAccountsRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListServiceAccountsRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ListServiceAccountsRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListServiceAccountsRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ListServiceAccountsRequest.name)
}
inline void ListServiceAccountsRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ListServiceAccountsRequest.name)
}

// optional int32 page_size = 2;
inline void ListServiceAccountsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListServiceAccountsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ListServiceAccountsRequest.page_size)
  return page_size_;
}
inline void ListServiceAccountsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ListServiceAccountsRequest.page_size)
}

// optional string page_token = 3;
inline void ListServiceAccountsRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListServiceAccountsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ListServiceAccountsRequest.page_token)
  return page_token_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListServiceAccountsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ListServiceAccountsRequest.page_token)
}
inline void ListServiceAccountsRequest::set_page_token(const char* value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ListServiceAccountsRequest.page_token)
}
inline void ListServiceAccountsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ListServiceAccountsRequest.page_token)
}
inline ::std::string* ListServiceAccountsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ListServiceAccountsRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListServiceAccountsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ListServiceAccountsRequest.page_token)
  
  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListServiceAccountsRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ListServiceAccountsRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListServiceAccountsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ListServiceAccountsRequest.page_token)
}
inline void ListServiceAccountsRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ListServiceAccountsRequest.page_token)
}

inline const ListServiceAccountsRequest* ListServiceAccountsRequest::internal_default_instance() {
  return &ListServiceAccountsRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// ListServiceAccountsResponse

// repeated .google.iam.admin.v1.ServiceAccount accounts = 1;
inline int ListServiceAccountsResponse::accounts_size() const {
  return accounts_.size();
}
inline void ListServiceAccountsResponse::clear_accounts() {
  accounts_.Clear();
}
inline const ::google::iam::admin::v1::ServiceAccount& ListServiceAccountsResponse::accounts(int index) const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ListServiceAccountsResponse.accounts)
  return accounts_.Get(index);
}
inline ::google::iam::admin::v1::ServiceAccount* ListServiceAccountsResponse::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ListServiceAccountsResponse.accounts)
  return accounts_.Mutable(index);
}
inline ::google::iam::admin::v1::ServiceAccount* ListServiceAccountsResponse::add_accounts() {
  // @@protoc_insertion_point(field_add:google.iam.admin.v1.ListServiceAccountsResponse.accounts)
  return accounts_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::ServiceAccount >*
ListServiceAccountsResponse::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:google.iam.admin.v1.ListServiceAccountsResponse.accounts)
  return &accounts_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::ServiceAccount >&
ListServiceAccountsResponse::accounts() const {
  // @@protoc_insertion_point(field_list:google.iam.admin.v1.ListServiceAccountsResponse.accounts)
  return accounts_;
}

// optional string next_page_token = 2;
inline void ListServiceAccountsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListServiceAccountsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ListServiceAccountsResponse.next_page_token)
  return next_page_token_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListServiceAccountsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ListServiceAccountsResponse.next_page_token)
}
inline void ListServiceAccountsResponse::set_next_page_token(const char* value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ListServiceAccountsResponse.next_page_token)
}
inline void ListServiceAccountsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ListServiceAccountsResponse.next_page_token)
}
inline ::std::string* ListServiceAccountsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ListServiceAccountsResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListServiceAccountsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ListServiceAccountsResponse.next_page_token)
  
  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListServiceAccountsResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ListServiceAccountsResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListServiceAccountsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ListServiceAccountsResponse.next_page_token)
}
inline void ListServiceAccountsResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ListServiceAccountsResponse.next_page_token)
}

inline const ListServiceAccountsResponse* ListServiceAccountsResponse::internal_default_instance() {
  return &ListServiceAccountsResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// GetServiceAccountRequest

// optional string name = 1;
inline void GetServiceAccountRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetServiceAccountRequest::name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.GetServiceAccountRequest.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetServiceAccountRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.GetServiceAccountRequest.name)
}
inline void GetServiceAccountRequest::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.GetServiceAccountRequest.name)
}
inline void GetServiceAccountRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.GetServiceAccountRequest.name)
}
inline ::std::string* GetServiceAccountRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.GetServiceAccountRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetServiceAccountRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.GetServiceAccountRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetServiceAccountRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.GetServiceAccountRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetServiceAccountRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.GetServiceAccountRequest.name)
}
inline void GetServiceAccountRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.GetServiceAccountRequest.name)
}

inline const GetServiceAccountRequest* GetServiceAccountRequest::internal_default_instance() {
  return &GetServiceAccountRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// DeleteServiceAccountRequest

// optional string name = 1;
inline void DeleteServiceAccountRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& DeleteServiceAccountRequest::name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.DeleteServiceAccountRequest.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteServiceAccountRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.DeleteServiceAccountRequest.name)
}
inline void DeleteServiceAccountRequest::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.DeleteServiceAccountRequest.name)
}
inline void DeleteServiceAccountRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.DeleteServiceAccountRequest.name)
}
inline ::std::string* DeleteServiceAccountRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.DeleteServiceAccountRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DeleteServiceAccountRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.DeleteServiceAccountRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DeleteServiceAccountRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.DeleteServiceAccountRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DeleteServiceAccountRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.DeleteServiceAccountRequest.name)
}
inline void DeleteServiceAccountRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.DeleteServiceAccountRequest.name)
}

inline const DeleteServiceAccountRequest* DeleteServiceAccountRequest::internal_default_instance() {
  return &DeleteServiceAccountRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// ListServiceAccountKeysRequest

// optional string name = 1;
inline void ListServiceAccountKeysRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListServiceAccountKeysRequest::name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ListServiceAccountKeysRequest.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListServiceAccountKeysRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ListServiceAccountKeysRequest.name)
}
inline void ListServiceAccountKeysRequest::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ListServiceAccountKeysRequest.name)
}
inline void ListServiceAccountKeysRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ListServiceAccountKeysRequest.name)
}
inline ::std::string* ListServiceAccountKeysRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ListServiceAccountKeysRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListServiceAccountKeysRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ListServiceAccountKeysRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListServiceAccountKeysRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ListServiceAccountKeysRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListServiceAccountKeysRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ListServiceAccountKeysRequest.name)
}
inline void ListServiceAccountKeysRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ListServiceAccountKeysRequest.name)
}

// repeated .google.iam.admin.v1.ListServiceAccountKeysRequest.KeyType key_types = 2;
inline int ListServiceAccountKeysRequest::key_types_size() const {
  return key_types_.size();
}
inline void ListServiceAccountKeysRequest::clear_key_types() {
  key_types_.Clear();
}
inline ::google::iam::admin::v1::ListServiceAccountKeysRequest_KeyType ListServiceAccountKeysRequest::key_types(int index) const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ListServiceAccountKeysRequest.key_types)
  return static_cast< ::google::iam::admin::v1::ListServiceAccountKeysRequest_KeyType >(key_types_.Get(index));
}
inline void ListServiceAccountKeysRequest::set_key_types(int index, ::google::iam::admin::v1::ListServiceAccountKeysRequest_KeyType value) {
  key_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ListServiceAccountKeysRequest.key_types)
}
inline void ListServiceAccountKeysRequest::add_key_types(::google::iam::admin::v1::ListServiceAccountKeysRequest_KeyType value) {
  key_types_.Add(value);
  // @@protoc_insertion_point(field_add:google.iam.admin.v1.ListServiceAccountKeysRequest.key_types)
}
inline const ::google::protobuf::RepeatedField<int>&
ListServiceAccountKeysRequest::key_types() const {
  // @@protoc_insertion_point(field_list:google.iam.admin.v1.ListServiceAccountKeysRequest.key_types)
  return key_types_;
}
inline ::google::protobuf::RepeatedField<int>*
ListServiceAccountKeysRequest::mutable_key_types() {
  // @@protoc_insertion_point(field_mutable_list:google.iam.admin.v1.ListServiceAccountKeysRequest.key_types)
  return &key_types_;
}

inline const ListServiceAccountKeysRequest* ListServiceAccountKeysRequest::internal_default_instance() {
  return &ListServiceAccountKeysRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// ListServiceAccountKeysResponse

// repeated .google.iam.admin.v1.ServiceAccountKey keys = 1;
inline int ListServiceAccountKeysResponse::keys_size() const {
  return keys_.size();
}
inline void ListServiceAccountKeysResponse::clear_keys() {
  keys_.Clear();
}
inline const ::google::iam::admin::v1::ServiceAccountKey& ListServiceAccountKeysResponse::keys(int index) const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ListServiceAccountKeysResponse.keys)
  return keys_.Get(index);
}
inline ::google::iam::admin::v1::ServiceAccountKey* ListServiceAccountKeysResponse::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ListServiceAccountKeysResponse.keys)
  return keys_.Mutable(index);
}
inline ::google::iam::admin::v1::ServiceAccountKey* ListServiceAccountKeysResponse::add_keys() {
  // @@protoc_insertion_point(field_add:google.iam.admin.v1.ListServiceAccountKeysResponse.keys)
  return keys_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::ServiceAccountKey >*
ListServiceAccountKeysResponse::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:google.iam.admin.v1.ListServiceAccountKeysResponse.keys)
  return &keys_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::ServiceAccountKey >&
ListServiceAccountKeysResponse::keys() const {
  // @@protoc_insertion_point(field_list:google.iam.admin.v1.ListServiceAccountKeysResponse.keys)
  return keys_;
}

inline const ListServiceAccountKeysResponse* ListServiceAccountKeysResponse::internal_default_instance() {
  return &ListServiceAccountKeysResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// GetServiceAccountKeyRequest

// optional string name = 1;
inline void GetServiceAccountKeyRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetServiceAccountKeyRequest::name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.GetServiceAccountKeyRequest.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetServiceAccountKeyRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.GetServiceAccountKeyRequest.name)
}
inline void GetServiceAccountKeyRequest::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.GetServiceAccountKeyRequest.name)
}
inline void GetServiceAccountKeyRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.GetServiceAccountKeyRequest.name)
}
inline ::std::string* GetServiceAccountKeyRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.GetServiceAccountKeyRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetServiceAccountKeyRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.GetServiceAccountKeyRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetServiceAccountKeyRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.GetServiceAccountKeyRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetServiceAccountKeyRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.GetServiceAccountKeyRequest.name)
}
inline void GetServiceAccountKeyRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.GetServiceAccountKeyRequest.name)
}

// optional .google.iam.admin.v1.ServiceAccountPublicKeyType public_key_type = 2;
inline void GetServiceAccountKeyRequest::clear_public_key_type() {
  public_key_type_ = 0;
}
inline ::google::iam::admin::v1::ServiceAccountPublicKeyType GetServiceAccountKeyRequest::public_key_type() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.GetServiceAccountKeyRequest.public_key_type)
  return static_cast< ::google::iam::admin::v1::ServiceAccountPublicKeyType >(public_key_type_);
}
inline void GetServiceAccountKeyRequest::set_public_key_type(::google::iam::admin::v1::ServiceAccountPublicKeyType value) {
  
  public_key_type_ = value;
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.GetServiceAccountKeyRequest.public_key_type)
}

inline const GetServiceAccountKeyRequest* GetServiceAccountKeyRequest::internal_default_instance() {
  return &GetServiceAccountKeyRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// ServiceAccountKey

// optional string name = 1;
inline void ServiceAccountKey::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ServiceAccountKey::name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ServiceAccountKey.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceAccountKey::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ServiceAccountKey.name)
}
inline void ServiceAccountKey::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ServiceAccountKey.name)
}
inline void ServiceAccountKey::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ServiceAccountKey.name)
}
inline ::std::string* ServiceAccountKey::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ServiceAccountKey.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceAccountKey::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ServiceAccountKey.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceAccountKey::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ServiceAccountKey.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ServiceAccountKey::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ServiceAccountKey.name)
}
inline void ServiceAccountKey::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ServiceAccountKey.name)
}

// optional .google.iam.admin.v1.ServiceAccountPrivateKeyType private_key_type = 2;
inline void ServiceAccountKey::clear_private_key_type() {
  private_key_type_ = 0;
}
inline ::google::iam::admin::v1::ServiceAccountPrivateKeyType ServiceAccountKey::private_key_type() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ServiceAccountKey.private_key_type)
  return static_cast< ::google::iam::admin::v1::ServiceAccountPrivateKeyType >(private_key_type_);
}
inline void ServiceAccountKey::set_private_key_type(::google::iam::admin::v1::ServiceAccountPrivateKeyType value) {
  
  private_key_type_ = value;
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ServiceAccountKey.private_key_type)
}

// optional .google.iam.admin.v1.ServiceAccountKeyAlgorithm key_algorithm = 8;
inline void ServiceAccountKey::clear_key_algorithm() {
  key_algorithm_ = 0;
}
inline ::google::iam::admin::v1::ServiceAccountKeyAlgorithm ServiceAccountKey::key_algorithm() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ServiceAccountKey.key_algorithm)
  return static_cast< ::google::iam::admin::v1::ServiceAccountKeyAlgorithm >(key_algorithm_);
}
inline void ServiceAccountKey::set_key_algorithm(::google::iam::admin::v1::ServiceAccountKeyAlgorithm value) {
  
  key_algorithm_ = value;
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ServiceAccountKey.key_algorithm)
}

// optional bytes private_key_data = 3;
inline void ServiceAccountKey::clear_private_key_data() {
  private_key_data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ServiceAccountKey::private_key_data() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ServiceAccountKey.private_key_data)
  return private_key_data_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceAccountKey::set_private_key_data(const ::std::string& value) {
  
  private_key_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ServiceAccountKey.private_key_data)
}
inline void ServiceAccountKey::set_private_key_data(const char* value) {
  
  private_key_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ServiceAccountKey.private_key_data)
}
inline void ServiceAccountKey::set_private_key_data(const void* value,
    size_t size) {
  
  private_key_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ServiceAccountKey.private_key_data)
}
inline ::std::string* ServiceAccountKey::mutable_private_key_data() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ServiceAccountKey.private_key_data)
  return private_key_data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceAccountKey::release_private_key_data() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ServiceAccountKey.private_key_data)
  
  return private_key_data_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceAccountKey::unsafe_arena_release_private_key_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ServiceAccountKey.private_key_data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return private_key_data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ServiceAccountKey::set_allocated_private_key_data(::std::string* private_key_data) {
  if (private_key_data != NULL) {
    
  } else {
    
  }
  private_key_data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_key_data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ServiceAccountKey.private_key_data)
}
inline void ServiceAccountKey::unsafe_arena_set_allocated_private_key_data(
    ::std::string* private_key_data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (private_key_data != NULL) {
    
  } else {
    
  }
  private_key_data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      private_key_data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ServiceAccountKey.private_key_data)
}

// optional bytes public_key_data = 7;
inline void ServiceAccountKey::clear_public_key_data() {
  public_key_data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ServiceAccountKey::public_key_data() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ServiceAccountKey.public_key_data)
  return public_key_data_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceAccountKey::set_public_key_data(const ::std::string& value) {
  
  public_key_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ServiceAccountKey.public_key_data)
}
inline void ServiceAccountKey::set_public_key_data(const char* value) {
  
  public_key_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ServiceAccountKey.public_key_data)
}
inline void ServiceAccountKey::set_public_key_data(const void* value,
    size_t size) {
  
  public_key_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ServiceAccountKey.public_key_data)
}
inline ::std::string* ServiceAccountKey::mutable_public_key_data() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ServiceAccountKey.public_key_data)
  return public_key_data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceAccountKey::release_public_key_data() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ServiceAccountKey.public_key_data)
  
  return public_key_data_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceAccountKey::unsafe_arena_release_public_key_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ServiceAccountKey.public_key_data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return public_key_data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ServiceAccountKey::set_allocated_public_key_data(::std::string* public_key_data) {
  if (public_key_data != NULL) {
    
  } else {
    
  }
  public_key_data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key_data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ServiceAccountKey.public_key_data)
}
inline void ServiceAccountKey::unsafe_arena_set_allocated_public_key_data(
    ::std::string* public_key_data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (public_key_data != NULL) {
    
  } else {
    
  }
  public_key_data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      public_key_data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ServiceAccountKey.public_key_data)
}

// optional .google.protobuf.Timestamp valid_after_time = 4;
inline bool ServiceAccountKey::has_valid_after_time() const {
  return this != internal_default_instance() && valid_after_time_ != NULL;
}
inline void ServiceAccountKey::clear_valid_after_time() {
  if (GetArenaNoVirtual() == NULL && valid_after_time_ != NULL) delete valid_after_time_;
  valid_after_time_ = NULL;
}
inline const ::google::protobuf::Timestamp& ServiceAccountKey::valid_after_time() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ServiceAccountKey.valid_after_time)
  return valid_after_time_ != NULL ? *valid_after_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
inline ::google::protobuf::Timestamp* ServiceAccountKey::mutable_valid_after_time() {
  
  if (valid_after_time_ == NULL) {
    _slow_mutable_valid_after_time();
  }
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ServiceAccountKey.valid_after_time)
  return valid_after_time_;
}
inline ::google::protobuf::Timestamp* ServiceAccountKey::release_valid_after_time() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ServiceAccountKey.valid_after_time)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_valid_after_time();
  } else {
    ::google::protobuf::Timestamp* temp = valid_after_time_;
    valid_after_time_ = NULL;
    return temp;
  }
}
inline  void ServiceAccountKey::set_allocated_valid_after_time(::google::protobuf::Timestamp* valid_after_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete valid_after_time_;
  }
  if (valid_after_time != NULL) {
    _slow_set_allocated_valid_after_time(message_arena, &valid_after_time);
  }
  valid_after_time_ = valid_after_time;
  if (valid_after_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ServiceAccountKey.valid_after_time)
}

// optional .google.protobuf.Timestamp valid_before_time = 5;
inline bool ServiceAccountKey::has_valid_before_time() const {
  return this != internal_default_instance() && valid_before_time_ != NULL;
}
inline void ServiceAccountKey::clear_valid_before_time() {
  if (GetArenaNoVirtual() == NULL && valid_before_time_ != NULL) delete valid_before_time_;
  valid_before_time_ = NULL;
}
inline const ::google::protobuf::Timestamp& ServiceAccountKey::valid_before_time() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ServiceAccountKey.valid_before_time)
  return valid_before_time_ != NULL ? *valid_before_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
inline ::google::protobuf::Timestamp* ServiceAccountKey::mutable_valid_before_time() {
  
  if (valid_before_time_ == NULL) {
    _slow_mutable_valid_before_time();
  }
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ServiceAccountKey.valid_before_time)
  return valid_before_time_;
}
inline ::google::protobuf::Timestamp* ServiceAccountKey::release_valid_before_time() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ServiceAccountKey.valid_before_time)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_valid_before_time();
  } else {
    ::google::protobuf::Timestamp* temp = valid_before_time_;
    valid_before_time_ = NULL;
    return temp;
  }
}
inline  void ServiceAccountKey::set_allocated_valid_before_time(::google::protobuf::Timestamp* valid_before_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete valid_before_time_;
  }
  if (valid_before_time != NULL) {
    _slow_set_allocated_valid_before_time(message_arena, &valid_before_time);
  }
  valid_before_time_ = valid_before_time;
  if (valid_before_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ServiceAccountKey.valid_before_time)
}

inline const ServiceAccountKey* ServiceAccountKey::internal_default_instance() {
  return &ServiceAccountKey_default_instance_.get();
}
// -------------------------------------------------------------------

// CreateServiceAccountKeyRequest

// optional string name = 1;
inline void CreateServiceAccountKeyRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CreateServiceAccountKeyRequest::name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.CreateServiceAccountKeyRequest.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateServiceAccountKeyRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.CreateServiceAccountKeyRequest.name)
}
inline void CreateServiceAccountKeyRequest::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.CreateServiceAccountKeyRequest.name)
}
inline void CreateServiceAccountKeyRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.CreateServiceAccountKeyRequest.name)
}
inline ::std::string* CreateServiceAccountKeyRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.CreateServiceAccountKeyRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CreateServiceAccountKeyRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.CreateServiceAccountKeyRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CreateServiceAccountKeyRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.CreateServiceAccountKeyRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CreateServiceAccountKeyRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.CreateServiceAccountKeyRequest.name)
}
inline void CreateServiceAccountKeyRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.CreateServiceAccountKeyRequest.name)
}

// optional .google.iam.admin.v1.ServiceAccountPrivateKeyType private_key_type = 2;
inline void CreateServiceAccountKeyRequest::clear_private_key_type() {
  private_key_type_ = 0;
}
inline ::google::iam::admin::v1::ServiceAccountPrivateKeyType CreateServiceAccountKeyRequest::private_key_type() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.CreateServiceAccountKeyRequest.private_key_type)
  return static_cast< ::google::iam::admin::v1::ServiceAccountPrivateKeyType >(private_key_type_);
}
inline void CreateServiceAccountKeyRequest::set_private_key_type(::google::iam::admin::v1::ServiceAccountPrivateKeyType value) {
  
  private_key_type_ = value;
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.CreateServiceAccountKeyRequest.private_key_type)
}

// optional .google.iam.admin.v1.ServiceAccountKeyAlgorithm key_algorithm = 3;
inline void CreateServiceAccountKeyRequest::clear_key_algorithm() {
  key_algorithm_ = 0;
}
inline ::google::iam::admin::v1::ServiceAccountKeyAlgorithm CreateServiceAccountKeyRequest::key_algorithm() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.CreateServiceAccountKeyRequest.key_algorithm)
  return static_cast< ::google::iam::admin::v1::ServiceAccountKeyAlgorithm >(key_algorithm_);
}
inline void CreateServiceAccountKeyRequest::set_key_algorithm(::google::iam::admin::v1::ServiceAccountKeyAlgorithm value) {
  
  key_algorithm_ = value;
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.CreateServiceAccountKeyRequest.key_algorithm)
}

inline const CreateServiceAccountKeyRequest* CreateServiceAccountKeyRequest::internal_default_instance() {
  return &CreateServiceAccountKeyRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// DeleteServiceAccountKeyRequest

// optional string name = 1;
inline void DeleteServiceAccountKeyRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& DeleteServiceAccountKeyRequest::name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.DeleteServiceAccountKeyRequest.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteServiceAccountKeyRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.DeleteServiceAccountKeyRequest.name)
}
inline void DeleteServiceAccountKeyRequest::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.DeleteServiceAccountKeyRequest.name)
}
inline void DeleteServiceAccountKeyRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.DeleteServiceAccountKeyRequest.name)
}
inline ::std::string* DeleteServiceAccountKeyRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.DeleteServiceAccountKeyRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DeleteServiceAccountKeyRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.DeleteServiceAccountKeyRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DeleteServiceAccountKeyRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.DeleteServiceAccountKeyRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DeleteServiceAccountKeyRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.DeleteServiceAccountKeyRequest.name)
}
inline void DeleteServiceAccountKeyRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.DeleteServiceAccountKeyRequest.name)
}

inline const DeleteServiceAccountKeyRequest* DeleteServiceAccountKeyRequest::internal_default_instance() {
  return &DeleteServiceAccountKeyRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// SignBlobRequest

// optional string name = 1;
inline void SignBlobRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SignBlobRequest::name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.SignBlobRequest.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignBlobRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.SignBlobRequest.name)
}
inline void SignBlobRequest::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.SignBlobRequest.name)
}
inline void SignBlobRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.SignBlobRequest.name)
}
inline ::std::string* SignBlobRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.SignBlobRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SignBlobRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.SignBlobRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SignBlobRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.SignBlobRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SignBlobRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.SignBlobRequest.name)
}
inline void SignBlobRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.SignBlobRequest.name)
}

// optional bytes bytes_to_sign = 2;
inline void SignBlobRequest::clear_bytes_to_sign() {
  bytes_to_sign_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SignBlobRequest::bytes_to_sign() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.SignBlobRequest.bytes_to_sign)
  return bytes_to_sign_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignBlobRequest::set_bytes_to_sign(const ::std::string& value) {
  
  bytes_to_sign_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.SignBlobRequest.bytes_to_sign)
}
inline void SignBlobRequest::set_bytes_to_sign(const char* value) {
  
  bytes_to_sign_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.SignBlobRequest.bytes_to_sign)
}
inline void SignBlobRequest::set_bytes_to_sign(const void* value,
    size_t size) {
  
  bytes_to_sign_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.SignBlobRequest.bytes_to_sign)
}
inline ::std::string* SignBlobRequest::mutable_bytes_to_sign() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.SignBlobRequest.bytes_to_sign)
  return bytes_to_sign_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SignBlobRequest::release_bytes_to_sign() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.SignBlobRequest.bytes_to_sign)
  
  return bytes_to_sign_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SignBlobRequest::unsafe_arena_release_bytes_to_sign() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.SignBlobRequest.bytes_to_sign)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return bytes_to_sign_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SignBlobRequest::set_allocated_bytes_to_sign(::std::string* bytes_to_sign) {
  if (bytes_to_sign != NULL) {
    
  } else {
    
  }
  bytes_to_sign_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bytes_to_sign,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.SignBlobRequest.bytes_to_sign)
}
inline void SignBlobRequest::unsafe_arena_set_allocated_bytes_to_sign(
    ::std::string* bytes_to_sign) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (bytes_to_sign != NULL) {
    
  } else {
    
  }
  bytes_to_sign_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      bytes_to_sign, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.SignBlobRequest.bytes_to_sign)
}

inline const SignBlobRequest* SignBlobRequest::internal_default_instance() {
  return &SignBlobRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// SignBlobResponse

// optional string key_id = 1;
inline void SignBlobResponse::clear_key_id() {
  key_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SignBlobResponse::key_id() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.SignBlobResponse.key_id)
  return key_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignBlobResponse::set_key_id(const ::std::string& value) {
  
  key_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.SignBlobResponse.key_id)
}
inline void SignBlobResponse::set_key_id(const char* value) {
  
  key_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.SignBlobResponse.key_id)
}
inline void SignBlobResponse::set_key_id(const char* value,
    size_t size) {
  
  key_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.SignBlobResponse.key_id)
}
inline ::std::string* SignBlobResponse::mutable_key_id() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.SignBlobResponse.key_id)
  return key_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SignBlobResponse::release_key_id() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.SignBlobResponse.key_id)
  
  return key_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SignBlobResponse::unsafe_arena_release_key_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.SignBlobResponse.key_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return key_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SignBlobResponse::set_allocated_key_id(::std::string* key_id) {
  if (key_id != NULL) {
    
  } else {
    
  }
  key_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.SignBlobResponse.key_id)
}
inline void SignBlobResponse::unsafe_arena_set_allocated_key_id(
    ::std::string* key_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (key_id != NULL) {
    
  } else {
    
  }
  key_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      key_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.SignBlobResponse.key_id)
}

// optional bytes signature = 2;
inline void SignBlobResponse::clear_signature() {
  signature_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SignBlobResponse::signature() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.SignBlobResponse.signature)
  return signature_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignBlobResponse::set_signature(const ::std::string& value) {
  
  signature_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.SignBlobResponse.signature)
}
inline void SignBlobResponse::set_signature(const char* value) {
  
  signature_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.SignBlobResponse.signature)
}
inline void SignBlobResponse::set_signature(const void* value,
    size_t size) {
  
  signature_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.SignBlobResponse.signature)
}
inline ::std::string* SignBlobResponse::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.SignBlobResponse.signature)
  return signature_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SignBlobResponse::release_signature() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.SignBlobResponse.signature)
  
  return signature_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SignBlobResponse::unsafe_arena_release_signature() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.SignBlobResponse.signature)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return signature_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SignBlobResponse::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.SignBlobResponse.signature)
}
inline void SignBlobResponse::unsafe_arena_set_allocated_signature(
    ::std::string* signature) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      signature, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.SignBlobResponse.signature)
}

inline const SignBlobResponse* SignBlobResponse::internal_default_instance() {
  return &SignBlobResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// Role

// optional string name = 1;
inline void Role::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Role::name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.Role.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Role::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.Role.name)
}
inline void Role::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.Role.name)
}
inline void Role::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.Role.name)
}
inline ::std::string* Role::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.Role.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Role::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.Role.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Role::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.Role.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Role::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.Role.name)
}
inline void Role::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.Role.name)
}

// optional string title = 2;
inline void Role::clear_title() {
  title_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Role::title() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.Role.title)
  return title_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Role::set_title(const ::std::string& value) {
  
  title_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.Role.title)
}
inline void Role::set_title(const char* value) {
  
  title_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.Role.title)
}
inline void Role::set_title(const char* value,
    size_t size) {
  
  title_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.Role.title)
}
inline ::std::string* Role::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.Role.title)
  return title_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Role::release_title() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.Role.title)
  
  return title_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Role::unsafe_arena_release_title() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.Role.title)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return title_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Role::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.Role.title)
}
inline void Role::unsafe_arena_set_allocated_title(
    ::std::string* title) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (title != NULL) {
    
  } else {
    
  }
  title_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      title, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.Role.title)
}

// optional string description = 3;
inline void Role::clear_description() {
  description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Role::description() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.Role.description)
  return description_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Role::set_description(const ::std::string& value) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.Role.description)
}
inline void Role::set_description(const char* value) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.Role.description)
}
inline void Role::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.Role.description)
}
inline ::std::string* Role::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.Role.description)
  return description_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Role::release_description() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.Role.description)
  
  return description_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Role::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.Role.description)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return description_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Role::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.Role.description)
}
inline void Role::unsafe_arena_set_allocated_description(
    ::std::string* description) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (description != NULL) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      description, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.Role.description)
}

inline const Role* Role::internal_default_instance() {
  return &Role_default_instance_.get();
}
// -------------------------------------------------------------------

// QueryGrantableRolesRequest

// optional string full_resource_name = 1;
inline void QueryGrantableRolesRequest::clear_full_resource_name() {
  full_resource_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& QueryGrantableRolesRequest::full_resource_name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.QueryGrantableRolesRequest.full_resource_name)
  return full_resource_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryGrantableRolesRequest::set_full_resource_name(const ::std::string& value) {
  
  full_resource_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.QueryGrantableRolesRequest.full_resource_name)
}
inline void QueryGrantableRolesRequest::set_full_resource_name(const char* value) {
  
  full_resource_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.QueryGrantableRolesRequest.full_resource_name)
}
inline void QueryGrantableRolesRequest::set_full_resource_name(const char* value,
    size_t size) {
  
  full_resource_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.QueryGrantableRolesRequest.full_resource_name)
}
inline ::std::string* QueryGrantableRolesRequest::mutable_full_resource_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.QueryGrantableRolesRequest.full_resource_name)
  return full_resource_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* QueryGrantableRolesRequest::release_full_resource_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.QueryGrantableRolesRequest.full_resource_name)
  
  return full_resource_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* QueryGrantableRolesRequest::unsafe_arena_release_full_resource_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.QueryGrantableRolesRequest.full_resource_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return full_resource_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void QueryGrantableRolesRequest::set_allocated_full_resource_name(::std::string* full_resource_name) {
  if (full_resource_name != NULL) {
    
  } else {
    
  }
  full_resource_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), full_resource_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.QueryGrantableRolesRequest.full_resource_name)
}
inline void QueryGrantableRolesRequest::unsafe_arena_set_allocated_full_resource_name(
    ::std::string* full_resource_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (full_resource_name != NULL) {
    
  } else {
    
  }
  full_resource_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      full_resource_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.QueryGrantableRolesRequest.full_resource_name)
}

inline const QueryGrantableRolesRequest* QueryGrantableRolesRequest::internal_default_instance() {
  return &QueryGrantableRolesRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// QueryGrantableRolesResponse

// repeated .google.iam.admin.v1.Role roles = 1;
inline int QueryGrantableRolesResponse::roles_size() const {
  return roles_.size();
}
inline void QueryGrantableRolesResponse::clear_roles() {
  roles_.Clear();
}
inline const ::google::iam::admin::v1::Role& QueryGrantableRolesResponse::roles(int index) const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.QueryGrantableRolesResponse.roles)
  return roles_.Get(index);
}
inline ::google::iam::admin::v1::Role* QueryGrantableRolesResponse::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.QueryGrantableRolesResponse.roles)
  return roles_.Mutable(index);
}
inline ::google::iam::admin::v1::Role* QueryGrantableRolesResponse::add_roles() {
  // @@protoc_insertion_point(field_add:google.iam.admin.v1.QueryGrantableRolesResponse.roles)
  return roles_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::Role >*
QueryGrantableRolesResponse::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:google.iam.admin.v1.QueryGrantableRolesResponse.roles)
  return &roles_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::Role >&
QueryGrantableRolesResponse::roles() const {
  // @@protoc_insertion_point(field_list:google.iam.admin.v1.QueryGrantableRolesResponse.roles)
  return roles_;
}

inline const QueryGrantableRolesResponse* QueryGrantableRolesResponse::internal_default_instance() {
  return &QueryGrantableRolesResponse_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace admin
}  // namespace iam
}  // namespace google

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::iam::admin::v1::ListServiceAccountKeysRequest_KeyType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::iam::admin::v1::ListServiceAccountKeysRequest_KeyType>() {
  return ::google::iam::admin::v1::ListServiceAccountKeysRequest_KeyType_descriptor();
}
template <> struct is_proto_enum< ::google::iam::admin::v1::ServiceAccountKeyAlgorithm> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::iam::admin::v1::ServiceAccountKeyAlgorithm>() {
  return ::google::iam::admin::v1::ServiceAccountKeyAlgorithm_descriptor();
}
template <> struct is_proto_enum< ::google::iam::admin::v1::ServiceAccountPrivateKeyType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::iam::admin::v1::ServiceAccountPrivateKeyType>() {
  return ::google::iam::admin::v1::ServiceAccountPrivateKeyType_descriptor();
}
template <> struct is_proto_enum< ::google::iam::admin::v1::ServiceAccountPublicKeyType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::iam::admin::v1::ServiceAccountPublicKeyType>() {
  return ::google::iam::admin::v1::ServiceAccountPublicKeyType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fiam_2fadmin_2fv1_2fiam_2eproto__INCLUDED
