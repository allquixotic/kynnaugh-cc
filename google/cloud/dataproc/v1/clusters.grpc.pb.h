// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: google/cloud/dataproc/v1/clusters.proto
// Original file comments:
// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto__INCLUDED
#define GRPC_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto__INCLUDED

#include "google/cloud/dataproc/v1/clusters.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace google {
namespace cloud {
namespace dataproc {
namespace v1 {

// The ClusterControllerService provides methods to manage clusters
// of Google Compute Engine instances.
class ClusterController GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Creates a cluster in a project.
    virtual ::grpc::Status CreateCluster(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::CreateClusterRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncCreateCluster(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::CreateClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncCreateClusterRaw(context, request, cq));
    }
    // Updates a cluster in a project.
    virtual ::grpc::Status UpdateCluster(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::UpdateClusterRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncUpdateCluster(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::UpdateClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncUpdateClusterRaw(context, request, cq));
    }
    // Deletes a cluster in a project.
    virtual ::grpc::Status DeleteCluster(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::DeleteClusterRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncDeleteCluster(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::DeleteClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncDeleteClusterRaw(context, request, cq));
    }
    // Gets the resource representation for a cluster in a project.
    virtual ::grpc::Status GetCluster(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::GetClusterRequest& request, ::google::cloud::dataproc::v1::Cluster* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::dataproc::v1::Cluster>> AsyncGetCluster(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::GetClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::dataproc::v1::Cluster>>(AsyncGetClusterRaw(context, request, cq));
    }
    // Lists all regions/{region}/clusters in a project.
    virtual ::grpc::Status ListClusters(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::ListClustersRequest& request, ::google::cloud::dataproc::v1::ListClustersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::dataproc::v1::ListClustersResponse>> AsyncListClusters(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::ListClustersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::dataproc::v1::ListClustersResponse>>(AsyncListClustersRaw(context, request, cq));
    }
    // Gets cluster diagnostic information.
    // After the operation completes, the Operation.response field
    // contains `DiagnoseClusterOutputLocation`.
    virtual ::grpc::Status DiagnoseCluster(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::DiagnoseClusterRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncDiagnoseCluster(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::DiagnoseClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncDiagnoseClusterRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncCreateClusterRaw(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::CreateClusterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncUpdateClusterRaw(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::UpdateClusterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncDeleteClusterRaw(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::DeleteClusterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::dataproc::v1::Cluster>* AsyncGetClusterRaw(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::GetClusterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::dataproc::v1::ListClustersResponse>* AsyncListClustersRaw(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::ListClustersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncDiagnoseClusterRaw(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::DiagnoseClusterRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateCluster(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::CreateClusterRequest& request, ::google::longrunning::Operation* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncCreateCluster(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::CreateClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncCreateClusterRaw(context, request, cq));
    }
    ::grpc::Status UpdateCluster(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::UpdateClusterRequest& request, ::google::longrunning::Operation* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncUpdateCluster(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::UpdateClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncUpdateClusterRaw(context, request, cq));
    }
    ::grpc::Status DeleteCluster(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::DeleteClusterRequest& request, ::google::longrunning::Operation* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncDeleteCluster(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::DeleteClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncDeleteClusterRaw(context, request, cq));
    }
    ::grpc::Status GetCluster(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::GetClusterRequest& request, ::google::cloud::dataproc::v1::Cluster* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::dataproc::v1::Cluster>> AsyncGetCluster(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::GetClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::dataproc::v1::Cluster>>(AsyncGetClusterRaw(context, request, cq));
    }
    ::grpc::Status ListClusters(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::ListClustersRequest& request, ::google::cloud::dataproc::v1::ListClustersResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::dataproc::v1::ListClustersResponse>> AsyncListClusters(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::ListClustersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::dataproc::v1::ListClustersResponse>>(AsyncListClustersRaw(context, request, cq));
    }
    ::grpc::Status DiagnoseCluster(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::DiagnoseClusterRequest& request, ::google::longrunning::Operation* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncDiagnoseCluster(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::DiagnoseClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncDiagnoseClusterRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncCreateClusterRaw(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::CreateClusterRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncUpdateClusterRaw(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::UpdateClusterRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncDeleteClusterRaw(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::DeleteClusterRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::dataproc::v1::Cluster>* AsyncGetClusterRaw(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::GetClusterRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::dataproc::v1::ListClustersResponse>* AsyncListClustersRaw(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::ListClustersRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncDiagnoseClusterRaw(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::DiagnoseClusterRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_CreateCluster_;
    const ::grpc::RpcMethod rpcmethod_UpdateCluster_;
    const ::grpc::RpcMethod rpcmethod_DeleteCluster_;
    const ::grpc::RpcMethod rpcmethod_GetCluster_;
    const ::grpc::RpcMethod rpcmethod_ListClusters_;
    const ::grpc::RpcMethod rpcmethod_DiagnoseCluster_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Creates a cluster in a project.
    virtual ::grpc::Status CreateCluster(::grpc::ServerContext* context, const ::google::cloud::dataproc::v1::CreateClusterRequest* request, ::google::longrunning::Operation* response);
    // Updates a cluster in a project.
    virtual ::grpc::Status UpdateCluster(::grpc::ServerContext* context, const ::google::cloud::dataproc::v1::UpdateClusterRequest* request, ::google::longrunning::Operation* response);
    // Deletes a cluster in a project.
    virtual ::grpc::Status DeleteCluster(::grpc::ServerContext* context, const ::google::cloud::dataproc::v1::DeleteClusterRequest* request, ::google::longrunning::Operation* response);
    // Gets the resource representation for a cluster in a project.
    virtual ::grpc::Status GetCluster(::grpc::ServerContext* context, const ::google::cloud::dataproc::v1::GetClusterRequest* request, ::google::cloud::dataproc::v1::Cluster* response);
    // Lists all regions/{region}/clusters in a project.
    virtual ::grpc::Status ListClusters(::grpc::ServerContext* context, const ::google::cloud::dataproc::v1::ListClustersRequest* request, ::google::cloud::dataproc::v1::ListClustersResponse* response);
    // Gets cluster diagnostic information.
    // After the operation completes, the Operation.response field
    // contains `DiagnoseClusterOutputLocation`.
    virtual ::grpc::Status DiagnoseCluster(::grpc::ServerContext* context, const ::google::cloud::dataproc::v1::DiagnoseClusterRequest* request, ::google::longrunning::Operation* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateCluster() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateCluster() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCluster(::grpc::ServerContext* context, const ::google::cloud::dataproc::v1::CreateClusterRequest* request, ::google::longrunning::Operation* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCluster(::grpc::ServerContext* context, ::google::cloud::dataproc::v1::CreateClusterRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateCluster() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UpdateCluster() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCluster(::grpc::ServerContext* context, const ::google::cloud::dataproc::v1::UpdateClusterRequest* request, ::google::longrunning::Operation* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateCluster(::grpc::ServerContext* context, ::google::cloud::dataproc::v1::UpdateClusterRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteCluster() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeleteCluster() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCluster(::grpc::ServerContext* context, const ::google::cloud::dataproc::v1::DeleteClusterRequest* request, ::google::longrunning::Operation* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteCluster(::grpc::ServerContext* context, ::google::cloud::dataproc::v1::DeleteClusterRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetCluster() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetCluster() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCluster(::grpc::ServerContext* context, const ::google::cloud::dataproc::v1::GetClusterRequest* request, ::google::cloud::dataproc::v1::Cluster* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCluster(::grpc::ServerContext* context, ::google::cloud::dataproc::v1::GetClusterRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::dataproc::v1::Cluster>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListClusters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListClusters() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ListClusters() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListClusters(::grpc::ServerContext* context, const ::google::cloud::dataproc::v1::ListClustersRequest* request, ::google::cloud::dataproc::v1::ListClustersResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListClusters(::grpc::ServerContext* context, ::google::cloud::dataproc::v1::ListClustersRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::dataproc::v1::ListClustersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DiagnoseCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DiagnoseCluster() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_DiagnoseCluster() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DiagnoseCluster(::grpc::ServerContext* context, const ::google::cloud::dataproc::v1::DiagnoseClusterRequest* request, ::google::longrunning::Operation* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDiagnoseCluster(::grpc::ServerContext* context, ::google::cloud::dataproc::v1::DiagnoseClusterRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateCluster<WithAsyncMethod_UpdateCluster<WithAsyncMethod_DeleteCluster<WithAsyncMethod_GetCluster<WithAsyncMethod_ListClusters<WithAsyncMethod_DiagnoseCluster<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_CreateCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateCluster() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateCluster() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCluster(::grpc::ServerContext* context, const ::google::cloud::dataproc::v1::CreateClusterRequest* request, ::google::longrunning::Operation* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateCluster() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UpdateCluster() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCluster(::grpc::ServerContext* context, const ::google::cloud::dataproc::v1::UpdateClusterRequest* request, ::google::longrunning::Operation* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteCluster() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeleteCluster() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCluster(::grpc::ServerContext* context, const ::google::cloud::dataproc::v1::DeleteClusterRequest* request, ::google::longrunning::Operation* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetCluster() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetCluster() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCluster(::grpc::ServerContext* context, const ::google::cloud::dataproc::v1::GetClusterRequest* request, ::google::cloud::dataproc::v1::Cluster* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListClusters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListClusters() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ListClusters() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListClusters(::grpc::ServerContext* context, const ::google::cloud::dataproc::v1::ListClustersRequest* request, ::google::cloud::dataproc::v1::ListClustersResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DiagnoseCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DiagnoseCluster() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_DiagnoseCluster() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DiagnoseCluster(::grpc::ServerContext* context, const ::google::cloud::dataproc::v1::DiagnoseClusterRequest* request, ::google::longrunning::Operation* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

}  // namespace v1
}  // namespace dataproc
}  // namespace cloud
}  // namespace google


#endif  // GRPC_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto__INCLUDED
