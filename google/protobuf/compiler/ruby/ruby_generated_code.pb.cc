// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/compiler/ruby/ruby_generated_code.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include <google/protobuf/compiler/ruby/ruby_generated_code.pb.h>

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace A {
namespace B {
namespace C {

namespace {

const ::google::protobuf::Descriptor* TestMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMessage_reflection_ = NULL;
struct TestMessageOneofInstance {
  ::google::protobuf::int32 oneof_int32_;
  ::google::protobuf::int64 oneof_int64_;
  ::google::protobuf::uint32 oneof_uint32_;
  ::google::protobuf::uint64 oneof_uint64_;
  bool oneof_bool_;
  double oneof_double_;
  float oneof_float_;
  ::google::protobuf::internal::ArenaStringPtr oneof_string_;
  ::google::protobuf::internal::ArenaStringPtr oneof_bytes_;
  int oneof_enum_;
  const ::A::B::C::TestMessage* oneof_msg_;
}* TestMessage_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* TestMessage_MapInt32StringEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TestMessage_MapInt64StringEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TestMessage_MapUint32StringEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TestMessage_MapUint64StringEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TestMessage_MapBoolStringEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TestMessage_MapStringStringEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TestMessage_MapStringMsgEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TestMessage_MapStringEnumEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TestMessage_MapStringInt32Entry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TestMessage_MapStringBoolEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TestMessage_NestedMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMessage_NestedMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TestEnum_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto() {
  protobuf_AddDesc_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "google/protobuf/compiler/ruby/ruby_generated_code.proto");
  GOOGLE_CHECK(file != NULL);
  TestMessage_descriptor_ = file->message_type(0);
  static const int TestMessage_offsets_[45] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, optional_int32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, optional_int64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, optional_uint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, optional_uint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, optional_bool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, optional_double_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, optional_float_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, optional_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, optional_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, optional_enum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, optional_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, repeated_int32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, repeated_int64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, repeated_uint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, repeated_uint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, repeated_bool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, repeated_double_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, repeated_float_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, repeated_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, repeated_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, repeated_enum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, repeated_msg_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TestMessage_default_oneof_instance_, oneof_int32_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TestMessage_default_oneof_instance_, oneof_int64_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TestMessage_default_oneof_instance_, oneof_uint32_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TestMessage_default_oneof_instance_, oneof_uint64_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TestMessage_default_oneof_instance_, oneof_bool_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TestMessage_default_oneof_instance_, oneof_double_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TestMessage_default_oneof_instance_, oneof_float_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TestMessage_default_oneof_instance_, oneof_string_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TestMessage_default_oneof_instance_, oneof_bytes_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TestMessage_default_oneof_instance_, oneof_enum_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TestMessage_default_oneof_instance_, oneof_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, map_int32_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, map_int64_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, map_uint32_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, map_uint64_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, map_bool_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, map_string_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, map_string_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, map_string_enum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, map_string_int32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, map_string_bool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, nested_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, my_oneof_),
  };
  TestMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TestMessage_descriptor_,
      TestMessage::default_instance_,
      TestMessage_offsets_,
      -1,
      -1,
      -1,
      TestMessage_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, _oneof_case_[0]),
      sizeof(TestMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, _is_default_instance_));
  TestMessage_MapInt32StringEntry_descriptor_ = TestMessage_descriptor_->nested_type(0);
  TestMessage_MapInt64StringEntry_descriptor_ = TestMessage_descriptor_->nested_type(1);
  TestMessage_MapUint32StringEntry_descriptor_ = TestMessage_descriptor_->nested_type(2);
  TestMessage_MapUint64StringEntry_descriptor_ = TestMessage_descriptor_->nested_type(3);
  TestMessage_MapBoolStringEntry_descriptor_ = TestMessage_descriptor_->nested_type(4);
  TestMessage_MapStringStringEntry_descriptor_ = TestMessage_descriptor_->nested_type(5);
  TestMessage_MapStringMsgEntry_descriptor_ = TestMessage_descriptor_->nested_type(6);
  TestMessage_MapStringEnumEntry_descriptor_ = TestMessage_descriptor_->nested_type(7);
  TestMessage_MapStringInt32Entry_descriptor_ = TestMessage_descriptor_->nested_type(8);
  TestMessage_MapStringBoolEntry_descriptor_ = TestMessage_descriptor_->nested_type(9);
  TestMessage_NestedMessage_descriptor_ = TestMessage_descriptor_->nested_type(10);
  static const int TestMessage_NestedMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage_NestedMessage, foo_),
  };
  TestMessage_NestedMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TestMessage_NestedMessage_descriptor_,
      TestMessage_NestedMessage::default_instance_,
      TestMessage_NestedMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(TestMessage_NestedMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage_NestedMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage_NestedMessage, _is_default_instance_));
  TestEnum_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TestMessage_descriptor_, &TestMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TestMessage_MapInt32StringEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                TestMessage_MapInt32StringEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TestMessage_MapInt64StringEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int64,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                TestMessage_MapInt64StringEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TestMessage_MapUint32StringEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::uint32,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                TestMessage_MapUint32StringEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TestMessage_MapUint64StringEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::uint64,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                TestMessage_MapUint64StringEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TestMessage_MapBoolStringEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            bool,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                TestMessage_MapBoolStringEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TestMessage_MapStringStringEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                TestMessage_MapStringStringEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TestMessage_MapStringMsgEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::A::B::C::TestMessage,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                TestMessage_MapStringMsgEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TestMessage_MapStringEnumEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::A::B::C::TestEnum,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_ENUM,
            0>::CreateDefaultInstance(
                TestMessage_MapStringEnumEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TestMessage_MapStringInt32Entry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::google::protobuf::int32,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            0>::CreateDefaultInstance(
                TestMessage_MapStringInt32Entry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TestMessage_MapStringBoolEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            bool,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
            0>::CreateDefaultInstance(
                TestMessage_MapStringBoolEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TestMessage_NestedMessage_descriptor_, &TestMessage_NestedMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto() {
  delete TestMessage::default_instance_;
  delete TestMessage_default_oneof_instance_;
  delete TestMessage_reflection_;
  delete TestMessage_NestedMessage::default_instance_;
  delete TestMessage_NestedMessage_reflection_;
}

void protobuf_AddDesc_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n7google/protobuf/compiler/ruby/ruby_gen"
    "erated_code.proto\022\005A.B.C\"\306\021\n\013TestMessage"
    "\022\026\n\016optional_int32\030\001 \001(\005\022\026\n\016optional_int"
    "64\030\002 \001(\003\022\027\n\017optional_uint32\030\003 \001(\r\022\027\n\017opt"
    "ional_uint64\030\004 \001(\004\022\025\n\roptional_bool\030\005 \001("
    "\010\022\027\n\017optional_double\030\006 \001(\001\022\026\n\016optional_f"
    "loat\030\007 \001(\002\022\027\n\017optional_string\030\010 \001(\t\022\026\n\016o"
    "ptional_bytes\030\t \001(\014\022&\n\roptional_enum\030\n \001"
    "(\0162\017.A.B.C.TestEnum\022(\n\014optional_msg\030\013 \001("
    "\0132\022.A.B.C.TestMessage\022\026\n\016repeated_int32\030"
    "\025 \003(\005\022\026\n\016repeated_int64\030\026 \003(\003\022\027\n\017repeate"
    "d_uint32\030\027 \003(\r\022\027\n\017repeated_uint64\030\030 \003(\004\022"
    "\025\n\rrepeated_bool\030\031 \003(\010\022\027\n\017repeated_doubl"
    "e\030\032 \003(\001\022\026\n\016repeated_float\030\033 \003(\002\022\027\n\017repea"
    "ted_string\030\034 \003(\t\022\026\n\016repeated_bytes\030\035 \003(\014"
    "\022&\n\rrepeated_enum\030\036 \003(\0162\017.A.B.C.TestEnum"
    "\022(\n\014repeated_msg\030\037 \003(\0132\022.A.B.C.TestMessa"
    "ge\022\025\n\013oneof_int32\030) \001(\005H\000\022\025\n\013oneof_int64"
    "\030* \001(\003H\000\022\026\n\014oneof_uint32\030+ \001(\rH\000\022\026\n\014oneo"
    "f_uint64\030, \001(\004H\000\022\024\n\noneof_bool\030- \001(\010H\000\022\026"
    "\n\014oneof_double\030. \001(\001H\000\022\025\n\013oneof_float\030/ "
    "\001(\002H\000\022\026\n\014oneof_string\0300 \001(\tH\000\022\025\n\013oneof_b"
    "ytes\0301 \001(\014H\000\022%\n\noneof_enum\0302 \001(\0162\017.A.B.C"
    ".TestEnumH\000\022\'\n\toneof_msg\0303 \001(\0132\022.A.B.C.T"
    "estMessageH\000\022@\n\020map_int32_string\030= \003(\0132&"
    ".A.B.C.TestMessage.MapInt32StringEntry\022@"
    "\n\020map_int64_string\030> \003(\0132&.A.B.C.TestMes"
    "sage.MapInt64StringEntry\022B\n\021map_uint32_s"
    "tring\030\? \003(\0132\'.A.B.C.TestMessage.MapUint3"
    "2StringEntry\022B\n\021map_uint64_string\030@ \003(\0132"
    "\'.A.B.C.TestMessage.MapUint64StringEntry"
    "\022>\n\017map_bool_string\030A \003(\0132%.A.B.C.TestMe"
    "ssage.MapBoolStringEntry\022B\n\021map_string_s"
    "tring\030B \003(\0132\'.A.B.C.TestMessage.MapStrin"
    "gStringEntry\022<\n\016map_string_msg\030C \003(\0132$.A"
    ".B.C.TestMessage.MapStringMsgEntry\022>\n\017ma"
    "p_string_enum\030D \003(\0132%.A.B.C.TestMessage."
    "MapStringEnumEntry\022@\n\020map_string_int32\030E"
    " \003(\0132&.A.B.C.TestMessage.MapStringInt32E"
    "ntry\022>\n\017map_string_bool\030F \003(\0132%.A.B.C.Te"
    "stMessage.MapStringBoolEntry\0228\n\016nested_m"
    "essage\030P \001(\0132 .A.B.C.TestMessage.NestedM"
    "essage\0325\n\023MapInt32StringEntry\022\013\n\003key\030\001 \001"
    "(\005\022\r\n\005value\030\002 \001(\t:\0028\001\0325\n\023MapInt64StringE"
    "ntry\022\013\n\003key\030\001 \001(\003\022\r\n\005value\030\002 \001(\t:\0028\001\0326\n\024"
    "MapUint32StringEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005val"
    "ue\030\002 \001(\t:\0028\001\0326\n\024MapUint64StringEntry\022\013\n\003"
    "key\030\001 \001(\004\022\r\n\005value\030\002 \001(\t:\0028\001\0324\n\022MapBoolS"
    "tringEntry\022\013\n\003key\030\001 \001(\010\022\r\n\005value\030\002 \001(\t:\002"
    "8\001\0326\n\024MapStringStringEntry\022\013\n\003key\030\001 \001(\t\022"
    "\r\n\005value\030\002 \001(\t:\0028\001\032G\n\021MapStringMsgEntry\022"
    "\013\n\003key\030\001 \001(\t\022!\n\005value\030\002 \001(\0132\022.A.B.C.Test"
    "Message:\0028\001\032E\n\022MapStringEnumEntry\022\013\n\003key"
    "\030\001 \001(\t\022\036\n\005value\030\002 \001(\0162\017.A.B.C.TestEnum:\002"
    "8\001\0325\n\023MapStringInt32Entry\022\013\n\003key\030\001 \001(\t\022\r"
    "\n\005value\030\002 \001(\005:\0028\001\0324\n\022MapStringBoolEntry\022"
    "\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\010:\0028\001\032\034\n\rNeste"
    "dMessage\022\013\n\003foo\030\001 \001(\005B\n\n\010my_oneof*,\n\010Tes"
    "tEnum\022\013\n\007Default\020\000\022\005\n\001A\020\001\022\005\n\001B\020\002\022\005\n\001C\020\003b"
    "\006proto3", 2367);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/protobuf/compiler/ruby/ruby_generated_code.proto", &protobuf_RegisterTypes);
  TestMessage::default_instance_ = new TestMessage();
  TestMessage_default_oneof_instance_ = new TestMessageOneofInstance();
  TestMessage_NestedMessage::default_instance_ = new TestMessage_NestedMessage();
  TestMessage::default_instance_->InitAsDefaultInstance();
  TestMessage_NestedMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto {
  StaticDescriptorInitializer_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto() {
    protobuf_AddDesc_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto();
  }
} static_descriptor_initializer_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto_;
const ::google::protobuf::EnumDescriptor* TestEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestEnum_descriptor_;
}
bool TestEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestMessage_NestedMessage::kFooFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestMessage_NestedMessage::TestMessage_NestedMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:A.B.C.TestMessage.NestedMessage)
}

void TestMessage_NestedMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TestMessage_NestedMessage::TestMessage_NestedMessage(const TestMessage_NestedMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:A.B.C.TestMessage.NestedMessage)
}

void TestMessage_NestedMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  foo_ = 0;
}

TestMessage_NestedMessage::~TestMessage_NestedMessage() {
  // @@protoc_insertion_point(destructor:A.B.C.TestMessage.NestedMessage)
  SharedDtor();
}

void TestMessage_NestedMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TestMessage_NestedMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestMessage_NestedMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMessage_NestedMessage_descriptor_;
}

const TestMessage_NestedMessage& TestMessage_NestedMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto();
  return *default_instance_;
}

TestMessage_NestedMessage* TestMessage_NestedMessage::default_instance_ = NULL;

TestMessage_NestedMessage* TestMessage_NestedMessage::New(::google::protobuf::Arena* arena) const {
  TestMessage_NestedMessage* n = new TestMessage_NestedMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestMessage_NestedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:A.B.C.TestMessage.NestedMessage)
  foo_ = 0;
}

bool TestMessage_NestedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:A.B.C.TestMessage.NestedMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 foo = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &foo_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:A.B.C.TestMessage.NestedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:A.B.C.TestMessage.NestedMessage)
  return false;
#undef DO_
}

void TestMessage_NestedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:A.B.C.TestMessage.NestedMessage)
  // optional int32 foo = 1;
  if (this->foo() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->foo(), output);
  }

  // @@protoc_insertion_point(serialize_end:A.B.C.TestMessage.NestedMessage)
}

::google::protobuf::uint8* TestMessage_NestedMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:A.B.C.TestMessage.NestedMessage)
  // optional int32 foo = 1;
  if (this->foo() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->foo(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:A.B.C.TestMessage.NestedMessage)
  return target;
}

int TestMessage_NestedMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:A.B.C.TestMessage.NestedMessage)
  int total_size = 0;

  // optional int32 foo = 1;
  if (this->foo() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->foo());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestMessage_NestedMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:A.B.C.TestMessage.NestedMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TestMessage_NestedMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TestMessage_NestedMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:A.B.C.TestMessage.NestedMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:A.B.C.TestMessage.NestedMessage)
    MergeFrom(*source);
  }
}

void TestMessage_NestedMessage::MergeFrom(const TestMessage_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:A.B.C.TestMessage.NestedMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.foo() != 0) {
    set_foo(from.foo());
  }
}

void TestMessage_NestedMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:A.B.C.TestMessage.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessage_NestedMessage::CopyFrom(const TestMessage_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:A.B.C.TestMessage.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessage_NestedMessage::IsInitialized() const {

  return true;
}

void TestMessage_NestedMessage::Swap(TestMessage_NestedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestMessage_NestedMessage::InternalSwap(TestMessage_NestedMessage* other) {
  std::swap(foo_, other->foo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestMessage_NestedMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMessage_NestedMessage_descriptor_;
  metadata.reflection = TestMessage_NestedMessage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestMessage::kOptionalInt32FieldNumber;
const int TestMessage::kOptionalInt64FieldNumber;
const int TestMessage::kOptionalUint32FieldNumber;
const int TestMessage::kOptionalUint64FieldNumber;
const int TestMessage::kOptionalBoolFieldNumber;
const int TestMessage::kOptionalDoubleFieldNumber;
const int TestMessage::kOptionalFloatFieldNumber;
const int TestMessage::kOptionalStringFieldNumber;
const int TestMessage::kOptionalBytesFieldNumber;
const int TestMessage::kOptionalEnumFieldNumber;
const int TestMessage::kOptionalMsgFieldNumber;
const int TestMessage::kRepeatedInt32FieldNumber;
const int TestMessage::kRepeatedInt64FieldNumber;
const int TestMessage::kRepeatedUint32FieldNumber;
const int TestMessage::kRepeatedUint64FieldNumber;
const int TestMessage::kRepeatedBoolFieldNumber;
const int TestMessage::kRepeatedDoubleFieldNumber;
const int TestMessage::kRepeatedFloatFieldNumber;
const int TestMessage::kRepeatedStringFieldNumber;
const int TestMessage::kRepeatedBytesFieldNumber;
const int TestMessage::kRepeatedEnumFieldNumber;
const int TestMessage::kRepeatedMsgFieldNumber;
const int TestMessage::kOneofInt32FieldNumber;
const int TestMessage::kOneofInt64FieldNumber;
const int TestMessage::kOneofUint32FieldNumber;
const int TestMessage::kOneofUint64FieldNumber;
const int TestMessage::kOneofBoolFieldNumber;
const int TestMessage::kOneofDoubleFieldNumber;
const int TestMessage::kOneofFloatFieldNumber;
const int TestMessage::kOneofStringFieldNumber;
const int TestMessage::kOneofBytesFieldNumber;
const int TestMessage::kOneofEnumFieldNumber;
const int TestMessage::kOneofMsgFieldNumber;
const int TestMessage::kMapInt32StringFieldNumber;
const int TestMessage::kMapInt64StringFieldNumber;
const int TestMessage::kMapUint32StringFieldNumber;
const int TestMessage::kMapUint64StringFieldNumber;
const int TestMessage::kMapBoolStringFieldNumber;
const int TestMessage::kMapStringStringFieldNumber;
const int TestMessage::kMapStringMsgFieldNumber;
const int TestMessage::kMapStringEnumFieldNumber;
const int TestMessage::kMapStringInt32FieldNumber;
const int TestMessage::kMapStringBoolFieldNumber;
const int TestMessage::kNestedMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestMessage::TestMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:A.B.C.TestMessage)
}

void TestMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  optional_msg_ = const_cast< ::A::B::C::TestMessage*>(&::A::B::C::TestMessage::default_instance());
  TestMessage_default_oneof_instance_->oneof_int32_ = 0;
  TestMessage_default_oneof_instance_->oneof_int64_ = GOOGLE_LONGLONG(0);
  TestMessage_default_oneof_instance_->oneof_uint32_ = 0u;
  TestMessage_default_oneof_instance_->oneof_uint64_ = GOOGLE_ULONGLONG(0);
  TestMessage_default_oneof_instance_->oneof_bool_ = false;
  TestMessage_default_oneof_instance_->oneof_double_ = 0;
  TestMessage_default_oneof_instance_->oneof_float_ = 0;
  TestMessage_default_oneof_instance_->oneof_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TestMessage_default_oneof_instance_->oneof_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TestMessage_default_oneof_instance_->oneof_enum_ = 0;
  TestMessage_default_oneof_instance_->oneof_msg_ = const_cast< ::A::B::C::TestMessage*>(&::A::B::C::TestMessage::default_instance());
  nested_message_ = const_cast< ::A::B::C::TestMessage_NestedMessage*>(&::A::B::C::TestMessage_NestedMessage::default_instance());
}

TestMessage::TestMessage(const TestMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:A.B.C.TestMessage)
}

void TestMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  optional_int32_ = 0;
  optional_int64_ = GOOGLE_LONGLONG(0);
  optional_uint32_ = 0u;
  optional_uint64_ = GOOGLE_ULONGLONG(0);
  optional_bool_ = false;
  optional_double_ = 0;
  optional_float_ = 0;
  optional_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optional_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optional_enum_ = 0;
  optional_msg_ = NULL;
  map_int32_string_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  map_int32_string_.SetEntryDescriptor(
      &::A::B::C::TestMessage_MapInt32StringEntry_descriptor_);
  map_int64_string_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  map_int64_string_.SetEntryDescriptor(
      &::A::B::C::TestMessage_MapInt64StringEntry_descriptor_);
  map_uint32_string_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  map_uint32_string_.SetEntryDescriptor(
      &::A::B::C::TestMessage_MapUint32StringEntry_descriptor_);
  map_uint64_string_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  map_uint64_string_.SetEntryDescriptor(
      &::A::B::C::TestMessage_MapUint64StringEntry_descriptor_);
  map_bool_string_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  map_bool_string_.SetEntryDescriptor(
      &::A::B::C::TestMessage_MapBoolStringEntry_descriptor_);
  map_string_string_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  map_string_string_.SetEntryDescriptor(
      &::A::B::C::TestMessage_MapStringStringEntry_descriptor_);
  map_string_msg_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  map_string_msg_.SetEntryDescriptor(
      &::A::B::C::TestMessage_MapStringMsgEntry_descriptor_);
  map_string_enum_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  map_string_enum_.SetEntryDescriptor(
      &::A::B::C::TestMessage_MapStringEnumEntry_descriptor_);
  map_string_int32_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  map_string_int32_.SetEntryDescriptor(
      &::A::B::C::TestMessage_MapStringInt32Entry_descriptor_);
  map_string_bool_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  map_string_bool_.SetEntryDescriptor(
      &::A::B::C::TestMessage_MapStringBoolEntry_descriptor_);
  nested_message_ = NULL;
  clear_has_my_oneof();
}

TestMessage::~TestMessage() {
  // @@protoc_insertion_point(destructor:A.B.C.TestMessage)
  SharedDtor();
}

void TestMessage::SharedDtor() {
  optional_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optional_bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_my_oneof()) {
    clear_my_oneof();
  }
  if (this != default_instance_) {
    delete optional_msg_;
    delete nested_message_;
  }
}

void TestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMessage_descriptor_;
}

const TestMessage& TestMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto();
  return *default_instance_;
}

TestMessage* TestMessage::default_instance_ = NULL;

TestMessage* TestMessage::New(::google::protobuf::Arena* arena) const {
  TestMessage* n = new TestMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestMessage::clear_my_oneof() {
// @@protoc_insertion_point(one_of_clear_start:A.B.C.TestMessage)
  switch(my_oneof_case()) {
    case kOneofInt32: {
      // No need to clear
      break;
    }
    case kOneofInt64: {
      // No need to clear
      break;
    }
    case kOneofUint32: {
      // No need to clear
      break;
    }
    case kOneofUint64: {
      // No need to clear
      break;
    }
    case kOneofBool: {
      // No need to clear
      break;
    }
    case kOneofDouble: {
      // No need to clear
      break;
    }
    case kOneofFloat: {
      // No need to clear
      break;
    }
    case kOneofString: {
      my_oneof_.oneof_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kOneofBytes: {
      my_oneof_.oneof_bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kOneofEnum: {
      // No need to clear
      break;
    }
    case kOneofMsg: {
      delete my_oneof_.oneof_msg_;
      break;
    }
    case MY_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MY_ONEOF_NOT_SET;
}


void TestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:A.B.C.TestMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TestMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TestMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(optional_int64_, optional_float_);
  optional_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optional_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optional_enum_ = 0;
  if (GetArenaNoVirtual() == NULL && optional_msg_ != NULL) delete optional_msg_;
  optional_msg_ = NULL;
  if (GetArenaNoVirtual() == NULL && nested_message_ != NULL) delete nested_message_;
  nested_message_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  repeated_int32_.Clear();
  repeated_int64_.Clear();
  repeated_uint32_.Clear();
  repeated_uint64_.Clear();
  repeated_bool_.Clear();
  repeated_double_.Clear();
  repeated_float_.Clear();
  repeated_string_.Clear();
  repeated_bytes_.Clear();
  repeated_enum_.Clear();
  repeated_msg_.Clear();
  map_int32_string_.Clear();
  map_int64_string_.Clear();
  map_uint32_string_.Clear();
  map_uint64_string_.Clear();
  map_bool_string_.Clear();
  map_string_string_.Clear();
  map_string_msg_.Clear();
  map_string_enum_.Clear();
  map_string_int32_.Clear();
  map_string_bool_.Clear();
  clear_my_oneof();
}

bool TestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:A.B.C.TestMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 optional_int32 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optional_int32_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_optional_int64;
        break;
      }

      // optional int64 optional_int64 = 2;
      case 2: {
        if (tag == 16) {
         parse_optional_int64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &optional_int64_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_optional_uint32;
        break;
      }

      // optional uint32 optional_uint32 = 3;
      case 3: {
        if (tag == 24) {
         parse_optional_uint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &optional_uint32_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_optional_uint64;
        break;
      }

      // optional uint64 optional_uint64 = 4;
      case 4: {
        if (tag == 32) {
         parse_optional_uint64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &optional_uint64_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_optional_bool;
        break;
      }

      // optional bool optional_bool = 5;
      case 5: {
        if (tag == 40) {
         parse_optional_bool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &optional_bool_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_optional_double;
        break;
      }

      // optional double optional_double = 6;
      case 6: {
        if (tag == 49) {
         parse_optional_double:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &optional_double_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_optional_float;
        break;
      }

      // optional float optional_float = 7;
      case 7: {
        if (tag == 61) {
         parse_optional_float:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &optional_float_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_optional_string;
        break;
      }

      // optional string optional_string = 8;
      case 8: {
        if (tag == 66) {
         parse_optional_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_optional_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->optional_string().data(), this->optional_string().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "A.B.C.TestMessage.optional_string"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_optional_bytes;
        break;
      }

      // optional bytes optional_bytes = 9;
      case 9: {
        if (tag == 74) {
         parse_optional_bytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_optional_bytes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_optional_enum;
        break;
      }

      // optional .A.B.C.TestEnum optional_enum = 10;
      case 10: {
        if (tag == 80) {
         parse_optional_enum:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_optional_enum(static_cast< ::A::B::C::TestEnum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_optional_msg;
        break;
      }

      // optional .A.B.C.TestMessage optional_msg = 11;
      case 11: {
        if (tag == 90) {
         parse_optional_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_optional_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_repeated_int32;
        break;
      }

      // repeated int32 repeated_int32 = 21;
      case 21: {
        if (tag == 170) {
         parse_repeated_int32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_repeated_int32())));
        } else if (tag == 168) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 170, input, this->mutable_repeated_int32())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_repeated_int64;
        break;
      }

      // repeated int64 repeated_int64 = 22;
      case 22: {
        if (tag == 178) {
         parse_repeated_int64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_repeated_int64())));
        } else if (tag == 176) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 178, input, this->mutable_repeated_int64())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_repeated_uint32;
        break;
      }

      // repeated uint32 repeated_uint32 = 23;
      case 23: {
        if (tag == 186) {
         parse_repeated_uint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_repeated_uint32())));
        } else if (tag == 184) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 186, input, this->mutable_repeated_uint32())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_repeated_uint64;
        break;
      }

      // repeated uint64 repeated_uint64 = 24;
      case 24: {
        if (tag == 194) {
         parse_repeated_uint64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_repeated_uint64())));
        } else if (tag == 192) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 194, input, this->mutable_repeated_uint64())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_repeated_bool;
        break;
      }

      // repeated bool repeated_bool = 25;
      case 25: {
        if (tag == 202) {
         parse_repeated_bool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_repeated_bool())));
        } else if (tag == 200) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 2, 202, input, this->mutable_repeated_bool())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_repeated_double;
        break;
      }

      // repeated double repeated_double = 26;
      case 26: {
        if (tag == 210) {
         parse_repeated_double:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_repeated_double())));
        } else if (tag == 209) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 210, input, this->mutable_repeated_double())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_repeated_float;
        break;
      }

      // repeated float repeated_float = 27;
      case 27: {
        if (tag == 218) {
         parse_repeated_float:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_repeated_float())));
        } else if (tag == 221) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 218, input, this->mutable_repeated_float())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_repeated_string;
        break;
      }

      // repeated string repeated_string = 28;
      case 28: {
        if (tag == 226) {
         parse_repeated_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_repeated_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->repeated_string(this->repeated_string_size() - 1).data(),
            this->repeated_string(this->repeated_string_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "A.B.C.TestMessage.repeated_string"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_repeated_string;
        if (input->ExpectTag(234)) goto parse_repeated_bytes;
        break;
      }

      // repeated bytes repeated_bytes = 29;
      case 29: {
        if (tag == 234) {
         parse_repeated_bytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_repeated_bytes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_repeated_bytes;
        if (input->ExpectTag(242)) goto parse_repeated_enum;
        break;
      }

      // repeated .A.B.C.TestEnum repeated_enum = 30;
      case 30: {
        if (tag == 242) {
         parse_repeated_enum:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_repeated_enum(static_cast< ::A::B::C::TestEnum >(value));
          }
          input->PopLimit(limit);
        } else if (tag == 240) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_repeated_enum(static_cast< ::A::B::C::TestEnum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_repeated_msg;
        break;
      }

      // repeated .A.B.C.TestMessage repeated_msg = 31;
      case 31: {
        if (tag == 250) {
         parse_repeated_msg:
          DO_(input->IncrementRecursionDepth());
         parse_loop_repeated_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_repeated_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_loop_repeated_msg;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(328)) goto parse_oneof_int32;
        break;
      }

      // optional int32 oneof_int32 = 41;
      case 41: {
        if (tag == 328) {
         parse_oneof_int32:
          clear_my_oneof();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &my_oneof_.oneof_int32_)));
          set_has_oneof_int32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_oneof_int64;
        break;
      }

      // optional int64 oneof_int64 = 42;
      case 42: {
        if (tag == 336) {
         parse_oneof_int64:
          clear_my_oneof();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &my_oneof_.oneof_int64_)));
          set_has_oneof_int64();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_oneof_uint32;
        break;
      }

      // optional uint32 oneof_uint32 = 43;
      case 43: {
        if (tag == 344) {
         parse_oneof_uint32:
          clear_my_oneof();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &my_oneof_.oneof_uint32_)));
          set_has_oneof_uint32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_oneof_uint64;
        break;
      }

      // optional uint64 oneof_uint64 = 44;
      case 44: {
        if (tag == 352) {
         parse_oneof_uint64:
          clear_my_oneof();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &my_oneof_.oneof_uint64_)));
          set_has_oneof_uint64();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_oneof_bool;
        break;
      }

      // optional bool oneof_bool = 45;
      case 45: {
        if (tag == 360) {
         parse_oneof_bool:
          clear_my_oneof();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &my_oneof_.oneof_bool_)));
          set_has_oneof_bool();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(369)) goto parse_oneof_double;
        break;
      }

      // optional double oneof_double = 46;
      case 46: {
        if (tag == 369) {
         parse_oneof_double:
          clear_my_oneof();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &my_oneof_.oneof_double_)));
          set_has_oneof_double();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(381)) goto parse_oneof_float;
        break;
      }

      // optional float oneof_float = 47;
      case 47: {
        if (tag == 381) {
         parse_oneof_float:
          clear_my_oneof();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &my_oneof_.oneof_float_)));
          set_has_oneof_float();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(386)) goto parse_oneof_string;
        break;
      }

      // optional string oneof_string = 48;
      case 48: {
        if (tag == 386) {
         parse_oneof_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oneof_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->oneof_string().data(), this->oneof_string().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "A.B.C.TestMessage.oneof_string"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(394)) goto parse_oneof_bytes;
        break;
      }

      // optional bytes oneof_bytes = 49;
      case 49: {
        if (tag == 394) {
         parse_oneof_bytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_oneof_bytes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_oneof_enum;
        break;
      }

      // optional .A.B.C.TestEnum oneof_enum = 50;
      case 50: {
        if (tag == 400) {
         parse_oneof_enum:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_oneof_enum(static_cast< ::A::B::C::TestEnum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(410)) goto parse_oneof_msg;
        break;
      }

      // optional .A.B.C.TestMessage oneof_msg = 51;
      case 51: {
        if (tag == 410) {
         parse_oneof_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oneof_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(490)) goto parse_map_int32_string;
        break;
      }

      // map<int32, string> map_int32_string = 61;
      case 61: {
        if (tag == 490) {
         parse_map_int32_string:
          DO_(input->IncrementRecursionDepth());
         parse_loop_map_int32_string:
          TestMessage_MapInt32StringEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::std::string > > parser(&map_int32_string_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "A.B.C.TestMessage.MapInt32StringEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(490)) goto parse_loop_map_int32_string;
        if (input->ExpectTag(498)) goto parse_loop_map_int64_string;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<int64, string> map_int64_string = 62;
      case 62: {
        if (tag == 498) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_map_int64_string:
          TestMessage_MapInt64StringEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int64, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int64, ::std::string > > parser(&map_int64_string_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "A.B.C.TestMessage.MapInt64StringEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(498)) goto parse_loop_map_int64_string;
        if (input->ExpectTag(506)) goto parse_loop_map_uint32_string;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<uint32, string> map_uint32_string = 63;
      case 63: {
        if (tag == 506) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_map_uint32_string:
          TestMessage_MapUint32StringEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::uint32, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string > > parser(&map_uint32_string_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "A.B.C.TestMessage.MapUint32StringEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(506)) goto parse_loop_map_uint32_string;
        if (input->ExpectTag(514)) goto parse_loop_map_uint64_string;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<uint64, string> map_uint64_string = 64;
      case 64: {
        if (tag == 514) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_map_uint64_string:
          TestMessage_MapUint64StringEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::uint64, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint64, ::std::string > > parser(&map_uint64_string_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "A.B.C.TestMessage.MapUint64StringEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(514)) goto parse_loop_map_uint64_string;
        if (input->ExpectTag(522)) goto parse_loop_map_bool_string;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<bool, string> map_bool_string = 65;
      case 65: {
        if (tag == 522) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_map_bool_string:
          TestMessage_MapBoolStringEntry::Parser< ::google::protobuf::internal::MapField<
              bool, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< bool, ::std::string > > parser(&map_bool_string_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "A.B.C.TestMessage.MapBoolStringEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(522)) goto parse_loop_map_bool_string;
        if (input->ExpectTag(530)) goto parse_loop_map_string_string;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, string> map_string_string = 66;
      case 66: {
        if (tag == 530) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_map_string_string:
          TestMessage_MapStringStringEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&map_string_string_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "A.B.C.TestMessage.MapStringStringEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "A.B.C.TestMessage.MapStringStringEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(530)) goto parse_loop_map_string_string;
        if (input->ExpectTag(538)) goto parse_loop_map_string_msg;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, .A.B.C.TestMessage> map_string_msg = 67;
      case 67: {
        if (tag == 538) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_map_string_msg:
          TestMessage_MapStringMsgEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::A::B::C::TestMessage,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::A::B::C::TestMessage > > parser(&map_string_msg_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "A.B.C.TestMessage.MapStringMsgEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(538)) goto parse_loop_map_string_msg;
        if (input->ExpectTag(546)) goto parse_loop_map_string_enum;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, .A.B.C.TestEnum> map_string_enum = 68;
      case 68: {
        if (tag == 546) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_map_string_enum:
          TestMessage_MapStringEnumEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::A::B::C::TestEnum,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_ENUM,
              0 >,
            ::google::protobuf::Map< ::std::string, ::A::B::C::TestEnum > > parser(&map_string_enum_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "A.B.C.TestMessage.MapStringEnumEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(546)) goto parse_loop_map_string_enum;
        if (input->ExpectTag(554)) goto parse_loop_map_string_int32;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, int32> map_string_int32 = 69;
      case 69: {
        if (tag == 554) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_map_string_int32:
          TestMessage_MapStringInt32Entry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 > > parser(&map_string_int32_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "A.B.C.TestMessage.MapStringInt32Entry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(554)) goto parse_loop_map_string_int32;
        if (input->ExpectTag(562)) goto parse_loop_map_string_bool;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, bool> map_string_bool = 70;
      case 70: {
        if (tag == 562) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_map_string_bool:
          TestMessage_MapStringBoolEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, bool,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
              0 >,
            ::google::protobuf::Map< ::std::string, bool > > parser(&map_string_bool_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "A.B.C.TestMessage.MapStringBoolEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(562)) goto parse_loop_map_string_bool;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(642)) goto parse_nested_message;
        break;
      }

      // optional .A.B.C.TestMessage.NestedMessage nested_message = 80;
      case 80: {
        if (tag == 642) {
         parse_nested_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nested_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:A.B.C.TestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:A.B.C.TestMessage)
  return false;
#undef DO_
}

void TestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:A.B.C.TestMessage)
  // optional int32 optional_int32 = 1;
  if (this->optional_int32() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->optional_int32(), output);
  }

  // optional int64 optional_int64 = 2;
  if (this->optional_int64() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->optional_int64(), output);
  }

  // optional uint32 optional_uint32 = 3;
  if (this->optional_uint32() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->optional_uint32(), output);
  }

  // optional uint64 optional_uint64 = 4;
  if (this->optional_uint64() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->optional_uint64(), output);
  }

  // optional bool optional_bool = 5;
  if (this->optional_bool() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->optional_bool(), output);
  }

  // optional double optional_double = 6;
  if (this->optional_double() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->optional_double(), output);
  }

  // optional float optional_float = 7;
  if (this->optional_float() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->optional_float(), output);
  }

  // optional string optional_string = 8;
  if (this->optional_string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->optional_string().data(), this->optional_string().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "A.B.C.TestMessage.optional_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->optional_string(), output);
  }

  // optional bytes optional_bytes = 9;
  if (this->optional_bytes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->optional_bytes(), output);
  }

  // optional .A.B.C.TestEnum optional_enum = 10;
  if (this->optional_enum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->optional_enum(), output);
  }

  // optional .A.B.C.TestMessage optional_msg = 11;
  if (this->has_optional_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->optional_msg_, output);
  }

  // repeated int32 repeated_int32 = 21;
  if (this->repeated_int32_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(21, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_repeated_int32_cached_byte_size_);
  }
  for (int i = 0; i < this->repeated_int32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->repeated_int32(i), output);
  }

  // repeated int64 repeated_int64 = 22;
  if (this->repeated_int64_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(22, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_repeated_int64_cached_byte_size_);
  }
  for (int i = 0; i < this->repeated_int64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->repeated_int64(i), output);
  }

  // repeated uint32 repeated_uint32 = 23;
  if (this->repeated_uint32_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(23, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_repeated_uint32_cached_byte_size_);
  }
  for (int i = 0; i < this->repeated_uint32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->repeated_uint32(i), output);
  }

  // repeated uint64 repeated_uint64 = 24;
  if (this->repeated_uint64_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(24, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_repeated_uint64_cached_byte_size_);
  }
  for (int i = 0; i < this->repeated_uint64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->repeated_uint64(i), output);
  }

  // repeated bool repeated_bool = 25;
  if (this->repeated_bool_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(25, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_repeated_bool_cached_byte_size_);
  }
  for (int i = 0; i < this->repeated_bool_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBoolNoTag(
      this->repeated_bool(i), output);
  }

  // repeated double repeated_double = 26;
  if (this->repeated_double_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(26, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_repeated_double_cached_byte_size_);
  }
  for (int i = 0; i < this->repeated_double_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->repeated_double(i), output);
  }

  // repeated float repeated_float = 27;
  if (this->repeated_float_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(27, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_repeated_float_cached_byte_size_);
  }
  for (int i = 0; i < this->repeated_float_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->repeated_float(i), output);
  }

  // repeated string repeated_string = 28;
  for (int i = 0; i < this->repeated_string_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->repeated_string(i).data(), this->repeated_string(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "A.B.C.TestMessage.repeated_string");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->repeated_string(i), output);
  }

  // repeated bytes repeated_bytes = 29;
  for (int i = 0; i < this->repeated_bytes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      29, this->repeated_bytes(i), output);
  }

  // repeated .A.B.C.TestEnum repeated_enum = 30;
  if (this->repeated_enum_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      30,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_repeated_enum_cached_byte_size_);
  }
  for (int i = 0; i < this->repeated_enum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->repeated_enum(i), output);
  }

  // repeated .A.B.C.TestMessage repeated_msg = 31;
  for (unsigned int i = 0, n = this->repeated_msg_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->repeated_msg(i), output);
  }

  // optional int32 oneof_int32 = 41;
  if (has_oneof_int32()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->oneof_int32(), output);
  }

  // optional int64 oneof_int64 = 42;
  if (has_oneof_int64()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(42, this->oneof_int64(), output);
  }

  // optional uint32 oneof_uint32 = 43;
  if (has_oneof_uint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->oneof_uint32(), output);
  }

  // optional uint64 oneof_uint64 = 44;
  if (has_oneof_uint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(44, this->oneof_uint64(), output);
  }

  // optional bool oneof_bool = 45;
  if (has_oneof_bool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(45, this->oneof_bool(), output);
  }

  // optional double oneof_double = 46;
  if (has_oneof_double()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(46, this->oneof_double(), output);
  }

  // optional float oneof_float = 47;
  if (has_oneof_float()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(47, this->oneof_float(), output);
  }

  // optional string oneof_string = 48;
  if (has_oneof_string()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->oneof_string().data(), this->oneof_string().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "A.B.C.TestMessage.oneof_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      48, this->oneof_string(), output);
  }

  // optional bytes oneof_bytes = 49;
  if (has_oneof_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      49, this->oneof_bytes(), output);
  }

  // optional .A.B.C.TestEnum oneof_enum = 50;
  if (has_oneof_enum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      50, this->oneof_enum(), output);
  }

  // optional .A.B.C.TestMessage oneof_msg = 51;
  if (has_oneof_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, *my_oneof_.oneof_msg_, output);
  }

  // map<int32, string> map_int32_string = 61;
  if (!this->map_int32_string().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapInt32StringEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->map_int32_string().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map_int32_string().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->map_int32_string().begin();
          it != this->map_int32_string().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMessage_MapInt32StringEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_int32_string_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            61, *entry, output);
        Utf8Check::Check(items[i].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMessage_MapInt32StringEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->map_int32_string().begin();
          it != this->map_int32_string().end(); ++it) {
        entry.reset(map_int32_string_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            61, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<int64, string> map_int64_string = 62;
  if (!this->map_int64_string().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapInt64StringEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->map_int64_string().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map_int64_string().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_iterator
          it = this->map_int64_string().begin();
          it != this->map_int64_string().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMessage_MapInt64StringEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_int64_string_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            62, *entry, output);
        Utf8Check::Check(items[i].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMessage_MapInt64StringEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_iterator
          it = this->map_int64_string().begin();
          it != this->map_int64_string().end(); ++it) {
        entry.reset(map_int64_string_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            62, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<uint32, string> map_uint32_string = 63;
  if (!this->map_uint32_string().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapUint32StringEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->map_uint32_string().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map_uint32_string().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_iterator
          it = this->map_uint32_string().begin();
          it != this->map_uint32_string().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMessage_MapUint32StringEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_uint32_string_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            63, *entry, output);
        Utf8Check::Check(items[i].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMessage_MapUint32StringEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_iterator
          it = this->map_uint32_string().begin();
          it != this->map_uint32_string().end(); ++it) {
        entry.reset(map_uint32_string_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            63, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<uint64, string> map_uint64_string = 64;
  if (!this->map_uint64_string().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapUint64StringEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->map_uint64_string().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map_uint64_string().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::std::string >::const_iterator
          it = this->map_uint64_string().begin();
          it != this->map_uint64_string().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMessage_MapUint64StringEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_uint64_string_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            64, *entry, output);
        Utf8Check::Check(items[i].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMessage_MapUint64StringEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::std::string >::const_iterator
          it = this->map_uint64_string().begin();
          it != this->map_uint64_string().end(); ++it) {
        entry.reset(map_uint64_string_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            64, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<bool, string> map_bool_string = 65;
  if (!this->map_bool_string().empty()) {
    typedef ::google::protobuf::Map< bool, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< bool, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapBoolStringEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->map_bool_string().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map_bool_string().size()]);
      typedef ::google::protobuf::Map< bool, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< bool, ::std::string >::const_iterator
          it = this->map_bool_string().begin();
          it != this->map_bool_string().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMessage_MapBoolStringEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_bool_string_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            65, *entry, output);
        Utf8Check::Check(items[i].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMessage_MapBoolStringEntry> entry;
      for (::google::protobuf::Map< bool, ::std::string >::const_iterator
          it = this->map_bool_string().begin();
          it != this->map_bool_string().end(); ++it) {
        entry.reset(map_bool_string_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            65, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> map_string_string = 66;
  if (!this->map_string_string().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapStringStringEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapStringStringEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->map_string_string().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map_string_string().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->map_string_string().begin();
          it != this->map_string_string().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMessage_MapStringStringEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_string_string_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            66, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMessage_MapStringStringEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->map_string_string().begin();
          it != this->map_string_string().end(); ++it) {
        entry.reset(map_string_string_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            66, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .A.B.C.TestMessage> map_string_msg = 67;
  if (!this->map_string_msg().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::A::B::C::TestMessage >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapStringMsgEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->map_string_msg().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map_string_msg().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::A::B::C::TestMessage >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::A::B::C::TestMessage >::const_iterator
          it = this->map_string_msg().begin();
          it != this->map_string_msg().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMessage_MapStringMsgEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_string_msg_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            67, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMessage_MapStringMsgEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::A::B::C::TestMessage >::const_iterator
          it = this->map_string_msg().begin();
          it != this->map_string_msg().end(); ++it) {
        entry.reset(map_string_msg_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            67, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .A.B.C.TestEnum> map_string_enum = 68;
  if (!this->map_string_enum().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::A::B::C::TestEnum >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapStringEnumEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->map_string_enum().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map_string_enum().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::A::B::C::TestEnum >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::A::B::C::TestEnum >::const_iterator
          it = this->map_string_enum().begin();
          it != this->map_string_enum().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMessage_MapStringEnumEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_string_enum_.NewEnumEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            68, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMessage_MapStringEnumEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::A::B::C::TestEnum >::const_iterator
          it = this->map_string_enum().begin();
          it != this->map_string_enum().end(); ++it) {
        entry.reset(map_string_enum_.NewEnumEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            68, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, int32> map_string_int32 = 69;
  if (!this->map_string_int32().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapStringInt32Entry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->map_string_int32().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map_string_int32().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->map_string_int32().begin();
          it != this->map_string_int32().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMessage_MapStringInt32Entry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_string_int32_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            69, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMessage_MapStringInt32Entry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->map_string_int32().begin();
          it != this->map_string_int32().end(); ++it) {
        entry.reset(map_string_int32_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            69, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, bool> map_string_bool = 70;
  if (!this->map_string_bool().empty()) {
    typedef ::google::protobuf::Map< ::std::string, bool >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapStringBoolEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->map_string_bool().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map_string_bool().size()]);
      typedef ::google::protobuf::Map< ::std::string, bool >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, bool >::const_iterator
          it = this->map_string_bool().begin();
          it != this->map_string_bool().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMessage_MapStringBoolEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_string_bool_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            70, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMessage_MapStringBoolEntry> entry;
      for (::google::protobuf::Map< ::std::string, bool >::const_iterator
          it = this->map_string_bool().begin();
          it != this->map_string_bool().end(); ++it) {
        entry.reset(map_string_bool_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            70, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional .A.B.C.TestMessage.NestedMessage nested_message = 80;
  if (this->has_nested_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      80, *this->nested_message_, output);
  }

  // @@protoc_insertion_point(serialize_end:A.B.C.TestMessage)
}

::google::protobuf::uint8* TestMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:A.B.C.TestMessage)
  // optional int32 optional_int32 = 1;
  if (this->optional_int32() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->optional_int32(), target);
  }

  // optional int64 optional_int64 = 2;
  if (this->optional_int64() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->optional_int64(), target);
  }

  // optional uint32 optional_uint32 = 3;
  if (this->optional_uint32() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->optional_uint32(), target);
  }

  // optional uint64 optional_uint64 = 4;
  if (this->optional_uint64() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->optional_uint64(), target);
  }

  // optional bool optional_bool = 5;
  if (this->optional_bool() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->optional_bool(), target);
  }

  // optional double optional_double = 6;
  if (this->optional_double() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->optional_double(), target);
  }

  // optional float optional_float = 7;
  if (this->optional_float() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->optional_float(), target);
  }

  // optional string optional_string = 8;
  if (this->optional_string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->optional_string().data(), this->optional_string().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "A.B.C.TestMessage.optional_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->optional_string(), target);
  }

  // optional bytes optional_bytes = 9;
  if (this->optional_bytes().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->optional_bytes(), target);
  }

  // optional .A.B.C.TestEnum optional_enum = 10;
  if (this->optional_enum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->optional_enum(), target);
  }

  // optional .A.B.C.TestMessage optional_msg = 11;
  if (this->has_optional_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->optional_msg_, false, target);
  }

  // repeated int32 repeated_int32 = 21;
  if (this->repeated_int32_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      21,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _repeated_int32_cached_byte_size_, target);
  }
  for (int i = 0; i < this->repeated_int32_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->repeated_int32(i), target);
  }

  // repeated int64 repeated_int64 = 22;
  if (this->repeated_int64_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      22,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _repeated_int64_cached_byte_size_, target);
  }
  for (int i = 0; i < this->repeated_int64_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->repeated_int64(i), target);
  }

  // repeated uint32 repeated_uint32 = 23;
  if (this->repeated_uint32_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      23,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _repeated_uint32_cached_byte_size_, target);
  }
  for (int i = 0; i < this->repeated_uint32_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->repeated_uint32(i), target);
  }

  // repeated uint64 repeated_uint64 = 24;
  if (this->repeated_uint64_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      24,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _repeated_uint64_cached_byte_size_, target);
  }
  for (int i = 0; i < this->repeated_uint64_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->repeated_uint64(i), target);
  }

  // repeated bool repeated_bool = 25;
  if (this->repeated_bool_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      25,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _repeated_bool_cached_byte_size_, target);
  }
  for (int i = 0; i < this->repeated_bool_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->repeated_bool(i), target);
  }

  // repeated double repeated_double = 26;
  if (this->repeated_double_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      26,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _repeated_double_cached_byte_size_, target);
  }
  for (int i = 0; i < this->repeated_double_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->repeated_double(i), target);
  }

  // repeated float repeated_float = 27;
  if (this->repeated_float_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      27,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _repeated_float_cached_byte_size_, target);
  }
  for (int i = 0; i < this->repeated_float_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->repeated_float(i), target);
  }

  // repeated string repeated_string = 28;
  for (int i = 0; i < this->repeated_string_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->repeated_string(i).data(), this->repeated_string(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "A.B.C.TestMessage.repeated_string");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(28, this->repeated_string(i), target);
  }

  // repeated bytes repeated_bytes = 29;
  for (int i = 0; i < this->repeated_bytes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(29, this->repeated_bytes(i), target);
  }

  // repeated .A.B.C.TestEnum repeated_enum = 30;
  if (this->repeated_enum_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      30,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _repeated_enum_cached_byte_size_, target);
  }
  for (int i = 0; i < this->repeated_enum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->repeated_enum(i), target);
  }

  // repeated .A.B.C.TestMessage repeated_msg = 31;
  for (unsigned int i = 0, n = this->repeated_msg_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        31, this->repeated_msg(i), false, target);
  }

  // optional int32 oneof_int32 = 41;
  if (has_oneof_int32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->oneof_int32(), target);
  }

  // optional int64 oneof_int64 = 42;
  if (has_oneof_int64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(42, this->oneof_int64(), target);
  }

  // optional uint32 oneof_uint32 = 43;
  if (has_oneof_uint32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->oneof_uint32(), target);
  }

  // optional uint64 oneof_uint64 = 44;
  if (has_oneof_uint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(44, this->oneof_uint64(), target);
  }

  // optional bool oneof_bool = 45;
  if (has_oneof_bool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(45, this->oneof_bool(), target);
  }

  // optional double oneof_double = 46;
  if (has_oneof_double()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(46, this->oneof_double(), target);
  }

  // optional float oneof_float = 47;
  if (has_oneof_float()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(47, this->oneof_float(), target);
  }

  // optional string oneof_string = 48;
  if (has_oneof_string()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->oneof_string().data(), this->oneof_string().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "A.B.C.TestMessage.oneof_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        48, this->oneof_string(), target);
  }

  // optional bytes oneof_bytes = 49;
  if (has_oneof_bytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        49, this->oneof_bytes(), target);
  }

  // optional .A.B.C.TestEnum oneof_enum = 50;
  if (has_oneof_enum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      50, this->oneof_enum(), target);
  }

  // optional .A.B.C.TestMessage oneof_msg = 51;
  if (has_oneof_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        51, *my_oneof_.oneof_msg_, false, target);
  }

  // map<int32, string> map_int32_string = 61;
  if (!this->map_int32_string().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapInt32StringEntry.value");
      }
    };

    if (deterministic &&
        this->map_int32_string().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map_int32_string().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->map_int32_string().begin();
          it != this->map_int32_string().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMessage_MapInt32StringEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_int32_string_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       61, *entry, deterministic, target);
;
        Utf8Check::Check(items[i].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMessage_MapInt32StringEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->map_int32_string().begin();
          it != this->map_int32_string().end(); ++it) {
        entry.reset(map_int32_string_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       61, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<int64, string> map_int64_string = 62;
  if (!this->map_int64_string().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapInt64StringEntry.value");
      }
    };

    if (deterministic &&
        this->map_int64_string().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map_int64_string().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_iterator
          it = this->map_int64_string().begin();
          it != this->map_int64_string().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMessage_MapInt64StringEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_int64_string_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       62, *entry, deterministic, target);
;
        Utf8Check::Check(items[i].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMessage_MapInt64StringEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_iterator
          it = this->map_int64_string().begin();
          it != this->map_int64_string().end(); ++it) {
        entry.reset(map_int64_string_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       62, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<uint32, string> map_uint32_string = 63;
  if (!this->map_uint32_string().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapUint32StringEntry.value");
      }
    };

    if (deterministic &&
        this->map_uint32_string().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map_uint32_string().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_iterator
          it = this->map_uint32_string().begin();
          it != this->map_uint32_string().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMessage_MapUint32StringEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_uint32_string_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       63, *entry, deterministic, target);
;
        Utf8Check::Check(items[i].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMessage_MapUint32StringEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_iterator
          it = this->map_uint32_string().begin();
          it != this->map_uint32_string().end(); ++it) {
        entry.reset(map_uint32_string_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       63, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<uint64, string> map_uint64_string = 64;
  if (!this->map_uint64_string().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapUint64StringEntry.value");
      }
    };

    if (deterministic &&
        this->map_uint64_string().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map_uint64_string().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::std::string >::const_iterator
          it = this->map_uint64_string().begin();
          it != this->map_uint64_string().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMessage_MapUint64StringEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_uint64_string_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       64, *entry, deterministic, target);
;
        Utf8Check::Check(items[i].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMessage_MapUint64StringEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::std::string >::const_iterator
          it = this->map_uint64_string().begin();
          it != this->map_uint64_string().end(); ++it) {
        entry.reset(map_uint64_string_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       64, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<bool, string> map_bool_string = 65;
  if (!this->map_bool_string().empty()) {
    typedef ::google::protobuf::Map< bool, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< bool, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapBoolStringEntry.value");
      }
    };

    if (deterministic &&
        this->map_bool_string().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map_bool_string().size()]);
      typedef ::google::protobuf::Map< bool, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< bool, ::std::string >::const_iterator
          it = this->map_bool_string().begin();
          it != this->map_bool_string().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMessage_MapBoolStringEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_bool_string_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       65, *entry, deterministic, target);
;
        Utf8Check::Check(items[i].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMessage_MapBoolStringEntry> entry;
      for (::google::protobuf::Map< bool, ::std::string >::const_iterator
          it = this->map_bool_string().begin();
          it != this->map_bool_string().end(); ++it) {
        entry.reset(map_bool_string_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       65, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> map_string_string = 66;
  if (!this->map_string_string().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapStringStringEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapStringStringEntry.value");
      }
    };

    if (deterministic &&
        this->map_string_string().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map_string_string().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->map_string_string().begin();
          it != this->map_string_string().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMessage_MapStringStringEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_string_string_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       66, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMessage_MapStringStringEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->map_string_string().begin();
          it != this->map_string_string().end(); ++it) {
        entry.reset(map_string_string_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       66, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .A.B.C.TestMessage> map_string_msg = 67;
  if (!this->map_string_msg().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::A::B::C::TestMessage >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapStringMsgEntry.key");
      }
    };

    if (deterministic &&
        this->map_string_msg().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map_string_msg().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::A::B::C::TestMessage >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::A::B::C::TestMessage >::const_iterator
          it = this->map_string_msg().begin();
          it != this->map_string_msg().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMessage_MapStringMsgEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_string_msg_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       67, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMessage_MapStringMsgEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::A::B::C::TestMessage >::const_iterator
          it = this->map_string_msg().begin();
          it != this->map_string_msg().end(); ++it) {
        entry.reset(map_string_msg_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       67, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .A.B.C.TestEnum> map_string_enum = 68;
  if (!this->map_string_enum().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::A::B::C::TestEnum >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapStringEnumEntry.key");
      }
    };

    if (deterministic &&
        this->map_string_enum().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map_string_enum().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::A::B::C::TestEnum >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::A::B::C::TestEnum >::const_iterator
          it = this->map_string_enum().begin();
          it != this->map_string_enum().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMessage_MapStringEnumEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_string_enum_.NewEnumEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       68, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMessage_MapStringEnumEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::A::B::C::TestEnum >::const_iterator
          it = this->map_string_enum().begin();
          it != this->map_string_enum().end(); ++it) {
        entry.reset(map_string_enum_.NewEnumEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       68, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, int32> map_string_int32 = 69;
  if (!this->map_string_int32().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapStringInt32Entry.key");
      }
    };

    if (deterministic &&
        this->map_string_int32().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map_string_int32().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->map_string_int32().begin();
          it != this->map_string_int32().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMessage_MapStringInt32Entry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_string_int32_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       69, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMessage_MapStringInt32Entry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->map_string_int32().begin();
          it != this->map_string_int32().end(); ++it) {
        entry.reset(map_string_int32_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       69, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, bool> map_string_bool = 70;
  if (!this->map_string_bool().empty()) {
    typedef ::google::protobuf::Map< ::std::string, bool >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapStringBoolEntry.key");
      }
    };

    if (deterministic &&
        this->map_string_bool().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map_string_bool().size()]);
      typedef ::google::protobuf::Map< ::std::string, bool >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, bool >::const_iterator
          it = this->map_string_bool().begin();
          it != this->map_string_bool().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMessage_MapStringBoolEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_string_bool_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       70, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMessage_MapStringBoolEntry> entry;
      for (::google::protobuf::Map< ::std::string, bool >::const_iterator
          it = this->map_string_bool().begin();
          it != this->map_string_bool().end(); ++it) {
        entry.reset(map_string_bool_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       70, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional .A.B.C.TestMessage.NestedMessage nested_message = 80;
  if (this->has_nested_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        80, *this->nested_message_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:A.B.C.TestMessage)
  return target;
}

int TestMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:A.B.C.TestMessage)
  int total_size = 0;

  // optional int32 optional_int32 = 1;
  if (this->optional_int32() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->optional_int32());
  }

  // optional int64 optional_int64 = 2;
  if (this->optional_int64() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->optional_int64());
  }

  // optional uint32 optional_uint32 = 3;
  if (this->optional_uint32() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->optional_uint32());
  }

  // optional uint64 optional_uint64 = 4;
  if (this->optional_uint64() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->optional_uint64());
  }

  // optional bool optional_bool = 5;
  if (this->optional_bool() != 0) {
    total_size += 1 + 1;
  }

  // optional double optional_double = 6;
  if (this->optional_double() != 0) {
    total_size += 1 + 8;
  }

  // optional float optional_float = 7;
  if (this->optional_float() != 0) {
    total_size += 1 + 4;
  }

  // optional string optional_string = 8;
  if (this->optional_string().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->optional_string());
  }

  // optional bytes optional_bytes = 9;
  if (this->optional_bytes().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->optional_bytes());
  }

  // optional .A.B.C.TestEnum optional_enum = 10;
  if (this->optional_enum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->optional_enum());
  }

  // optional .A.B.C.TestMessage optional_msg = 11;
  if (this->has_optional_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->optional_msg_);
  }

  // optional .A.B.C.TestMessage.NestedMessage nested_message = 80;
  if (this->has_nested_message()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->nested_message_);
  }

  // repeated int32 repeated_int32 = 21;
  {
    int data_size = 0;
    for (int i = 0; i < this->repeated_int32_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->repeated_int32(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_int32_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int64 repeated_int64 = 22;
  {
    int data_size = 0;
    for (int i = 0; i < this->repeated_int64_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->repeated_int64(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_int64_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 repeated_uint32 = 23;
  {
    int data_size = 0;
    for (int i = 0; i < this->repeated_uint32_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->repeated_uint32(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_uint32_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint64 repeated_uint64 = 24;
  {
    int data_size = 0;
    for (int i = 0; i < this->repeated_uint64_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->repeated_uint64(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_uint64_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bool repeated_bool = 25;
  {
    int data_size = 0;
    data_size = 1 * this->repeated_bool_size();
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_bool_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double repeated_double = 26;
  {
    int data_size = 0;
    data_size = 8 * this->repeated_double_size();
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_double_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float repeated_float = 27;
  {
    int data_size = 0;
    data_size = 4 * this->repeated_float_size();
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_float_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string repeated_string = 28;
  total_size += 2 * this->repeated_string_size();
  for (int i = 0; i < this->repeated_string_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->repeated_string(i));
  }

  // repeated bytes repeated_bytes = 29;
  total_size += 2 * this->repeated_bytes_size();
  for (int i = 0; i < this->repeated_bytes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->repeated_bytes(i));
  }

  // repeated .A.B.C.TestEnum repeated_enum = 30;
  {
    int data_size = 0;
    for (int i = 0; i < this->repeated_enum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->repeated_enum(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_enum_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .A.B.C.TestMessage repeated_msg = 31;
  total_size += 2 * this->repeated_msg_size();
  for (int i = 0; i < this->repeated_msg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->repeated_msg(i));
  }

  // map<int32, string> map_int32_string = 61;
  total_size += 2 * this->map_int32_string_size();
  {
    ::google::protobuf::scoped_ptr<TestMessage_MapInt32StringEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
        it = this->map_int32_string().begin();
        it != this->map_int32_string().end(); ++it) {
      entry.reset(map_int32_string_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<int64, string> map_int64_string = 62;
  total_size += 2 * this->map_int64_string_size();
  {
    ::google::protobuf::scoped_ptr<TestMessage_MapInt64StringEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_iterator
        it = this->map_int64_string().begin();
        it != this->map_int64_string().end(); ++it) {
      entry.reset(map_int64_string_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<uint32, string> map_uint32_string = 63;
  total_size += 2 * this->map_uint32_string_size();
  {
    ::google::protobuf::scoped_ptr<TestMessage_MapUint32StringEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_iterator
        it = this->map_uint32_string().begin();
        it != this->map_uint32_string().end(); ++it) {
      entry.reset(map_uint32_string_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<uint64, string> map_uint64_string = 64;
  total_size += 2 * this->map_uint64_string_size();
  {
    ::google::protobuf::scoped_ptr<TestMessage_MapUint64StringEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint64, ::std::string >::const_iterator
        it = this->map_uint64_string().begin();
        it != this->map_uint64_string().end(); ++it) {
      entry.reset(map_uint64_string_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<bool, string> map_bool_string = 65;
  total_size += 2 * this->map_bool_string_size();
  {
    ::google::protobuf::scoped_ptr<TestMessage_MapBoolStringEntry> entry;
    for (::google::protobuf::Map< bool, ::std::string >::const_iterator
        it = this->map_bool_string().begin();
        it != this->map_bool_string().end(); ++it) {
      entry.reset(map_bool_string_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> map_string_string = 66;
  total_size += 2 * this->map_string_string_size();
  {
    ::google::protobuf::scoped_ptr<TestMessage_MapStringStringEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->map_string_string().begin();
        it != this->map_string_string().end(); ++it) {
      entry.reset(map_string_string_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .A.B.C.TestMessage> map_string_msg = 67;
  total_size += 2 * this->map_string_msg_size();
  {
    ::google::protobuf::scoped_ptr<TestMessage_MapStringMsgEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::A::B::C::TestMessage >::const_iterator
        it = this->map_string_msg().begin();
        it != this->map_string_msg().end(); ++it) {
      entry.reset(map_string_msg_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .A.B.C.TestEnum> map_string_enum = 68;
  total_size += 2 * this->map_string_enum_size();
  {
    ::google::protobuf::scoped_ptr<TestMessage_MapStringEnumEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::A::B::C::TestEnum >::const_iterator
        it = this->map_string_enum().begin();
        it != this->map_string_enum().end(); ++it) {
      entry.reset(map_string_enum_.NewEnumEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, int32> map_string_int32 = 69;
  total_size += 2 * this->map_string_int32_size();
  {
    ::google::protobuf::scoped_ptr<TestMessage_MapStringInt32Entry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
        it = this->map_string_int32().begin();
        it != this->map_string_int32().end(); ++it) {
      entry.reset(map_string_int32_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, bool> map_string_bool = 70;
  total_size += 2 * this->map_string_bool_size();
  {
    ::google::protobuf::scoped_ptr<TestMessage_MapStringBoolEntry> entry;
    for (::google::protobuf::Map< ::std::string, bool >::const_iterator
        it = this->map_string_bool().begin();
        it != this->map_string_bool().end(); ++it) {
      entry.reset(map_string_bool_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  switch (my_oneof_case()) {
    // optional int32 oneof_int32 = 41;
    case kOneofInt32: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oneof_int32());
      break;
    }
    // optional int64 oneof_int64 = 42;
    case kOneofInt64: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->oneof_int64());
      break;
    }
    // optional uint32 oneof_uint32 = 43;
    case kOneofUint32: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oneof_uint32());
      break;
    }
    // optional uint64 oneof_uint64 = 44;
    case kOneofUint64: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->oneof_uint64());
      break;
    }
    // optional bool oneof_bool = 45;
    case kOneofBool: {
      total_size += 2 + 1;
      break;
    }
    // optional double oneof_double = 46;
    case kOneofDouble: {
      total_size += 2 + 8;
      break;
    }
    // optional float oneof_float = 47;
    case kOneofFloat: {
      total_size += 2 + 4;
      break;
    }
    // optional string oneof_string = 48;
    case kOneofString: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oneof_string());
      break;
    }
    // optional bytes oneof_bytes = 49;
    case kOneofBytes: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->oneof_bytes());
      break;
    }
    // optional .A.B.C.TestEnum oneof_enum = 50;
    case kOneofEnum: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->oneof_enum());
      break;
    }
    // optional .A.B.C.TestMessage oneof_msg = 51;
    case kOneofMsg: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *my_oneof_.oneof_msg_);
      break;
    }
    case MY_ONEOF_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:A.B.C.TestMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TestMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TestMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:A.B.C.TestMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:A.B.C.TestMessage)
    MergeFrom(*source);
  }
}

void TestMessage::MergeFrom(const TestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:A.B.C.TestMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  repeated_int32_.MergeFrom(from.repeated_int32_);
  repeated_int64_.MergeFrom(from.repeated_int64_);
  repeated_uint32_.MergeFrom(from.repeated_uint32_);
  repeated_uint64_.MergeFrom(from.repeated_uint64_);
  repeated_bool_.MergeFrom(from.repeated_bool_);
  repeated_double_.MergeFrom(from.repeated_double_);
  repeated_float_.MergeFrom(from.repeated_float_);
  repeated_string_.MergeFrom(from.repeated_string_);
  repeated_bytes_.MergeFrom(from.repeated_bytes_);
  repeated_enum_.MergeFrom(from.repeated_enum_);
  repeated_msg_.MergeFrom(from.repeated_msg_);
  map_int32_string_.MergeFrom(from.map_int32_string_);
  map_int64_string_.MergeFrom(from.map_int64_string_);
  map_uint32_string_.MergeFrom(from.map_uint32_string_);
  map_uint64_string_.MergeFrom(from.map_uint64_string_);
  map_bool_string_.MergeFrom(from.map_bool_string_);
  map_string_string_.MergeFrom(from.map_string_string_);
  map_string_msg_.MergeFrom(from.map_string_msg_);
  map_string_enum_.MergeFrom(from.map_string_enum_);
  map_string_int32_.MergeFrom(from.map_string_int32_);
  map_string_bool_.MergeFrom(from.map_string_bool_);
  switch (from.my_oneof_case()) {
    case kOneofInt32: {
      set_oneof_int32(from.oneof_int32());
      break;
    }
    case kOneofInt64: {
      set_oneof_int64(from.oneof_int64());
      break;
    }
    case kOneofUint32: {
      set_oneof_uint32(from.oneof_uint32());
      break;
    }
    case kOneofUint64: {
      set_oneof_uint64(from.oneof_uint64());
      break;
    }
    case kOneofBool: {
      set_oneof_bool(from.oneof_bool());
      break;
    }
    case kOneofDouble: {
      set_oneof_double(from.oneof_double());
      break;
    }
    case kOneofFloat: {
      set_oneof_float(from.oneof_float());
      break;
    }
    case kOneofString: {
      set_oneof_string(from.oneof_string());
      break;
    }
    case kOneofBytes: {
      set_oneof_bytes(from.oneof_bytes());
      break;
    }
    case kOneofEnum: {
      set_oneof_enum(from.oneof_enum());
      break;
    }
    case kOneofMsg: {
      mutable_oneof_msg()->::A::B::C::TestMessage::MergeFrom(from.oneof_msg());
      break;
    }
    case MY_ONEOF_NOT_SET: {
      break;
    }
  }
  if (from.optional_int32() != 0) {
    set_optional_int32(from.optional_int32());
  }
  if (from.optional_int64() != 0) {
    set_optional_int64(from.optional_int64());
  }
  if (from.optional_uint32() != 0) {
    set_optional_uint32(from.optional_uint32());
  }
  if (from.optional_uint64() != 0) {
    set_optional_uint64(from.optional_uint64());
  }
  if (from.optional_bool() != 0) {
    set_optional_bool(from.optional_bool());
  }
  if (from.optional_double() != 0) {
    set_optional_double(from.optional_double());
  }
  if (from.optional_float() != 0) {
    set_optional_float(from.optional_float());
  }
  if (from.optional_string().size() > 0) {

    optional_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.optional_string_);
  }
  if (from.optional_bytes().size() > 0) {

    optional_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.optional_bytes_);
  }
  if (from.optional_enum() != 0) {
    set_optional_enum(from.optional_enum());
  }
  if (from.has_optional_msg()) {
    mutable_optional_msg()->::A::B::C::TestMessage::MergeFrom(from.optional_msg());
  }
  if (from.has_nested_message()) {
    mutable_nested_message()->::A::B::C::TestMessage_NestedMessage::MergeFrom(from.nested_message());
  }
}

void TestMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:A.B.C.TestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessage::CopyFrom(const TestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:A.B.C.TestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessage::IsInitialized() const {

  return true;
}

void TestMessage::Swap(TestMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestMessage::InternalSwap(TestMessage* other) {
  std::swap(optional_int32_, other->optional_int32_);
  std::swap(optional_int64_, other->optional_int64_);
  std::swap(optional_uint32_, other->optional_uint32_);
  std::swap(optional_uint64_, other->optional_uint64_);
  std::swap(optional_bool_, other->optional_bool_);
  std::swap(optional_double_, other->optional_double_);
  std::swap(optional_float_, other->optional_float_);
  optional_string_.Swap(&other->optional_string_);
  optional_bytes_.Swap(&other->optional_bytes_);
  std::swap(optional_enum_, other->optional_enum_);
  std::swap(optional_msg_, other->optional_msg_);
  repeated_int32_.UnsafeArenaSwap(&other->repeated_int32_);
  repeated_int64_.UnsafeArenaSwap(&other->repeated_int64_);
  repeated_uint32_.UnsafeArenaSwap(&other->repeated_uint32_);
  repeated_uint64_.UnsafeArenaSwap(&other->repeated_uint64_);
  repeated_bool_.UnsafeArenaSwap(&other->repeated_bool_);
  repeated_double_.UnsafeArenaSwap(&other->repeated_double_);
  repeated_float_.UnsafeArenaSwap(&other->repeated_float_);
  repeated_string_.UnsafeArenaSwap(&other->repeated_string_);
  repeated_bytes_.UnsafeArenaSwap(&other->repeated_bytes_);
  repeated_enum_.UnsafeArenaSwap(&other->repeated_enum_);
  repeated_msg_.UnsafeArenaSwap(&other->repeated_msg_);
  map_int32_string_.Swap(&other->map_int32_string_);
  map_int64_string_.Swap(&other->map_int64_string_);
  map_uint32_string_.Swap(&other->map_uint32_string_);
  map_uint64_string_.Swap(&other->map_uint64_string_);
  map_bool_string_.Swap(&other->map_bool_string_);
  map_string_string_.Swap(&other->map_string_string_);
  map_string_msg_.Swap(&other->map_string_msg_);
  map_string_enum_.Swap(&other->map_string_enum_);
  map_string_int32_.Swap(&other->map_string_int32_);
  map_string_bool_.Swap(&other->map_string_bool_);
  std::swap(nested_message_, other->nested_message_);
  std::swap(my_oneof_, other->my_oneof_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMessage_descriptor_;
  metadata.reflection = TestMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestMessage_NestedMessage

// optional int32 foo = 1;
void TestMessage_NestedMessage::clear_foo() {
  foo_ = 0;
}
 ::google::protobuf::int32 TestMessage_NestedMessage::foo() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.NestedMessage.foo)
  return foo_;
}
 void TestMessage_NestedMessage::set_foo(::google::protobuf::int32 value) {
  
  foo_ = value;
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.NestedMessage.foo)
}

// -------------------------------------------------------------------

// TestMessage

// optional int32 optional_int32 = 1;
void TestMessage::clear_optional_int32() {
  optional_int32_ = 0;
}
 ::google::protobuf::int32 TestMessage::optional_int32() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.optional_int32)
  return optional_int32_;
}
 void TestMessage::set_optional_int32(::google::protobuf::int32 value) {
  
  optional_int32_ = value;
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.optional_int32)
}

// optional int64 optional_int64 = 2;
void TestMessage::clear_optional_int64() {
  optional_int64_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 TestMessage::optional_int64() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.optional_int64)
  return optional_int64_;
}
 void TestMessage::set_optional_int64(::google::protobuf::int64 value) {
  
  optional_int64_ = value;
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.optional_int64)
}

// optional uint32 optional_uint32 = 3;
void TestMessage::clear_optional_uint32() {
  optional_uint32_ = 0u;
}
 ::google::protobuf::uint32 TestMessage::optional_uint32() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.optional_uint32)
  return optional_uint32_;
}
 void TestMessage::set_optional_uint32(::google::protobuf::uint32 value) {
  
  optional_uint32_ = value;
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.optional_uint32)
}

// optional uint64 optional_uint64 = 4;
void TestMessage::clear_optional_uint64() {
  optional_uint64_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 TestMessage::optional_uint64() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.optional_uint64)
  return optional_uint64_;
}
 void TestMessage::set_optional_uint64(::google::protobuf::uint64 value) {
  
  optional_uint64_ = value;
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.optional_uint64)
}

// optional bool optional_bool = 5;
void TestMessage::clear_optional_bool() {
  optional_bool_ = false;
}
 bool TestMessage::optional_bool() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.optional_bool)
  return optional_bool_;
}
 void TestMessage::set_optional_bool(bool value) {
  
  optional_bool_ = value;
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.optional_bool)
}

// optional double optional_double = 6;
void TestMessage::clear_optional_double() {
  optional_double_ = 0;
}
 double TestMessage::optional_double() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.optional_double)
  return optional_double_;
}
 void TestMessage::set_optional_double(double value) {
  
  optional_double_ = value;
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.optional_double)
}

// optional float optional_float = 7;
void TestMessage::clear_optional_float() {
  optional_float_ = 0;
}
 float TestMessage::optional_float() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.optional_float)
  return optional_float_;
}
 void TestMessage::set_optional_float(float value) {
  
  optional_float_ = value;
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.optional_float)
}

// optional string optional_string = 8;
void TestMessage::clear_optional_string() {
  optional_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TestMessage::optional_string() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.optional_string)
  return optional_string_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TestMessage::set_optional_string(const ::std::string& value) {
  
  optional_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.optional_string)
}
 void TestMessage::set_optional_string(const char* value) {
  
  optional_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:A.B.C.TestMessage.optional_string)
}
 void TestMessage::set_optional_string(const char* value, size_t size) {
  
  optional_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:A.B.C.TestMessage.optional_string)
}
 ::std::string* TestMessage::mutable_optional_string() {
  
  // @@protoc_insertion_point(field_mutable:A.B.C.TestMessage.optional_string)
  return optional_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TestMessage::release_optional_string() {
  // @@protoc_insertion_point(field_release:A.B.C.TestMessage.optional_string)
  
  return optional_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TestMessage::set_allocated_optional_string(::std::string* optional_string) {
  if (optional_string != NULL) {
    
  } else {
    
  }
  optional_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), optional_string);
  // @@protoc_insertion_point(field_set_allocated:A.B.C.TestMessage.optional_string)
}

// optional bytes optional_bytes = 9;
void TestMessage::clear_optional_bytes() {
  optional_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TestMessage::optional_bytes() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.optional_bytes)
  return optional_bytes_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TestMessage::set_optional_bytes(const ::std::string& value) {
  
  optional_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.optional_bytes)
}
 void TestMessage::set_optional_bytes(const char* value) {
  
  optional_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:A.B.C.TestMessage.optional_bytes)
}
 void TestMessage::set_optional_bytes(const void* value, size_t size) {
  
  optional_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:A.B.C.TestMessage.optional_bytes)
}
 ::std::string* TestMessage::mutable_optional_bytes() {
  
  // @@protoc_insertion_point(field_mutable:A.B.C.TestMessage.optional_bytes)
  return optional_bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TestMessage::release_optional_bytes() {
  // @@protoc_insertion_point(field_release:A.B.C.TestMessage.optional_bytes)
  
  return optional_bytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TestMessage::set_allocated_optional_bytes(::std::string* optional_bytes) {
  if (optional_bytes != NULL) {
    
  } else {
    
  }
  optional_bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), optional_bytes);
  // @@protoc_insertion_point(field_set_allocated:A.B.C.TestMessage.optional_bytes)
}

// optional .A.B.C.TestEnum optional_enum = 10;
void TestMessage::clear_optional_enum() {
  optional_enum_ = 0;
}
 ::A::B::C::TestEnum TestMessage::optional_enum() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.optional_enum)
  return static_cast< ::A::B::C::TestEnum >(optional_enum_);
}
 void TestMessage::set_optional_enum(::A::B::C::TestEnum value) {
  
  optional_enum_ = value;
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.optional_enum)
}

// optional .A.B.C.TestMessage optional_msg = 11;
bool TestMessage::has_optional_msg() const {
  return !_is_default_instance_ && optional_msg_ != NULL;
}
void TestMessage::clear_optional_msg() {
  if (GetArenaNoVirtual() == NULL && optional_msg_ != NULL) delete optional_msg_;
  optional_msg_ = NULL;
}
const ::A::B::C::TestMessage& TestMessage::optional_msg() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.optional_msg)
  return optional_msg_ != NULL ? *optional_msg_ : *default_instance_->optional_msg_;
}
::A::B::C::TestMessage* TestMessage::mutable_optional_msg() {
  
  if (optional_msg_ == NULL) {
    optional_msg_ = new ::A::B::C::TestMessage;
  }
  // @@protoc_insertion_point(field_mutable:A.B.C.TestMessage.optional_msg)
  return optional_msg_;
}
::A::B::C::TestMessage* TestMessage::release_optional_msg() {
  // @@protoc_insertion_point(field_release:A.B.C.TestMessage.optional_msg)
  
  ::A::B::C::TestMessage* temp = optional_msg_;
  optional_msg_ = NULL;
  return temp;
}
void TestMessage::set_allocated_optional_msg(::A::B::C::TestMessage* optional_msg) {
  delete optional_msg_;
  optional_msg_ = optional_msg;
  if (optional_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:A.B.C.TestMessage.optional_msg)
}

// repeated int32 repeated_int32 = 21;
int TestMessage::repeated_int32_size() const {
  return repeated_int32_.size();
}
void TestMessage::clear_repeated_int32() {
  repeated_int32_.Clear();
}
 ::google::protobuf::int32 TestMessage::repeated_int32(int index) const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.repeated_int32)
  return repeated_int32_.Get(index);
}
 void TestMessage::set_repeated_int32(int index, ::google::protobuf::int32 value) {
  repeated_int32_.Set(index, value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.repeated_int32)
}
 void TestMessage::add_repeated_int32(::google::protobuf::int32 value) {
  repeated_int32_.Add(value);
  // @@protoc_insertion_point(field_add:A.B.C.TestMessage.repeated_int32)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TestMessage::repeated_int32() const {
  // @@protoc_insertion_point(field_list:A.B.C.TestMessage.repeated_int32)
  return repeated_int32_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TestMessage::mutable_repeated_int32() {
  // @@protoc_insertion_point(field_mutable_list:A.B.C.TestMessage.repeated_int32)
  return &repeated_int32_;
}

// repeated int64 repeated_int64 = 22;
int TestMessage::repeated_int64_size() const {
  return repeated_int64_.size();
}
void TestMessage::clear_repeated_int64() {
  repeated_int64_.Clear();
}
 ::google::protobuf::int64 TestMessage::repeated_int64(int index) const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.repeated_int64)
  return repeated_int64_.Get(index);
}
 void TestMessage::set_repeated_int64(int index, ::google::protobuf::int64 value) {
  repeated_int64_.Set(index, value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.repeated_int64)
}
 void TestMessage::add_repeated_int64(::google::protobuf::int64 value) {
  repeated_int64_.Add(value);
  // @@protoc_insertion_point(field_add:A.B.C.TestMessage.repeated_int64)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TestMessage::repeated_int64() const {
  // @@protoc_insertion_point(field_list:A.B.C.TestMessage.repeated_int64)
  return repeated_int64_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TestMessage::mutable_repeated_int64() {
  // @@protoc_insertion_point(field_mutable_list:A.B.C.TestMessage.repeated_int64)
  return &repeated_int64_;
}

// repeated uint32 repeated_uint32 = 23;
int TestMessage::repeated_uint32_size() const {
  return repeated_uint32_.size();
}
void TestMessage::clear_repeated_uint32() {
  repeated_uint32_.Clear();
}
 ::google::protobuf::uint32 TestMessage::repeated_uint32(int index) const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.repeated_uint32)
  return repeated_uint32_.Get(index);
}
 void TestMessage::set_repeated_uint32(int index, ::google::protobuf::uint32 value) {
  repeated_uint32_.Set(index, value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.repeated_uint32)
}
 void TestMessage::add_repeated_uint32(::google::protobuf::uint32 value) {
  repeated_uint32_.Add(value);
  // @@protoc_insertion_point(field_add:A.B.C.TestMessage.repeated_uint32)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TestMessage::repeated_uint32() const {
  // @@protoc_insertion_point(field_list:A.B.C.TestMessage.repeated_uint32)
  return repeated_uint32_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TestMessage::mutable_repeated_uint32() {
  // @@protoc_insertion_point(field_mutable_list:A.B.C.TestMessage.repeated_uint32)
  return &repeated_uint32_;
}

// repeated uint64 repeated_uint64 = 24;
int TestMessage::repeated_uint64_size() const {
  return repeated_uint64_.size();
}
void TestMessage::clear_repeated_uint64() {
  repeated_uint64_.Clear();
}
 ::google::protobuf::uint64 TestMessage::repeated_uint64(int index) const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.repeated_uint64)
  return repeated_uint64_.Get(index);
}
 void TestMessage::set_repeated_uint64(int index, ::google::protobuf::uint64 value) {
  repeated_uint64_.Set(index, value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.repeated_uint64)
}
 void TestMessage::add_repeated_uint64(::google::protobuf::uint64 value) {
  repeated_uint64_.Add(value);
  // @@protoc_insertion_point(field_add:A.B.C.TestMessage.repeated_uint64)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TestMessage::repeated_uint64() const {
  // @@protoc_insertion_point(field_list:A.B.C.TestMessage.repeated_uint64)
  return repeated_uint64_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TestMessage::mutable_repeated_uint64() {
  // @@protoc_insertion_point(field_mutable_list:A.B.C.TestMessage.repeated_uint64)
  return &repeated_uint64_;
}

// repeated bool repeated_bool = 25;
int TestMessage::repeated_bool_size() const {
  return repeated_bool_.size();
}
void TestMessage::clear_repeated_bool() {
  repeated_bool_.Clear();
}
 bool TestMessage::repeated_bool(int index) const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.repeated_bool)
  return repeated_bool_.Get(index);
}
 void TestMessage::set_repeated_bool(int index, bool value) {
  repeated_bool_.Set(index, value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.repeated_bool)
}
 void TestMessage::add_repeated_bool(bool value) {
  repeated_bool_.Add(value);
  // @@protoc_insertion_point(field_add:A.B.C.TestMessage.repeated_bool)
}
 const ::google::protobuf::RepeatedField< bool >&
TestMessage::repeated_bool() const {
  // @@protoc_insertion_point(field_list:A.B.C.TestMessage.repeated_bool)
  return repeated_bool_;
}
 ::google::protobuf::RepeatedField< bool >*
TestMessage::mutable_repeated_bool() {
  // @@protoc_insertion_point(field_mutable_list:A.B.C.TestMessage.repeated_bool)
  return &repeated_bool_;
}

// repeated double repeated_double = 26;
int TestMessage::repeated_double_size() const {
  return repeated_double_.size();
}
void TestMessage::clear_repeated_double() {
  repeated_double_.Clear();
}
 double TestMessage::repeated_double(int index) const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.repeated_double)
  return repeated_double_.Get(index);
}
 void TestMessage::set_repeated_double(int index, double value) {
  repeated_double_.Set(index, value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.repeated_double)
}
 void TestMessage::add_repeated_double(double value) {
  repeated_double_.Add(value);
  // @@protoc_insertion_point(field_add:A.B.C.TestMessage.repeated_double)
}
 const ::google::protobuf::RepeatedField< double >&
TestMessage::repeated_double() const {
  // @@protoc_insertion_point(field_list:A.B.C.TestMessage.repeated_double)
  return repeated_double_;
}
 ::google::protobuf::RepeatedField< double >*
TestMessage::mutable_repeated_double() {
  // @@protoc_insertion_point(field_mutable_list:A.B.C.TestMessage.repeated_double)
  return &repeated_double_;
}

// repeated float repeated_float = 27;
int TestMessage::repeated_float_size() const {
  return repeated_float_.size();
}
void TestMessage::clear_repeated_float() {
  repeated_float_.Clear();
}
 float TestMessage::repeated_float(int index) const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.repeated_float)
  return repeated_float_.Get(index);
}
 void TestMessage::set_repeated_float(int index, float value) {
  repeated_float_.Set(index, value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.repeated_float)
}
 void TestMessage::add_repeated_float(float value) {
  repeated_float_.Add(value);
  // @@protoc_insertion_point(field_add:A.B.C.TestMessage.repeated_float)
}
 const ::google::protobuf::RepeatedField< float >&
TestMessage::repeated_float() const {
  // @@protoc_insertion_point(field_list:A.B.C.TestMessage.repeated_float)
  return repeated_float_;
}
 ::google::protobuf::RepeatedField< float >*
TestMessage::mutable_repeated_float() {
  // @@protoc_insertion_point(field_mutable_list:A.B.C.TestMessage.repeated_float)
  return &repeated_float_;
}

// repeated string repeated_string = 28;
int TestMessage::repeated_string_size() const {
  return repeated_string_.size();
}
void TestMessage::clear_repeated_string() {
  repeated_string_.Clear();
}
 const ::std::string& TestMessage::repeated_string(int index) const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.repeated_string)
  return repeated_string_.Get(index);
}
 ::std::string* TestMessage::mutable_repeated_string(int index) {
  // @@protoc_insertion_point(field_mutable:A.B.C.TestMessage.repeated_string)
  return repeated_string_.Mutable(index);
}
 void TestMessage::set_repeated_string(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.repeated_string)
  repeated_string_.Mutable(index)->assign(value);
}
 void TestMessage::set_repeated_string(int index, const char* value) {
  repeated_string_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:A.B.C.TestMessage.repeated_string)
}
 void TestMessage::set_repeated_string(int index, const char* value, size_t size) {
  repeated_string_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:A.B.C.TestMessage.repeated_string)
}
 ::std::string* TestMessage::add_repeated_string() {
  // @@protoc_insertion_point(field_add_mutable:A.B.C.TestMessage.repeated_string)
  return repeated_string_.Add();
}
 void TestMessage::add_repeated_string(const ::std::string& value) {
  repeated_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:A.B.C.TestMessage.repeated_string)
}
 void TestMessage::add_repeated_string(const char* value) {
  repeated_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:A.B.C.TestMessage.repeated_string)
}
 void TestMessage::add_repeated_string(const char* value, size_t size) {
  repeated_string_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:A.B.C.TestMessage.repeated_string)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TestMessage::repeated_string() const {
  // @@protoc_insertion_point(field_list:A.B.C.TestMessage.repeated_string)
  return repeated_string_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TestMessage::mutable_repeated_string() {
  // @@protoc_insertion_point(field_mutable_list:A.B.C.TestMessage.repeated_string)
  return &repeated_string_;
}

// repeated bytes repeated_bytes = 29;
int TestMessage::repeated_bytes_size() const {
  return repeated_bytes_.size();
}
void TestMessage::clear_repeated_bytes() {
  repeated_bytes_.Clear();
}
 const ::std::string& TestMessage::repeated_bytes(int index) const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.repeated_bytes)
  return repeated_bytes_.Get(index);
}
 ::std::string* TestMessage::mutable_repeated_bytes(int index) {
  // @@protoc_insertion_point(field_mutable:A.B.C.TestMessage.repeated_bytes)
  return repeated_bytes_.Mutable(index);
}
 void TestMessage::set_repeated_bytes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.repeated_bytes)
  repeated_bytes_.Mutable(index)->assign(value);
}
 void TestMessage::set_repeated_bytes(int index, const char* value) {
  repeated_bytes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:A.B.C.TestMessage.repeated_bytes)
}
 void TestMessage::set_repeated_bytes(int index, const void* value, size_t size) {
  repeated_bytes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:A.B.C.TestMessage.repeated_bytes)
}
 ::std::string* TestMessage::add_repeated_bytes() {
  // @@protoc_insertion_point(field_add_mutable:A.B.C.TestMessage.repeated_bytes)
  return repeated_bytes_.Add();
}
 void TestMessage::add_repeated_bytes(const ::std::string& value) {
  repeated_bytes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:A.B.C.TestMessage.repeated_bytes)
}
 void TestMessage::add_repeated_bytes(const char* value) {
  repeated_bytes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:A.B.C.TestMessage.repeated_bytes)
}
 void TestMessage::add_repeated_bytes(const void* value, size_t size) {
  repeated_bytes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:A.B.C.TestMessage.repeated_bytes)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TestMessage::repeated_bytes() const {
  // @@protoc_insertion_point(field_list:A.B.C.TestMessage.repeated_bytes)
  return repeated_bytes_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TestMessage::mutable_repeated_bytes() {
  // @@protoc_insertion_point(field_mutable_list:A.B.C.TestMessage.repeated_bytes)
  return &repeated_bytes_;
}

// repeated .A.B.C.TestEnum repeated_enum = 30;
int TestMessage::repeated_enum_size() const {
  return repeated_enum_.size();
}
void TestMessage::clear_repeated_enum() {
  repeated_enum_.Clear();
}
 ::A::B::C::TestEnum TestMessage::repeated_enum(int index) const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.repeated_enum)
  return static_cast< ::A::B::C::TestEnum >(repeated_enum_.Get(index));
}
 void TestMessage::set_repeated_enum(int index, ::A::B::C::TestEnum value) {
  repeated_enum_.Set(index, value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.repeated_enum)
}
 void TestMessage::add_repeated_enum(::A::B::C::TestEnum value) {
  repeated_enum_.Add(value);
  // @@protoc_insertion_point(field_add:A.B.C.TestMessage.repeated_enum)
}
 const ::google::protobuf::RepeatedField<int>&
TestMessage::repeated_enum() const {
  // @@protoc_insertion_point(field_list:A.B.C.TestMessage.repeated_enum)
  return repeated_enum_;
}
 ::google::protobuf::RepeatedField<int>*
TestMessage::mutable_repeated_enum() {
  // @@protoc_insertion_point(field_mutable_list:A.B.C.TestMessage.repeated_enum)
  return &repeated_enum_;
}

// repeated .A.B.C.TestMessage repeated_msg = 31;
int TestMessage::repeated_msg_size() const {
  return repeated_msg_.size();
}
void TestMessage::clear_repeated_msg() {
  repeated_msg_.Clear();
}
const ::A::B::C::TestMessage& TestMessage::repeated_msg(int index) const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.repeated_msg)
  return repeated_msg_.Get(index);
}
::A::B::C::TestMessage* TestMessage::mutable_repeated_msg(int index) {
  // @@protoc_insertion_point(field_mutable:A.B.C.TestMessage.repeated_msg)
  return repeated_msg_.Mutable(index);
}
::A::B::C::TestMessage* TestMessage::add_repeated_msg() {
  // @@protoc_insertion_point(field_add:A.B.C.TestMessage.repeated_msg)
  return repeated_msg_.Add();
}
::google::protobuf::RepeatedPtrField< ::A::B::C::TestMessage >*
TestMessage::mutable_repeated_msg() {
  // @@protoc_insertion_point(field_mutable_list:A.B.C.TestMessage.repeated_msg)
  return &repeated_msg_;
}
const ::google::protobuf::RepeatedPtrField< ::A::B::C::TestMessage >&
TestMessage::repeated_msg() const {
  // @@protoc_insertion_point(field_list:A.B.C.TestMessage.repeated_msg)
  return repeated_msg_;
}

// optional int32 oneof_int32 = 41;
bool TestMessage::has_oneof_int32() const {
  return my_oneof_case() == kOneofInt32;
}
void TestMessage::set_has_oneof_int32() {
  _oneof_case_[0] = kOneofInt32;
}
void TestMessage::clear_oneof_int32() {
  if (has_oneof_int32()) {
    my_oneof_.oneof_int32_ = 0;
    clear_has_my_oneof();
  }
}
 ::google::protobuf::int32 TestMessage::oneof_int32() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.oneof_int32)
  if (has_oneof_int32()) {
    return my_oneof_.oneof_int32_;
  }
  return 0;
}
 void TestMessage::set_oneof_int32(::google::protobuf::int32 value) {
  if (!has_oneof_int32()) {
    clear_my_oneof();
    set_has_oneof_int32();
  }
  my_oneof_.oneof_int32_ = value;
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.oneof_int32)
}

// optional int64 oneof_int64 = 42;
bool TestMessage::has_oneof_int64() const {
  return my_oneof_case() == kOneofInt64;
}
void TestMessage::set_has_oneof_int64() {
  _oneof_case_[0] = kOneofInt64;
}
void TestMessage::clear_oneof_int64() {
  if (has_oneof_int64()) {
    my_oneof_.oneof_int64_ = GOOGLE_LONGLONG(0);
    clear_has_my_oneof();
  }
}
 ::google::protobuf::int64 TestMessage::oneof_int64() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.oneof_int64)
  if (has_oneof_int64()) {
    return my_oneof_.oneof_int64_;
  }
  return GOOGLE_LONGLONG(0);
}
 void TestMessage::set_oneof_int64(::google::protobuf::int64 value) {
  if (!has_oneof_int64()) {
    clear_my_oneof();
    set_has_oneof_int64();
  }
  my_oneof_.oneof_int64_ = value;
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.oneof_int64)
}

// optional uint32 oneof_uint32 = 43;
bool TestMessage::has_oneof_uint32() const {
  return my_oneof_case() == kOneofUint32;
}
void TestMessage::set_has_oneof_uint32() {
  _oneof_case_[0] = kOneofUint32;
}
void TestMessage::clear_oneof_uint32() {
  if (has_oneof_uint32()) {
    my_oneof_.oneof_uint32_ = 0u;
    clear_has_my_oneof();
  }
}
 ::google::protobuf::uint32 TestMessage::oneof_uint32() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.oneof_uint32)
  if (has_oneof_uint32()) {
    return my_oneof_.oneof_uint32_;
  }
  return 0u;
}
 void TestMessage::set_oneof_uint32(::google::protobuf::uint32 value) {
  if (!has_oneof_uint32()) {
    clear_my_oneof();
    set_has_oneof_uint32();
  }
  my_oneof_.oneof_uint32_ = value;
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.oneof_uint32)
}

// optional uint64 oneof_uint64 = 44;
bool TestMessage::has_oneof_uint64() const {
  return my_oneof_case() == kOneofUint64;
}
void TestMessage::set_has_oneof_uint64() {
  _oneof_case_[0] = kOneofUint64;
}
void TestMessage::clear_oneof_uint64() {
  if (has_oneof_uint64()) {
    my_oneof_.oneof_uint64_ = GOOGLE_ULONGLONG(0);
    clear_has_my_oneof();
  }
}
 ::google::protobuf::uint64 TestMessage::oneof_uint64() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.oneof_uint64)
  if (has_oneof_uint64()) {
    return my_oneof_.oneof_uint64_;
  }
  return GOOGLE_ULONGLONG(0);
}
 void TestMessage::set_oneof_uint64(::google::protobuf::uint64 value) {
  if (!has_oneof_uint64()) {
    clear_my_oneof();
    set_has_oneof_uint64();
  }
  my_oneof_.oneof_uint64_ = value;
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.oneof_uint64)
}

// optional bool oneof_bool = 45;
bool TestMessage::has_oneof_bool() const {
  return my_oneof_case() == kOneofBool;
}
void TestMessage::set_has_oneof_bool() {
  _oneof_case_[0] = kOneofBool;
}
void TestMessage::clear_oneof_bool() {
  if (has_oneof_bool()) {
    my_oneof_.oneof_bool_ = false;
    clear_has_my_oneof();
  }
}
 bool TestMessage::oneof_bool() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.oneof_bool)
  if (has_oneof_bool()) {
    return my_oneof_.oneof_bool_;
  }
  return false;
}
 void TestMessage::set_oneof_bool(bool value) {
  if (!has_oneof_bool()) {
    clear_my_oneof();
    set_has_oneof_bool();
  }
  my_oneof_.oneof_bool_ = value;
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.oneof_bool)
}

// optional double oneof_double = 46;
bool TestMessage::has_oneof_double() const {
  return my_oneof_case() == kOneofDouble;
}
void TestMessage::set_has_oneof_double() {
  _oneof_case_[0] = kOneofDouble;
}
void TestMessage::clear_oneof_double() {
  if (has_oneof_double()) {
    my_oneof_.oneof_double_ = 0;
    clear_has_my_oneof();
  }
}
 double TestMessage::oneof_double() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.oneof_double)
  if (has_oneof_double()) {
    return my_oneof_.oneof_double_;
  }
  return 0;
}
 void TestMessage::set_oneof_double(double value) {
  if (!has_oneof_double()) {
    clear_my_oneof();
    set_has_oneof_double();
  }
  my_oneof_.oneof_double_ = value;
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.oneof_double)
}

// optional float oneof_float = 47;
bool TestMessage::has_oneof_float() const {
  return my_oneof_case() == kOneofFloat;
}
void TestMessage::set_has_oneof_float() {
  _oneof_case_[0] = kOneofFloat;
}
void TestMessage::clear_oneof_float() {
  if (has_oneof_float()) {
    my_oneof_.oneof_float_ = 0;
    clear_has_my_oneof();
  }
}
 float TestMessage::oneof_float() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.oneof_float)
  if (has_oneof_float()) {
    return my_oneof_.oneof_float_;
  }
  return 0;
}
 void TestMessage::set_oneof_float(float value) {
  if (!has_oneof_float()) {
    clear_my_oneof();
    set_has_oneof_float();
  }
  my_oneof_.oneof_float_ = value;
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.oneof_float)
}

// optional string oneof_string = 48;
bool TestMessage::has_oneof_string() const {
  return my_oneof_case() == kOneofString;
}
void TestMessage::set_has_oneof_string() {
  _oneof_case_[0] = kOneofString;
}
void TestMessage::clear_oneof_string() {
  if (has_oneof_string()) {
    my_oneof_.oneof_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_my_oneof();
  }
}
 const ::std::string& TestMessage::oneof_string() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.oneof_string)
  if (has_oneof_string()) {
    return my_oneof_.oneof_string_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void TestMessage::set_oneof_string(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.oneof_string)
  if (!has_oneof_string()) {
    clear_my_oneof();
    set_has_oneof_string();
    my_oneof_.oneof_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  my_oneof_.oneof_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.oneof_string)
}
 void TestMessage::set_oneof_string(const char* value) {
  if (!has_oneof_string()) {
    clear_my_oneof();
    set_has_oneof_string();
    my_oneof_.oneof_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  my_oneof_.oneof_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:A.B.C.TestMessage.oneof_string)
}
 void TestMessage::set_oneof_string(const char* value, size_t size) {
  if (!has_oneof_string()) {
    clear_my_oneof();
    set_has_oneof_string();
    my_oneof_.oneof_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  my_oneof_.oneof_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:A.B.C.TestMessage.oneof_string)
}
 ::std::string* TestMessage::mutable_oneof_string() {
  if (!has_oneof_string()) {
    clear_my_oneof();
    set_has_oneof_string();
    my_oneof_.oneof_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:A.B.C.TestMessage.oneof_string)
  return my_oneof_.oneof_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TestMessage::release_oneof_string() {
  // @@protoc_insertion_point(field_release:A.B.C.TestMessage.oneof_string)
  if (has_oneof_string()) {
    clear_has_my_oneof();
    return my_oneof_.oneof_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void TestMessage::set_allocated_oneof_string(::std::string* oneof_string) {
  if (!has_oneof_string()) {
    my_oneof_.oneof_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_my_oneof();
  if (oneof_string != NULL) {
    set_has_oneof_string();
    my_oneof_.oneof_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        oneof_string);
  }
  // @@protoc_insertion_point(field_set_allocated:A.B.C.TestMessage.oneof_string)
}

// optional bytes oneof_bytes = 49;
bool TestMessage::has_oneof_bytes() const {
  return my_oneof_case() == kOneofBytes;
}
void TestMessage::set_has_oneof_bytes() {
  _oneof_case_[0] = kOneofBytes;
}
void TestMessage::clear_oneof_bytes() {
  if (has_oneof_bytes()) {
    my_oneof_.oneof_bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_my_oneof();
  }
}
 const ::std::string& TestMessage::oneof_bytes() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.oneof_bytes)
  if (has_oneof_bytes()) {
    return my_oneof_.oneof_bytes_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void TestMessage::set_oneof_bytes(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.oneof_bytes)
  if (!has_oneof_bytes()) {
    clear_my_oneof();
    set_has_oneof_bytes();
    my_oneof_.oneof_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  my_oneof_.oneof_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.oneof_bytes)
}
 void TestMessage::set_oneof_bytes(const char* value) {
  if (!has_oneof_bytes()) {
    clear_my_oneof();
    set_has_oneof_bytes();
    my_oneof_.oneof_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  my_oneof_.oneof_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:A.B.C.TestMessage.oneof_bytes)
}
 void TestMessage::set_oneof_bytes(const void* value, size_t size) {
  if (!has_oneof_bytes()) {
    clear_my_oneof();
    set_has_oneof_bytes();
    my_oneof_.oneof_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  my_oneof_.oneof_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:A.B.C.TestMessage.oneof_bytes)
}
 ::std::string* TestMessage::mutable_oneof_bytes() {
  if (!has_oneof_bytes()) {
    clear_my_oneof();
    set_has_oneof_bytes();
    my_oneof_.oneof_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:A.B.C.TestMessage.oneof_bytes)
  return my_oneof_.oneof_bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TestMessage::release_oneof_bytes() {
  // @@protoc_insertion_point(field_release:A.B.C.TestMessage.oneof_bytes)
  if (has_oneof_bytes()) {
    clear_has_my_oneof();
    return my_oneof_.oneof_bytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void TestMessage::set_allocated_oneof_bytes(::std::string* oneof_bytes) {
  if (!has_oneof_bytes()) {
    my_oneof_.oneof_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_my_oneof();
  if (oneof_bytes != NULL) {
    set_has_oneof_bytes();
    my_oneof_.oneof_bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        oneof_bytes);
  }
  // @@protoc_insertion_point(field_set_allocated:A.B.C.TestMessage.oneof_bytes)
}

// optional .A.B.C.TestEnum oneof_enum = 50;
bool TestMessage::has_oneof_enum() const {
  return my_oneof_case() == kOneofEnum;
}
void TestMessage::set_has_oneof_enum() {
  _oneof_case_[0] = kOneofEnum;
}
void TestMessage::clear_oneof_enum() {
  if (has_oneof_enum()) {
    my_oneof_.oneof_enum_ = 0;
    clear_has_my_oneof();
  }
}
 ::A::B::C::TestEnum TestMessage::oneof_enum() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.oneof_enum)
  if (has_oneof_enum()) {
    return static_cast< ::A::B::C::TestEnum >(my_oneof_.oneof_enum_);
  }
  return static_cast< ::A::B::C::TestEnum >(0);
}
 void TestMessage::set_oneof_enum(::A::B::C::TestEnum value) {
  if (!has_oneof_enum()) {
    clear_my_oneof();
    set_has_oneof_enum();
  }
  my_oneof_.oneof_enum_ = value;
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.oneof_enum)
}

// optional .A.B.C.TestMessage oneof_msg = 51;
bool TestMessage::has_oneof_msg() const {
  return my_oneof_case() == kOneofMsg;
}
void TestMessage::set_has_oneof_msg() {
  _oneof_case_[0] = kOneofMsg;
}
void TestMessage::clear_oneof_msg() {
  if (has_oneof_msg()) {
    delete my_oneof_.oneof_msg_;
    clear_has_my_oneof();
  }
}
 const ::A::B::C::TestMessage& TestMessage::oneof_msg() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.oneof_msg)
  return has_oneof_msg()
      ? *my_oneof_.oneof_msg_
      : ::A::B::C::TestMessage::default_instance();
}
::A::B::C::TestMessage* TestMessage::mutable_oneof_msg() {
  if (!has_oneof_msg()) {
    clear_my_oneof();
    set_has_oneof_msg();
    my_oneof_.oneof_msg_ = new ::A::B::C::TestMessage;
  }
  // @@protoc_insertion_point(field_mutable:A.B.C.TestMessage.oneof_msg)
  return my_oneof_.oneof_msg_;
}
::A::B::C::TestMessage* TestMessage::release_oneof_msg() {
  // @@protoc_insertion_point(field_release:A.B.C.TestMessage.oneof_msg)
  if (has_oneof_msg()) {
    clear_has_my_oneof();
    ::A::B::C::TestMessage* temp = my_oneof_.oneof_msg_;
    my_oneof_.oneof_msg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TestMessage::set_allocated_oneof_msg(::A::B::C::TestMessage* oneof_msg) {
  clear_my_oneof();
  if (oneof_msg) {
    set_has_oneof_msg();
    my_oneof_.oneof_msg_ = oneof_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:A.B.C.TestMessage.oneof_msg)
}

// map<int32, string> map_int32_string = 61;
int TestMessage::map_int32_string_size() const {
  return map_int32_string_.size();
}
void TestMessage::clear_map_int32_string() {
  map_int32_string_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >&
TestMessage::map_int32_string() const {
  // @@protoc_insertion_point(field_map:A.B.C.TestMessage.map_int32_string)
  return map_int32_string_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >*
TestMessage::mutable_map_int32_string() {
  // @@protoc_insertion_point(field_mutable_map:A.B.C.TestMessage.map_int32_string)
  return map_int32_string_.MutableMap();
}

// map<int64, string> map_int64_string = 62;
int TestMessage::map_int64_string_size() const {
  return map_int64_string_.size();
}
void TestMessage::clear_map_int64_string() {
  map_int64_string_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >&
TestMessage::map_int64_string() const {
  // @@protoc_insertion_point(field_map:A.B.C.TestMessage.map_int64_string)
  return map_int64_string_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >*
TestMessage::mutable_map_int64_string() {
  // @@protoc_insertion_point(field_mutable_map:A.B.C.TestMessage.map_int64_string)
  return map_int64_string_.MutableMap();
}

// map<uint32, string> map_uint32_string = 63;
int TestMessage::map_uint32_string_size() const {
  return map_uint32_string_.size();
}
void TestMessage::clear_map_uint32_string() {
  map_uint32_string_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >&
TestMessage::map_uint32_string() const {
  // @@protoc_insertion_point(field_map:A.B.C.TestMessage.map_uint32_string)
  return map_uint32_string_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >*
TestMessage::mutable_map_uint32_string() {
  // @@protoc_insertion_point(field_mutable_map:A.B.C.TestMessage.map_uint32_string)
  return map_uint32_string_.MutableMap();
}

// map<uint64, string> map_uint64_string = 64;
int TestMessage::map_uint64_string_size() const {
  return map_uint64_string_.size();
}
void TestMessage::clear_map_uint64_string() {
  map_uint64_string_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint64, ::std::string >&
TestMessage::map_uint64_string() const {
  // @@protoc_insertion_point(field_map:A.B.C.TestMessage.map_uint64_string)
  return map_uint64_string_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint64, ::std::string >*
TestMessage::mutable_map_uint64_string() {
  // @@protoc_insertion_point(field_mutable_map:A.B.C.TestMessage.map_uint64_string)
  return map_uint64_string_.MutableMap();
}

// map<bool, string> map_bool_string = 65;
int TestMessage::map_bool_string_size() const {
  return map_bool_string_.size();
}
void TestMessage::clear_map_bool_string() {
  map_bool_string_.Clear();
}
 const ::google::protobuf::Map< bool, ::std::string >&
TestMessage::map_bool_string() const {
  // @@protoc_insertion_point(field_map:A.B.C.TestMessage.map_bool_string)
  return map_bool_string_.GetMap();
}
 ::google::protobuf::Map< bool, ::std::string >*
TestMessage::mutable_map_bool_string() {
  // @@protoc_insertion_point(field_mutable_map:A.B.C.TestMessage.map_bool_string)
  return map_bool_string_.MutableMap();
}

// map<string, string> map_string_string = 66;
int TestMessage::map_string_string_size() const {
  return map_string_string_.size();
}
void TestMessage::clear_map_string_string() {
  map_string_string_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
TestMessage::map_string_string() const {
  // @@protoc_insertion_point(field_map:A.B.C.TestMessage.map_string_string)
  return map_string_string_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
TestMessage::mutable_map_string_string() {
  // @@protoc_insertion_point(field_mutable_map:A.B.C.TestMessage.map_string_string)
  return map_string_string_.MutableMap();
}

// map<string, .A.B.C.TestMessage> map_string_msg = 67;
int TestMessage::map_string_msg_size() const {
  return map_string_msg_.size();
}
void TestMessage::clear_map_string_msg() {
  map_string_msg_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::A::B::C::TestMessage >&
TestMessage::map_string_msg() const {
  // @@protoc_insertion_point(field_map:A.B.C.TestMessage.map_string_msg)
  return map_string_msg_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::A::B::C::TestMessage >*
TestMessage::mutable_map_string_msg() {
  // @@protoc_insertion_point(field_mutable_map:A.B.C.TestMessage.map_string_msg)
  return map_string_msg_.MutableMap();
}

// map<string, .A.B.C.TestEnum> map_string_enum = 68;
int TestMessage::map_string_enum_size() const {
  return map_string_enum_.size();
}
void TestMessage::clear_map_string_enum() {
  map_string_enum_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::A::B::C::TestEnum >&
TestMessage::map_string_enum() const {
  // @@protoc_insertion_point(field_map:A.B.C.TestMessage.map_string_enum)
  return map_string_enum_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::A::B::C::TestEnum >*
TestMessage::mutable_map_string_enum() {
  // @@protoc_insertion_point(field_mutable_map:A.B.C.TestMessage.map_string_enum)
  return map_string_enum_.MutableMap();
}

// map<string, int32> map_string_int32 = 69;
int TestMessage::map_string_int32_size() const {
  return map_string_int32_.size();
}
void TestMessage::clear_map_string_int32() {
  map_string_int32_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >&
TestMessage::map_string_int32() const {
  // @@protoc_insertion_point(field_map:A.B.C.TestMessage.map_string_int32)
  return map_string_int32_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >*
TestMessage::mutable_map_string_int32() {
  // @@protoc_insertion_point(field_mutable_map:A.B.C.TestMessage.map_string_int32)
  return map_string_int32_.MutableMap();
}

// map<string, bool> map_string_bool = 70;
int TestMessage::map_string_bool_size() const {
  return map_string_bool_.size();
}
void TestMessage::clear_map_string_bool() {
  map_string_bool_.Clear();
}
 const ::google::protobuf::Map< ::std::string, bool >&
TestMessage::map_string_bool() const {
  // @@protoc_insertion_point(field_map:A.B.C.TestMessage.map_string_bool)
  return map_string_bool_.GetMap();
}
 ::google::protobuf::Map< ::std::string, bool >*
TestMessage::mutable_map_string_bool() {
  // @@protoc_insertion_point(field_mutable_map:A.B.C.TestMessage.map_string_bool)
  return map_string_bool_.MutableMap();
}

// optional .A.B.C.TestMessage.NestedMessage nested_message = 80;
bool TestMessage::has_nested_message() const {
  return !_is_default_instance_ && nested_message_ != NULL;
}
void TestMessage::clear_nested_message() {
  if (GetArenaNoVirtual() == NULL && nested_message_ != NULL) delete nested_message_;
  nested_message_ = NULL;
}
const ::A::B::C::TestMessage_NestedMessage& TestMessage::nested_message() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.nested_message)
  return nested_message_ != NULL ? *nested_message_ : *default_instance_->nested_message_;
}
::A::B::C::TestMessage_NestedMessage* TestMessage::mutable_nested_message() {
  
  if (nested_message_ == NULL) {
    nested_message_ = new ::A::B::C::TestMessage_NestedMessage;
  }
  // @@protoc_insertion_point(field_mutable:A.B.C.TestMessage.nested_message)
  return nested_message_;
}
::A::B::C::TestMessage_NestedMessage* TestMessage::release_nested_message() {
  // @@protoc_insertion_point(field_release:A.B.C.TestMessage.nested_message)
  
  ::A::B::C::TestMessage_NestedMessage* temp = nested_message_;
  nested_message_ = NULL;
  return temp;
}
void TestMessage::set_allocated_nested_message(::A::B::C::TestMessage_NestedMessage* nested_message) {
  delete nested_message_;
  nested_message_ = nested_message;
  if (nested_message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:A.B.C.TestMessage.nested_message)
}

bool TestMessage::has_my_oneof() const {
  return my_oneof_case() != MY_ONEOF_NOT_SET;
}
void TestMessage::clear_has_my_oneof() {
  _oneof_case_[0] = MY_ONEOF_NOT_SET;
}
TestMessage::MyOneofCase TestMessage::my_oneof_case() const {
  return TestMessage::MyOneofCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace C
}  // namespace B
}  // namespace A

// @@protoc_insertion_point(global_scope)
