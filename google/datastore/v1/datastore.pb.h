// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/datastore/v1/datastore.proto

#ifndef PROTOBUF_google_2fdatastore_2fv1_2fdatastore_2eproto__INCLUDED
#define PROTOBUF_google_2fdatastore_2fv1_2fdatastore_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/datastore/v1/entity.pb.h"
#include "google/datastore/v1/query.pb.h"
// @@protoc_insertion_point(includes)

namespace google {
namespace datastore {
namespace v1 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_google_2fdatastore_2fv1_2fdatastore_2eproto();
void protobuf_InitDefaults_google_2fdatastore_2fv1_2fdatastore_2eproto();
void protobuf_AssignDesc_google_2fdatastore_2fv1_2fdatastore_2eproto();
void protobuf_ShutdownFile_google_2fdatastore_2fv1_2fdatastore_2eproto();

class AllocateIdsRequest;
class AllocateIdsResponse;
class BeginTransactionRequest;
class BeginTransactionResponse;
class CommitRequest;
class CommitResponse;
class LookupRequest;
class LookupResponse;
class Mutation;
class MutationResult;
class ReadOptions;
class RollbackRequest;
class RollbackResponse;
class RunQueryRequest;
class RunQueryResponse;

enum CommitRequest_Mode {
  CommitRequest_Mode_MODE_UNSPECIFIED = 0,
  CommitRequest_Mode_TRANSACTIONAL = 1,
  CommitRequest_Mode_NON_TRANSACTIONAL = 2,
  CommitRequest_Mode_CommitRequest_Mode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommitRequest_Mode_CommitRequest_Mode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CommitRequest_Mode_IsValid(int value);
const CommitRequest_Mode CommitRequest_Mode_Mode_MIN = CommitRequest_Mode_MODE_UNSPECIFIED;
const CommitRequest_Mode CommitRequest_Mode_Mode_MAX = CommitRequest_Mode_NON_TRANSACTIONAL;
const int CommitRequest_Mode_Mode_ARRAYSIZE = CommitRequest_Mode_Mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommitRequest_Mode_descriptor();
inline const ::std::string& CommitRequest_Mode_Name(CommitRequest_Mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommitRequest_Mode_descriptor(), value);
}
inline bool CommitRequest_Mode_Parse(
    const ::std::string& name, CommitRequest_Mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommitRequest_Mode>(
    CommitRequest_Mode_descriptor(), name, value);
}
enum ReadOptions_ReadConsistency {
  ReadOptions_ReadConsistency_READ_CONSISTENCY_UNSPECIFIED = 0,
  ReadOptions_ReadConsistency_STRONG = 1,
  ReadOptions_ReadConsistency_EVENTUAL = 2,
  ReadOptions_ReadConsistency_ReadOptions_ReadConsistency_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ReadOptions_ReadConsistency_ReadOptions_ReadConsistency_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ReadOptions_ReadConsistency_IsValid(int value);
const ReadOptions_ReadConsistency ReadOptions_ReadConsistency_ReadConsistency_MIN = ReadOptions_ReadConsistency_READ_CONSISTENCY_UNSPECIFIED;
const ReadOptions_ReadConsistency ReadOptions_ReadConsistency_ReadConsistency_MAX = ReadOptions_ReadConsistency_EVENTUAL;
const int ReadOptions_ReadConsistency_ReadConsistency_ARRAYSIZE = ReadOptions_ReadConsistency_ReadConsistency_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReadOptions_ReadConsistency_descriptor();
inline const ::std::string& ReadOptions_ReadConsistency_Name(ReadOptions_ReadConsistency value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReadOptions_ReadConsistency_descriptor(), value);
}
inline bool ReadOptions_ReadConsistency_Parse(
    const ::std::string& name, ReadOptions_ReadConsistency* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReadOptions_ReadConsistency>(
    ReadOptions_ReadConsistency_descriptor(), name, value);
}
// ===================================================================

class LookupRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1.LookupRequest) */ {
 public:
  LookupRequest();
  virtual ~LookupRequest();

  LookupRequest(const LookupRequest& from);

  inline LookupRequest& operator=(const LookupRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LookupRequest& default_instance();

  static const LookupRequest* internal_default_instance();

  void Swap(LookupRequest* other);

  // implements Message ----------------------------------------------

  inline LookupRequest* New() const { return New(NULL); }

  LookupRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LookupRequest& from);
  void MergeFrom(const LookupRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LookupRequest* other);
  void UnsafeMergeFrom(const LookupRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string project_id = 8;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 8;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // optional .google.datastore.v1.ReadOptions read_options = 1;
  bool has_read_options() const;
  void clear_read_options();
  static const int kReadOptionsFieldNumber = 1;
  const ::google::datastore::v1::ReadOptions& read_options() const;
  ::google::datastore::v1::ReadOptions* mutable_read_options();
  ::google::datastore::v1::ReadOptions* release_read_options();
  void set_allocated_read_options(::google::datastore::v1::ReadOptions* read_options);

  // repeated .google.datastore.v1.Key keys = 3;
  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 3;
  const ::google::datastore::v1::Key& keys(int index) const;
  ::google::datastore::v1::Key* mutable_keys(int index);
  ::google::datastore::v1::Key* add_keys();
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Key >*
      mutable_keys();
  const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Key >&
      keys() const;

  // @@protoc_insertion_point(class_scope:google.datastore.v1.LookupRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Key > keys_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::datastore::v1::ReadOptions* read_options_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fdatastore_2fv1_2fdatastore_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fdatastore_2fv1_2fdatastore_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fdatastore_2fv1_2fdatastore_2eproto();
  friend void protobuf_ShutdownFile_google_2fdatastore_2fv1_2fdatastore_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<LookupRequest> LookupRequest_default_instance_;

// -------------------------------------------------------------------

class LookupResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1.LookupResponse) */ {
 public:
  LookupResponse();
  virtual ~LookupResponse();

  LookupResponse(const LookupResponse& from);

  inline LookupResponse& operator=(const LookupResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LookupResponse& default_instance();

  static const LookupResponse* internal_default_instance();

  void Swap(LookupResponse* other);

  // implements Message ----------------------------------------------

  inline LookupResponse* New() const { return New(NULL); }

  LookupResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LookupResponse& from);
  void MergeFrom(const LookupResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LookupResponse* other);
  void UnsafeMergeFrom(const LookupResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.datastore.v1.EntityResult found = 1;
  int found_size() const;
  void clear_found();
  static const int kFoundFieldNumber = 1;
  const ::google::datastore::v1::EntityResult& found(int index) const;
  ::google::datastore::v1::EntityResult* mutable_found(int index);
  ::google::datastore::v1::EntityResult* add_found();
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::EntityResult >*
      mutable_found();
  const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::EntityResult >&
      found() const;

  // repeated .google.datastore.v1.EntityResult missing = 2;
  int missing_size() const;
  void clear_missing();
  static const int kMissingFieldNumber = 2;
  const ::google::datastore::v1::EntityResult& missing(int index) const;
  ::google::datastore::v1::EntityResult* mutable_missing(int index);
  ::google::datastore::v1::EntityResult* add_missing();
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::EntityResult >*
      mutable_missing();
  const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::EntityResult >&
      missing() const;

  // repeated .google.datastore.v1.Key deferred = 3;
  int deferred_size() const;
  void clear_deferred();
  static const int kDeferredFieldNumber = 3;
  const ::google::datastore::v1::Key& deferred(int index) const;
  ::google::datastore::v1::Key* mutable_deferred(int index);
  ::google::datastore::v1::Key* add_deferred();
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Key >*
      mutable_deferred();
  const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Key >&
      deferred() const;

  // @@protoc_insertion_point(class_scope:google.datastore.v1.LookupResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::EntityResult > found_;
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::EntityResult > missing_;
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Key > deferred_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fdatastore_2fv1_2fdatastore_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fdatastore_2fv1_2fdatastore_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fdatastore_2fv1_2fdatastore_2eproto();
  friend void protobuf_ShutdownFile_google_2fdatastore_2fv1_2fdatastore_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<LookupResponse> LookupResponse_default_instance_;

// -------------------------------------------------------------------

class RunQueryRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1.RunQueryRequest) */ {
 public:
  RunQueryRequest();
  virtual ~RunQueryRequest();

  RunQueryRequest(const RunQueryRequest& from);

  inline RunQueryRequest& operator=(const RunQueryRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RunQueryRequest& default_instance();

  enum QueryTypeCase {
    kQuery = 3,
    kGqlQuery = 7,
    QUERY_TYPE_NOT_SET = 0,
  };

  static const RunQueryRequest* internal_default_instance();

  void Swap(RunQueryRequest* other);

  // implements Message ----------------------------------------------

  inline RunQueryRequest* New() const { return New(NULL); }

  RunQueryRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RunQueryRequest& from);
  void MergeFrom(const RunQueryRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RunQueryRequest* other);
  void UnsafeMergeFrom(const RunQueryRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string project_id = 8;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 8;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // optional .google.datastore.v1.PartitionId partition_id = 2;
  bool has_partition_id() const;
  void clear_partition_id();
  static const int kPartitionIdFieldNumber = 2;
  const ::google::datastore::v1::PartitionId& partition_id() const;
  ::google::datastore::v1::PartitionId* mutable_partition_id();
  ::google::datastore::v1::PartitionId* release_partition_id();
  void set_allocated_partition_id(::google::datastore::v1::PartitionId* partition_id);

  // optional .google.datastore.v1.ReadOptions read_options = 1;
  bool has_read_options() const;
  void clear_read_options();
  static const int kReadOptionsFieldNumber = 1;
  const ::google::datastore::v1::ReadOptions& read_options() const;
  ::google::datastore::v1::ReadOptions* mutable_read_options();
  ::google::datastore::v1::ReadOptions* release_read_options();
  void set_allocated_read_options(::google::datastore::v1::ReadOptions* read_options);

  // optional .google.datastore.v1.Query query = 3;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 3;
  const ::google::datastore::v1::Query& query() const;
  ::google::datastore::v1::Query* mutable_query();
  ::google::datastore::v1::Query* release_query();
  void set_allocated_query(::google::datastore::v1::Query* query);

  // optional .google.datastore.v1.GqlQuery gql_query = 7;
  bool has_gql_query() const;
  void clear_gql_query();
  static const int kGqlQueryFieldNumber = 7;
  const ::google::datastore::v1::GqlQuery& gql_query() const;
  ::google::datastore::v1::GqlQuery* mutable_gql_query();
  ::google::datastore::v1::GqlQuery* release_gql_query();
  void set_allocated_gql_query(::google::datastore::v1::GqlQuery* gql_query);

  QueryTypeCase query_type_case() const;
  // @@protoc_insertion_point(class_scope:google.datastore.v1.RunQueryRequest)
 private:
  inline void set_has_query();
  inline void set_has_gql_query();

  inline bool has_query_type() const;
  void clear_query_type();
  inline void clear_has_query_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::datastore::v1::PartitionId* partition_id_;
  ::google::datastore::v1::ReadOptions* read_options_;
  union QueryTypeUnion {
    QueryTypeUnion() {}
    ::google::datastore::v1::Query* query_;
    ::google::datastore::v1::GqlQuery* gql_query_;
  } query_type_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_InitDefaults_google_2fdatastore_2fv1_2fdatastore_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fdatastore_2fv1_2fdatastore_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fdatastore_2fv1_2fdatastore_2eproto();
  friend void protobuf_ShutdownFile_google_2fdatastore_2fv1_2fdatastore_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<RunQueryRequest> RunQueryRequest_default_instance_;

// -------------------------------------------------------------------

class RunQueryResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1.RunQueryResponse) */ {
 public:
  RunQueryResponse();
  virtual ~RunQueryResponse();

  RunQueryResponse(const RunQueryResponse& from);

  inline RunQueryResponse& operator=(const RunQueryResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RunQueryResponse& default_instance();

  static const RunQueryResponse* internal_default_instance();

  void Swap(RunQueryResponse* other);

  // implements Message ----------------------------------------------

  inline RunQueryResponse* New() const { return New(NULL); }

  RunQueryResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RunQueryResponse& from);
  void MergeFrom(const RunQueryResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RunQueryResponse* other);
  void UnsafeMergeFrom(const RunQueryResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .google.datastore.v1.QueryResultBatch batch = 1;
  bool has_batch() const;
  void clear_batch();
  static const int kBatchFieldNumber = 1;
  const ::google::datastore::v1::QueryResultBatch& batch() const;
  ::google::datastore::v1::QueryResultBatch* mutable_batch();
  ::google::datastore::v1::QueryResultBatch* release_batch();
  void set_allocated_batch(::google::datastore::v1::QueryResultBatch* batch);

  // optional .google.datastore.v1.Query query = 2;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 2;
  const ::google::datastore::v1::Query& query() const;
  ::google::datastore::v1::Query* mutable_query();
  ::google::datastore::v1::Query* release_query();
  void set_allocated_query(::google::datastore::v1::Query* query);

  // @@protoc_insertion_point(class_scope:google.datastore.v1.RunQueryResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::datastore::v1::QueryResultBatch* batch_;
  ::google::datastore::v1::Query* query_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fdatastore_2fv1_2fdatastore_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fdatastore_2fv1_2fdatastore_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fdatastore_2fv1_2fdatastore_2eproto();
  friend void protobuf_ShutdownFile_google_2fdatastore_2fv1_2fdatastore_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<RunQueryResponse> RunQueryResponse_default_instance_;

// -------------------------------------------------------------------

class BeginTransactionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1.BeginTransactionRequest) */ {
 public:
  BeginTransactionRequest();
  virtual ~BeginTransactionRequest();

  BeginTransactionRequest(const BeginTransactionRequest& from);

  inline BeginTransactionRequest& operator=(const BeginTransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BeginTransactionRequest& default_instance();

  static const BeginTransactionRequest* internal_default_instance();

  void Swap(BeginTransactionRequest* other);

  // implements Message ----------------------------------------------

  inline BeginTransactionRequest* New() const { return New(NULL); }

  BeginTransactionRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BeginTransactionRequest& from);
  void MergeFrom(const BeginTransactionRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BeginTransactionRequest* other);
  void UnsafeMergeFrom(const BeginTransactionRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string project_id = 8;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 8;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // @@protoc_insertion_point(class_scope:google.datastore.v1.BeginTransactionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fdatastore_2fv1_2fdatastore_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fdatastore_2fv1_2fdatastore_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fdatastore_2fv1_2fdatastore_2eproto();
  friend void protobuf_ShutdownFile_google_2fdatastore_2fv1_2fdatastore_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<BeginTransactionRequest> BeginTransactionRequest_default_instance_;

// -------------------------------------------------------------------

class BeginTransactionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1.BeginTransactionResponse) */ {
 public:
  BeginTransactionResponse();
  virtual ~BeginTransactionResponse();

  BeginTransactionResponse(const BeginTransactionResponse& from);

  inline BeginTransactionResponse& operator=(const BeginTransactionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BeginTransactionResponse& default_instance();

  static const BeginTransactionResponse* internal_default_instance();

  void Swap(BeginTransactionResponse* other);

  // implements Message ----------------------------------------------

  inline BeginTransactionResponse* New() const { return New(NULL); }

  BeginTransactionResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BeginTransactionResponse& from);
  void MergeFrom(const BeginTransactionResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BeginTransactionResponse* other);
  void UnsafeMergeFrom(const BeginTransactionResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes transaction = 1;
  void clear_transaction();
  static const int kTransactionFieldNumber = 1;
  const ::std::string& transaction() const;
  void set_transaction(const ::std::string& value);
  void set_transaction(const char* value);
  void set_transaction(const void* value, size_t size);
  ::std::string* mutable_transaction();
  ::std::string* release_transaction();
  void set_allocated_transaction(::std::string* transaction);

  // @@protoc_insertion_point(class_scope:google.datastore.v1.BeginTransactionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr transaction_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fdatastore_2fv1_2fdatastore_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fdatastore_2fv1_2fdatastore_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fdatastore_2fv1_2fdatastore_2eproto();
  friend void protobuf_ShutdownFile_google_2fdatastore_2fv1_2fdatastore_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<BeginTransactionResponse> BeginTransactionResponse_default_instance_;

// -------------------------------------------------------------------

class RollbackRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1.RollbackRequest) */ {
 public:
  RollbackRequest();
  virtual ~RollbackRequest();

  RollbackRequest(const RollbackRequest& from);

  inline RollbackRequest& operator=(const RollbackRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RollbackRequest& default_instance();

  static const RollbackRequest* internal_default_instance();

  void Swap(RollbackRequest* other);

  // implements Message ----------------------------------------------

  inline RollbackRequest* New() const { return New(NULL); }

  RollbackRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RollbackRequest& from);
  void MergeFrom(const RollbackRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RollbackRequest* other);
  void UnsafeMergeFrom(const RollbackRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string project_id = 8;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 8;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // optional bytes transaction = 1;
  void clear_transaction();
  static const int kTransactionFieldNumber = 1;
  const ::std::string& transaction() const;
  void set_transaction(const ::std::string& value);
  void set_transaction(const char* value);
  void set_transaction(const void* value, size_t size);
  ::std::string* mutable_transaction();
  ::std::string* release_transaction();
  void set_allocated_transaction(::std::string* transaction);

  // @@protoc_insertion_point(class_scope:google.datastore.v1.RollbackRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr transaction_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fdatastore_2fv1_2fdatastore_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fdatastore_2fv1_2fdatastore_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fdatastore_2fv1_2fdatastore_2eproto();
  friend void protobuf_ShutdownFile_google_2fdatastore_2fv1_2fdatastore_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<RollbackRequest> RollbackRequest_default_instance_;

// -------------------------------------------------------------------

class RollbackResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1.RollbackResponse) */ {
 public:
  RollbackResponse();
  virtual ~RollbackResponse();

  RollbackResponse(const RollbackResponse& from);

  inline RollbackResponse& operator=(const RollbackResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RollbackResponse& default_instance();

  static const RollbackResponse* internal_default_instance();

  void Swap(RollbackResponse* other);

  // implements Message ----------------------------------------------

  inline RollbackResponse* New() const { return New(NULL); }

  RollbackResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RollbackResponse& from);
  void MergeFrom(const RollbackResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RollbackResponse* other);
  void UnsafeMergeFrom(const RollbackResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.datastore.v1.RollbackResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fdatastore_2fv1_2fdatastore_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fdatastore_2fv1_2fdatastore_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fdatastore_2fv1_2fdatastore_2eproto();
  friend void protobuf_ShutdownFile_google_2fdatastore_2fv1_2fdatastore_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<RollbackResponse> RollbackResponse_default_instance_;

// -------------------------------------------------------------------

class CommitRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1.CommitRequest) */ {
 public:
  CommitRequest();
  virtual ~CommitRequest();

  CommitRequest(const CommitRequest& from);

  inline CommitRequest& operator=(const CommitRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommitRequest& default_instance();

  enum TransactionSelectorCase {
    kTransaction = 1,
    TRANSACTION_SELECTOR_NOT_SET = 0,
  };

  static const CommitRequest* internal_default_instance();

  void Swap(CommitRequest* other);

  // implements Message ----------------------------------------------

  inline CommitRequest* New() const { return New(NULL); }

  CommitRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommitRequest& from);
  void MergeFrom(const CommitRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CommitRequest* other);
  void UnsafeMergeFrom(const CommitRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CommitRequest_Mode Mode;
  static const Mode MODE_UNSPECIFIED =
    CommitRequest_Mode_MODE_UNSPECIFIED;
  static const Mode TRANSACTIONAL =
    CommitRequest_Mode_TRANSACTIONAL;
  static const Mode NON_TRANSACTIONAL =
    CommitRequest_Mode_NON_TRANSACTIONAL;
  static inline bool Mode_IsValid(int value) {
    return CommitRequest_Mode_IsValid(value);
  }
  static const Mode Mode_MIN =
    CommitRequest_Mode_Mode_MIN;
  static const Mode Mode_MAX =
    CommitRequest_Mode_Mode_MAX;
  static const int Mode_ARRAYSIZE =
    CommitRequest_Mode_Mode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mode_descriptor() {
    return CommitRequest_Mode_descriptor();
  }
  static inline const ::std::string& Mode_Name(Mode value) {
    return CommitRequest_Mode_Name(value);
  }
  static inline bool Mode_Parse(const ::std::string& name,
      Mode* value) {
    return CommitRequest_Mode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string project_id = 8;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 8;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // optional .google.datastore.v1.CommitRequest.Mode mode = 5;
  void clear_mode();
  static const int kModeFieldNumber = 5;
  ::google::datastore::v1::CommitRequest_Mode mode() const;
  void set_mode(::google::datastore::v1::CommitRequest_Mode value);

  // optional bytes transaction = 1;
  private:
  bool has_transaction() const;
  public:
  void clear_transaction();
  static const int kTransactionFieldNumber = 1;
  const ::std::string& transaction() const;
  void set_transaction(const ::std::string& value);
  void set_transaction(const char* value);
  void set_transaction(const void* value, size_t size);
  ::std::string* mutable_transaction();
  ::std::string* release_transaction();
  void set_allocated_transaction(::std::string* transaction);

  // repeated .google.datastore.v1.Mutation mutations = 6;
  int mutations_size() const;
  void clear_mutations();
  static const int kMutationsFieldNumber = 6;
  const ::google::datastore::v1::Mutation& mutations(int index) const;
  ::google::datastore::v1::Mutation* mutable_mutations(int index);
  ::google::datastore::v1::Mutation* add_mutations();
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Mutation >*
      mutable_mutations();
  const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Mutation >&
      mutations() const;

  TransactionSelectorCase transaction_selector_case() const;
  // @@protoc_insertion_point(class_scope:google.datastore.v1.CommitRequest)
 private:
  inline void set_has_transaction();

  inline bool has_transaction_selector() const;
  void clear_transaction_selector();
  inline void clear_has_transaction_selector();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Mutation > mutations_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  int mode_;
  union TransactionSelectorUnion {
    TransactionSelectorUnion() {}
    ::google::protobuf::internal::ArenaStringPtr transaction_;
  } transaction_selector_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_InitDefaults_google_2fdatastore_2fv1_2fdatastore_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fdatastore_2fv1_2fdatastore_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fdatastore_2fv1_2fdatastore_2eproto();
  friend void protobuf_ShutdownFile_google_2fdatastore_2fv1_2fdatastore_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<CommitRequest> CommitRequest_default_instance_;

// -------------------------------------------------------------------

class CommitResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1.CommitResponse) */ {
 public:
  CommitResponse();
  virtual ~CommitResponse();

  CommitResponse(const CommitResponse& from);

  inline CommitResponse& operator=(const CommitResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommitResponse& default_instance();

  static const CommitResponse* internal_default_instance();

  void Swap(CommitResponse* other);

  // implements Message ----------------------------------------------

  inline CommitResponse* New() const { return New(NULL); }

  CommitResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommitResponse& from);
  void MergeFrom(const CommitResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CommitResponse* other);
  void UnsafeMergeFrom(const CommitResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.datastore.v1.MutationResult mutation_results = 3;
  int mutation_results_size() const;
  void clear_mutation_results();
  static const int kMutationResultsFieldNumber = 3;
  const ::google::datastore::v1::MutationResult& mutation_results(int index) const;
  ::google::datastore::v1::MutationResult* mutable_mutation_results(int index);
  ::google::datastore::v1::MutationResult* add_mutation_results();
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::MutationResult >*
      mutable_mutation_results();
  const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::MutationResult >&
      mutation_results() const;

  // optional int32 index_updates = 4;
  void clear_index_updates();
  static const int kIndexUpdatesFieldNumber = 4;
  ::google::protobuf::int32 index_updates() const;
  void set_index_updates(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.datastore.v1.CommitResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::MutationResult > mutation_results_;
  ::google::protobuf::int32 index_updates_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fdatastore_2fv1_2fdatastore_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fdatastore_2fv1_2fdatastore_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fdatastore_2fv1_2fdatastore_2eproto();
  friend void protobuf_ShutdownFile_google_2fdatastore_2fv1_2fdatastore_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<CommitResponse> CommitResponse_default_instance_;

// -------------------------------------------------------------------

class AllocateIdsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1.AllocateIdsRequest) */ {
 public:
  AllocateIdsRequest();
  virtual ~AllocateIdsRequest();

  AllocateIdsRequest(const AllocateIdsRequest& from);

  inline AllocateIdsRequest& operator=(const AllocateIdsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllocateIdsRequest& default_instance();

  static const AllocateIdsRequest* internal_default_instance();

  void Swap(AllocateIdsRequest* other);

  // implements Message ----------------------------------------------

  inline AllocateIdsRequest* New() const { return New(NULL); }

  AllocateIdsRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllocateIdsRequest& from);
  void MergeFrom(const AllocateIdsRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AllocateIdsRequest* other);
  void UnsafeMergeFrom(const AllocateIdsRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string project_id = 8;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 8;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // repeated .google.datastore.v1.Key keys = 1;
  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 1;
  const ::google::datastore::v1::Key& keys(int index) const;
  ::google::datastore::v1::Key* mutable_keys(int index);
  ::google::datastore::v1::Key* add_keys();
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Key >*
      mutable_keys();
  const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Key >&
      keys() const;

  // @@protoc_insertion_point(class_scope:google.datastore.v1.AllocateIdsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Key > keys_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fdatastore_2fv1_2fdatastore_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fdatastore_2fv1_2fdatastore_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fdatastore_2fv1_2fdatastore_2eproto();
  friend void protobuf_ShutdownFile_google_2fdatastore_2fv1_2fdatastore_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AllocateIdsRequest> AllocateIdsRequest_default_instance_;

// -------------------------------------------------------------------

class AllocateIdsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1.AllocateIdsResponse) */ {
 public:
  AllocateIdsResponse();
  virtual ~AllocateIdsResponse();

  AllocateIdsResponse(const AllocateIdsResponse& from);

  inline AllocateIdsResponse& operator=(const AllocateIdsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllocateIdsResponse& default_instance();

  static const AllocateIdsResponse* internal_default_instance();

  void Swap(AllocateIdsResponse* other);

  // implements Message ----------------------------------------------

  inline AllocateIdsResponse* New() const { return New(NULL); }

  AllocateIdsResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllocateIdsResponse& from);
  void MergeFrom(const AllocateIdsResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AllocateIdsResponse* other);
  void UnsafeMergeFrom(const AllocateIdsResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.datastore.v1.Key keys = 1;
  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 1;
  const ::google::datastore::v1::Key& keys(int index) const;
  ::google::datastore::v1::Key* mutable_keys(int index);
  ::google::datastore::v1::Key* add_keys();
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Key >*
      mutable_keys();
  const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Key >&
      keys() const;

  // @@protoc_insertion_point(class_scope:google.datastore.v1.AllocateIdsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Key > keys_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fdatastore_2fv1_2fdatastore_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fdatastore_2fv1_2fdatastore_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fdatastore_2fv1_2fdatastore_2eproto();
  friend void protobuf_ShutdownFile_google_2fdatastore_2fv1_2fdatastore_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AllocateIdsResponse> AllocateIdsResponse_default_instance_;

// -------------------------------------------------------------------

class Mutation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1.Mutation) */ {
 public:
  Mutation();
  virtual ~Mutation();

  Mutation(const Mutation& from);

  inline Mutation& operator=(const Mutation& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Mutation& default_instance();

  enum OperationCase {
    kInsert = 4,
    kUpdate = 5,
    kUpsert = 6,
    kDelete = 7,
    OPERATION_NOT_SET = 0,
  };

  enum ConflictDetectionStrategyCase {
    kBaseVersion = 8,
    CONFLICT_DETECTION_STRATEGY_NOT_SET = 0,
  };

  static const Mutation* internal_default_instance();

  void Swap(Mutation* other);

  // implements Message ----------------------------------------------

  inline Mutation* New() const { return New(NULL); }

  Mutation* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Mutation& from);
  void MergeFrom(const Mutation& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Mutation* other);
  void UnsafeMergeFrom(const Mutation& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .google.datastore.v1.Entity insert = 4;
  bool has_insert() const;
  void clear_insert();
  static const int kInsertFieldNumber = 4;
  const ::google::datastore::v1::Entity& insert() const;
  ::google::datastore::v1::Entity* mutable_insert();
  ::google::datastore::v1::Entity* release_insert();
  void set_allocated_insert(::google::datastore::v1::Entity* insert);

  // optional .google.datastore.v1.Entity update = 5;
  bool has_update() const;
  void clear_update();
  static const int kUpdateFieldNumber = 5;
  const ::google::datastore::v1::Entity& update() const;
  ::google::datastore::v1::Entity* mutable_update();
  ::google::datastore::v1::Entity* release_update();
  void set_allocated_update(::google::datastore::v1::Entity* update);

  // optional .google.datastore.v1.Entity upsert = 6;
  bool has_upsert() const;
  void clear_upsert();
  static const int kUpsertFieldNumber = 6;
  const ::google::datastore::v1::Entity& upsert() const;
  ::google::datastore::v1::Entity* mutable_upsert();
  ::google::datastore::v1::Entity* release_upsert();
  void set_allocated_upsert(::google::datastore::v1::Entity* upsert);

  // optional .google.datastore.v1.Key delete = 7;
  bool has_delete_() const;
  void clear_delete_();
  static const int kDeleteFieldNumber = 7;
  const ::google::datastore::v1::Key& delete_() const;
  ::google::datastore::v1::Key* mutable_delete_();
  ::google::datastore::v1::Key* release_delete_();
  void set_allocated_delete_(::google::datastore::v1::Key* delete_);

  // optional int64 base_version = 8;
  private:
  bool has_base_version() const;
  public:
  void clear_base_version();
  static const int kBaseVersionFieldNumber = 8;
  ::google::protobuf::int64 base_version() const;
  void set_base_version(::google::protobuf::int64 value);

  OperationCase operation_case() const;
  ConflictDetectionStrategyCase conflict_detection_strategy_case() const;
  // @@protoc_insertion_point(class_scope:google.datastore.v1.Mutation)
 private:
  inline void set_has_insert();
  inline void set_has_update();
  inline void set_has_upsert();
  inline void set_has_delete_();
  inline void set_has_base_version();

  inline bool has_operation() const;
  void clear_operation();
  inline void clear_has_operation();

  inline bool has_conflict_detection_strategy() const;
  void clear_conflict_detection_strategy();
  inline void clear_has_conflict_detection_strategy();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union OperationUnion {
    OperationUnion() {}
    ::google::datastore::v1::Entity* insert_;
    ::google::datastore::v1::Entity* update_;
    ::google::datastore::v1::Entity* upsert_;
    ::google::datastore::v1::Key* delete__;
  } operation_;
  union ConflictDetectionStrategyUnion {
    ConflictDetectionStrategyUnion() {}
    ::google::protobuf::int64 base_version_;
  } conflict_detection_strategy_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[2];

  friend void  protobuf_InitDefaults_google_2fdatastore_2fv1_2fdatastore_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fdatastore_2fv1_2fdatastore_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fdatastore_2fv1_2fdatastore_2eproto();
  friend void protobuf_ShutdownFile_google_2fdatastore_2fv1_2fdatastore_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Mutation> Mutation_default_instance_;

// -------------------------------------------------------------------

class MutationResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1.MutationResult) */ {
 public:
  MutationResult();
  virtual ~MutationResult();

  MutationResult(const MutationResult& from);

  inline MutationResult& operator=(const MutationResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MutationResult& default_instance();

  static const MutationResult* internal_default_instance();

  void Swap(MutationResult* other);

  // implements Message ----------------------------------------------

  inline MutationResult* New() const { return New(NULL); }

  MutationResult* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MutationResult& from);
  void MergeFrom(const MutationResult& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MutationResult* other);
  void UnsafeMergeFrom(const MutationResult& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .google.datastore.v1.Key key = 3;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 3;
  const ::google::datastore::v1::Key& key() const;
  ::google::datastore::v1::Key* mutable_key();
  ::google::datastore::v1::Key* release_key();
  void set_allocated_key(::google::datastore::v1::Key* key);

  // optional int64 version = 4;
  void clear_version();
  static const int kVersionFieldNumber = 4;
  ::google::protobuf::int64 version() const;
  void set_version(::google::protobuf::int64 value);

  // optional bool conflict_detected = 5;
  void clear_conflict_detected();
  static const int kConflictDetectedFieldNumber = 5;
  bool conflict_detected() const;
  void set_conflict_detected(bool value);

  // @@protoc_insertion_point(class_scope:google.datastore.v1.MutationResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::datastore::v1::Key* key_;
  ::google::protobuf::int64 version_;
  bool conflict_detected_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fdatastore_2fv1_2fdatastore_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fdatastore_2fv1_2fdatastore_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fdatastore_2fv1_2fdatastore_2eproto();
  friend void protobuf_ShutdownFile_google_2fdatastore_2fv1_2fdatastore_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MutationResult> MutationResult_default_instance_;

// -------------------------------------------------------------------

class ReadOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1.ReadOptions) */ {
 public:
  ReadOptions();
  virtual ~ReadOptions();

  ReadOptions(const ReadOptions& from);

  inline ReadOptions& operator=(const ReadOptions& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadOptions& default_instance();

  enum ConsistencyTypeCase {
    kReadConsistency = 1,
    kTransaction = 2,
    CONSISTENCY_TYPE_NOT_SET = 0,
  };

  static const ReadOptions* internal_default_instance();

  void Swap(ReadOptions* other);

  // implements Message ----------------------------------------------

  inline ReadOptions* New() const { return New(NULL); }

  ReadOptions* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadOptions& from);
  void MergeFrom(const ReadOptions& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReadOptions* other);
  void UnsafeMergeFrom(const ReadOptions& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReadOptions_ReadConsistency ReadConsistency;
  static const ReadConsistency READ_CONSISTENCY_UNSPECIFIED =
    ReadOptions_ReadConsistency_READ_CONSISTENCY_UNSPECIFIED;
  static const ReadConsistency STRONG =
    ReadOptions_ReadConsistency_STRONG;
  static const ReadConsistency EVENTUAL =
    ReadOptions_ReadConsistency_EVENTUAL;
  static inline bool ReadConsistency_IsValid(int value) {
    return ReadOptions_ReadConsistency_IsValid(value);
  }
  static const ReadConsistency ReadConsistency_MIN =
    ReadOptions_ReadConsistency_ReadConsistency_MIN;
  static const ReadConsistency ReadConsistency_MAX =
    ReadOptions_ReadConsistency_ReadConsistency_MAX;
  static const int ReadConsistency_ARRAYSIZE =
    ReadOptions_ReadConsistency_ReadConsistency_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ReadConsistency_descriptor() {
    return ReadOptions_ReadConsistency_descriptor();
  }
  static inline const ::std::string& ReadConsistency_Name(ReadConsistency value) {
    return ReadOptions_ReadConsistency_Name(value);
  }
  static inline bool ReadConsistency_Parse(const ::std::string& name,
      ReadConsistency* value) {
    return ReadOptions_ReadConsistency_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .google.datastore.v1.ReadOptions.ReadConsistency read_consistency = 1;
  private:
  bool has_read_consistency() const;
  public:
  void clear_read_consistency();
  static const int kReadConsistencyFieldNumber = 1;
  ::google::datastore::v1::ReadOptions_ReadConsistency read_consistency() const;
  void set_read_consistency(::google::datastore::v1::ReadOptions_ReadConsistency value);

  // optional bytes transaction = 2;
  private:
  bool has_transaction() const;
  public:
  void clear_transaction();
  static const int kTransactionFieldNumber = 2;
  const ::std::string& transaction() const;
  void set_transaction(const ::std::string& value);
  void set_transaction(const char* value);
  void set_transaction(const void* value, size_t size);
  ::std::string* mutable_transaction();
  ::std::string* release_transaction();
  void set_allocated_transaction(::std::string* transaction);

  ConsistencyTypeCase consistency_type_case() const;
  // @@protoc_insertion_point(class_scope:google.datastore.v1.ReadOptions)
 private:
  inline void set_has_read_consistency();
  inline void set_has_transaction();

  inline bool has_consistency_type() const;
  void clear_consistency_type();
  inline void clear_has_consistency_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ConsistencyTypeUnion {
    ConsistencyTypeUnion() {}
    int read_consistency_;
    ::google::protobuf::internal::ArenaStringPtr transaction_;
  } consistency_type_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_InitDefaults_google_2fdatastore_2fv1_2fdatastore_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fdatastore_2fv1_2fdatastore_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fdatastore_2fv1_2fdatastore_2eproto();
  friend void protobuf_ShutdownFile_google_2fdatastore_2fv1_2fdatastore_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ReadOptions> ReadOptions_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LookupRequest

// optional string project_id = 8;
inline void LookupRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LookupRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.LookupRequest.project_id)
  return project_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LookupRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1.LookupRequest.project_id)
}
inline void LookupRequest::set_project_id(const char* value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1.LookupRequest.project_id)
}
inline void LookupRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1.LookupRequest.project_id)
}
inline ::std::string* LookupRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.LookupRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LookupRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.LookupRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LookupRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.LookupRequest.project_id)
}

// optional .google.datastore.v1.ReadOptions read_options = 1;
inline bool LookupRequest::has_read_options() const {
  return this != internal_default_instance() && read_options_ != NULL;
}
inline void LookupRequest::clear_read_options() {
  if (GetArenaNoVirtual() == NULL && read_options_ != NULL) delete read_options_;
  read_options_ = NULL;
}
inline const ::google::datastore::v1::ReadOptions& LookupRequest::read_options() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.LookupRequest.read_options)
  return read_options_ != NULL ? *read_options_
                         : *::google::datastore::v1::ReadOptions::internal_default_instance();
}
inline ::google::datastore::v1::ReadOptions* LookupRequest::mutable_read_options() {
  
  if (read_options_ == NULL) {
    read_options_ = new ::google::datastore::v1::ReadOptions;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.LookupRequest.read_options)
  return read_options_;
}
inline ::google::datastore::v1::ReadOptions* LookupRequest::release_read_options() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.LookupRequest.read_options)
  
  ::google::datastore::v1::ReadOptions* temp = read_options_;
  read_options_ = NULL;
  return temp;
}
inline void LookupRequest::set_allocated_read_options(::google::datastore::v1::ReadOptions* read_options) {
  delete read_options_;
  read_options_ = read_options;
  if (read_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.LookupRequest.read_options)
}

// repeated .google.datastore.v1.Key keys = 3;
inline int LookupRequest::keys_size() const {
  return keys_.size();
}
inline void LookupRequest::clear_keys() {
  keys_.Clear();
}
inline const ::google::datastore::v1::Key& LookupRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.LookupRequest.keys)
  return keys_.Get(index);
}
inline ::google::datastore::v1::Key* LookupRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.LookupRequest.keys)
  return keys_.Mutable(index);
}
inline ::google::datastore::v1::Key* LookupRequest::add_keys() {
  // @@protoc_insertion_point(field_add:google.datastore.v1.LookupRequest.keys)
  return keys_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Key >*
LookupRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.v1.LookupRequest.keys)
  return &keys_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Key >&
LookupRequest::keys() const {
  // @@protoc_insertion_point(field_list:google.datastore.v1.LookupRequest.keys)
  return keys_;
}

inline const LookupRequest* LookupRequest::internal_default_instance() {
  return &LookupRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// LookupResponse

// repeated .google.datastore.v1.EntityResult found = 1;
inline int LookupResponse::found_size() const {
  return found_.size();
}
inline void LookupResponse::clear_found() {
  found_.Clear();
}
inline const ::google::datastore::v1::EntityResult& LookupResponse::found(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.LookupResponse.found)
  return found_.Get(index);
}
inline ::google::datastore::v1::EntityResult* LookupResponse::mutable_found(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.LookupResponse.found)
  return found_.Mutable(index);
}
inline ::google::datastore::v1::EntityResult* LookupResponse::add_found() {
  // @@protoc_insertion_point(field_add:google.datastore.v1.LookupResponse.found)
  return found_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::EntityResult >*
LookupResponse::mutable_found() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.v1.LookupResponse.found)
  return &found_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::EntityResult >&
LookupResponse::found() const {
  // @@protoc_insertion_point(field_list:google.datastore.v1.LookupResponse.found)
  return found_;
}

// repeated .google.datastore.v1.EntityResult missing = 2;
inline int LookupResponse::missing_size() const {
  return missing_.size();
}
inline void LookupResponse::clear_missing() {
  missing_.Clear();
}
inline const ::google::datastore::v1::EntityResult& LookupResponse::missing(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.LookupResponse.missing)
  return missing_.Get(index);
}
inline ::google::datastore::v1::EntityResult* LookupResponse::mutable_missing(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.LookupResponse.missing)
  return missing_.Mutable(index);
}
inline ::google::datastore::v1::EntityResult* LookupResponse::add_missing() {
  // @@protoc_insertion_point(field_add:google.datastore.v1.LookupResponse.missing)
  return missing_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::EntityResult >*
LookupResponse::mutable_missing() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.v1.LookupResponse.missing)
  return &missing_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::EntityResult >&
LookupResponse::missing() const {
  // @@protoc_insertion_point(field_list:google.datastore.v1.LookupResponse.missing)
  return missing_;
}

// repeated .google.datastore.v1.Key deferred = 3;
inline int LookupResponse::deferred_size() const {
  return deferred_.size();
}
inline void LookupResponse::clear_deferred() {
  deferred_.Clear();
}
inline const ::google::datastore::v1::Key& LookupResponse::deferred(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.LookupResponse.deferred)
  return deferred_.Get(index);
}
inline ::google::datastore::v1::Key* LookupResponse::mutable_deferred(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.LookupResponse.deferred)
  return deferred_.Mutable(index);
}
inline ::google::datastore::v1::Key* LookupResponse::add_deferred() {
  // @@protoc_insertion_point(field_add:google.datastore.v1.LookupResponse.deferred)
  return deferred_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Key >*
LookupResponse::mutable_deferred() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.v1.LookupResponse.deferred)
  return &deferred_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Key >&
LookupResponse::deferred() const {
  // @@protoc_insertion_point(field_list:google.datastore.v1.LookupResponse.deferred)
  return deferred_;
}

inline const LookupResponse* LookupResponse::internal_default_instance() {
  return &LookupResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// RunQueryRequest

// optional string project_id = 8;
inline void RunQueryRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RunQueryRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.RunQueryRequest.project_id)
  return project_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RunQueryRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1.RunQueryRequest.project_id)
}
inline void RunQueryRequest::set_project_id(const char* value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1.RunQueryRequest.project_id)
}
inline void RunQueryRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1.RunQueryRequest.project_id)
}
inline ::std::string* RunQueryRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.RunQueryRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RunQueryRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.RunQueryRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RunQueryRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.RunQueryRequest.project_id)
}

// optional .google.datastore.v1.PartitionId partition_id = 2;
inline bool RunQueryRequest::has_partition_id() const {
  return this != internal_default_instance() && partition_id_ != NULL;
}
inline void RunQueryRequest::clear_partition_id() {
  if (GetArenaNoVirtual() == NULL && partition_id_ != NULL) delete partition_id_;
  partition_id_ = NULL;
}
inline const ::google::datastore::v1::PartitionId& RunQueryRequest::partition_id() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.RunQueryRequest.partition_id)
  return partition_id_ != NULL ? *partition_id_
                         : *::google::datastore::v1::PartitionId::internal_default_instance();
}
inline ::google::datastore::v1::PartitionId* RunQueryRequest::mutable_partition_id() {
  
  if (partition_id_ == NULL) {
    partition_id_ = new ::google::datastore::v1::PartitionId;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.RunQueryRequest.partition_id)
  return partition_id_;
}
inline ::google::datastore::v1::PartitionId* RunQueryRequest::release_partition_id() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.RunQueryRequest.partition_id)
  
  ::google::datastore::v1::PartitionId* temp = partition_id_;
  partition_id_ = NULL;
  return temp;
}
inline void RunQueryRequest::set_allocated_partition_id(::google::datastore::v1::PartitionId* partition_id) {
  delete partition_id_;
  partition_id_ = partition_id;
  if (partition_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.RunQueryRequest.partition_id)
}

// optional .google.datastore.v1.ReadOptions read_options = 1;
inline bool RunQueryRequest::has_read_options() const {
  return this != internal_default_instance() && read_options_ != NULL;
}
inline void RunQueryRequest::clear_read_options() {
  if (GetArenaNoVirtual() == NULL && read_options_ != NULL) delete read_options_;
  read_options_ = NULL;
}
inline const ::google::datastore::v1::ReadOptions& RunQueryRequest::read_options() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.RunQueryRequest.read_options)
  return read_options_ != NULL ? *read_options_
                         : *::google::datastore::v1::ReadOptions::internal_default_instance();
}
inline ::google::datastore::v1::ReadOptions* RunQueryRequest::mutable_read_options() {
  
  if (read_options_ == NULL) {
    read_options_ = new ::google::datastore::v1::ReadOptions;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.RunQueryRequest.read_options)
  return read_options_;
}
inline ::google::datastore::v1::ReadOptions* RunQueryRequest::release_read_options() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.RunQueryRequest.read_options)
  
  ::google::datastore::v1::ReadOptions* temp = read_options_;
  read_options_ = NULL;
  return temp;
}
inline void RunQueryRequest::set_allocated_read_options(::google::datastore::v1::ReadOptions* read_options) {
  delete read_options_;
  read_options_ = read_options;
  if (read_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.RunQueryRequest.read_options)
}

// optional .google.datastore.v1.Query query = 3;
inline bool RunQueryRequest::has_query() const {
  return query_type_case() == kQuery;
}
inline void RunQueryRequest::set_has_query() {
  _oneof_case_[0] = kQuery;
}
inline void RunQueryRequest::clear_query() {
  if (has_query()) {
    delete query_type_.query_;
    clear_has_query_type();
  }
}
inline  const ::google::datastore::v1::Query& RunQueryRequest::query() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.RunQueryRequest.query)
  return has_query()
      ? *query_type_.query_
      : ::google::datastore::v1::Query::default_instance();
}
inline ::google::datastore::v1::Query* RunQueryRequest::mutable_query() {
  if (!has_query()) {
    clear_query_type();
    set_has_query();
    query_type_.query_ = new ::google::datastore::v1::Query;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.RunQueryRequest.query)
  return query_type_.query_;
}
inline ::google::datastore::v1::Query* RunQueryRequest::release_query() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.RunQueryRequest.query)
  if (has_query()) {
    clear_has_query_type();
    ::google::datastore::v1::Query* temp = query_type_.query_;
    query_type_.query_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void RunQueryRequest::set_allocated_query(::google::datastore::v1::Query* query) {
  clear_query_type();
  if (query) {
    set_has_query();
    query_type_.query_ = query;
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.RunQueryRequest.query)
}

// optional .google.datastore.v1.GqlQuery gql_query = 7;
inline bool RunQueryRequest::has_gql_query() const {
  return query_type_case() == kGqlQuery;
}
inline void RunQueryRequest::set_has_gql_query() {
  _oneof_case_[0] = kGqlQuery;
}
inline void RunQueryRequest::clear_gql_query() {
  if (has_gql_query()) {
    delete query_type_.gql_query_;
    clear_has_query_type();
  }
}
inline  const ::google::datastore::v1::GqlQuery& RunQueryRequest::gql_query() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.RunQueryRequest.gql_query)
  return has_gql_query()
      ? *query_type_.gql_query_
      : ::google::datastore::v1::GqlQuery::default_instance();
}
inline ::google::datastore::v1::GqlQuery* RunQueryRequest::mutable_gql_query() {
  if (!has_gql_query()) {
    clear_query_type();
    set_has_gql_query();
    query_type_.gql_query_ = new ::google::datastore::v1::GqlQuery;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.RunQueryRequest.gql_query)
  return query_type_.gql_query_;
}
inline ::google::datastore::v1::GqlQuery* RunQueryRequest::release_gql_query() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.RunQueryRequest.gql_query)
  if (has_gql_query()) {
    clear_has_query_type();
    ::google::datastore::v1::GqlQuery* temp = query_type_.gql_query_;
    query_type_.gql_query_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void RunQueryRequest::set_allocated_gql_query(::google::datastore::v1::GqlQuery* gql_query) {
  clear_query_type();
  if (gql_query) {
    set_has_gql_query();
    query_type_.gql_query_ = gql_query;
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.RunQueryRequest.gql_query)
}

inline bool RunQueryRequest::has_query_type() const {
  return query_type_case() != QUERY_TYPE_NOT_SET;
}
inline void RunQueryRequest::clear_has_query_type() {
  _oneof_case_[0] = QUERY_TYPE_NOT_SET;
}
inline RunQueryRequest::QueryTypeCase RunQueryRequest::query_type_case() const {
  return RunQueryRequest::QueryTypeCase(_oneof_case_[0]);
}
inline const RunQueryRequest* RunQueryRequest::internal_default_instance() {
  return &RunQueryRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// RunQueryResponse

// optional .google.datastore.v1.QueryResultBatch batch = 1;
inline bool RunQueryResponse::has_batch() const {
  return this != internal_default_instance() && batch_ != NULL;
}
inline void RunQueryResponse::clear_batch() {
  if (GetArenaNoVirtual() == NULL && batch_ != NULL) delete batch_;
  batch_ = NULL;
}
inline const ::google::datastore::v1::QueryResultBatch& RunQueryResponse::batch() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.RunQueryResponse.batch)
  return batch_ != NULL ? *batch_
                         : *::google::datastore::v1::QueryResultBatch::internal_default_instance();
}
inline ::google::datastore::v1::QueryResultBatch* RunQueryResponse::mutable_batch() {
  
  if (batch_ == NULL) {
    batch_ = new ::google::datastore::v1::QueryResultBatch;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.RunQueryResponse.batch)
  return batch_;
}
inline ::google::datastore::v1::QueryResultBatch* RunQueryResponse::release_batch() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.RunQueryResponse.batch)
  
  ::google::datastore::v1::QueryResultBatch* temp = batch_;
  batch_ = NULL;
  return temp;
}
inline void RunQueryResponse::set_allocated_batch(::google::datastore::v1::QueryResultBatch* batch) {
  delete batch_;
  batch_ = batch;
  if (batch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.RunQueryResponse.batch)
}

// optional .google.datastore.v1.Query query = 2;
inline bool RunQueryResponse::has_query() const {
  return this != internal_default_instance() && query_ != NULL;
}
inline void RunQueryResponse::clear_query() {
  if (GetArenaNoVirtual() == NULL && query_ != NULL) delete query_;
  query_ = NULL;
}
inline const ::google::datastore::v1::Query& RunQueryResponse::query() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.RunQueryResponse.query)
  return query_ != NULL ? *query_
                         : *::google::datastore::v1::Query::internal_default_instance();
}
inline ::google::datastore::v1::Query* RunQueryResponse::mutable_query() {
  
  if (query_ == NULL) {
    query_ = new ::google::datastore::v1::Query;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.RunQueryResponse.query)
  return query_;
}
inline ::google::datastore::v1::Query* RunQueryResponse::release_query() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.RunQueryResponse.query)
  
  ::google::datastore::v1::Query* temp = query_;
  query_ = NULL;
  return temp;
}
inline void RunQueryResponse::set_allocated_query(::google::datastore::v1::Query* query) {
  delete query_;
  query_ = query;
  if (query) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.RunQueryResponse.query)
}

inline const RunQueryResponse* RunQueryResponse::internal_default_instance() {
  return &RunQueryResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// BeginTransactionRequest

// optional string project_id = 8;
inline void BeginTransactionRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BeginTransactionRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.BeginTransactionRequest.project_id)
  return project_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BeginTransactionRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1.BeginTransactionRequest.project_id)
}
inline void BeginTransactionRequest::set_project_id(const char* value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1.BeginTransactionRequest.project_id)
}
inline void BeginTransactionRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1.BeginTransactionRequest.project_id)
}
inline ::std::string* BeginTransactionRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.BeginTransactionRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BeginTransactionRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.BeginTransactionRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BeginTransactionRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.BeginTransactionRequest.project_id)
}

inline const BeginTransactionRequest* BeginTransactionRequest::internal_default_instance() {
  return &BeginTransactionRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// BeginTransactionResponse

// optional bytes transaction = 1;
inline void BeginTransactionResponse::clear_transaction() {
  transaction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BeginTransactionResponse::transaction() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.BeginTransactionResponse.transaction)
  return transaction_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BeginTransactionResponse::set_transaction(const ::std::string& value) {
  
  transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1.BeginTransactionResponse.transaction)
}
inline void BeginTransactionResponse::set_transaction(const char* value) {
  
  transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1.BeginTransactionResponse.transaction)
}
inline void BeginTransactionResponse::set_transaction(const void* value, size_t size) {
  
  transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1.BeginTransactionResponse.transaction)
}
inline ::std::string* BeginTransactionResponse::mutable_transaction() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.BeginTransactionResponse.transaction)
  return transaction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BeginTransactionResponse::release_transaction() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.BeginTransactionResponse.transaction)
  
  return transaction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BeginTransactionResponse::set_allocated_transaction(::std::string* transaction) {
  if (transaction != NULL) {
    
  } else {
    
  }
  transaction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transaction);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.BeginTransactionResponse.transaction)
}

inline const BeginTransactionResponse* BeginTransactionResponse::internal_default_instance() {
  return &BeginTransactionResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// RollbackRequest

// optional string project_id = 8;
inline void RollbackRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RollbackRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.RollbackRequest.project_id)
  return project_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RollbackRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1.RollbackRequest.project_id)
}
inline void RollbackRequest::set_project_id(const char* value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1.RollbackRequest.project_id)
}
inline void RollbackRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1.RollbackRequest.project_id)
}
inline ::std::string* RollbackRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.RollbackRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RollbackRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.RollbackRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RollbackRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.RollbackRequest.project_id)
}

// optional bytes transaction = 1;
inline void RollbackRequest::clear_transaction() {
  transaction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RollbackRequest::transaction() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.RollbackRequest.transaction)
  return transaction_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RollbackRequest::set_transaction(const ::std::string& value) {
  
  transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1.RollbackRequest.transaction)
}
inline void RollbackRequest::set_transaction(const char* value) {
  
  transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1.RollbackRequest.transaction)
}
inline void RollbackRequest::set_transaction(const void* value, size_t size) {
  
  transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1.RollbackRequest.transaction)
}
inline ::std::string* RollbackRequest::mutable_transaction() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.RollbackRequest.transaction)
  return transaction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RollbackRequest::release_transaction() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.RollbackRequest.transaction)
  
  return transaction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RollbackRequest::set_allocated_transaction(::std::string* transaction) {
  if (transaction != NULL) {
    
  } else {
    
  }
  transaction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transaction);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.RollbackRequest.transaction)
}

inline const RollbackRequest* RollbackRequest::internal_default_instance() {
  return &RollbackRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// RollbackResponse

inline const RollbackResponse* RollbackResponse::internal_default_instance() {
  return &RollbackResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// CommitRequest

// optional string project_id = 8;
inline void CommitRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommitRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.CommitRequest.project_id)
  return project_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommitRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1.CommitRequest.project_id)
}
inline void CommitRequest::set_project_id(const char* value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1.CommitRequest.project_id)
}
inline void CommitRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1.CommitRequest.project_id)
}
inline ::std::string* CommitRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.CommitRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommitRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.CommitRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommitRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.CommitRequest.project_id)
}

// optional .google.datastore.v1.CommitRequest.Mode mode = 5;
inline void CommitRequest::clear_mode() {
  mode_ = 0;
}
inline ::google::datastore::v1::CommitRequest_Mode CommitRequest::mode() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.CommitRequest.mode)
  return static_cast< ::google::datastore::v1::CommitRequest_Mode >(mode_);
}
inline void CommitRequest::set_mode(::google::datastore::v1::CommitRequest_Mode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.v1.CommitRequest.mode)
}

// optional bytes transaction = 1;
inline bool CommitRequest::has_transaction() const {
  return transaction_selector_case() == kTransaction;
}
inline void CommitRequest::set_has_transaction() {
  _oneof_case_[0] = kTransaction;
}
inline void CommitRequest::clear_transaction() {
  if (has_transaction()) {
    transaction_selector_.transaction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_transaction_selector();
  }
}
inline const ::std::string& CommitRequest::transaction() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.CommitRequest.transaction)
  if (has_transaction()) {
    return transaction_selector_.transaction_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void CommitRequest::set_transaction(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.datastore.v1.CommitRequest.transaction)
  if (!has_transaction()) {
    clear_transaction_selector();
    set_has_transaction();
    transaction_selector_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  transaction_selector_.transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1.CommitRequest.transaction)
}
inline void CommitRequest::set_transaction(const char* value) {
  if (!has_transaction()) {
    clear_transaction_selector();
    set_has_transaction();
    transaction_selector_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  transaction_selector_.transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1.CommitRequest.transaction)
}
inline void CommitRequest::set_transaction(const void* value, size_t size) {
  if (!has_transaction()) {
    clear_transaction_selector();
    set_has_transaction();
    transaction_selector_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  transaction_selector_.transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1.CommitRequest.transaction)
}
inline ::std::string* CommitRequest::mutable_transaction() {
  if (!has_transaction()) {
    clear_transaction_selector();
    set_has_transaction();
    transaction_selector_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.CommitRequest.transaction)
  return transaction_selector_.transaction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommitRequest::release_transaction() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.CommitRequest.transaction)
  if (has_transaction()) {
    clear_has_transaction_selector();
    return transaction_selector_.transaction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void CommitRequest::set_allocated_transaction(::std::string* transaction) {
  if (!has_transaction()) {
    transaction_selector_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_transaction_selector();
  if (transaction != NULL) {
    set_has_transaction();
    transaction_selector_.transaction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        transaction);
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.CommitRequest.transaction)
}

// repeated .google.datastore.v1.Mutation mutations = 6;
inline int CommitRequest::mutations_size() const {
  return mutations_.size();
}
inline void CommitRequest::clear_mutations() {
  mutations_.Clear();
}
inline const ::google::datastore::v1::Mutation& CommitRequest::mutations(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.CommitRequest.mutations)
  return mutations_.Get(index);
}
inline ::google::datastore::v1::Mutation* CommitRequest::mutable_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.CommitRequest.mutations)
  return mutations_.Mutable(index);
}
inline ::google::datastore::v1::Mutation* CommitRequest::add_mutations() {
  // @@protoc_insertion_point(field_add:google.datastore.v1.CommitRequest.mutations)
  return mutations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Mutation >*
CommitRequest::mutable_mutations() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.v1.CommitRequest.mutations)
  return &mutations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Mutation >&
CommitRequest::mutations() const {
  // @@protoc_insertion_point(field_list:google.datastore.v1.CommitRequest.mutations)
  return mutations_;
}

inline bool CommitRequest::has_transaction_selector() const {
  return transaction_selector_case() != TRANSACTION_SELECTOR_NOT_SET;
}
inline void CommitRequest::clear_has_transaction_selector() {
  _oneof_case_[0] = TRANSACTION_SELECTOR_NOT_SET;
}
inline CommitRequest::TransactionSelectorCase CommitRequest::transaction_selector_case() const {
  return CommitRequest::TransactionSelectorCase(_oneof_case_[0]);
}
inline const CommitRequest* CommitRequest::internal_default_instance() {
  return &CommitRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// CommitResponse

// repeated .google.datastore.v1.MutationResult mutation_results = 3;
inline int CommitResponse::mutation_results_size() const {
  return mutation_results_.size();
}
inline void CommitResponse::clear_mutation_results() {
  mutation_results_.Clear();
}
inline const ::google::datastore::v1::MutationResult& CommitResponse::mutation_results(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.CommitResponse.mutation_results)
  return mutation_results_.Get(index);
}
inline ::google::datastore::v1::MutationResult* CommitResponse::mutable_mutation_results(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.CommitResponse.mutation_results)
  return mutation_results_.Mutable(index);
}
inline ::google::datastore::v1::MutationResult* CommitResponse::add_mutation_results() {
  // @@protoc_insertion_point(field_add:google.datastore.v1.CommitResponse.mutation_results)
  return mutation_results_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::MutationResult >*
CommitResponse::mutable_mutation_results() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.v1.CommitResponse.mutation_results)
  return &mutation_results_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::MutationResult >&
CommitResponse::mutation_results() const {
  // @@protoc_insertion_point(field_list:google.datastore.v1.CommitResponse.mutation_results)
  return mutation_results_;
}

// optional int32 index_updates = 4;
inline void CommitResponse::clear_index_updates() {
  index_updates_ = 0;
}
inline ::google::protobuf::int32 CommitResponse::index_updates() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.CommitResponse.index_updates)
  return index_updates_;
}
inline void CommitResponse::set_index_updates(::google::protobuf::int32 value) {
  
  index_updates_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.v1.CommitResponse.index_updates)
}

inline const CommitResponse* CommitResponse::internal_default_instance() {
  return &CommitResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// AllocateIdsRequest

// optional string project_id = 8;
inline void AllocateIdsRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AllocateIdsRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.AllocateIdsRequest.project_id)
  return project_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AllocateIdsRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1.AllocateIdsRequest.project_id)
}
inline void AllocateIdsRequest::set_project_id(const char* value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1.AllocateIdsRequest.project_id)
}
inline void AllocateIdsRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1.AllocateIdsRequest.project_id)
}
inline ::std::string* AllocateIdsRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.AllocateIdsRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AllocateIdsRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.AllocateIdsRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AllocateIdsRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.AllocateIdsRequest.project_id)
}

// repeated .google.datastore.v1.Key keys = 1;
inline int AllocateIdsRequest::keys_size() const {
  return keys_.size();
}
inline void AllocateIdsRequest::clear_keys() {
  keys_.Clear();
}
inline const ::google::datastore::v1::Key& AllocateIdsRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.AllocateIdsRequest.keys)
  return keys_.Get(index);
}
inline ::google::datastore::v1::Key* AllocateIdsRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.AllocateIdsRequest.keys)
  return keys_.Mutable(index);
}
inline ::google::datastore::v1::Key* AllocateIdsRequest::add_keys() {
  // @@protoc_insertion_point(field_add:google.datastore.v1.AllocateIdsRequest.keys)
  return keys_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Key >*
AllocateIdsRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.v1.AllocateIdsRequest.keys)
  return &keys_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Key >&
AllocateIdsRequest::keys() const {
  // @@protoc_insertion_point(field_list:google.datastore.v1.AllocateIdsRequest.keys)
  return keys_;
}

inline const AllocateIdsRequest* AllocateIdsRequest::internal_default_instance() {
  return &AllocateIdsRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// AllocateIdsResponse

// repeated .google.datastore.v1.Key keys = 1;
inline int AllocateIdsResponse::keys_size() const {
  return keys_.size();
}
inline void AllocateIdsResponse::clear_keys() {
  keys_.Clear();
}
inline const ::google::datastore::v1::Key& AllocateIdsResponse::keys(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.AllocateIdsResponse.keys)
  return keys_.Get(index);
}
inline ::google::datastore::v1::Key* AllocateIdsResponse::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.AllocateIdsResponse.keys)
  return keys_.Mutable(index);
}
inline ::google::datastore::v1::Key* AllocateIdsResponse::add_keys() {
  // @@protoc_insertion_point(field_add:google.datastore.v1.AllocateIdsResponse.keys)
  return keys_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Key >*
AllocateIdsResponse::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.v1.AllocateIdsResponse.keys)
  return &keys_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Key >&
AllocateIdsResponse::keys() const {
  // @@protoc_insertion_point(field_list:google.datastore.v1.AllocateIdsResponse.keys)
  return keys_;
}

inline const AllocateIdsResponse* AllocateIdsResponse::internal_default_instance() {
  return &AllocateIdsResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// Mutation

// optional .google.datastore.v1.Entity insert = 4;
inline bool Mutation::has_insert() const {
  return operation_case() == kInsert;
}
inline void Mutation::set_has_insert() {
  _oneof_case_[0] = kInsert;
}
inline void Mutation::clear_insert() {
  if (has_insert()) {
    delete operation_.insert_;
    clear_has_operation();
  }
}
inline  const ::google::datastore::v1::Entity& Mutation::insert() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.Mutation.insert)
  return has_insert()
      ? *operation_.insert_
      : ::google::datastore::v1::Entity::default_instance();
}
inline ::google::datastore::v1::Entity* Mutation::mutable_insert() {
  if (!has_insert()) {
    clear_operation();
    set_has_insert();
    operation_.insert_ = new ::google::datastore::v1::Entity;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.Mutation.insert)
  return operation_.insert_;
}
inline ::google::datastore::v1::Entity* Mutation::release_insert() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.Mutation.insert)
  if (has_insert()) {
    clear_has_operation();
    ::google::datastore::v1::Entity* temp = operation_.insert_;
    operation_.insert_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Mutation::set_allocated_insert(::google::datastore::v1::Entity* insert) {
  clear_operation();
  if (insert) {
    set_has_insert();
    operation_.insert_ = insert;
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.Mutation.insert)
}

// optional .google.datastore.v1.Entity update = 5;
inline bool Mutation::has_update() const {
  return operation_case() == kUpdate;
}
inline void Mutation::set_has_update() {
  _oneof_case_[0] = kUpdate;
}
inline void Mutation::clear_update() {
  if (has_update()) {
    delete operation_.update_;
    clear_has_operation();
  }
}
inline  const ::google::datastore::v1::Entity& Mutation::update() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.Mutation.update)
  return has_update()
      ? *operation_.update_
      : ::google::datastore::v1::Entity::default_instance();
}
inline ::google::datastore::v1::Entity* Mutation::mutable_update() {
  if (!has_update()) {
    clear_operation();
    set_has_update();
    operation_.update_ = new ::google::datastore::v1::Entity;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.Mutation.update)
  return operation_.update_;
}
inline ::google::datastore::v1::Entity* Mutation::release_update() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.Mutation.update)
  if (has_update()) {
    clear_has_operation();
    ::google::datastore::v1::Entity* temp = operation_.update_;
    operation_.update_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Mutation::set_allocated_update(::google::datastore::v1::Entity* update) {
  clear_operation();
  if (update) {
    set_has_update();
    operation_.update_ = update;
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.Mutation.update)
}

// optional .google.datastore.v1.Entity upsert = 6;
inline bool Mutation::has_upsert() const {
  return operation_case() == kUpsert;
}
inline void Mutation::set_has_upsert() {
  _oneof_case_[0] = kUpsert;
}
inline void Mutation::clear_upsert() {
  if (has_upsert()) {
    delete operation_.upsert_;
    clear_has_operation();
  }
}
inline  const ::google::datastore::v1::Entity& Mutation::upsert() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.Mutation.upsert)
  return has_upsert()
      ? *operation_.upsert_
      : ::google::datastore::v1::Entity::default_instance();
}
inline ::google::datastore::v1::Entity* Mutation::mutable_upsert() {
  if (!has_upsert()) {
    clear_operation();
    set_has_upsert();
    operation_.upsert_ = new ::google::datastore::v1::Entity;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.Mutation.upsert)
  return operation_.upsert_;
}
inline ::google::datastore::v1::Entity* Mutation::release_upsert() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.Mutation.upsert)
  if (has_upsert()) {
    clear_has_operation();
    ::google::datastore::v1::Entity* temp = operation_.upsert_;
    operation_.upsert_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Mutation::set_allocated_upsert(::google::datastore::v1::Entity* upsert) {
  clear_operation();
  if (upsert) {
    set_has_upsert();
    operation_.upsert_ = upsert;
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.Mutation.upsert)
}

// optional .google.datastore.v1.Key delete = 7;
inline bool Mutation::has_delete_() const {
  return operation_case() == kDelete;
}
inline void Mutation::set_has_delete_() {
  _oneof_case_[0] = kDelete;
}
inline void Mutation::clear_delete_() {
  if (has_delete_()) {
    delete operation_.delete__;
    clear_has_operation();
  }
}
inline  const ::google::datastore::v1::Key& Mutation::delete_() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.Mutation.delete)
  return has_delete_()
      ? *operation_.delete__
      : ::google::datastore::v1::Key::default_instance();
}
inline ::google::datastore::v1::Key* Mutation::mutable_delete_() {
  if (!has_delete_()) {
    clear_operation();
    set_has_delete_();
    operation_.delete__ = new ::google::datastore::v1::Key;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.Mutation.delete)
  return operation_.delete__;
}
inline ::google::datastore::v1::Key* Mutation::release_delete_() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.Mutation.delete)
  if (has_delete_()) {
    clear_has_operation();
    ::google::datastore::v1::Key* temp = operation_.delete__;
    operation_.delete__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Mutation::set_allocated_delete_(::google::datastore::v1::Key* delete_) {
  clear_operation();
  if (delete_) {
    set_has_delete_();
    operation_.delete__ = delete_;
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.Mutation.delete)
}

// optional int64 base_version = 8;
inline bool Mutation::has_base_version() const {
  return conflict_detection_strategy_case() == kBaseVersion;
}
inline void Mutation::set_has_base_version() {
  _oneof_case_[1] = kBaseVersion;
}
inline void Mutation::clear_base_version() {
  if (has_base_version()) {
    conflict_detection_strategy_.base_version_ = GOOGLE_LONGLONG(0);
    clear_has_conflict_detection_strategy();
  }
}
inline ::google::protobuf::int64 Mutation::base_version() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.Mutation.base_version)
  if (has_base_version()) {
    return conflict_detection_strategy_.base_version_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void Mutation::set_base_version(::google::protobuf::int64 value) {
  if (!has_base_version()) {
    clear_conflict_detection_strategy();
    set_has_base_version();
  }
  conflict_detection_strategy_.base_version_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.v1.Mutation.base_version)
}

inline bool Mutation::has_operation() const {
  return operation_case() != OPERATION_NOT_SET;
}
inline void Mutation::clear_has_operation() {
  _oneof_case_[0] = OPERATION_NOT_SET;
}
inline bool Mutation::has_conflict_detection_strategy() const {
  return conflict_detection_strategy_case() != CONFLICT_DETECTION_STRATEGY_NOT_SET;
}
inline void Mutation::clear_has_conflict_detection_strategy() {
  _oneof_case_[1] = CONFLICT_DETECTION_STRATEGY_NOT_SET;
}
inline Mutation::OperationCase Mutation::operation_case() const {
  return Mutation::OperationCase(_oneof_case_[0]);
}
inline Mutation::ConflictDetectionStrategyCase Mutation::conflict_detection_strategy_case() const {
  return Mutation::ConflictDetectionStrategyCase(_oneof_case_[1]);
}
inline const Mutation* Mutation::internal_default_instance() {
  return &Mutation_default_instance_.get();
}
// -------------------------------------------------------------------

// MutationResult

// optional .google.datastore.v1.Key key = 3;
inline bool MutationResult::has_key() const {
  return this != internal_default_instance() && key_ != NULL;
}
inline void MutationResult::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
inline const ::google::datastore::v1::Key& MutationResult::key() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.MutationResult.key)
  return key_ != NULL ? *key_
                         : *::google::datastore::v1::Key::internal_default_instance();
}
inline ::google::datastore::v1::Key* MutationResult::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::google::datastore::v1::Key;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.MutationResult.key)
  return key_;
}
inline ::google::datastore::v1::Key* MutationResult::release_key() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.MutationResult.key)
  
  ::google::datastore::v1::Key* temp = key_;
  key_ = NULL;
  return temp;
}
inline void MutationResult::set_allocated_key(::google::datastore::v1::Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.MutationResult.key)
}

// optional int64 version = 4;
inline void MutationResult::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MutationResult::version() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.MutationResult.version)
  return version_;
}
inline void MutationResult::set_version(::google::protobuf::int64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.v1.MutationResult.version)
}

// optional bool conflict_detected = 5;
inline void MutationResult::clear_conflict_detected() {
  conflict_detected_ = false;
}
inline bool MutationResult::conflict_detected() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.MutationResult.conflict_detected)
  return conflict_detected_;
}
inline void MutationResult::set_conflict_detected(bool value) {
  
  conflict_detected_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.v1.MutationResult.conflict_detected)
}

inline const MutationResult* MutationResult::internal_default_instance() {
  return &MutationResult_default_instance_.get();
}
// -------------------------------------------------------------------

// ReadOptions

// optional .google.datastore.v1.ReadOptions.ReadConsistency read_consistency = 1;
inline bool ReadOptions::has_read_consistency() const {
  return consistency_type_case() == kReadConsistency;
}
inline void ReadOptions::set_has_read_consistency() {
  _oneof_case_[0] = kReadConsistency;
}
inline void ReadOptions::clear_read_consistency() {
  if (has_read_consistency()) {
    consistency_type_.read_consistency_ = 0;
    clear_has_consistency_type();
  }
}
inline ::google::datastore::v1::ReadOptions_ReadConsistency ReadOptions::read_consistency() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.ReadOptions.read_consistency)
  if (has_read_consistency()) {
    return static_cast< ::google::datastore::v1::ReadOptions_ReadConsistency >(consistency_type_.read_consistency_);
  }
  return static_cast< ::google::datastore::v1::ReadOptions_ReadConsistency >(0);
}
inline void ReadOptions::set_read_consistency(::google::datastore::v1::ReadOptions_ReadConsistency value) {
  if (!has_read_consistency()) {
    clear_consistency_type();
    set_has_read_consistency();
  }
  consistency_type_.read_consistency_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.v1.ReadOptions.read_consistency)
}

// optional bytes transaction = 2;
inline bool ReadOptions::has_transaction() const {
  return consistency_type_case() == kTransaction;
}
inline void ReadOptions::set_has_transaction() {
  _oneof_case_[0] = kTransaction;
}
inline void ReadOptions::clear_transaction() {
  if (has_transaction()) {
    consistency_type_.transaction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_consistency_type();
  }
}
inline const ::std::string& ReadOptions::transaction() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.ReadOptions.transaction)
  if (has_transaction()) {
    return consistency_type_.transaction_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ReadOptions::set_transaction(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.datastore.v1.ReadOptions.transaction)
  if (!has_transaction()) {
    clear_consistency_type();
    set_has_transaction();
    consistency_type_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  consistency_type_.transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1.ReadOptions.transaction)
}
inline void ReadOptions::set_transaction(const char* value) {
  if (!has_transaction()) {
    clear_consistency_type();
    set_has_transaction();
    consistency_type_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  consistency_type_.transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1.ReadOptions.transaction)
}
inline void ReadOptions::set_transaction(const void* value, size_t size) {
  if (!has_transaction()) {
    clear_consistency_type();
    set_has_transaction();
    consistency_type_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  consistency_type_.transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1.ReadOptions.transaction)
}
inline ::std::string* ReadOptions::mutable_transaction() {
  if (!has_transaction()) {
    clear_consistency_type();
    set_has_transaction();
    consistency_type_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.ReadOptions.transaction)
  return consistency_type_.transaction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadOptions::release_transaction() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.ReadOptions.transaction)
  if (has_transaction()) {
    clear_has_consistency_type();
    return consistency_type_.transaction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void ReadOptions::set_allocated_transaction(::std::string* transaction) {
  if (!has_transaction()) {
    consistency_type_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_consistency_type();
  if (transaction != NULL) {
    set_has_transaction();
    consistency_type_.transaction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        transaction);
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.ReadOptions.transaction)
}

inline bool ReadOptions::has_consistency_type() const {
  return consistency_type_case() != CONSISTENCY_TYPE_NOT_SET;
}
inline void ReadOptions::clear_has_consistency_type() {
  _oneof_case_[0] = CONSISTENCY_TYPE_NOT_SET;
}
inline ReadOptions::ConsistencyTypeCase ReadOptions::consistency_type_case() const {
  return ReadOptions::ConsistencyTypeCase(_oneof_case_[0]);
}
inline const ReadOptions* ReadOptions::internal_default_instance() {
  return &ReadOptions_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace datastore
}  // namespace google

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::datastore::v1::CommitRequest_Mode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::datastore::v1::CommitRequest_Mode>() {
  return ::google::datastore::v1::CommitRequest_Mode_descriptor();
}
template <> struct is_proto_enum< ::google::datastore::v1::ReadOptions_ReadConsistency> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::datastore::v1::ReadOptions_ReadConsistency>() {
  return ::google::datastore::v1::ReadOptions_ReadConsistency_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fdatastore_2fv1_2fdatastore_2eproto__INCLUDED
