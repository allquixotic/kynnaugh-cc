// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/auth.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/api/auth.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace api {

namespace {

const ::google::protobuf::Descriptor* Authentication_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Authentication_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthenticationRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthenticationRule_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthProvider_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthProvider_reflection_ = NULL;
const ::google::protobuf::Descriptor* OAuthRequirements_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OAuthRequirements_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthRequirement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthRequirement_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_google_2fapi_2fauth_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_google_2fapi_2fauth_2eproto() {
  protobuf_AddDesc_google_2fapi_2fauth_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "google/api/auth.proto");
  GOOGLE_CHECK(file != NULL);
  Authentication_descriptor_ = file->message_type(0);
  static const int Authentication_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Authentication, rules_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Authentication, providers_),
  };
  Authentication_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Authentication_descriptor_,
      Authentication::internal_default_instance(),
      Authentication_offsets_,
      -1,
      -1,
      -1,
      sizeof(Authentication),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Authentication, _internal_metadata_));
  AuthenticationRule_descriptor_ = file->message_type(1);
  static const int AuthenticationRule_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticationRule, selector_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticationRule, oauth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticationRule, allow_without_credential_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticationRule, requirements_),
  };
  AuthenticationRule_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AuthenticationRule_descriptor_,
      AuthenticationRule::internal_default_instance(),
      AuthenticationRule_offsets_,
      -1,
      -1,
      -1,
      sizeof(AuthenticationRule),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticationRule, _internal_metadata_));
  AuthProvider_descriptor_ = file->message_type(2);
  static const int AuthProvider_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthProvider, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthProvider, issuer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthProvider, jwks_uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthProvider, audiences_),
  };
  AuthProvider_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AuthProvider_descriptor_,
      AuthProvider::internal_default_instance(),
      AuthProvider_offsets_,
      -1,
      -1,
      -1,
      sizeof(AuthProvider),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthProvider, _internal_metadata_));
  OAuthRequirements_descriptor_ = file->message_type(3);
  static const int OAuthRequirements_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OAuthRequirements, canonical_scopes_),
  };
  OAuthRequirements_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OAuthRequirements_descriptor_,
      OAuthRequirements::internal_default_instance(),
      OAuthRequirements_offsets_,
      -1,
      -1,
      -1,
      sizeof(OAuthRequirements),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OAuthRequirements, _internal_metadata_));
  AuthRequirement_descriptor_ = file->message_type(4);
  static const int AuthRequirement_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRequirement, provider_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRequirement, audiences_),
  };
  AuthRequirement_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AuthRequirement_descriptor_,
      AuthRequirement::internal_default_instance(),
      AuthRequirement_offsets_,
      -1,
      -1,
      -1,
      sizeof(AuthRequirement),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRequirement, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_google_2fapi_2fauth_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Authentication_descriptor_, Authentication::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AuthenticationRule_descriptor_, AuthenticationRule::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AuthProvider_descriptor_, AuthProvider::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OAuthRequirements_descriptor_, OAuthRequirements::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AuthRequirement_descriptor_, AuthRequirement::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_google_2fapi_2fauth_2eproto() {
  Authentication_default_instance_.Shutdown();
  delete Authentication_reflection_;
  AuthenticationRule_default_instance_.Shutdown();
  delete AuthenticationRule_reflection_;
  AuthProvider_default_instance_.Shutdown();
  delete AuthProvider_reflection_;
  OAuthRequirements_default_instance_.Shutdown();
  delete OAuthRequirements_reflection_;
  AuthRequirement_default_instance_.Shutdown();
  delete AuthRequirement_reflection_;
}

void protobuf_InitDefaults_google_2fapi_2fauth_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::api::protobuf_InitDefaults_google_2fapi_2fannotations_2eproto();
  Authentication_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  AuthenticationRule_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  AuthProvider_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  OAuthRequirements_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  AuthRequirement_default_instance_.DefaultConstruct();
  Authentication_default_instance_.get_mutable()->InitAsDefaultInstance();
  AuthenticationRule_default_instance_.get_mutable()->InitAsDefaultInstance();
  AuthProvider_default_instance_.get_mutable()->InitAsDefaultInstance();
  OAuthRequirements_default_instance_.get_mutable()->InitAsDefaultInstance();
  AuthRequirement_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_google_2fapi_2fauth_2eproto_once_);
void protobuf_InitDefaults_google_2fapi_2fauth_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_google_2fapi_2fauth_2eproto_once_,
                 &protobuf_InitDefaults_google_2fapi_2fauth_2eproto_impl);
}
void protobuf_AddDesc_google_2fapi_2fauth_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_google_2fapi_2fauth_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025google/api/auth.proto\022\ngoogle.api\032\034goo"
    "gle/api/annotations.proto\"l\n\016Authenticat"
    "ion\022-\n\005rules\030\003 \003(\0132\036.google.api.Authenti"
    "cationRule\022+\n\tproviders\030\004 \003(\0132\030.google.a"
    "pi.AuthProvider\"\251\001\n\022AuthenticationRule\022\020"
    "\n\010selector\030\001 \001(\t\022,\n\005oauth\030\002 \001(\0132\035.google"
    ".api.OAuthRequirements\022 \n\030allow_without_"
    "credential\030\005 \001(\010\0221\n\014requirements\030\007 \003(\0132\033"
    ".google.api.AuthRequirement\"O\n\014AuthProvi"
    "der\022\n\n\002id\030\001 \001(\t\022\016\n\006issuer\030\002 \001(\t\022\020\n\010jwks_"
    "uri\030\003 \001(\t\022\021\n\taudiences\030\004 \001(\t\"-\n\021OAuthReq"
    "uirements\022\030\n\020canonical_scopes\030\001 \001(\t\"9\n\017A"
    "uthRequirement\022\023\n\013provider_id\030\001 \001(\t\022\021\n\ta"
    "udiences\030\002 \001(\tBk\n\016com.google.apiB\tAuthPr"
    "otoP\001ZEgoogle.golang.org/genproto/google"
    "apis/api/serviceconfig;serviceconfig\242\002\004G"
    "APIb\006proto3", 651);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/api/auth.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_AddDesc_google_2fapi_2fannotations_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_google_2fapi_2fauth_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_google_2fapi_2fauth_2eproto_once_);
void protobuf_AddDesc_google_2fapi_2fauth_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_google_2fapi_2fauth_2eproto_once_,
                 &protobuf_AddDesc_google_2fapi_2fauth_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_google_2fapi_2fauth_2eproto {
  StaticDescriptorInitializer_google_2fapi_2fauth_2eproto() {
    protobuf_AddDesc_google_2fapi_2fauth_2eproto();
  }
} static_descriptor_initializer_google_2fapi_2fauth_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Authentication::kRulesFieldNumber;
const int Authentication::kProvidersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Authentication::Authentication()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fapi_2fauth_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.Authentication)
}

void Authentication::InitAsDefaultInstance() {
}

Authentication::Authentication(const Authentication& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.api.Authentication)
}

void Authentication::SharedCtor() {
  _cached_size_ = 0;
}

Authentication::~Authentication() {
  // @@protoc_insertion_point(destructor:google.api.Authentication)
  SharedDtor();
}

void Authentication::SharedDtor() {
}

void Authentication::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Authentication::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Authentication_descriptor_;
}

const Authentication& Authentication::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fauth_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Authentication> Authentication_default_instance_;

Authentication* Authentication::New(::google::protobuf::Arena* arena) const {
  Authentication* n = new Authentication;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Authentication::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.Authentication)
  rules_.Clear();
  providers_.Clear();
}

bool Authentication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.Authentication)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.api.AuthenticationRule rules = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_rules()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_rules;
        if (input->ExpectTag(34)) goto parse_loop_providers;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .google.api.AuthProvider providers = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_providers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_providers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_providers;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.Authentication)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.Authentication)
  return false;
#undef DO_
}

void Authentication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.Authentication)
  // repeated .google.api.AuthenticationRule rules = 3;
  for (unsigned int i = 0, n = this->rules_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rules(i), output);
  }

  // repeated .google.api.AuthProvider providers = 4;
  for (unsigned int i = 0, n = this->providers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->providers(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.Authentication)
}

::google::protobuf::uint8* Authentication::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.Authentication)
  // repeated .google.api.AuthenticationRule rules = 3;
  for (unsigned int i = 0, n = this->rules_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->rules(i), false, target);
  }

  // repeated .google.api.AuthProvider providers = 4;
  for (unsigned int i = 0, n = this->providers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->providers(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.Authentication)
  return target;
}

size_t Authentication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.Authentication)
  size_t total_size = 0;

  // repeated .google.api.AuthenticationRule rules = 3;
  {
    unsigned int count = this->rules_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rules(i));
    }
  }

  // repeated .google.api.AuthProvider providers = 4;
  {
    unsigned int count = this->providers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->providers(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Authentication::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.Authentication)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Authentication* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Authentication>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.Authentication)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.Authentication)
    UnsafeMergeFrom(*source);
  }
}

void Authentication::MergeFrom(const Authentication& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.Authentication)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Authentication::UnsafeMergeFrom(const Authentication& from) {
  GOOGLE_DCHECK(&from != this);
  rules_.MergeFrom(from.rules_);
  providers_.MergeFrom(from.providers_);
}

void Authentication::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.Authentication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Authentication::CopyFrom(const Authentication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.Authentication)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Authentication::IsInitialized() const {

  return true;
}

void Authentication::Swap(Authentication* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Authentication::InternalSwap(Authentication* other) {
  rules_.UnsafeArenaSwap(&other->rules_);
  providers_.UnsafeArenaSwap(&other->providers_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Authentication::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Authentication_descriptor_;
  metadata.reflection = Authentication_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Authentication

// repeated .google.api.AuthenticationRule rules = 3;
int Authentication::rules_size() const {
  return rules_.size();
}
void Authentication::clear_rules() {
  rules_.Clear();
}
const ::google::api::AuthenticationRule& Authentication::rules(int index) const {
  // @@protoc_insertion_point(field_get:google.api.Authentication.rules)
  return rules_.Get(index);
}
::google::api::AuthenticationRule* Authentication::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.Authentication.rules)
  return rules_.Mutable(index);
}
::google::api::AuthenticationRule* Authentication::add_rules() {
  // @@protoc_insertion_point(field_add:google.api.Authentication.rules)
  return rules_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::api::AuthenticationRule >*
Authentication::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:google.api.Authentication.rules)
  return &rules_;
}
const ::google::protobuf::RepeatedPtrField< ::google::api::AuthenticationRule >&
Authentication::rules() const {
  // @@protoc_insertion_point(field_list:google.api.Authentication.rules)
  return rules_;
}

// repeated .google.api.AuthProvider providers = 4;
int Authentication::providers_size() const {
  return providers_.size();
}
void Authentication::clear_providers() {
  providers_.Clear();
}
const ::google::api::AuthProvider& Authentication::providers(int index) const {
  // @@protoc_insertion_point(field_get:google.api.Authentication.providers)
  return providers_.Get(index);
}
::google::api::AuthProvider* Authentication::mutable_providers(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.Authentication.providers)
  return providers_.Mutable(index);
}
::google::api::AuthProvider* Authentication::add_providers() {
  // @@protoc_insertion_point(field_add:google.api.Authentication.providers)
  return providers_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::api::AuthProvider >*
Authentication::mutable_providers() {
  // @@protoc_insertion_point(field_mutable_list:google.api.Authentication.providers)
  return &providers_;
}
const ::google::protobuf::RepeatedPtrField< ::google::api::AuthProvider >&
Authentication::providers() const {
  // @@protoc_insertion_point(field_list:google.api.Authentication.providers)
  return providers_;
}

inline const Authentication* Authentication::internal_default_instance() {
  return &Authentication_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthenticationRule::kSelectorFieldNumber;
const int AuthenticationRule::kOauthFieldNumber;
const int AuthenticationRule::kAllowWithoutCredentialFieldNumber;
const int AuthenticationRule::kRequirementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthenticationRule::AuthenticationRule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fapi_2fauth_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.AuthenticationRule)
}

void AuthenticationRule::InitAsDefaultInstance() {
  oauth_ = const_cast< ::google::api::OAuthRequirements*>(
      ::google::api::OAuthRequirements::internal_default_instance());
}

AuthenticationRule::AuthenticationRule(const AuthenticationRule& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.api.AuthenticationRule)
}

void AuthenticationRule::SharedCtor() {
  selector_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oauth_ = NULL;
  allow_without_credential_ = false;
  _cached_size_ = 0;
}

AuthenticationRule::~AuthenticationRule() {
  // @@protoc_insertion_point(destructor:google.api.AuthenticationRule)
  SharedDtor();
}

void AuthenticationRule::SharedDtor() {
  selector_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &AuthenticationRule_default_instance_.get()) {
    delete oauth_;
  }
}

void AuthenticationRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthenticationRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthenticationRule_descriptor_;
}

const AuthenticationRule& AuthenticationRule::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fauth_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AuthenticationRule> AuthenticationRule_default_instance_;

AuthenticationRule* AuthenticationRule::New(::google::protobuf::Arena* arena) const {
  AuthenticationRule* n = new AuthenticationRule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthenticationRule::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.AuthenticationRule)
  selector_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && oauth_ != NULL) delete oauth_;
  oauth_ = NULL;
  allow_without_credential_ = false;
  requirements_.Clear();
}

bool AuthenticationRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.AuthenticationRule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string selector = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_selector()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->selector().data(), this->selector().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.AuthenticationRule.selector"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_oauth;
        break;
      }

      // optional .google.api.OAuthRequirements oauth = 2;
      case 2: {
        if (tag == 18) {
         parse_oauth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oauth()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_allow_without_credential;
        break;
      }

      // optional bool allow_without_credential = 5;
      case 5: {
        if (tag == 40) {
         parse_allow_without_credential:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_without_credential_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_requirements;
        break;
      }

      // repeated .google.api.AuthRequirement requirements = 7;
      case 7: {
        if (tag == 58) {
         parse_requirements:
          DO_(input->IncrementRecursionDepth());
         parse_loop_requirements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_requirements()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_requirements;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.AuthenticationRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.AuthenticationRule)
  return false;
#undef DO_
}

void AuthenticationRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.AuthenticationRule)
  // optional string selector = 1;
  if (this->selector().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->selector().data(), this->selector().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.AuthenticationRule.selector");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->selector(), output);
  }

  // optional .google.api.OAuthRequirements oauth = 2;
  if (this->has_oauth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->oauth_, output);
  }

  // optional bool allow_without_credential = 5;
  if (this->allow_without_credential() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->allow_without_credential(), output);
  }

  // repeated .google.api.AuthRequirement requirements = 7;
  for (unsigned int i = 0, n = this->requirements_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->requirements(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.AuthenticationRule)
}

::google::protobuf::uint8* AuthenticationRule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.AuthenticationRule)
  // optional string selector = 1;
  if (this->selector().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->selector().data(), this->selector().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.AuthenticationRule.selector");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->selector(), target);
  }

  // optional .google.api.OAuthRequirements oauth = 2;
  if (this->has_oauth()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->oauth_, false, target);
  }

  // optional bool allow_without_credential = 5;
  if (this->allow_without_credential() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->allow_without_credential(), target);
  }

  // repeated .google.api.AuthRequirement requirements = 7;
  for (unsigned int i = 0, n = this->requirements_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->requirements(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.AuthenticationRule)
  return target;
}

size_t AuthenticationRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.AuthenticationRule)
  size_t total_size = 0;

  // optional string selector = 1;
  if (this->selector().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->selector());
  }

  // optional .google.api.OAuthRequirements oauth = 2;
  if (this->has_oauth()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->oauth_);
  }

  // optional bool allow_without_credential = 5;
  if (this->allow_without_credential() != 0) {
    total_size += 1 + 1;
  }

  // repeated .google.api.AuthRequirement requirements = 7;
  {
    unsigned int count = this->requirements_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->requirements(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticationRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.AuthenticationRule)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AuthenticationRule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthenticationRule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.AuthenticationRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.AuthenticationRule)
    UnsafeMergeFrom(*source);
  }
}

void AuthenticationRule::MergeFrom(const AuthenticationRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.AuthenticationRule)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AuthenticationRule::UnsafeMergeFrom(const AuthenticationRule& from) {
  GOOGLE_DCHECK(&from != this);
  requirements_.MergeFrom(from.requirements_);
  if (from.selector().size() > 0) {

    selector_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.selector_);
  }
  if (from.has_oauth()) {
    mutable_oauth()->::google::api::OAuthRequirements::MergeFrom(from.oauth());
  }
  if (from.allow_without_credential() != 0) {
    set_allow_without_credential(from.allow_without_credential());
  }
}

void AuthenticationRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.AuthenticationRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticationRule::CopyFrom(const AuthenticationRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.AuthenticationRule)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AuthenticationRule::IsInitialized() const {

  return true;
}

void AuthenticationRule::Swap(AuthenticationRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticationRule::InternalSwap(AuthenticationRule* other) {
  selector_.Swap(&other->selector_);
  std::swap(oauth_, other->oauth_);
  std::swap(allow_without_credential_, other->allow_without_credential_);
  requirements_.UnsafeArenaSwap(&other->requirements_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthenticationRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthenticationRule_descriptor_;
  metadata.reflection = AuthenticationRule_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthenticationRule

// optional string selector = 1;
void AuthenticationRule::clear_selector() {
  selector_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthenticationRule::selector() const {
  // @@protoc_insertion_point(field_get:google.api.AuthenticationRule.selector)
  return selector_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticationRule::set_selector(const ::std::string& value) {
  
  selector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.AuthenticationRule.selector)
}
void AuthenticationRule::set_selector(const char* value) {
  
  selector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.AuthenticationRule.selector)
}
void AuthenticationRule::set_selector(const char* value, size_t size) {
  
  selector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.AuthenticationRule.selector)
}
::std::string* AuthenticationRule::mutable_selector() {
  
  // @@protoc_insertion_point(field_mutable:google.api.AuthenticationRule.selector)
  return selector_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticationRule::release_selector() {
  // @@protoc_insertion_point(field_release:google.api.AuthenticationRule.selector)
  
  return selector_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticationRule::set_allocated_selector(::std::string* selector) {
  if (selector != NULL) {
    
  } else {
    
  }
  selector_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), selector);
  // @@protoc_insertion_point(field_set_allocated:google.api.AuthenticationRule.selector)
}

// optional .google.api.OAuthRequirements oauth = 2;
bool AuthenticationRule::has_oauth() const {
  return this != internal_default_instance() && oauth_ != NULL;
}
void AuthenticationRule::clear_oauth() {
  if (GetArenaNoVirtual() == NULL && oauth_ != NULL) delete oauth_;
  oauth_ = NULL;
}
const ::google::api::OAuthRequirements& AuthenticationRule::oauth() const {
  // @@protoc_insertion_point(field_get:google.api.AuthenticationRule.oauth)
  return oauth_ != NULL ? *oauth_
                         : *::google::api::OAuthRequirements::internal_default_instance();
}
::google::api::OAuthRequirements* AuthenticationRule::mutable_oauth() {
  
  if (oauth_ == NULL) {
    oauth_ = new ::google::api::OAuthRequirements;
  }
  // @@protoc_insertion_point(field_mutable:google.api.AuthenticationRule.oauth)
  return oauth_;
}
::google::api::OAuthRequirements* AuthenticationRule::release_oauth() {
  // @@protoc_insertion_point(field_release:google.api.AuthenticationRule.oauth)
  
  ::google::api::OAuthRequirements* temp = oauth_;
  oauth_ = NULL;
  return temp;
}
void AuthenticationRule::set_allocated_oauth(::google::api::OAuthRequirements* oauth) {
  delete oauth_;
  oauth_ = oauth;
  if (oauth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.AuthenticationRule.oauth)
}

// optional bool allow_without_credential = 5;
void AuthenticationRule::clear_allow_without_credential() {
  allow_without_credential_ = false;
}
bool AuthenticationRule::allow_without_credential() const {
  // @@protoc_insertion_point(field_get:google.api.AuthenticationRule.allow_without_credential)
  return allow_without_credential_;
}
void AuthenticationRule::set_allow_without_credential(bool value) {
  
  allow_without_credential_ = value;
  // @@protoc_insertion_point(field_set:google.api.AuthenticationRule.allow_without_credential)
}

// repeated .google.api.AuthRequirement requirements = 7;
int AuthenticationRule::requirements_size() const {
  return requirements_.size();
}
void AuthenticationRule::clear_requirements() {
  requirements_.Clear();
}
const ::google::api::AuthRequirement& AuthenticationRule::requirements(int index) const {
  // @@protoc_insertion_point(field_get:google.api.AuthenticationRule.requirements)
  return requirements_.Get(index);
}
::google::api::AuthRequirement* AuthenticationRule::mutable_requirements(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.AuthenticationRule.requirements)
  return requirements_.Mutable(index);
}
::google::api::AuthRequirement* AuthenticationRule::add_requirements() {
  // @@protoc_insertion_point(field_add:google.api.AuthenticationRule.requirements)
  return requirements_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::api::AuthRequirement >*
AuthenticationRule::mutable_requirements() {
  // @@protoc_insertion_point(field_mutable_list:google.api.AuthenticationRule.requirements)
  return &requirements_;
}
const ::google::protobuf::RepeatedPtrField< ::google::api::AuthRequirement >&
AuthenticationRule::requirements() const {
  // @@protoc_insertion_point(field_list:google.api.AuthenticationRule.requirements)
  return requirements_;
}

inline const AuthenticationRule* AuthenticationRule::internal_default_instance() {
  return &AuthenticationRule_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthProvider::kIdFieldNumber;
const int AuthProvider::kIssuerFieldNumber;
const int AuthProvider::kJwksUriFieldNumber;
const int AuthProvider::kAudiencesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthProvider::AuthProvider()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fapi_2fauth_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.AuthProvider)
}

void AuthProvider::InitAsDefaultInstance() {
}

AuthProvider::AuthProvider(const AuthProvider& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.api.AuthProvider)
}

void AuthProvider::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  issuer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jwks_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audiences_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AuthProvider::~AuthProvider() {
  // @@protoc_insertion_point(destructor:google.api.AuthProvider)
  SharedDtor();
}

void AuthProvider::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  issuer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jwks_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audiences_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthProvider::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthProvider::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthProvider_descriptor_;
}

const AuthProvider& AuthProvider::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fauth_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AuthProvider> AuthProvider_default_instance_;

AuthProvider* AuthProvider::New(::google::protobuf::Arena* arena) const {
  AuthProvider* n = new AuthProvider;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthProvider::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.AuthProvider)
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  issuer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jwks_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audiences_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AuthProvider::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.AuthProvider)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.AuthProvider.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_issuer;
        break;
      }

      // optional string issuer = 2;
      case 2: {
        if (tag == 18) {
         parse_issuer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_issuer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->issuer().data(), this->issuer().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.AuthProvider.issuer"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_jwks_uri;
        break;
      }

      // optional string jwks_uri = 3;
      case 3: {
        if (tag == 26) {
         parse_jwks_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jwks_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->jwks_uri().data(), this->jwks_uri().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.AuthProvider.jwks_uri"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_audiences;
        break;
      }

      // optional string audiences = 4;
      case 4: {
        if (tag == 34) {
         parse_audiences:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_audiences()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->audiences().data(), this->audiences().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.AuthProvider.audiences"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.AuthProvider)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.AuthProvider)
  return false;
#undef DO_
}

void AuthProvider::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.AuthProvider)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.AuthProvider.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string issuer = 2;
  if (this->issuer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->issuer().data(), this->issuer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.AuthProvider.issuer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->issuer(), output);
  }

  // optional string jwks_uri = 3;
  if (this->jwks_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->jwks_uri().data(), this->jwks_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.AuthProvider.jwks_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->jwks_uri(), output);
  }

  // optional string audiences = 4;
  if (this->audiences().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->audiences().data(), this->audiences().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.AuthProvider.audiences");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->audiences(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.AuthProvider)
}

::google::protobuf::uint8* AuthProvider::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.AuthProvider)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.AuthProvider.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string issuer = 2;
  if (this->issuer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->issuer().data(), this->issuer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.AuthProvider.issuer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->issuer(), target);
  }

  // optional string jwks_uri = 3;
  if (this->jwks_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->jwks_uri().data(), this->jwks_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.AuthProvider.jwks_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->jwks_uri(), target);
  }

  // optional string audiences = 4;
  if (this->audiences().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->audiences().data(), this->audiences().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.AuthProvider.audiences");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->audiences(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.AuthProvider)
  return target;
}

size_t AuthProvider::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.AuthProvider)
  size_t total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional string issuer = 2;
  if (this->issuer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->issuer());
  }

  // optional string jwks_uri = 3;
  if (this->jwks_uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->jwks_uri());
  }

  // optional string audiences = 4;
  if (this->audiences().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->audiences());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthProvider::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.AuthProvider)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AuthProvider* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthProvider>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.AuthProvider)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.AuthProvider)
    UnsafeMergeFrom(*source);
  }
}

void AuthProvider::MergeFrom(const AuthProvider& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.AuthProvider)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AuthProvider::UnsafeMergeFrom(const AuthProvider& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.issuer().size() > 0) {

    issuer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.issuer_);
  }
  if (from.jwks_uri().size() > 0) {

    jwks_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.jwks_uri_);
  }
  if (from.audiences().size() > 0) {

    audiences_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.audiences_);
  }
}

void AuthProvider::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.AuthProvider)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthProvider::CopyFrom(const AuthProvider& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.AuthProvider)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AuthProvider::IsInitialized() const {

  return true;
}

void AuthProvider::Swap(AuthProvider* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthProvider::InternalSwap(AuthProvider* other) {
  id_.Swap(&other->id_);
  issuer_.Swap(&other->issuer_);
  jwks_uri_.Swap(&other->jwks_uri_);
  audiences_.Swap(&other->audiences_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthProvider::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthProvider_descriptor_;
  metadata.reflection = AuthProvider_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthProvider

// optional string id = 1;
void AuthProvider::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthProvider::id() const {
  // @@protoc_insertion_point(field_get:google.api.AuthProvider.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthProvider::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.AuthProvider.id)
}
void AuthProvider::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.AuthProvider.id)
}
void AuthProvider::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.AuthProvider.id)
}
::std::string* AuthProvider::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:google.api.AuthProvider.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthProvider::release_id() {
  // @@protoc_insertion_point(field_release:google.api.AuthProvider.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthProvider::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:google.api.AuthProvider.id)
}

// optional string issuer = 2;
void AuthProvider::clear_issuer() {
  issuer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthProvider::issuer() const {
  // @@protoc_insertion_point(field_get:google.api.AuthProvider.issuer)
  return issuer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthProvider::set_issuer(const ::std::string& value) {
  
  issuer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.AuthProvider.issuer)
}
void AuthProvider::set_issuer(const char* value) {
  
  issuer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.AuthProvider.issuer)
}
void AuthProvider::set_issuer(const char* value, size_t size) {
  
  issuer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.AuthProvider.issuer)
}
::std::string* AuthProvider::mutable_issuer() {
  
  // @@protoc_insertion_point(field_mutable:google.api.AuthProvider.issuer)
  return issuer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthProvider::release_issuer() {
  // @@protoc_insertion_point(field_release:google.api.AuthProvider.issuer)
  
  return issuer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthProvider::set_allocated_issuer(::std::string* issuer) {
  if (issuer != NULL) {
    
  } else {
    
  }
  issuer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), issuer);
  // @@protoc_insertion_point(field_set_allocated:google.api.AuthProvider.issuer)
}

// optional string jwks_uri = 3;
void AuthProvider::clear_jwks_uri() {
  jwks_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthProvider::jwks_uri() const {
  // @@protoc_insertion_point(field_get:google.api.AuthProvider.jwks_uri)
  return jwks_uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthProvider::set_jwks_uri(const ::std::string& value) {
  
  jwks_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.AuthProvider.jwks_uri)
}
void AuthProvider::set_jwks_uri(const char* value) {
  
  jwks_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.AuthProvider.jwks_uri)
}
void AuthProvider::set_jwks_uri(const char* value, size_t size) {
  
  jwks_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.AuthProvider.jwks_uri)
}
::std::string* AuthProvider::mutable_jwks_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.api.AuthProvider.jwks_uri)
  return jwks_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthProvider::release_jwks_uri() {
  // @@protoc_insertion_point(field_release:google.api.AuthProvider.jwks_uri)
  
  return jwks_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthProvider::set_allocated_jwks_uri(::std::string* jwks_uri) {
  if (jwks_uri != NULL) {
    
  } else {
    
  }
  jwks_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), jwks_uri);
  // @@protoc_insertion_point(field_set_allocated:google.api.AuthProvider.jwks_uri)
}

// optional string audiences = 4;
void AuthProvider::clear_audiences() {
  audiences_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthProvider::audiences() const {
  // @@protoc_insertion_point(field_get:google.api.AuthProvider.audiences)
  return audiences_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthProvider::set_audiences(const ::std::string& value) {
  
  audiences_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.AuthProvider.audiences)
}
void AuthProvider::set_audiences(const char* value) {
  
  audiences_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.AuthProvider.audiences)
}
void AuthProvider::set_audiences(const char* value, size_t size) {
  
  audiences_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.AuthProvider.audiences)
}
::std::string* AuthProvider::mutable_audiences() {
  
  // @@protoc_insertion_point(field_mutable:google.api.AuthProvider.audiences)
  return audiences_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthProvider::release_audiences() {
  // @@protoc_insertion_point(field_release:google.api.AuthProvider.audiences)
  
  return audiences_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthProvider::set_allocated_audiences(::std::string* audiences) {
  if (audiences != NULL) {
    
  } else {
    
  }
  audiences_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audiences);
  // @@protoc_insertion_point(field_set_allocated:google.api.AuthProvider.audiences)
}

inline const AuthProvider* AuthProvider::internal_default_instance() {
  return &AuthProvider_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OAuthRequirements::kCanonicalScopesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OAuthRequirements::OAuthRequirements()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fapi_2fauth_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.OAuthRequirements)
}

void OAuthRequirements::InitAsDefaultInstance() {
}

OAuthRequirements::OAuthRequirements(const OAuthRequirements& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.api.OAuthRequirements)
}

void OAuthRequirements::SharedCtor() {
  canonical_scopes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

OAuthRequirements::~OAuthRequirements() {
  // @@protoc_insertion_point(destructor:google.api.OAuthRequirements)
  SharedDtor();
}

void OAuthRequirements::SharedDtor() {
  canonical_scopes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OAuthRequirements::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OAuthRequirements::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OAuthRequirements_descriptor_;
}

const OAuthRequirements& OAuthRequirements::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fauth_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<OAuthRequirements> OAuthRequirements_default_instance_;

OAuthRequirements* OAuthRequirements::New(::google::protobuf::Arena* arena) const {
  OAuthRequirements* n = new OAuthRequirements;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OAuthRequirements::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.OAuthRequirements)
  canonical_scopes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool OAuthRequirements::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.OAuthRequirements)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string canonical_scopes = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_canonical_scopes()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->canonical_scopes().data(), this->canonical_scopes().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.OAuthRequirements.canonical_scopes"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.OAuthRequirements)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.OAuthRequirements)
  return false;
#undef DO_
}

void OAuthRequirements::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.OAuthRequirements)
  // optional string canonical_scopes = 1;
  if (this->canonical_scopes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->canonical_scopes().data(), this->canonical_scopes().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.OAuthRequirements.canonical_scopes");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->canonical_scopes(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.OAuthRequirements)
}

::google::protobuf::uint8* OAuthRequirements::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.OAuthRequirements)
  // optional string canonical_scopes = 1;
  if (this->canonical_scopes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->canonical_scopes().data(), this->canonical_scopes().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.OAuthRequirements.canonical_scopes");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->canonical_scopes(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.OAuthRequirements)
  return target;
}

size_t OAuthRequirements::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.OAuthRequirements)
  size_t total_size = 0;

  // optional string canonical_scopes = 1;
  if (this->canonical_scopes().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->canonical_scopes());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OAuthRequirements::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.OAuthRequirements)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OAuthRequirements* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OAuthRequirements>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.OAuthRequirements)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.OAuthRequirements)
    UnsafeMergeFrom(*source);
  }
}

void OAuthRequirements::MergeFrom(const OAuthRequirements& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.OAuthRequirements)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void OAuthRequirements::UnsafeMergeFrom(const OAuthRequirements& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.canonical_scopes().size() > 0) {

    canonical_scopes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.canonical_scopes_);
  }
}

void OAuthRequirements::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.OAuthRequirements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OAuthRequirements::CopyFrom(const OAuthRequirements& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.OAuthRequirements)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool OAuthRequirements::IsInitialized() const {

  return true;
}

void OAuthRequirements::Swap(OAuthRequirements* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OAuthRequirements::InternalSwap(OAuthRequirements* other) {
  canonical_scopes_.Swap(&other->canonical_scopes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OAuthRequirements::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OAuthRequirements_descriptor_;
  metadata.reflection = OAuthRequirements_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OAuthRequirements

// optional string canonical_scopes = 1;
void OAuthRequirements::clear_canonical_scopes() {
  canonical_scopes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OAuthRequirements::canonical_scopes() const {
  // @@protoc_insertion_point(field_get:google.api.OAuthRequirements.canonical_scopes)
  return canonical_scopes_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OAuthRequirements::set_canonical_scopes(const ::std::string& value) {
  
  canonical_scopes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.OAuthRequirements.canonical_scopes)
}
void OAuthRequirements::set_canonical_scopes(const char* value) {
  
  canonical_scopes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.OAuthRequirements.canonical_scopes)
}
void OAuthRequirements::set_canonical_scopes(const char* value, size_t size) {
  
  canonical_scopes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.OAuthRequirements.canonical_scopes)
}
::std::string* OAuthRequirements::mutable_canonical_scopes() {
  
  // @@protoc_insertion_point(field_mutable:google.api.OAuthRequirements.canonical_scopes)
  return canonical_scopes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OAuthRequirements::release_canonical_scopes() {
  // @@protoc_insertion_point(field_release:google.api.OAuthRequirements.canonical_scopes)
  
  return canonical_scopes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OAuthRequirements::set_allocated_canonical_scopes(::std::string* canonical_scopes) {
  if (canonical_scopes != NULL) {
    
  } else {
    
  }
  canonical_scopes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), canonical_scopes);
  // @@protoc_insertion_point(field_set_allocated:google.api.OAuthRequirements.canonical_scopes)
}

inline const OAuthRequirements* OAuthRequirements::internal_default_instance() {
  return &OAuthRequirements_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthRequirement::kProviderIdFieldNumber;
const int AuthRequirement::kAudiencesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthRequirement::AuthRequirement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fapi_2fauth_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.AuthRequirement)
}

void AuthRequirement::InitAsDefaultInstance() {
}

AuthRequirement::AuthRequirement(const AuthRequirement& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.api.AuthRequirement)
}

void AuthRequirement::SharedCtor() {
  provider_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audiences_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AuthRequirement::~AuthRequirement() {
  // @@protoc_insertion_point(destructor:google.api.AuthRequirement)
  SharedDtor();
}

void AuthRequirement::SharedDtor() {
  provider_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audiences_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthRequirement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthRequirement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthRequirement_descriptor_;
}

const AuthRequirement& AuthRequirement::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fauth_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AuthRequirement> AuthRequirement_default_instance_;

AuthRequirement* AuthRequirement::New(::google::protobuf::Arena* arena) const {
  AuthRequirement* n = new AuthRequirement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthRequirement::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.AuthRequirement)
  provider_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audiences_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AuthRequirement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.AuthRequirement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string provider_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_provider_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->provider_id().data(), this->provider_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.AuthRequirement.provider_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_audiences;
        break;
      }

      // optional string audiences = 2;
      case 2: {
        if (tag == 18) {
         parse_audiences:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_audiences()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->audiences().data(), this->audiences().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.AuthRequirement.audiences"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.AuthRequirement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.AuthRequirement)
  return false;
#undef DO_
}

void AuthRequirement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.AuthRequirement)
  // optional string provider_id = 1;
  if (this->provider_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->provider_id().data(), this->provider_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.AuthRequirement.provider_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->provider_id(), output);
  }

  // optional string audiences = 2;
  if (this->audiences().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->audiences().data(), this->audiences().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.AuthRequirement.audiences");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->audiences(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.AuthRequirement)
}

::google::protobuf::uint8* AuthRequirement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.AuthRequirement)
  // optional string provider_id = 1;
  if (this->provider_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->provider_id().data(), this->provider_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.AuthRequirement.provider_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->provider_id(), target);
  }

  // optional string audiences = 2;
  if (this->audiences().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->audiences().data(), this->audiences().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.AuthRequirement.audiences");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->audiences(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.AuthRequirement)
  return target;
}

size_t AuthRequirement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.AuthRequirement)
  size_t total_size = 0;

  // optional string provider_id = 1;
  if (this->provider_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->provider_id());
  }

  // optional string audiences = 2;
  if (this->audiences().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->audiences());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthRequirement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.AuthRequirement)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AuthRequirement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthRequirement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.AuthRequirement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.AuthRequirement)
    UnsafeMergeFrom(*source);
  }
}

void AuthRequirement::MergeFrom(const AuthRequirement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.AuthRequirement)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AuthRequirement::UnsafeMergeFrom(const AuthRequirement& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.provider_id().size() > 0) {

    provider_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.provider_id_);
  }
  if (from.audiences().size() > 0) {

    audiences_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.audiences_);
  }
}

void AuthRequirement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.AuthRequirement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthRequirement::CopyFrom(const AuthRequirement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.AuthRequirement)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AuthRequirement::IsInitialized() const {

  return true;
}

void AuthRequirement::Swap(AuthRequirement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthRequirement::InternalSwap(AuthRequirement* other) {
  provider_id_.Swap(&other->provider_id_);
  audiences_.Swap(&other->audiences_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthRequirement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthRequirement_descriptor_;
  metadata.reflection = AuthRequirement_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthRequirement

// optional string provider_id = 1;
void AuthRequirement::clear_provider_id() {
  provider_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthRequirement::provider_id() const {
  // @@protoc_insertion_point(field_get:google.api.AuthRequirement.provider_id)
  return provider_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthRequirement::set_provider_id(const ::std::string& value) {
  
  provider_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.AuthRequirement.provider_id)
}
void AuthRequirement::set_provider_id(const char* value) {
  
  provider_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.AuthRequirement.provider_id)
}
void AuthRequirement::set_provider_id(const char* value, size_t size) {
  
  provider_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.AuthRequirement.provider_id)
}
::std::string* AuthRequirement::mutable_provider_id() {
  
  // @@protoc_insertion_point(field_mutable:google.api.AuthRequirement.provider_id)
  return provider_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthRequirement::release_provider_id() {
  // @@protoc_insertion_point(field_release:google.api.AuthRequirement.provider_id)
  
  return provider_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthRequirement::set_allocated_provider_id(::std::string* provider_id) {
  if (provider_id != NULL) {
    
  } else {
    
  }
  provider_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), provider_id);
  // @@protoc_insertion_point(field_set_allocated:google.api.AuthRequirement.provider_id)
}

// optional string audiences = 2;
void AuthRequirement::clear_audiences() {
  audiences_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthRequirement::audiences() const {
  // @@protoc_insertion_point(field_get:google.api.AuthRequirement.audiences)
  return audiences_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthRequirement::set_audiences(const ::std::string& value) {
  
  audiences_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.AuthRequirement.audiences)
}
void AuthRequirement::set_audiences(const char* value) {
  
  audiences_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.AuthRequirement.audiences)
}
void AuthRequirement::set_audiences(const char* value, size_t size) {
  
  audiences_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.AuthRequirement.audiences)
}
::std::string* AuthRequirement::mutable_audiences() {
  
  // @@protoc_insertion_point(field_mutable:google.api.AuthRequirement.audiences)
  return audiences_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthRequirement::release_audiences() {
  // @@protoc_insertion_point(field_release:google.api.AuthRequirement.audiences)
  
  return audiences_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthRequirement::set_allocated_audiences(::std::string* audiences) {
  if (audiences != NULL) {
    
  } else {
    
  }
  audiences_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audiences);
  // @@protoc_insertion_point(field_set_allocated:google.api.AuthRequirement.audiences)
}

inline const AuthRequirement* AuthRequirement::internal_default_instance() {
  return &AuthRequirement_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace google

// @@protoc_insertion_point(global_scope)
