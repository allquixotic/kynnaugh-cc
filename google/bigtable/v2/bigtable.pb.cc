// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/v2/bigtable.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/bigtable/v2/bigtable.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace bigtable {
namespace v2 {

namespace {

const ::google::protobuf::Descriptor* ReadRowsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadRowsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadRowsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadRowsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadRowsResponse_CellChunk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadRowsResponse_CellChunk_reflection_ = NULL;
struct ReadRowsResponse_CellChunkOneofInstance {
  bool reset_row_;
  bool commit_row_;
}* ReadRowsResponse_CellChunk_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* SampleRowKeysRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SampleRowKeysRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SampleRowKeysResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SampleRowKeysResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MutateRowRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MutateRowRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MutateRowResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MutateRowResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MutateRowsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MutateRowsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MutateRowsRequest_Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MutateRowsRequest_Entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* MutateRowsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MutateRowsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MutateRowsResponse_Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MutateRowsResponse_Entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckAndMutateRowRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckAndMutateRowRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckAndMutateRowResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckAndMutateRowResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadModifyWriteRowRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadModifyWriteRowRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadModifyWriteRowResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadModifyWriteRowResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_google_2fbigtable_2fv2_2fbigtable_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_google_2fbigtable_2fv2_2fbigtable_2eproto() {
  protobuf_AddDesc_google_2fbigtable_2fv2_2fbigtable_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "google/bigtable/v2/bigtable.proto");
  GOOGLE_CHECK(file != NULL);
  ReadRowsRequest_descriptor_ = file->message_type(0);
  static const int ReadRowsRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsRequest, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsRequest, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsRequest, rows_limit_),
  };
  ReadRowsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReadRowsRequest_descriptor_,
      ReadRowsRequest::internal_default_instance(),
      ReadRowsRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReadRowsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsRequest, _internal_metadata_));
  ReadRowsResponse_descriptor_ = file->message_type(1);
  static const int ReadRowsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsResponse, chunks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsResponse, last_scanned_row_key_),
  };
  ReadRowsResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReadRowsResponse_descriptor_,
      ReadRowsResponse::internal_default_instance(),
      ReadRowsResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReadRowsResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsResponse, _internal_metadata_));
  ReadRowsResponse_CellChunk_descriptor_ = ReadRowsResponse_descriptor_->nested_type(0);
  static const int ReadRowsResponse_CellChunk_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsResponse_CellChunk, row_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsResponse_CellChunk, family_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsResponse_CellChunk, qualifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsResponse_CellChunk, timestamp_micros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsResponse_CellChunk, labels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsResponse_CellChunk, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsResponse_CellChunk, value_size_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReadRowsResponse_CellChunk_default_oneof_instance_, reset_row_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReadRowsResponse_CellChunk_default_oneof_instance_, commit_row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsResponse_CellChunk, row_status_),
  };
  ReadRowsResponse_CellChunk_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReadRowsResponse_CellChunk_descriptor_,
      ReadRowsResponse_CellChunk::internal_default_instance(),
      ReadRowsResponse_CellChunk_offsets_,
      -1,
      -1,
      -1,
      ReadRowsResponse_CellChunk_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsResponse_CellChunk, _oneof_case_[0]),
      sizeof(ReadRowsResponse_CellChunk),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsResponse_CellChunk, _internal_metadata_));
  SampleRowKeysRequest_descriptor_ = file->message_type(2);
  static const int SampleRowKeysRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleRowKeysRequest, table_name_),
  };
  SampleRowKeysRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SampleRowKeysRequest_descriptor_,
      SampleRowKeysRequest::internal_default_instance(),
      SampleRowKeysRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SampleRowKeysRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleRowKeysRequest, _internal_metadata_));
  SampleRowKeysResponse_descriptor_ = file->message_type(3);
  static const int SampleRowKeysResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleRowKeysResponse, row_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleRowKeysResponse, offset_bytes_),
  };
  SampleRowKeysResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SampleRowKeysResponse_descriptor_,
      SampleRowKeysResponse::internal_default_instance(),
      SampleRowKeysResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SampleRowKeysResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleRowKeysResponse, _internal_metadata_));
  MutateRowRequest_descriptor_ = file->message_type(4);
  static const int MutateRowRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowRequest, row_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowRequest, mutations_),
  };
  MutateRowRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MutateRowRequest_descriptor_,
      MutateRowRequest::internal_default_instance(),
      MutateRowRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(MutateRowRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowRequest, _internal_metadata_));
  MutateRowResponse_descriptor_ = file->message_type(5);
  static const int MutateRowResponse_offsets_[1] = {
  };
  MutateRowResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MutateRowResponse_descriptor_,
      MutateRowResponse::internal_default_instance(),
      MutateRowResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(MutateRowResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowResponse, _internal_metadata_));
  MutateRowsRequest_descriptor_ = file->message_type(6);
  static const int MutateRowsRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowsRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowsRequest, entries_),
  };
  MutateRowsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MutateRowsRequest_descriptor_,
      MutateRowsRequest::internal_default_instance(),
      MutateRowsRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(MutateRowsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowsRequest, _internal_metadata_));
  MutateRowsRequest_Entry_descriptor_ = MutateRowsRequest_descriptor_->nested_type(0);
  static const int MutateRowsRequest_Entry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowsRequest_Entry, row_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowsRequest_Entry, mutations_),
  };
  MutateRowsRequest_Entry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MutateRowsRequest_Entry_descriptor_,
      MutateRowsRequest_Entry::internal_default_instance(),
      MutateRowsRequest_Entry_offsets_,
      -1,
      -1,
      -1,
      sizeof(MutateRowsRequest_Entry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowsRequest_Entry, _internal_metadata_));
  MutateRowsResponse_descriptor_ = file->message_type(7);
  static const int MutateRowsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowsResponse, entries_),
  };
  MutateRowsResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MutateRowsResponse_descriptor_,
      MutateRowsResponse::internal_default_instance(),
      MutateRowsResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(MutateRowsResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowsResponse, _internal_metadata_));
  MutateRowsResponse_Entry_descriptor_ = MutateRowsResponse_descriptor_->nested_type(0);
  static const int MutateRowsResponse_Entry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowsResponse_Entry, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowsResponse_Entry, status_),
  };
  MutateRowsResponse_Entry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MutateRowsResponse_Entry_descriptor_,
      MutateRowsResponse_Entry::internal_default_instance(),
      MutateRowsResponse_Entry_offsets_,
      -1,
      -1,
      -1,
      sizeof(MutateRowsResponse_Entry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowsResponse_Entry, _internal_metadata_));
  CheckAndMutateRowRequest_descriptor_ = file->message_type(8);
  static const int CheckAndMutateRowRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAndMutateRowRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAndMutateRowRequest, row_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAndMutateRowRequest, predicate_filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAndMutateRowRequest, true_mutations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAndMutateRowRequest, false_mutations_),
  };
  CheckAndMutateRowRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CheckAndMutateRowRequest_descriptor_,
      CheckAndMutateRowRequest::internal_default_instance(),
      CheckAndMutateRowRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CheckAndMutateRowRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAndMutateRowRequest, _internal_metadata_));
  CheckAndMutateRowResponse_descriptor_ = file->message_type(9);
  static const int CheckAndMutateRowResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAndMutateRowResponse, predicate_matched_),
  };
  CheckAndMutateRowResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CheckAndMutateRowResponse_descriptor_,
      CheckAndMutateRowResponse::internal_default_instance(),
      CheckAndMutateRowResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CheckAndMutateRowResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAndMutateRowResponse, _internal_metadata_));
  ReadModifyWriteRowRequest_descriptor_ = file->message_type(10);
  static const int ReadModifyWriteRowRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadModifyWriteRowRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadModifyWriteRowRequest, row_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadModifyWriteRowRequest, rules_),
  };
  ReadModifyWriteRowRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReadModifyWriteRowRequest_descriptor_,
      ReadModifyWriteRowRequest::internal_default_instance(),
      ReadModifyWriteRowRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReadModifyWriteRowRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadModifyWriteRowRequest, _internal_metadata_));
  ReadModifyWriteRowResponse_descriptor_ = file->message_type(11);
  static const int ReadModifyWriteRowResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadModifyWriteRowResponse, row_),
  };
  ReadModifyWriteRowResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReadModifyWriteRowResponse_descriptor_,
      ReadModifyWriteRowResponse::internal_default_instance(),
      ReadModifyWriteRowResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReadModifyWriteRowResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadModifyWriteRowResponse, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_google_2fbigtable_2fv2_2fbigtable_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReadRowsRequest_descriptor_, ReadRowsRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReadRowsResponse_descriptor_, ReadRowsResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReadRowsResponse_CellChunk_descriptor_, ReadRowsResponse_CellChunk::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SampleRowKeysRequest_descriptor_, SampleRowKeysRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SampleRowKeysResponse_descriptor_, SampleRowKeysResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MutateRowRequest_descriptor_, MutateRowRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MutateRowResponse_descriptor_, MutateRowResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MutateRowsRequest_descriptor_, MutateRowsRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MutateRowsRequest_Entry_descriptor_, MutateRowsRequest_Entry::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MutateRowsResponse_descriptor_, MutateRowsResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MutateRowsResponse_Entry_descriptor_, MutateRowsResponse_Entry::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CheckAndMutateRowRequest_descriptor_, CheckAndMutateRowRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CheckAndMutateRowResponse_descriptor_, CheckAndMutateRowResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReadModifyWriteRowRequest_descriptor_, ReadModifyWriteRowRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReadModifyWriteRowResponse_descriptor_, ReadModifyWriteRowResponse::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_google_2fbigtable_2fv2_2fbigtable_2eproto() {
  ReadRowsRequest_default_instance_.Shutdown();
  delete ReadRowsRequest_reflection_;
  ReadRowsResponse_default_instance_.Shutdown();
  delete ReadRowsResponse_reflection_;
  ReadRowsResponse_CellChunk_default_instance_.Shutdown();
  delete ReadRowsResponse_CellChunk_default_oneof_instance_;
  delete ReadRowsResponse_CellChunk_reflection_;
  SampleRowKeysRequest_default_instance_.Shutdown();
  delete SampleRowKeysRequest_reflection_;
  SampleRowKeysResponse_default_instance_.Shutdown();
  delete SampleRowKeysResponse_reflection_;
  MutateRowRequest_default_instance_.Shutdown();
  delete MutateRowRequest_reflection_;
  MutateRowResponse_default_instance_.Shutdown();
  delete MutateRowResponse_reflection_;
  MutateRowsRequest_default_instance_.Shutdown();
  delete MutateRowsRequest_reflection_;
  MutateRowsRequest_Entry_default_instance_.Shutdown();
  delete MutateRowsRequest_Entry_reflection_;
  MutateRowsResponse_default_instance_.Shutdown();
  delete MutateRowsResponse_reflection_;
  MutateRowsResponse_Entry_default_instance_.Shutdown();
  delete MutateRowsResponse_Entry_reflection_;
  CheckAndMutateRowRequest_default_instance_.Shutdown();
  delete CheckAndMutateRowRequest_reflection_;
  CheckAndMutateRowResponse_default_instance_.Shutdown();
  delete CheckAndMutateRowResponse_reflection_;
  ReadModifyWriteRowRequest_default_instance_.Shutdown();
  delete ReadModifyWriteRowRequest_reflection_;
  ReadModifyWriteRowResponse_default_instance_.Shutdown();
  delete ReadModifyWriteRowResponse_reflection_;
}

void protobuf_InitDefaults_google_2fbigtable_2fv2_2fbigtable_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::api::protobuf_InitDefaults_google_2fapi_2fannotations_2eproto();
  ::google::bigtable::v2::protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto();
  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2fwrappers_2eproto();
  ::google::rpc::protobuf_InitDefaults_google_2frpc_2fstatus_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  ReadRowsRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ReadRowsResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ReadRowsResponse_CellChunk_default_instance_.DefaultConstruct();
  ReadRowsResponse_CellChunk_default_oneof_instance_ = new ReadRowsResponse_CellChunkOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  SampleRowKeysRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SampleRowKeysResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MutateRowRequest_default_instance_.DefaultConstruct();
  MutateRowResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MutateRowsRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MutateRowsRequest_Entry_default_instance_.DefaultConstruct();
  MutateRowsResponse_default_instance_.DefaultConstruct();
  MutateRowsResponse_Entry_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CheckAndMutateRowRequest_default_instance_.DefaultConstruct();
  CheckAndMutateRowResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ReadModifyWriteRowRequest_default_instance_.DefaultConstruct();
  ReadModifyWriteRowResponse_default_instance_.DefaultConstruct();
  ReadRowsRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReadRowsResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReadRowsResponse_CellChunk_default_instance_.get_mutable()->InitAsDefaultInstance();
  SampleRowKeysRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  SampleRowKeysResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  MutateRowRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  MutateRowResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  MutateRowsRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  MutateRowsRequest_Entry_default_instance_.get_mutable()->InitAsDefaultInstance();
  MutateRowsResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  MutateRowsResponse_Entry_default_instance_.get_mutable()->InitAsDefaultInstance();
  CheckAndMutateRowRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  CheckAndMutateRowResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReadModifyWriteRowRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReadModifyWriteRowResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_google_2fbigtable_2fv2_2fbigtable_2eproto_once_);
void protobuf_InitDefaults_google_2fbigtable_2fv2_2fbigtable_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_google_2fbigtable_2fv2_2fbigtable_2eproto_once_,
                 &protobuf_InitDefaults_google_2fbigtable_2fv2_2fbigtable_2eproto_impl);
}
void protobuf_AddDesc_google_2fbigtable_2fv2_2fbigtable_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_google_2fbigtable_2fv2_2fbigtable_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!google/bigtable/v2/bigtable.proto\022\022goo"
    "gle.bigtable.v2\032\034google/api/annotations."
    "proto\032\035google/bigtable/v2/data.proto\032\036go"
    "ogle/protobuf/wrappers.proto\032\027google/rpc"
    "/status.proto\"\222\001\n\017ReadRowsRequest\022\022\n\ntab"
    "le_name\030\001 \001(\t\022(\n\004rows\030\002 \001(\0132\032.google.big"
    "table.v2.RowSet\022-\n\006filter\030\003 \001(\0132\035.google"
    ".bigtable.v2.RowFilter\022\022\n\nrows_limit\030\004 \001"
    "(\003\"\370\002\n\020ReadRowsResponse\022>\n\006chunks\030\001 \003(\0132"
    "..google.bigtable.v2.ReadRowsResponse.Ce"
    "llChunk\022\034\n\024last_scanned_row_key\030\002 \001(\014\032\205\002"
    "\n\tCellChunk\022\017\n\007row_key\030\001 \001(\014\0221\n\013family_n"
    "ame\030\002 \001(\0132\034.google.protobuf.StringValue\022"
    ".\n\tqualifier\030\003 \001(\0132\033.google.protobuf.Byt"
    "esValue\022\030\n\020timestamp_micros\030\004 \001(\003\022\016\n\006lab"
    "els\030\005 \003(\t\022\r\n\005value\030\006 \001(\014\022\022\n\nvalue_size\030\007"
    " \001(\005\022\023\n\treset_row\030\010 \001(\010H\000\022\024\n\ncommit_row\030"
    "\t \001(\010H\000B\014\n\nrow_status\"*\n\024SampleRowKeysRe"
    "quest\022\022\n\ntable_name\030\001 \001(\t\">\n\025SampleRowKe"
    "ysResponse\022\017\n\007row_key\030\001 \001(\014\022\024\n\014offset_by"
    "tes\030\002 \001(\003\"h\n\020MutateRowRequest\022\022\n\ntable_n"
    "ame\030\001 \001(\t\022\017\n\007row_key\030\002 \001(\014\022/\n\tmutations\030"
    "\003 \003(\0132\034.google.bigtable.v2.Mutation\"\023\n\021M"
    "utateRowResponse\"\260\001\n\021MutateRowsRequest\022\022"
    "\n\ntable_name\030\001 \001(\t\022<\n\007entries\030\002 \003(\0132+.go"
    "ogle.bigtable.v2.MutateRowsRequest.Entry"
    "\032I\n\005Entry\022\017\n\007row_key\030\001 \001(\014\022/\n\tmutations\030"
    "\002 \003(\0132\034.google.bigtable.v2.Mutation\"\217\001\n\022"
    "MutateRowsResponse\022=\n\007entries\030\001 \003(\0132,.go"
    "ogle.bigtable.v2.MutateRowsResponse.Entr"
    "y\032:\n\005Entry\022\r\n\005index\030\001 \001(\003\022\"\n\006status\030\002 \001("
    "\0132\022.google.rpc.Status\"\345\001\n\030CheckAndMutate"
    "RowRequest\022\022\n\ntable_name\030\001 \001(\t\022\017\n\007row_ke"
    "y\030\002 \001(\014\0227\n\020predicate_filter\030\006 \001(\0132\035.goog"
    "le.bigtable.v2.RowFilter\0224\n\016true_mutatio"
    "ns\030\004 \003(\0132\034.google.bigtable.v2.Mutation\0225"
    "\n\017false_mutations\030\005 \003(\0132\034.google.bigtabl"
    "e.v2.Mutation\"6\n\031CheckAndMutateRowRespon"
    "se\022\031\n\021predicate_matched\030\001 \001(\010\"x\n\031ReadMod"
    "ifyWriteRowRequest\022\022\n\ntable_name\030\001 \001(\t\022\017"
    "\n\007row_key\030\002 \001(\014\0226\n\005rules\030\003 \003(\0132\'.google."
    "bigtable.v2.ReadModifyWriteRule\"B\n\032ReadM"
    "odifyWriteRowResponse\022$\n\003row\030\001 \001(\0132\027.goo"
    "gle.bigtable.v2.Row2\255\010\n\010Bigtable\022\235\001\n\010Rea"
    "dRows\022#.google.bigtable.v2.ReadRowsReque"
    "st\032$.google.bigtable.v2.ReadRowsResponse"
    "\"D\202\323\344\223\002>\"9/v2/{table_name=projects/*/ins"
    "tances/*/tables/*}:readRows:\001*0\001\022\256\001\n\rSam"
    "pleRowKeys\022(.google.bigtable.v2.SampleRo"
    "wKeysRequest\032).google.bigtable.v2.Sample"
    "RowKeysResponse\"F\202\323\344\223\002@\022>/v2/{table_name"
    "=projects/*/instances/*/tables/*}:sample"
    "RowKeys0\001\022\237\001\n\tMutateRow\022$.google.bigtabl"
    "e.v2.MutateRowRequest\032%.google.bigtable."
    "v2.MutateRowResponse\"E\202\323\344\223\002\?\":/v2/{table"
    "_name=projects/*/instances/*/tables/*}:m"
    "utateRow:\001*\022\245\001\n\nMutateRows\022%.google.bigt"
    "able.v2.MutateRowsRequest\032&.google.bigta"
    "ble.v2.MutateRowsResponse\"F\202\323\344\223\002@\";/v2/{"
    "table_name=projects/*/instances/*/tables"
    "/*}:mutateRows:\001*0\001\022\277\001\n\021CheckAndMutateRo"
    "w\022,.google.bigtable.v2.CheckAndMutateRow"
    "Request\032-.google.bigtable.v2.CheckAndMut"
    "ateRowResponse\"M\202\323\344\223\002G\"B/v2/{table_name="
    "projects/*/instances/*/tables/*}:checkAn"
    "dMutateRow:\001*\022\303\001\n\022ReadModifyWriteRow\022-.g"
    "oogle.bigtable.v2.ReadModifyWriteRowRequ"
    "est\032..google.bigtable.v2.ReadModifyWrite"
    "RowResponse\"N\202\323\344\223\002H\"C/v2/{table_name=pro"
    "jects/*/instances/*/tables/*}:readModify"
    "WriteRow:\001*Be\n\026com.google.bigtable.v2B\rB"
    "igtableProtoP\001Z:google.golang.org/genpro"
    "to/googleapis/bigtable/v2;bigtableb\006prot"
    "o3", 2922);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/bigtable/v2/bigtable.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_AddDesc_google_2fapi_2fannotations_2eproto();
  ::google::bigtable::v2::protobuf_AddDesc_google_2fbigtable_2fv2_2fdata_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fwrappers_2eproto();
  ::google::rpc::protobuf_AddDesc_google_2frpc_2fstatus_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_google_2fbigtable_2fv2_2fbigtable_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_google_2fbigtable_2fv2_2fbigtable_2eproto_once_);
void protobuf_AddDesc_google_2fbigtable_2fv2_2fbigtable_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_google_2fbigtable_2fv2_2fbigtable_2eproto_once_,
                 &protobuf_AddDesc_google_2fbigtable_2fv2_2fbigtable_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_google_2fbigtable_2fv2_2fbigtable_2eproto {
  StaticDescriptorInitializer_google_2fbigtable_2fv2_2fbigtable_2eproto() {
    protobuf_AddDesc_google_2fbigtable_2fv2_2fbigtable_2eproto();
  }
} static_descriptor_initializer_google_2fbigtable_2fv2_2fbigtable_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadRowsRequest::kTableNameFieldNumber;
const int ReadRowsRequest::kRowsFieldNumber;
const int ReadRowsRequest::kFilterFieldNumber;
const int ReadRowsRequest::kRowsLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadRowsRequest::ReadRowsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fv2_2fbigtable_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v2.ReadRowsRequest)
}

void ReadRowsRequest::InitAsDefaultInstance() {
  rows_ = const_cast< ::google::bigtable::v2::RowSet*>(
      ::google::bigtable::v2::RowSet::internal_default_instance());
  filter_ = const_cast< ::google::bigtable::v2::RowFilter*>(
      ::google::bigtable::v2::RowFilter::internal_default_instance());
}

ReadRowsRequest::ReadRowsRequest(const ReadRowsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v2.ReadRowsRequest)
}

void ReadRowsRequest::SharedCtor() {
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rows_ = NULL;
  filter_ = NULL;
  rows_limit_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

ReadRowsRequest::~ReadRowsRequest() {
  // @@protoc_insertion_point(destructor:google.bigtable.v2.ReadRowsRequest)
  SharedDtor();
}

void ReadRowsRequest::SharedDtor() {
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &ReadRowsRequest_default_instance_.get()) {
    delete rows_;
    delete filter_;
  }
}

void ReadRowsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadRowsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadRowsRequest_descriptor_;
}

const ReadRowsRequest& ReadRowsRequest::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fv2_2fbigtable_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReadRowsRequest> ReadRowsRequest_default_instance_;

ReadRowsRequest* ReadRowsRequest::New(::google::protobuf::Arena* arena) const {
  ReadRowsRequest* n = new ReadRowsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadRowsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v2.ReadRowsRequest)
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && rows_ != NULL) delete rows_;
  rows_ = NULL;
  if (GetArenaNoVirtual() == NULL && filter_ != NULL) delete filter_;
  filter_ = NULL;
  rows_limit_ = GOOGLE_LONGLONG(0);
}

bool ReadRowsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v2.ReadRowsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.v2.ReadRowsRequest.table_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rows;
        break;
      }

      // optional .google.bigtable.v2.RowSet rows = 2;
      case 2: {
        if (tag == 18) {
         parse_rows:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rows()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_filter;
        break;
      }

      // optional .google.bigtable.v2.RowFilter filter = 3;
      case 3: {
        if (tag == 26) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_rows_limit;
        break;
      }

      // optional int64 rows_limit = 4;
      case 4: {
        if (tag == 32) {
         parse_rows_limit:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rows_limit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v2.ReadRowsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v2.ReadRowsRequest)
  return false;
#undef DO_
}

void ReadRowsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v2.ReadRowsRequest)
  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v2.ReadRowsRequest.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table_name(), output);
  }

  // optional .google.bigtable.v2.RowSet rows = 2;
  if (this->has_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->rows_, output);
  }

  // optional .google.bigtable.v2.RowFilter filter = 3;
  if (this->has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->filter_, output);
  }

  // optional int64 rows_limit = 4;
  if (this->rows_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->rows_limit(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v2.ReadRowsRequest)
}

::google::protobuf::uint8* ReadRowsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v2.ReadRowsRequest)
  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v2.ReadRowsRequest.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // optional .google.bigtable.v2.RowSet rows = 2;
  if (this->has_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->rows_, false, target);
  }

  // optional .google.bigtable.v2.RowFilter filter = 3;
  if (this->has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->filter_, false, target);
  }

  // optional int64 rows_limit = 4;
  if (this->rows_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->rows_limit(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v2.ReadRowsRequest)
  return target;
}

size_t ReadRowsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v2.ReadRowsRequest)
  size_t total_size = 0;

  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  // optional .google.bigtable.v2.RowSet rows = 2;
  if (this->has_rows()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rows_);
  }

  // optional .google.bigtable.v2.RowFilter filter = 3;
  if (this->has_filter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->filter_);
  }

  // optional int64 rows_limit = 4;
  if (this->rows_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->rows_limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadRowsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v2.ReadRowsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReadRowsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadRowsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v2.ReadRowsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v2.ReadRowsRequest)
    UnsafeMergeFrom(*source);
  }
}

void ReadRowsRequest::MergeFrom(const ReadRowsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v2.ReadRowsRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReadRowsRequest::UnsafeMergeFrom(const ReadRowsRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  if (from.has_rows()) {
    mutable_rows()->::google::bigtable::v2::RowSet::MergeFrom(from.rows());
  }
  if (from.has_filter()) {
    mutable_filter()->::google::bigtable::v2::RowFilter::MergeFrom(from.filter());
  }
  if (from.rows_limit() != 0) {
    set_rows_limit(from.rows_limit());
  }
}

void ReadRowsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v2.ReadRowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadRowsRequest::CopyFrom(const ReadRowsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v2.ReadRowsRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReadRowsRequest::IsInitialized() const {

  return true;
}

void ReadRowsRequest::Swap(ReadRowsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadRowsRequest::InternalSwap(ReadRowsRequest* other) {
  table_name_.Swap(&other->table_name_);
  std::swap(rows_, other->rows_);
  std::swap(filter_, other->filter_);
  std::swap(rows_limit_, other->rows_limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadRowsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadRowsRequest_descriptor_;
  metadata.reflection = ReadRowsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadRowsRequest

// optional string table_name = 1;
void ReadRowsRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReadRowsRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsRequest.table_name)
  return table_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReadRowsRequest::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsRequest.table_name)
}
void ReadRowsRequest::set_table_name(const char* value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ReadRowsRequest.table_name)
}
void ReadRowsRequest::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ReadRowsRequest.table_name)
}
::std::string* ReadRowsRequest::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReadRowsRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadRowsRequest.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReadRowsRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadRowsRequest.table_name)
}

// optional .google.bigtable.v2.RowSet rows = 2;
bool ReadRowsRequest::has_rows() const {
  return this != internal_default_instance() && rows_ != NULL;
}
void ReadRowsRequest::clear_rows() {
  if (GetArenaNoVirtual() == NULL && rows_ != NULL) delete rows_;
  rows_ = NULL;
}
const ::google::bigtable::v2::RowSet& ReadRowsRequest::rows() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsRequest.rows)
  return rows_ != NULL ? *rows_
                         : *::google::bigtable::v2::RowSet::internal_default_instance();
}
::google::bigtable::v2::RowSet* ReadRowsRequest::mutable_rows() {
  
  if (rows_ == NULL) {
    rows_ = new ::google::bigtable::v2::RowSet;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsRequest.rows)
  return rows_;
}
::google::bigtable::v2::RowSet* ReadRowsRequest::release_rows() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadRowsRequest.rows)
  
  ::google::bigtable::v2::RowSet* temp = rows_;
  rows_ = NULL;
  return temp;
}
void ReadRowsRequest::set_allocated_rows(::google::bigtable::v2::RowSet* rows) {
  delete rows_;
  rows_ = rows;
  if (rows) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadRowsRequest.rows)
}

// optional .google.bigtable.v2.RowFilter filter = 3;
bool ReadRowsRequest::has_filter() const {
  return this != internal_default_instance() && filter_ != NULL;
}
void ReadRowsRequest::clear_filter() {
  if (GetArenaNoVirtual() == NULL && filter_ != NULL) delete filter_;
  filter_ = NULL;
}
const ::google::bigtable::v2::RowFilter& ReadRowsRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsRequest.filter)
  return filter_ != NULL ? *filter_
                         : *::google::bigtable::v2::RowFilter::internal_default_instance();
}
::google::bigtable::v2::RowFilter* ReadRowsRequest::mutable_filter() {
  
  if (filter_ == NULL) {
    filter_ = new ::google::bigtable::v2::RowFilter;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsRequest.filter)
  return filter_;
}
::google::bigtable::v2::RowFilter* ReadRowsRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadRowsRequest.filter)
  
  ::google::bigtable::v2::RowFilter* temp = filter_;
  filter_ = NULL;
  return temp;
}
void ReadRowsRequest::set_allocated_filter(::google::bigtable::v2::RowFilter* filter) {
  delete filter_;
  filter_ = filter;
  if (filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadRowsRequest.filter)
}

// optional int64 rows_limit = 4;
void ReadRowsRequest::clear_rows_limit() {
  rows_limit_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ReadRowsRequest::rows_limit() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsRequest.rows_limit)
  return rows_limit_;
}
void ReadRowsRequest::set_rows_limit(::google::protobuf::int64 value) {
  
  rows_limit_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsRequest.rows_limit)
}

inline const ReadRowsRequest* ReadRowsRequest::internal_default_instance() {
  return &ReadRowsRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadRowsResponse_CellChunk::kRowKeyFieldNumber;
const int ReadRowsResponse_CellChunk::kFamilyNameFieldNumber;
const int ReadRowsResponse_CellChunk::kQualifierFieldNumber;
const int ReadRowsResponse_CellChunk::kTimestampMicrosFieldNumber;
const int ReadRowsResponse_CellChunk::kLabelsFieldNumber;
const int ReadRowsResponse_CellChunk::kValueFieldNumber;
const int ReadRowsResponse_CellChunk::kValueSizeFieldNumber;
const int ReadRowsResponse_CellChunk::kResetRowFieldNumber;
const int ReadRowsResponse_CellChunk::kCommitRowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadRowsResponse_CellChunk::ReadRowsResponse_CellChunk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fv2_2fbigtable_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v2.ReadRowsResponse.CellChunk)
}

void ReadRowsResponse_CellChunk::InitAsDefaultInstance() {
  family_name_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
  qualifier_ = const_cast< ::google::protobuf::BytesValue*>(
      ::google::protobuf::BytesValue::internal_default_instance());
  ReadRowsResponse_CellChunk_default_oneof_instance_->reset_row_ = false;
  ReadRowsResponse_CellChunk_default_oneof_instance_->commit_row_ = false;
}

ReadRowsResponse_CellChunk::ReadRowsResponse_CellChunk(const ReadRowsResponse_CellChunk& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v2.ReadRowsResponse.CellChunk)
}

void ReadRowsResponse_CellChunk::SharedCtor() {
  row_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  family_name_ = NULL;
  qualifier_ = NULL;
  ::memset(&timestamp_micros_, 0, reinterpret_cast<char*>(&value_size_) -
    reinterpret_cast<char*>(&timestamp_micros_) + sizeof(value_size_));
  clear_has_row_status();
  _cached_size_ = 0;
}

ReadRowsResponse_CellChunk::~ReadRowsResponse_CellChunk() {
  // @@protoc_insertion_point(destructor:google.bigtable.v2.ReadRowsResponse.CellChunk)
  SharedDtor();
}

void ReadRowsResponse_CellChunk::SharedDtor() {
  row_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_row_status()) {
    clear_row_status();
  }
  if (this != &ReadRowsResponse_CellChunk_default_instance_.get()) {
    delete family_name_;
    delete qualifier_;
  }
}

void ReadRowsResponse_CellChunk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadRowsResponse_CellChunk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadRowsResponse_CellChunk_descriptor_;
}

const ReadRowsResponse_CellChunk& ReadRowsResponse_CellChunk::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fv2_2fbigtable_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReadRowsResponse_CellChunk> ReadRowsResponse_CellChunk_default_instance_;

ReadRowsResponse_CellChunk* ReadRowsResponse_CellChunk::New(::google::protobuf::Arena* arena) const {
  ReadRowsResponse_CellChunk* n = new ReadRowsResponse_CellChunk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadRowsResponse_CellChunk::clear_row_status() {
// @@protoc_insertion_point(one_of_clear_start:google.bigtable.v2.ReadRowsResponse.CellChunk)
  switch (row_status_case()) {
    case kResetRow: {
      // No need to clear
      break;
    }
    case kCommitRow: {
      // No need to clear
      break;
    }
    case ROW_STATUS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ROW_STATUS_NOT_SET;
}


void ReadRowsResponse_CellChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v2.ReadRowsResponse.CellChunk)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReadRowsResponse_CellChunk, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReadRowsResponse_CellChunk*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(timestamp_micros_, value_size_);
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && family_name_ != NULL) delete family_name_;
  family_name_ = NULL;
  if (GetArenaNoVirtual() == NULL && qualifier_ != NULL) delete qualifier_;
  qualifier_ = NULL;
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  labels_.Clear();
  clear_row_status();
}

bool ReadRowsResponse_CellChunk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v2.ReadRowsResponse.CellChunk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes row_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_row_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_family_name;
        break;
      }

      // optional .google.protobuf.StringValue family_name = 2;
      case 2: {
        if (tag == 18) {
         parse_family_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_family_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_qualifier;
        break;
      }

      // optional .google.protobuf.BytesValue qualifier = 3;
      case 3: {
        if (tag == 26) {
         parse_qualifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qualifier()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_timestamp_micros;
        break;
      }

      // optional int64 timestamp_micros = 4;
      case 4: {
        if (tag == 32) {
         parse_timestamp_micros:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_micros_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_labels;
        break;
      }

      // repeated string labels = 5;
      case 5: {
        if (tag == 42) {
         parse_labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_labels()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->labels(this->labels_size() - 1).data(),
            this->labels(this->labels_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.v2.ReadRowsResponse.CellChunk.labels"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_labels;
        if (input->ExpectTag(50)) goto parse_value;
        break;
      }

      // optional bytes value = 6;
      case 6: {
        if (tag == 50) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_value_size;
        break;
      }

      // optional int32 value_size = 7;
      case 7: {
        if (tag == 56) {
         parse_value_size:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_reset_row;
        break;
      }

      // optional bool reset_row = 8;
      case 8: {
        if (tag == 64) {
         parse_reset_row:
          clear_row_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &row_status_.reset_row_)));
          set_has_reset_row();
        } else {
          goto handle_unusual;
        }
        goto after_commit_row;
        break;
      }

      // optional bool commit_row = 9;
      case 9: {
        if (tag == 72) {
          clear_row_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &row_status_.commit_row_)));
          set_has_commit_row();
        } else {
          goto handle_unusual;
        }
       after_commit_row:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v2.ReadRowsResponse.CellChunk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v2.ReadRowsResponse.CellChunk)
  return false;
#undef DO_
}

void ReadRowsResponse_CellChunk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v2.ReadRowsResponse.CellChunk)
  // optional bytes row_key = 1;
  if (this->row_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->row_key(), output);
  }

  // optional .google.protobuf.StringValue family_name = 2;
  if (this->has_family_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->family_name_, output);
  }

  // optional .google.protobuf.BytesValue qualifier = 3;
  if (this->has_qualifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->qualifier_, output);
  }

  // optional int64 timestamp_micros = 4;
  if (this->timestamp_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timestamp_micros(), output);
  }

  // repeated string labels = 5;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->labels(i).data(), this->labels(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v2.ReadRowsResponse.CellChunk.labels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->labels(i), output);
  }

  // optional bytes value = 6;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->value(), output);
  }

  // optional int32 value_size = 7;
  if (this->value_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->value_size(), output);
  }

  // optional bool reset_row = 8;
  if (has_reset_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->reset_row(), output);
  }

  // optional bool commit_row = 9;
  if (has_commit_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->commit_row(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v2.ReadRowsResponse.CellChunk)
}

::google::protobuf::uint8* ReadRowsResponse_CellChunk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v2.ReadRowsResponse.CellChunk)
  // optional bytes row_key = 1;
  if (this->row_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->row_key(), target);
  }

  // optional .google.protobuf.StringValue family_name = 2;
  if (this->has_family_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->family_name_, false, target);
  }

  // optional .google.protobuf.BytesValue qualifier = 3;
  if (this->has_qualifier()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->qualifier_, false, target);
  }

  // optional int64 timestamp_micros = 4;
  if (this->timestamp_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timestamp_micros(), target);
  }

  // repeated string labels = 5;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->labels(i).data(), this->labels(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v2.ReadRowsResponse.CellChunk.labels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->labels(i), target);
  }

  // optional bytes value = 6;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->value(), target);
  }

  // optional int32 value_size = 7;
  if (this->value_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->value_size(), target);
  }

  // optional bool reset_row = 8;
  if (has_reset_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->reset_row(), target);
  }

  // optional bool commit_row = 9;
  if (has_commit_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->commit_row(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v2.ReadRowsResponse.CellChunk)
  return target;
}

size_t ReadRowsResponse_CellChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v2.ReadRowsResponse.CellChunk)
  size_t total_size = 0;

  // optional bytes row_key = 1;
  if (this->row_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->row_key());
  }

  // optional .google.protobuf.StringValue family_name = 2;
  if (this->has_family_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->family_name_);
  }

  // optional .google.protobuf.BytesValue qualifier = 3;
  if (this->has_qualifier()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->qualifier_);
  }

  // optional int64 timestamp_micros = 4;
  if (this->timestamp_micros() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp_micros());
  }

  // optional bytes value = 6;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // optional int32 value_size = 7;
  if (this->value_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value_size());
  }

  // repeated string labels = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  for (int i = 0; i < this->labels_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->labels(i));
  }

  switch (row_status_case()) {
    // optional bool reset_row = 8;
    case kResetRow: {
      total_size += 1 + 1;
      break;
    }
    // optional bool commit_row = 9;
    case kCommitRow: {
      total_size += 1 + 1;
      break;
    }
    case ROW_STATUS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadRowsResponse_CellChunk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v2.ReadRowsResponse.CellChunk)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReadRowsResponse_CellChunk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadRowsResponse_CellChunk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v2.ReadRowsResponse.CellChunk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v2.ReadRowsResponse.CellChunk)
    UnsafeMergeFrom(*source);
  }
}

void ReadRowsResponse_CellChunk::MergeFrom(const ReadRowsResponse_CellChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v2.ReadRowsResponse.CellChunk)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReadRowsResponse_CellChunk::UnsafeMergeFrom(const ReadRowsResponse_CellChunk& from) {
  GOOGLE_DCHECK(&from != this);
  labels_.UnsafeMergeFrom(from.labels_);
  switch (from.row_status_case()) {
    case kResetRow: {
      set_reset_row(from.reset_row());
      break;
    }
    case kCommitRow: {
      set_commit_row(from.commit_row());
      break;
    }
    case ROW_STATUS_NOT_SET: {
      break;
    }
  }
  if (from.row_key().size() > 0) {

    row_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.row_key_);
  }
  if (from.has_family_name()) {
    mutable_family_name()->::google::protobuf::StringValue::MergeFrom(from.family_name());
  }
  if (from.has_qualifier()) {
    mutable_qualifier()->::google::protobuf::BytesValue::MergeFrom(from.qualifier());
  }
  if (from.timestamp_micros() != 0) {
    set_timestamp_micros(from.timestamp_micros());
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.value_size() != 0) {
    set_value_size(from.value_size());
  }
}

void ReadRowsResponse_CellChunk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v2.ReadRowsResponse.CellChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadRowsResponse_CellChunk::CopyFrom(const ReadRowsResponse_CellChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v2.ReadRowsResponse.CellChunk)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReadRowsResponse_CellChunk::IsInitialized() const {

  return true;
}

void ReadRowsResponse_CellChunk::Swap(ReadRowsResponse_CellChunk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadRowsResponse_CellChunk::InternalSwap(ReadRowsResponse_CellChunk* other) {
  row_key_.Swap(&other->row_key_);
  std::swap(family_name_, other->family_name_);
  std::swap(qualifier_, other->qualifier_);
  std::swap(timestamp_micros_, other->timestamp_micros_);
  labels_.UnsafeArenaSwap(&other->labels_);
  value_.Swap(&other->value_);
  std::swap(value_size_, other->value_size_);
  std::swap(row_status_, other->row_status_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadRowsResponse_CellChunk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadRowsResponse_CellChunk_descriptor_;
  metadata.reflection = ReadRowsResponse_CellChunk_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadRowsResponse::kChunksFieldNumber;
const int ReadRowsResponse::kLastScannedRowKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadRowsResponse::ReadRowsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fv2_2fbigtable_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v2.ReadRowsResponse)
}

void ReadRowsResponse::InitAsDefaultInstance() {
}

ReadRowsResponse::ReadRowsResponse(const ReadRowsResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v2.ReadRowsResponse)
}

void ReadRowsResponse::SharedCtor() {
  last_scanned_row_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ReadRowsResponse::~ReadRowsResponse() {
  // @@protoc_insertion_point(destructor:google.bigtable.v2.ReadRowsResponse)
  SharedDtor();
}

void ReadRowsResponse::SharedDtor() {
  last_scanned_row_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReadRowsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadRowsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadRowsResponse_descriptor_;
}

const ReadRowsResponse& ReadRowsResponse::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fv2_2fbigtable_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReadRowsResponse> ReadRowsResponse_default_instance_;

ReadRowsResponse* ReadRowsResponse::New(::google::protobuf::Arena* arena) const {
  ReadRowsResponse* n = new ReadRowsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadRowsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v2.ReadRowsResponse)
  last_scanned_row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chunks_.Clear();
}

bool ReadRowsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v2.ReadRowsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.bigtable.v2.ReadRowsResponse.CellChunk chunks = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_chunks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_chunks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_chunks;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_last_scanned_row_key;
        break;
      }

      // optional bytes last_scanned_row_key = 2;
      case 2: {
        if (tag == 18) {
         parse_last_scanned_row_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_last_scanned_row_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v2.ReadRowsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v2.ReadRowsResponse)
  return false;
#undef DO_
}

void ReadRowsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v2.ReadRowsResponse)
  // repeated .google.bigtable.v2.ReadRowsResponse.CellChunk chunks = 1;
  for (unsigned int i = 0, n = this->chunks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chunks(i), output);
  }

  // optional bytes last_scanned_row_key = 2;
  if (this->last_scanned_row_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->last_scanned_row_key(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v2.ReadRowsResponse)
}

::google::protobuf::uint8* ReadRowsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v2.ReadRowsResponse)
  // repeated .google.bigtable.v2.ReadRowsResponse.CellChunk chunks = 1;
  for (unsigned int i = 0, n = this->chunks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->chunks(i), false, target);
  }

  // optional bytes last_scanned_row_key = 2;
  if (this->last_scanned_row_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->last_scanned_row_key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v2.ReadRowsResponse)
  return target;
}

size_t ReadRowsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v2.ReadRowsResponse)
  size_t total_size = 0;

  // optional bytes last_scanned_row_key = 2;
  if (this->last_scanned_row_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->last_scanned_row_key());
  }

  // repeated .google.bigtable.v2.ReadRowsResponse.CellChunk chunks = 1;
  {
    unsigned int count = this->chunks_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chunks(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadRowsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v2.ReadRowsResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReadRowsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadRowsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v2.ReadRowsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v2.ReadRowsResponse)
    UnsafeMergeFrom(*source);
  }
}

void ReadRowsResponse::MergeFrom(const ReadRowsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v2.ReadRowsResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReadRowsResponse::UnsafeMergeFrom(const ReadRowsResponse& from) {
  GOOGLE_DCHECK(&from != this);
  chunks_.MergeFrom(from.chunks_);
  if (from.last_scanned_row_key().size() > 0) {

    last_scanned_row_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_scanned_row_key_);
  }
}

void ReadRowsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v2.ReadRowsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadRowsResponse::CopyFrom(const ReadRowsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v2.ReadRowsResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReadRowsResponse::IsInitialized() const {

  return true;
}

void ReadRowsResponse::Swap(ReadRowsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadRowsResponse::InternalSwap(ReadRowsResponse* other) {
  chunks_.UnsafeArenaSwap(&other->chunks_);
  last_scanned_row_key_.Swap(&other->last_scanned_row_key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadRowsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadRowsResponse_descriptor_;
  metadata.reflection = ReadRowsResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadRowsResponse_CellChunk

// optional bytes row_key = 1;
void ReadRowsResponse_CellChunk::clear_row_key() {
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReadRowsResponse_CellChunk::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.CellChunk.row_key)
  return row_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReadRowsResponse_CellChunk::set_row_key(const ::std::string& value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsResponse.CellChunk.row_key)
}
void ReadRowsResponse_CellChunk::set_row_key(const char* value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ReadRowsResponse.CellChunk.row_key)
}
void ReadRowsResponse_CellChunk::set_row_key(const void* value, size_t size) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ReadRowsResponse.CellChunk.row_key)
}
::std::string* ReadRowsResponse_CellChunk::mutable_row_key() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsResponse.CellChunk.row_key)
  return row_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReadRowsResponse_CellChunk::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadRowsResponse.CellChunk.row_key)
  
  return row_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReadRowsResponse_CellChunk::set_allocated_row_key(::std::string* row_key) {
  if (row_key != NULL) {
    
  } else {
    
  }
  row_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row_key);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadRowsResponse.CellChunk.row_key)
}

// optional .google.protobuf.StringValue family_name = 2;
bool ReadRowsResponse_CellChunk::has_family_name() const {
  return this != internal_default_instance() && family_name_ != NULL;
}
void ReadRowsResponse_CellChunk::clear_family_name() {
  if (GetArenaNoVirtual() == NULL && family_name_ != NULL) delete family_name_;
  family_name_ = NULL;
}
const ::google::protobuf::StringValue& ReadRowsResponse_CellChunk::family_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.CellChunk.family_name)
  return family_name_ != NULL ? *family_name_
                         : *::google::protobuf::StringValue::internal_default_instance();
}
::google::protobuf::StringValue* ReadRowsResponse_CellChunk::mutable_family_name() {
  
  if (family_name_ == NULL) {
    family_name_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsResponse.CellChunk.family_name)
  return family_name_;
}
::google::protobuf::StringValue* ReadRowsResponse_CellChunk::release_family_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadRowsResponse.CellChunk.family_name)
  
  ::google::protobuf::StringValue* temp = family_name_;
  family_name_ = NULL;
  return temp;
}
void ReadRowsResponse_CellChunk::set_allocated_family_name(::google::protobuf::StringValue* family_name) {
  delete family_name_;
  if (family_name != NULL && family_name->GetArena() != NULL) {
    ::google::protobuf::StringValue* new_family_name = new ::google::protobuf::StringValue;
    new_family_name->CopyFrom(*family_name);
    family_name = new_family_name;
  }
  family_name_ = family_name;
  if (family_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadRowsResponse.CellChunk.family_name)
}

// optional .google.protobuf.BytesValue qualifier = 3;
bool ReadRowsResponse_CellChunk::has_qualifier() const {
  return this != internal_default_instance() && qualifier_ != NULL;
}
void ReadRowsResponse_CellChunk::clear_qualifier() {
  if (GetArenaNoVirtual() == NULL && qualifier_ != NULL) delete qualifier_;
  qualifier_ = NULL;
}
const ::google::protobuf::BytesValue& ReadRowsResponse_CellChunk::qualifier() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.CellChunk.qualifier)
  return qualifier_ != NULL ? *qualifier_
                         : *::google::protobuf::BytesValue::internal_default_instance();
}
::google::protobuf::BytesValue* ReadRowsResponse_CellChunk::mutable_qualifier() {
  
  if (qualifier_ == NULL) {
    qualifier_ = new ::google::protobuf::BytesValue;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsResponse.CellChunk.qualifier)
  return qualifier_;
}
::google::protobuf::BytesValue* ReadRowsResponse_CellChunk::release_qualifier() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadRowsResponse.CellChunk.qualifier)
  
  ::google::protobuf::BytesValue* temp = qualifier_;
  qualifier_ = NULL;
  return temp;
}
void ReadRowsResponse_CellChunk::set_allocated_qualifier(::google::protobuf::BytesValue* qualifier) {
  delete qualifier_;
  if (qualifier != NULL && qualifier->GetArena() != NULL) {
    ::google::protobuf::BytesValue* new_qualifier = new ::google::protobuf::BytesValue;
    new_qualifier->CopyFrom(*qualifier);
    qualifier = new_qualifier;
  }
  qualifier_ = qualifier;
  if (qualifier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadRowsResponse.CellChunk.qualifier)
}

// optional int64 timestamp_micros = 4;
void ReadRowsResponse_CellChunk::clear_timestamp_micros() {
  timestamp_micros_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ReadRowsResponse_CellChunk::timestamp_micros() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.CellChunk.timestamp_micros)
  return timestamp_micros_;
}
void ReadRowsResponse_CellChunk::set_timestamp_micros(::google::protobuf::int64 value) {
  
  timestamp_micros_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsResponse.CellChunk.timestamp_micros)
}

// repeated string labels = 5;
int ReadRowsResponse_CellChunk::labels_size() const {
  return labels_.size();
}
void ReadRowsResponse_CellChunk::clear_labels() {
  labels_.Clear();
}
const ::std::string& ReadRowsResponse_CellChunk::labels(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
  return labels_.Get(index);
}
::std::string* ReadRowsResponse_CellChunk::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
  return labels_.Mutable(index);
}
void ReadRowsResponse_CellChunk::set_labels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
  labels_.Mutable(index)->assign(value);
}
void ReadRowsResponse_CellChunk::set_labels(int index, const char* value) {
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
}
void ReadRowsResponse_CellChunk::set_labels(int index, const char* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
}
::std::string* ReadRowsResponse_CellChunk::add_labels() {
  // @@protoc_insertion_point(field_add_mutable:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
  return labels_.Add();
}
void ReadRowsResponse_CellChunk::add_labels(const ::std::string& value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
}
void ReadRowsResponse_CellChunk::add_labels(const char* value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
}
void ReadRowsResponse_CellChunk::add_labels(const char* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReadRowsResponse_CellChunk::labels() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
  return labels_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ReadRowsResponse_CellChunk::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
  return &labels_;
}

// optional bytes value = 6;
void ReadRowsResponse_CellChunk::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReadRowsResponse_CellChunk::value() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.CellChunk.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReadRowsResponse_CellChunk::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsResponse.CellChunk.value)
}
void ReadRowsResponse_CellChunk::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ReadRowsResponse.CellChunk.value)
}
void ReadRowsResponse_CellChunk::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ReadRowsResponse.CellChunk.value)
}
::std::string* ReadRowsResponse_CellChunk::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsResponse.CellChunk.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReadRowsResponse_CellChunk::release_value() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadRowsResponse.CellChunk.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReadRowsResponse_CellChunk::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadRowsResponse.CellChunk.value)
}

// optional int32 value_size = 7;
void ReadRowsResponse_CellChunk::clear_value_size() {
  value_size_ = 0;
}
::google::protobuf::int32 ReadRowsResponse_CellChunk::value_size() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.CellChunk.value_size)
  return value_size_;
}
void ReadRowsResponse_CellChunk::set_value_size(::google::protobuf::int32 value) {
  
  value_size_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsResponse.CellChunk.value_size)
}

// optional bool reset_row = 8;
bool ReadRowsResponse_CellChunk::has_reset_row() const {
  return row_status_case() == kResetRow;
}
void ReadRowsResponse_CellChunk::set_has_reset_row() {
  _oneof_case_[0] = kResetRow;
}
void ReadRowsResponse_CellChunk::clear_reset_row() {
  if (has_reset_row()) {
    row_status_.reset_row_ = false;
    clear_has_row_status();
  }
}
bool ReadRowsResponse_CellChunk::reset_row() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.CellChunk.reset_row)
  if (has_reset_row()) {
    return row_status_.reset_row_;
  }
  return false;
}
void ReadRowsResponse_CellChunk::set_reset_row(bool value) {
  if (!has_reset_row()) {
    clear_row_status();
    set_has_reset_row();
  }
  row_status_.reset_row_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsResponse.CellChunk.reset_row)
}

// optional bool commit_row = 9;
bool ReadRowsResponse_CellChunk::has_commit_row() const {
  return row_status_case() == kCommitRow;
}
void ReadRowsResponse_CellChunk::set_has_commit_row() {
  _oneof_case_[0] = kCommitRow;
}
void ReadRowsResponse_CellChunk::clear_commit_row() {
  if (has_commit_row()) {
    row_status_.commit_row_ = false;
    clear_has_row_status();
  }
}
bool ReadRowsResponse_CellChunk::commit_row() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.CellChunk.commit_row)
  if (has_commit_row()) {
    return row_status_.commit_row_;
  }
  return false;
}
void ReadRowsResponse_CellChunk::set_commit_row(bool value) {
  if (!has_commit_row()) {
    clear_row_status();
    set_has_commit_row();
  }
  row_status_.commit_row_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsResponse.CellChunk.commit_row)
}

bool ReadRowsResponse_CellChunk::has_row_status() const {
  return row_status_case() != ROW_STATUS_NOT_SET;
}
void ReadRowsResponse_CellChunk::clear_has_row_status() {
  _oneof_case_[0] = ROW_STATUS_NOT_SET;
}
ReadRowsResponse_CellChunk::RowStatusCase ReadRowsResponse_CellChunk::row_status_case() const {
  return ReadRowsResponse_CellChunk::RowStatusCase(_oneof_case_[0]);
}
inline const ReadRowsResponse_CellChunk* ReadRowsResponse_CellChunk::internal_default_instance() {
  return &ReadRowsResponse_CellChunk_default_instance_.get();
}
// -------------------------------------------------------------------

// ReadRowsResponse

// repeated .google.bigtable.v2.ReadRowsResponse.CellChunk chunks = 1;
int ReadRowsResponse::chunks_size() const {
  return chunks_.size();
}
void ReadRowsResponse::clear_chunks() {
  chunks_.Clear();
}
const ::google::bigtable::v2::ReadRowsResponse_CellChunk& ReadRowsResponse::chunks(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.chunks)
  return chunks_.Get(index);
}
::google::bigtable::v2::ReadRowsResponse_CellChunk* ReadRowsResponse::mutable_chunks(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsResponse.chunks)
  return chunks_.Mutable(index);
}
::google::bigtable::v2::ReadRowsResponse_CellChunk* ReadRowsResponse::add_chunks() {
  // @@protoc_insertion_point(field_add:google.bigtable.v2.ReadRowsResponse.chunks)
  return chunks_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::ReadRowsResponse_CellChunk >*
ReadRowsResponse::mutable_chunks() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.ReadRowsResponse.chunks)
  return &chunks_;
}
const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::ReadRowsResponse_CellChunk >&
ReadRowsResponse::chunks() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.ReadRowsResponse.chunks)
  return chunks_;
}

// optional bytes last_scanned_row_key = 2;
void ReadRowsResponse::clear_last_scanned_row_key() {
  last_scanned_row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReadRowsResponse::last_scanned_row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.last_scanned_row_key)
  return last_scanned_row_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReadRowsResponse::set_last_scanned_row_key(const ::std::string& value) {
  
  last_scanned_row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsResponse.last_scanned_row_key)
}
void ReadRowsResponse::set_last_scanned_row_key(const char* value) {
  
  last_scanned_row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ReadRowsResponse.last_scanned_row_key)
}
void ReadRowsResponse::set_last_scanned_row_key(const void* value, size_t size) {
  
  last_scanned_row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ReadRowsResponse.last_scanned_row_key)
}
::std::string* ReadRowsResponse::mutable_last_scanned_row_key() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsResponse.last_scanned_row_key)
  return last_scanned_row_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReadRowsResponse::release_last_scanned_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadRowsResponse.last_scanned_row_key)
  
  return last_scanned_row_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReadRowsResponse::set_allocated_last_scanned_row_key(::std::string* last_scanned_row_key) {
  if (last_scanned_row_key != NULL) {
    
  } else {
    
  }
  last_scanned_row_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_scanned_row_key);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadRowsResponse.last_scanned_row_key)
}

inline const ReadRowsResponse* ReadRowsResponse::internal_default_instance() {
  return &ReadRowsResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SampleRowKeysRequest::kTableNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SampleRowKeysRequest::SampleRowKeysRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fv2_2fbigtable_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v2.SampleRowKeysRequest)
}

void SampleRowKeysRequest::InitAsDefaultInstance() {
}

SampleRowKeysRequest::SampleRowKeysRequest(const SampleRowKeysRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v2.SampleRowKeysRequest)
}

void SampleRowKeysRequest::SharedCtor() {
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SampleRowKeysRequest::~SampleRowKeysRequest() {
  // @@protoc_insertion_point(destructor:google.bigtable.v2.SampleRowKeysRequest)
  SharedDtor();
}

void SampleRowKeysRequest::SharedDtor() {
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SampleRowKeysRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SampleRowKeysRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SampleRowKeysRequest_descriptor_;
}

const SampleRowKeysRequest& SampleRowKeysRequest::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fv2_2fbigtable_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SampleRowKeysRequest> SampleRowKeysRequest_default_instance_;

SampleRowKeysRequest* SampleRowKeysRequest::New(::google::protobuf::Arena* arena) const {
  SampleRowKeysRequest* n = new SampleRowKeysRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SampleRowKeysRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v2.SampleRowKeysRequest)
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SampleRowKeysRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v2.SampleRowKeysRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.v2.SampleRowKeysRequest.table_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v2.SampleRowKeysRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v2.SampleRowKeysRequest)
  return false;
#undef DO_
}

void SampleRowKeysRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v2.SampleRowKeysRequest)
  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v2.SampleRowKeysRequest.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v2.SampleRowKeysRequest)
}

::google::protobuf::uint8* SampleRowKeysRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v2.SampleRowKeysRequest)
  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v2.SampleRowKeysRequest.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v2.SampleRowKeysRequest)
  return target;
}

size_t SampleRowKeysRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v2.SampleRowKeysRequest)
  size_t total_size = 0;

  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SampleRowKeysRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v2.SampleRowKeysRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SampleRowKeysRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SampleRowKeysRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v2.SampleRowKeysRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v2.SampleRowKeysRequest)
    UnsafeMergeFrom(*source);
  }
}

void SampleRowKeysRequest::MergeFrom(const SampleRowKeysRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v2.SampleRowKeysRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SampleRowKeysRequest::UnsafeMergeFrom(const SampleRowKeysRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
}

void SampleRowKeysRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v2.SampleRowKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SampleRowKeysRequest::CopyFrom(const SampleRowKeysRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v2.SampleRowKeysRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SampleRowKeysRequest::IsInitialized() const {

  return true;
}

void SampleRowKeysRequest::Swap(SampleRowKeysRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SampleRowKeysRequest::InternalSwap(SampleRowKeysRequest* other) {
  table_name_.Swap(&other->table_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SampleRowKeysRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SampleRowKeysRequest_descriptor_;
  metadata.reflection = SampleRowKeysRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SampleRowKeysRequest

// optional string table_name = 1;
void SampleRowKeysRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SampleRowKeysRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.SampleRowKeysRequest.table_name)
  return table_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SampleRowKeysRequest::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.SampleRowKeysRequest.table_name)
}
void SampleRowKeysRequest::set_table_name(const char* value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.SampleRowKeysRequest.table_name)
}
void SampleRowKeysRequest::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.SampleRowKeysRequest.table_name)
}
::std::string* SampleRowKeysRequest::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.SampleRowKeysRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SampleRowKeysRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.SampleRowKeysRequest.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SampleRowKeysRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.SampleRowKeysRequest.table_name)
}

inline const SampleRowKeysRequest* SampleRowKeysRequest::internal_default_instance() {
  return &SampleRowKeysRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SampleRowKeysResponse::kRowKeyFieldNumber;
const int SampleRowKeysResponse::kOffsetBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SampleRowKeysResponse::SampleRowKeysResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fv2_2fbigtable_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v2.SampleRowKeysResponse)
}

void SampleRowKeysResponse::InitAsDefaultInstance() {
}

SampleRowKeysResponse::SampleRowKeysResponse(const SampleRowKeysResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v2.SampleRowKeysResponse)
}

void SampleRowKeysResponse::SharedCtor() {
  row_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offset_bytes_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

SampleRowKeysResponse::~SampleRowKeysResponse() {
  // @@protoc_insertion_point(destructor:google.bigtable.v2.SampleRowKeysResponse)
  SharedDtor();
}

void SampleRowKeysResponse::SharedDtor() {
  row_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SampleRowKeysResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SampleRowKeysResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SampleRowKeysResponse_descriptor_;
}

const SampleRowKeysResponse& SampleRowKeysResponse::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fv2_2fbigtable_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SampleRowKeysResponse> SampleRowKeysResponse_default_instance_;

SampleRowKeysResponse* SampleRowKeysResponse::New(::google::protobuf::Arena* arena) const {
  SampleRowKeysResponse* n = new SampleRowKeysResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SampleRowKeysResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v2.SampleRowKeysResponse)
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offset_bytes_ = GOOGLE_LONGLONG(0);
}

bool SampleRowKeysResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v2.SampleRowKeysResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes row_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_row_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_offset_bytes;
        break;
      }

      // optional int64 offset_bytes = 2;
      case 2: {
        if (tag == 16) {
         parse_offset_bytes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_bytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v2.SampleRowKeysResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v2.SampleRowKeysResponse)
  return false;
#undef DO_
}

void SampleRowKeysResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v2.SampleRowKeysResponse)
  // optional bytes row_key = 1;
  if (this->row_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->row_key(), output);
  }

  // optional int64 offset_bytes = 2;
  if (this->offset_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->offset_bytes(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v2.SampleRowKeysResponse)
}

::google::protobuf::uint8* SampleRowKeysResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v2.SampleRowKeysResponse)
  // optional bytes row_key = 1;
  if (this->row_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->row_key(), target);
  }

  // optional int64 offset_bytes = 2;
  if (this->offset_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->offset_bytes(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v2.SampleRowKeysResponse)
  return target;
}

size_t SampleRowKeysResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v2.SampleRowKeysResponse)
  size_t total_size = 0;

  // optional bytes row_key = 1;
  if (this->row_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->row_key());
  }

  // optional int64 offset_bytes = 2;
  if (this->offset_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->offset_bytes());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SampleRowKeysResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v2.SampleRowKeysResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SampleRowKeysResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SampleRowKeysResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v2.SampleRowKeysResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v2.SampleRowKeysResponse)
    UnsafeMergeFrom(*source);
  }
}

void SampleRowKeysResponse::MergeFrom(const SampleRowKeysResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v2.SampleRowKeysResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SampleRowKeysResponse::UnsafeMergeFrom(const SampleRowKeysResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.row_key().size() > 0) {

    row_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.row_key_);
  }
  if (from.offset_bytes() != 0) {
    set_offset_bytes(from.offset_bytes());
  }
}

void SampleRowKeysResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v2.SampleRowKeysResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SampleRowKeysResponse::CopyFrom(const SampleRowKeysResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v2.SampleRowKeysResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SampleRowKeysResponse::IsInitialized() const {

  return true;
}

void SampleRowKeysResponse::Swap(SampleRowKeysResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SampleRowKeysResponse::InternalSwap(SampleRowKeysResponse* other) {
  row_key_.Swap(&other->row_key_);
  std::swap(offset_bytes_, other->offset_bytes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SampleRowKeysResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SampleRowKeysResponse_descriptor_;
  metadata.reflection = SampleRowKeysResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SampleRowKeysResponse

// optional bytes row_key = 1;
void SampleRowKeysResponse::clear_row_key() {
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SampleRowKeysResponse::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.SampleRowKeysResponse.row_key)
  return row_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SampleRowKeysResponse::set_row_key(const ::std::string& value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.SampleRowKeysResponse.row_key)
}
void SampleRowKeysResponse::set_row_key(const char* value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.SampleRowKeysResponse.row_key)
}
void SampleRowKeysResponse::set_row_key(const void* value, size_t size) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.SampleRowKeysResponse.row_key)
}
::std::string* SampleRowKeysResponse::mutable_row_key() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.SampleRowKeysResponse.row_key)
  return row_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SampleRowKeysResponse::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.SampleRowKeysResponse.row_key)
  
  return row_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SampleRowKeysResponse::set_allocated_row_key(::std::string* row_key) {
  if (row_key != NULL) {
    
  } else {
    
  }
  row_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row_key);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.SampleRowKeysResponse.row_key)
}

// optional int64 offset_bytes = 2;
void SampleRowKeysResponse::clear_offset_bytes() {
  offset_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SampleRowKeysResponse::offset_bytes() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.SampleRowKeysResponse.offset_bytes)
  return offset_bytes_;
}
void SampleRowKeysResponse::set_offset_bytes(::google::protobuf::int64 value) {
  
  offset_bytes_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v2.SampleRowKeysResponse.offset_bytes)
}

inline const SampleRowKeysResponse* SampleRowKeysResponse::internal_default_instance() {
  return &SampleRowKeysResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MutateRowRequest::kTableNameFieldNumber;
const int MutateRowRequest::kRowKeyFieldNumber;
const int MutateRowRequest::kMutationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MutateRowRequest::MutateRowRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fv2_2fbigtable_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v2.MutateRowRequest)
}

void MutateRowRequest::InitAsDefaultInstance() {
}

MutateRowRequest::MutateRowRequest(const MutateRowRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v2.MutateRowRequest)
}

void MutateRowRequest::SharedCtor() {
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  row_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

MutateRowRequest::~MutateRowRequest() {
  // @@protoc_insertion_point(destructor:google.bigtable.v2.MutateRowRequest)
  SharedDtor();
}

void MutateRowRequest::SharedDtor() {
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  row_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MutateRowRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MutateRowRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MutateRowRequest_descriptor_;
}

const MutateRowRequest& MutateRowRequest::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fv2_2fbigtable_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MutateRowRequest> MutateRowRequest_default_instance_;

MutateRowRequest* MutateRowRequest::New(::google::protobuf::Arena* arena) const {
  MutateRowRequest* n = new MutateRowRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MutateRowRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v2.MutateRowRequest)
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mutations_.Clear();
}

bool MutateRowRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v2.MutateRowRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.v2.MutateRowRequest.table_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_row_key;
        break;
      }

      // optional bytes row_key = 2;
      case 2: {
        if (tag == 18) {
         parse_row_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_row_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mutations;
        break;
      }

      // repeated .google.bigtable.v2.Mutation mutations = 3;
      case 3: {
        if (tag == 26) {
         parse_mutations:
          DO_(input->IncrementRecursionDepth());
         parse_loop_mutations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mutations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_mutations;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v2.MutateRowRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v2.MutateRowRequest)
  return false;
#undef DO_
}

void MutateRowRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v2.MutateRowRequest)
  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v2.MutateRowRequest.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table_name(), output);
  }

  // optional bytes row_key = 2;
  if (this->row_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->row_key(), output);
  }

  // repeated .google.bigtable.v2.Mutation mutations = 3;
  for (unsigned int i = 0, n = this->mutations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mutations(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v2.MutateRowRequest)
}

::google::protobuf::uint8* MutateRowRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v2.MutateRowRequest)
  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v2.MutateRowRequest.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // optional bytes row_key = 2;
  if (this->row_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->row_key(), target);
  }

  // repeated .google.bigtable.v2.Mutation mutations = 3;
  for (unsigned int i = 0, n = this->mutations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->mutations(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v2.MutateRowRequest)
  return target;
}

size_t MutateRowRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v2.MutateRowRequest)
  size_t total_size = 0;

  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  // optional bytes row_key = 2;
  if (this->row_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->row_key());
  }

  // repeated .google.bigtable.v2.Mutation mutations = 3;
  {
    unsigned int count = this->mutations_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mutations(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MutateRowRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v2.MutateRowRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MutateRowRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MutateRowRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v2.MutateRowRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v2.MutateRowRequest)
    UnsafeMergeFrom(*source);
  }
}

void MutateRowRequest::MergeFrom(const MutateRowRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v2.MutateRowRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MutateRowRequest::UnsafeMergeFrom(const MutateRowRequest& from) {
  GOOGLE_DCHECK(&from != this);
  mutations_.MergeFrom(from.mutations_);
  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  if (from.row_key().size() > 0) {

    row_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.row_key_);
  }
}

void MutateRowRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v2.MutateRowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutateRowRequest::CopyFrom(const MutateRowRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v2.MutateRowRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MutateRowRequest::IsInitialized() const {

  return true;
}

void MutateRowRequest::Swap(MutateRowRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MutateRowRequest::InternalSwap(MutateRowRequest* other) {
  table_name_.Swap(&other->table_name_);
  row_key_.Swap(&other->row_key_);
  mutations_.UnsafeArenaSwap(&other->mutations_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MutateRowRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MutateRowRequest_descriptor_;
  metadata.reflection = MutateRowRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MutateRowRequest

// optional string table_name = 1;
void MutateRowRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MutateRowRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowRequest.table_name)
  return table_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MutateRowRequest::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.MutateRowRequest.table_name)
}
void MutateRowRequest::set_table_name(const char* value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.MutateRowRequest.table_name)
}
void MutateRowRequest::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.MutateRowRequest.table_name)
}
::std::string* MutateRowRequest::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.MutateRowRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MutateRowRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.MutateRowRequest.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MutateRowRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.MutateRowRequest.table_name)
}

// optional bytes row_key = 2;
void MutateRowRequest::clear_row_key() {
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MutateRowRequest::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowRequest.row_key)
  return row_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MutateRowRequest::set_row_key(const ::std::string& value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.MutateRowRequest.row_key)
}
void MutateRowRequest::set_row_key(const char* value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.MutateRowRequest.row_key)
}
void MutateRowRequest::set_row_key(const void* value, size_t size) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.MutateRowRequest.row_key)
}
::std::string* MutateRowRequest::mutable_row_key() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.MutateRowRequest.row_key)
  return row_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MutateRowRequest::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.MutateRowRequest.row_key)
  
  return row_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MutateRowRequest::set_allocated_row_key(::std::string* row_key) {
  if (row_key != NULL) {
    
  } else {
    
  }
  row_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row_key);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.MutateRowRequest.row_key)
}

// repeated .google.bigtable.v2.Mutation mutations = 3;
int MutateRowRequest::mutations_size() const {
  return mutations_.size();
}
void MutateRowRequest::clear_mutations() {
  mutations_.Clear();
}
const ::google::bigtable::v2::Mutation& MutateRowRequest::mutations(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowRequest.mutations)
  return mutations_.Get(index);
}
::google::bigtable::v2::Mutation* MutateRowRequest::mutable_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.MutateRowRequest.mutations)
  return mutations_.Mutable(index);
}
::google::bigtable::v2::Mutation* MutateRowRequest::add_mutations() {
  // @@protoc_insertion_point(field_add:google.bigtable.v2.MutateRowRequest.mutations)
  return mutations_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::Mutation >*
MutateRowRequest::mutable_mutations() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.MutateRowRequest.mutations)
  return &mutations_;
}
const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::Mutation >&
MutateRowRequest::mutations() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.MutateRowRequest.mutations)
  return mutations_;
}

inline const MutateRowRequest* MutateRowRequest::internal_default_instance() {
  return &MutateRowRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MutateRowResponse::MutateRowResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fv2_2fbigtable_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v2.MutateRowResponse)
}

void MutateRowResponse::InitAsDefaultInstance() {
}

MutateRowResponse::MutateRowResponse(const MutateRowResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v2.MutateRowResponse)
}

void MutateRowResponse::SharedCtor() {
  _cached_size_ = 0;
}

MutateRowResponse::~MutateRowResponse() {
  // @@protoc_insertion_point(destructor:google.bigtable.v2.MutateRowResponse)
  SharedDtor();
}

void MutateRowResponse::SharedDtor() {
}

void MutateRowResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MutateRowResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MutateRowResponse_descriptor_;
}

const MutateRowResponse& MutateRowResponse::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fv2_2fbigtable_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MutateRowResponse> MutateRowResponse_default_instance_;

MutateRowResponse* MutateRowResponse::New(::google::protobuf::Arena* arena) const {
  MutateRowResponse* n = new MutateRowResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MutateRowResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v2.MutateRowResponse)
}

bool MutateRowResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v2.MutateRowResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v2.MutateRowResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v2.MutateRowResponse)
  return false;
#undef DO_
}

void MutateRowResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v2.MutateRowResponse)
  // @@protoc_insertion_point(serialize_end:google.bigtable.v2.MutateRowResponse)
}

::google::protobuf::uint8* MutateRowResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v2.MutateRowResponse)
  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v2.MutateRowResponse)
  return target;
}

size_t MutateRowResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v2.MutateRowResponse)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MutateRowResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v2.MutateRowResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MutateRowResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MutateRowResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v2.MutateRowResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v2.MutateRowResponse)
    UnsafeMergeFrom(*source);
  }
}

void MutateRowResponse::MergeFrom(const MutateRowResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v2.MutateRowResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MutateRowResponse::UnsafeMergeFrom(const MutateRowResponse& from) {
  GOOGLE_DCHECK(&from != this);
}

void MutateRowResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v2.MutateRowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutateRowResponse::CopyFrom(const MutateRowResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v2.MutateRowResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MutateRowResponse::IsInitialized() const {

  return true;
}

void MutateRowResponse::Swap(MutateRowResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MutateRowResponse::InternalSwap(MutateRowResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MutateRowResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MutateRowResponse_descriptor_;
  metadata.reflection = MutateRowResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MutateRowResponse

inline const MutateRowResponse* MutateRowResponse::internal_default_instance() {
  return &MutateRowResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MutateRowsRequest_Entry::kRowKeyFieldNumber;
const int MutateRowsRequest_Entry::kMutationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MutateRowsRequest_Entry::MutateRowsRequest_Entry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fv2_2fbigtable_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v2.MutateRowsRequest.Entry)
}

void MutateRowsRequest_Entry::InitAsDefaultInstance() {
}

MutateRowsRequest_Entry::MutateRowsRequest_Entry(const MutateRowsRequest_Entry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v2.MutateRowsRequest.Entry)
}

void MutateRowsRequest_Entry::SharedCtor() {
  row_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

MutateRowsRequest_Entry::~MutateRowsRequest_Entry() {
  // @@protoc_insertion_point(destructor:google.bigtable.v2.MutateRowsRequest.Entry)
  SharedDtor();
}

void MutateRowsRequest_Entry::SharedDtor() {
  row_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MutateRowsRequest_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MutateRowsRequest_Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MutateRowsRequest_Entry_descriptor_;
}

const MutateRowsRequest_Entry& MutateRowsRequest_Entry::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fv2_2fbigtable_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MutateRowsRequest_Entry> MutateRowsRequest_Entry_default_instance_;

MutateRowsRequest_Entry* MutateRowsRequest_Entry::New(::google::protobuf::Arena* arena) const {
  MutateRowsRequest_Entry* n = new MutateRowsRequest_Entry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MutateRowsRequest_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v2.MutateRowsRequest.Entry)
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mutations_.Clear();
}

bool MutateRowsRequest_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v2.MutateRowsRequest.Entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes row_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_row_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mutations;
        break;
      }

      // repeated .google.bigtable.v2.Mutation mutations = 2;
      case 2: {
        if (tag == 18) {
         parse_mutations:
          DO_(input->IncrementRecursionDepth());
         parse_loop_mutations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mutations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_mutations;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v2.MutateRowsRequest.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v2.MutateRowsRequest.Entry)
  return false;
#undef DO_
}

void MutateRowsRequest_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v2.MutateRowsRequest.Entry)
  // optional bytes row_key = 1;
  if (this->row_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->row_key(), output);
  }

  // repeated .google.bigtable.v2.Mutation mutations = 2;
  for (unsigned int i = 0, n = this->mutations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mutations(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v2.MutateRowsRequest.Entry)
}

::google::protobuf::uint8* MutateRowsRequest_Entry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v2.MutateRowsRequest.Entry)
  // optional bytes row_key = 1;
  if (this->row_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->row_key(), target);
  }

  // repeated .google.bigtable.v2.Mutation mutations = 2;
  for (unsigned int i = 0, n = this->mutations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->mutations(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v2.MutateRowsRequest.Entry)
  return target;
}

size_t MutateRowsRequest_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v2.MutateRowsRequest.Entry)
  size_t total_size = 0;

  // optional bytes row_key = 1;
  if (this->row_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->row_key());
  }

  // repeated .google.bigtable.v2.Mutation mutations = 2;
  {
    unsigned int count = this->mutations_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mutations(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MutateRowsRequest_Entry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v2.MutateRowsRequest.Entry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MutateRowsRequest_Entry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MutateRowsRequest_Entry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v2.MutateRowsRequest.Entry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v2.MutateRowsRequest.Entry)
    UnsafeMergeFrom(*source);
  }
}

void MutateRowsRequest_Entry::MergeFrom(const MutateRowsRequest_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v2.MutateRowsRequest.Entry)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MutateRowsRequest_Entry::UnsafeMergeFrom(const MutateRowsRequest_Entry& from) {
  GOOGLE_DCHECK(&from != this);
  mutations_.MergeFrom(from.mutations_);
  if (from.row_key().size() > 0) {

    row_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.row_key_);
  }
}

void MutateRowsRequest_Entry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v2.MutateRowsRequest.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutateRowsRequest_Entry::CopyFrom(const MutateRowsRequest_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v2.MutateRowsRequest.Entry)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MutateRowsRequest_Entry::IsInitialized() const {

  return true;
}

void MutateRowsRequest_Entry::Swap(MutateRowsRequest_Entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MutateRowsRequest_Entry::InternalSwap(MutateRowsRequest_Entry* other) {
  row_key_.Swap(&other->row_key_);
  mutations_.UnsafeArenaSwap(&other->mutations_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MutateRowsRequest_Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MutateRowsRequest_Entry_descriptor_;
  metadata.reflection = MutateRowsRequest_Entry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MutateRowsRequest::kTableNameFieldNumber;
const int MutateRowsRequest::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MutateRowsRequest::MutateRowsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fv2_2fbigtable_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v2.MutateRowsRequest)
}

void MutateRowsRequest::InitAsDefaultInstance() {
}

MutateRowsRequest::MutateRowsRequest(const MutateRowsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v2.MutateRowsRequest)
}

void MutateRowsRequest::SharedCtor() {
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

MutateRowsRequest::~MutateRowsRequest() {
  // @@protoc_insertion_point(destructor:google.bigtable.v2.MutateRowsRequest)
  SharedDtor();
}

void MutateRowsRequest::SharedDtor() {
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MutateRowsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MutateRowsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MutateRowsRequest_descriptor_;
}

const MutateRowsRequest& MutateRowsRequest::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fv2_2fbigtable_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MutateRowsRequest> MutateRowsRequest_default_instance_;

MutateRowsRequest* MutateRowsRequest::New(::google::protobuf::Arena* arena) const {
  MutateRowsRequest* n = new MutateRowsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MutateRowsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v2.MutateRowsRequest)
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entries_.Clear();
}

bool MutateRowsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v2.MutateRowsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.v2.MutateRowsRequest.table_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_entries;
        break;
      }

      // repeated .google.bigtable.v2.MutateRowsRequest.Entry entries = 2;
      case 2: {
        if (tag == 18) {
         parse_entries:
          DO_(input->IncrementRecursionDepth());
         parse_loop_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_entries;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v2.MutateRowsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v2.MutateRowsRequest)
  return false;
#undef DO_
}

void MutateRowsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v2.MutateRowsRequest)
  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v2.MutateRowsRequest.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table_name(), output);
  }

  // repeated .google.bigtable.v2.MutateRowsRequest.Entry entries = 2;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entries(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v2.MutateRowsRequest)
}

::google::protobuf::uint8* MutateRowsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v2.MutateRowsRequest)
  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v2.MutateRowsRequest.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // repeated .google.bigtable.v2.MutateRowsRequest.Entry entries = 2;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->entries(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v2.MutateRowsRequest)
  return target;
}

size_t MutateRowsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v2.MutateRowsRequest)
  size_t total_size = 0;

  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  // repeated .google.bigtable.v2.MutateRowsRequest.Entry entries = 2;
  {
    unsigned int count = this->entries_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entries(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MutateRowsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v2.MutateRowsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MutateRowsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MutateRowsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v2.MutateRowsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v2.MutateRowsRequest)
    UnsafeMergeFrom(*source);
  }
}

void MutateRowsRequest::MergeFrom(const MutateRowsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v2.MutateRowsRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MutateRowsRequest::UnsafeMergeFrom(const MutateRowsRequest& from) {
  GOOGLE_DCHECK(&from != this);
  entries_.MergeFrom(from.entries_);
  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
}

void MutateRowsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v2.MutateRowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutateRowsRequest::CopyFrom(const MutateRowsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v2.MutateRowsRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MutateRowsRequest::IsInitialized() const {

  return true;
}

void MutateRowsRequest::Swap(MutateRowsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MutateRowsRequest::InternalSwap(MutateRowsRequest* other) {
  table_name_.Swap(&other->table_name_);
  entries_.UnsafeArenaSwap(&other->entries_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MutateRowsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MutateRowsRequest_descriptor_;
  metadata.reflection = MutateRowsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MutateRowsRequest_Entry

// optional bytes row_key = 1;
void MutateRowsRequest_Entry::clear_row_key() {
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MutateRowsRequest_Entry::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowsRequest.Entry.row_key)
  return row_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MutateRowsRequest_Entry::set_row_key(const ::std::string& value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.MutateRowsRequest.Entry.row_key)
}
void MutateRowsRequest_Entry::set_row_key(const char* value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.MutateRowsRequest.Entry.row_key)
}
void MutateRowsRequest_Entry::set_row_key(const void* value, size_t size) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.MutateRowsRequest.Entry.row_key)
}
::std::string* MutateRowsRequest_Entry::mutable_row_key() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.MutateRowsRequest.Entry.row_key)
  return row_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MutateRowsRequest_Entry::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.MutateRowsRequest.Entry.row_key)
  
  return row_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MutateRowsRequest_Entry::set_allocated_row_key(::std::string* row_key) {
  if (row_key != NULL) {
    
  } else {
    
  }
  row_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row_key);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.MutateRowsRequest.Entry.row_key)
}

// repeated .google.bigtable.v2.Mutation mutations = 2;
int MutateRowsRequest_Entry::mutations_size() const {
  return mutations_.size();
}
void MutateRowsRequest_Entry::clear_mutations() {
  mutations_.Clear();
}
const ::google::bigtable::v2::Mutation& MutateRowsRequest_Entry::mutations(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowsRequest.Entry.mutations)
  return mutations_.Get(index);
}
::google::bigtable::v2::Mutation* MutateRowsRequest_Entry::mutable_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.MutateRowsRequest.Entry.mutations)
  return mutations_.Mutable(index);
}
::google::bigtable::v2::Mutation* MutateRowsRequest_Entry::add_mutations() {
  // @@protoc_insertion_point(field_add:google.bigtable.v2.MutateRowsRequest.Entry.mutations)
  return mutations_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::Mutation >*
MutateRowsRequest_Entry::mutable_mutations() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.MutateRowsRequest.Entry.mutations)
  return &mutations_;
}
const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::Mutation >&
MutateRowsRequest_Entry::mutations() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.MutateRowsRequest.Entry.mutations)
  return mutations_;
}

inline const MutateRowsRequest_Entry* MutateRowsRequest_Entry::internal_default_instance() {
  return &MutateRowsRequest_Entry_default_instance_.get();
}
// -------------------------------------------------------------------

// MutateRowsRequest

// optional string table_name = 1;
void MutateRowsRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MutateRowsRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowsRequest.table_name)
  return table_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MutateRowsRequest::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.MutateRowsRequest.table_name)
}
void MutateRowsRequest::set_table_name(const char* value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.MutateRowsRequest.table_name)
}
void MutateRowsRequest::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.MutateRowsRequest.table_name)
}
::std::string* MutateRowsRequest::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.MutateRowsRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MutateRowsRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.MutateRowsRequest.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MutateRowsRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.MutateRowsRequest.table_name)
}

// repeated .google.bigtable.v2.MutateRowsRequest.Entry entries = 2;
int MutateRowsRequest::entries_size() const {
  return entries_.size();
}
void MutateRowsRequest::clear_entries() {
  entries_.Clear();
}
const ::google::bigtable::v2::MutateRowsRequest_Entry& MutateRowsRequest::entries(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowsRequest.entries)
  return entries_.Get(index);
}
::google::bigtable::v2::MutateRowsRequest_Entry* MutateRowsRequest::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.MutateRowsRequest.entries)
  return entries_.Mutable(index);
}
::google::bigtable::v2::MutateRowsRequest_Entry* MutateRowsRequest::add_entries() {
  // @@protoc_insertion_point(field_add:google.bigtable.v2.MutateRowsRequest.entries)
  return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::MutateRowsRequest_Entry >*
MutateRowsRequest::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.MutateRowsRequest.entries)
  return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::MutateRowsRequest_Entry >&
MutateRowsRequest::entries() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.MutateRowsRequest.entries)
  return entries_;
}

inline const MutateRowsRequest* MutateRowsRequest::internal_default_instance() {
  return &MutateRowsRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MutateRowsResponse_Entry::kIndexFieldNumber;
const int MutateRowsResponse_Entry::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MutateRowsResponse_Entry::MutateRowsResponse_Entry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fv2_2fbigtable_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v2.MutateRowsResponse.Entry)
}

void MutateRowsResponse_Entry::InitAsDefaultInstance() {
  status_ = const_cast< ::google::rpc::Status*>(
      ::google::rpc::Status::internal_default_instance());
}

MutateRowsResponse_Entry::MutateRowsResponse_Entry(const MutateRowsResponse_Entry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v2.MutateRowsResponse.Entry)
}

void MutateRowsResponse_Entry::SharedCtor() {
  status_ = NULL;
  index_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

MutateRowsResponse_Entry::~MutateRowsResponse_Entry() {
  // @@protoc_insertion_point(destructor:google.bigtable.v2.MutateRowsResponse.Entry)
  SharedDtor();
}

void MutateRowsResponse_Entry::SharedDtor() {
  if (this != &MutateRowsResponse_Entry_default_instance_.get()) {
    delete status_;
  }
}

void MutateRowsResponse_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MutateRowsResponse_Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MutateRowsResponse_Entry_descriptor_;
}

const MutateRowsResponse_Entry& MutateRowsResponse_Entry::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fv2_2fbigtable_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MutateRowsResponse_Entry> MutateRowsResponse_Entry_default_instance_;

MutateRowsResponse_Entry* MutateRowsResponse_Entry::New(::google::protobuf::Arena* arena) const {
  MutateRowsResponse_Entry* n = new MutateRowsResponse_Entry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MutateRowsResponse_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v2.MutateRowsResponse.Entry)
  index_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}

bool MutateRowsResponse_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v2.MutateRowsResponse.Entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 index = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }

      // optional .google.rpc.Status status = 2;
      case 2: {
        if (tag == 18) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v2.MutateRowsResponse.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v2.MutateRowsResponse.Entry)
  return false;
#undef DO_
}

void MutateRowsResponse_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v2.MutateRowsResponse.Entry)
  // optional int64 index = 1;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->index(), output);
  }

  // optional .google.rpc.Status status = 2;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->status_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v2.MutateRowsResponse.Entry)
}

::google::protobuf::uint8* MutateRowsResponse_Entry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v2.MutateRowsResponse.Entry)
  // optional int64 index = 1;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->index(), target);
  }

  // optional .google.rpc.Status status = 2;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->status_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v2.MutateRowsResponse.Entry)
  return target;
}

size_t MutateRowsResponse_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v2.MutateRowsResponse.Entry)
  size_t total_size = 0;

  // optional int64 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->index());
  }

  // optional .google.rpc.Status status = 2;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MutateRowsResponse_Entry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v2.MutateRowsResponse.Entry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MutateRowsResponse_Entry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MutateRowsResponse_Entry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v2.MutateRowsResponse.Entry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v2.MutateRowsResponse.Entry)
    UnsafeMergeFrom(*source);
  }
}

void MutateRowsResponse_Entry::MergeFrom(const MutateRowsResponse_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v2.MutateRowsResponse.Entry)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MutateRowsResponse_Entry::UnsafeMergeFrom(const MutateRowsResponse_Entry& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.has_status()) {
    mutable_status()->::google::rpc::Status::MergeFrom(from.status());
  }
}

void MutateRowsResponse_Entry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v2.MutateRowsResponse.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutateRowsResponse_Entry::CopyFrom(const MutateRowsResponse_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v2.MutateRowsResponse.Entry)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MutateRowsResponse_Entry::IsInitialized() const {

  return true;
}

void MutateRowsResponse_Entry::Swap(MutateRowsResponse_Entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MutateRowsResponse_Entry::InternalSwap(MutateRowsResponse_Entry* other) {
  std::swap(index_, other->index_);
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MutateRowsResponse_Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MutateRowsResponse_Entry_descriptor_;
  metadata.reflection = MutateRowsResponse_Entry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MutateRowsResponse::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MutateRowsResponse::MutateRowsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fv2_2fbigtable_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v2.MutateRowsResponse)
}

void MutateRowsResponse::InitAsDefaultInstance() {
}

MutateRowsResponse::MutateRowsResponse(const MutateRowsResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v2.MutateRowsResponse)
}

void MutateRowsResponse::SharedCtor() {
  _cached_size_ = 0;
}

MutateRowsResponse::~MutateRowsResponse() {
  // @@protoc_insertion_point(destructor:google.bigtable.v2.MutateRowsResponse)
  SharedDtor();
}

void MutateRowsResponse::SharedDtor() {
}

void MutateRowsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MutateRowsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MutateRowsResponse_descriptor_;
}

const MutateRowsResponse& MutateRowsResponse::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fv2_2fbigtable_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MutateRowsResponse> MutateRowsResponse_default_instance_;

MutateRowsResponse* MutateRowsResponse::New(::google::protobuf::Arena* arena) const {
  MutateRowsResponse* n = new MutateRowsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MutateRowsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v2.MutateRowsResponse)
  entries_.Clear();
}

bool MutateRowsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v2.MutateRowsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.bigtable.v2.MutateRowsResponse.Entry entries = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_entries;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v2.MutateRowsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v2.MutateRowsResponse)
  return false;
#undef DO_
}

void MutateRowsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v2.MutateRowsResponse)
  // repeated .google.bigtable.v2.MutateRowsResponse.Entry entries = 1;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entries(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v2.MutateRowsResponse)
}

::google::protobuf::uint8* MutateRowsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v2.MutateRowsResponse)
  // repeated .google.bigtable.v2.MutateRowsResponse.Entry entries = 1;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->entries(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v2.MutateRowsResponse)
  return target;
}

size_t MutateRowsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v2.MutateRowsResponse)
  size_t total_size = 0;

  // repeated .google.bigtable.v2.MutateRowsResponse.Entry entries = 1;
  {
    unsigned int count = this->entries_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entries(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MutateRowsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v2.MutateRowsResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MutateRowsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MutateRowsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v2.MutateRowsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v2.MutateRowsResponse)
    UnsafeMergeFrom(*source);
  }
}

void MutateRowsResponse::MergeFrom(const MutateRowsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v2.MutateRowsResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MutateRowsResponse::UnsafeMergeFrom(const MutateRowsResponse& from) {
  GOOGLE_DCHECK(&from != this);
  entries_.MergeFrom(from.entries_);
}

void MutateRowsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v2.MutateRowsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutateRowsResponse::CopyFrom(const MutateRowsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v2.MutateRowsResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MutateRowsResponse::IsInitialized() const {

  return true;
}

void MutateRowsResponse::Swap(MutateRowsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MutateRowsResponse::InternalSwap(MutateRowsResponse* other) {
  entries_.UnsafeArenaSwap(&other->entries_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MutateRowsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MutateRowsResponse_descriptor_;
  metadata.reflection = MutateRowsResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MutateRowsResponse_Entry

// optional int64 index = 1;
void MutateRowsResponse_Entry::clear_index() {
  index_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MutateRowsResponse_Entry::index() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowsResponse.Entry.index)
  return index_;
}
void MutateRowsResponse_Entry::set_index(::google::protobuf::int64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v2.MutateRowsResponse.Entry.index)
}

// optional .google.rpc.Status status = 2;
bool MutateRowsResponse_Entry::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
void MutateRowsResponse_Entry::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::google::rpc::Status& MutateRowsResponse_Entry::status() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowsResponse.Entry.status)
  return status_ != NULL ? *status_
                         : *::google::rpc::Status::internal_default_instance();
}
::google::rpc::Status* MutateRowsResponse_Entry::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::google::rpc::Status;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.MutateRowsResponse.Entry.status)
  return status_;
}
::google::rpc::Status* MutateRowsResponse_Entry::release_status() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.MutateRowsResponse.Entry.status)
  
  ::google::rpc::Status* temp = status_;
  status_ = NULL;
  return temp;
}
void MutateRowsResponse_Entry::set_allocated_status(::google::rpc::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.MutateRowsResponse.Entry.status)
}

inline const MutateRowsResponse_Entry* MutateRowsResponse_Entry::internal_default_instance() {
  return &MutateRowsResponse_Entry_default_instance_.get();
}
// -------------------------------------------------------------------

// MutateRowsResponse

// repeated .google.bigtable.v2.MutateRowsResponse.Entry entries = 1;
int MutateRowsResponse::entries_size() const {
  return entries_.size();
}
void MutateRowsResponse::clear_entries() {
  entries_.Clear();
}
const ::google::bigtable::v2::MutateRowsResponse_Entry& MutateRowsResponse::entries(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowsResponse.entries)
  return entries_.Get(index);
}
::google::bigtable::v2::MutateRowsResponse_Entry* MutateRowsResponse::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.MutateRowsResponse.entries)
  return entries_.Mutable(index);
}
::google::bigtable::v2::MutateRowsResponse_Entry* MutateRowsResponse::add_entries() {
  // @@protoc_insertion_point(field_add:google.bigtable.v2.MutateRowsResponse.entries)
  return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::MutateRowsResponse_Entry >*
MutateRowsResponse::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.MutateRowsResponse.entries)
  return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::MutateRowsResponse_Entry >&
MutateRowsResponse::entries() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.MutateRowsResponse.entries)
  return entries_;
}

inline const MutateRowsResponse* MutateRowsResponse::internal_default_instance() {
  return &MutateRowsResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckAndMutateRowRequest::kTableNameFieldNumber;
const int CheckAndMutateRowRequest::kRowKeyFieldNumber;
const int CheckAndMutateRowRequest::kPredicateFilterFieldNumber;
const int CheckAndMutateRowRequest::kTrueMutationsFieldNumber;
const int CheckAndMutateRowRequest::kFalseMutationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckAndMutateRowRequest::CheckAndMutateRowRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fv2_2fbigtable_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v2.CheckAndMutateRowRequest)
}

void CheckAndMutateRowRequest::InitAsDefaultInstance() {
  predicate_filter_ = const_cast< ::google::bigtable::v2::RowFilter*>(
      ::google::bigtable::v2::RowFilter::internal_default_instance());
}

CheckAndMutateRowRequest::CheckAndMutateRowRequest(const CheckAndMutateRowRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v2.CheckAndMutateRowRequest)
}

void CheckAndMutateRowRequest::SharedCtor() {
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  row_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  predicate_filter_ = NULL;
  _cached_size_ = 0;
}

CheckAndMutateRowRequest::~CheckAndMutateRowRequest() {
  // @@protoc_insertion_point(destructor:google.bigtable.v2.CheckAndMutateRowRequest)
  SharedDtor();
}

void CheckAndMutateRowRequest::SharedDtor() {
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  row_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &CheckAndMutateRowRequest_default_instance_.get()) {
    delete predicate_filter_;
  }
}

void CheckAndMutateRowRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckAndMutateRowRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckAndMutateRowRequest_descriptor_;
}

const CheckAndMutateRowRequest& CheckAndMutateRowRequest::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fv2_2fbigtable_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CheckAndMutateRowRequest> CheckAndMutateRowRequest_default_instance_;

CheckAndMutateRowRequest* CheckAndMutateRowRequest::New(::google::protobuf::Arena* arena) const {
  CheckAndMutateRowRequest* n = new CheckAndMutateRowRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckAndMutateRowRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v2.CheckAndMutateRowRequest)
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && predicate_filter_ != NULL) delete predicate_filter_;
  predicate_filter_ = NULL;
  true_mutations_.Clear();
  false_mutations_.Clear();
}

bool CheckAndMutateRowRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v2.CheckAndMutateRowRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.v2.CheckAndMutateRowRequest.table_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_row_key;
        break;
      }

      // optional bytes row_key = 2;
      case 2: {
        if (tag == 18) {
         parse_row_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_row_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_true_mutations;
        break;
      }

      // repeated .google.bigtable.v2.Mutation true_mutations = 4;
      case 4: {
        if (tag == 34) {
         parse_true_mutations:
          DO_(input->IncrementRecursionDepth());
         parse_loop_true_mutations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_true_mutations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_true_mutations;
        if (input->ExpectTag(42)) goto parse_loop_false_mutations;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .google.bigtable.v2.Mutation false_mutations = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_false_mutations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_false_mutations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_false_mutations;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(50)) goto parse_predicate_filter;
        break;
      }

      // optional .google.bigtable.v2.RowFilter predicate_filter = 6;
      case 6: {
        if (tag == 50) {
         parse_predicate_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_predicate_filter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v2.CheckAndMutateRowRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v2.CheckAndMutateRowRequest)
  return false;
#undef DO_
}

void CheckAndMutateRowRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v2.CheckAndMutateRowRequest)
  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v2.CheckAndMutateRowRequest.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table_name(), output);
  }

  // optional bytes row_key = 2;
  if (this->row_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->row_key(), output);
  }

  // repeated .google.bigtable.v2.Mutation true_mutations = 4;
  for (unsigned int i = 0, n = this->true_mutations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->true_mutations(i), output);
  }

  // repeated .google.bigtable.v2.Mutation false_mutations = 5;
  for (unsigned int i = 0, n = this->false_mutations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->false_mutations(i), output);
  }

  // optional .google.bigtable.v2.RowFilter predicate_filter = 6;
  if (this->has_predicate_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->predicate_filter_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v2.CheckAndMutateRowRequest)
}

::google::protobuf::uint8* CheckAndMutateRowRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v2.CheckAndMutateRowRequest)
  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v2.CheckAndMutateRowRequest.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // optional bytes row_key = 2;
  if (this->row_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->row_key(), target);
  }

  // repeated .google.bigtable.v2.Mutation true_mutations = 4;
  for (unsigned int i = 0, n = this->true_mutations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->true_mutations(i), false, target);
  }

  // repeated .google.bigtable.v2.Mutation false_mutations = 5;
  for (unsigned int i = 0, n = this->false_mutations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->false_mutations(i), false, target);
  }

  // optional .google.bigtable.v2.RowFilter predicate_filter = 6;
  if (this->has_predicate_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->predicate_filter_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v2.CheckAndMutateRowRequest)
  return target;
}

size_t CheckAndMutateRowRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v2.CheckAndMutateRowRequest)
  size_t total_size = 0;

  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  // optional bytes row_key = 2;
  if (this->row_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->row_key());
  }

  // optional .google.bigtable.v2.RowFilter predicate_filter = 6;
  if (this->has_predicate_filter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->predicate_filter_);
  }

  // repeated .google.bigtable.v2.Mutation true_mutations = 4;
  {
    unsigned int count = this->true_mutations_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->true_mutations(i));
    }
  }

  // repeated .google.bigtable.v2.Mutation false_mutations = 5;
  {
    unsigned int count = this->false_mutations_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->false_mutations(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckAndMutateRowRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v2.CheckAndMutateRowRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CheckAndMutateRowRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckAndMutateRowRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v2.CheckAndMutateRowRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v2.CheckAndMutateRowRequest)
    UnsafeMergeFrom(*source);
  }
}

void CheckAndMutateRowRequest::MergeFrom(const CheckAndMutateRowRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v2.CheckAndMutateRowRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CheckAndMutateRowRequest::UnsafeMergeFrom(const CheckAndMutateRowRequest& from) {
  GOOGLE_DCHECK(&from != this);
  true_mutations_.MergeFrom(from.true_mutations_);
  false_mutations_.MergeFrom(from.false_mutations_);
  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  if (from.row_key().size() > 0) {

    row_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.row_key_);
  }
  if (from.has_predicate_filter()) {
    mutable_predicate_filter()->::google::bigtable::v2::RowFilter::MergeFrom(from.predicate_filter());
  }
}

void CheckAndMutateRowRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v2.CheckAndMutateRowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckAndMutateRowRequest::CopyFrom(const CheckAndMutateRowRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v2.CheckAndMutateRowRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CheckAndMutateRowRequest::IsInitialized() const {

  return true;
}

void CheckAndMutateRowRequest::Swap(CheckAndMutateRowRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckAndMutateRowRequest::InternalSwap(CheckAndMutateRowRequest* other) {
  table_name_.Swap(&other->table_name_);
  row_key_.Swap(&other->row_key_);
  std::swap(predicate_filter_, other->predicate_filter_);
  true_mutations_.UnsafeArenaSwap(&other->true_mutations_);
  false_mutations_.UnsafeArenaSwap(&other->false_mutations_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckAndMutateRowRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckAndMutateRowRequest_descriptor_;
  metadata.reflection = CheckAndMutateRowRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckAndMutateRowRequest

// optional string table_name = 1;
void CheckAndMutateRowRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CheckAndMutateRowRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.CheckAndMutateRowRequest.table_name)
  return table_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckAndMutateRowRequest::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.CheckAndMutateRowRequest.table_name)
}
void CheckAndMutateRowRequest::set_table_name(const char* value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.CheckAndMutateRowRequest.table_name)
}
void CheckAndMutateRowRequest::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.CheckAndMutateRowRequest.table_name)
}
::std::string* CheckAndMutateRowRequest::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.CheckAndMutateRowRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckAndMutateRowRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.CheckAndMutateRowRequest.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckAndMutateRowRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.CheckAndMutateRowRequest.table_name)
}

// optional bytes row_key = 2;
void CheckAndMutateRowRequest::clear_row_key() {
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CheckAndMutateRowRequest::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.CheckAndMutateRowRequest.row_key)
  return row_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckAndMutateRowRequest::set_row_key(const ::std::string& value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.CheckAndMutateRowRequest.row_key)
}
void CheckAndMutateRowRequest::set_row_key(const char* value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.CheckAndMutateRowRequest.row_key)
}
void CheckAndMutateRowRequest::set_row_key(const void* value, size_t size) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.CheckAndMutateRowRequest.row_key)
}
::std::string* CheckAndMutateRowRequest::mutable_row_key() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.CheckAndMutateRowRequest.row_key)
  return row_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckAndMutateRowRequest::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.CheckAndMutateRowRequest.row_key)
  
  return row_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckAndMutateRowRequest::set_allocated_row_key(::std::string* row_key) {
  if (row_key != NULL) {
    
  } else {
    
  }
  row_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row_key);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.CheckAndMutateRowRequest.row_key)
}

// optional .google.bigtable.v2.RowFilter predicate_filter = 6;
bool CheckAndMutateRowRequest::has_predicate_filter() const {
  return this != internal_default_instance() && predicate_filter_ != NULL;
}
void CheckAndMutateRowRequest::clear_predicate_filter() {
  if (GetArenaNoVirtual() == NULL && predicate_filter_ != NULL) delete predicate_filter_;
  predicate_filter_ = NULL;
}
const ::google::bigtable::v2::RowFilter& CheckAndMutateRowRequest::predicate_filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.CheckAndMutateRowRequest.predicate_filter)
  return predicate_filter_ != NULL ? *predicate_filter_
                         : *::google::bigtable::v2::RowFilter::internal_default_instance();
}
::google::bigtable::v2::RowFilter* CheckAndMutateRowRequest::mutable_predicate_filter() {
  
  if (predicate_filter_ == NULL) {
    predicate_filter_ = new ::google::bigtable::v2::RowFilter;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.CheckAndMutateRowRequest.predicate_filter)
  return predicate_filter_;
}
::google::bigtable::v2::RowFilter* CheckAndMutateRowRequest::release_predicate_filter() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.CheckAndMutateRowRequest.predicate_filter)
  
  ::google::bigtable::v2::RowFilter* temp = predicate_filter_;
  predicate_filter_ = NULL;
  return temp;
}
void CheckAndMutateRowRequest::set_allocated_predicate_filter(::google::bigtable::v2::RowFilter* predicate_filter) {
  delete predicate_filter_;
  predicate_filter_ = predicate_filter;
  if (predicate_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.CheckAndMutateRowRequest.predicate_filter)
}

// repeated .google.bigtable.v2.Mutation true_mutations = 4;
int CheckAndMutateRowRequest::true_mutations_size() const {
  return true_mutations_.size();
}
void CheckAndMutateRowRequest::clear_true_mutations() {
  true_mutations_.Clear();
}
const ::google::bigtable::v2::Mutation& CheckAndMutateRowRequest::true_mutations(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.CheckAndMutateRowRequest.true_mutations)
  return true_mutations_.Get(index);
}
::google::bigtable::v2::Mutation* CheckAndMutateRowRequest::mutable_true_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.CheckAndMutateRowRequest.true_mutations)
  return true_mutations_.Mutable(index);
}
::google::bigtable::v2::Mutation* CheckAndMutateRowRequest::add_true_mutations() {
  // @@protoc_insertion_point(field_add:google.bigtable.v2.CheckAndMutateRowRequest.true_mutations)
  return true_mutations_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::Mutation >*
CheckAndMutateRowRequest::mutable_true_mutations() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.CheckAndMutateRowRequest.true_mutations)
  return &true_mutations_;
}
const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::Mutation >&
CheckAndMutateRowRequest::true_mutations() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.CheckAndMutateRowRequest.true_mutations)
  return true_mutations_;
}

// repeated .google.bigtable.v2.Mutation false_mutations = 5;
int CheckAndMutateRowRequest::false_mutations_size() const {
  return false_mutations_.size();
}
void CheckAndMutateRowRequest::clear_false_mutations() {
  false_mutations_.Clear();
}
const ::google::bigtable::v2::Mutation& CheckAndMutateRowRequest::false_mutations(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.CheckAndMutateRowRequest.false_mutations)
  return false_mutations_.Get(index);
}
::google::bigtable::v2::Mutation* CheckAndMutateRowRequest::mutable_false_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.CheckAndMutateRowRequest.false_mutations)
  return false_mutations_.Mutable(index);
}
::google::bigtable::v2::Mutation* CheckAndMutateRowRequest::add_false_mutations() {
  // @@protoc_insertion_point(field_add:google.bigtable.v2.CheckAndMutateRowRequest.false_mutations)
  return false_mutations_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::Mutation >*
CheckAndMutateRowRequest::mutable_false_mutations() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.CheckAndMutateRowRequest.false_mutations)
  return &false_mutations_;
}
const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::Mutation >&
CheckAndMutateRowRequest::false_mutations() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.CheckAndMutateRowRequest.false_mutations)
  return false_mutations_;
}

inline const CheckAndMutateRowRequest* CheckAndMutateRowRequest::internal_default_instance() {
  return &CheckAndMutateRowRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckAndMutateRowResponse::kPredicateMatchedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckAndMutateRowResponse::CheckAndMutateRowResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fv2_2fbigtable_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v2.CheckAndMutateRowResponse)
}

void CheckAndMutateRowResponse::InitAsDefaultInstance() {
}

CheckAndMutateRowResponse::CheckAndMutateRowResponse(const CheckAndMutateRowResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v2.CheckAndMutateRowResponse)
}

void CheckAndMutateRowResponse::SharedCtor() {
  predicate_matched_ = false;
  _cached_size_ = 0;
}

CheckAndMutateRowResponse::~CheckAndMutateRowResponse() {
  // @@protoc_insertion_point(destructor:google.bigtable.v2.CheckAndMutateRowResponse)
  SharedDtor();
}

void CheckAndMutateRowResponse::SharedDtor() {
}

void CheckAndMutateRowResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckAndMutateRowResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckAndMutateRowResponse_descriptor_;
}

const CheckAndMutateRowResponse& CheckAndMutateRowResponse::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fv2_2fbigtable_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CheckAndMutateRowResponse> CheckAndMutateRowResponse_default_instance_;

CheckAndMutateRowResponse* CheckAndMutateRowResponse::New(::google::protobuf::Arena* arena) const {
  CheckAndMutateRowResponse* n = new CheckAndMutateRowResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckAndMutateRowResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v2.CheckAndMutateRowResponse)
  predicate_matched_ = false;
}

bool CheckAndMutateRowResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v2.CheckAndMutateRowResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool predicate_matched = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &predicate_matched_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v2.CheckAndMutateRowResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v2.CheckAndMutateRowResponse)
  return false;
#undef DO_
}

void CheckAndMutateRowResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v2.CheckAndMutateRowResponse)
  // optional bool predicate_matched = 1;
  if (this->predicate_matched() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->predicate_matched(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v2.CheckAndMutateRowResponse)
}

::google::protobuf::uint8* CheckAndMutateRowResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v2.CheckAndMutateRowResponse)
  // optional bool predicate_matched = 1;
  if (this->predicate_matched() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->predicate_matched(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v2.CheckAndMutateRowResponse)
  return target;
}

size_t CheckAndMutateRowResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v2.CheckAndMutateRowResponse)
  size_t total_size = 0;

  // optional bool predicate_matched = 1;
  if (this->predicate_matched() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckAndMutateRowResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v2.CheckAndMutateRowResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CheckAndMutateRowResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckAndMutateRowResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v2.CheckAndMutateRowResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v2.CheckAndMutateRowResponse)
    UnsafeMergeFrom(*source);
  }
}

void CheckAndMutateRowResponse::MergeFrom(const CheckAndMutateRowResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v2.CheckAndMutateRowResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CheckAndMutateRowResponse::UnsafeMergeFrom(const CheckAndMutateRowResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.predicate_matched() != 0) {
    set_predicate_matched(from.predicate_matched());
  }
}

void CheckAndMutateRowResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v2.CheckAndMutateRowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckAndMutateRowResponse::CopyFrom(const CheckAndMutateRowResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v2.CheckAndMutateRowResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CheckAndMutateRowResponse::IsInitialized() const {

  return true;
}

void CheckAndMutateRowResponse::Swap(CheckAndMutateRowResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckAndMutateRowResponse::InternalSwap(CheckAndMutateRowResponse* other) {
  std::swap(predicate_matched_, other->predicate_matched_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckAndMutateRowResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckAndMutateRowResponse_descriptor_;
  metadata.reflection = CheckAndMutateRowResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckAndMutateRowResponse

// optional bool predicate_matched = 1;
void CheckAndMutateRowResponse::clear_predicate_matched() {
  predicate_matched_ = false;
}
bool CheckAndMutateRowResponse::predicate_matched() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.CheckAndMutateRowResponse.predicate_matched)
  return predicate_matched_;
}
void CheckAndMutateRowResponse::set_predicate_matched(bool value) {
  
  predicate_matched_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v2.CheckAndMutateRowResponse.predicate_matched)
}

inline const CheckAndMutateRowResponse* CheckAndMutateRowResponse::internal_default_instance() {
  return &CheckAndMutateRowResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadModifyWriteRowRequest::kTableNameFieldNumber;
const int ReadModifyWriteRowRequest::kRowKeyFieldNumber;
const int ReadModifyWriteRowRequest::kRulesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadModifyWriteRowRequest::ReadModifyWriteRowRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fv2_2fbigtable_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v2.ReadModifyWriteRowRequest)
}

void ReadModifyWriteRowRequest::InitAsDefaultInstance() {
}

ReadModifyWriteRowRequest::ReadModifyWriteRowRequest(const ReadModifyWriteRowRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v2.ReadModifyWriteRowRequest)
}

void ReadModifyWriteRowRequest::SharedCtor() {
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  row_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ReadModifyWriteRowRequest::~ReadModifyWriteRowRequest() {
  // @@protoc_insertion_point(destructor:google.bigtable.v2.ReadModifyWriteRowRequest)
  SharedDtor();
}

void ReadModifyWriteRowRequest::SharedDtor() {
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  row_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReadModifyWriteRowRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadModifyWriteRowRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadModifyWriteRowRequest_descriptor_;
}

const ReadModifyWriteRowRequest& ReadModifyWriteRowRequest::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fv2_2fbigtable_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReadModifyWriteRowRequest> ReadModifyWriteRowRequest_default_instance_;

ReadModifyWriteRowRequest* ReadModifyWriteRowRequest::New(::google::protobuf::Arena* arena) const {
  ReadModifyWriteRowRequest* n = new ReadModifyWriteRowRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadModifyWriteRowRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v2.ReadModifyWriteRowRequest)
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rules_.Clear();
}

bool ReadModifyWriteRowRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v2.ReadModifyWriteRowRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.v2.ReadModifyWriteRowRequest.table_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_row_key;
        break;
      }

      // optional bytes row_key = 2;
      case 2: {
        if (tag == 18) {
         parse_row_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_row_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rules;
        break;
      }

      // repeated .google.bigtable.v2.ReadModifyWriteRule rules = 3;
      case 3: {
        if (tag == 26) {
         parse_rules:
          DO_(input->IncrementRecursionDepth());
         parse_loop_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_rules()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_rules;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v2.ReadModifyWriteRowRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v2.ReadModifyWriteRowRequest)
  return false;
#undef DO_
}

void ReadModifyWriteRowRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v2.ReadModifyWriteRowRequest)
  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v2.ReadModifyWriteRowRequest.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table_name(), output);
  }

  // optional bytes row_key = 2;
  if (this->row_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->row_key(), output);
  }

  // repeated .google.bigtable.v2.ReadModifyWriteRule rules = 3;
  for (unsigned int i = 0, n = this->rules_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rules(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v2.ReadModifyWriteRowRequest)
}

::google::protobuf::uint8* ReadModifyWriteRowRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v2.ReadModifyWriteRowRequest)
  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v2.ReadModifyWriteRowRequest.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // optional bytes row_key = 2;
  if (this->row_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->row_key(), target);
  }

  // repeated .google.bigtable.v2.ReadModifyWriteRule rules = 3;
  for (unsigned int i = 0, n = this->rules_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->rules(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v2.ReadModifyWriteRowRequest)
  return target;
}

size_t ReadModifyWriteRowRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v2.ReadModifyWriteRowRequest)
  size_t total_size = 0;

  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  // optional bytes row_key = 2;
  if (this->row_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->row_key());
  }

  // repeated .google.bigtable.v2.ReadModifyWriteRule rules = 3;
  {
    unsigned int count = this->rules_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rules(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadModifyWriteRowRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v2.ReadModifyWriteRowRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReadModifyWriteRowRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadModifyWriteRowRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v2.ReadModifyWriteRowRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v2.ReadModifyWriteRowRequest)
    UnsafeMergeFrom(*source);
  }
}

void ReadModifyWriteRowRequest::MergeFrom(const ReadModifyWriteRowRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v2.ReadModifyWriteRowRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReadModifyWriteRowRequest::UnsafeMergeFrom(const ReadModifyWriteRowRequest& from) {
  GOOGLE_DCHECK(&from != this);
  rules_.MergeFrom(from.rules_);
  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  if (from.row_key().size() > 0) {

    row_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.row_key_);
  }
}

void ReadModifyWriteRowRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v2.ReadModifyWriteRowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadModifyWriteRowRequest::CopyFrom(const ReadModifyWriteRowRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v2.ReadModifyWriteRowRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReadModifyWriteRowRequest::IsInitialized() const {

  return true;
}

void ReadModifyWriteRowRequest::Swap(ReadModifyWriteRowRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadModifyWriteRowRequest::InternalSwap(ReadModifyWriteRowRequest* other) {
  table_name_.Swap(&other->table_name_);
  row_key_.Swap(&other->row_key_);
  rules_.UnsafeArenaSwap(&other->rules_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadModifyWriteRowRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadModifyWriteRowRequest_descriptor_;
  metadata.reflection = ReadModifyWriteRowRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadModifyWriteRowRequest

// optional string table_name = 1;
void ReadModifyWriteRowRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReadModifyWriteRowRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadModifyWriteRowRequest.table_name)
  return table_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReadModifyWriteRowRequest::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadModifyWriteRowRequest.table_name)
}
void ReadModifyWriteRowRequest::set_table_name(const char* value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ReadModifyWriteRowRequest.table_name)
}
void ReadModifyWriteRowRequest::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ReadModifyWriteRowRequest.table_name)
}
::std::string* ReadModifyWriteRowRequest::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadModifyWriteRowRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReadModifyWriteRowRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadModifyWriteRowRequest.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReadModifyWriteRowRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadModifyWriteRowRequest.table_name)
}

// optional bytes row_key = 2;
void ReadModifyWriteRowRequest::clear_row_key() {
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReadModifyWriteRowRequest::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadModifyWriteRowRequest.row_key)
  return row_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReadModifyWriteRowRequest::set_row_key(const ::std::string& value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadModifyWriteRowRequest.row_key)
}
void ReadModifyWriteRowRequest::set_row_key(const char* value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ReadModifyWriteRowRequest.row_key)
}
void ReadModifyWriteRowRequest::set_row_key(const void* value, size_t size) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ReadModifyWriteRowRequest.row_key)
}
::std::string* ReadModifyWriteRowRequest::mutable_row_key() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadModifyWriteRowRequest.row_key)
  return row_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReadModifyWriteRowRequest::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadModifyWriteRowRequest.row_key)
  
  return row_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReadModifyWriteRowRequest::set_allocated_row_key(::std::string* row_key) {
  if (row_key != NULL) {
    
  } else {
    
  }
  row_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row_key);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadModifyWriteRowRequest.row_key)
}

// repeated .google.bigtable.v2.ReadModifyWriteRule rules = 3;
int ReadModifyWriteRowRequest::rules_size() const {
  return rules_.size();
}
void ReadModifyWriteRowRequest::clear_rules() {
  rules_.Clear();
}
const ::google::bigtable::v2::ReadModifyWriteRule& ReadModifyWriteRowRequest::rules(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadModifyWriteRowRequest.rules)
  return rules_.Get(index);
}
::google::bigtable::v2::ReadModifyWriteRule* ReadModifyWriteRowRequest::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadModifyWriteRowRequest.rules)
  return rules_.Mutable(index);
}
::google::bigtable::v2::ReadModifyWriteRule* ReadModifyWriteRowRequest::add_rules() {
  // @@protoc_insertion_point(field_add:google.bigtable.v2.ReadModifyWriteRowRequest.rules)
  return rules_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::ReadModifyWriteRule >*
ReadModifyWriteRowRequest::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.ReadModifyWriteRowRequest.rules)
  return &rules_;
}
const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::ReadModifyWriteRule >&
ReadModifyWriteRowRequest::rules() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.ReadModifyWriteRowRequest.rules)
  return rules_;
}

inline const ReadModifyWriteRowRequest* ReadModifyWriteRowRequest::internal_default_instance() {
  return &ReadModifyWriteRowRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadModifyWriteRowResponse::kRowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadModifyWriteRowResponse::ReadModifyWriteRowResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fv2_2fbigtable_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v2.ReadModifyWriteRowResponse)
}

void ReadModifyWriteRowResponse::InitAsDefaultInstance() {
  row_ = const_cast< ::google::bigtable::v2::Row*>(
      ::google::bigtable::v2::Row::internal_default_instance());
}

ReadModifyWriteRowResponse::ReadModifyWriteRowResponse(const ReadModifyWriteRowResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v2.ReadModifyWriteRowResponse)
}

void ReadModifyWriteRowResponse::SharedCtor() {
  row_ = NULL;
  _cached_size_ = 0;
}

ReadModifyWriteRowResponse::~ReadModifyWriteRowResponse() {
  // @@protoc_insertion_point(destructor:google.bigtable.v2.ReadModifyWriteRowResponse)
  SharedDtor();
}

void ReadModifyWriteRowResponse::SharedDtor() {
  if (this != &ReadModifyWriteRowResponse_default_instance_.get()) {
    delete row_;
  }
}

void ReadModifyWriteRowResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadModifyWriteRowResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadModifyWriteRowResponse_descriptor_;
}

const ReadModifyWriteRowResponse& ReadModifyWriteRowResponse::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fv2_2fbigtable_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReadModifyWriteRowResponse> ReadModifyWriteRowResponse_default_instance_;

ReadModifyWriteRowResponse* ReadModifyWriteRowResponse::New(::google::protobuf::Arena* arena) const {
  ReadModifyWriteRowResponse* n = new ReadModifyWriteRowResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadModifyWriteRowResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v2.ReadModifyWriteRowResponse)
  if (GetArenaNoVirtual() == NULL && row_ != NULL) delete row_;
  row_ = NULL;
}

bool ReadModifyWriteRowResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v2.ReadModifyWriteRowResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.bigtable.v2.Row row = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_row()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v2.ReadModifyWriteRowResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v2.ReadModifyWriteRowResponse)
  return false;
#undef DO_
}

void ReadModifyWriteRowResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v2.ReadModifyWriteRowResponse)
  // optional .google.bigtable.v2.Row row = 1;
  if (this->has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->row_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v2.ReadModifyWriteRowResponse)
}

::google::protobuf::uint8* ReadModifyWriteRowResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v2.ReadModifyWriteRowResponse)
  // optional .google.bigtable.v2.Row row = 1;
  if (this->has_row()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->row_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v2.ReadModifyWriteRowResponse)
  return target;
}

size_t ReadModifyWriteRowResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v2.ReadModifyWriteRowResponse)
  size_t total_size = 0;

  // optional .google.bigtable.v2.Row row = 1;
  if (this->has_row()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->row_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadModifyWriteRowResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v2.ReadModifyWriteRowResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReadModifyWriteRowResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadModifyWriteRowResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v2.ReadModifyWriteRowResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v2.ReadModifyWriteRowResponse)
    UnsafeMergeFrom(*source);
  }
}

void ReadModifyWriteRowResponse::MergeFrom(const ReadModifyWriteRowResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v2.ReadModifyWriteRowResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReadModifyWriteRowResponse::UnsafeMergeFrom(const ReadModifyWriteRowResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_row()) {
    mutable_row()->::google::bigtable::v2::Row::MergeFrom(from.row());
  }
}

void ReadModifyWriteRowResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v2.ReadModifyWriteRowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadModifyWriteRowResponse::CopyFrom(const ReadModifyWriteRowResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v2.ReadModifyWriteRowResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReadModifyWriteRowResponse::IsInitialized() const {

  return true;
}

void ReadModifyWriteRowResponse::Swap(ReadModifyWriteRowResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadModifyWriteRowResponse::InternalSwap(ReadModifyWriteRowResponse* other) {
  std::swap(row_, other->row_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadModifyWriteRowResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadModifyWriteRowResponse_descriptor_;
  metadata.reflection = ReadModifyWriteRowResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadModifyWriteRowResponse

// optional .google.bigtable.v2.Row row = 1;
bool ReadModifyWriteRowResponse::has_row() const {
  return this != internal_default_instance() && row_ != NULL;
}
void ReadModifyWriteRowResponse::clear_row() {
  if (GetArenaNoVirtual() == NULL && row_ != NULL) delete row_;
  row_ = NULL;
}
const ::google::bigtable::v2::Row& ReadModifyWriteRowResponse::row() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadModifyWriteRowResponse.row)
  return row_ != NULL ? *row_
                         : *::google::bigtable::v2::Row::internal_default_instance();
}
::google::bigtable::v2::Row* ReadModifyWriteRowResponse::mutable_row() {
  
  if (row_ == NULL) {
    row_ = new ::google::bigtable::v2::Row;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadModifyWriteRowResponse.row)
  return row_;
}
::google::bigtable::v2::Row* ReadModifyWriteRowResponse::release_row() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadModifyWriteRowResponse.row)
  
  ::google::bigtable::v2::Row* temp = row_;
  row_ = NULL;
  return temp;
}
void ReadModifyWriteRowResponse::set_allocated_row(::google::bigtable::v2::Row* row) {
  delete row_;
  row_ = row;
  if (row) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadModifyWriteRowResponse.row)
}

inline const ReadModifyWriteRowResponse* ReadModifyWriteRowResponse::internal_default_instance() {
  return &ReadModifyWriteRowResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace bigtable
}  // namespace google

// @@protoc_insertion_point(global_scope)
