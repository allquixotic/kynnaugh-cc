// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/logging/v2/logging_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/logging/v2/logging_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace logging {
namespace v2 {

namespace {

const ::google::protobuf::Descriptor* LogSink_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogSink_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LogSink_VersionFormat_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ListSinksRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListSinksRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListSinksResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListSinksResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSinkRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSinkRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateSinkRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateSinkRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateSinkRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateSinkRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteSinkRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteSinkRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_google_2flogging_2fv2_2flogging_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_google_2flogging_2fv2_2flogging_5fconfig_2eproto() {
  protobuf_AddDesc_google_2flogging_2fv2_2flogging_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "google/logging/v2/logging_config.proto");
  GOOGLE_CHECK(file != NULL);
  LogSink_descriptor_ = file->message_type(0);
  static const int LogSink_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSink, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSink, destination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSink, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSink, output_version_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSink, writer_identity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSink, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSink, end_time_),
  };
  LogSink_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogSink_descriptor_,
      LogSink::internal_default_instance(),
      LogSink_offsets_,
      -1,
      -1,
      -1,
      sizeof(LogSink),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSink, _internal_metadata_));
  LogSink_VersionFormat_descriptor_ = LogSink_descriptor_->enum_type(0);
  ListSinksRequest_descriptor_ = file->message_type(1);
  static const int ListSinksRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSinksRequest, parent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSinksRequest, page_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSinksRequest, page_size_),
  };
  ListSinksRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListSinksRequest_descriptor_,
      ListSinksRequest::internal_default_instance(),
      ListSinksRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListSinksRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSinksRequest, _internal_metadata_));
  ListSinksResponse_descriptor_ = file->message_type(2);
  static const int ListSinksResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSinksResponse, sinks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSinksResponse, next_page_token_),
  };
  ListSinksResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListSinksResponse_descriptor_,
      ListSinksResponse::internal_default_instance(),
      ListSinksResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListSinksResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSinksResponse, _internal_metadata_));
  GetSinkRequest_descriptor_ = file->message_type(3);
  static const int GetSinkRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSinkRequest, sink_name_),
  };
  GetSinkRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetSinkRequest_descriptor_,
      GetSinkRequest::internal_default_instance(),
      GetSinkRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetSinkRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSinkRequest, _internal_metadata_));
  CreateSinkRequest_descriptor_ = file->message_type(4);
  static const int CreateSinkRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSinkRequest, parent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSinkRequest, sink_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSinkRequest, unique_writer_identity_),
  };
  CreateSinkRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateSinkRequest_descriptor_,
      CreateSinkRequest::internal_default_instance(),
      CreateSinkRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateSinkRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSinkRequest, _internal_metadata_));
  UpdateSinkRequest_descriptor_ = file->message_type(5);
  static const int UpdateSinkRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSinkRequest, sink_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSinkRequest, sink_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSinkRequest, unique_writer_identity_),
  };
  UpdateSinkRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UpdateSinkRequest_descriptor_,
      UpdateSinkRequest::internal_default_instance(),
      UpdateSinkRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(UpdateSinkRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSinkRequest, _internal_metadata_));
  DeleteSinkRequest_descriptor_ = file->message_type(6);
  static const int DeleteSinkRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSinkRequest, sink_name_),
  };
  DeleteSinkRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeleteSinkRequest_descriptor_,
      DeleteSinkRequest::internal_default_instance(),
      DeleteSinkRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeleteSinkRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSinkRequest, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_google_2flogging_2fv2_2flogging_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogSink_descriptor_, LogSink::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListSinksRequest_descriptor_, ListSinksRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListSinksResponse_descriptor_, ListSinksResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetSinkRequest_descriptor_, GetSinkRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateSinkRequest_descriptor_, CreateSinkRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpdateSinkRequest_descriptor_, UpdateSinkRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeleteSinkRequest_descriptor_, DeleteSinkRequest::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_google_2flogging_2fv2_2flogging_5fconfig_2eproto() {
  LogSink_default_instance_.Shutdown();
  delete LogSink_reflection_;
  ListSinksRequest_default_instance_.Shutdown();
  delete ListSinksRequest_reflection_;
  ListSinksResponse_default_instance_.Shutdown();
  delete ListSinksResponse_reflection_;
  GetSinkRequest_default_instance_.Shutdown();
  delete GetSinkRequest_reflection_;
  CreateSinkRequest_default_instance_.Shutdown();
  delete CreateSinkRequest_reflection_;
  UpdateSinkRequest_default_instance_.Shutdown();
  delete UpdateSinkRequest_reflection_;
  DeleteSinkRequest_default_instance_.Shutdown();
  delete DeleteSinkRequest_reflection_;
}

void protobuf_InitDefaults_google_2flogging_2fv2_2flogging_5fconfig_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::api::protobuf_InitDefaults_google_2fapi_2fannotations_2eproto();
  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2fempty_2eproto();
  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2ftimestamp_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  LogSink_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ListSinksRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ListSinksResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  GetSinkRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CreateSinkRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  UpdateSinkRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  DeleteSinkRequest_default_instance_.DefaultConstruct();
  LogSink_default_instance_.get_mutable()->InitAsDefaultInstance();
  ListSinksRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  ListSinksResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  GetSinkRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  CreateSinkRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  UpdateSinkRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  DeleteSinkRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_google_2flogging_2fv2_2flogging_5fconfig_2eproto_once_);
void protobuf_InitDefaults_google_2flogging_2fv2_2flogging_5fconfig_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_google_2flogging_2fv2_2flogging_5fconfig_2eproto_once_,
                 &protobuf_InitDefaults_google_2flogging_2fv2_2flogging_5fconfig_2eproto_impl);
}
void protobuf_AddDesc_google_2flogging_2fv2_2flogging_5fconfig_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_google_2flogging_2fv2_2flogging_5fconfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n&google/logging/v2/logging_config.proto"
    "\022\021google.logging.v2\032\034google/api/annotati"
    "ons.proto\032\033google/protobuf/empty.proto\032\037"
    "google/protobuf/timestamp.proto\"\275\002\n\007LogS"
    "ink\022\014\n\004name\030\001 \001(\t\022\023\n\013destination\030\003 \001(\t\022\016"
    "\n\006filter\030\005 \001(\t\022G\n\025output_version_format\030"
    "\006 \001(\0162(.google.logging.v2.LogSink.Versio"
    "nFormat\022\027\n\017writer_identity\030\010 \001(\t\022.\n\nstar"
    "t_time\030\n \001(\0132\032.google.protobuf.Timestamp"
    "\022,\n\010end_time\030\013 \001(\0132\032.google.protobuf.Tim"
    "estamp\"\?\n\rVersionFormat\022\036\n\032VERSION_FORMA"
    "T_UNSPECIFIED\020\000\022\006\n\002V2\020\001\022\006\n\002V1\020\002\"I\n\020ListS"
    "inksRequest\022\016\n\006parent\030\001 \001(\t\022\022\n\npage_toke"
    "n\030\002 \001(\t\022\021\n\tpage_size\030\003 \001(\005\"W\n\021ListSinksR"
    "esponse\022)\n\005sinks\030\001 \003(\0132\032.google.logging."
    "v2.LogSink\022\027\n\017next_page_token\030\002 \001(\t\"#\n\016G"
    "etSinkRequest\022\021\n\tsink_name\030\001 \001(\t\"m\n\021Crea"
    "teSinkRequest\022\016\n\006parent\030\001 \001(\t\022(\n\004sink\030\002 "
    "\001(\0132\032.google.logging.v2.LogSink\022\036\n\026uniqu"
    "e_writer_identity\030\003 \001(\010\"p\n\021UpdateSinkReq"
    "uest\022\021\n\tsink_name\030\001 \001(\t\022(\n\004sink\030\002 \001(\0132\032."
    "google.logging.v2.LogSink\022\036\n\026unique_writ"
    "er_identity\030\003 \001(\010\"&\n\021DeleteSinkRequest\022\021"
    "\n\tsink_name\030\001 \001(\t2\376\004\n\017ConfigServiceV2\022}\n"
    "\tListSinks\022#.google.logging.v2.ListSinks"
    "Request\032$.google.logging.v2.ListSinksRes"
    "ponse\"%\202\323\344\223\002\037\022\035/v2/{parent=projects/*}/s"
    "inks\022t\n\007GetSink\022!.google.logging.v2.GetS"
    "inkRequest\032\032.google.logging.v2.LogSink\"*"
    "\202\323\344\223\002$\022\"/v2/{sink_name=projects/*/sinks/"
    "*}\022{\n\nCreateSink\022$.google.logging.v2.Cre"
    "ateSinkRequest\032\032.google.logging.v2.LogSi"
    "nk\"+\202\323\344\223\002%\"\035/v2/{parent=projects/*}/sink"
    "s:\004sink\022\200\001\n\nUpdateSink\022$.google.logging."
    "v2.UpdateSinkRequest\032\032.google.logging.v2"
    ".LogSink\"0\202\323\344\223\002*\032\"/v2/{sink_name=project"
    "s/*/sinks/*}:\004sink\022v\n\nDeleteSink\022$.googl"
    "e.logging.v2.DeleteSinkRequest\032\026.google."
    "protobuf.Empty\"*\202\323\344\223\002$*\"/v2/{sink_name=p"
    "rojects/*/sinks/*}B\201\001\n\025com.google.loggin"
    "g.v2B\022LoggingConfigProtoP\001Z8google.golan"
    "g.org/genproto/googleapis/logging/v2;log"
    "ging\252\002\027Google.Cloud.Logging.V2b\006proto3", 1718);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/logging/v2/logging_config.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_AddDesc_google_2fapi_2fannotations_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fempty_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2ftimestamp_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_google_2flogging_2fv2_2flogging_5fconfig_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_google_2flogging_2fv2_2flogging_5fconfig_2eproto_once_);
void protobuf_AddDesc_google_2flogging_2fv2_2flogging_5fconfig_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_google_2flogging_2fv2_2flogging_5fconfig_2eproto_once_,
                 &protobuf_AddDesc_google_2flogging_2fv2_2flogging_5fconfig_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_google_2flogging_2fv2_2flogging_5fconfig_2eproto {
  StaticDescriptorInitializer_google_2flogging_2fv2_2flogging_5fconfig_2eproto() {
    protobuf_AddDesc_google_2flogging_2fv2_2flogging_5fconfig_2eproto();
  }
} static_descriptor_initializer_google_2flogging_2fv2_2flogging_5fconfig_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* LogSink_VersionFormat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogSink_VersionFormat_descriptor_;
}
bool LogSink_VersionFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LogSink_VersionFormat LogSink::VERSION_FORMAT_UNSPECIFIED;
const LogSink_VersionFormat LogSink::V2;
const LogSink_VersionFormat LogSink::V1;
const LogSink_VersionFormat LogSink::VersionFormat_MIN;
const LogSink_VersionFormat LogSink::VersionFormat_MAX;
const int LogSink::VersionFormat_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogSink::kNameFieldNumber;
const int LogSink::kDestinationFieldNumber;
const int LogSink::kFilterFieldNumber;
const int LogSink::kOutputVersionFormatFieldNumber;
const int LogSink::kWriterIdentityFieldNumber;
const int LogSink::kStartTimeFieldNumber;
const int LogSink::kEndTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogSink::LogSink()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2flogging_2fv2_2flogging_5fconfig_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.logging.v2.LogSink)
}

void LogSink::InitAsDefaultInstance() {
  start_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  end_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}

LogSink::LogSink(const LogSink& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.logging.v2.LogSink)
}

void LogSink::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  writer_identity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_time_ = NULL;
  end_time_ = NULL;
  output_version_format_ = 0;
  _cached_size_ = 0;
}

LogSink::~LogSink() {
  // @@protoc_insertion_point(destructor:google.logging.v2.LogSink)
  SharedDtor();
}

void LogSink::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  writer_identity_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &LogSink_default_instance_.get()) {
    delete start_time_;
    delete end_time_;
  }
}

void LogSink::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogSink::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogSink_descriptor_;
}

const LogSink& LogSink::default_instance() {
  protobuf_InitDefaults_google_2flogging_2fv2_2flogging_5fconfig_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LogSink> LogSink_default_instance_;

LogSink* LogSink::New(::google::protobuf::Arena* arena) const {
  LogSink* n = new LogSink;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogSink::Clear() {
// @@protoc_insertion_point(message_clear_start:google.logging.v2.LogSink)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_version_format_ = 0;
  writer_identity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) delete start_time_;
  start_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && end_time_ != NULL) delete end_time_;
  end_time_ = NULL;
}

bool LogSink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.logging.v2.LogSink)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.logging.v2.LogSink.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_destination;
        break;
      }

      // optional string destination = 3;
      case 3: {
        if (tag == 26) {
         parse_destination:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->destination().data(), this->destination().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.logging.v2.LogSink.destination"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_filter;
        break;
      }

      // optional string filter = 5;
      case 5: {
        if (tag == 42) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filter().data(), this->filter().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.logging.v2.LogSink.filter"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_output_version_format;
        break;
      }

      // optional .google.logging.v2.LogSink.VersionFormat output_version_format = 6;
      case 6: {
        if (tag == 48) {
         parse_output_version_format:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_output_version_format(static_cast< ::google::logging::v2::LogSink_VersionFormat >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_writer_identity;
        break;
      }

      // optional string writer_identity = 8;
      case 8: {
        if (tag == 66) {
         parse_writer_identity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_writer_identity()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->writer_identity().data(), this->writer_identity().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.logging.v2.LogSink.writer_identity"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_start_time;
        break;
      }

      // optional .google.protobuf.Timestamp start_time = 10;
      case 10: {
        if (tag == 82) {
         parse_start_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_end_time;
        break;
      }

      // optional .google.protobuf.Timestamp end_time = 11;
      case 11: {
        if (tag == 90) {
         parse_end_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.logging.v2.LogSink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.logging.v2.LogSink)
  return false;
#undef DO_
}

void LogSink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.logging.v2.LogSink)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogSink.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string destination = 3;
  if (this->destination().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destination().data(), this->destination().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogSink.destination");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->destination(), output);
  }

  // optional string filter = 5;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogSink.filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->filter(), output);
  }

  // optional .google.logging.v2.LogSink.VersionFormat output_version_format = 6;
  if (this->output_version_format() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->output_version_format(), output);
  }

  // optional string writer_identity = 8;
  if (this->writer_identity().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->writer_identity().data(), this->writer_identity().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogSink.writer_identity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->writer_identity(), output);
  }

  // optional .google.protobuf.Timestamp start_time = 10;
  if (this->has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->start_time_, output);
  }

  // optional .google.protobuf.Timestamp end_time = 11;
  if (this->has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->end_time_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.logging.v2.LogSink)
}

::google::protobuf::uint8* LogSink::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.logging.v2.LogSink)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogSink.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string destination = 3;
  if (this->destination().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destination().data(), this->destination().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogSink.destination");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->destination(), target);
  }

  // optional string filter = 5;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogSink.filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->filter(), target);
  }

  // optional .google.logging.v2.LogSink.VersionFormat output_version_format = 6;
  if (this->output_version_format() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->output_version_format(), target);
  }

  // optional string writer_identity = 8;
  if (this->writer_identity().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->writer_identity().data(), this->writer_identity().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogSink.writer_identity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->writer_identity(), target);
  }

  // optional .google.protobuf.Timestamp start_time = 10;
  if (this->has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->start_time_, false, target);
  }

  // optional .google.protobuf.Timestamp end_time = 11;
  if (this->has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->end_time_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.logging.v2.LogSink)
  return target;
}

size_t LogSink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.logging.v2.LogSink)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string destination = 3;
  if (this->destination().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->destination());
  }

  // optional string filter = 5;
  if (this->filter().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filter());
  }

  // optional .google.logging.v2.LogSink.VersionFormat output_version_format = 6;
  if (this->output_version_format() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->output_version_format());
  }

  // optional string writer_identity = 8;
  if (this->writer_identity().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->writer_identity());
  }

  // optional .google.protobuf.Timestamp start_time = 10;
  if (this->has_start_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->start_time_);
  }

  // optional .google.protobuf.Timestamp end_time = 11;
  if (this->has_end_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->end_time_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogSink::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.logging.v2.LogSink)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LogSink* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogSink>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.logging.v2.LogSink)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.logging.v2.LogSink)
    UnsafeMergeFrom(*source);
  }
}

void LogSink::MergeFrom(const LogSink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.logging.v2.LogSink)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LogSink::UnsafeMergeFrom(const LogSink& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.destination().size() > 0) {

    destination_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_);
  }
  if (from.filter().size() > 0) {

    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  if (from.output_version_format() != 0) {
    set_output_version_format(from.output_version_format());
  }
  if (from.writer_identity().size() > 0) {

    writer_identity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.writer_identity_);
  }
  if (from.has_start_time()) {
    mutable_start_time()->::google::protobuf::Timestamp::MergeFrom(from.start_time());
  }
  if (from.has_end_time()) {
    mutable_end_time()->::google::protobuf::Timestamp::MergeFrom(from.end_time());
  }
}

void LogSink::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.logging.v2.LogSink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogSink::CopyFrom(const LogSink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.logging.v2.LogSink)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LogSink::IsInitialized() const {

  return true;
}

void LogSink::Swap(LogSink* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogSink::InternalSwap(LogSink* other) {
  name_.Swap(&other->name_);
  destination_.Swap(&other->destination_);
  filter_.Swap(&other->filter_);
  std::swap(output_version_format_, other->output_version_format_);
  writer_identity_.Swap(&other->writer_identity_);
  std::swap(start_time_, other->start_time_);
  std::swap(end_time_, other->end_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogSink::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogSink_descriptor_;
  metadata.reflection = LogSink_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogSink

// optional string name = 1;
void LogSink::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LogSink::name() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogSink.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogSink::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.logging.v2.LogSink.name)
}
void LogSink::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogSink.name)
}
void LogSink::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogSink.name)
}
::std::string* LogSink::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogSink.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogSink::release_name() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogSink.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogSink::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogSink.name)
}

// optional string destination = 3;
void LogSink::clear_destination() {
  destination_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LogSink::destination() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogSink.destination)
  return destination_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogSink::set_destination(const ::std::string& value) {
  
  destination_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.logging.v2.LogSink.destination)
}
void LogSink::set_destination(const char* value) {
  
  destination_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogSink.destination)
}
void LogSink::set_destination(const char* value, size_t size) {
  
  destination_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogSink.destination)
}
::std::string* LogSink::mutable_destination() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogSink.destination)
  return destination_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogSink::release_destination() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogSink.destination)
  
  return destination_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogSink::set_allocated_destination(::std::string* destination) {
  if (destination != NULL) {
    
  } else {
    
  }
  destination_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destination);
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogSink.destination)
}

// optional string filter = 5;
void LogSink::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LogSink::filter() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogSink.filter)
  return filter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogSink::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.logging.v2.LogSink.filter)
}
void LogSink::set_filter(const char* value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogSink.filter)
}
void LogSink::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogSink.filter)
}
::std::string* LogSink::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogSink.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogSink::release_filter() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogSink.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogSink::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogSink.filter)
}

// optional .google.logging.v2.LogSink.VersionFormat output_version_format = 6;
void LogSink::clear_output_version_format() {
  output_version_format_ = 0;
}
::google::logging::v2::LogSink_VersionFormat LogSink::output_version_format() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogSink.output_version_format)
  return static_cast< ::google::logging::v2::LogSink_VersionFormat >(output_version_format_);
}
void LogSink::set_output_version_format(::google::logging::v2::LogSink_VersionFormat value) {
  
  output_version_format_ = value;
  // @@protoc_insertion_point(field_set:google.logging.v2.LogSink.output_version_format)
}

// optional string writer_identity = 8;
void LogSink::clear_writer_identity() {
  writer_identity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LogSink::writer_identity() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogSink.writer_identity)
  return writer_identity_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogSink::set_writer_identity(const ::std::string& value) {
  
  writer_identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.logging.v2.LogSink.writer_identity)
}
void LogSink::set_writer_identity(const char* value) {
  
  writer_identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogSink.writer_identity)
}
void LogSink::set_writer_identity(const char* value, size_t size) {
  
  writer_identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogSink.writer_identity)
}
::std::string* LogSink::mutable_writer_identity() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogSink.writer_identity)
  return writer_identity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogSink::release_writer_identity() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogSink.writer_identity)
  
  return writer_identity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogSink::set_allocated_writer_identity(::std::string* writer_identity) {
  if (writer_identity != NULL) {
    
  } else {
    
  }
  writer_identity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), writer_identity);
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogSink.writer_identity)
}

// optional .google.protobuf.Timestamp start_time = 10;
bool LogSink::has_start_time() const {
  return this != internal_default_instance() && start_time_ != NULL;
}
void LogSink::clear_start_time() {
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) delete start_time_;
  start_time_ = NULL;
}
const ::google::protobuf::Timestamp& LogSink::start_time() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogSink.start_time)
  return start_time_ != NULL ? *start_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* LogSink::mutable_start_time() {
  
  if (start_time_ == NULL) {
    start_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogSink.start_time)
  return start_time_;
}
::google::protobuf::Timestamp* LogSink::release_start_time() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogSink.start_time)
  
  ::google::protobuf::Timestamp* temp = start_time_;
  start_time_ = NULL;
  return temp;
}
void LogSink::set_allocated_start_time(::google::protobuf::Timestamp* start_time) {
  delete start_time_;
  if (start_time != NULL && start_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_start_time = new ::google::protobuf::Timestamp;
    new_start_time->CopyFrom(*start_time);
    start_time = new_start_time;
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogSink.start_time)
}

// optional .google.protobuf.Timestamp end_time = 11;
bool LogSink::has_end_time() const {
  return this != internal_default_instance() && end_time_ != NULL;
}
void LogSink::clear_end_time() {
  if (GetArenaNoVirtual() == NULL && end_time_ != NULL) delete end_time_;
  end_time_ = NULL;
}
const ::google::protobuf::Timestamp& LogSink::end_time() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogSink.end_time)
  return end_time_ != NULL ? *end_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* LogSink::mutable_end_time() {
  
  if (end_time_ == NULL) {
    end_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogSink.end_time)
  return end_time_;
}
::google::protobuf::Timestamp* LogSink::release_end_time() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogSink.end_time)
  
  ::google::protobuf::Timestamp* temp = end_time_;
  end_time_ = NULL;
  return temp;
}
void LogSink::set_allocated_end_time(::google::protobuf::Timestamp* end_time) {
  delete end_time_;
  if (end_time != NULL && end_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_end_time = new ::google::protobuf::Timestamp;
    new_end_time->CopyFrom(*end_time);
    end_time = new_end_time;
  }
  end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogSink.end_time)
}

inline const LogSink* LogSink::internal_default_instance() {
  return &LogSink_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListSinksRequest::kParentFieldNumber;
const int ListSinksRequest::kPageTokenFieldNumber;
const int ListSinksRequest::kPageSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListSinksRequest::ListSinksRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2flogging_2fv2_2flogging_5fconfig_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.logging.v2.ListSinksRequest)
}

void ListSinksRequest::InitAsDefaultInstance() {
}

ListSinksRequest::ListSinksRequest(const ListSinksRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.logging.v2.ListSinksRequest)
}

void ListSinksRequest::SharedCtor() {
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
  _cached_size_ = 0;
}

ListSinksRequest::~ListSinksRequest() {
  // @@protoc_insertion_point(destructor:google.logging.v2.ListSinksRequest)
  SharedDtor();
}

void ListSinksRequest::SharedDtor() {
  parent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListSinksRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListSinksRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListSinksRequest_descriptor_;
}

const ListSinksRequest& ListSinksRequest::default_instance() {
  protobuf_InitDefaults_google_2flogging_2fv2_2flogging_5fconfig_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ListSinksRequest> ListSinksRequest_default_instance_;

ListSinksRequest* ListSinksRequest::New(::google::protobuf::Arena* arena) const {
  ListSinksRequest* n = new ListSinksRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListSinksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.logging.v2.ListSinksRequest)
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
}

bool ListSinksRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.logging.v2.ListSinksRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string parent = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parent().data(), this->parent().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.logging.v2.ListSinksRequest.parent"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_page_token;
        break;
      }

      // optional string page_token = 2;
      case 2: {
        if (tag == 18) {
         parse_page_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), this->page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.logging.v2.ListSinksRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_page_size;
        break;
      }

      // optional int32 page_size = 3;
      case 3: {
        if (tag == 24) {
         parse_page_size:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.logging.v2.ListSinksRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.logging.v2.ListSinksRequest)
  return false;
#undef DO_
}

void ListSinksRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.logging.v2.ListSinksRequest)
  // optional string parent = 1;
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), this->parent().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.ListSinksRequest.parent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parent(), output);
  }

  // optional string page_token = 2;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.ListSinksRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->page_token(), output);
  }

  // optional int32 page_size = 3;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->page_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.logging.v2.ListSinksRequest)
}

::google::protobuf::uint8* ListSinksRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.logging.v2.ListSinksRequest)
  // optional string parent = 1;
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), this->parent().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.ListSinksRequest.parent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parent(), target);
  }

  // optional string page_token = 2;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.ListSinksRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->page_token(), target);
  }

  // optional int32 page_size = 3;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->page_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.logging.v2.ListSinksRequest)
  return target;
}

size_t ListSinksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.logging.v2.ListSinksRequest)
  size_t total_size = 0;

  // optional string parent = 1;
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent());
  }

  // optional string page_token = 2;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // optional int32 page_size = 3;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListSinksRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.logging.v2.ListSinksRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListSinksRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListSinksRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.logging.v2.ListSinksRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.logging.v2.ListSinksRequest)
    UnsafeMergeFrom(*source);
  }
}

void ListSinksRequest::MergeFrom(const ListSinksRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.logging.v2.ListSinksRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ListSinksRequest::UnsafeMergeFrom(const ListSinksRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.parent().size() > 0) {

    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  if (from.page_token().size() > 0) {

    page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token_);
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void ListSinksRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.logging.v2.ListSinksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListSinksRequest::CopyFrom(const ListSinksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.logging.v2.ListSinksRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ListSinksRequest::IsInitialized() const {

  return true;
}

void ListSinksRequest::Swap(ListSinksRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListSinksRequest::InternalSwap(ListSinksRequest* other) {
  parent_.Swap(&other->parent_);
  page_token_.Swap(&other->page_token_);
  std::swap(page_size_, other->page_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListSinksRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListSinksRequest_descriptor_;
  metadata.reflection = ListSinksRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListSinksRequest

// optional string parent = 1;
void ListSinksRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListSinksRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListSinksRequest.parent)
  return parent_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListSinksRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.logging.v2.ListSinksRequest.parent)
}
void ListSinksRequest::set_parent(const char* value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.logging.v2.ListSinksRequest.parent)
}
void ListSinksRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.ListSinksRequest.parent)
}
::std::string* ListSinksRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListSinksRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListSinksRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.logging.v2.ListSinksRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListSinksRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.ListSinksRequest.parent)
}

// optional string page_token = 2;
void ListSinksRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListSinksRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListSinksRequest.page_token)
  return page_token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListSinksRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.logging.v2.ListSinksRequest.page_token)
}
void ListSinksRequest::set_page_token(const char* value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.logging.v2.ListSinksRequest.page_token)
}
void ListSinksRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.ListSinksRequest.page_token)
}
::std::string* ListSinksRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListSinksRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListSinksRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.logging.v2.ListSinksRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListSinksRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.ListSinksRequest.page_token)
}

// optional int32 page_size = 3;
void ListSinksRequest::clear_page_size() {
  page_size_ = 0;
}
::google::protobuf::int32 ListSinksRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListSinksRequest.page_size)
  return page_size_;
}
void ListSinksRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.logging.v2.ListSinksRequest.page_size)
}

inline const ListSinksRequest* ListSinksRequest::internal_default_instance() {
  return &ListSinksRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListSinksResponse::kSinksFieldNumber;
const int ListSinksResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListSinksResponse::ListSinksResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2flogging_2fv2_2flogging_5fconfig_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.logging.v2.ListSinksResponse)
}

void ListSinksResponse::InitAsDefaultInstance() {
}

ListSinksResponse::ListSinksResponse(const ListSinksResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.logging.v2.ListSinksResponse)
}

void ListSinksResponse::SharedCtor() {
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ListSinksResponse::~ListSinksResponse() {
  // @@protoc_insertion_point(destructor:google.logging.v2.ListSinksResponse)
  SharedDtor();
}

void ListSinksResponse::SharedDtor() {
  next_page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListSinksResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListSinksResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListSinksResponse_descriptor_;
}

const ListSinksResponse& ListSinksResponse::default_instance() {
  protobuf_InitDefaults_google_2flogging_2fv2_2flogging_5fconfig_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ListSinksResponse> ListSinksResponse_default_instance_;

ListSinksResponse* ListSinksResponse::New(::google::protobuf::Arena* arena) const {
  ListSinksResponse* n = new ListSinksResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListSinksResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.logging.v2.ListSinksResponse)
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sinks_.Clear();
}

bool ListSinksResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.logging.v2.ListSinksResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.logging.v2.LogSink sinks = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_sinks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sinks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_sinks;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_next_page_token;
        break;
      }

      // optional string next_page_token = 2;
      case 2: {
        if (tag == 18) {
         parse_next_page_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), this->next_page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.logging.v2.ListSinksResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.logging.v2.ListSinksResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.logging.v2.ListSinksResponse)
  return false;
#undef DO_
}

void ListSinksResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.logging.v2.ListSinksResponse)
  // repeated .google.logging.v2.LogSink sinks = 1;
  for (unsigned int i = 0, n = this->sinks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sinks(i), output);
  }

  // optional string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.ListSinksResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.logging.v2.ListSinksResponse)
}

::google::protobuf::uint8* ListSinksResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.logging.v2.ListSinksResponse)
  // repeated .google.logging.v2.LogSink sinks = 1;
  for (unsigned int i = 0, n = this->sinks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->sinks(i), false, target);
  }

  // optional string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.ListSinksResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.logging.v2.ListSinksResponse)
  return target;
}

size_t ListSinksResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.logging.v2.ListSinksResponse)
  size_t total_size = 0;

  // optional string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  // repeated .google.logging.v2.LogSink sinks = 1;
  {
    unsigned int count = this->sinks_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sinks(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListSinksResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.logging.v2.ListSinksResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListSinksResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListSinksResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.logging.v2.ListSinksResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.logging.v2.ListSinksResponse)
    UnsafeMergeFrom(*source);
  }
}

void ListSinksResponse::MergeFrom(const ListSinksResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.logging.v2.ListSinksResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ListSinksResponse::UnsafeMergeFrom(const ListSinksResponse& from) {
  GOOGLE_DCHECK(&from != this);
  sinks_.MergeFrom(from.sinks_);
  if (from.next_page_token().size() > 0) {

    next_page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token_);
  }
}

void ListSinksResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.logging.v2.ListSinksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListSinksResponse::CopyFrom(const ListSinksResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.logging.v2.ListSinksResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ListSinksResponse::IsInitialized() const {

  return true;
}

void ListSinksResponse::Swap(ListSinksResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListSinksResponse::InternalSwap(ListSinksResponse* other) {
  sinks_.UnsafeArenaSwap(&other->sinks_);
  next_page_token_.Swap(&other->next_page_token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListSinksResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListSinksResponse_descriptor_;
  metadata.reflection = ListSinksResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListSinksResponse

// repeated .google.logging.v2.LogSink sinks = 1;
int ListSinksResponse::sinks_size() const {
  return sinks_.size();
}
void ListSinksResponse::clear_sinks() {
  sinks_.Clear();
}
const ::google::logging::v2::LogSink& ListSinksResponse::sinks(int index) const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListSinksResponse.sinks)
  return sinks_.Get(index);
}
::google::logging::v2::LogSink* ListSinksResponse::mutable_sinks(int index) {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListSinksResponse.sinks)
  return sinks_.Mutable(index);
}
::google::logging::v2::LogSink* ListSinksResponse::add_sinks() {
  // @@protoc_insertion_point(field_add:google.logging.v2.ListSinksResponse.sinks)
  return sinks_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::logging::v2::LogSink >*
ListSinksResponse::mutable_sinks() {
  // @@protoc_insertion_point(field_mutable_list:google.logging.v2.ListSinksResponse.sinks)
  return &sinks_;
}
const ::google::protobuf::RepeatedPtrField< ::google::logging::v2::LogSink >&
ListSinksResponse::sinks() const {
  // @@protoc_insertion_point(field_list:google.logging.v2.ListSinksResponse.sinks)
  return sinks_;
}

// optional string next_page_token = 2;
void ListSinksResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListSinksResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListSinksResponse.next_page_token)
  return next_page_token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListSinksResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.logging.v2.ListSinksResponse.next_page_token)
}
void ListSinksResponse::set_next_page_token(const char* value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.logging.v2.ListSinksResponse.next_page_token)
}
void ListSinksResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.ListSinksResponse.next_page_token)
}
::std::string* ListSinksResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListSinksResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListSinksResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.logging.v2.ListSinksResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListSinksResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.ListSinksResponse.next_page_token)
}

inline const ListSinksResponse* ListSinksResponse::internal_default_instance() {
  return &ListSinksResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetSinkRequest::kSinkNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetSinkRequest::GetSinkRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2flogging_2fv2_2flogging_5fconfig_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.logging.v2.GetSinkRequest)
}

void GetSinkRequest::InitAsDefaultInstance() {
}

GetSinkRequest::GetSinkRequest(const GetSinkRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.logging.v2.GetSinkRequest)
}

void GetSinkRequest::SharedCtor() {
  sink_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetSinkRequest::~GetSinkRequest() {
  // @@protoc_insertion_point(destructor:google.logging.v2.GetSinkRequest)
  SharedDtor();
}

void GetSinkRequest::SharedDtor() {
  sink_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetSinkRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSinkRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSinkRequest_descriptor_;
}

const GetSinkRequest& GetSinkRequest::default_instance() {
  protobuf_InitDefaults_google_2flogging_2fv2_2flogging_5fconfig_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetSinkRequest> GetSinkRequest_default_instance_;

GetSinkRequest* GetSinkRequest::New(::google::protobuf::Arena* arena) const {
  GetSinkRequest* n = new GetSinkRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetSinkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.logging.v2.GetSinkRequest)
  sink_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetSinkRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.logging.v2.GetSinkRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sink_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sink_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sink_name().data(), this->sink_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.logging.v2.GetSinkRequest.sink_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.logging.v2.GetSinkRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.logging.v2.GetSinkRequest)
  return false;
#undef DO_
}

void GetSinkRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.logging.v2.GetSinkRequest)
  // optional string sink_name = 1;
  if (this->sink_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sink_name().data(), this->sink_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.GetSinkRequest.sink_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sink_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.logging.v2.GetSinkRequest)
}

::google::protobuf::uint8* GetSinkRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.logging.v2.GetSinkRequest)
  // optional string sink_name = 1;
  if (this->sink_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sink_name().data(), this->sink_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.GetSinkRequest.sink_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sink_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.logging.v2.GetSinkRequest)
  return target;
}

size_t GetSinkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.logging.v2.GetSinkRequest)
  size_t total_size = 0;

  // optional string sink_name = 1;
  if (this->sink_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sink_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSinkRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.logging.v2.GetSinkRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetSinkRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetSinkRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.logging.v2.GetSinkRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.logging.v2.GetSinkRequest)
    UnsafeMergeFrom(*source);
  }
}

void GetSinkRequest::MergeFrom(const GetSinkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.logging.v2.GetSinkRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetSinkRequest::UnsafeMergeFrom(const GetSinkRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.sink_name().size() > 0) {

    sink_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sink_name_);
  }
}

void GetSinkRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.logging.v2.GetSinkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSinkRequest::CopyFrom(const GetSinkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.logging.v2.GetSinkRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetSinkRequest::IsInitialized() const {

  return true;
}

void GetSinkRequest::Swap(GetSinkRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetSinkRequest::InternalSwap(GetSinkRequest* other) {
  sink_name_.Swap(&other->sink_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetSinkRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSinkRequest_descriptor_;
  metadata.reflection = GetSinkRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetSinkRequest

// optional string sink_name = 1;
void GetSinkRequest::clear_sink_name() {
  sink_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetSinkRequest::sink_name() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.GetSinkRequest.sink_name)
  return sink_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetSinkRequest::set_sink_name(const ::std::string& value) {
  
  sink_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.logging.v2.GetSinkRequest.sink_name)
}
void GetSinkRequest::set_sink_name(const char* value) {
  
  sink_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.logging.v2.GetSinkRequest.sink_name)
}
void GetSinkRequest::set_sink_name(const char* value, size_t size) {
  
  sink_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.GetSinkRequest.sink_name)
}
::std::string* GetSinkRequest::mutable_sink_name() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.GetSinkRequest.sink_name)
  return sink_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetSinkRequest::release_sink_name() {
  // @@protoc_insertion_point(field_release:google.logging.v2.GetSinkRequest.sink_name)
  
  return sink_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetSinkRequest::set_allocated_sink_name(::std::string* sink_name) {
  if (sink_name != NULL) {
    
  } else {
    
  }
  sink_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sink_name);
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.GetSinkRequest.sink_name)
}

inline const GetSinkRequest* GetSinkRequest::internal_default_instance() {
  return &GetSinkRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateSinkRequest::kParentFieldNumber;
const int CreateSinkRequest::kSinkFieldNumber;
const int CreateSinkRequest::kUniqueWriterIdentityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateSinkRequest::CreateSinkRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2flogging_2fv2_2flogging_5fconfig_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.logging.v2.CreateSinkRequest)
}

void CreateSinkRequest::InitAsDefaultInstance() {
  sink_ = const_cast< ::google::logging::v2::LogSink*>(
      ::google::logging::v2::LogSink::internal_default_instance());
}

CreateSinkRequest::CreateSinkRequest(const CreateSinkRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.logging.v2.CreateSinkRequest)
}

void CreateSinkRequest::SharedCtor() {
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sink_ = NULL;
  unique_writer_identity_ = false;
  _cached_size_ = 0;
}

CreateSinkRequest::~CreateSinkRequest() {
  // @@protoc_insertion_point(destructor:google.logging.v2.CreateSinkRequest)
  SharedDtor();
}

void CreateSinkRequest::SharedDtor() {
  parent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &CreateSinkRequest_default_instance_.get()) {
    delete sink_;
  }
}

void CreateSinkRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateSinkRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateSinkRequest_descriptor_;
}

const CreateSinkRequest& CreateSinkRequest::default_instance() {
  protobuf_InitDefaults_google_2flogging_2fv2_2flogging_5fconfig_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CreateSinkRequest> CreateSinkRequest_default_instance_;

CreateSinkRequest* CreateSinkRequest::New(::google::protobuf::Arena* arena) const {
  CreateSinkRequest* n = new CreateSinkRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateSinkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.logging.v2.CreateSinkRequest)
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && sink_ != NULL) delete sink_;
  sink_ = NULL;
  unique_writer_identity_ = false;
}

bool CreateSinkRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.logging.v2.CreateSinkRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string parent = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parent().data(), this->parent().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.logging.v2.CreateSinkRequest.parent"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sink;
        break;
      }

      // optional .google.logging.v2.LogSink sink = 2;
      case 2: {
        if (tag == 18) {
         parse_sink:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sink()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_unique_writer_identity;
        break;
      }

      // optional bool unique_writer_identity = 3;
      case 3: {
        if (tag == 24) {
         parse_unique_writer_identity:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unique_writer_identity_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.logging.v2.CreateSinkRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.logging.v2.CreateSinkRequest)
  return false;
#undef DO_
}

void CreateSinkRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.logging.v2.CreateSinkRequest)
  // optional string parent = 1;
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), this->parent().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.CreateSinkRequest.parent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parent(), output);
  }

  // optional .google.logging.v2.LogSink sink = 2;
  if (this->has_sink()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->sink_, output);
  }

  // optional bool unique_writer_identity = 3;
  if (this->unique_writer_identity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->unique_writer_identity(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.logging.v2.CreateSinkRequest)
}

::google::protobuf::uint8* CreateSinkRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.logging.v2.CreateSinkRequest)
  // optional string parent = 1;
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), this->parent().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.CreateSinkRequest.parent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parent(), target);
  }

  // optional .google.logging.v2.LogSink sink = 2;
  if (this->has_sink()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->sink_, false, target);
  }

  // optional bool unique_writer_identity = 3;
  if (this->unique_writer_identity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->unique_writer_identity(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.logging.v2.CreateSinkRequest)
  return target;
}

size_t CreateSinkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.logging.v2.CreateSinkRequest)
  size_t total_size = 0;

  // optional string parent = 1;
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent());
  }

  // optional .google.logging.v2.LogSink sink = 2;
  if (this->has_sink()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sink_);
  }

  // optional bool unique_writer_identity = 3;
  if (this->unique_writer_identity() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateSinkRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.logging.v2.CreateSinkRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CreateSinkRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateSinkRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.logging.v2.CreateSinkRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.logging.v2.CreateSinkRequest)
    UnsafeMergeFrom(*source);
  }
}

void CreateSinkRequest::MergeFrom(const CreateSinkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.logging.v2.CreateSinkRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CreateSinkRequest::UnsafeMergeFrom(const CreateSinkRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.parent().size() > 0) {

    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  if (from.has_sink()) {
    mutable_sink()->::google::logging::v2::LogSink::MergeFrom(from.sink());
  }
  if (from.unique_writer_identity() != 0) {
    set_unique_writer_identity(from.unique_writer_identity());
  }
}

void CreateSinkRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.logging.v2.CreateSinkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSinkRequest::CopyFrom(const CreateSinkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.logging.v2.CreateSinkRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CreateSinkRequest::IsInitialized() const {

  return true;
}

void CreateSinkRequest::Swap(CreateSinkRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateSinkRequest::InternalSwap(CreateSinkRequest* other) {
  parent_.Swap(&other->parent_);
  std::swap(sink_, other->sink_);
  std::swap(unique_writer_identity_, other->unique_writer_identity_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateSinkRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateSinkRequest_descriptor_;
  metadata.reflection = CreateSinkRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateSinkRequest

// optional string parent = 1;
void CreateSinkRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateSinkRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.CreateSinkRequest.parent)
  return parent_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateSinkRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.logging.v2.CreateSinkRequest.parent)
}
void CreateSinkRequest::set_parent(const char* value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.logging.v2.CreateSinkRequest.parent)
}
void CreateSinkRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.CreateSinkRequest.parent)
}
::std::string* CreateSinkRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.CreateSinkRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateSinkRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.logging.v2.CreateSinkRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateSinkRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.CreateSinkRequest.parent)
}

// optional .google.logging.v2.LogSink sink = 2;
bool CreateSinkRequest::has_sink() const {
  return this != internal_default_instance() && sink_ != NULL;
}
void CreateSinkRequest::clear_sink() {
  if (GetArenaNoVirtual() == NULL && sink_ != NULL) delete sink_;
  sink_ = NULL;
}
const ::google::logging::v2::LogSink& CreateSinkRequest::sink() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.CreateSinkRequest.sink)
  return sink_ != NULL ? *sink_
                         : *::google::logging::v2::LogSink::internal_default_instance();
}
::google::logging::v2::LogSink* CreateSinkRequest::mutable_sink() {
  
  if (sink_ == NULL) {
    sink_ = new ::google::logging::v2::LogSink;
  }
  // @@protoc_insertion_point(field_mutable:google.logging.v2.CreateSinkRequest.sink)
  return sink_;
}
::google::logging::v2::LogSink* CreateSinkRequest::release_sink() {
  // @@protoc_insertion_point(field_release:google.logging.v2.CreateSinkRequest.sink)
  
  ::google::logging::v2::LogSink* temp = sink_;
  sink_ = NULL;
  return temp;
}
void CreateSinkRequest::set_allocated_sink(::google::logging::v2::LogSink* sink) {
  delete sink_;
  sink_ = sink;
  if (sink) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.CreateSinkRequest.sink)
}

// optional bool unique_writer_identity = 3;
void CreateSinkRequest::clear_unique_writer_identity() {
  unique_writer_identity_ = false;
}
bool CreateSinkRequest::unique_writer_identity() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.CreateSinkRequest.unique_writer_identity)
  return unique_writer_identity_;
}
void CreateSinkRequest::set_unique_writer_identity(bool value) {
  
  unique_writer_identity_ = value;
  // @@protoc_insertion_point(field_set:google.logging.v2.CreateSinkRequest.unique_writer_identity)
}

inline const CreateSinkRequest* CreateSinkRequest::internal_default_instance() {
  return &CreateSinkRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateSinkRequest::kSinkNameFieldNumber;
const int UpdateSinkRequest::kSinkFieldNumber;
const int UpdateSinkRequest::kUniqueWriterIdentityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateSinkRequest::UpdateSinkRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2flogging_2fv2_2flogging_5fconfig_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.logging.v2.UpdateSinkRequest)
}

void UpdateSinkRequest::InitAsDefaultInstance() {
  sink_ = const_cast< ::google::logging::v2::LogSink*>(
      ::google::logging::v2::LogSink::internal_default_instance());
}

UpdateSinkRequest::UpdateSinkRequest(const UpdateSinkRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.logging.v2.UpdateSinkRequest)
}

void UpdateSinkRequest::SharedCtor() {
  sink_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sink_ = NULL;
  unique_writer_identity_ = false;
  _cached_size_ = 0;
}

UpdateSinkRequest::~UpdateSinkRequest() {
  // @@protoc_insertion_point(destructor:google.logging.v2.UpdateSinkRequest)
  SharedDtor();
}

void UpdateSinkRequest::SharedDtor() {
  sink_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &UpdateSinkRequest_default_instance_.get()) {
    delete sink_;
  }
}

void UpdateSinkRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateSinkRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateSinkRequest_descriptor_;
}

const UpdateSinkRequest& UpdateSinkRequest::default_instance() {
  protobuf_InitDefaults_google_2flogging_2fv2_2flogging_5fconfig_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UpdateSinkRequest> UpdateSinkRequest_default_instance_;

UpdateSinkRequest* UpdateSinkRequest::New(::google::protobuf::Arena* arena) const {
  UpdateSinkRequest* n = new UpdateSinkRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateSinkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.logging.v2.UpdateSinkRequest)
  sink_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && sink_ != NULL) delete sink_;
  sink_ = NULL;
  unique_writer_identity_ = false;
}

bool UpdateSinkRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.logging.v2.UpdateSinkRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sink_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sink_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sink_name().data(), this->sink_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.logging.v2.UpdateSinkRequest.sink_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sink;
        break;
      }

      // optional .google.logging.v2.LogSink sink = 2;
      case 2: {
        if (tag == 18) {
         parse_sink:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sink()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_unique_writer_identity;
        break;
      }

      // optional bool unique_writer_identity = 3;
      case 3: {
        if (tag == 24) {
         parse_unique_writer_identity:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unique_writer_identity_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.logging.v2.UpdateSinkRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.logging.v2.UpdateSinkRequest)
  return false;
#undef DO_
}

void UpdateSinkRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.logging.v2.UpdateSinkRequest)
  // optional string sink_name = 1;
  if (this->sink_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sink_name().data(), this->sink_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.UpdateSinkRequest.sink_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sink_name(), output);
  }

  // optional .google.logging.v2.LogSink sink = 2;
  if (this->has_sink()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->sink_, output);
  }

  // optional bool unique_writer_identity = 3;
  if (this->unique_writer_identity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->unique_writer_identity(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.logging.v2.UpdateSinkRequest)
}

::google::protobuf::uint8* UpdateSinkRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.logging.v2.UpdateSinkRequest)
  // optional string sink_name = 1;
  if (this->sink_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sink_name().data(), this->sink_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.UpdateSinkRequest.sink_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sink_name(), target);
  }

  // optional .google.logging.v2.LogSink sink = 2;
  if (this->has_sink()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->sink_, false, target);
  }

  // optional bool unique_writer_identity = 3;
  if (this->unique_writer_identity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->unique_writer_identity(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.logging.v2.UpdateSinkRequest)
  return target;
}

size_t UpdateSinkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.logging.v2.UpdateSinkRequest)
  size_t total_size = 0;

  // optional string sink_name = 1;
  if (this->sink_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sink_name());
  }

  // optional .google.logging.v2.LogSink sink = 2;
  if (this->has_sink()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sink_);
  }

  // optional bool unique_writer_identity = 3;
  if (this->unique_writer_identity() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateSinkRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.logging.v2.UpdateSinkRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UpdateSinkRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateSinkRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.logging.v2.UpdateSinkRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.logging.v2.UpdateSinkRequest)
    UnsafeMergeFrom(*source);
  }
}

void UpdateSinkRequest::MergeFrom(const UpdateSinkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.logging.v2.UpdateSinkRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UpdateSinkRequest::UnsafeMergeFrom(const UpdateSinkRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.sink_name().size() > 0) {

    sink_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sink_name_);
  }
  if (from.has_sink()) {
    mutable_sink()->::google::logging::v2::LogSink::MergeFrom(from.sink());
  }
  if (from.unique_writer_identity() != 0) {
    set_unique_writer_identity(from.unique_writer_identity());
  }
}

void UpdateSinkRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.logging.v2.UpdateSinkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateSinkRequest::CopyFrom(const UpdateSinkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.logging.v2.UpdateSinkRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UpdateSinkRequest::IsInitialized() const {

  return true;
}

void UpdateSinkRequest::Swap(UpdateSinkRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateSinkRequest::InternalSwap(UpdateSinkRequest* other) {
  sink_name_.Swap(&other->sink_name_);
  std::swap(sink_, other->sink_);
  std::swap(unique_writer_identity_, other->unique_writer_identity_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateSinkRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateSinkRequest_descriptor_;
  metadata.reflection = UpdateSinkRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateSinkRequest

// optional string sink_name = 1;
void UpdateSinkRequest::clear_sink_name() {
  sink_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UpdateSinkRequest::sink_name() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.UpdateSinkRequest.sink_name)
  return sink_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateSinkRequest::set_sink_name(const ::std::string& value) {
  
  sink_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.logging.v2.UpdateSinkRequest.sink_name)
}
void UpdateSinkRequest::set_sink_name(const char* value) {
  
  sink_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.logging.v2.UpdateSinkRequest.sink_name)
}
void UpdateSinkRequest::set_sink_name(const char* value, size_t size) {
  
  sink_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.UpdateSinkRequest.sink_name)
}
::std::string* UpdateSinkRequest::mutable_sink_name() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.UpdateSinkRequest.sink_name)
  return sink_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateSinkRequest::release_sink_name() {
  // @@protoc_insertion_point(field_release:google.logging.v2.UpdateSinkRequest.sink_name)
  
  return sink_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateSinkRequest::set_allocated_sink_name(::std::string* sink_name) {
  if (sink_name != NULL) {
    
  } else {
    
  }
  sink_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sink_name);
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.UpdateSinkRequest.sink_name)
}

// optional .google.logging.v2.LogSink sink = 2;
bool UpdateSinkRequest::has_sink() const {
  return this != internal_default_instance() && sink_ != NULL;
}
void UpdateSinkRequest::clear_sink() {
  if (GetArenaNoVirtual() == NULL && sink_ != NULL) delete sink_;
  sink_ = NULL;
}
const ::google::logging::v2::LogSink& UpdateSinkRequest::sink() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.UpdateSinkRequest.sink)
  return sink_ != NULL ? *sink_
                         : *::google::logging::v2::LogSink::internal_default_instance();
}
::google::logging::v2::LogSink* UpdateSinkRequest::mutable_sink() {
  
  if (sink_ == NULL) {
    sink_ = new ::google::logging::v2::LogSink;
  }
  // @@protoc_insertion_point(field_mutable:google.logging.v2.UpdateSinkRequest.sink)
  return sink_;
}
::google::logging::v2::LogSink* UpdateSinkRequest::release_sink() {
  // @@protoc_insertion_point(field_release:google.logging.v2.UpdateSinkRequest.sink)
  
  ::google::logging::v2::LogSink* temp = sink_;
  sink_ = NULL;
  return temp;
}
void UpdateSinkRequest::set_allocated_sink(::google::logging::v2::LogSink* sink) {
  delete sink_;
  sink_ = sink;
  if (sink) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.UpdateSinkRequest.sink)
}

// optional bool unique_writer_identity = 3;
void UpdateSinkRequest::clear_unique_writer_identity() {
  unique_writer_identity_ = false;
}
bool UpdateSinkRequest::unique_writer_identity() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.UpdateSinkRequest.unique_writer_identity)
  return unique_writer_identity_;
}
void UpdateSinkRequest::set_unique_writer_identity(bool value) {
  
  unique_writer_identity_ = value;
  // @@protoc_insertion_point(field_set:google.logging.v2.UpdateSinkRequest.unique_writer_identity)
}

inline const UpdateSinkRequest* UpdateSinkRequest::internal_default_instance() {
  return &UpdateSinkRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteSinkRequest::kSinkNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteSinkRequest::DeleteSinkRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2flogging_2fv2_2flogging_5fconfig_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.logging.v2.DeleteSinkRequest)
}

void DeleteSinkRequest::InitAsDefaultInstance() {
}

DeleteSinkRequest::DeleteSinkRequest(const DeleteSinkRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.logging.v2.DeleteSinkRequest)
}

void DeleteSinkRequest::SharedCtor() {
  sink_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DeleteSinkRequest::~DeleteSinkRequest() {
  // @@protoc_insertion_point(destructor:google.logging.v2.DeleteSinkRequest)
  SharedDtor();
}

void DeleteSinkRequest::SharedDtor() {
  sink_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteSinkRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteSinkRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteSinkRequest_descriptor_;
}

const DeleteSinkRequest& DeleteSinkRequest::default_instance() {
  protobuf_InitDefaults_google_2flogging_2fv2_2flogging_5fconfig_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DeleteSinkRequest> DeleteSinkRequest_default_instance_;

DeleteSinkRequest* DeleteSinkRequest::New(::google::protobuf::Arena* arena) const {
  DeleteSinkRequest* n = new DeleteSinkRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteSinkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.logging.v2.DeleteSinkRequest)
  sink_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeleteSinkRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.logging.v2.DeleteSinkRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sink_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sink_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sink_name().data(), this->sink_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.logging.v2.DeleteSinkRequest.sink_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.logging.v2.DeleteSinkRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.logging.v2.DeleteSinkRequest)
  return false;
#undef DO_
}

void DeleteSinkRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.logging.v2.DeleteSinkRequest)
  // optional string sink_name = 1;
  if (this->sink_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sink_name().data(), this->sink_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.DeleteSinkRequest.sink_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sink_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.logging.v2.DeleteSinkRequest)
}

::google::protobuf::uint8* DeleteSinkRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.logging.v2.DeleteSinkRequest)
  // optional string sink_name = 1;
  if (this->sink_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sink_name().data(), this->sink_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.DeleteSinkRequest.sink_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sink_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.logging.v2.DeleteSinkRequest)
  return target;
}

size_t DeleteSinkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.logging.v2.DeleteSinkRequest)
  size_t total_size = 0;

  // optional string sink_name = 1;
  if (this->sink_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sink_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteSinkRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.logging.v2.DeleteSinkRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DeleteSinkRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteSinkRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.logging.v2.DeleteSinkRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.logging.v2.DeleteSinkRequest)
    UnsafeMergeFrom(*source);
  }
}

void DeleteSinkRequest::MergeFrom(const DeleteSinkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.logging.v2.DeleteSinkRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DeleteSinkRequest::UnsafeMergeFrom(const DeleteSinkRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.sink_name().size() > 0) {

    sink_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sink_name_);
  }
}

void DeleteSinkRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.logging.v2.DeleteSinkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteSinkRequest::CopyFrom(const DeleteSinkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.logging.v2.DeleteSinkRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DeleteSinkRequest::IsInitialized() const {

  return true;
}

void DeleteSinkRequest::Swap(DeleteSinkRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteSinkRequest::InternalSwap(DeleteSinkRequest* other) {
  sink_name_.Swap(&other->sink_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteSinkRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteSinkRequest_descriptor_;
  metadata.reflection = DeleteSinkRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteSinkRequest

// optional string sink_name = 1;
void DeleteSinkRequest::clear_sink_name() {
  sink_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeleteSinkRequest::sink_name() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.DeleteSinkRequest.sink_name)
  return sink_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteSinkRequest::set_sink_name(const ::std::string& value) {
  
  sink_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.logging.v2.DeleteSinkRequest.sink_name)
}
void DeleteSinkRequest::set_sink_name(const char* value) {
  
  sink_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.logging.v2.DeleteSinkRequest.sink_name)
}
void DeleteSinkRequest::set_sink_name(const char* value, size_t size) {
  
  sink_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.DeleteSinkRequest.sink_name)
}
::std::string* DeleteSinkRequest::mutable_sink_name() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.DeleteSinkRequest.sink_name)
  return sink_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeleteSinkRequest::release_sink_name() {
  // @@protoc_insertion_point(field_release:google.logging.v2.DeleteSinkRequest.sink_name)
  
  return sink_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteSinkRequest::set_allocated_sink_name(::std::string* sink_name) {
  if (sink_name != NULL) {
    
  } else {
    
  }
  sink_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sink_name);
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.DeleteSinkRequest.sink_name)
}

inline const DeleteSinkRequest* DeleteSinkRequest::internal_default_instance() {
  return &DeleteSinkRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace logging
}  // namespace google

// @@protoc_insertion_point(global_scope)
