// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/tracing/trace.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/tracing/trace.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace tracing {
namespace v1 {

namespace {

const ::google::protobuf::Descriptor* TraceId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TraceId_reflection_ = NULL;
const ::google::protobuf::Descriptor* Module_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Module_reflection_ = NULL;
const ::google::protobuf::Descriptor* StackTrace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StackTrace_reflection_ = NULL;
const ::google::protobuf::Descriptor* StackTrace_StackFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StackTrace_StackFrame_reflection_ = NULL;
const ::google::protobuf::Descriptor* LabelValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LabelValue_reflection_ = NULL;
struct LabelValueOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr string_value_;
  ::google::protobuf::int64 int_value_;
  bool bool_value_;
}* LabelValue_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Span_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Span_reflection_ = NULL;
const ::google::protobuf::Descriptor* Span_TimeEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Span_TimeEvent_reflection_ = NULL;
struct Span_TimeEventOneofInstance {
  const ::google::tracing::v1::Span_TimeEvent_Annotation* annotation_;
  const ::google::tracing::v1::Span_TimeEvent_NetworkEvent* network_event_;
}* Span_TimeEvent_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Span_TimeEvent_Annotation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Span_TimeEvent_Annotation_reflection_ = NULL;
const ::google::protobuf::Descriptor* Span_TimeEvent_Annotation_LabelsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Span_TimeEvent_NetworkEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Span_TimeEvent_NetworkEvent_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Span_TimeEvent_NetworkEvent_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Span_Link_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Span_Link_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Span_Link_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Span_LabelsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Trace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Trace_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_google_2ftracing_2ftrace_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_google_2ftracing_2ftrace_2eproto() {
  protobuf_AddDesc_google_2ftracing_2ftrace_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "google/tracing/trace.proto");
  GOOGLE_CHECK(file != NULL);
  TraceId_descriptor_ = file->message_type(0);
  static const int TraceId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceId, hex_encoded_),
  };
  TraceId_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TraceId_descriptor_,
      TraceId::internal_default_instance(),
      TraceId_offsets_,
      -1,
      -1,
      -1,
      sizeof(TraceId),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceId, _internal_metadata_));
  Module_descriptor_ = file->message_type(1);
  static const int Module_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Module, module_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Module, build_id_),
  };
  Module_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Module_descriptor_,
      Module::internal_default_instance(),
      Module_offsets_,
      -1,
      -1,
      -1,
      sizeof(Module),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Module, _internal_metadata_));
  StackTrace_descriptor_ = file->message_type(2);
  static const int StackTrace_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StackTrace, stack_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StackTrace, stack_trace_hash_id_),
  };
  StackTrace_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StackTrace_descriptor_,
      StackTrace::internal_default_instance(),
      StackTrace_offsets_,
      -1,
      -1,
      -1,
      sizeof(StackTrace),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StackTrace, _internal_metadata_));
  StackTrace_StackFrame_descriptor_ = StackTrace_descriptor_->nested_type(0);
  static const int StackTrace_StackFrame_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StackTrace_StackFrame, function_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StackTrace_StackFrame, orig_function_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StackTrace_StackFrame, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StackTrace_StackFrame, line_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StackTrace_StackFrame, column_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StackTrace_StackFrame, load_module_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StackTrace_StackFrame, source_version_),
  };
  StackTrace_StackFrame_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StackTrace_StackFrame_descriptor_,
      StackTrace_StackFrame::internal_default_instance(),
      StackTrace_StackFrame_offsets_,
      -1,
      -1,
      -1,
      sizeof(StackTrace_StackFrame),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StackTrace_StackFrame, _internal_metadata_));
  LabelValue_descriptor_ = file->message_type(3);
  static const int LabelValue_offsets_[4] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(LabelValue_default_oneof_instance_, string_value_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(LabelValue_default_oneof_instance_, int_value_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(LabelValue_default_oneof_instance_, bool_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelValue, value_),
  };
  LabelValue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LabelValue_descriptor_,
      LabelValue::internal_default_instance(),
      LabelValue_offsets_,
      -1,
      -1,
      -1,
      LabelValue_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelValue, _oneof_case_[0]),
      sizeof(LabelValue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelValue, _internal_metadata_));
  Span_descriptor_ = file->message_type(4);
  static const int Span_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span, parent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span, local_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span, local_end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span, labels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span, stack_trace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span, time_events_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span, links_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span, has_remote_parent_),
  };
  Span_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Span_descriptor_,
      Span::internal_default_instance(),
      Span_offsets_,
      -1,
      -1,
      -1,
      sizeof(Span),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span, _internal_metadata_));
  Span_TimeEvent_descriptor_ = Span_descriptor_->nested_type(0);
  static const int Span_TimeEvent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span_TimeEvent, local_time_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Span_TimeEvent_default_oneof_instance_, annotation_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Span_TimeEvent_default_oneof_instance_, network_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span_TimeEvent, value_),
  };
  Span_TimeEvent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Span_TimeEvent_descriptor_,
      Span_TimeEvent::internal_default_instance(),
      Span_TimeEvent_offsets_,
      -1,
      -1,
      -1,
      Span_TimeEvent_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span_TimeEvent, _oneof_case_[0]),
      sizeof(Span_TimeEvent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span_TimeEvent, _internal_metadata_));
  Span_TimeEvent_Annotation_descriptor_ = Span_TimeEvent_descriptor_->nested_type(0);
  static const int Span_TimeEvent_Annotation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span_TimeEvent_Annotation, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span_TimeEvent_Annotation, labels_),
  };
  Span_TimeEvent_Annotation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Span_TimeEvent_Annotation_descriptor_,
      Span_TimeEvent_Annotation::internal_default_instance(),
      Span_TimeEvent_Annotation_offsets_,
      -1,
      -1,
      -1,
      sizeof(Span_TimeEvent_Annotation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span_TimeEvent_Annotation, _internal_metadata_));
  Span_TimeEvent_Annotation_LabelsEntry_descriptor_ = Span_TimeEvent_Annotation_descriptor_->nested_type(0);
  Span_TimeEvent_NetworkEvent_descriptor_ = Span_TimeEvent_descriptor_->nested_type(1);
  static const int Span_TimeEvent_NetworkEvent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span_TimeEvent_NetworkEvent, kernel_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span_TimeEvent_NetworkEvent, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span_TimeEvent_NetworkEvent, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span_TimeEvent_NetworkEvent, message_size_),
  };
  Span_TimeEvent_NetworkEvent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Span_TimeEvent_NetworkEvent_descriptor_,
      Span_TimeEvent_NetworkEvent::internal_default_instance(),
      Span_TimeEvent_NetworkEvent_offsets_,
      -1,
      -1,
      -1,
      sizeof(Span_TimeEvent_NetworkEvent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span_TimeEvent_NetworkEvent, _internal_metadata_));
  Span_TimeEvent_NetworkEvent_Type_descriptor_ = Span_TimeEvent_NetworkEvent_descriptor_->enum_type(0);
  Span_Link_descriptor_ = Span_descriptor_->nested_type(1);
  static const int Span_Link_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span_Link, trace_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span_Link, span_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span_Link, type_),
  };
  Span_Link_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Span_Link_descriptor_,
      Span_Link::internal_default_instance(),
      Span_Link_offsets_,
      -1,
      -1,
      -1,
      sizeof(Span_Link),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span_Link, _internal_metadata_));
  Span_Link_Type_descriptor_ = Span_Link_descriptor_->enum_type(0);
  Span_LabelsEntry_descriptor_ = Span_descriptor_->nested_type(2);
  Trace_descriptor_ = file->message_type(5);
  static const int Trace_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trace, trace_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trace, spans_),
  };
  Trace_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Trace_descriptor_,
      Trace::internal_default_instance(),
      Trace_offsets_,
      -1,
      -1,
      -1,
      sizeof(Trace),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trace, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_google_2ftracing_2ftrace_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TraceId_descriptor_, TraceId::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Module_descriptor_, Module::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StackTrace_descriptor_, StackTrace::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StackTrace_StackFrame_descriptor_, StackTrace_StackFrame::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LabelValue_descriptor_, LabelValue::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Span_descriptor_, Span::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Span_TimeEvent_descriptor_, Span_TimeEvent::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Span_TimeEvent_Annotation_descriptor_, Span_TimeEvent_Annotation::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Span_TimeEvent_Annotation_LabelsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::google::tracing::v1::LabelValue,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                Span_TimeEvent_Annotation_LabelsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Span_TimeEvent_NetworkEvent_descriptor_, Span_TimeEvent_NetworkEvent::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Span_Link_descriptor_, Span_Link::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Span_LabelsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::google::tracing::v1::LabelValue,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                Span_LabelsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Trace_descriptor_, Trace::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_google_2ftracing_2ftrace_2eproto() {
  TraceId_default_instance_.Shutdown();
  delete TraceId_reflection_;
  Module_default_instance_.Shutdown();
  delete Module_reflection_;
  StackTrace_default_instance_.Shutdown();
  delete StackTrace_reflection_;
  StackTrace_StackFrame_default_instance_.Shutdown();
  delete StackTrace_StackFrame_reflection_;
  LabelValue_default_instance_.Shutdown();
  delete LabelValue_default_oneof_instance_;
  delete LabelValue_reflection_;
  Span_default_instance_.Shutdown();
  delete Span_reflection_;
  Span_TimeEvent_default_instance_.Shutdown();
  delete Span_TimeEvent_default_oneof_instance_;
  delete Span_TimeEvent_reflection_;
  Span_TimeEvent_Annotation_default_instance_.Shutdown();
  delete Span_TimeEvent_Annotation_reflection_;
  Span_TimeEvent_NetworkEvent_default_instance_.Shutdown();
  delete Span_TimeEvent_NetworkEvent_reflection_;
  Span_Link_default_instance_.Shutdown();
  delete Span_Link_reflection_;
  Trace_default_instance_.Shutdown();
  delete Trace_reflection_;
}

void protobuf_InitDefaults_google_2ftracing_2ftrace_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::api::protobuf_InitDefaults_google_2fapi_2fannotations_2eproto();
  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2ftimestamp_2eproto();
  ::google::rpc::protobuf_InitDefaults_google_2frpc_2fstatus_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  TraceId_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Module_default_instance_.DefaultConstruct();
  StackTrace_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  StackTrace_StackFrame_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  LabelValue_default_instance_.DefaultConstruct();
  LabelValue_default_oneof_instance_ = new LabelValueOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  Span_default_instance_.DefaultConstruct();
  Span_TimeEvent_default_instance_.DefaultConstruct();
  Span_TimeEvent_default_oneof_instance_ = new Span_TimeEventOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  Span_TimeEvent_Annotation_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Span_TimeEvent_NetworkEvent_default_instance_.DefaultConstruct();
  Span_Link_default_instance_.DefaultConstruct();
  Trace_default_instance_.DefaultConstruct();
  TraceId_default_instance_.get_mutable()->InitAsDefaultInstance();
  Module_default_instance_.get_mutable()->InitAsDefaultInstance();
  StackTrace_default_instance_.get_mutable()->InitAsDefaultInstance();
  StackTrace_StackFrame_default_instance_.get_mutable()->InitAsDefaultInstance();
  LabelValue_default_instance_.get_mutable()->InitAsDefaultInstance();
  Span_default_instance_.get_mutable()->InitAsDefaultInstance();
  Span_TimeEvent_default_instance_.get_mutable()->InitAsDefaultInstance();
  Span_TimeEvent_Annotation_default_instance_.get_mutable()->InitAsDefaultInstance();
  Span_TimeEvent_NetworkEvent_default_instance_.get_mutable()->InitAsDefaultInstance();
  Span_Link_default_instance_.get_mutable()->InitAsDefaultInstance();
  Trace_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_google_2ftracing_2ftrace_2eproto_once_);
void protobuf_InitDefaults_google_2ftracing_2ftrace_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_google_2ftracing_2ftrace_2eproto_once_,
                 &protobuf_InitDefaults_google_2ftracing_2ftrace_2eproto_impl);
}
void protobuf_AddDesc_google_2ftracing_2ftrace_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_google_2ftracing_2ftrace_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032google/tracing/trace.proto\022\021google.tra"
    "cing.v1\032\034google/api/annotations.proto\032\037g"
    "oogle/protobuf/timestamp.proto\032\027google/r"
    "pc/status.proto\"\036\n\007TraceId\022\023\n\013hex_encode"
    "d\030\001 \001(\t\"*\n\006Module\022\016\n\006module\030\001 \001(\t\022\020\n\010bui"
    "ld_id\030\002 \001(\t\"\261\002\n\nStackTrace\022=\n\013stack_fram"
    "e\030\001 \003(\0132(.google.tracing.v1.StackTrace.S"
    "tackFrame\022\033\n\023stack_trace_hash_id\030\002 \001(\004\032\306"
    "\001\n\nStackFrame\022\025\n\rfunction_name\030\001 \001(\t\022\032\n\022"
    "orig_function_name\030\002 \001(\t\022\021\n\tfile_name\030\003 "
    "\001(\t\022\023\n\013line_number\030\004 \001(\003\022\025\n\rcolumn_numbe"
    "r\030\005 \001(\003\022.\n\013load_module\030\006 \001(\0132\031.google.tr"
    "acing.v1.Module\022\026\n\016source_version\030\007 \001(\t\""
    "X\n\nLabelValue\022\026\n\014string_value\030\001 \001(\tH\000\022\023\n"
    "\tint_value\030\002 \001(\003H\000\022\024\n\nbool_value\030\003 \001(\010H\000"
    "B\007\n\005value\"\215\n\n\004Span\022\n\n\002id\030\001 \001(\006\022\014\n\004name\030\002"
    " \001(\t\022\021\n\tparent_id\030\003 \001(\006\0224\n\020local_start_t"
    "ime\030\004 \001(\0132\032.google.protobuf.Timestamp\0222\n"
    "\016local_end_time\030\005 \001(\0132\032.google.protobuf."
    "Timestamp\0223\n\006labels\030\006 \003(\0132#.google.traci"
    "ng.v1.Span.LabelsEntry\0222\n\013stack_trace\030\007 "
    "\001(\0132\035.google.tracing.v1.StackTrace\0226\n\013ti"
    "me_events\030\010 \003(\0132!.google.tracing.v1.Span"
    ".TimeEvent\022+\n\005links\030\t \003(\0132\034.google.traci"
    "ng.v1.Span.Link\022\"\n\006status\030\n \001(\0132\022.google"
    ".rpc.Status\022\031\n\021has_remote_parent\030\013 \001(\010\032\351"
    "\004\n\tTimeEvent\022.\n\nlocal_time\030\001 \001(\0132\032.googl"
    "e.protobuf.Timestamp\022B\n\nannotation\030\002 \001(\013"
    "2,.google.tracing.v1.Span.TimeEvent.Anno"
    "tationH\000\022G\n\rnetwork_event\030\003 \001(\0132..google"
    ".tracing.v1.Span.TimeEvent.NetworkEventH"
    "\000\032\271\001\n\nAnnotation\022\023\n\013description\030\001 \001(\t\022H\n"
    "\006labels\030\002 \003(\01328.google.tracing.v1.Span.T"
    "imeEvent.Annotation.LabelsEntry\032L\n\013Label"
    "sEntry\022\013\n\003key\030\001 \001(\t\022,\n\005value\030\002 \001(\0132\035.goo"
    "gle.tracing.v1.LabelValue:\0028\001\032\331\001\n\014Networ"
    "kEvent\022/\n\013kernel_time\030\001 \001(\0132\032.google.pro"
    "tobuf.Timestamp\022A\n\004type\030\002 \001(\01623.google.t"
    "racing.v1.Span.TimeEvent.NetworkEvent.Ty"
    "pe\022\022\n\nmessage_id\030\003 \001(\004\022\024\n\014message_size\030\004"
    " \001(\004\"+\n\004Type\022\017\n\013UNSPECIFIED\020\000\022\010\n\004SENT\020\001\022"
    "\010\n\004RECV\020\002B\007\n\005value\032\246\001\n\004Link\022,\n\010trace_id\030"
    "\001 \001(\0132\032.google.tracing.v1.TraceId\022\017\n\007spa"
    "n_id\030\002 \001(\006\022/\n\004type\030\003 \001(\0162!.google.tracin"
    "g.v1.Span.Link.Type\".\n\004Type\022\017\n\013UNSPECIFI"
    "ED\020\000\022\t\n\005CHILD\020\001\022\n\n\006PARENT\020\002\032L\n\013LabelsEnt"
    "ry\022\013\n\003key\030\001 \001(\t\022,\n\005value\030\002 \001(\0132\035.google."
    "tracing.v1.LabelValue:\0028\001\"]\n\005Trace\022,\n\010tr"
    "ace_id\030\001 \001(\0132\032.google.tracing.v1.TraceId"
    "\022&\n\005spans\030\002 \003(\0132\027.google.tracing.v1.Span"
    "B_\n\025com.google.tracing.v1B\nTraceProtoP\001Z"
    "8google.golang.org/genproto/googleapis/t"
    "racing/v1;tracingb\006proto3", 2105);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/tracing/trace.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_AddDesc_google_2fapi_2fannotations_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2ftimestamp_2eproto();
  ::google::rpc::protobuf_AddDesc_google_2frpc_2fstatus_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_google_2ftracing_2ftrace_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_google_2ftracing_2ftrace_2eproto_once_);
void protobuf_AddDesc_google_2ftracing_2ftrace_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_google_2ftracing_2ftrace_2eproto_once_,
                 &protobuf_AddDesc_google_2ftracing_2ftrace_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_google_2ftracing_2ftrace_2eproto {
  StaticDescriptorInitializer_google_2ftracing_2ftrace_2eproto() {
    protobuf_AddDesc_google_2ftracing_2ftrace_2eproto();
  }
} static_descriptor_initializer_google_2ftracing_2ftrace_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TraceId::kHexEncodedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TraceId::TraceId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2ftracing_2ftrace_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.tracing.v1.TraceId)
}

void TraceId::InitAsDefaultInstance() {
}

TraceId::TraceId(const TraceId& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.tracing.v1.TraceId)
}

void TraceId::SharedCtor() {
  hex_encoded_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TraceId::~TraceId() {
  // @@protoc_insertion_point(destructor:google.tracing.v1.TraceId)
  SharedDtor();
}

void TraceId::SharedDtor() {
  hex_encoded_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TraceId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TraceId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TraceId_descriptor_;
}

const TraceId& TraceId::default_instance() {
  protobuf_InitDefaults_google_2ftracing_2ftrace_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TraceId> TraceId_default_instance_;

TraceId* TraceId::New(::google::protobuf::Arena* arena) const {
  TraceId* n = new TraceId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TraceId::Clear() {
// @@protoc_insertion_point(message_clear_start:google.tracing.v1.TraceId)
  hex_encoded_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TraceId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.tracing.v1.TraceId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string hex_encoded = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hex_encoded()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hex_encoded().data(), this->hex_encoded().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.tracing.v1.TraceId.hex_encoded"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.tracing.v1.TraceId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.tracing.v1.TraceId)
  return false;
#undef DO_
}

void TraceId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.tracing.v1.TraceId)
  // optional string hex_encoded = 1;
  if (this->hex_encoded().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hex_encoded().data(), this->hex_encoded().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.tracing.v1.TraceId.hex_encoded");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hex_encoded(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.tracing.v1.TraceId)
}

::google::protobuf::uint8* TraceId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.tracing.v1.TraceId)
  // optional string hex_encoded = 1;
  if (this->hex_encoded().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hex_encoded().data(), this->hex_encoded().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.tracing.v1.TraceId.hex_encoded");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hex_encoded(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.tracing.v1.TraceId)
  return target;
}

size_t TraceId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.tracing.v1.TraceId)
  size_t total_size = 0;

  // optional string hex_encoded = 1;
  if (this->hex_encoded().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hex_encoded());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TraceId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.tracing.v1.TraceId)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TraceId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TraceId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.tracing.v1.TraceId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.tracing.v1.TraceId)
    UnsafeMergeFrom(*source);
  }
}

void TraceId::MergeFrom(const TraceId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.tracing.v1.TraceId)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TraceId::UnsafeMergeFrom(const TraceId& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.hex_encoded().size() > 0) {

    hex_encoded_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hex_encoded_);
  }
}

void TraceId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.tracing.v1.TraceId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TraceId::CopyFrom(const TraceId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.tracing.v1.TraceId)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TraceId::IsInitialized() const {

  return true;
}

void TraceId::Swap(TraceId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TraceId::InternalSwap(TraceId* other) {
  hex_encoded_.Swap(&other->hex_encoded_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TraceId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TraceId_descriptor_;
  metadata.reflection = TraceId_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TraceId

// optional string hex_encoded = 1;
void TraceId::clear_hex_encoded() {
  hex_encoded_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TraceId::hex_encoded() const {
  // @@protoc_insertion_point(field_get:google.tracing.v1.TraceId.hex_encoded)
  return hex_encoded_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TraceId::set_hex_encoded(const ::std::string& value) {
  
  hex_encoded_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.tracing.v1.TraceId.hex_encoded)
}
void TraceId::set_hex_encoded(const char* value) {
  
  hex_encoded_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.tracing.v1.TraceId.hex_encoded)
}
void TraceId::set_hex_encoded(const char* value, size_t size) {
  
  hex_encoded_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.tracing.v1.TraceId.hex_encoded)
}
::std::string* TraceId::mutable_hex_encoded() {
  
  // @@protoc_insertion_point(field_mutable:google.tracing.v1.TraceId.hex_encoded)
  return hex_encoded_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TraceId::release_hex_encoded() {
  // @@protoc_insertion_point(field_release:google.tracing.v1.TraceId.hex_encoded)
  
  return hex_encoded_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TraceId::set_allocated_hex_encoded(::std::string* hex_encoded) {
  if (hex_encoded != NULL) {
    
  } else {
    
  }
  hex_encoded_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hex_encoded);
  // @@protoc_insertion_point(field_set_allocated:google.tracing.v1.TraceId.hex_encoded)
}

inline const TraceId* TraceId::internal_default_instance() {
  return &TraceId_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Module::kModuleFieldNumber;
const int Module::kBuildIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Module::Module()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2ftracing_2ftrace_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.tracing.v1.Module)
}

void Module::InitAsDefaultInstance() {
}

Module::Module(const Module& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.tracing.v1.Module)
}

void Module::SharedCtor() {
  module_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  build_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Module::~Module() {
  // @@protoc_insertion_point(destructor:google.tracing.v1.Module)
  SharedDtor();
}

void Module::SharedDtor() {
  module_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  build_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Module::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Module::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Module_descriptor_;
}

const Module& Module::default_instance() {
  protobuf_InitDefaults_google_2ftracing_2ftrace_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Module> Module_default_instance_;

Module* Module::New(::google::protobuf::Arena* arena) const {
  Module* n = new Module;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Module::Clear() {
// @@protoc_insertion_point(message_clear_start:google.tracing.v1.Module)
  module_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  build_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Module::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.tracing.v1.Module)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string module = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->module().data(), this->module().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.tracing.v1.Module.module"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_build_id;
        break;
      }

      // optional string build_id = 2;
      case 2: {
        if (tag == 18) {
         parse_build_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_build_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->build_id().data(), this->build_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.tracing.v1.Module.build_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.tracing.v1.Module)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.tracing.v1.Module)
  return false;
#undef DO_
}

void Module::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.tracing.v1.Module)
  // optional string module = 1;
  if (this->module().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->module().data(), this->module().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.tracing.v1.Module.module");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->module(), output);
  }

  // optional string build_id = 2;
  if (this->build_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->build_id().data(), this->build_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.tracing.v1.Module.build_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->build_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.tracing.v1.Module)
}

::google::protobuf::uint8* Module::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.tracing.v1.Module)
  // optional string module = 1;
  if (this->module().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->module().data(), this->module().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.tracing.v1.Module.module");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->module(), target);
  }

  // optional string build_id = 2;
  if (this->build_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->build_id().data(), this->build_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.tracing.v1.Module.build_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->build_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.tracing.v1.Module)
  return target;
}

size_t Module::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.tracing.v1.Module)
  size_t total_size = 0;

  // optional string module = 1;
  if (this->module().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->module());
  }

  // optional string build_id = 2;
  if (this->build_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->build_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Module::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.tracing.v1.Module)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Module* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Module>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.tracing.v1.Module)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.tracing.v1.Module)
    UnsafeMergeFrom(*source);
  }
}

void Module::MergeFrom(const Module& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.tracing.v1.Module)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Module::UnsafeMergeFrom(const Module& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.module().size() > 0) {

    module_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_);
  }
  if (from.build_id().size() > 0) {

    build_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.build_id_);
  }
}

void Module::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.tracing.v1.Module)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Module::CopyFrom(const Module& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.tracing.v1.Module)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Module::IsInitialized() const {

  return true;
}

void Module::Swap(Module* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Module::InternalSwap(Module* other) {
  module_.Swap(&other->module_);
  build_id_.Swap(&other->build_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Module::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Module_descriptor_;
  metadata.reflection = Module_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Module

// optional string module = 1;
void Module::clear_module() {
  module_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Module::module() const {
  // @@protoc_insertion_point(field_get:google.tracing.v1.Module.module)
  return module_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Module::set_module(const ::std::string& value) {
  
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.tracing.v1.Module.module)
}
void Module::set_module(const char* value) {
  
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.tracing.v1.Module.module)
}
void Module::set_module(const char* value, size_t size) {
  
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.tracing.v1.Module.module)
}
::std::string* Module::mutable_module() {
  
  // @@protoc_insertion_point(field_mutable:google.tracing.v1.Module.module)
  return module_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Module::release_module() {
  // @@protoc_insertion_point(field_release:google.tracing.v1.Module.module)
  
  return module_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Module::set_allocated_module(::std::string* module) {
  if (module != NULL) {
    
  } else {
    
  }
  module_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), module);
  // @@protoc_insertion_point(field_set_allocated:google.tracing.v1.Module.module)
}

// optional string build_id = 2;
void Module::clear_build_id() {
  build_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Module::build_id() const {
  // @@protoc_insertion_point(field_get:google.tracing.v1.Module.build_id)
  return build_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Module::set_build_id(const ::std::string& value) {
  
  build_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.tracing.v1.Module.build_id)
}
void Module::set_build_id(const char* value) {
  
  build_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.tracing.v1.Module.build_id)
}
void Module::set_build_id(const char* value, size_t size) {
  
  build_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.tracing.v1.Module.build_id)
}
::std::string* Module::mutable_build_id() {
  
  // @@protoc_insertion_point(field_mutable:google.tracing.v1.Module.build_id)
  return build_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Module::release_build_id() {
  // @@protoc_insertion_point(field_release:google.tracing.v1.Module.build_id)
  
  return build_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Module::set_allocated_build_id(::std::string* build_id) {
  if (build_id != NULL) {
    
  } else {
    
  }
  build_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), build_id);
  // @@protoc_insertion_point(field_set_allocated:google.tracing.v1.Module.build_id)
}

inline const Module* Module::internal_default_instance() {
  return &Module_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StackTrace_StackFrame::kFunctionNameFieldNumber;
const int StackTrace_StackFrame::kOrigFunctionNameFieldNumber;
const int StackTrace_StackFrame::kFileNameFieldNumber;
const int StackTrace_StackFrame::kLineNumberFieldNumber;
const int StackTrace_StackFrame::kColumnNumberFieldNumber;
const int StackTrace_StackFrame::kLoadModuleFieldNumber;
const int StackTrace_StackFrame::kSourceVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StackTrace_StackFrame::StackTrace_StackFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2ftracing_2ftrace_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.tracing.v1.StackTrace.StackFrame)
}

void StackTrace_StackFrame::InitAsDefaultInstance() {
  load_module_ = const_cast< ::google::tracing::v1::Module*>(
      ::google::tracing::v1::Module::internal_default_instance());
}

StackTrace_StackFrame::StackTrace_StackFrame(const StackTrace_StackFrame& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.tracing.v1.StackTrace.StackFrame)
}

void StackTrace_StackFrame::SharedCtor() {
  function_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orig_function_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  load_module_ = NULL;
  ::memset(&line_number_, 0, reinterpret_cast<char*>(&column_number_) -
    reinterpret_cast<char*>(&line_number_) + sizeof(column_number_));
  _cached_size_ = 0;
}

StackTrace_StackFrame::~StackTrace_StackFrame() {
  // @@protoc_insertion_point(destructor:google.tracing.v1.StackTrace.StackFrame)
  SharedDtor();
}

void StackTrace_StackFrame::SharedDtor() {
  function_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orig_function_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &StackTrace_StackFrame_default_instance_.get()) {
    delete load_module_;
  }
}

void StackTrace_StackFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StackTrace_StackFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StackTrace_StackFrame_descriptor_;
}

const StackTrace_StackFrame& StackTrace_StackFrame::default_instance() {
  protobuf_InitDefaults_google_2ftracing_2ftrace_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<StackTrace_StackFrame> StackTrace_StackFrame_default_instance_;

StackTrace_StackFrame* StackTrace_StackFrame::New(::google::protobuf::Arena* arena) const {
  StackTrace_StackFrame* n = new StackTrace_StackFrame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StackTrace_StackFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:google.tracing.v1.StackTrace.StackFrame)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StackTrace_StackFrame, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StackTrace_StackFrame*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(line_number_, column_number_);
  function_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orig_function_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && load_module_ != NULL) delete load_module_;
  load_module_ = NULL;
  source_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool StackTrace_StackFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.tracing.v1.StackTrace.StackFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string function_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_function_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->function_name().data(), this->function_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.tracing.v1.StackTrace.StackFrame.function_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_orig_function_name;
        break;
      }

      // optional string orig_function_name = 2;
      case 2: {
        if (tag == 18) {
         parse_orig_function_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orig_function_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->orig_function_name().data(), this->orig_function_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.tracing.v1.StackTrace.StackFrame.orig_function_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_file_name;
        break;
      }

      // optional string file_name = 3;
      case 3: {
        if (tag == 26) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.tracing.v1.StackTrace.StackFrame.file_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_line_number;
        break;
      }

      // optional int64 line_number = 4;
      case 4: {
        if (tag == 32) {
         parse_line_number:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &line_number_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_column_number;
        break;
      }

      // optional int64 column_number = 5;
      case 5: {
        if (tag == 40) {
         parse_column_number:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &column_number_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_load_module;
        break;
      }

      // optional .google.tracing.v1.Module load_module = 6;
      case 6: {
        if (tag == 50) {
         parse_load_module:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_load_module()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_source_version;
        break;
      }

      // optional string source_version = 7;
      case 7: {
        if (tag == 58) {
         parse_source_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_version().data(), this->source_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.tracing.v1.StackTrace.StackFrame.source_version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.tracing.v1.StackTrace.StackFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.tracing.v1.StackTrace.StackFrame)
  return false;
#undef DO_
}

void StackTrace_StackFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.tracing.v1.StackTrace.StackFrame)
  // optional string function_name = 1;
  if (this->function_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->function_name().data(), this->function_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.tracing.v1.StackTrace.StackFrame.function_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->function_name(), output);
  }

  // optional string orig_function_name = 2;
  if (this->orig_function_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orig_function_name().data(), this->orig_function_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.tracing.v1.StackTrace.StackFrame.orig_function_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->orig_function_name(), output);
  }

  // optional string file_name = 3;
  if (this->file_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.tracing.v1.StackTrace.StackFrame.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->file_name(), output);
  }

  // optional int64 line_number = 4;
  if (this->line_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->line_number(), output);
  }

  // optional int64 column_number = 5;
  if (this->column_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->column_number(), output);
  }

  // optional .google.tracing.v1.Module load_module = 6;
  if (this->has_load_module()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->load_module_, output);
  }

  // optional string source_version = 7;
  if (this->source_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_version().data(), this->source_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.tracing.v1.StackTrace.StackFrame.source_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->source_version(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.tracing.v1.StackTrace.StackFrame)
}

::google::protobuf::uint8* StackTrace_StackFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.tracing.v1.StackTrace.StackFrame)
  // optional string function_name = 1;
  if (this->function_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->function_name().data(), this->function_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.tracing.v1.StackTrace.StackFrame.function_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->function_name(), target);
  }

  // optional string orig_function_name = 2;
  if (this->orig_function_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orig_function_name().data(), this->orig_function_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.tracing.v1.StackTrace.StackFrame.orig_function_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->orig_function_name(), target);
  }

  // optional string file_name = 3;
  if (this->file_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.tracing.v1.StackTrace.StackFrame.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->file_name(), target);
  }

  // optional int64 line_number = 4;
  if (this->line_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->line_number(), target);
  }

  // optional int64 column_number = 5;
  if (this->column_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->column_number(), target);
  }

  // optional .google.tracing.v1.Module load_module = 6;
  if (this->has_load_module()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->load_module_, false, target);
  }

  // optional string source_version = 7;
  if (this->source_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_version().data(), this->source_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.tracing.v1.StackTrace.StackFrame.source_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->source_version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.tracing.v1.StackTrace.StackFrame)
  return target;
}

size_t StackTrace_StackFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.tracing.v1.StackTrace.StackFrame)
  size_t total_size = 0;

  // optional string function_name = 1;
  if (this->function_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->function_name());
  }

  // optional string orig_function_name = 2;
  if (this->orig_function_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orig_function_name());
  }

  // optional string file_name = 3;
  if (this->file_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());
  }

  // optional int64 line_number = 4;
  if (this->line_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->line_number());
  }

  // optional int64 column_number = 5;
  if (this->column_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->column_number());
  }

  // optional .google.tracing.v1.Module load_module = 6;
  if (this->has_load_module()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->load_module_);
  }

  // optional string source_version = 7;
  if (this->source_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StackTrace_StackFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.tracing.v1.StackTrace.StackFrame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StackTrace_StackFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StackTrace_StackFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.tracing.v1.StackTrace.StackFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.tracing.v1.StackTrace.StackFrame)
    UnsafeMergeFrom(*source);
  }
}

void StackTrace_StackFrame::MergeFrom(const StackTrace_StackFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.tracing.v1.StackTrace.StackFrame)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void StackTrace_StackFrame::UnsafeMergeFrom(const StackTrace_StackFrame& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.function_name().size() > 0) {

    function_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.function_name_);
  }
  if (from.orig_function_name().size() > 0) {

    orig_function_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orig_function_name_);
  }
  if (from.file_name().size() > 0) {

    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  if (from.line_number() != 0) {
    set_line_number(from.line_number());
  }
  if (from.column_number() != 0) {
    set_column_number(from.column_number());
  }
  if (from.has_load_module()) {
    mutable_load_module()->::google::tracing::v1::Module::MergeFrom(from.load_module());
  }
  if (from.source_version().size() > 0) {

    source_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_version_);
  }
}

void StackTrace_StackFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.tracing.v1.StackTrace.StackFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StackTrace_StackFrame::CopyFrom(const StackTrace_StackFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.tracing.v1.StackTrace.StackFrame)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool StackTrace_StackFrame::IsInitialized() const {

  return true;
}

void StackTrace_StackFrame::Swap(StackTrace_StackFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StackTrace_StackFrame::InternalSwap(StackTrace_StackFrame* other) {
  function_name_.Swap(&other->function_name_);
  orig_function_name_.Swap(&other->orig_function_name_);
  file_name_.Swap(&other->file_name_);
  std::swap(line_number_, other->line_number_);
  std::swap(column_number_, other->column_number_);
  std::swap(load_module_, other->load_module_);
  source_version_.Swap(&other->source_version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StackTrace_StackFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StackTrace_StackFrame_descriptor_;
  metadata.reflection = StackTrace_StackFrame_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StackTrace::kStackFrameFieldNumber;
const int StackTrace::kStackTraceHashIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StackTrace::StackTrace()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2ftracing_2ftrace_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.tracing.v1.StackTrace)
}

void StackTrace::InitAsDefaultInstance() {
}

StackTrace::StackTrace(const StackTrace& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.tracing.v1.StackTrace)
}

void StackTrace::SharedCtor() {
  stack_trace_hash_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

StackTrace::~StackTrace() {
  // @@protoc_insertion_point(destructor:google.tracing.v1.StackTrace)
  SharedDtor();
}

void StackTrace::SharedDtor() {
}

void StackTrace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StackTrace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StackTrace_descriptor_;
}

const StackTrace& StackTrace::default_instance() {
  protobuf_InitDefaults_google_2ftracing_2ftrace_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<StackTrace> StackTrace_default_instance_;

StackTrace* StackTrace::New(::google::protobuf::Arena* arena) const {
  StackTrace* n = new StackTrace;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StackTrace::Clear() {
// @@protoc_insertion_point(message_clear_start:google.tracing.v1.StackTrace)
  stack_trace_hash_id_ = GOOGLE_ULONGLONG(0);
  stack_frame_.Clear();
}

bool StackTrace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.tracing.v1.StackTrace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.tracing.v1.StackTrace.StackFrame stack_frame = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_stack_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stack_frame()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_stack_frame;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_stack_trace_hash_id;
        break;
      }

      // optional uint64 stack_trace_hash_id = 2;
      case 2: {
        if (tag == 16) {
         parse_stack_trace_hash_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stack_trace_hash_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.tracing.v1.StackTrace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.tracing.v1.StackTrace)
  return false;
#undef DO_
}

void StackTrace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.tracing.v1.StackTrace)
  // repeated .google.tracing.v1.StackTrace.StackFrame stack_frame = 1;
  for (unsigned int i = 0, n = this->stack_frame_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stack_frame(i), output);
  }

  // optional uint64 stack_trace_hash_id = 2;
  if (this->stack_trace_hash_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->stack_trace_hash_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.tracing.v1.StackTrace)
}

::google::protobuf::uint8* StackTrace::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.tracing.v1.StackTrace)
  // repeated .google.tracing.v1.StackTrace.StackFrame stack_frame = 1;
  for (unsigned int i = 0, n = this->stack_frame_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->stack_frame(i), false, target);
  }

  // optional uint64 stack_trace_hash_id = 2;
  if (this->stack_trace_hash_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->stack_trace_hash_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.tracing.v1.StackTrace)
  return target;
}

size_t StackTrace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.tracing.v1.StackTrace)
  size_t total_size = 0;

  // optional uint64 stack_trace_hash_id = 2;
  if (this->stack_trace_hash_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->stack_trace_hash_id());
  }

  // repeated .google.tracing.v1.StackTrace.StackFrame stack_frame = 1;
  {
    unsigned int count = this->stack_frame_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stack_frame(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StackTrace::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.tracing.v1.StackTrace)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StackTrace* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StackTrace>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.tracing.v1.StackTrace)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.tracing.v1.StackTrace)
    UnsafeMergeFrom(*source);
  }
}

void StackTrace::MergeFrom(const StackTrace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.tracing.v1.StackTrace)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void StackTrace::UnsafeMergeFrom(const StackTrace& from) {
  GOOGLE_DCHECK(&from != this);
  stack_frame_.MergeFrom(from.stack_frame_);
  if (from.stack_trace_hash_id() != 0) {
    set_stack_trace_hash_id(from.stack_trace_hash_id());
  }
}

void StackTrace::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.tracing.v1.StackTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StackTrace::CopyFrom(const StackTrace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.tracing.v1.StackTrace)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool StackTrace::IsInitialized() const {

  return true;
}

void StackTrace::Swap(StackTrace* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StackTrace::InternalSwap(StackTrace* other) {
  stack_frame_.UnsafeArenaSwap(&other->stack_frame_);
  std::swap(stack_trace_hash_id_, other->stack_trace_hash_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StackTrace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StackTrace_descriptor_;
  metadata.reflection = StackTrace_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StackTrace_StackFrame

// optional string function_name = 1;
void StackTrace_StackFrame::clear_function_name() {
  function_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StackTrace_StackFrame::function_name() const {
  // @@protoc_insertion_point(field_get:google.tracing.v1.StackTrace.StackFrame.function_name)
  return function_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StackTrace_StackFrame::set_function_name(const ::std::string& value) {
  
  function_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.tracing.v1.StackTrace.StackFrame.function_name)
}
void StackTrace_StackFrame::set_function_name(const char* value) {
  
  function_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.tracing.v1.StackTrace.StackFrame.function_name)
}
void StackTrace_StackFrame::set_function_name(const char* value, size_t size) {
  
  function_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.tracing.v1.StackTrace.StackFrame.function_name)
}
::std::string* StackTrace_StackFrame::mutable_function_name() {
  
  // @@protoc_insertion_point(field_mutable:google.tracing.v1.StackTrace.StackFrame.function_name)
  return function_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StackTrace_StackFrame::release_function_name() {
  // @@protoc_insertion_point(field_release:google.tracing.v1.StackTrace.StackFrame.function_name)
  
  return function_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StackTrace_StackFrame::set_allocated_function_name(::std::string* function_name) {
  if (function_name != NULL) {
    
  } else {
    
  }
  function_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), function_name);
  // @@protoc_insertion_point(field_set_allocated:google.tracing.v1.StackTrace.StackFrame.function_name)
}

// optional string orig_function_name = 2;
void StackTrace_StackFrame::clear_orig_function_name() {
  orig_function_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StackTrace_StackFrame::orig_function_name() const {
  // @@protoc_insertion_point(field_get:google.tracing.v1.StackTrace.StackFrame.orig_function_name)
  return orig_function_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StackTrace_StackFrame::set_orig_function_name(const ::std::string& value) {
  
  orig_function_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.tracing.v1.StackTrace.StackFrame.orig_function_name)
}
void StackTrace_StackFrame::set_orig_function_name(const char* value) {
  
  orig_function_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.tracing.v1.StackTrace.StackFrame.orig_function_name)
}
void StackTrace_StackFrame::set_orig_function_name(const char* value, size_t size) {
  
  orig_function_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.tracing.v1.StackTrace.StackFrame.orig_function_name)
}
::std::string* StackTrace_StackFrame::mutable_orig_function_name() {
  
  // @@protoc_insertion_point(field_mutable:google.tracing.v1.StackTrace.StackFrame.orig_function_name)
  return orig_function_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StackTrace_StackFrame::release_orig_function_name() {
  // @@protoc_insertion_point(field_release:google.tracing.v1.StackTrace.StackFrame.orig_function_name)
  
  return orig_function_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StackTrace_StackFrame::set_allocated_orig_function_name(::std::string* orig_function_name) {
  if (orig_function_name != NULL) {
    
  } else {
    
  }
  orig_function_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orig_function_name);
  // @@protoc_insertion_point(field_set_allocated:google.tracing.v1.StackTrace.StackFrame.orig_function_name)
}

// optional string file_name = 3;
void StackTrace_StackFrame::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StackTrace_StackFrame::file_name() const {
  // @@protoc_insertion_point(field_get:google.tracing.v1.StackTrace.StackFrame.file_name)
  return file_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StackTrace_StackFrame::set_file_name(const ::std::string& value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.tracing.v1.StackTrace.StackFrame.file_name)
}
void StackTrace_StackFrame::set_file_name(const char* value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.tracing.v1.StackTrace.StackFrame.file_name)
}
void StackTrace_StackFrame::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.tracing.v1.StackTrace.StackFrame.file_name)
}
::std::string* StackTrace_StackFrame::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:google.tracing.v1.StackTrace.StackFrame.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StackTrace_StackFrame::release_file_name() {
  // @@protoc_insertion_point(field_release:google.tracing.v1.StackTrace.StackFrame.file_name)
  
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StackTrace_StackFrame::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:google.tracing.v1.StackTrace.StackFrame.file_name)
}

// optional int64 line_number = 4;
void StackTrace_StackFrame::clear_line_number() {
  line_number_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 StackTrace_StackFrame::line_number() const {
  // @@protoc_insertion_point(field_get:google.tracing.v1.StackTrace.StackFrame.line_number)
  return line_number_;
}
void StackTrace_StackFrame::set_line_number(::google::protobuf::int64 value) {
  
  line_number_ = value;
  // @@protoc_insertion_point(field_set:google.tracing.v1.StackTrace.StackFrame.line_number)
}

// optional int64 column_number = 5;
void StackTrace_StackFrame::clear_column_number() {
  column_number_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 StackTrace_StackFrame::column_number() const {
  // @@protoc_insertion_point(field_get:google.tracing.v1.StackTrace.StackFrame.column_number)
  return column_number_;
}
void StackTrace_StackFrame::set_column_number(::google::protobuf::int64 value) {
  
  column_number_ = value;
  // @@protoc_insertion_point(field_set:google.tracing.v1.StackTrace.StackFrame.column_number)
}

// optional .google.tracing.v1.Module load_module = 6;
bool StackTrace_StackFrame::has_load_module() const {
  return this != internal_default_instance() && load_module_ != NULL;
}
void StackTrace_StackFrame::clear_load_module() {
  if (GetArenaNoVirtual() == NULL && load_module_ != NULL) delete load_module_;
  load_module_ = NULL;
}
const ::google::tracing::v1::Module& StackTrace_StackFrame::load_module() const {
  // @@protoc_insertion_point(field_get:google.tracing.v1.StackTrace.StackFrame.load_module)
  return load_module_ != NULL ? *load_module_
                         : *::google::tracing::v1::Module::internal_default_instance();
}
::google::tracing::v1::Module* StackTrace_StackFrame::mutable_load_module() {
  
  if (load_module_ == NULL) {
    load_module_ = new ::google::tracing::v1::Module;
  }
  // @@protoc_insertion_point(field_mutable:google.tracing.v1.StackTrace.StackFrame.load_module)
  return load_module_;
}
::google::tracing::v1::Module* StackTrace_StackFrame::release_load_module() {
  // @@protoc_insertion_point(field_release:google.tracing.v1.StackTrace.StackFrame.load_module)
  
  ::google::tracing::v1::Module* temp = load_module_;
  load_module_ = NULL;
  return temp;
}
void StackTrace_StackFrame::set_allocated_load_module(::google::tracing::v1::Module* load_module) {
  delete load_module_;
  load_module_ = load_module;
  if (load_module) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.tracing.v1.StackTrace.StackFrame.load_module)
}

// optional string source_version = 7;
void StackTrace_StackFrame::clear_source_version() {
  source_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StackTrace_StackFrame::source_version() const {
  // @@protoc_insertion_point(field_get:google.tracing.v1.StackTrace.StackFrame.source_version)
  return source_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StackTrace_StackFrame::set_source_version(const ::std::string& value) {
  
  source_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.tracing.v1.StackTrace.StackFrame.source_version)
}
void StackTrace_StackFrame::set_source_version(const char* value) {
  
  source_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.tracing.v1.StackTrace.StackFrame.source_version)
}
void StackTrace_StackFrame::set_source_version(const char* value, size_t size) {
  
  source_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.tracing.v1.StackTrace.StackFrame.source_version)
}
::std::string* StackTrace_StackFrame::mutable_source_version() {
  
  // @@protoc_insertion_point(field_mutable:google.tracing.v1.StackTrace.StackFrame.source_version)
  return source_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StackTrace_StackFrame::release_source_version() {
  // @@protoc_insertion_point(field_release:google.tracing.v1.StackTrace.StackFrame.source_version)
  
  return source_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StackTrace_StackFrame::set_allocated_source_version(::std::string* source_version) {
  if (source_version != NULL) {
    
  } else {
    
  }
  source_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_version);
  // @@protoc_insertion_point(field_set_allocated:google.tracing.v1.StackTrace.StackFrame.source_version)
}

inline const StackTrace_StackFrame* StackTrace_StackFrame::internal_default_instance() {
  return &StackTrace_StackFrame_default_instance_.get();
}
// -------------------------------------------------------------------

// StackTrace

// repeated .google.tracing.v1.StackTrace.StackFrame stack_frame = 1;
int StackTrace::stack_frame_size() const {
  return stack_frame_.size();
}
void StackTrace::clear_stack_frame() {
  stack_frame_.Clear();
}
const ::google::tracing::v1::StackTrace_StackFrame& StackTrace::stack_frame(int index) const {
  // @@protoc_insertion_point(field_get:google.tracing.v1.StackTrace.stack_frame)
  return stack_frame_.Get(index);
}
::google::tracing::v1::StackTrace_StackFrame* StackTrace::mutable_stack_frame(int index) {
  // @@protoc_insertion_point(field_mutable:google.tracing.v1.StackTrace.stack_frame)
  return stack_frame_.Mutable(index);
}
::google::tracing::v1::StackTrace_StackFrame* StackTrace::add_stack_frame() {
  // @@protoc_insertion_point(field_add:google.tracing.v1.StackTrace.stack_frame)
  return stack_frame_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::tracing::v1::StackTrace_StackFrame >*
StackTrace::mutable_stack_frame() {
  // @@protoc_insertion_point(field_mutable_list:google.tracing.v1.StackTrace.stack_frame)
  return &stack_frame_;
}
const ::google::protobuf::RepeatedPtrField< ::google::tracing::v1::StackTrace_StackFrame >&
StackTrace::stack_frame() const {
  // @@protoc_insertion_point(field_list:google.tracing.v1.StackTrace.stack_frame)
  return stack_frame_;
}

// optional uint64 stack_trace_hash_id = 2;
void StackTrace::clear_stack_trace_hash_id() {
  stack_trace_hash_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 StackTrace::stack_trace_hash_id() const {
  // @@protoc_insertion_point(field_get:google.tracing.v1.StackTrace.stack_trace_hash_id)
  return stack_trace_hash_id_;
}
void StackTrace::set_stack_trace_hash_id(::google::protobuf::uint64 value) {
  
  stack_trace_hash_id_ = value;
  // @@protoc_insertion_point(field_set:google.tracing.v1.StackTrace.stack_trace_hash_id)
}

inline const StackTrace* StackTrace::internal_default_instance() {
  return &StackTrace_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LabelValue::kStringValueFieldNumber;
const int LabelValue::kIntValueFieldNumber;
const int LabelValue::kBoolValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LabelValue::LabelValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2ftracing_2ftrace_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.tracing.v1.LabelValue)
}

void LabelValue::InitAsDefaultInstance() {
  LabelValue_default_oneof_instance_->string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  LabelValue_default_oneof_instance_->int_value_ = GOOGLE_LONGLONG(0);
  LabelValue_default_oneof_instance_->bool_value_ = false;
}

LabelValue::LabelValue(const LabelValue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.tracing.v1.LabelValue)
}

void LabelValue::SharedCtor() {
  clear_has_value();
  _cached_size_ = 0;
}

LabelValue::~LabelValue() {
  // @@protoc_insertion_point(destructor:google.tracing.v1.LabelValue)
  SharedDtor();
}

void LabelValue::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void LabelValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabelValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LabelValue_descriptor_;
}

const LabelValue& LabelValue::default_instance() {
  protobuf_InitDefaults_google_2ftracing_2ftrace_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LabelValue> LabelValue_default_instance_;

LabelValue* LabelValue::New(::google::protobuf::Arena* arena) const {
  LabelValue* n = new LabelValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LabelValue::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:google.tracing.v1.LabelValue)
  switch (value_case()) {
    case kStringValue: {
      value_.string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kIntValue: {
      // No need to clear
      break;
    }
    case kBoolValue: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void LabelValue::Clear() {
// @@protoc_insertion_point(message_clear_start:google.tracing.v1.LabelValue)
  clear_value();
}

bool LabelValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.tracing.v1.LabelValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string string_value = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->string_value().data(), this->string_value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.tracing.v1.LabelValue.string_value"));
        } else {
          goto handle_unusual;
        }
        goto after_bool_value;
        break;
      }

      // optional int64 int_value = 2;
      case 2: {
        if (tag == 16) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_.int_value_)));
          set_has_int_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bool_value;
        break;
      }

      // optional bool bool_value = 3;
      case 3: {
        if (tag == 24) {
         parse_bool_value:
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_.bool_value_)));
          set_has_bool_value();
        } else {
          goto handle_unusual;
        }
       after_bool_value:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.tracing.v1.LabelValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.tracing.v1.LabelValue)
  return false;
#undef DO_
}

void LabelValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.tracing.v1.LabelValue)
  // optional string string_value = 1;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.tracing.v1.LabelValue.string_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->string_value(), output);
  }

  // optional int64 int_value = 2;
  if (has_int_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->int_value(), output);
  }

  // optional bool bool_value = 3;
  if (has_bool_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bool_value(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.tracing.v1.LabelValue)
}

::google::protobuf::uint8* LabelValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.tracing.v1.LabelValue)
  // optional string string_value = 1;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.tracing.v1.LabelValue.string_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->string_value(), target);
  }

  // optional int64 int_value = 2;
  if (has_int_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->int_value(), target);
  }

  // optional bool bool_value = 3;
  if (has_bool_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bool_value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.tracing.v1.LabelValue)
  return target;
}

size_t LabelValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.tracing.v1.LabelValue)
  size_t total_size = 0;

  switch (value_case()) {
    // optional string string_value = 1;
    case kStringValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
      break;
    }
    // optional int64 int_value = 2;
    case kIntValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int_value());
      break;
    }
    // optional bool bool_value = 3;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabelValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.tracing.v1.LabelValue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LabelValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LabelValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.tracing.v1.LabelValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.tracing.v1.LabelValue)
    UnsafeMergeFrom(*source);
  }
}

void LabelValue::MergeFrom(const LabelValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.tracing.v1.LabelValue)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LabelValue::UnsafeMergeFrom(const LabelValue& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.value_case()) {
    case kStringValue: {
      set_string_value(from.string_value());
      break;
    }
    case kIntValue: {
      set_int_value(from.int_value());
      break;
    }
    case kBoolValue: {
      set_bool_value(from.bool_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void LabelValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.tracing.v1.LabelValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelValue::CopyFrom(const LabelValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.tracing.v1.LabelValue)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LabelValue::IsInitialized() const {

  return true;
}

void LabelValue::Swap(LabelValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LabelValue::InternalSwap(LabelValue* other) {
  std::swap(value_, other->value_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LabelValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LabelValue_descriptor_;
  metadata.reflection = LabelValue_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LabelValue

// optional string string_value = 1;
bool LabelValue::has_string_value() const {
  return value_case() == kStringValue;
}
void LabelValue::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
void LabelValue::clear_string_value() {
  if (has_string_value()) {
    value_.string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
const ::std::string& LabelValue::string_value() const {
  // @@protoc_insertion_point(field_get:google.tracing.v1.LabelValue.string_value)
  if (has_string_value()) {
    return value_.string_value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void LabelValue::set_string_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.tracing.v1.LabelValue.string_value)
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.tracing.v1.LabelValue.string_value)
}
void LabelValue::set_string_value(const char* value) {
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.tracing.v1.LabelValue.string_value)
}
void LabelValue::set_string_value(const char* value, size_t size) {
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.tracing.v1.LabelValue.string_value)
}
::std::string* LabelValue::mutable_string_value() {
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.tracing.v1.LabelValue.string_value)
  return value_.string_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LabelValue::release_string_value() {
  // @@protoc_insertion_point(field_release:google.tracing.v1.LabelValue.string_value)
  if (has_string_value()) {
    clear_has_value();
    return value_.string_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void LabelValue::set_allocated_string_value(::std::string* string_value) {
  if (!has_string_value()) {
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (string_value != NULL) {
    set_has_string_value();
    value_.string_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        string_value);
  }
  // @@protoc_insertion_point(field_set_allocated:google.tracing.v1.LabelValue.string_value)
}

// optional int64 int_value = 2;
bool LabelValue::has_int_value() const {
  return value_case() == kIntValue;
}
void LabelValue::set_has_int_value() {
  _oneof_case_[0] = kIntValue;
}
void LabelValue::clear_int_value() {
  if (has_int_value()) {
    value_.int_value_ = GOOGLE_LONGLONG(0);
    clear_has_value();
  }
}
::google::protobuf::int64 LabelValue::int_value() const {
  // @@protoc_insertion_point(field_get:google.tracing.v1.LabelValue.int_value)
  if (has_int_value()) {
    return value_.int_value_;
  }
  return GOOGLE_LONGLONG(0);
}
void LabelValue::set_int_value(::google::protobuf::int64 value) {
  if (!has_int_value()) {
    clear_value();
    set_has_int_value();
  }
  value_.int_value_ = value;
  // @@protoc_insertion_point(field_set:google.tracing.v1.LabelValue.int_value)
}

// optional bool bool_value = 3;
bool LabelValue::has_bool_value() const {
  return value_case() == kBoolValue;
}
void LabelValue::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
void LabelValue::clear_bool_value() {
  if (has_bool_value()) {
    value_.bool_value_ = false;
    clear_has_value();
  }
}
bool LabelValue::bool_value() const {
  // @@protoc_insertion_point(field_get:google.tracing.v1.LabelValue.bool_value)
  if (has_bool_value()) {
    return value_.bool_value_;
  }
  return false;
}
void LabelValue::set_bool_value(bool value) {
  if (!has_bool_value()) {
    clear_value();
    set_has_bool_value();
  }
  value_.bool_value_ = value;
  // @@protoc_insertion_point(field_set:google.tracing.v1.LabelValue.bool_value)
}

bool LabelValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
void LabelValue::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
LabelValue::ValueCase LabelValue::value_case() const {
  return LabelValue::ValueCase(_oneof_case_[0]);
}
inline const LabelValue* LabelValue::internal_default_instance() {
  return &LabelValue_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Span_TimeEvent_Annotation::kDescriptionFieldNumber;
const int Span_TimeEvent_Annotation::kLabelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Span_TimeEvent_Annotation::Span_TimeEvent_Annotation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2ftracing_2ftrace_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.tracing.v1.Span.TimeEvent.Annotation)
}

void Span_TimeEvent_Annotation::InitAsDefaultInstance() {
}

Span_TimeEvent_Annotation::Span_TimeEvent_Annotation(const Span_TimeEvent_Annotation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.tracing.v1.Span.TimeEvent.Annotation)
}

void Span_TimeEvent_Annotation::SharedCtor() {
  labels_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  labels_.SetEntryDescriptor(
      &::google::tracing::v1::Span_TimeEvent_Annotation_LabelsEntry_descriptor_);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Span_TimeEvent_Annotation::~Span_TimeEvent_Annotation() {
  // @@protoc_insertion_point(destructor:google.tracing.v1.Span.TimeEvent.Annotation)
  SharedDtor();
}

void Span_TimeEvent_Annotation::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Span_TimeEvent_Annotation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Span_TimeEvent_Annotation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Span_TimeEvent_Annotation_descriptor_;
}

const Span_TimeEvent_Annotation& Span_TimeEvent_Annotation::default_instance() {
  protobuf_InitDefaults_google_2ftracing_2ftrace_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Span_TimeEvent_Annotation> Span_TimeEvent_Annotation_default_instance_;

Span_TimeEvent_Annotation* Span_TimeEvent_Annotation::New(::google::protobuf::Arena* arena) const {
  Span_TimeEvent_Annotation* n = new Span_TimeEvent_Annotation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Span_TimeEvent_Annotation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.tracing.v1.Span.TimeEvent.Annotation)
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  labels_.Clear();
}

bool Span_TimeEvent_Annotation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.tracing.v1.Span.TimeEvent.Annotation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string description = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.tracing.v1.Span.TimeEvent.Annotation.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_labels;
        break;
      }

      // map<string, .google.tracing.v1.LabelValue> labels = 2;
      case 2: {
        if (tag == 18) {
         parse_labels:
          DO_(input->IncrementRecursionDepth());
         parse_loop_labels:
          Span_TimeEvent_Annotation_LabelsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::google::tracing::v1::LabelValue,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue > > parser(&labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.tracing.v1.Span.TimeEvent.Annotation.LabelsEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_labels;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.tracing.v1.Span.TimeEvent.Annotation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.tracing.v1.Span.TimeEvent.Annotation)
  return false;
#undef DO_
}

void Span_TimeEvent_Annotation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.tracing.v1.Span.TimeEvent.Annotation)
  // optional string description = 1;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.tracing.v1.Span.TimeEvent.Annotation.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->description(), output);
  }

  // map<string, .google.tracing.v1.LabelValue> labels = 2;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.tracing.v1.Span.TimeEvent.Annotation.LabelsEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Span_TimeEvent_Annotation_LabelsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Span_TimeEvent_Annotation_LabelsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:google.tracing.v1.Span.TimeEvent.Annotation)
}

::google::protobuf::uint8* Span_TimeEvent_Annotation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.tracing.v1.Span.TimeEvent.Annotation)
  // optional string description = 1;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.tracing.v1.Span.TimeEvent.Annotation.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->description(), target);
  }

  // map<string, .google.tracing.v1.LabelValue> labels = 2;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.tracing.v1.Span.TimeEvent.Annotation.LabelsEntry.key");
      }
    };

    if (deterministic &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Span_TimeEvent_Annotation_LabelsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Span_TimeEvent_Annotation_LabelsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.tracing.v1.Span.TimeEvent.Annotation)
  return target;
}

size_t Span_TimeEvent_Annotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.tracing.v1.Span.TimeEvent.Annotation)
  size_t total_size = 0;

  // optional string description = 1;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // map<string, .google.tracing.v1.LabelValue> labels = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  {
    ::google::protobuf::scoped_ptr<Span_TimeEvent_Annotation_LabelsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue >::const_iterator
        it = this->labels().begin();
        it != this->labels().end(); ++it) {
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Span_TimeEvent_Annotation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.tracing.v1.Span.TimeEvent.Annotation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Span_TimeEvent_Annotation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Span_TimeEvent_Annotation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.tracing.v1.Span.TimeEvent.Annotation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.tracing.v1.Span.TimeEvent.Annotation)
    UnsafeMergeFrom(*source);
  }
}

void Span_TimeEvent_Annotation::MergeFrom(const Span_TimeEvent_Annotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.tracing.v1.Span.TimeEvent.Annotation)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Span_TimeEvent_Annotation::UnsafeMergeFrom(const Span_TimeEvent_Annotation& from) {
  GOOGLE_DCHECK(&from != this);
  labels_.MergeFrom(from.labels_);
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
}

void Span_TimeEvent_Annotation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.tracing.v1.Span.TimeEvent.Annotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Span_TimeEvent_Annotation::CopyFrom(const Span_TimeEvent_Annotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.tracing.v1.Span.TimeEvent.Annotation)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Span_TimeEvent_Annotation::IsInitialized() const {

  return true;
}

void Span_TimeEvent_Annotation::Swap(Span_TimeEvent_Annotation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Span_TimeEvent_Annotation::InternalSwap(Span_TimeEvent_Annotation* other) {
  description_.Swap(&other->description_);
  labels_.Swap(&other->labels_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Span_TimeEvent_Annotation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Span_TimeEvent_Annotation_descriptor_;
  metadata.reflection = Span_TimeEvent_Annotation_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Span_TimeEvent_NetworkEvent_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Span_TimeEvent_NetworkEvent_Type_descriptor_;
}
bool Span_TimeEvent_NetworkEvent_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Span_TimeEvent_NetworkEvent_Type Span_TimeEvent_NetworkEvent::UNSPECIFIED;
const Span_TimeEvent_NetworkEvent_Type Span_TimeEvent_NetworkEvent::SENT;
const Span_TimeEvent_NetworkEvent_Type Span_TimeEvent_NetworkEvent::RECV;
const Span_TimeEvent_NetworkEvent_Type Span_TimeEvent_NetworkEvent::Type_MIN;
const Span_TimeEvent_NetworkEvent_Type Span_TimeEvent_NetworkEvent::Type_MAX;
const int Span_TimeEvent_NetworkEvent::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Span_TimeEvent_NetworkEvent::kKernelTimeFieldNumber;
const int Span_TimeEvent_NetworkEvent::kTypeFieldNumber;
const int Span_TimeEvent_NetworkEvent::kMessageIdFieldNumber;
const int Span_TimeEvent_NetworkEvent::kMessageSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Span_TimeEvent_NetworkEvent::Span_TimeEvent_NetworkEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2ftracing_2ftrace_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.tracing.v1.Span.TimeEvent.NetworkEvent)
}

void Span_TimeEvent_NetworkEvent::InitAsDefaultInstance() {
  kernel_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}

Span_TimeEvent_NetworkEvent::Span_TimeEvent_NetworkEvent(const Span_TimeEvent_NetworkEvent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.tracing.v1.Span.TimeEvent.NetworkEvent)
}

void Span_TimeEvent_NetworkEvent::SharedCtor() {
  kernel_time_ = NULL;
  ::memset(&message_id_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&message_id_) + sizeof(type_));
  _cached_size_ = 0;
}

Span_TimeEvent_NetworkEvent::~Span_TimeEvent_NetworkEvent() {
  // @@protoc_insertion_point(destructor:google.tracing.v1.Span.TimeEvent.NetworkEvent)
  SharedDtor();
}

void Span_TimeEvent_NetworkEvent::SharedDtor() {
  if (this != &Span_TimeEvent_NetworkEvent_default_instance_.get()) {
    delete kernel_time_;
  }
}

void Span_TimeEvent_NetworkEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Span_TimeEvent_NetworkEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Span_TimeEvent_NetworkEvent_descriptor_;
}

const Span_TimeEvent_NetworkEvent& Span_TimeEvent_NetworkEvent::default_instance() {
  protobuf_InitDefaults_google_2ftracing_2ftrace_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Span_TimeEvent_NetworkEvent> Span_TimeEvent_NetworkEvent_default_instance_;

Span_TimeEvent_NetworkEvent* Span_TimeEvent_NetworkEvent::New(::google::protobuf::Arena* arena) const {
  Span_TimeEvent_NetworkEvent* n = new Span_TimeEvent_NetworkEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Span_TimeEvent_NetworkEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:google.tracing.v1.Span.TimeEvent.NetworkEvent)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Span_TimeEvent_NetworkEvent, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Span_TimeEvent_NetworkEvent*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(message_id_, type_);
  if (GetArenaNoVirtual() == NULL && kernel_time_ != NULL) delete kernel_time_;
  kernel_time_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool Span_TimeEvent_NetworkEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.tracing.v1.Span.TimeEvent.NetworkEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.protobuf.Timestamp kernel_time = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kernel_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .google.tracing.v1.Span.TimeEvent.NetworkEvent.Type type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::google::tracing::v1::Span_TimeEvent_NetworkEvent_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_message_id;
        break;
      }

      // optional uint64 message_id = 3;
      case 3: {
        if (tag == 24) {
         parse_message_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &message_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_message_size;
        break;
      }

      // optional uint64 message_size = 4;
      case 4: {
        if (tag == 32) {
         parse_message_size:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &message_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.tracing.v1.Span.TimeEvent.NetworkEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.tracing.v1.Span.TimeEvent.NetworkEvent)
  return false;
#undef DO_
}

void Span_TimeEvent_NetworkEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.tracing.v1.Span.TimeEvent.NetworkEvent)
  // optional .google.protobuf.Timestamp kernel_time = 1;
  if (this->has_kernel_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->kernel_time_, output);
  }

  // optional .google.tracing.v1.Span.TimeEvent.NetworkEvent.Type type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional uint64 message_id = 3;
  if (this->message_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->message_id(), output);
  }

  // optional uint64 message_size = 4;
  if (this->message_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->message_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.tracing.v1.Span.TimeEvent.NetworkEvent)
}

::google::protobuf::uint8* Span_TimeEvent_NetworkEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.tracing.v1.Span.TimeEvent.NetworkEvent)
  // optional .google.protobuf.Timestamp kernel_time = 1;
  if (this->has_kernel_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->kernel_time_, false, target);
  }

  // optional .google.tracing.v1.Span.TimeEvent.NetworkEvent.Type type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional uint64 message_id = 3;
  if (this->message_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->message_id(), target);
  }

  // optional uint64 message_size = 4;
  if (this->message_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->message_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.tracing.v1.Span.TimeEvent.NetworkEvent)
  return target;
}

size_t Span_TimeEvent_NetworkEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.tracing.v1.Span.TimeEvent.NetworkEvent)
  size_t total_size = 0;

  // optional .google.protobuf.Timestamp kernel_time = 1;
  if (this->has_kernel_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->kernel_time_);
  }

  // optional .google.tracing.v1.Span.TimeEvent.NetworkEvent.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional uint64 message_id = 3;
  if (this->message_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->message_id());
  }

  // optional uint64 message_size = 4;
  if (this->message_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->message_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Span_TimeEvent_NetworkEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.tracing.v1.Span.TimeEvent.NetworkEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Span_TimeEvent_NetworkEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Span_TimeEvent_NetworkEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.tracing.v1.Span.TimeEvent.NetworkEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.tracing.v1.Span.TimeEvent.NetworkEvent)
    UnsafeMergeFrom(*source);
  }
}

void Span_TimeEvent_NetworkEvent::MergeFrom(const Span_TimeEvent_NetworkEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.tracing.v1.Span.TimeEvent.NetworkEvent)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Span_TimeEvent_NetworkEvent::UnsafeMergeFrom(const Span_TimeEvent_NetworkEvent& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_kernel_time()) {
    mutable_kernel_time()->::google::protobuf::Timestamp::MergeFrom(from.kernel_time());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.message_id() != 0) {
    set_message_id(from.message_id());
  }
  if (from.message_size() != 0) {
    set_message_size(from.message_size());
  }
}

void Span_TimeEvent_NetworkEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.tracing.v1.Span.TimeEvent.NetworkEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Span_TimeEvent_NetworkEvent::CopyFrom(const Span_TimeEvent_NetworkEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.tracing.v1.Span.TimeEvent.NetworkEvent)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Span_TimeEvent_NetworkEvent::IsInitialized() const {

  return true;
}

void Span_TimeEvent_NetworkEvent::Swap(Span_TimeEvent_NetworkEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Span_TimeEvent_NetworkEvent::InternalSwap(Span_TimeEvent_NetworkEvent* other) {
  std::swap(kernel_time_, other->kernel_time_);
  std::swap(type_, other->type_);
  std::swap(message_id_, other->message_id_);
  std::swap(message_size_, other->message_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Span_TimeEvent_NetworkEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Span_TimeEvent_NetworkEvent_descriptor_;
  metadata.reflection = Span_TimeEvent_NetworkEvent_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Span_TimeEvent::kLocalTimeFieldNumber;
const int Span_TimeEvent::kAnnotationFieldNumber;
const int Span_TimeEvent::kNetworkEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Span_TimeEvent::Span_TimeEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2ftracing_2ftrace_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.tracing.v1.Span.TimeEvent)
}

void Span_TimeEvent::InitAsDefaultInstance() {
  local_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  Span_TimeEvent_default_oneof_instance_->annotation_ = const_cast< ::google::tracing::v1::Span_TimeEvent_Annotation*>(
      ::google::tracing::v1::Span_TimeEvent_Annotation::internal_default_instance());
  Span_TimeEvent_default_oneof_instance_->network_event_ = const_cast< ::google::tracing::v1::Span_TimeEvent_NetworkEvent*>(
      ::google::tracing::v1::Span_TimeEvent_NetworkEvent::internal_default_instance());
}

Span_TimeEvent::Span_TimeEvent(const Span_TimeEvent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.tracing.v1.Span.TimeEvent)
}

void Span_TimeEvent::SharedCtor() {
  local_time_ = NULL;
  clear_has_value();
  _cached_size_ = 0;
}

Span_TimeEvent::~Span_TimeEvent() {
  // @@protoc_insertion_point(destructor:google.tracing.v1.Span.TimeEvent)
  SharedDtor();
}

void Span_TimeEvent::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
  if (this != &Span_TimeEvent_default_instance_.get()) {
    delete local_time_;
  }
}

void Span_TimeEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Span_TimeEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Span_TimeEvent_descriptor_;
}

const Span_TimeEvent& Span_TimeEvent::default_instance() {
  protobuf_InitDefaults_google_2ftracing_2ftrace_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Span_TimeEvent> Span_TimeEvent_default_instance_;

Span_TimeEvent* Span_TimeEvent::New(::google::protobuf::Arena* arena) const {
  Span_TimeEvent* n = new Span_TimeEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Span_TimeEvent::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:google.tracing.v1.Span.TimeEvent)
  switch (value_case()) {
    case kAnnotation: {
      delete value_.annotation_;
      break;
    }
    case kNetworkEvent: {
      delete value_.network_event_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Span_TimeEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:google.tracing.v1.Span.TimeEvent)
  if (GetArenaNoVirtual() == NULL && local_time_ != NULL) delete local_time_;
  local_time_ = NULL;
  clear_value();
}

bool Span_TimeEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.tracing.v1.Span.TimeEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.protobuf.Timestamp local_time = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_local_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_annotation;
        break;
      }

      // optional .google.tracing.v1.Span.TimeEvent.Annotation annotation = 2;
      case 2: {
        if (tag == 18) {
         parse_annotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_annotation()));
        } else {
          goto handle_unusual;
        }
        goto after_network_event;
        break;
      }

      // optional .google.tracing.v1.Span.TimeEvent.NetworkEvent network_event = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_network_event()));
        } else {
          goto handle_unusual;
        }
       after_network_event:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.tracing.v1.Span.TimeEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.tracing.v1.Span.TimeEvent)
  return false;
#undef DO_
}

void Span_TimeEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.tracing.v1.Span.TimeEvent)
  // optional .google.protobuf.Timestamp local_time = 1;
  if (this->has_local_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->local_time_, output);
  }

  // optional .google.tracing.v1.Span.TimeEvent.Annotation annotation = 2;
  if (has_annotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *value_.annotation_, output);
  }

  // optional .google.tracing.v1.Span.TimeEvent.NetworkEvent network_event = 3;
  if (has_network_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *value_.network_event_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.tracing.v1.Span.TimeEvent)
}

::google::protobuf::uint8* Span_TimeEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.tracing.v1.Span.TimeEvent)
  // optional .google.protobuf.Timestamp local_time = 1;
  if (this->has_local_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->local_time_, false, target);
  }

  // optional .google.tracing.v1.Span.TimeEvent.Annotation annotation = 2;
  if (has_annotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *value_.annotation_, false, target);
  }

  // optional .google.tracing.v1.Span.TimeEvent.NetworkEvent network_event = 3;
  if (has_network_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *value_.network_event_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.tracing.v1.Span.TimeEvent)
  return target;
}

size_t Span_TimeEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.tracing.v1.Span.TimeEvent)
  size_t total_size = 0;

  // optional .google.protobuf.Timestamp local_time = 1;
  if (this->has_local_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->local_time_);
  }

  switch (value_case()) {
    // optional .google.tracing.v1.Span.TimeEvent.Annotation annotation = 2;
    case kAnnotation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.annotation_);
      break;
    }
    // optional .google.tracing.v1.Span.TimeEvent.NetworkEvent network_event = 3;
    case kNetworkEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.network_event_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Span_TimeEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.tracing.v1.Span.TimeEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Span_TimeEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Span_TimeEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.tracing.v1.Span.TimeEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.tracing.v1.Span.TimeEvent)
    UnsafeMergeFrom(*source);
  }
}

void Span_TimeEvent::MergeFrom(const Span_TimeEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.tracing.v1.Span.TimeEvent)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Span_TimeEvent::UnsafeMergeFrom(const Span_TimeEvent& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.value_case()) {
    case kAnnotation: {
      mutable_annotation()->::google::tracing::v1::Span_TimeEvent_Annotation::MergeFrom(from.annotation());
      break;
    }
    case kNetworkEvent: {
      mutable_network_event()->::google::tracing::v1::Span_TimeEvent_NetworkEvent::MergeFrom(from.network_event());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (from.has_local_time()) {
    mutable_local_time()->::google::protobuf::Timestamp::MergeFrom(from.local_time());
  }
}

void Span_TimeEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.tracing.v1.Span.TimeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Span_TimeEvent::CopyFrom(const Span_TimeEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.tracing.v1.Span.TimeEvent)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Span_TimeEvent::IsInitialized() const {

  return true;
}

void Span_TimeEvent::Swap(Span_TimeEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Span_TimeEvent::InternalSwap(Span_TimeEvent* other) {
  std::swap(local_time_, other->local_time_);
  std::swap(value_, other->value_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Span_TimeEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Span_TimeEvent_descriptor_;
  metadata.reflection = Span_TimeEvent_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Span_Link_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Span_Link_Type_descriptor_;
}
bool Span_Link_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Span_Link_Type Span_Link::UNSPECIFIED;
const Span_Link_Type Span_Link::CHILD;
const Span_Link_Type Span_Link::PARENT;
const Span_Link_Type Span_Link::Type_MIN;
const Span_Link_Type Span_Link::Type_MAX;
const int Span_Link::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Span_Link::kTraceIdFieldNumber;
const int Span_Link::kSpanIdFieldNumber;
const int Span_Link::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Span_Link::Span_Link()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2ftracing_2ftrace_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.tracing.v1.Span.Link)
}

void Span_Link::InitAsDefaultInstance() {
  trace_id_ = const_cast< ::google::tracing::v1::TraceId*>(
      ::google::tracing::v1::TraceId::internal_default_instance());
}

Span_Link::Span_Link(const Span_Link& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.tracing.v1.Span.Link)
}

void Span_Link::SharedCtor() {
  trace_id_ = NULL;
  ::memset(&span_id_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&span_id_) + sizeof(type_));
  _cached_size_ = 0;
}

Span_Link::~Span_Link() {
  // @@protoc_insertion_point(destructor:google.tracing.v1.Span.Link)
  SharedDtor();
}

void Span_Link::SharedDtor() {
  if (this != &Span_Link_default_instance_.get()) {
    delete trace_id_;
  }
}

void Span_Link::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Span_Link::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Span_Link_descriptor_;
}

const Span_Link& Span_Link::default_instance() {
  protobuf_InitDefaults_google_2ftracing_2ftrace_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Span_Link> Span_Link_default_instance_;

Span_Link* Span_Link::New(::google::protobuf::Arena* arena) const {
  Span_Link* n = new Span_Link;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Span_Link::Clear() {
// @@protoc_insertion_point(message_clear_start:google.tracing.v1.Span.Link)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Span_Link, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Span_Link*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(span_id_, type_);
  if (GetArenaNoVirtual() == NULL && trace_id_ != NULL) delete trace_id_;
  trace_id_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool Span_Link::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.tracing.v1.Span.Link)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.tracing.v1.TraceId trace_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trace_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_span_id;
        break;
      }

      // optional fixed64 span_id = 2;
      case 2: {
        if (tag == 17) {
         parse_span_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &span_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .google.tracing.v1.Span.Link.Type type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::google::tracing::v1::Span_Link_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.tracing.v1.Span.Link)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.tracing.v1.Span.Link)
  return false;
#undef DO_
}

void Span_Link::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.tracing.v1.Span.Link)
  // optional .google.tracing.v1.TraceId trace_id = 1;
  if (this->has_trace_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->trace_id_, output);
  }

  // optional fixed64 span_id = 2;
  if (this->span_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->span_id(), output);
  }

  // optional .google.tracing.v1.Span.Link.Type type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.tracing.v1.Span.Link)
}

::google::protobuf::uint8* Span_Link::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.tracing.v1.Span.Link)
  // optional .google.tracing.v1.TraceId trace_id = 1;
  if (this->has_trace_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->trace_id_, false, target);
  }

  // optional fixed64 span_id = 2;
  if (this->span_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->span_id(), target);
  }

  // optional .google.tracing.v1.Span.Link.Type type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.tracing.v1.Span.Link)
  return target;
}

size_t Span_Link::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.tracing.v1.Span.Link)
  size_t total_size = 0;

  // optional .google.tracing.v1.TraceId trace_id = 1;
  if (this->has_trace_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->trace_id_);
  }

  // optional fixed64 span_id = 2;
  if (this->span_id() != 0) {
    total_size += 1 + 8;
  }

  // optional .google.tracing.v1.Span.Link.Type type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Span_Link::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.tracing.v1.Span.Link)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Span_Link* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Span_Link>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.tracing.v1.Span.Link)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.tracing.v1.Span.Link)
    UnsafeMergeFrom(*source);
  }
}

void Span_Link::MergeFrom(const Span_Link& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.tracing.v1.Span.Link)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Span_Link::UnsafeMergeFrom(const Span_Link& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_trace_id()) {
    mutable_trace_id()->::google::tracing::v1::TraceId::MergeFrom(from.trace_id());
  }
  if (from.span_id() != 0) {
    set_span_id(from.span_id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Span_Link::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.tracing.v1.Span.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Span_Link::CopyFrom(const Span_Link& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.tracing.v1.Span.Link)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Span_Link::IsInitialized() const {

  return true;
}

void Span_Link::Swap(Span_Link* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Span_Link::InternalSwap(Span_Link* other) {
  std::swap(trace_id_, other->trace_id_);
  std::swap(span_id_, other->span_id_);
  std::swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Span_Link::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Span_Link_descriptor_;
  metadata.reflection = Span_Link_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Span::kIdFieldNumber;
const int Span::kNameFieldNumber;
const int Span::kParentIdFieldNumber;
const int Span::kLocalStartTimeFieldNumber;
const int Span::kLocalEndTimeFieldNumber;
const int Span::kLabelsFieldNumber;
const int Span::kStackTraceFieldNumber;
const int Span::kTimeEventsFieldNumber;
const int Span::kLinksFieldNumber;
const int Span::kStatusFieldNumber;
const int Span::kHasRemoteParentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Span::Span()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2ftracing_2ftrace_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.tracing.v1.Span)
}

void Span::InitAsDefaultInstance() {
  local_start_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  local_end_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  stack_trace_ = const_cast< ::google::tracing::v1::StackTrace*>(
      ::google::tracing::v1::StackTrace::internal_default_instance());
  status_ = const_cast< ::google::rpc::Status*>(
      ::google::rpc::Status::internal_default_instance());
}

Span::Span(const Span& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.tracing.v1.Span)
}

void Span::SharedCtor() {
  labels_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  labels_.SetEntryDescriptor(
      &::google::tracing::v1::Span_LabelsEntry_descriptor_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_start_time_ = NULL;
  local_end_time_ = NULL;
  stack_trace_ = NULL;
  status_ = NULL;
  ::memset(&id_, 0, reinterpret_cast<char*>(&has_remote_parent_) -
    reinterpret_cast<char*>(&id_) + sizeof(has_remote_parent_));
  _cached_size_ = 0;
}

Span::~Span() {
  // @@protoc_insertion_point(destructor:google.tracing.v1.Span)
  SharedDtor();
}

void Span::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &Span_default_instance_.get()) {
    delete local_start_time_;
    delete local_end_time_;
    delete stack_trace_;
    delete status_;
  }
}

void Span::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Span::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Span_descriptor_;
}

const Span& Span::default_instance() {
  protobuf_InitDefaults_google_2ftracing_2ftrace_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Span> Span_default_instance_;

Span* Span::New(::google::protobuf::Arena* arena) const {
  Span* n = new Span;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Span::Clear() {
// @@protoc_insertion_point(message_clear_start:google.tracing.v1.Span)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Span, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Span*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, parent_id_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && local_start_time_ != NULL) delete local_start_time_;
  local_start_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && local_end_time_ != NULL) delete local_end_time_;
  local_end_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && stack_trace_ != NULL) delete stack_trace_;
  stack_trace_ = NULL;
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
  has_remote_parent_ = false;

#undef ZR_HELPER_
#undef ZR_

  labels_.Clear();
  time_events_.Clear();
  links_.Clear();
}

bool Span::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.tracing.v1.Span)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 id = 1;
      case 1: {
        if (tag == 9) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.tracing.v1.Span.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_parent_id;
        break;
      }

      // optional fixed64 parent_id = 3;
      case 3: {
        if (tag == 25) {
         parse_parent_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &parent_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_local_start_time;
        break;
      }

      // optional .google.protobuf.Timestamp local_start_time = 4;
      case 4: {
        if (tag == 34) {
         parse_local_start_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_local_start_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_local_end_time;
        break;
      }

      // optional .google.protobuf.Timestamp local_end_time = 5;
      case 5: {
        if (tag == 42) {
         parse_local_end_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_local_end_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_labels;
        break;
      }

      // map<string, .google.tracing.v1.LabelValue> labels = 6;
      case 6: {
        if (tag == 50) {
         parse_labels:
          DO_(input->IncrementRecursionDepth());
         parse_loop_labels:
          Span_LabelsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::google::tracing::v1::LabelValue,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue > > parser(&labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.tracing.v1.Span.LabelsEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_labels;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(58)) goto parse_stack_trace;
        break;
      }

      // optional .google.tracing.v1.StackTrace stack_trace = 7;
      case 7: {
        if (tag == 58) {
         parse_stack_trace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stack_trace()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_time_events;
        break;
      }

      // repeated .google.tracing.v1.Span.TimeEvent time_events = 8;
      case 8: {
        if (tag == 66) {
         parse_time_events:
          DO_(input->IncrementRecursionDepth());
         parse_loop_time_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_time_events()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_time_events;
        if (input->ExpectTag(74)) goto parse_loop_links;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .google.tracing.v1.Span.Link links = 9;
      case 9: {
        if (tag == 74) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_links:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_links()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_links;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(82)) goto parse_status;
        break;
      }

      // optional .google.rpc.Status status = 10;
      case 10: {
        if (tag == 82) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_has_remote_parent;
        break;
      }

      // optional bool has_remote_parent = 11;
      case 11: {
        if (tag == 88) {
         parse_has_remote_parent:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_remote_parent_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.tracing.v1.Span)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.tracing.v1.Span)
  return false;
#undef DO_
}

void Span::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.tracing.v1.Span)
  // optional fixed64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->id(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.tracing.v1.Span.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional fixed64 parent_id = 3;
  if (this->parent_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->parent_id(), output);
  }

  // optional .google.protobuf.Timestamp local_start_time = 4;
  if (this->has_local_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->local_start_time_, output);
  }

  // optional .google.protobuf.Timestamp local_end_time = 5;
  if (this->has_local_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->local_end_time_, output);
  }

  // map<string, .google.tracing.v1.LabelValue> labels = 6;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.tracing.v1.Span.LabelsEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Span_LabelsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Span_LabelsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional .google.tracing.v1.StackTrace stack_trace = 7;
  if (this->has_stack_trace()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->stack_trace_, output);
  }

  // repeated .google.tracing.v1.Span.TimeEvent time_events = 8;
  for (unsigned int i = 0, n = this->time_events_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->time_events(i), output);
  }

  // repeated .google.tracing.v1.Span.Link links = 9;
  for (unsigned int i = 0, n = this->links_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->links(i), output);
  }

  // optional .google.rpc.Status status = 10;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->status_, output);
  }

  // optional bool has_remote_parent = 11;
  if (this->has_remote_parent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->has_remote_parent(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.tracing.v1.Span)
}

::google::protobuf::uint8* Span::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.tracing.v1.Span)
  // optional fixed64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.tracing.v1.Span.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional fixed64 parent_id = 3;
  if (this->parent_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->parent_id(), target);
  }

  // optional .google.protobuf.Timestamp local_start_time = 4;
  if (this->has_local_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->local_start_time_, false, target);
  }

  // optional .google.protobuf.Timestamp local_end_time = 5;
  if (this->has_local_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->local_end_time_, false, target);
  }

  // map<string, .google.tracing.v1.LabelValue> labels = 6;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.tracing.v1.Span.LabelsEntry.key");
      }
    };

    if (deterministic &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Span_LabelsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Span_LabelsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional .google.tracing.v1.StackTrace stack_trace = 7;
  if (this->has_stack_trace()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->stack_trace_, false, target);
  }

  // repeated .google.tracing.v1.Span.TimeEvent time_events = 8;
  for (unsigned int i = 0, n = this->time_events_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->time_events(i), false, target);
  }

  // repeated .google.tracing.v1.Span.Link links = 9;
  for (unsigned int i = 0, n = this->links_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->links(i), false, target);
  }

  // optional .google.rpc.Status status = 10;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->status_, false, target);
  }

  // optional bool has_remote_parent = 11;
  if (this->has_remote_parent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->has_remote_parent(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.tracing.v1.Span)
  return target;
}

size_t Span::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.tracing.v1.Span)
  size_t total_size = 0;

  // optional fixed64 id = 1;
  if (this->id() != 0) {
    total_size += 1 + 8;
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional fixed64 parent_id = 3;
  if (this->parent_id() != 0) {
    total_size += 1 + 8;
  }

  // optional .google.protobuf.Timestamp local_start_time = 4;
  if (this->has_local_start_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->local_start_time_);
  }

  // optional .google.protobuf.Timestamp local_end_time = 5;
  if (this->has_local_end_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->local_end_time_);
  }

  // optional .google.tracing.v1.StackTrace stack_trace = 7;
  if (this->has_stack_trace()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stack_trace_);
  }

  // optional .google.rpc.Status status = 10;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  // optional bool has_remote_parent = 11;
  if (this->has_remote_parent() != 0) {
    total_size += 1 + 1;
  }

  // map<string, .google.tracing.v1.LabelValue> labels = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  {
    ::google::protobuf::scoped_ptr<Span_LabelsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue >::const_iterator
        it = this->labels().begin();
        it != this->labels().end(); ++it) {
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .google.tracing.v1.Span.TimeEvent time_events = 8;
  {
    unsigned int count = this->time_events_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time_events(i));
    }
  }

  // repeated .google.tracing.v1.Span.Link links = 9;
  {
    unsigned int count = this->links_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->links(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Span::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.tracing.v1.Span)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Span* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Span>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.tracing.v1.Span)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.tracing.v1.Span)
    UnsafeMergeFrom(*source);
  }
}

void Span::MergeFrom(const Span& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.tracing.v1.Span)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Span::UnsafeMergeFrom(const Span& from) {
  GOOGLE_DCHECK(&from != this);
  labels_.MergeFrom(from.labels_);
  time_events_.MergeFrom(from.time_events_);
  links_.MergeFrom(from.links_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.parent_id() != 0) {
    set_parent_id(from.parent_id());
  }
  if (from.has_local_start_time()) {
    mutable_local_start_time()->::google::protobuf::Timestamp::MergeFrom(from.local_start_time());
  }
  if (from.has_local_end_time()) {
    mutable_local_end_time()->::google::protobuf::Timestamp::MergeFrom(from.local_end_time());
  }
  if (from.has_stack_trace()) {
    mutable_stack_trace()->::google::tracing::v1::StackTrace::MergeFrom(from.stack_trace());
  }
  if (from.has_status()) {
    mutable_status()->::google::rpc::Status::MergeFrom(from.status());
  }
  if (from.has_remote_parent() != 0) {
    set_has_remote_parent(from.has_remote_parent());
  }
}

void Span::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.tracing.v1.Span)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Span::CopyFrom(const Span& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.tracing.v1.Span)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Span::IsInitialized() const {

  return true;
}

void Span::Swap(Span* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Span::InternalSwap(Span* other) {
  std::swap(id_, other->id_);
  name_.Swap(&other->name_);
  std::swap(parent_id_, other->parent_id_);
  std::swap(local_start_time_, other->local_start_time_);
  std::swap(local_end_time_, other->local_end_time_);
  labels_.Swap(&other->labels_);
  std::swap(stack_trace_, other->stack_trace_);
  time_events_.UnsafeArenaSwap(&other->time_events_);
  links_.UnsafeArenaSwap(&other->links_);
  std::swap(status_, other->status_);
  std::swap(has_remote_parent_, other->has_remote_parent_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Span::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Span_descriptor_;
  metadata.reflection = Span_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Span_TimeEvent_Annotation

// optional string description = 1;
void Span_TimeEvent_Annotation::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Span_TimeEvent_Annotation::description() const {
  // @@protoc_insertion_point(field_get:google.tracing.v1.Span.TimeEvent.Annotation.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Span_TimeEvent_Annotation::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.tracing.v1.Span.TimeEvent.Annotation.description)
}
void Span_TimeEvent_Annotation::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.tracing.v1.Span.TimeEvent.Annotation.description)
}
void Span_TimeEvent_Annotation::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.tracing.v1.Span.TimeEvent.Annotation.description)
}
::std::string* Span_TimeEvent_Annotation::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.tracing.v1.Span.TimeEvent.Annotation.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Span_TimeEvent_Annotation::release_description() {
  // @@protoc_insertion_point(field_release:google.tracing.v1.Span.TimeEvent.Annotation.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Span_TimeEvent_Annotation::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.tracing.v1.Span.TimeEvent.Annotation.description)
}

// map<string, .google.tracing.v1.LabelValue> labels = 2;
int Span_TimeEvent_Annotation::labels_size() const {
  return labels_.size();
}
void Span_TimeEvent_Annotation::clear_labels() {
  labels_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue >&
Span_TimeEvent_Annotation::labels() const {
  // @@protoc_insertion_point(field_map:google.tracing.v1.Span.TimeEvent.Annotation.labels)
  return labels_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue >*
Span_TimeEvent_Annotation::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.tracing.v1.Span.TimeEvent.Annotation.labels)
  return labels_.MutableMap();
}

inline const Span_TimeEvent_Annotation* Span_TimeEvent_Annotation::internal_default_instance() {
  return &Span_TimeEvent_Annotation_default_instance_.get();
}
// -------------------------------------------------------------------

// Span_TimeEvent_NetworkEvent

// optional .google.protobuf.Timestamp kernel_time = 1;
bool Span_TimeEvent_NetworkEvent::has_kernel_time() const {
  return this != internal_default_instance() && kernel_time_ != NULL;
}
void Span_TimeEvent_NetworkEvent::clear_kernel_time() {
  if (GetArenaNoVirtual() == NULL && kernel_time_ != NULL) delete kernel_time_;
  kernel_time_ = NULL;
}
const ::google::protobuf::Timestamp& Span_TimeEvent_NetworkEvent::kernel_time() const {
  // @@protoc_insertion_point(field_get:google.tracing.v1.Span.TimeEvent.NetworkEvent.kernel_time)
  return kernel_time_ != NULL ? *kernel_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* Span_TimeEvent_NetworkEvent::mutable_kernel_time() {
  
  if (kernel_time_ == NULL) {
    kernel_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.tracing.v1.Span.TimeEvent.NetworkEvent.kernel_time)
  return kernel_time_;
}
::google::protobuf::Timestamp* Span_TimeEvent_NetworkEvent::release_kernel_time() {
  // @@protoc_insertion_point(field_release:google.tracing.v1.Span.TimeEvent.NetworkEvent.kernel_time)
  
  ::google::protobuf::Timestamp* temp = kernel_time_;
  kernel_time_ = NULL;
  return temp;
}
void Span_TimeEvent_NetworkEvent::set_allocated_kernel_time(::google::protobuf::Timestamp* kernel_time) {
  delete kernel_time_;
  if (kernel_time != NULL && kernel_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_kernel_time = new ::google::protobuf::Timestamp;
    new_kernel_time->CopyFrom(*kernel_time);
    kernel_time = new_kernel_time;
  }
  kernel_time_ = kernel_time;
  if (kernel_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.tracing.v1.Span.TimeEvent.NetworkEvent.kernel_time)
}

// optional .google.tracing.v1.Span.TimeEvent.NetworkEvent.Type type = 2;
void Span_TimeEvent_NetworkEvent::clear_type() {
  type_ = 0;
}
::google::tracing::v1::Span_TimeEvent_NetworkEvent_Type Span_TimeEvent_NetworkEvent::type() const {
  // @@protoc_insertion_point(field_get:google.tracing.v1.Span.TimeEvent.NetworkEvent.type)
  return static_cast< ::google::tracing::v1::Span_TimeEvent_NetworkEvent_Type >(type_);
}
void Span_TimeEvent_NetworkEvent::set_type(::google::tracing::v1::Span_TimeEvent_NetworkEvent_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:google.tracing.v1.Span.TimeEvent.NetworkEvent.type)
}

// optional uint64 message_id = 3;
void Span_TimeEvent_NetworkEvent::clear_message_id() {
  message_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Span_TimeEvent_NetworkEvent::message_id() const {
  // @@protoc_insertion_point(field_get:google.tracing.v1.Span.TimeEvent.NetworkEvent.message_id)
  return message_id_;
}
void Span_TimeEvent_NetworkEvent::set_message_id(::google::protobuf::uint64 value) {
  
  message_id_ = value;
  // @@protoc_insertion_point(field_set:google.tracing.v1.Span.TimeEvent.NetworkEvent.message_id)
}

// optional uint64 message_size = 4;
void Span_TimeEvent_NetworkEvent::clear_message_size() {
  message_size_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Span_TimeEvent_NetworkEvent::message_size() const {
  // @@protoc_insertion_point(field_get:google.tracing.v1.Span.TimeEvent.NetworkEvent.message_size)
  return message_size_;
}
void Span_TimeEvent_NetworkEvent::set_message_size(::google::protobuf::uint64 value) {
  
  message_size_ = value;
  // @@protoc_insertion_point(field_set:google.tracing.v1.Span.TimeEvent.NetworkEvent.message_size)
}

inline const Span_TimeEvent_NetworkEvent* Span_TimeEvent_NetworkEvent::internal_default_instance() {
  return &Span_TimeEvent_NetworkEvent_default_instance_.get();
}
// -------------------------------------------------------------------

// Span_TimeEvent

// optional .google.protobuf.Timestamp local_time = 1;
bool Span_TimeEvent::has_local_time() const {
  return this != internal_default_instance() && local_time_ != NULL;
}
void Span_TimeEvent::clear_local_time() {
  if (GetArenaNoVirtual() == NULL && local_time_ != NULL) delete local_time_;
  local_time_ = NULL;
}
const ::google::protobuf::Timestamp& Span_TimeEvent::local_time() const {
  // @@protoc_insertion_point(field_get:google.tracing.v1.Span.TimeEvent.local_time)
  return local_time_ != NULL ? *local_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* Span_TimeEvent::mutable_local_time() {
  
  if (local_time_ == NULL) {
    local_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.tracing.v1.Span.TimeEvent.local_time)
  return local_time_;
}
::google::protobuf::Timestamp* Span_TimeEvent::release_local_time() {
  // @@protoc_insertion_point(field_release:google.tracing.v1.Span.TimeEvent.local_time)
  
  ::google::protobuf::Timestamp* temp = local_time_;
  local_time_ = NULL;
  return temp;
}
void Span_TimeEvent::set_allocated_local_time(::google::protobuf::Timestamp* local_time) {
  delete local_time_;
  if (local_time != NULL && local_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_local_time = new ::google::protobuf::Timestamp;
    new_local_time->CopyFrom(*local_time);
    local_time = new_local_time;
  }
  local_time_ = local_time;
  if (local_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.tracing.v1.Span.TimeEvent.local_time)
}

// optional .google.tracing.v1.Span.TimeEvent.Annotation annotation = 2;
bool Span_TimeEvent::has_annotation() const {
  return value_case() == kAnnotation;
}
void Span_TimeEvent::set_has_annotation() {
  _oneof_case_[0] = kAnnotation;
}
void Span_TimeEvent::clear_annotation() {
  if (has_annotation()) {
    delete value_.annotation_;
    clear_has_value();
  }
}
 const ::google::tracing::v1::Span_TimeEvent_Annotation& Span_TimeEvent::annotation() const {
  // @@protoc_insertion_point(field_get:google.tracing.v1.Span.TimeEvent.annotation)
  return has_annotation()
      ? *value_.annotation_
      : ::google::tracing::v1::Span_TimeEvent_Annotation::default_instance();
}
::google::tracing::v1::Span_TimeEvent_Annotation* Span_TimeEvent::mutable_annotation() {
  if (!has_annotation()) {
    clear_value();
    set_has_annotation();
    value_.annotation_ = new ::google::tracing::v1::Span_TimeEvent_Annotation;
  }
  // @@protoc_insertion_point(field_mutable:google.tracing.v1.Span.TimeEvent.annotation)
  return value_.annotation_;
}
::google::tracing::v1::Span_TimeEvent_Annotation* Span_TimeEvent::release_annotation() {
  // @@protoc_insertion_point(field_release:google.tracing.v1.Span.TimeEvent.annotation)
  if (has_annotation()) {
    clear_has_value();
    ::google::tracing::v1::Span_TimeEvent_Annotation* temp = value_.annotation_;
    value_.annotation_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Span_TimeEvent::set_allocated_annotation(::google::tracing::v1::Span_TimeEvent_Annotation* annotation) {
  clear_value();
  if (annotation) {
    set_has_annotation();
    value_.annotation_ = annotation;
  }
  // @@protoc_insertion_point(field_set_allocated:google.tracing.v1.Span.TimeEvent.annotation)
}

// optional .google.tracing.v1.Span.TimeEvent.NetworkEvent network_event = 3;
bool Span_TimeEvent::has_network_event() const {
  return value_case() == kNetworkEvent;
}
void Span_TimeEvent::set_has_network_event() {
  _oneof_case_[0] = kNetworkEvent;
}
void Span_TimeEvent::clear_network_event() {
  if (has_network_event()) {
    delete value_.network_event_;
    clear_has_value();
  }
}
 const ::google::tracing::v1::Span_TimeEvent_NetworkEvent& Span_TimeEvent::network_event() const {
  // @@protoc_insertion_point(field_get:google.tracing.v1.Span.TimeEvent.network_event)
  return has_network_event()
      ? *value_.network_event_
      : ::google::tracing::v1::Span_TimeEvent_NetworkEvent::default_instance();
}
::google::tracing::v1::Span_TimeEvent_NetworkEvent* Span_TimeEvent::mutable_network_event() {
  if (!has_network_event()) {
    clear_value();
    set_has_network_event();
    value_.network_event_ = new ::google::tracing::v1::Span_TimeEvent_NetworkEvent;
  }
  // @@protoc_insertion_point(field_mutable:google.tracing.v1.Span.TimeEvent.network_event)
  return value_.network_event_;
}
::google::tracing::v1::Span_TimeEvent_NetworkEvent* Span_TimeEvent::release_network_event() {
  // @@protoc_insertion_point(field_release:google.tracing.v1.Span.TimeEvent.network_event)
  if (has_network_event()) {
    clear_has_value();
    ::google::tracing::v1::Span_TimeEvent_NetworkEvent* temp = value_.network_event_;
    value_.network_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Span_TimeEvent::set_allocated_network_event(::google::tracing::v1::Span_TimeEvent_NetworkEvent* network_event) {
  clear_value();
  if (network_event) {
    set_has_network_event();
    value_.network_event_ = network_event;
  }
  // @@protoc_insertion_point(field_set_allocated:google.tracing.v1.Span.TimeEvent.network_event)
}

bool Span_TimeEvent::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
void Span_TimeEvent::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
Span_TimeEvent::ValueCase Span_TimeEvent::value_case() const {
  return Span_TimeEvent::ValueCase(_oneof_case_[0]);
}
inline const Span_TimeEvent* Span_TimeEvent::internal_default_instance() {
  return &Span_TimeEvent_default_instance_.get();
}
// -------------------------------------------------------------------

// Span_Link

// optional .google.tracing.v1.TraceId trace_id = 1;
bool Span_Link::has_trace_id() const {
  return this != internal_default_instance() && trace_id_ != NULL;
}
void Span_Link::clear_trace_id() {
  if (GetArenaNoVirtual() == NULL && trace_id_ != NULL) delete trace_id_;
  trace_id_ = NULL;
}
const ::google::tracing::v1::TraceId& Span_Link::trace_id() const {
  // @@protoc_insertion_point(field_get:google.tracing.v1.Span.Link.trace_id)
  return trace_id_ != NULL ? *trace_id_
                         : *::google::tracing::v1::TraceId::internal_default_instance();
}
::google::tracing::v1::TraceId* Span_Link::mutable_trace_id() {
  
  if (trace_id_ == NULL) {
    trace_id_ = new ::google::tracing::v1::TraceId;
  }
  // @@protoc_insertion_point(field_mutable:google.tracing.v1.Span.Link.trace_id)
  return trace_id_;
}
::google::tracing::v1::TraceId* Span_Link::release_trace_id() {
  // @@protoc_insertion_point(field_release:google.tracing.v1.Span.Link.trace_id)
  
  ::google::tracing::v1::TraceId* temp = trace_id_;
  trace_id_ = NULL;
  return temp;
}
void Span_Link::set_allocated_trace_id(::google::tracing::v1::TraceId* trace_id) {
  delete trace_id_;
  trace_id_ = trace_id;
  if (trace_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.tracing.v1.Span.Link.trace_id)
}

// optional fixed64 span_id = 2;
void Span_Link::clear_span_id() {
  span_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Span_Link::span_id() const {
  // @@protoc_insertion_point(field_get:google.tracing.v1.Span.Link.span_id)
  return span_id_;
}
void Span_Link::set_span_id(::google::protobuf::uint64 value) {
  
  span_id_ = value;
  // @@protoc_insertion_point(field_set:google.tracing.v1.Span.Link.span_id)
}

// optional .google.tracing.v1.Span.Link.Type type = 3;
void Span_Link::clear_type() {
  type_ = 0;
}
::google::tracing::v1::Span_Link_Type Span_Link::type() const {
  // @@protoc_insertion_point(field_get:google.tracing.v1.Span.Link.type)
  return static_cast< ::google::tracing::v1::Span_Link_Type >(type_);
}
void Span_Link::set_type(::google::tracing::v1::Span_Link_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:google.tracing.v1.Span.Link.type)
}

inline const Span_Link* Span_Link::internal_default_instance() {
  return &Span_Link_default_instance_.get();
}
// -------------------------------------------------------------------

// Span

// optional fixed64 id = 1;
void Span::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Span::id() const {
  // @@protoc_insertion_point(field_get:google.tracing.v1.Span.id)
  return id_;
}
void Span::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:google.tracing.v1.Span.id)
}

// optional string name = 2;
void Span::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Span::name() const {
  // @@protoc_insertion_point(field_get:google.tracing.v1.Span.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Span::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.tracing.v1.Span.name)
}
void Span::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.tracing.v1.Span.name)
}
void Span::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.tracing.v1.Span.name)
}
::std::string* Span::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.tracing.v1.Span.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Span::release_name() {
  // @@protoc_insertion_point(field_release:google.tracing.v1.Span.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Span::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.tracing.v1.Span.name)
}

// optional fixed64 parent_id = 3;
void Span::clear_parent_id() {
  parent_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Span::parent_id() const {
  // @@protoc_insertion_point(field_get:google.tracing.v1.Span.parent_id)
  return parent_id_;
}
void Span::set_parent_id(::google::protobuf::uint64 value) {
  
  parent_id_ = value;
  // @@protoc_insertion_point(field_set:google.tracing.v1.Span.parent_id)
}

// optional .google.protobuf.Timestamp local_start_time = 4;
bool Span::has_local_start_time() const {
  return this != internal_default_instance() && local_start_time_ != NULL;
}
void Span::clear_local_start_time() {
  if (GetArenaNoVirtual() == NULL && local_start_time_ != NULL) delete local_start_time_;
  local_start_time_ = NULL;
}
const ::google::protobuf::Timestamp& Span::local_start_time() const {
  // @@protoc_insertion_point(field_get:google.tracing.v1.Span.local_start_time)
  return local_start_time_ != NULL ? *local_start_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* Span::mutable_local_start_time() {
  
  if (local_start_time_ == NULL) {
    local_start_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.tracing.v1.Span.local_start_time)
  return local_start_time_;
}
::google::protobuf::Timestamp* Span::release_local_start_time() {
  // @@protoc_insertion_point(field_release:google.tracing.v1.Span.local_start_time)
  
  ::google::protobuf::Timestamp* temp = local_start_time_;
  local_start_time_ = NULL;
  return temp;
}
void Span::set_allocated_local_start_time(::google::protobuf::Timestamp* local_start_time) {
  delete local_start_time_;
  if (local_start_time != NULL && local_start_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_local_start_time = new ::google::protobuf::Timestamp;
    new_local_start_time->CopyFrom(*local_start_time);
    local_start_time = new_local_start_time;
  }
  local_start_time_ = local_start_time;
  if (local_start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.tracing.v1.Span.local_start_time)
}

// optional .google.protobuf.Timestamp local_end_time = 5;
bool Span::has_local_end_time() const {
  return this != internal_default_instance() && local_end_time_ != NULL;
}
void Span::clear_local_end_time() {
  if (GetArenaNoVirtual() == NULL && local_end_time_ != NULL) delete local_end_time_;
  local_end_time_ = NULL;
}
const ::google::protobuf::Timestamp& Span::local_end_time() const {
  // @@protoc_insertion_point(field_get:google.tracing.v1.Span.local_end_time)
  return local_end_time_ != NULL ? *local_end_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* Span::mutable_local_end_time() {
  
  if (local_end_time_ == NULL) {
    local_end_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.tracing.v1.Span.local_end_time)
  return local_end_time_;
}
::google::protobuf::Timestamp* Span::release_local_end_time() {
  // @@protoc_insertion_point(field_release:google.tracing.v1.Span.local_end_time)
  
  ::google::protobuf::Timestamp* temp = local_end_time_;
  local_end_time_ = NULL;
  return temp;
}
void Span::set_allocated_local_end_time(::google::protobuf::Timestamp* local_end_time) {
  delete local_end_time_;
  if (local_end_time != NULL && local_end_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_local_end_time = new ::google::protobuf::Timestamp;
    new_local_end_time->CopyFrom(*local_end_time);
    local_end_time = new_local_end_time;
  }
  local_end_time_ = local_end_time;
  if (local_end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.tracing.v1.Span.local_end_time)
}

// map<string, .google.tracing.v1.LabelValue> labels = 6;
int Span::labels_size() const {
  return labels_.size();
}
void Span::clear_labels() {
  labels_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue >&
Span::labels() const {
  // @@protoc_insertion_point(field_map:google.tracing.v1.Span.labels)
  return labels_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue >*
Span::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.tracing.v1.Span.labels)
  return labels_.MutableMap();
}

// optional .google.tracing.v1.StackTrace stack_trace = 7;
bool Span::has_stack_trace() const {
  return this != internal_default_instance() && stack_trace_ != NULL;
}
void Span::clear_stack_trace() {
  if (GetArenaNoVirtual() == NULL && stack_trace_ != NULL) delete stack_trace_;
  stack_trace_ = NULL;
}
const ::google::tracing::v1::StackTrace& Span::stack_trace() const {
  // @@protoc_insertion_point(field_get:google.tracing.v1.Span.stack_trace)
  return stack_trace_ != NULL ? *stack_trace_
                         : *::google::tracing::v1::StackTrace::internal_default_instance();
}
::google::tracing::v1::StackTrace* Span::mutable_stack_trace() {
  
  if (stack_trace_ == NULL) {
    stack_trace_ = new ::google::tracing::v1::StackTrace;
  }
  // @@protoc_insertion_point(field_mutable:google.tracing.v1.Span.stack_trace)
  return stack_trace_;
}
::google::tracing::v1::StackTrace* Span::release_stack_trace() {
  // @@protoc_insertion_point(field_release:google.tracing.v1.Span.stack_trace)
  
  ::google::tracing::v1::StackTrace* temp = stack_trace_;
  stack_trace_ = NULL;
  return temp;
}
void Span::set_allocated_stack_trace(::google::tracing::v1::StackTrace* stack_trace) {
  delete stack_trace_;
  stack_trace_ = stack_trace;
  if (stack_trace) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.tracing.v1.Span.stack_trace)
}

// repeated .google.tracing.v1.Span.TimeEvent time_events = 8;
int Span::time_events_size() const {
  return time_events_.size();
}
void Span::clear_time_events() {
  time_events_.Clear();
}
const ::google::tracing::v1::Span_TimeEvent& Span::time_events(int index) const {
  // @@protoc_insertion_point(field_get:google.tracing.v1.Span.time_events)
  return time_events_.Get(index);
}
::google::tracing::v1::Span_TimeEvent* Span::mutable_time_events(int index) {
  // @@protoc_insertion_point(field_mutable:google.tracing.v1.Span.time_events)
  return time_events_.Mutable(index);
}
::google::tracing::v1::Span_TimeEvent* Span::add_time_events() {
  // @@protoc_insertion_point(field_add:google.tracing.v1.Span.time_events)
  return time_events_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::tracing::v1::Span_TimeEvent >*
Span::mutable_time_events() {
  // @@protoc_insertion_point(field_mutable_list:google.tracing.v1.Span.time_events)
  return &time_events_;
}
const ::google::protobuf::RepeatedPtrField< ::google::tracing::v1::Span_TimeEvent >&
Span::time_events() const {
  // @@protoc_insertion_point(field_list:google.tracing.v1.Span.time_events)
  return time_events_;
}

// repeated .google.tracing.v1.Span.Link links = 9;
int Span::links_size() const {
  return links_.size();
}
void Span::clear_links() {
  links_.Clear();
}
const ::google::tracing::v1::Span_Link& Span::links(int index) const {
  // @@protoc_insertion_point(field_get:google.tracing.v1.Span.links)
  return links_.Get(index);
}
::google::tracing::v1::Span_Link* Span::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:google.tracing.v1.Span.links)
  return links_.Mutable(index);
}
::google::tracing::v1::Span_Link* Span::add_links() {
  // @@protoc_insertion_point(field_add:google.tracing.v1.Span.links)
  return links_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::tracing::v1::Span_Link >*
Span::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:google.tracing.v1.Span.links)
  return &links_;
}
const ::google::protobuf::RepeatedPtrField< ::google::tracing::v1::Span_Link >&
Span::links() const {
  // @@protoc_insertion_point(field_list:google.tracing.v1.Span.links)
  return links_;
}

// optional .google.rpc.Status status = 10;
bool Span::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
void Span::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::google::rpc::Status& Span::status() const {
  // @@protoc_insertion_point(field_get:google.tracing.v1.Span.status)
  return status_ != NULL ? *status_
                         : *::google::rpc::Status::internal_default_instance();
}
::google::rpc::Status* Span::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::google::rpc::Status;
  }
  // @@protoc_insertion_point(field_mutable:google.tracing.v1.Span.status)
  return status_;
}
::google::rpc::Status* Span::release_status() {
  // @@protoc_insertion_point(field_release:google.tracing.v1.Span.status)
  
  ::google::rpc::Status* temp = status_;
  status_ = NULL;
  return temp;
}
void Span::set_allocated_status(::google::rpc::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.tracing.v1.Span.status)
}

// optional bool has_remote_parent = 11;
void Span::clear_has_remote_parent() {
  has_remote_parent_ = false;
}
bool Span::has_remote_parent() const {
  // @@protoc_insertion_point(field_get:google.tracing.v1.Span.has_remote_parent)
  return has_remote_parent_;
}
void Span::set_has_remote_parent(bool value) {
  
  has_remote_parent_ = value;
  // @@protoc_insertion_point(field_set:google.tracing.v1.Span.has_remote_parent)
}

inline const Span* Span::internal_default_instance() {
  return &Span_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Trace::kTraceIdFieldNumber;
const int Trace::kSpansFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Trace::Trace()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2ftracing_2ftrace_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.tracing.v1.Trace)
}

void Trace::InitAsDefaultInstance() {
  trace_id_ = const_cast< ::google::tracing::v1::TraceId*>(
      ::google::tracing::v1::TraceId::internal_default_instance());
}

Trace::Trace(const Trace& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.tracing.v1.Trace)
}

void Trace::SharedCtor() {
  trace_id_ = NULL;
  _cached_size_ = 0;
}

Trace::~Trace() {
  // @@protoc_insertion_point(destructor:google.tracing.v1.Trace)
  SharedDtor();
}

void Trace::SharedDtor() {
  if (this != &Trace_default_instance_.get()) {
    delete trace_id_;
  }
}

void Trace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Trace_descriptor_;
}

const Trace& Trace::default_instance() {
  protobuf_InitDefaults_google_2ftracing_2ftrace_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Trace> Trace_default_instance_;

Trace* Trace::New(::google::protobuf::Arena* arena) const {
  Trace* n = new Trace;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Trace::Clear() {
// @@protoc_insertion_point(message_clear_start:google.tracing.v1.Trace)
  if (GetArenaNoVirtual() == NULL && trace_id_ != NULL) delete trace_id_;
  trace_id_ = NULL;
  spans_.Clear();
}

bool Trace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.tracing.v1.Trace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.tracing.v1.TraceId trace_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trace_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_spans;
        break;
      }

      // repeated .google.tracing.v1.Span spans = 2;
      case 2: {
        if (tag == 18) {
         parse_spans:
          DO_(input->IncrementRecursionDepth());
         parse_loop_spans:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_spans()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_spans;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.tracing.v1.Trace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.tracing.v1.Trace)
  return false;
#undef DO_
}

void Trace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.tracing.v1.Trace)
  // optional .google.tracing.v1.TraceId trace_id = 1;
  if (this->has_trace_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->trace_id_, output);
  }

  // repeated .google.tracing.v1.Span spans = 2;
  for (unsigned int i = 0, n = this->spans_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->spans(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.tracing.v1.Trace)
}

::google::protobuf::uint8* Trace::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.tracing.v1.Trace)
  // optional .google.tracing.v1.TraceId trace_id = 1;
  if (this->has_trace_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->trace_id_, false, target);
  }

  // repeated .google.tracing.v1.Span spans = 2;
  for (unsigned int i = 0, n = this->spans_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->spans(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.tracing.v1.Trace)
  return target;
}

size_t Trace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.tracing.v1.Trace)
  size_t total_size = 0;

  // optional .google.tracing.v1.TraceId trace_id = 1;
  if (this->has_trace_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->trace_id_);
  }

  // repeated .google.tracing.v1.Span spans = 2;
  {
    unsigned int count = this->spans_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spans(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trace::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.tracing.v1.Trace)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Trace* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Trace>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.tracing.v1.Trace)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.tracing.v1.Trace)
    UnsafeMergeFrom(*source);
  }
}

void Trace::MergeFrom(const Trace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.tracing.v1.Trace)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Trace::UnsafeMergeFrom(const Trace& from) {
  GOOGLE_DCHECK(&from != this);
  spans_.MergeFrom(from.spans_);
  if (from.has_trace_id()) {
    mutable_trace_id()->::google::tracing::v1::TraceId::MergeFrom(from.trace_id());
  }
}

void Trace::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.tracing.v1.Trace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trace::CopyFrom(const Trace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.tracing.v1.Trace)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Trace::IsInitialized() const {

  return true;
}

void Trace::Swap(Trace* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Trace::InternalSwap(Trace* other) {
  std::swap(trace_id_, other->trace_id_);
  spans_.UnsafeArenaSwap(&other->spans_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Trace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Trace_descriptor_;
  metadata.reflection = Trace_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Trace

// optional .google.tracing.v1.TraceId trace_id = 1;
bool Trace::has_trace_id() const {
  return this != internal_default_instance() && trace_id_ != NULL;
}
void Trace::clear_trace_id() {
  if (GetArenaNoVirtual() == NULL && trace_id_ != NULL) delete trace_id_;
  trace_id_ = NULL;
}
const ::google::tracing::v1::TraceId& Trace::trace_id() const {
  // @@protoc_insertion_point(field_get:google.tracing.v1.Trace.trace_id)
  return trace_id_ != NULL ? *trace_id_
                         : *::google::tracing::v1::TraceId::internal_default_instance();
}
::google::tracing::v1::TraceId* Trace::mutable_trace_id() {
  
  if (trace_id_ == NULL) {
    trace_id_ = new ::google::tracing::v1::TraceId;
  }
  // @@protoc_insertion_point(field_mutable:google.tracing.v1.Trace.trace_id)
  return trace_id_;
}
::google::tracing::v1::TraceId* Trace::release_trace_id() {
  // @@protoc_insertion_point(field_release:google.tracing.v1.Trace.trace_id)
  
  ::google::tracing::v1::TraceId* temp = trace_id_;
  trace_id_ = NULL;
  return temp;
}
void Trace::set_allocated_trace_id(::google::tracing::v1::TraceId* trace_id) {
  delete trace_id_;
  trace_id_ = trace_id;
  if (trace_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.tracing.v1.Trace.trace_id)
}

// repeated .google.tracing.v1.Span spans = 2;
int Trace::spans_size() const {
  return spans_.size();
}
void Trace::clear_spans() {
  spans_.Clear();
}
const ::google::tracing::v1::Span& Trace::spans(int index) const {
  // @@protoc_insertion_point(field_get:google.tracing.v1.Trace.spans)
  return spans_.Get(index);
}
::google::tracing::v1::Span* Trace::mutable_spans(int index) {
  // @@protoc_insertion_point(field_mutable:google.tracing.v1.Trace.spans)
  return spans_.Mutable(index);
}
::google::tracing::v1::Span* Trace::add_spans() {
  // @@protoc_insertion_point(field_add:google.tracing.v1.Trace.spans)
  return spans_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::tracing::v1::Span >*
Trace::mutable_spans() {
  // @@protoc_insertion_point(field_mutable_list:google.tracing.v1.Trace.spans)
  return &spans_;
}
const ::google::protobuf::RepeatedPtrField< ::google::tracing::v1::Span >&
Trace::spans() const {
  // @@protoc_insertion_point(field_list:google.tracing.v1.Trace.spans)
  return spans_;
}

inline const Trace* Trace::internal_default_instance() {
  return &Trace_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace tracing
}  // namespace google

// @@protoc_insertion_point(global_scope)
