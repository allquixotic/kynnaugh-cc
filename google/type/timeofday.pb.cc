// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/type/timeofday.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/type/timeofday.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace type {

namespace {

const ::google::protobuf::Descriptor* TimeOfDay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeOfDay_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_google_2ftype_2ftimeofday_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_google_2ftype_2ftimeofday_2eproto() {
  protobuf_AddDesc_google_2ftype_2ftimeofday_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "google/type/timeofday.proto");
  GOOGLE_CHECK(file != NULL);
  TimeOfDay_descriptor_ = file->message_type(0);
  static const int TimeOfDay_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeOfDay, hours_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeOfDay, minutes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeOfDay, seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeOfDay, nanos_),
  };
  TimeOfDay_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TimeOfDay_descriptor_,
      TimeOfDay::internal_default_instance(),
      TimeOfDay_offsets_,
      -1,
      -1,
      -1,
      sizeof(TimeOfDay),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeOfDay, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_google_2ftype_2ftimeofday_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TimeOfDay_descriptor_, TimeOfDay::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_google_2ftype_2ftimeofday_2eproto() {
  TimeOfDay_default_instance_.Shutdown();
  delete TimeOfDay_reflection_;
}

void protobuf_InitDefaults_google_2ftype_2ftimeofday_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  TimeOfDay_default_instance_.DefaultConstruct();
  TimeOfDay_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_google_2ftype_2ftimeofday_2eproto_once_);
void protobuf_InitDefaults_google_2ftype_2ftimeofday_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_google_2ftype_2ftimeofday_2eproto_once_,
                 &protobuf_InitDefaults_google_2ftype_2ftimeofday_2eproto_impl);
}
void protobuf_AddDesc_google_2ftype_2ftimeofday_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_google_2ftype_2ftimeofday_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033google/type/timeofday.proto\022\013google.ty"
    "pe\"K\n\tTimeOfDay\022\r\n\005hours\030\001 \001(\005\022\017\n\007minute"
    "s\030\002 \001(\005\022\017\n\007seconds\030\003 \001(\005\022\r\n\005nanos\030\004 \001(\005B"
    "i\n\017com.google.typeB\016TimeOfDayProtoP\001Z>go"
    "ogle.golang.org/genproto/googleapis/type"
    "/timeofday;timeofday\242\002\003GTPb\006proto3", 234);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/type/timeofday.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_google_2ftype_2ftimeofday_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_google_2ftype_2ftimeofday_2eproto_once_);
void protobuf_AddDesc_google_2ftype_2ftimeofday_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_google_2ftype_2ftimeofday_2eproto_once_,
                 &protobuf_AddDesc_google_2ftype_2ftimeofday_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_google_2ftype_2ftimeofday_2eproto {
  StaticDescriptorInitializer_google_2ftype_2ftimeofday_2eproto() {
    protobuf_AddDesc_google_2ftype_2ftimeofday_2eproto();
  }
} static_descriptor_initializer_google_2ftype_2ftimeofday_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeOfDay::kHoursFieldNumber;
const int TimeOfDay::kMinutesFieldNumber;
const int TimeOfDay::kSecondsFieldNumber;
const int TimeOfDay::kNanosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeOfDay::TimeOfDay()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2ftype_2ftimeofday_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.type.TimeOfDay)
}

void TimeOfDay::InitAsDefaultInstance() {
}

TimeOfDay::TimeOfDay(const TimeOfDay& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.type.TimeOfDay)
}

void TimeOfDay::SharedCtor() {
  ::memset(&hours_, 0, reinterpret_cast<char*>(&nanos_) -
    reinterpret_cast<char*>(&hours_) + sizeof(nanos_));
  _cached_size_ = 0;
}

TimeOfDay::~TimeOfDay() {
  // @@protoc_insertion_point(destructor:google.type.TimeOfDay)
  SharedDtor();
}

void TimeOfDay::SharedDtor() {
}

void TimeOfDay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeOfDay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeOfDay_descriptor_;
}

const TimeOfDay& TimeOfDay::default_instance() {
  protobuf_InitDefaults_google_2ftype_2ftimeofday_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TimeOfDay> TimeOfDay_default_instance_;

TimeOfDay* TimeOfDay::New(::google::protobuf::Arena* arena) const {
  TimeOfDay* n = new TimeOfDay;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimeOfDay::Clear() {
// @@protoc_insertion_point(message_clear_start:google.type.TimeOfDay)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TimeOfDay, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TimeOfDay*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(hours_, nanos_);

#undef ZR_HELPER_
#undef ZR_

}

bool TimeOfDay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.type.TimeOfDay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 hours = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hours_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_minutes;
        break;
      }

      // optional int32 minutes = 2;
      case 2: {
        if (tag == 16) {
         parse_minutes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minutes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_seconds;
        break;
      }

      // optional int32 seconds = 3;
      case 3: {
        if (tag == 24) {
         parse_seconds:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seconds_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_nanos;
        break;
      }

      // optional int32 nanos = 4;
      case 4: {
        if (tag == 32) {
         parse_nanos:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nanos_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.type.TimeOfDay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.type.TimeOfDay)
  return false;
#undef DO_
}

void TimeOfDay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.type.TimeOfDay)
  // optional int32 hours = 1;
  if (this->hours() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hours(), output);
  }

  // optional int32 minutes = 2;
  if (this->minutes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->minutes(), output);
  }

  // optional int32 seconds = 3;
  if (this->seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seconds(), output);
  }

  // optional int32 nanos = 4;
  if (this->nanos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nanos(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.type.TimeOfDay)
}

::google::protobuf::uint8* TimeOfDay::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.type.TimeOfDay)
  // optional int32 hours = 1;
  if (this->hours() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hours(), target);
  }

  // optional int32 minutes = 2;
  if (this->minutes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->minutes(), target);
  }

  // optional int32 seconds = 3;
  if (this->seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seconds(), target);
  }

  // optional int32 nanos = 4;
  if (this->nanos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nanos(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.type.TimeOfDay)
  return target;
}

size_t TimeOfDay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.type.TimeOfDay)
  size_t total_size = 0;

  // optional int32 hours = 1;
  if (this->hours() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hours());
  }

  // optional int32 minutes = 2;
  if (this->minutes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->minutes());
  }

  // optional int32 seconds = 3;
  if (this->seconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seconds());
  }

  // optional int32 nanos = 4;
  if (this->nanos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nanos());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeOfDay::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.type.TimeOfDay)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TimeOfDay* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeOfDay>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.type.TimeOfDay)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.type.TimeOfDay)
    UnsafeMergeFrom(*source);
  }
}

void TimeOfDay::MergeFrom(const TimeOfDay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.type.TimeOfDay)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TimeOfDay::UnsafeMergeFrom(const TimeOfDay& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.hours() != 0) {
    set_hours(from.hours());
  }
  if (from.minutes() != 0) {
    set_minutes(from.minutes());
  }
  if (from.seconds() != 0) {
    set_seconds(from.seconds());
  }
  if (from.nanos() != 0) {
    set_nanos(from.nanos());
  }
}

void TimeOfDay::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.type.TimeOfDay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeOfDay::CopyFrom(const TimeOfDay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.type.TimeOfDay)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TimeOfDay::IsInitialized() const {

  return true;
}

void TimeOfDay::Swap(TimeOfDay* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeOfDay::InternalSwap(TimeOfDay* other) {
  std::swap(hours_, other->hours_);
  std::swap(minutes_, other->minutes_);
  std::swap(seconds_, other->seconds_);
  std::swap(nanos_, other->nanos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimeOfDay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeOfDay_descriptor_;
  metadata.reflection = TimeOfDay_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimeOfDay

// optional int32 hours = 1;
void TimeOfDay::clear_hours() {
  hours_ = 0;
}
::google::protobuf::int32 TimeOfDay::hours() const {
  // @@protoc_insertion_point(field_get:google.type.TimeOfDay.hours)
  return hours_;
}
void TimeOfDay::set_hours(::google::protobuf::int32 value) {
  
  hours_ = value;
  // @@protoc_insertion_point(field_set:google.type.TimeOfDay.hours)
}

// optional int32 minutes = 2;
void TimeOfDay::clear_minutes() {
  minutes_ = 0;
}
::google::protobuf::int32 TimeOfDay::minutes() const {
  // @@protoc_insertion_point(field_get:google.type.TimeOfDay.minutes)
  return minutes_;
}
void TimeOfDay::set_minutes(::google::protobuf::int32 value) {
  
  minutes_ = value;
  // @@protoc_insertion_point(field_set:google.type.TimeOfDay.minutes)
}

// optional int32 seconds = 3;
void TimeOfDay::clear_seconds() {
  seconds_ = 0;
}
::google::protobuf::int32 TimeOfDay::seconds() const {
  // @@protoc_insertion_point(field_get:google.type.TimeOfDay.seconds)
  return seconds_;
}
void TimeOfDay::set_seconds(::google::protobuf::int32 value) {
  
  seconds_ = value;
  // @@protoc_insertion_point(field_set:google.type.TimeOfDay.seconds)
}

// optional int32 nanos = 4;
void TimeOfDay::clear_nanos() {
  nanos_ = 0;
}
::google::protobuf::int32 TimeOfDay::nanos() const {
  // @@protoc_insertion_point(field_get:google.type.TimeOfDay.nanos)
  return nanos_;
}
void TimeOfDay::set_nanos(::google::protobuf::int32 value) {
  
  nanos_ = value;
  // @@protoc_insertion_point(field_set:google.type.TimeOfDay.nanos)
}

inline const TimeOfDay* TimeOfDay::internal_default_instance() {
  return &TimeOfDay_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace type
}  // namespace google

// @@protoc_insertion_point(global_scope)
