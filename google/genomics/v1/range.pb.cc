// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/genomics/v1/range.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/genomics/v1/range.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace genomics {
namespace v1 {

namespace {

const ::google::protobuf::Descriptor* Range_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Range_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_google_2fgenomics_2fv1_2frange_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_google_2fgenomics_2fv1_2frange_2eproto() {
  protobuf_AddDesc_google_2fgenomics_2fv1_2frange_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "google/genomics/v1/range.proto");
  GOOGLE_CHECK(file != NULL);
  Range_descriptor_ = file->message_type(0);
  static const int Range_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, reference_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, end_),
  };
  Range_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Range_descriptor_,
      Range::internal_default_instance(),
      Range_offsets_,
      -1,
      -1,
      -1,
      sizeof(Range),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_google_2fgenomics_2fv1_2frange_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Range_descriptor_, Range::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_google_2fgenomics_2fv1_2frange_2eproto() {
  Range_default_instance_.Shutdown();
  delete Range_reflection_;
}

void protobuf_InitDefaults_google_2fgenomics_2fv1_2frange_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::api::protobuf_InitDefaults_google_2fapi_2fannotations_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  Range_default_instance_.DefaultConstruct();
  Range_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_google_2fgenomics_2fv1_2frange_2eproto_once_);
void protobuf_InitDefaults_google_2fgenomics_2fv1_2frange_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_google_2fgenomics_2fv1_2frange_2eproto_once_,
                 &protobuf_InitDefaults_google_2fgenomics_2fv1_2frange_2eproto_impl);
}
void protobuf_AddDesc_google_2fgenomics_2fv1_2frange_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_google_2fgenomics_2fv1_2frange_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036google/genomics/v1/range.proto\022\022google"
    ".genomics.v1\032\034google/api/annotations.pro"
    "to\";\n\005Range\022\026\n\016reference_name\030\001 \001(\t\022\r\n\005s"
    "tart\030\002 \001(\003\022\013\n\003end\030\003 \001(\003Be\n\026com.google.ge"
    "nomics.v1B\nRangeProtoP\001Z:google.golang.o"
    "rg/genproto/googleapis/genomics/v1;genom"
    "ics\370\001\001b\006proto3", 254);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/genomics/v1/range.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_AddDesc_google_2fapi_2fannotations_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_google_2fgenomics_2fv1_2frange_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_google_2fgenomics_2fv1_2frange_2eproto_once_);
void protobuf_AddDesc_google_2fgenomics_2fv1_2frange_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_google_2fgenomics_2fv1_2frange_2eproto_once_,
                 &protobuf_AddDesc_google_2fgenomics_2fv1_2frange_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_google_2fgenomics_2fv1_2frange_2eproto {
  StaticDescriptorInitializer_google_2fgenomics_2fv1_2frange_2eproto() {
    protobuf_AddDesc_google_2fgenomics_2fv1_2frange_2eproto();
  }
} static_descriptor_initializer_google_2fgenomics_2fv1_2frange_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Range::kReferenceNameFieldNumber;
const int Range::kStartFieldNumber;
const int Range::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Range::Range()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2frange_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.Range)
}
Range::Range(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2frange_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.Range)
}

void Range::InitAsDefaultInstance() {
}

Range::Range(const Range& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.Range)
}

void Range::SharedCtor() {
  reference_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_) + sizeof(end_));
  _cached_size_ = 0;
}

Range::~Range() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.Range)
  SharedDtor();
}

void Range::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  reference_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void Range::ArenaDtor(void* object) {
  Range* _this = reinterpret_cast< Range* >(object);
  (void)_this;
}
void Range::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Range::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Range::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Range_descriptor_;
}

const Range& Range::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2frange_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Range> Range_default_instance_;

Range* Range::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Range>(arena);
}

void Range::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.Range)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Range, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Range*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(start_, end_);
  reference_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef ZR_HELPER_
#undef ZR_

}

bool Range::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.Range)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string reference_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_name().data(), this->reference_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Range.reference_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start;
        break;
      }

      // optional int64 start = 2;
      case 2: {
        if (tag == 16) {
         parse_start:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_end;
        break;
      }

      // optional int64 end = 3;
      case 3: {
        if (tag == 24) {
         parse_end:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.Range)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.Range)
  return false;
#undef DO_
}

void Range::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.Range)
  // optional string reference_name = 1;
  if (this->reference_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_name().data(), this->reference_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Range.reference_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reference_name(), output);
  }

  // optional int64 start = 2;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->start(), output);
  }

  // optional int64 end = 3;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->end(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.Range)
}

::google::protobuf::uint8* Range::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.Range)
  // optional string reference_name = 1;
  if (this->reference_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_name().data(), this->reference_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Range.reference_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reference_name(), target);
  }

  // optional int64 start = 2;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->start(), target);
  }

  // optional int64 end = 3;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->end(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.Range)
  return target;
}

size_t Range::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.Range)
  size_t total_size = 0;

  // optional string reference_name = 1;
  if (this->reference_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference_name());
  }

  // optional int64 start = 2;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start());
  }

  // optional int64 end = 3;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Range::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.Range)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Range* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Range>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.Range)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.Range)
    UnsafeMergeFrom(*source);
  }
}

void Range::MergeFrom(const Range& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.Range)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Range::UnsafeMergeFrom(const Range& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.reference_name().size() > 0) {
    set_reference_name(from.reference_name());
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
}

void Range::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Range::CopyFrom(const Range& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.Range)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Range::IsInitialized() const {

  return true;
}

void Range::Swap(Range* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Range temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void Range::UnsafeArenaSwap(Range* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Range::InternalSwap(Range* other) {
  reference_name_.Swap(&other->reference_name_);
  std::swap(start_, other->start_);
  std::swap(end_, other->end_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Range::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Range_descriptor_;
  metadata.reflection = Range_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Range

// optional string reference_name = 1;
void Range::clear_reference_name() {
  reference_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Range::reference_name() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Range.reference_name)
  return reference_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Range::set_reference_name(const ::std::string& value) {
  
  reference_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.Range.reference_name)
}
void Range::set_reference_name(const char* value) {
  
  reference_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.Range.reference_name)
}
void Range::set_reference_name(const char* value,
    size_t size) {
  
  reference_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.Range.reference_name)
}
::std::string* Range::mutable_reference_name() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Range.reference_name)
  return reference_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Range::release_reference_name() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.Range.reference_name)
  
  return reference_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Range::unsafe_arena_release_reference_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.Range.reference_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return reference_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Range::set_allocated_reference_name(::std::string* reference_name) {
  if (reference_name != NULL) {
    
  } else {
    
  }
  reference_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.Range.reference_name)
}
void Range::unsafe_arena_set_allocated_reference_name(
    ::std::string* reference_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reference_name != NULL) {
    
  } else {
    
  }
  reference_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reference_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.Range.reference_name)
}

// optional int64 start = 2;
void Range::clear_start() {
  start_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Range::start() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Range.start)
  return start_;
}
void Range::set_start(::google::protobuf::int64 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.Range.start)
}

// optional int64 end = 3;
void Range::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Range::end() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Range.end)
  return end_;
}
void Range::set_end(::google::protobuf::int64 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.Range.end)
}

inline const Range* Range::internal_default_instance() {
  return &Range_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace genomics
}  // namespace google

// @@protoc_insertion_point(global_scope)
