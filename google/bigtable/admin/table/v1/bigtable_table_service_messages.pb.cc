// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/admin/table/v1/bigtable_table_service_messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/bigtable/admin/table/v1/bigtable_table_service_messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace bigtable {
namespace admin {
namespace table {
namespace v1 {

namespace {

const ::google::protobuf::Descriptor* CreateTableRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateTableRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListTablesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListTablesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListTablesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListTablesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTableRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTableRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteTableRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteTableRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RenameTableRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RenameTableRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateColumnFamilyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateColumnFamilyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteColumnFamilyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteColumnFamilyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BulkDeleteRowsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BulkDeleteRowsRequest_reflection_ = NULL;
struct BulkDeleteRowsRequestOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr row_key_prefix_;
  bool delete_all_data_from_table_;
}* BulkDeleteRowsRequest_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto() {
  protobuf_AddDesc_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "google/bigtable/admin/table/v1/bigtable_table_service_messages.proto");
  GOOGLE_CHECK(file != NULL);
  CreateTableRequest_descriptor_ = file->message_type(0);
  static const int CreateTableRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableRequest, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableRequest, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableRequest, initial_split_keys_),
  };
  CreateTableRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateTableRequest_descriptor_,
      CreateTableRequest::internal_default_instance(),
      CreateTableRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateTableRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableRequest, _internal_metadata_));
  ListTablesRequest_descriptor_ = file->message_type(1);
  static const int ListTablesRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTablesRequest, name_),
  };
  ListTablesRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListTablesRequest_descriptor_,
      ListTablesRequest::internal_default_instance(),
      ListTablesRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListTablesRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTablesRequest, _internal_metadata_));
  ListTablesResponse_descriptor_ = file->message_type(2);
  static const int ListTablesResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTablesResponse, tables_),
  };
  ListTablesResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListTablesResponse_descriptor_,
      ListTablesResponse::internal_default_instance(),
      ListTablesResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListTablesResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTablesResponse, _internal_metadata_));
  GetTableRequest_descriptor_ = file->message_type(3);
  static const int GetTableRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableRequest, name_),
  };
  GetTableRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetTableRequest_descriptor_,
      GetTableRequest::internal_default_instance(),
      GetTableRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetTableRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableRequest, _internal_metadata_));
  DeleteTableRequest_descriptor_ = file->message_type(4);
  static const int DeleteTableRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTableRequest, name_),
  };
  DeleteTableRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeleteTableRequest_descriptor_,
      DeleteTableRequest::internal_default_instance(),
      DeleteTableRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeleteTableRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTableRequest, _internal_metadata_));
  RenameTableRequest_descriptor_ = file->message_type(5);
  static const int RenameTableRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameTableRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameTableRequest, new_id_),
  };
  RenameTableRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RenameTableRequest_descriptor_,
      RenameTableRequest::internal_default_instance(),
      RenameTableRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(RenameTableRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameTableRequest, _internal_metadata_));
  CreateColumnFamilyRequest_descriptor_ = file->message_type(6);
  static const int CreateColumnFamilyRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateColumnFamilyRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateColumnFamilyRequest, column_family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateColumnFamilyRequest, column_family_),
  };
  CreateColumnFamilyRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateColumnFamilyRequest_descriptor_,
      CreateColumnFamilyRequest::internal_default_instance(),
      CreateColumnFamilyRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateColumnFamilyRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateColumnFamilyRequest, _internal_metadata_));
  DeleteColumnFamilyRequest_descriptor_ = file->message_type(7);
  static const int DeleteColumnFamilyRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteColumnFamilyRequest, name_),
  };
  DeleteColumnFamilyRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeleteColumnFamilyRequest_descriptor_,
      DeleteColumnFamilyRequest::internal_default_instance(),
      DeleteColumnFamilyRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeleteColumnFamilyRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteColumnFamilyRequest, _internal_metadata_));
  BulkDeleteRowsRequest_descriptor_ = file->message_type(8);
  static const int BulkDeleteRowsRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulkDeleteRowsRequest, table_name_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(BulkDeleteRowsRequest_default_oneof_instance_, row_key_prefix_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(BulkDeleteRowsRequest_default_oneof_instance_, delete_all_data_from_table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulkDeleteRowsRequest, target_),
  };
  BulkDeleteRowsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BulkDeleteRowsRequest_descriptor_,
      BulkDeleteRowsRequest::internal_default_instance(),
      BulkDeleteRowsRequest_offsets_,
      -1,
      -1,
      -1,
      BulkDeleteRowsRequest_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulkDeleteRowsRequest, _oneof_case_[0]),
      sizeof(BulkDeleteRowsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulkDeleteRowsRequest, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateTableRequest_descriptor_, CreateTableRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListTablesRequest_descriptor_, ListTablesRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListTablesResponse_descriptor_, ListTablesResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetTableRequest_descriptor_, GetTableRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeleteTableRequest_descriptor_, DeleteTableRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RenameTableRequest_descriptor_, RenameTableRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateColumnFamilyRequest_descriptor_, CreateColumnFamilyRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeleteColumnFamilyRequest_descriptor_, DeleteColumnFamilyRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BulkDeleteRowsRequest_descriptor_, BulkDeleteRowsRequest::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto() {
  CreateTableRequest_default_instance_.Shutdown();
  delete CreateTableRequest_reflection_;
  ListTablesRequest_default_instance_.Shutdown();
  delete ListTablesRequest_reflection_;
  ListTablesResponse_default_instance_.Shutdown();
  delete ListTablesResponse_reflection_;
  GetTableRequest_default_instance_.Shutdown();
  delete GetTableRequest_reflection_;
  DeleteTableRequest_default_instance_.Shutdown();
  delete DeleteTableRequest_reflection_;
  RenameTableRequest_default_instance_.Shutdown();
  delete RenameTableRequest_reflection_;
  CreateColumnFamilyRequest_default_instance_.Shutdown();
  delete CreateColumnFamilyRequest_reflection_;
  DeleteColumnFamilyRequest_default_instance_.Shutdown();
  delete DeleteColumnFamilyRequest_reflection_;
  BulkDeleteRowsRequest_default_instance_.Shutdown();
  delete BulkDeleteRowsRequest_default_oneof_instance_;
  delete BulkDeleteRowsRequest_reflection_;
}

void protobuf_InitDefaults_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::bigtable::admin::table::v1::protobuf_InitDefaults_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  CreateTableRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ListTablesRequest_default_instance_.DefaultConstruct();
  ListTablesResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  GetTableRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  DeleteTableRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  RenameTableRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CreateColumnFamilyRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  DeleteColumnFamilyRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  BulkDeleteRowsRequest_default_instance_.DefaultConstruct();
  BulkDeleteRowsRequest_default_oneof_instance_ = new BulkDeleteRowsRequestOneofInstance();
  CreateTableRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  ListTablesRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  ListTablesResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  GetTableRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  DeleteTableRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  RenameTableRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  CreateColumnFamilyRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  DeleteColumnFamilyRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  BulkDeleteRowsRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto_once_);
void protobuf_InitDefaults_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto_once_,
                 &protobuf_InitDefaults_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto_impl);
}
void protobuf_AddDesc_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\nDgoogle/bigtable/admin/table/v1/bigtabl"
    "e_table_service_messages.proto\022\036google.b"
    "igtable.admin.table.v1\0328google/bigtable/"
    "admin/table/v1/bigtable_table_data.proto"
    "\"\206\001\n\022CreateTableRequest\022\014\n\004name\030\001 \001(\t\022\020\n"
    "\010table_id\030\002 \001(\t\0224\n\005table\030\003 \001(\0132%.google."
    "bigtable.admin.table.v1.Table\022\032\n\022initial"
    "_split_keys\030\004 \003(\t\"!\n\021ListTablesRequest\022\014"
    "\n\004name\030\001 \001(\t\"K\n\022ListTablesResponse\0225\n\006ta"
    "bles\030\001 \003(\0132%.google.bigtable.admin.table"
    ".v1.Table\"\037\n\017GetTableRequest\022\014\n\004name\030\001 \001"
    "(\t\"\"\n\022DeleteTableRequest\022\014\n\004name\030\001 \001(\t\"2"
    "\n\022RenameTableRequest\022\014\n\004name\030\001 \001(\t\022\016\n\006ne"
    "w_id\030\002 \001(\t\"\210\001\n\031CreateColumnFamilyRequest"
    "\022\014\n\004name\030\001 \001(\t\022\030\n\020column_family_id\030\002 \001(\t"
    "\022C\n\rcolumn_family\030\003 \001(\0132,.google.bigtabl"
    "e.admin.table.v1.ColumnFamily\")\n\031DeleteC"
    "olumnFamilyRequest\022\014\n\004name\030\001 \001(\t\"u\n\025Bulk"
    "DeleteRowsRequest\022\022\n\ntable_name\030\001 \001(\t\022\030\n"
    "\016row_key_prefix\030\002 \001(\014H\000\022$\n\032delete_all_da"
    "ta_from_table\030\003 \001(\010H\000B\010\n\006targetB\216\001\n\"com."
    "google.bigtable.admin.table.v1B!Bigtable"
    "TableServiceMessagesProtoP\001ZCgoogle.gola"
    "ng.org/genproto/googleapis/bigtable/admi"
    "n/table/v1;tableb\006proto3", 984);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/bigtable/admin/table/v1/bigtable_table_service_messages.proto", &protobuf_RegisterTypes);
  ::google::bigtable::admin::table::v1::protobuf_AddDesc_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto_once_);
void protobuf_AddDesc_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto_once_,
                 &protobuf_AddDesc_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto {
  StaticDescriptorInitializer_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto() {
    protobuf_AddDesc_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto();
  }
} static_descriptor_initializer_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateTableRequest::kNameFieldNumber;
const int CreateTableRequest::kTableIdFieldNumber;
const int CreateTableRequest::kTableFieldNumber;
const int CreateTableRequest::kInitialSplitKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateTableRequest::CreateTableRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.admin.table.v1.CreateTableRequest)
}

void CreateTableRequest::InitAsDefaultInstance() {
  table_ = const_cast< ::google::bigtable::admin::table::v1::Table*>(
      ::google::bigtable::admin::table::v1::Table::internal_default_instance());
}

CreateTableRequest::CreateTableRequest(const CreateTableRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.admin.table.v1.CreateTableRequest)
}

void CreateTableRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_ = NULL;
  _cached_size_ = 0;
}

CreateTableRequest::~CreateTableRequest() {
  // @@protoc_insertion_point(destructor:google.bigtable.admin.table.v1.CreateTableRequest)
  SharedDtor();
}

void CreateTableRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &CreateTableRequest_default_instance_.get()) {
    delete table_;
  }
}

void CreateTableRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateTableRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateTableRequest_descriptor_;
}

const CreateTableRequest& CreateTableRequest::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CreateTableRequest> CreateTableRequest_default_instance_;

CreateTableRequest* CreateTableRequest::New(::google::protobuf::Arena* arena) const {
  CreateTableRequest* n = new CreateTableRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.admin.table.v1.CreateTableRequest)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && table_ != NULL) delete table_;
  table_ = NULL;
  initial_split_keys_.Clear();
}

bool CreateTableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.admin.table.v1.CreateTableRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.admin.table.v1.CreateTableRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_table_id;
        break;
      }

      // optional string table_id = 2;
      case 2: {
        if (tag == 18) {
         parse_table_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_id().data(), this->table_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.admin.table.v1.CreateTableRequest.table_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_table;
        break;
      }

      // optional .google.bigtable.admin.table.v1.Table table = 3;
      case 3: {
        if (tag == 26) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_initial_split_keys;
        break;
      }

      // repeated string initial_split_keys = 4;
      case 4: {
        if (tag == 34) {
         parse_initial_split_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_initial_split_keys()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->initial_split_keys(this->initial_split_keys_size() - 1).data(),
            this->initial_split_keys(this->initial_split_keys_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.admin.table.v1.CreateTableRequest.initial_split_keys"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_initial_split_keys;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.admin.table.v1.CreateTableRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.admin.table.v1.CreateTableRequest)
  return false;
#undef DO_
}

void CreateTableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.admin.table.v1.CreateTableRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.table.v1.CreateTableRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string table_id = 2;
  if (this->table_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_id().data(), this->table_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.table.v1.CreateTableRequest.table_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->table_id(), output);
  }

  // optional .google.bigtable.admin.table.v1.Table table = 3;
  if (this->has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->table_, output);
  }

  // repeated string initial_split_keys = 4;
  for (int i = 0; i < this->initial_split_keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->initial_split_keys(i).data(), this->initial_split_keys(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.table.v1.CreateTableRequest.initial_split_keys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->initial_split_keys(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.admin.table.v1.CreateTableRequest)
}

::google::protobuf::uint8* CreateTableRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.admin.table.v1.CreateTableRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.table.v1.CreateTableRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string table_id = 2;
  if (this->table_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_id().data(), this->table_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.table.v1.CreateTableRequest.table_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table_id(), target);
  }

  // optional .google.bigtable.admin.table.v1.Table table = 3;
  if (this->has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->table_, false, target);
  }

  // repeated string initial_split_keys = 4;
  for (int i = 0; i < this->initial_split_keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->initial_split_keys(i).data(), this->initial_split_keys(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.table.v1.CreateTableRequest.initial_split_keys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->initial_split_keys(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.admin.table.v1.CreateTableRequest)
  return target;
}

size_t CreateTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.admin.table.v1.CreateTableRequest)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string table_id = 2;
  if (this->table_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_id());
  }

  // optional .google.bigtable.admin.table.v1.Table table = 3;
  if (this->has_table()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_);
  }

  // repeated string initial_split_keys = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->initial_split_keys_size());
  for (int i = 0; i < this->initial_split_keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->initial_split_keys(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateTableRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.admin.table.v1.CreateTableRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CreateTableRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateTableRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.admin.table.v1.CreateTableRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.admin.table.v1.CreateTableRequest)
    UnsafeMergeFrom(*source);
  }
}

void CreateTableRequest::MergeFrom(const CreateTableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.admin.table.v1.CreateTableRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CreateTableRequest::UnsafeMergeFrom(const CreateTableRequest& from) {
  GOOGLE_DCHECK(&from != this);
  initial_split_keys_.UnsafeMergeFrom(from.initial_split_keys_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.table_id().size() > 0) {

    table_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_id_);
  }
  if (from.has_table()) {
    mutable_table()->::google::bigtable::admin::table::v1::Table::MergeFrom(from.table());
  }
}

void CreateTableRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.admin.table.v1.CreateTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTableRequest::CopyFrom(const CreateTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.admin.table.v1.CreateTableRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CreateTableRequest::IsInitialized() const {

  return true;
}

void CreateTableRequest::Swap(CreateTableRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateTableRequest::InternalSwap(CreateTableRequest* other) {
  name_.Swap(&other->name_);
  table_id_.Swap(&other->table_id_);
  std::swap(table_, other->table_);
  initial_split_keys_.UnsafeArenaSwap(&other->initial_split_keys_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateTableRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateTableRequest_descriptor_;
  metadata.reflection = CreateTableRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateTableRequest

// optional string name = 1;
void CreateTableRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateTableRequest::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.CreateTableRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateTableRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.table.v1.CreateTableRequest.name)
}
void CreateTableRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.table.v1.CreateTableRequest.name)
}
void CreateTableRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.table.v1.CreateTableRequest.name)
}
::std::string* CreateTableRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.table.v1.CreateTableRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateTableRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.table.v1.CreateTableRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateTableRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.table.v1.CreateTableRequest.name)
}

// optional string table_id = 2;
void CreateTableRequest::clear_table_id() {
  table_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateTableRequest::table_id() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.CreateTableRequest.table_id)
  return table_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateTableRequest::set_table_id(const ::std::string& value) {
  
  table_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.table.v1.CreateTableRequest.table_id)
}
void CreateTableRequest::set_table_id(const char* value) {
  
  table_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.table.v1.CreateTableRequest.table_id)
}
void CreateTableRequest::set_table_id(const char* value, size_t size) {
  
  table_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.table.v1.CreateTableRequest.table_id)
}
::std::string* CreateTableRequest::mutable_table_id() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.table.v1.CreateTableRequest.table_id)
  return table_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateTableRequest::release_table_id() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.table.v1.CreateTableRequest.table_id)
  
  return table_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateTableRequest::set_allocated_table_id(::std::string* table_id) {
  if (table_id != NULL) {
    
  } else {
    
  }
  table_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_id);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.table.v1.CreateTableRequest.table_id)
}

// optional .google.bigtable.admin.table.v1.Table table = 3;
bool CreateTableRequest::has_table() const {
  return this != internal_default_instance() && table_ != NULL;
}
void CreateTableRequest::clear_table() {
  if (GetArenaNoVirtual() == NULL && table_ != NULL) delete table_;
  table_ = NULL;
}
const ::google::bigtable::admin::table::v1::Table& CreateTableRequest::table() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.CreateTableRequest.table)
  return table_ != NULL ? *table_
                         : *::google::bigtable::admin::table::v1::Table::internal_default_instance();
}
::google::bigtable::admin::table::v1::Table* CreateTableRequest::mutable_table() {
  
  if (table_ == NULL) {
    table_ = new ::google::bigtable::admin::table::v1::Table;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.table.v1.CreateTableRequest.table)
  return table_;
}
::google::bigtable::admin::table::v1::Table* CreateTableRequest::release_table() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.table.v1.CreateTableRequest.table)
  
  ::google::bigtable::admin::table::v1::Table* temp = table_;
  table_ = NULL;
  return temp;
}
void CreateTableRequest::set_allocated_table(::google::bigtable::admin::table::v1::Table* table) {
  delete table_;
  table_ = table;
  if (table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.table.v1.CreateTableRequest.table)
}

// repeated string initial_split_keys = 4;
int CreateTableRequest::initial_split_keys_size() const {
  return initial_split_keys_.size();
}
void CreateTableRequest::clear_initial_split_keys() {
  initial_split_keys_.Clear();
}
const ::std::string& CreateTableRequest::initial_split_keys(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.CreateTableRequest.initial_split_keys)
  return initial_split_keys_.Get(index);
}
::std::string* CreateTableRequest::mutable_initial_split_keys(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.table.v1.CreateTableRequest.initial_split_keys)
  return initial_split_keys_.Mutable(index);
}
void CreateTableRequest::set_initial_split_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.admin.table.v1.CreateTableRequest.initial_split_keys)
  initial_split_keys_.Mutable(index)->assign(value);
}
void CreateTableRequest::set_initial_split_keys(int index, const char* value) {
  initial_split_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.table.v1.CreateTableRequest.initial_split_keys)
}
void CreateTableRequest::set_initial_split_keys(int index, const char* value, size_t size) {
  initial_split_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.table.v1.CreateTableRequest.initial_split_keys)
}
::std::string* CreateTableRequest::add_initial_split_keys() {
  // @@protoc_insertion_point(field_add_mutable:google.bigtable.admin.table.v1.CreateTableRequest.initial_split_keys)
  return initial_split_keys_.Add();
}
void CreateTableRequest::add_initial_split_keys(const ::std::string& value) {
  initial_split_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.bigtable.admin.table.v1.CreateTableRequest.initial_split_keys)
}
void CreateTableRequest::add_initial_split_keys(const char* value) {
  initial_split_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.bigtable.admin.table.v1.CreateTableRequest.initial_split_keys)
}
void CreateTableRequest::add_initial_split_keys(const char* value, size_t size) {
  initial_split_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.bigtable.admin.table.v1.CreateTableRequest.initial_split_keys)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CreateTableRequest::initial_split_keys() const {
  // @@protoc_insertion_point(field_list:google.bigtable.admin.table.v1.CreateTableRequest.initial_split_keys)
  return initial_split_keys_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CreateTableRequest::mutable_initial_split_keys() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.admin.table.v1.CreateTableRequest.initial_split_keys)
  return &initial_split_keys_;
}

inline const CreateTableRequest* CreateTableRequest::internal_default_instance() {
  return &CreateTableRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListTablesRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListTablesRequest::ListTablesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.admin.table.v1.ListTablesRequest)
}

void ListTablesRequest::InitAsDefaultInstance() {
}

ListTablesRequest::ListTablesRequest(const ListTablesRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.admin.table.v1.ListTablesRequest)
}

void ListTablesRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ListTablesRequest::~ListTablesRequest() {
  // @@protoc_insertion_point(destructor:google.bigtable.admin.table.v1.ListTablesRequest)
  SharedDtor();
}

void ListTablesRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListTablesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListTablesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListTablesRequest_descriptor_;
}

const ListTablesRequest& ListTablesRequest::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ListTablesRequest> ListTablesRequest_default_instance_;

ListTablesRequest* ListTablesRequest::New(::google::protobuf::Arena* arena) const {
  ListTablesRequest* n = new ListTablesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListTablesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.admin.table.v1.ListTablesRequest)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ListTablesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.admin.table.v1.ListTablesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.admin.table.v1.ListTablesRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.admin.table.v1.ListTablesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.admin.table.v1.ListTablesRequest)
  return false;
#undef DO_
}

void ListTablesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.admin.table.v1.ListTablesRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.table.v1.ListTablesRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.admin.table.v1.ListTablesRequest)
}

::google::protobuf::uint8* ListTablesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.admin.table.v1.ListTablesRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.table.v1.ListTablesRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.admin.table.v1.ListTablesRequest)
  return target;
}

size_t ListTablesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.admin.table.v1.ListTablesRequest)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListTablesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.admin.table.v1.ListTablesRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListTablesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListTablesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.admin.table.v1.ListTablesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.admin.table.v1.ListTablesRequest)
    UnsafeMergeFrom(*source);
  }
}

void ListTablesRequest::MergeFrom(const ListTablesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.admin.table.v1.ListTablesRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ListTablesRequest::UnsafeMergeFrom(const ListTablesRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void ListTablesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.admin.table.v1.ListTablesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTablesRequest::CopyFrom(const ListTablesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.admin.table.v1.ListTablesRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ListTablesRequest::IsInitialized() const {

  return true;
}

void ListTablesRequest::Swap(ListTablesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListTablesRequest::InternalSwap(ListTablesRequest* other) {
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListTablesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListTablesRequest_descriptor_;
  metadata.reflection = ListTablesRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListTablesRequest

// optional string name = 1;
void ListTablesRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListTablesRequest::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.ListTablesRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListTablesRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.table.v1.ListTablesRequest.name)
}
void ListTablesRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.table.v1.ListTablesRequest.name)
}
void ListTablesRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.table.v1.ListTablesRequest.name)
}
::std::string* ListTablesRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.table.v1.ListTablesRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListTablesRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.table.v1.ListTablesRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListTablesRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.table.v1.ListTablesRequest.name)
}

inline const ListTablesRequest* ListTablesRequest::internal_default_instance() {
  return &ListTablesRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListTablesResponse::kTablesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListTablesResponse::ListTablesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.admin.table.v1.ListTablesResponse)
}

void ListTablesResponse::InitAsDefaultInstance() {
}

ListTablesResponse::ListTablesResponse(const ListTablesResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.admin.table.v1.ListTablesResponse)
}

void ListTablesResponse::SharedCtor() {
  _cached_size_ = 0;
}

ListTablesResponse::~ListTablesResponse() {
  // @@protoc_insertion_point(destructor:google.bigtable.admin.table.v1.ListTablesResponse)
  SharedDtor();
}

void ListTablesResponse::SharedDtor() {
}

void ListTablesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListTablesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListTablesResponse_descriptor_;
}

const ListTablesResponse& ListTablesResponse::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ListTablesResponse> ListTablesResponse_default_instance_;

ListTablesResponse* ListTablesResponse::New(::google::protobuf::Arena* arena) const {
  ListTablesResponse* n = new ListTablesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListTablesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.admin.table.v1.ListTablesResponse)
  tables_.Clear();
}

bool ListTablesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.admin.table.v1.ListTablesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.bigtable.admin.table.v1.Table tables = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_tables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tables()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_tables;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.admin.table.v1.ListTablesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.admin.table.v1.ListTablesResponse)
  return false;
#undef DO_
}

void ListTablesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.admin.table.v1.ListTablesResponse)
  // repeated .google.bigtable.admin.table.v1.Table tables = 1;
  for (unsigned int i = 0, n = this->tables_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tables(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.admin.table.v1.ListTablesResponse)
}

::google::protobuf::uint8* ListTablesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.admin.table.v1.ListTablesResponse)
  // repeated .google.bigtable.admin.table.v1.Table tables = 1;
  for (unsigned int i = 0, n = this->tables_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->tables(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.admin.table.v1.ListTablesResponse)
  return target;
}

size_t ListTablesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.admin.table.v1.ListTablesResponse)
  size_t total_size = 0;

  // repeated .google.bigtable.admin.table.v1.Table tables = 1;
  {
    unsigned int count = this->tables_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tables(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListTablesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.admin.table.v1.ListTablesResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListTablesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListTablesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.admin.table.v1.ListTablesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.admin.table.v1.ListTablesResponse)
    UnsafeMergeFrom(*source);
  }
}

void ListTablesResponse::MergeFrom(const ListTablesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.admin.table.v1.ListTablesResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ListTablesResponse::UnsafeMergeFrom(const ListTablesResponse& from) {
  GOOGLE_DCHECK(&from != this);
  tables_.MergeFrom(from.tables_);
}

void ListTablesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.admin.table.v1.ListTablesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTablesResponse::CopyFrom(const ListTablesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.admin.table.v1.ListTablesResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ListTablesResponse::IsInitialized() const {

  return true;
}

void ListTablesResponse::Swap(ListTablesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListTablesResponse::InternalSwap(ListTablesResponse* other) {
  tables_.UnsafeArenaSwap(&other->tables_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListTablesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListTablesResponse_descriptor_;
  metadata.reflection = ListTablesResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListTablesResponse

// repeated .google.bigtable.admin.table.v1.Table tables = 1;
int ListTablesResponse::tables_size() const {
  return tables_.size();
}
void ListTablesResponse::clear_tables() {
  tables_.Clear();
}
const ::google::bigtable::admin::table::v1::Table& ListTablesResponse::tables(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.ListTablesResponse.tables)
  return tables_.Get(index);
}
::google::bigtable::admin::table::v1::Table* ListTablesResponse::mutable_tables(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.table.v1.ListTablesResponse.tables)
  return tables_.Mutable(index);
}
::google::bigtable::admin::table::v1::Table* ListTablesResponse::add_tables() {
  // @@protoc_insertion_point(field_add:google.bigtable.admin.table.v1.ListTablesResponse.tables)
  return tables_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::bigtable::admin::table::v1::Table >*
ListTablesResponse::mutable_tables() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.admin.table.v1.ListTablesResponse.tables)
  return &tables_;
}
const ::google::protobuf::RepeatedPtrField< ::google::bigtable::admin::table::v1::Table >&
ListTablesResponse::tables() const {
  // @@protoc_insertion_point(field_list:google.bigtable.admin.table.v1.ListTablesResponse.tables)
  return tables_;
}

inline const ListTablesResponse* ListTablesResponse::internal_default_instance() {
  return &ListTablesResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTableRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTableRequest::GetTableRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.admin.table.v1.GetTableRequest)
}

void GetTableRequest::InitAsDefaultInstance() {
}

GetTableRequest::GetTableRequest(const GetTableRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.admin.table.v1.GetTableRequest)
}

void GetTableRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetTableRequest::~GetTableRequest() {
  // @@protoc_insertion_point(destructor:google.bigtable.admin.table.v1.GetTableRequest)
  SharedDtor();
}

void GetTableRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetTableRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTableRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTableRequest_descriptor_;
}

const GetTableRequest& GetTableRequest::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetTableRequest> GetTableRequest_default_instance_;

GetTableRequest* GetTableRequest::New(::google::protobuf::Arena* arena) const {
  GetTableRequest* n = new GetTableRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.admin.table.v1.GetTableRequest)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetTableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.admin.table.v1.GetTableRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.admin.table.v1.GetTableRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.admin.table.v1.GetTableRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.admin.table.v1.GetTableRequest)
  return false;
#undef DO_
}

void GetTableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.admin.table.v1.GetTableRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.table.v1.GetTableRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.admin.table.v1.GetTableRequest)
}

::google::protobuf::uint8* GetTableRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.admin.table.v1.GetTableRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.table.v1.GetTableRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.admin.table.v1.GetTableRequest)
  return target;
}

size_t GetTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.admin.table.v1.GetTableRequest)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTableRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.admin.table.v1.GetTableRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetTableRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTableRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.admin.table.v1.GetTableRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.admin.table.v1.GetTableRequest)
    UnsafeMergeFrom(*source);
  }
}

void GetTableRequest::MergeFrom(const GetTableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.admin.table.v1.GetTableRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetTableRequest::UnsafeMergeFrom(const GetTableRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void GetTableRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.admin.table.v1.GetTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTableRequest::CopyFrom(const GetTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.admin.table.v1.GetTableRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetTableRequest::IsInitialized() const {

  return true;
}

void GetTableRequest::Swap(GetTableRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTableRequest::InternalSwap(GetTableRequest* other) {
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetTableRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTableRequest_descriptor_;
  metadata.reflection = GetTableRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetTableRequest

// optional string name = 1;
void GetTableRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetTableRequest::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.GetTableRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetTableRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.table.v1.GetTableRequest.name)
}
void GetTableRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.table.v1.GetTableRequest.name)
}
void GetTableRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.table.v1.GetTableRequest.name)
}
::std::string* GetTableRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.table.v1.GetTableRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetTableRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.table.v1.GetTableRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetTableRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.table.v1.GetTableRequest.name)
}

inline const GetTableRequest* GetTableRequest::internal_default_instance() {
  return &GetTableRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteTableRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteTableRequest::DeleteTableRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.admin.table.v1.DeleteTableRequest)
}

void DeleteTableRequest::InitAsDefaultInstance() {
}

DeleteTableRequest::DeleteTableRequest(const DeleteTableRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.admin.table.v1.DeleteTableRequest)
}

void DeleteTableRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DeleteTableRequest::~DeleteTableRequest() {
  // @@protoc_insertion_point(destructor:google.bigtable.admin.table.v1.DeleteTableRequest)
  SharedDtor();
}

void DeleteTableRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteTableRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteTableRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteTableRequest_descriptor_;
}

const DeleteTableRequest& DeleteTableRequest::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DeleteTableRequest> DeleteTableRequest_default_instance_;

DeleteTableRequest* DeleteTableRequest::New(::google::protobuf::Arena* arena) const {
  DeleteTableRequest* n = new DeleteTableRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.admin.table.v1.DeleteTableRequest)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeleteTableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.admin.table.v1.DeleteTableRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.admin.table.v1.DeleteTableRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.admin.table.v1.DeleteTableRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.admin.table.v1.DeleteTableRequest)
  return false;
#undef DO_
}

void DeleteTableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.admin.table.v1.DeleteTableRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.table.v1.DeleteTableRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.admin.table.v1.DeleteTableRequest)
}

::google::protobuf::uint8* DeleteTableRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.admin.table.v1.DeleteTableRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.table.v1.DeleteTableRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.admin.table.v1.DeleteTableRequest)
  return target;
}

size_t DeleteTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.admin.table.v1.DeleteTableRequest)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteTableRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.admin.table.v1.DeleteTableRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DeleteTableRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteTableRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.admin.table.v1.DeleteTableRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.admin.table.v1.DeleteTableRequest)
    UnsafeMergeFrom(*source);
  }
}

void DeleteTableRequest::MergeFrom(const DeleteTableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.admin.table.v1.DeleteTableRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DeleteTableRequest::UnsafeMergeFrom(const DeleteTableRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void DeleteTableRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.admin.table.v1.DeleteTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteTableRequest::CopyFrom(const DeleteTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.admin.table.v1.DeleteTableRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DeleteTableRequest::IsInitialized() const {

  return true;
}

void DeleteTableRequest::Swap(DeleteTableRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteTableRequest::InternalSwap(DeleteTableRequest* other) {
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteTableRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteTableRequest_descriptor_;
  metadata.reflection = DeleteTableRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteTableRequest

// optional string name = 1;
void DeleteTableRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeleteTableRequest::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.DeleteTableRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteTableRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.table.v1.DeleteTableRequest.name)
}
void DeleteTableRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.table.v1.DeleteTableRequest.name)
}
void DeleteTableRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.table.v1.DeleteTableRequest.name)
}
::std::string* DeleteTableRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.table.v1.DeleteTableRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeleteTableRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.table.v1.DeleteTableRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteTableRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.table.v1.DeleteTableRequest.name)
}

inline const DeleteTableRequest* DeleteTableRequest::internal_default_instance() {
  return &DeleteTableRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RenameTableRequest::kNameFieldNumber;
const int RenameTableRequest::kNewIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RenameTableRequest::RenameTableRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.admin.table.v1.RenameTableRequest)
}

void RenameTableRequest::InitAsDefaultInstance() {
}

RenameTableRequest::RenameTableRequest(const RenameTableRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.admin.table.v1.RenameTableRequest)
}

void RenameTableRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RenameTableRequest::~RenameTableRequest() {
  // @@protoc_insertion_point(destructor:google.bigtable.admin.table.v1.RenameTableRequest)
  SharedDtor();
}

void RenameTableRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RenameTableRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RenameTableRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RenameTableRequest_descriptor_;
}

const RenameTableRequest& RenameTableRequest::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RenameTableRequest> RenameTableRequest_default_instance_;

RenameTableRequest* RenameTableRequest::New(::google::protobuf::Arena* arena) const {
  RenameTableRequest* n = new RenameTableRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RenameTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.admin.table.v1.RenameTableRequest)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RenameTableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.admin.table.v1.RenameTableRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.admin.table.v1.RenameTableRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_new_id;
        break;
      }

      // optional string new_id = 2;
      case 2: {
        if (tag == 18) {
         parse_new_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->new_id().data(), this->new_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.admin.table.v1.RenameTableRequest.new_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.admin.table.v1.RenameTableRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.admin.table.v1.RenameTableRequest)
  return false;
#undef DO_
}

void RenameTableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.admin.table.v1.RenameTableRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.table.v1.RenameTableRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string new_id = 2;
  if (this->new_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->new_id().data(), this->new_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.table.v1.RenameTableRequest.new_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->new_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.admin.table.v1.RenameTableRequest)
}

::google::protobuf::uint8* RenameTableRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.admin.table.v1.RenameTableRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.table.v1.RenameTableRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string new_id = 2;
  if (this->new_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->new_id().data(), this->new_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.table.v1.RenameTableRequest.new_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->new_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.admin.table.v1.RenameTableRequest)
  return target;
}

size_t RenameTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.admin.table.v1.RenameTableRequest)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string new_id = 2;
  if (this->new_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->new_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RenameTableRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.admin.table.v1.RenameTableRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RenameTableRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RenameTableRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.admin.table.v1.RenameTableRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.admin.table.v1.RenameTableRequest)
    UnsafeMergeFrom(*source);
  }
}

void RenameTableRequest::MergeFrom(const RenameTableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.admin.table.v1.RenameTableRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RenameTableRequest::UnsafeMergeFrom(const RenameTableRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.new_id().size() > 0) {

    new_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_id_);
  }
}

void RenameTableRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.admin.table.v1.RenameTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenameTableRequest::CopyFrom(const RenameTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.admin.table.v1.RenameTableRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RenameTableRequest::IsInitialized() const {

  return true;
}

void RenameTableRequest::Swap(RenameTableRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RenameTableRequest::InternalSwap(RenameTableRequest* other) {
  name_.Swap(&other->name_);
  new_id_.Swap(&other->new_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RenameTableRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RenameTableRequest_descriptor_;
  metadata.reflection = RenameTableRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RenameTableRequest

// optional string name = 1;
void RenameTableRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RenameTableRequest::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.RenameTableRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RenameTableRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.table.v1.RenameTableRequest.name)
}
void RenameTableRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.table.v1.RenameTableRequest.name)
}
void RenameTableRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.table.v1.RenameTableRequest.name)
}
::std::string* RenameTableRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.table.v1.RenameTableRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RenameTableRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.table.v1.RenameTableRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RenameTableRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.table.v1.RenameTableRequest.name)
}

// optional string new_id = 2;
void RenameTableRequest::clear_new_id() {
  new_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RenameTableRequest::new_id() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.RenameTableRequest.new_id)
  return new_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RenameTableRequest::set_new_id(const ::std::string& value) {
  
  new_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.table.v1.RenameTableRequest.new_id)
}
void RenameTableRequest::set_new_id(const char* value) {
  
  new_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.table.v1.RenameTableRequest.new_id)
}
void RenameTableRequest::set_new_id(const char* value, size_t size) {
  
  new_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.table.v1.RenameTableRequest.new_id)
}
::std::string* RenameTableRequest::mutable_new_id() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.table.v1.RenameTableRequest.new_id)
  return new_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RenameTableRequest::release_new_id() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.table.v1.RenameTableRequest.new_id)
  
  return new_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RenameTableRequest::set_allocated_new_id(::std::string* new_id) {
  if (new_id != NULL) {
    
  } else {
    
  }
  new_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_id);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.table.v1.RenameTableRequest.new_id)
}

inline const RenameTableRequest* RenameTableRequest::internal_default_instance() {
  return &RenameTableRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateColumnFamilyRequest::kNameFieldNumber;
const int CreateColumnFamilyRequest::kColumnFamilyIdFieldNumber;
const int CreateColumnFamilyRequest::kColumnFamilyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateColumnFamilyRequest::CreateColumnFamilyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.admin.table.v1.CreateColumnFamilyRequest)
}

void CreateColumnFamilyRequest::InitAsDefaultInstance() {
  column_family_ = const_cast< ::google::bigtable::admin::table::v1::ColumnFamily*>(
      ::google::bigtable::admin::table::v1::ColumnFamily::internal_default_instance());
}

CreateColumnFamilyRequest::CreateColumnFamilyRequest(const CreateColumnFamilyRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.admin.table.v1.CreateColumnFamilyRequest)
}

void CreateColumnFamilyRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  column_family_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  column_family_ = NULL;
  _cached_size_ = 0;
}

CreateColumnFamilyRequest::~CreateColumnFamilyRequest() {
  // @@protoc_insertion_point(destructor:google.bigtable.admin.table.v1.CreateColumnFamilyRequest)
  SharedDtor();
}

void CreateColumnFamilyRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  column_family_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &CreateColumnFamilyRequest_default_instance_.get()) {
    delete column_family_;
  }
}

void CreateColumnFamilyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateColumnFamilyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateColumnFamilyRequest_descriptor_;
}

const CreateColumnFamilyRequest& CreateColumnFamilyRequest::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CreateColumnFamilyRequest> CreateColumnFamilyRequest_default_instance_;

CreateColumnFamilyRequest* CreateColumnFamilyRequest::New(::google::protobuf::Arena* arena) const {
  CreateColumnFamilyRequest* n = new CreateColumnFamilyRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateColumnFamilyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.admin.table.v1.CreateColumnFamilyRequest)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  column_family_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && column_family_ != NULL) delete column_family_;
  column_family_ = NULL;
}

bool CreateColumnFamilyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.admin.table.v1.CreateColumnFamilyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.admin.table.v1.CreateColumnFamilyRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_column_family_id;
        break;
      }

      // optional string column_family_id = 2;
      case 2: {
        if (tag == 18) {
         parse_column_family_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_column_family_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->column_family_id().data(), this->column_family_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.admin.table.v1.CreateColumnFamilyRequest.column_family_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_column_family;
        break;
      }

      // optional .google.bigtable.admin.table.v1.ColumnFamily column_family = 3;
      case 3: {
        if (tag == 26) {
         parse_column_family:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_column_family()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.admin.table.v1.CreateColumnFamilyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.admin.table.v1.CreateColumnFamilyRequest)
  return false;
#undef DO_
}

void CreateColumnFamilyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.admin.table.v1.CreateColumnFamilyRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.table.v1.CreateColumnFamilyRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string column_family_id = 2;
  if (this->column_family_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->column_family_id().data(), this->column_family_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.table.v1.CreateColumnFamilyRequest.column_family_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->column_family_id(), output);
  }

  // optional .google.bigtable.admin.table.v1.ColumnFamily column_family = 3;
  if (this->has_column_family()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->column_family_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.admin.table.v1.CreateColumnFamilyRequest)
}

::google::protobuf::uint8* CreateColumnFamilyRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.admin.table.v1.CreateColumnFamilyRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.table.v1.CreateColumnFamilyRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string column_family_id = 2;
  if (this->column_family_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->column_family_id().data(), this->column_family_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.table.v1.CreateColumnFamilyRequest.column_family_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->column_family_id(), target);
  }

  // optional .google.bigtable.admin.table.v1.ColumnFamily column_family = 3;
  if (this->has_column_family()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->column_family_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.admin.table.v1.CreateColumnFamilyRequest)
  return target;
}

size_t CreateColumnFamilyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.admin.table.v1.CreateColumnFamilyRequest)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string column_family_id = 2;
  if (this->column_family_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->column_family_id());
  }

  // optional .google.bigtable.admin.table.v1.ColumnFamily column_family = 3;
  if (this->has_column_family()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->column_family_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateColumnFamilyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.admin.table.v1.CreateColumnFamilyRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CreateColumnFamilyRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateColumnFamilyRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.admin.table.v1.CreateColumnFamilyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.admin.table.v1.CreateColumnFamilyRequest)
    UnsafeMergeFrom(*source);
  }
}

void CreateColumnFamilyRequest::MergeFrom(const CreateColumnFamilyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.admin.table.v1.CreateColumnFamilyRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CreateColumnFamilyRequest::UnsafeMergeFrom(const CreateColumnFamilyRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.column_family_id().size() > 0) {

    column_family_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.column_family_id_);
  }
  if (from.has_column_family()) {
    mutable_column_family()->::google::bigtable::admin::table::v1::ColumnFamily::MergeFrom(from.column_family());
  }
}

void CreateColumnFamilyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.admin.table.v1.CreateColumnFamilyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateColumnFamilyRequest::CopyFrom(const CreateColumnFamilyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.admin.table.v1.CreateColumnFamilyRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CreateColumnFamilyRequest::IsInitialized() const {

  return true;
}

void CreateColumnFamilyRequest::Swap(CreateColumnFamilyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateColumnFamilyRequest::InternalSwap(CreateColumnFamilyRequest* other) {
  name_.Swap(&other->name_);
  column_family_id_.Swap(&other->column_family_id_);
  std::swap(column_family_, other->column_family_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateColumnFamilyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateColumnFamilyRequest_descriptor_;
  metadata.reflection = CreateColumnFamilyRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateColumnFamilyRequest

// optional string name = 1;
void CreateColumnFamilyRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateColumnFamilyRequest::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.CreateColumnFamilyRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateColumnFamilyRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.table.v1.CreateColumnFamilyRequest.name)
}
void CreateColumnFamilyRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.table.v1.CreateColumnFamilyRequest.name)
}
void CreateColumnFamilyRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.table.v1.CreateColumnFamilyRequest.name)
}
::std::string* CreateColumnFamilyRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.table.v1.CreateColumnFamilyRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateColumnFamilyRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.table.v1.CreateColumnFamilyRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateColumnFamilyRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.table.v1.CreateColumnFamilyRequest.name)
}

// optional string column_family_id = 2;
void CreateColumnFamilyRequest::clear_column_family_id() {
  column_family_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateColumnFamilyRequest::column_family_id() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.CreateColumnFamilyRequest.column_family_id)
  return column_family_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateColumnFamilyRequest::set_column_family_id(const ::std::string& value) {
  
  column_family_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.table.v1.CreateColumnFamilyRequest.column_family_id)
}
void CreateColumnFamilyRequest::set_column_family_id(const char* value) {
  
  column_family_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.table.v1.CreateColumnFamilyRequest.column_family_id)
}
void CreateColumnFamilyRequest::set_column_family_id(const char* value, size_t size) {
  
  column_family_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.table.v1.CreateColumnFamilyRequest.column_family_id)
}
::std::string* CreateColumnFamilyRequest::mutable_column_family_id() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.table.v1.CreateColumnFamilyRequest.column_family_id)
  return column_family_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateColumnFamilyRequest::release_column_family_id() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.table.v1.CreateColumnFamilyRequest.column_family_id)
  
  return column_family_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateColumnFamilyRequest::set_allocated_column_family_id(::std::string* column_family_id) {
  if (column_family_id != NULL) {
    
  } else {
    
  }
  column_family_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), column_family_id);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.table.v1.CreateColumnFamilyRequest.column_family_id)
}

// optional .google.bigtable.admin.table.v1.ColumnFamily column_family = 3;
bool CreateColumnFamilyRequest::has_column_family() const {
  return this != internal_default_instance() && column_family_ != NULL;
}
void CreateColumnFamilyRequest::clear_column_family() {
  if (GetArenaNoVirtual() == NULL && column_family_ != NULL) delete column_family_;
  column_family_ = NULL;
}
const ::google::bigtable::admin::table::v1::ColumnFamily& CreateColumnFamilyRequest::column_family() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.CreateColumnFamilyRequest.column_family)
  return column_family_ != NULL ? *column_family_
                         : *::google::bigtable::admin::table::v1::ColumnFamily::internal_default_instance();
}
::google::bigtable::admin::table::v1::ColumnFamily* CreateColumnFamilyRequest::mutable_column_family() {
  
  if (column_family_ == NULL) {
    column_family_ = new ::google::bigtable::admin::table::v1::ColumnFamily;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.table.v1.CreateColumnFamilyRequest.column_family)
  return column_family_;
}
::google::bigtable::admin::table::v1::ColumnFamily* CreateColumnFamilyRequest::release_column_family() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.table.v1.CreateColumnFamilyRequest.column_family)
  
  ::google::bigtable::admin::table::v1::ColumnFamily* temp = column_family_;
  column_family_ = NULL;
  return temp;
}
void CreateColumnFamilyRequest::set_allocated_column_family(::google::bigtable::admin::table::v1::ColumnFamily* column_family) {
  delete column_family_;
  column_family_ = column_family;
  if (column_family) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.table.v1.CreateColumnFamilyRequest.column_family)
}

inline const CreateColumnFamilyRequest* CreateColumnFamilyRequest::internal_default_instance() {
  return &CreateColumnFamilyRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteColumnFamilyRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteColumnFamilyRequest::DeleteColumnFamilyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.admin.table.v1.DeleteColumnFamilyRequest)
}

void DeleteColumnFamilyRequest::InitAsDefaultInstance() {
}

DeleteColumnFamilyRequest::DeleteColumnFamilyRequest(const DeleteColumnFamilyRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.admin.table.v1.DeleteColumnFamilyRequest)
}

void DeleteColumnFamilyRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DeleteColumnFamilyRequest::~DeleteColumnFamilyRequest() {
  // @@protoc_insertion_point(destructor:google.bigtable.admin.table.v1.DeleteColumnFamilyRequest)
  SharedDtor();
}

void DeleteColumnFamilyRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteColumnFamilyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteColumnFamilyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteColumnFamilyRequest_descriptor_;
}

const DeleteColumnFamilyRequest& DeleteColumnFamilyRequest::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DeleteColumnFamilyRequest> DeleteColumnFamilyRequest_default_instance_;

DeleteColumnFamilyRequest* DeleteColumnFamilyRequest::New(::google::protobuf::Arena* arena) const {
  DeleteColumnFamilyRequest* n = new DeleteColumnFamilyRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteColumnFamilyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.admin.table.v1.DeleteColumnFamilyRequest)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeleteColumnFamilyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.admin.table.v1.DeleteColumnFamilyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.admin.table.v1.DeleteColumnFamilyRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.admin.table.v1.DeleteColumnFamilyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.admin.table.v1.DeleteColumnFamilyRequest)
  return false;
#undef DO_
}

void DeleteColumnFamilyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.admin.table.v1.DeleteColumnFamilyRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.table.v1.DeleteColumnFamilyRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.admin.table.v1.DeleteColumnFamilyRequest)
}

::google::protobuf::uint8* DeleteColumnFamilyRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.admin.table.v1.DeleteColumnFamilyRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.table.v1.DeleteColumnFamilyRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.admin.table.v1.DeleteColumnFamilyRequest)
  return target;
}

size_t DeleteColumnFamilyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.admin.table.v1.DeleteColumnFamilyRequest)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteColumnFamilyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.admin.table.v1.DeleteColumnFamilyRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DeleteColumnFamilyRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteColumnFamilyRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.admin.table.v1.DeleteColumnFamilyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.admin.table.v1.DeleteColumnFamilyRequest)
    UnsafeMergeFrom(*source);
  }
}

void DeleteColumnFamilyRequest::MergeFrom(const DeleteColumnFamilyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.admin.table.v1.DeleteColumnFamilyRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DeleteColumnFamilyRequest::UnsafeMergeFrom(const DeleteColumnFamilyRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void DeleteColumnFamilyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.admin.table.v1.DeleteColumnFamilyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteColumnFamilyRequest::CopyFrom(const DeleteColumnFamilyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.admin.table.v1.DeleteColumnFamilyRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DeleteColumnFamilyRequest::IsInitialized() const {

  return true;
}

void DeleteColumnFamilyRequest::Swap(DeleteColumnFamilyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteColumnFamilyRequest::InternalSwap(DeleteColumnFamilyRequest* other) {
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteColumnFamilyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteColumnFamilyRequest_descriptor_;
  metadata.reflection = DeleteColumnFamilyRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteColumnFamilyRequest

// optional string name = 1;
void DeleteColumnFamilyRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeleteColumnFamilyRequest::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.DeleteColumnFamilyRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteColumnFamilyRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.table.v1.DeleteColumnFamilyRequest.name)
}
void DeleteColumnFamilyRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.table.v1.DeleteColumnFamilyRequest.name)
}
void DeleteColumnFamilyRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.table.v1.DeleteColumnFamilyRequest.name)
}
::std::string* DeleteColumnFamilyRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.table.v1.DeleteColumnFamilyRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeleteColumnFamilyRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.table.v1.DeleteColumnFamilyRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteColumnFamilyRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.table.v1.DeleteColumnFamilyRequest.name)
}

inline const DeleteColumnFamilyRequest* DeleteColumnFamilyRequest::internal_default_instance() {
  return &DeleteColumnFamilyRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BulkDeleteRowsRequest::kTableNameFieldNumber;
const int BulkDeleteRowsRequest::kRowKeyPrefixFieldNumber;
const int BulkDeleteRowsRequest::kDeleteAllDataFromTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BulkDeleteRowsRequest::BulkDeleteRowsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.admin.table.v1.BulkDeleteRowsRequest)
}

void BulkDeleteRowsRequest::InitAsDefaultInstance() {
  BulkDeleteRowsRequest_default_oneof_instance_->row_key_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  BulkDeleteRowsRequest_default_oneof_instance_->delete_all_data_from_table_ = false;
}

BulkDeleteRowsRequest::BulkDeleteRowsRequest(const BulkDeleteRowsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.admin.table.v1.BulkDeleteRowsRequest)
}

void BulkDeleteRowsRequest::SharedCtor() {
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_target();
  _cached_size_ = 0;
}

BulkDeleteRowsRequest::~BulkDeleteRowsRequest() {
  // @@protoc_insertion_point(destructor:google.bigtable.admin.table.v1.BulkDeleteRowsRequest)
  SharedDtor();
}

void BulkDeleteRowsRequest::SharedDtor() {
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_target()) {
    clear_target();
  }
}

void BulkDeleteRowsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BulkDeleteRowsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BulkDeleteRowsRequest_descriptor_;
}

const BulkDeleteRowsRequest& BulkDeleteRowsRequest::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BulkDeleteRowsRequest> BulkDeleteRowsRequest_default_instance_;

BulkDeleteRowsRequest* BulkDeleteRowsRequest::New(::google::protobuf::Arena* arena) const {
  BulkDeleteRowsRequest* n = new BulkDeleteRowsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BulkDeleteRowsRequest::clear_target() {
// @@protoc_insertion_point(one_of_clear_start:google.bigtable.admin.table.v1.BulkDeleteRowsRequest)
  switch (target_case()) {
    case kRowKeyPrefix: {
      target_.row_key_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kDeleteAllDataFromTable: {
      // No need to clear
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_NOT_SET;
}


void BulkDeleteRowsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.admin.table.v1.BulkDeleteRowsRequest)
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_target();
}

bool BulkDeleteRowsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.admin.table.v1.BulkDeleteRowsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.admin.table.v1.BulkDeleteRowsRequest.table_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_row_key_prefix;
        break;
      }

      // optional bytes row_key_prefix = 2;
      case 2: {
        if (tag == 18) {
         parse_row_key_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_row_key_prefix()));
        } else {
          goto handle_unusual;
        }
        goto after_delete_all_data_from_table;
        break;
      }

      // optional bool delete_all_data_from_table = 3;
      case 3: {
        if (tag == 24) {
          clear_target();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &target_.delete_all_data_from_table_)));
          set_has_delete_all_data_from_table();
        } else {
          goto handle_unusual;
        }
       after_delete_all_data_from_table:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.admin.table.v1.BulkDeleteRowsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.admin.table.v1.BulkDeleteRowsRequest)
  return false;
#undef DO_
}

void BulkDeleteRowsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.admin.table.v1.BulkDeleteRowsRequest)
  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.table.v1.BulkDeleteRowsRequest.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table_name(), output);
  }

  // optional bytes row_key_prefix = 2;
  if (has_row_key_prefix()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->row_key_prefix(), output);
  }

  // optional bool delete_all_data_from_table = 3;
  if (has_delete_all_data_from_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->delete_all_data_from_table(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.admin.table.v1.BulkDeleteRowsRequest)
}

::google::protobuf::uint8* BulkDeleteRowsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.admin.table.v1.BulkDeleteRowsRequest)
  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.table.v1.BulkDeleteRowsRequest.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // optional bytes row_key_prefix = 2;
  if (has_row_key_prefix()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->row_key_prefix(), target);
  }

  // optional bool delete_all_data_from_table = 3;
  if (has_delete_all_data_from_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->delete_all_data_from_table(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.admin.table.v1.BulkDeleteRowsRequest)
  return target;
}

size_t BulkDeleteRowsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.admin.table.v1.BulkDeleteRowsRequest)
  size_t total_size = 0;

  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  switch (target_case()) {
    // optional bytes row_key_prefix = 2;
    case kRowKeyPrefix: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->row_key_prefix());
      break;
    }
    // optional bool delete_all_data_from_table = 3;
    case kDeleteAllDataFromTable: {
      total_size += 1 + 1;
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BulkDeleteRowsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.admin.table.v1.BulkDeleteRowsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BulkDeleteRowsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BulkDeleteRowsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.admin.table.v1.BulkDeleteRowsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.admin.table.v1.BulkDeleteRowsRequest)
    UnsafeMergeFrom(*source);
  }
}

void BulkDeleteRowsRequest::MergeFrom(const BulkDeleteRowsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.admin.table.v1.BulkDeleteRowsRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BulkDeleteRowsRequest::UnsafeMergeFrom(const BulkDeleteRowsRequest& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.target_case()) {
    case kRowKeyPrefix: {
      set_row_key_prefix(from.row_key_prefix());
      break;
    }
    case kDeleteAllDataFromTable: {
      set_delete_all_data_from_table(from.delete_all_data_from_table());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
}

void BulkDeleteRowsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.admin.table.v1.BulkDeleteRowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkDeleteRowsRequest::CopyFrom(const BulkDeleteRowsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.admin.table.v1.BulkDeleteRowsRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BulkDeleteRowsRequest::IsInitialized() const {

  return true;
}

void BulkDeleteRowsRequest::Swap(BulkDeleteRowsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BulkDeleteRowsRequest::InternalSwap(BulkDeleteRowsRequest* other) {
  table_name_.Swap(&other->table_name_);
  std::swap(target_, other->target_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BulkDeleteRowsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BulkDeleteRowsRequest_descriptor_;
  metadata.reflection = BulkDeleteRowsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BulkDeleteRowsRequest

// optional string table_name = 1;
void BulkDeleteRowsRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BulkDeleteRowsRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.BulkDeleteRowsRequest.table_name)
  return table_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BulkDeleteRowsRequest::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.table.v1.BulkDeleteRowsRequest.table_name)
}
void BulkDeleteRowsRequest::set_table_name(const char* value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.table.v1.BulkDeleteRowsRequest.table_name)
}
void BulkDeleteRowsRequest::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.table.v1.BulkDeleteRowsRequest.table_name)
}
::std::string* BulkDeleteRowsRequest::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.table.v1.BulkDeleteRowsRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BulkDeleteRowsRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.table.v1.BulkDeleteRowsRequest.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BulkDeleteRowsRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.table.v1.BulkDeleteRowsRequest.table_name)
}

// optional bytes row_key_prefix = 2;
bool BulkDeleteRowsRequest::has_row_key_prefix() const {
  return target_case() == kRowKeyPrefix;
}
void BulkDeleteRowsRequest::set_has_row_key_prefix() {
  _oneof_case_[0] = kRowKeyPrefix;
}
void BulkDeleteRowsRequest::clear_row_key_prefix() {
  if (has_row_key_prefix()) {
    target_.row_key_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_target();
  }
}
const ::std::string& BulkDeleteRowsRequest::row_key_prefix() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.BulkDeleteRowsRequest.row_key_prefix)
  if (has_row_key_prefix()) {
    return target_.row_key_prefix_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void BulkDeleteRowsRequest::set_row_key_prefix(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.admin.table.v1.BulkDeleteRowsRequest.row_key_prefix)
  if (!has_row_key_prefix()) {
    clear_target();
    set_has_row_key_prefix();
    target_.row_key_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.row_key_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.table.v1.BulkDeleteRowsRequest.row_key_prefix)
}
void BulkDeleteRowsRequest::set_row_key_prefix(const char* value) {
  if (!has_row_key_prefix()) {
    clear_target();
    set_has_row_key_prefix();
    target_.row_key_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.row_key_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.table.v1.BulkDeleteRowsRequest.row_key_prefix)
}
void BulkDeleteRowsRequest::set_row_key_prefix(const void* value, size_t size) {
  if (!has_row_key_prefix()) {
    clear_target();
    set_has_row_key_prefix();
    target_.row_key_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.row_key_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.table.v1.BulkDeleteRowsRequest.row_key_prefix)
}
::std::string* BulkDeleteRowsRequest::mutable_row_key_prefix() {
  if (!has_row_key_prefix()) {
    clear_target();
    set_has_row_key_prefix();
    target_.row_key_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.table.v1.BulkDeleteRowsRequest.row_key_prefix)
  return target_.row_key_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BulkDeleteRowsRequest::release_row_key_prefix() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.table.v1.BulkDeleteRowsRequest.row_key_prefix)
  if (has_row_key_prefix()) {
    clear_has_target();
    return target_.row_key_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void BulkDeleteRowsRequest::set_allocated_row_key_prefix(::std::string* row_key_prefix) {
  if (!has_row_key_prefix()) {
    target_.row_key_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_target();
  if (row_key_prefix != NULL) {
    set_has_row_key_prefix();
    target_.row_key_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        row_key_prefix);
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.table.v1.BulkDeleteRowsRequest.row_key_prefix)
}

// optional bool delete_all_data_from_table = 3;
bool BulkDeleteRowsRequest::has_delete_all_data_from_table() const {
  return target_case() == kDeleteAllDataFromTable;
}
void BulkDeleteRowsRequest::set_has_delete_all_data_from_table() {
  _oneof_case_[0] = kDeleteAllDataFromTable;
}
void BulkDeleteRowsRequest::clear_delete_all_data_from_table() {
  if (has_delete_all_data_from_table()) {
    target_.delete_all_data_from_table_ = false;
    clear_has_target();
  }
}
bool BulkDeleteRowsRequest::delete_all_data_from_table() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.BulkDeleteRowsRequest.delete_all_data_from_table)
  if (has_delete_all_data_from_table()) {
    return target_.delete_all_data_from_table_;
  }
  return false;
}
void BulkDeleteRowsRequest::set_delete_all_data_from_table(bool value) {
  if (!has_delete_all_data_from_table()) {
    clear_target();
    set_has_delete_all_data_from_table();
  }
  target_.delete_all_data_from_table_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.admin.table.v1.BulkDeleteRowsRequest.delete_all_data_from_table)
}

bool BulkDeleteRowsRequest::has_target() const {
  return target_case() != TARGET_NOT_SET;
}
void BulkDeleteRowsRequest::clear_has_target() {
  _oneof_case_[0] = TARGET_NOT_SET;
}
BulkDeleteRowsRequest::TargetCase BulkDeleteRowsRequest::target_case() const {
  return BulkDeleteRowsRequest::TargetCase(_oneof_case_[0]);
}
inline const BulkDeleteRowsRequest* BulkDeleteRowsRequest::internal_default_instance() {
  return &BulkDeleteRowsRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace table
}  // namespace admin
}  // namespace bigtable
}  // namespace google

// @@protoc_insertion_point(global_scope)
