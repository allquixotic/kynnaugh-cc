// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: google/container/v1/cluster_service.proto
// Original file comments:
// Copyright (c) 2015, Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto__INCLUDED
#define GRPC_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto__INCLUDED

#include "google/container/v1/cluster_service.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace google {
namespace container {
namespace v1 {

// Google Container Engine Cluster Manager v1
class ClusterManager final {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Lists all clusters owned by a project in either the specified zone or all zones.
    virtual ::grpc::Status ListClusters(::grpc::ClientContext* context, const ::google::container::v1::ListClustersRequest& request, ::google::container::v1::ListClustersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::ListClustersResponse>> AsyncListClusters(::grpc::ClientContext* context, const ::google::container::v1::ListClustersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::ListClustersResponse>>(AsyncListClustersRaw(context, request, cq));
    }
    // Gets the details of a specific cluster.
    virtual ::grpc::Status GetCluster(::grpc::ClientContext* context, const ::google::container::v1::GetClusterRequest& request, ::google::container::v1::Cluster* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Cluster>> AsyncGetCluster(::grpc::ClientContext* context, const ::google::container::v1::GetClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Cluster>>(AsyncGetClusterRaw(context, request, cq));
    }
    // Creates a cluster, consisting of the specified number and type of Google
    // Compute Engine instances.
    //
    // By default, the cluster is created in the project's
    // [default network](/compute/docs/networks-and-firewalls#networks).
    //
    // One firewall is added for the cluster. After cluster creation,
    // the cluster creates routes for each node to allow the containers
    // on that node to communicate with all other instances in the
    // cluster.
    //
    // Finally, an entry is added to the project's global metadata indicating
    // which CIDR range is being used by the cluster.
    virtual ::grpc::Status CreateCluster(::grpc::ClientContext* context, const ::google::container::v1::CreateClusterRequest& request, ::google::container::v1::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> AsyncCreateCluster(::grpc::ClientContext* context, const ::google::container::v1::CreateClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(AsyncCreateClusterRaw(context, request, cq));
    }
    // Updates the settings of a specific cluster.
    virtual ::grpc::Status UpdateCluster(::grpc::ClientContext* context, const ::google::container::v1::UpdateClusterRequest& request, ::google::container::v1::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> AsyncUpdateCluster(::grpc::ClientContext* context, const ::google::container::v1::UpdateClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(AsyncUpdateClusterRaw(context, request, cq));
    }
    // Deletes the cluster, including the Kubernetes endpoint and all worker
    // nodes.
    //
    // Firewalls and routes that were configured during cluster creation
    // are also deleted.
    //
    // Other Google Compute Engine resources that might be in use by the cluster
    // (e.g. load balancer resources) will not be deleted if they weren't present
    // at the initial create time.
    virtual ::grpc::Status DeleteCluster(::grpc::ClientContext* context, const ::google::container::v1::DeleteClusterRequest& request, ::google::container::v1::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> AsyncDeleteCluster(::grpc::ClientContext* context, const ::google::container::v1::DeleteClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(AsyncDeleteClusterRaw(context, request, cq));
    }
    // Lists all operations in a project in a specific zone or all zones.
    virtual ::grpc::Status ListOperations(::grpc::ClientContext* context, const ::google::container::v1::ListOperationsRequest& request, ::google::container::v1::ListOperationsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::ListOperationsResponse>> AsyncListOperations(::grpc::ClientContext* context, const ::google::container::v1::ListOperationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::ListOperationsResponse>>(AsyncListOperationsRaw(context, request, cq));
    }
    // Gets the specified operation.
    virtual ::grpc::Status GetOperation(::grpc::ClientContext* context, const ::google::container::v1::GetOperationRequest& request, ::google::container::v1::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> AsyncGetOperation(::grpc::ClientContext* context, const ::google::container::v1::GetOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(AsyncGetOperationRaw(context, request, cq));
    }
    // Returns configuration info about the Container Engine service.
    virtual ::grpc::Status GetServerConfig(::grpc::ClientContext* context, const ::google::container::v1::GetServerConfigRequest& request, ::google::container::v1::ServerConfig* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::ServerConfig>> AsyncGetServerConfig(::grpc::ClientContext* context, const ::google::container::v1::GetServerConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::ServerConfig>>(AsyncGetServerConfigRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::ListClustersResponse>* AsyncListClustersRaw(::grpc::ClientContext* context, const ::google::container::v1::ListClustersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Cluster>* AsyncGetClusterRaw(::grpc::ClientContext* context, const ::google::container::v1::GetClusterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* AsyncCreateClusterRaw(::grpc::ClientContext* context, const ::google::container::v1::CreateClusterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* AsyncUpdateClusterRaw(::grpc::ClientContext* context, const ::google::container::v1::UpdateClusterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* AsyncDeleteClusterRaw(::grpc::ClientContext* context, const ::google::container::v1::DeleteClusterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::ListOperationsResponse>* AsyncListOperationsRaw(::grpc::ClientContext* context, const ::google::container::v1::ListOperationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* AsyncGetOperationRaw(::grpc::ClientContext* context, const ::google::container::v1::GetOperationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::ServerConfig>* AsyncGetServerConfigRaw(::grpc::ClientContext* context, const ::google::container::v1::GetServerConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ListClusters(::grpc::ClientContext* context, const ::google::container::v1::ListClustersRequest& request, ::google::container::v1::ListClustersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::ListClustersResponse>> AsyncListClusters(::grpc::ClientContext* context, const ::google::container::v1::ListClustersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::ListClustersResponse>>(AsyncListClustersRaw(context, request, cq));
    }
    ::grpc::Status GetCluster(::grpc::ClientContext* context, const ::google::container::v1::GetClusterRequest& request, ::google::container::v1::Cluster* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Cluster>> AsyncGetCluster(::grpc::ClientContext* context, const ::google::container::v1::GetClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Cluster>>(AsyncGetClusterRaw(context, request, cq));
    }
    ::grpc::Status CreateCluster(::grpc::ClientContext* context, const ::google::container::v1::CreateClusterRequest& request, ::google::container::v1::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> AsyncCreateCluster(::grpc::ClientContext* context, const ::google::container::v1::CreateClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(AsyncCreateClusterRaw(context, request, cq));
    }
    ::grpc::Status UpdateCluster(::grpc::ClientContext* context, const ::google::container::v1::UpdateClusterRequest& request, ::google::container::v1::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> AsyncUpdateCluster(::grpc::ClientContext* context, const ::google::container::v1::UpdateClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(AsyncUpdateClusterRaw(context, request, cq));
    }
    ::grpc::Status DeleteCluster(::grpc::ClientContext* context, const ::google::container::v1::DeleteClusterRequest& request, ::google::container::v1::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> AsyncDeleteCluster(::grpc::ClientContext* context, const ::google::container::v1::DeleteClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(AsyncDeleteClusterRaw(context, request, cq));
    }
    ::grpc::Status ListOperations(::grpc::ClientContext* context, const ::google::container::v1::ListOperationsRequest& request, ::google::container::v1::ListOperationsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::ListOperationsResponse>> AsyncListOperations(::grpc::ClientContext* context, const ::google::container::v1::ListOperationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::ListOperationsResponse>>(AsyncListOperationsRaw(context, request, cq));
    }
    ::grpc::Status GetOperation(::grpc::ClientContext* context, const ::google::container::v1::GetOperationRequest& request, ::google::container::v1::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> AsyncGetOperation(::grpc::ClientContext* context, const ::google::container::v1::GetOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(AsyncGetOperationRaw(context, request, cq));
    }
    ::grpc::Status GetServerConfig(::grpc::ClientContext* context, const ::google::container::v1::GetServerConfigRequest& request, ::google::container::v1::ServerConfig* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::ServerConfig>> AsyncGetServerConfig(::grpc::ClientContext* context, const ::google::container::v1::GetServerConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::ServerConfig>>(AsyncGetServerConfigRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::ListClustersResponse>* AsyncListClustersRaw(::grpc::ClientContext* context, const ::google::container::v1::ListClustersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Cluster>* AsyncGetClusterRaw(::grpc::ClientContext* context, const ::google::container::v1::GetClusterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* AsyncCreateClusterRaw(::grpc::ClientContext* context, const ::google::container::v1::CreateClusterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* AsyncUpdateClusterRaw(::grpc::ClientContext* context, const ::google::container::v1::UpdateClusterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* AsyncDeleteClusterRaw(::grpc::ClientContext* context, const ::google::container::v1::DeleteClusterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::ListOperationsResponse>* AsyncListOperationsRaw(::grpc::ClientContext* context, const ::google::container::v1::ListOperationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* AsyncGetOperationRaw(::grpc::ClientContext* context, const ::google::container::v1::GetOperationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::ServerConfig>* AsyncGetServerConfigRaw(::grpc::ClientContext* context, const ::google::container::v1::GetServerConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_ListClusters_;
    const ::grpc::RpcMethod rpcmethod_GetCluster_;
    const ::grpc::RpcMethod rpcmethod_CreateCluster_;
    const ::grpc::RpcMethod rpcmethod_UpdateCluster_;
    const ::grpc::RpcMethod rpcmethod_DeleteCluster_;
    const ::grpc::RpcMethod rpcmethod_ListOperations_;
    const ::grpc::RpcMethod rpcmethod_GetOperation_;
    const ::grpc::RpcMethod rpcmethod_GetServerConfig_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Lists all clusters owned by a project in either the specified zone or all zones.
    virtual ::grpc::Status ListClusters(::grpc::ServerContext* context, const ::google::container::v1::ListClustersRequest* request, ::google::container::v1::ListClustersResponse* response);
    // Gets the details of a specific cluster.
    virtual ::grpc::Status GetCluster(::grpc::ServerContext* context, const ::google::container::v1::GetClusterRequest* request, ::google::container::v1::Cluster* response);
    // Creates a cluster, consisting of the specified number and type of Google
    // Compute Engine instances.
    //
    // By default, the cluster is created in the project's
    // [default network](/compute/docs/networks-and-firewalls#networks).
    //
    // One firewall is added for the cluster. After cluster creation,
    // the cluster creates routes for each node to allow the containers
    // on that node to communicate with all other instances in the
    // cluster.
    //
    // Finally, an entry is added to the project's global metadata indicating
    // which CIDR range is being used by the cluster.
    virtual ::grpc::Status CreateCluster(::grpc::ServerContext* context, const ::google::container::v1::CreateClusterRequest* request, ::google::container::v1::Operation* response);
    // Updates the settings of a specific cluster.
    virtual ::grpc::Status UpdateCluster(::grpc::ServerContext* context, const ::google::container::v1::UpdateClusterRequest* request, ::google::container::v1::Operation* response);
    // Deletes the cluster, including the Kubernetes endpoint and all worker
    // nodes.
    //
    // Firewalls and routes that were configured during cluster creation
    // are also deleted.
    //
    // Other Google Compute Engine resources that might be in use by the cluster
    // (e.g. load balancer resources) will not be deleted if they weren't present
    // at the initial create time.
    virtual ::grpc::Status DeleteCluster(::grpc::ServerContext* context, const ::google::container::v1::DeleteClusterRequest* request, ::google::container::v1::Operation* response);
    // Lists all operations in a project in a specific zone or all zones.
    virtual ::grpc::Status ListOperations(::grpc::ServerContext* context, const ::google::container::v1::ListOperationsRequest* request, ::google::container::v1::ListOperationsResponse* response);
    // Gets the specified operation.
    virtual ::grpc::Status GetOperation(::grpc::ServerContext* context, const ::google::container::v1::GetOperationRequest* request, ::google::container::v1::Operation* response);
    // Returns configuration info about the Container Engine service.
    virtual ::grpc::Status GetServerConfig(::grpc::ServerContext* context, const ::google::container::v1::GetServerConfigRequest* request, ::google::container::v1::ServerConfig* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListClusters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListClusters() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListClusters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListClusters(::grpc::ServerContext* context, const ::google::container::v1::ListClustersRequest* request, ::google::container::v1::ListClustersResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListClusters(::grpc::ServerContext* context, ::google::container::v1::ListClustersRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::container::v1::ListClustersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetCluster() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCluster(::grpc::ServerContext* context, const ::google::container::v1::GetClusterRequest* request, ::google::container::v1::Cluster* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCluster(::grpc::ServerContext* context, ::google::container::v1::GetClusterRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::container::v1::Cluster>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateCluster() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCluster(::grpc::ServerContext* context, const ::google::container::v1::CreateClusterRequest* request, ::google::container::v1::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCluster(::grpc::ServerContext* context, ::google::container::v1::CreateClusterRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::container::v1::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateCluster() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCluster(::grpc::ServerContext* context, const ::google::container::v1::UpdateClusterRequest* request, ::google::container::v1::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateCluster(::grpc::ServerContext* context, ::google::container::v1::UpdateClusterRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::container::v1::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteCluster() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCluster(::grpc::ServerContext* context, const ::google::container::v1::DeleteClusterRequest* request, ::google::container::v1::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteCluster(::grpc::ServerContext* context, ::google::container::v1::DeleteClusterRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::container::v1::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListOperations() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ListOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOperations(::grpc::ServerContext* context, const ::google::container::v1::ListOperationsRequest* request, ::google::container::v1::ListOperationsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListOperations(::grpc::ServerContext* context, ::google::container::v1::ListOperationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::container::v1::ListOperationsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetOperation() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOperation(::grpc::ServerContext* context, const ::google::container::v1::GetOperationRequest* request, ::google::container::v1::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOperation(::grpc::ServerContext* context, ::google::container::v1::GetOperationRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::container::v1::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetServerConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetServerConfig() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetServerConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServerConfig(::grpc::ServerContext* context, const ::google::container::v1::GetServerConfigRequest* request, ::google::container::v1::ServerConfig* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServerConfig(::grpc::ServerContext* context, ::google::container::v1::GetServerConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::container::v1::ServerConfig>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListClusters<WithAsyncMethod_GetCluster<WithAsyncMethod_CreateCluster<WithAsyncMethod_UpdateCluster<WithAsyncMethod_DeleteCluster<WithAsyncMethod_ListOperations<WithAsyncMethod_GetOperation<WithAsyncMethod_GetServerConfig<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_ListClusters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListClusters() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListClusters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListClusters(::grpc::ServerContext* context, const ::google::container::v1::ListClustersRequest* request, ::google::container::v1::ListClustersResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetCluster() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCluster(::grpc::ServerContext* context, const ::google::container::v1::GetClusterRequest* request, ::google::container::v1::Cluster* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateCluster() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCluster(::grpc::ServerContext* context, const ::google::container::v1::CreateClusterRequest* request, ::google::container::v1::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateCluster() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCluster(::grpc::ServerContext* context, const ::google::container::v1::UpdateClusterRequest* request, ::google::container::v1::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteCluster() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCluster(::grpc::ServerContext* context, const ::google::container::v1::DeleteClusterRequest* request, ::google::container::v1::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListOperations() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ListOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOperations(::grpc::ServerContext* context, const ::google::container::v1::ListOperationsRequest* request, ::google::container::v1::ListOperationsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetOperation() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOperation(::grpc::ServerContext* context, const ::google::container::v1::GetOperationRequest* request, ::google::container::v1::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetServerConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetServerConfig() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetServerConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServerConfig(::grpc::ServerContext* context, const ::google::container::v1::GetServerConfigRequest* request, ::google::container::v1::ServerConfig* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListClusters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListClusters() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::google::container::v1::ListClustersRequest, ::google::container::v1::ListClustersResponse>(std::bind(&WithStreamedUnaryMethod_ListClusters<BaseClass>::StreamedListClusters, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListClusters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListClusters(::grpc::ServerContext* context, const ::google::container::v1::ListClustersRequest* request, ::google::container::v1::ListClustersResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListClusters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::container::v1::ListClustersRequest,::google::container::v1::ListClustersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetCluster() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::google::container::v1::GetClusterRequest, ::google::container::v1::Cluster>(std::bind(&WithStreamedUnaryMethod_GetCluster<BaseClass>::StreamedGetCluster, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCluster(::grpc::ServerContext* context, const ::google::container::v1::GetClusterRequest* request, ::google::container::v1::Cluster* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCluster(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::container::v1::GetClusterRequest,::google::container::v1::Cluster>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateCluster() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::StreamedUnaryHandler< ::google::container::v1::CreateClusterRequest, ::google::container::v1::Operation>(std::bind(&WithStreamedUnaryMethod_CreateCluster<BaseClass>::StreamedCreateCluster, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateCluster(::grpc::ServerContext* context, const ::google::container::v1::CreateClusterRequest* request, ::google::container::v1::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateCluster(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::container::v1::CreateClusterRequest,::google::container::v1::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateCluster() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::StreamedUnaryHandler< ::google::container::v1::UpdateClusterRequest, ::google::container::v1::Operation>(std::bind(&WithStreamedUnaryMethod_UpdateCluster<BaseClass>::StreamedUpdateCluster, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateCluster(::grpc::ServerContext* context, const ::google::container::v1::UpdateClusterRequest* request, ::google::container::v1::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateCluster(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::container::v1::UpdateClusterRequest,::google::container::v1::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteCluster() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::StreamedUnaryHandler< ::google::container::v1::DeleteClusterRequest, ::google::container::v1::Operation>(std::bind(&WithStreamedUnaryMethod_DeleteCluster<BaseClass>::StreamedDeleteCluster, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteCluster(::grpc::ServerContext* context, const ::google::container::v1::DeleteClusterRequest* request, ::google::container::v1::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteCluster(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::container::v1::DeleteClusterRequest,::google::container::v1::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListOperations() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::StreamedUnaryHandler< ::google::container::v1::ListOperationsRequest, ::google::container::v1::ListOperationsResponse>(std::bind(&WithStreamedUnaryMethod_ListOperations<BaseClass>::StreamedListOperations, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListOperations(::grpc::ServerContext* context, const ::google::container::v1::ListOperationsRequest* request, ::google::container::v1::ListOperationsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListOperations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::container::v1::ListOperationsRequest,::google::container::v1::ListOperationsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetOperation() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::StreamedUnaryHandler< ::google::container::v1::GetOperationRequest, ::google::container::v1::Operation>(std::bind(&WithStreamedUnaryMethod_GetOperation<BaseClass>::StreamedGetOperation, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOperation(::grpc::ServerContext* context, const ::google::container::v1::GetOperationRequest* request, ::google::container::v1::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOperation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::container::v1::GetOperationRequest,::google::container::v1::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetServerConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetServerConfig() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::StreamedUnaryHandler< ::google::container::v1::GetServerConfigRequest, ::google::container::v1::ServerConfig>(std::bind(&WithStreamedUnaryMethod_GetServerConfig<BaseClass>::StreamedGetServerConfig, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetServerConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetServerConfig(::grpc::ServerContext* context, const ::google::container::v1::GetServerConfigRequest* request, ::google::container::v1::ServerConfig* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetServerConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::container::v1::GetServerConfigRequest,::google::container::v1::ServerConfig>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListClusters<WithStreamedUnaryMethod_GetCluster<WithStreamedUnaryMethod_CreateCluster<WithStreamedUnaryMethod_UpdateCluster<WithStreamedUnaryMethod_DeleteCluster<WithStreamedUnaryMethod_ListOperations<WithStreamedUnaryMethod_GetOperation<WithStreamedUnaryMethod_GetServerConfig<Service > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListClusters<WithStreamedUnaryMethod_GetCluster<WithStreamedUnaryMethod_CreateCluster<WithStreamedUnaryMethod_UpdateCluster<WithStreamedUnaryMethod_DeleteCluster<WithStreamedUnaryMethod_ListOperations<WithStreamedUnaryMethod_GetOperation<WithStreamedUnaryMethod_GetServerConfig<Service > > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace container
}  // namespace google


#endif  // GRPC_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto__INCLUDED
