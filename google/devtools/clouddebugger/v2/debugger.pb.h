// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/clouddebugger/v2/debugger.proto

#ifndef PROTOBUF_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto__INCLUDED
#define PROTOBUF_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/devtools/clouddebugger/v2/data.pb.h"
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace devtools {
namespace clouddebugger {
namespace v2 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto();
void protobuf_InitDefaults_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto();
void protobuf_AssignDesc_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto();
void protobuf_ShutdownFile_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto();

class DeleteBreakpointRequest;
class GetBreakpointRequest;
class GetBreakpointResponse;
class ListBreakpointsRequest;
class ListBreakpointsRequest_BreakpointActionValue;
class ListBreakpointsResponse;
class ListDebuggeesRequest;
class ListDebuggeesResponse;
class SetBreakpointRequest;
class SetBreakpointResponse;

// ===================================================================

class SetBreakpointRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.clouddebugger.v2.SetBreakpointRequest) */ {
 public:
  SetBreakpointRequest();
  virtual ~SetBreakpointRequest();

  SetBreakpointRequest(const SetBreakpointRequest& from);

  inline SetBreakpointRequest& operator=(const SetBreakpointRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetBreakpointRequest& default_instance();

  static const SetBreakpointRequest* internal_default_instance();

  void Swap(SetBreakpointRequest* other);

  // implements Message ----------------------------------------------

  inline SetBreakpointRequest* New() const { return New(NULL); }

  SetBreakpointRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetBreakpointRequest& from);
  void MergeFrom(const SetBreakpointRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetBreakpointRequest* other);
  void UnsafeMergeFrom(const SetBreakpointRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string debuggee_id = 1;
  void clear_debuggee_id();
  static const int kDebuggeeIdFieldNumber = 1;
  const ::std::string& debuggee_id() const;
  void set_debuggee_id(const ::std::string& value);
  void set_debuggee_id(const char* value);
  void set_debuggee_id(const char* value, size_t size);
  ::std::string* mutable_debuggee_id();
  ::std::string* release_debuggee_id();
  void set_allocated_debuggee_id(::std::string* debuggee_id);

  // optional .google.devtools.clouddebugger.v2.Breakpoint breakpoint = 2;
  bool has_breakpoint() const;
  void clear_breakpoint();
  static const int kBreakpointFieldNumber = 2;
  const ::google::devtools::clouddebugger::v2::Breakpoint& breakpoint() const;
  ::google::devtools::clouddebugger::v2::Breakpoint* mutable_breakpoint();
  ::google::devtools::clouddebugger::v2::Breakpoint* release_breakpoint();
  void set_allocated_breakpoint(::google::devtools::clouddebugger::v2::Breakpoint* breakpoint);

  // optional string client_version = 4;
  void clear_client_version();
  static const int kClientVersionFieldNumber = 4;
  const ::std::string& client_version() const;
  void set_client_version(const ::std::string& value);
  void set_client_version(const char* value);
  void set_client_version(const char* value, size_t size);
  ::std::string* mutable_client_version();
  ::std::string* release_client_version();
  void set_allocated_client_version(::std::string* client_version);

  // @@protoc_insertion_point(class_scope:google.devtools.clouddebugger.v2.SetBreakpointRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr debuggee_id_;
  ::google::protobuf::internal::ArenaStringPtr client_version_;
  ::google::devtools::clouddebugger::v2::Breakpoint* breakpoint_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto();
  friend void protobuf_ShutdownFile_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SetBreakpointRequest> SetBreakpointRequest_default_instance_;

// -------------------------------------------------------------------

class SetBreakpointResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.clouddebugger.v2.SetBreakpointResponse) */ {
 public:
  SetBreakpointResponse();
  virtual ~SetBreakpointResponse();

  SetBreakpointResponse(const SetBreakpointResponse& from);

  inline SetBreakpointResponse& operator=(const SetBreakpointResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetBreakpointResponse& default_instance();

  static const SetBreakpointResponse* internal_default_instance();

  void Swap(SetBreakpointResponse* other);

  // implements Message ----------------------------------------------

  inline SetBreakpointResponse* New() const { return New(NULL); }

  SetBreakpointResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetBreakpointResponse& from);
  void MergeFrom(const SetBreakpointResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetBreakpointResponse* other);
  void UnsafeMergeFrom(const SetBreakpointResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .google.devtools.clouddebugger.v2.Breakpoint breakpoint = 1;
  bool has_breakpoint() const;
  void clear_breakpoint();
  static const int kBreakpointFieldNumber = 1;
  const ::google::devtools::clouddebugger::v2::Breakpoint& breakpoint() const;
  ::google::devtools::clouddebugger::v2::Breakpoint* mutable_breakpoint();
  ::google::devtools::clouddebugger::v2::Breakpoint* release_breakpoint();
  void set_allocated_breakpoint(::google::devtools::clouddebugger::v2::Breakpoint* breakpoint);

  // @@protoc_insertion_point(class_scope:google.devtools.clouddebugger.v2.SetBreakpointResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::devtools::clouddebugger::v2::Breakpoint* breakpoint_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto();
  friend void protobuf_ShutdownFile_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SetBreakpointResponse> SetBreakpointResponse_default_instance_;

// -------------------------------------------------------------------

class GetBreakpointRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.clouddebugger.v2.GetBreakpointRequest) */ {
 public:
  GetBreakpointRequest();
  virtual ~GetBreakpointRequest();

  GetBreakpointRequest(const GetBreakpointRequest& from);

  inline GetBreakpointRequest& operator=(const GetBreakpointRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetBreakpointRequest& default_instance();

  static const GetBreakpointRequest* internal_default_instance();

  void Swap(GetBreakpointRequest* other);

  // implements Message ----------------------------------------------

  inline GetBreakpointRequest* New() const { return New(NULL); }

  GetBreakpointRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetBreakpointRequest& from);
  void MergeFrom(const GetBreakpointRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetBreakpointRequest* other);
  void UnsafeMergeFrom(const GetBreakpointRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string debuggee_id = 1;
  void clear_debuggee_id();
  static const int kDebuggeeIdFieldNumber = 1;
  const ::std::string& debuggee_id() const;
  void set_debuggee_id(const ::std::string& value);
  void set_debuggee_id(const char* value);
  void set_debuggee_id(const char* value, size_t size);
  ::std::string* mutable_debuggee_id();
  ::std::string* release_debuggee_id();
  void set_allocated_debuggee_id(::std::string* debuggee_id);

  // optional string breakpoint_id = 2;
  void clear_breakpoint_id();
  static const int kBreakpointIdFieldNumber = 2;
  const ::std::string& breakpoint_id() const;
  void set_breakpoint_id(const ::std::string& value);
  void set_breakpoint_id(const char* value);
  void set_breakpoint_id(const char* value, size_t size);
  ::std::string* mutable_breakpoint_id();
  ::std::string* release_breakpoint_id();
  void set_allocated_breakpoint_id(::std::string* breakpoint_id);

  // optional string client_version = 4;
  void clear_client_version();
  static const int kClientVersionFieldNumber = 4;
  const ::std::string& client_version() const;
  void set_client_version(const ::std::string& value);
  void set_client_version(const char* value);
  void set_client_version(const char* value, size_t size);
  ::std::string* mutable_client_version();
  ::std::string* release_client_version();
  void set_allocated_client_version(::std::string* client_version);

  // @@protoc_insertion_point(class_scope:google.devtools.clouddebugger.v2.GetBreakpointRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr debuggee_id_;
  ::google::protobuf::internal::ArenaStringPtr breakpoint_id_;
  ::google::protobuf::internal::ArenaStringPtr client_version_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto();
  friend void protobuf_ShutdownFile_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<GetBreakpointRequest> GetBreakpointRequest_default_instance_;

// -------------------------------------------------------------------

class GetBreakpointResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.clouddebugger.v2.GetBreakpointResponse) */ {
 public:
  GetBreakpointResponse();
  virtual ~GetBreakpointResponse();

  GetBreakpointResponse(const GetBreakpointResponse& from);

  inline GetBreakpointResponse& operator=(const GetBreakpointResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetBreakpointResponse& default_instance();

  static const GetBreakpointResponse* internal_default_instance();

  void Swap(GetBreakpointResponse* other);

  // implements Message ----------------------------------------------

  inline GetBreakpointResponse* New() const { return New(NULL); }

  GetBreakpointResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetBreakpointResponse& from);
  void MergeFrom(const GetBreakpointResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetBreakpointResponse* other);
  void UnsafeMergeFrom(const GetBreakpointResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .google.devtools.clouddebugger.v2.Breakpoint breakpoint = 1;
  bool has_breakpoint() const;
  void clear_breakpoint();
  static const int kBreakpointFieldNumber = 1;
  const ::google::devtools::clouddebugger::v2::Breakpoint& breakpoint() const;
  ::google::devtools::clouddebugger::v2::Breakpoint* mutable_breakpoint();
  ::google::devtools::clouddebugger::v2::Breakpoint* release_breakpoint();
  void set_allocated_breakpoint(::google::devtools::clouddebugger::v2::Breakpoint* breakpoint);

  // @@protoc_insertion_point(class_scope:google.devtools.clouddebugger.v2.GetBreakpointResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::devtools::clouddebugger::v2::Breakpoint* breakpoint_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto();
  friend void protobuf_ShutdownFile_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<GetBreakpointResponse> GetBreakpointResponse_default_instance_;

// -------------------------------------------------------------------

class DeleteBreakpointRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.clouddebugger.v2.DeleteBreakpointRequest) */ {
 public:
  DeleteBreakpointRequest();
  virtual ~DeleteBreakpointRequest();

  DeleteBreakpointRequest(const DeleteBreakpointRequest& from);

  inline DeleteBreakpointRequest& operator=(const DeleteBreakpointRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteBreakpointRequest& default_instance();

  static const DeleteBreakpointRequest* internal_default_instance();

  void Swap(DeleteBreakpointRequest* other);

  // implements Message ----------------------------------------------

  inline DeleteBreakpointRequest* New() const { return New(NULL); }

  DeleteBreakpointRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteBreakpointRequest& from);
  void MergeFrom(const DeleteBreakpointRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteBreakpointRequest* other);
  void UnsafeMergeFrom(const DeleteBreakpointRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string debuggee_id = 1;
  void clear_debuggee_id();
  static const int kDebuggeeIdFieldNumber = 1;
  const ::std::string& debuggee_id() const;
  void set_debuggee_id(const ::std::string& value);
  void set_debuggee_id(const char* value);
  void set_debuggee_id(const char* value, size_t size);
  ::std::string* mutable_debuggee_id();
  ::std::string* release_debuggee_id();
  void set_allocated_debuggee_id(::std::string* debuggee_id);

  // optional string breakpoint_id = 2;
  void clear_breakpoint_id();
  static const int kBreakpointIdFieldNumber = 2;
  const ::std::string& breakpoint_id() const;
  void set_breakpoint_id(const ::std::string& value);
  void set_breakpoint_id(const char* value);
  void set_breakpoint_id(const char* value, size_t size);
  ::std::string* mutable_breakpoint_id();
  ::std::string* release_breakpoint_id();
  void set_allocated_breakpoint_id(::std::string* breakpoint_id);

  // optional string client_version = 3;
  void clear_client_version();
  static const int kClientVersionFieldNumber = 3;
  const ::std::string& client_version() const;
  void set_client_version(const ::std::string& value);
  void set_client_version(const char* value);
  void set_client_version(const char* value, size_t size);
  ::std::string* mutable_client_version();
  ::std::string* release_client_version();
  void set_allocated_client_version(::std::string* client_version);

  // @@protoc_insertion_point(class_scope:google.devtools.clouddebugger.v2.DeleteBreakpointRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr debuggee_id_;
  ::google::protobuf::internal::ArenaStringPtr breakpoint_id_;
  ::google::protobuf::internal::ArenaStringPtr client_version_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto();
  friend void protobuf_ShutdownFile_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<DeleteBreakpointRequest> DeleteBreakpointRequest_default_instance_;

// -------------------------------------------------------------------

class ListBreakpointsRequest_BreakpointActionValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.clouddebugger.v2.ListBreakpointsRequest.BreakpointActionValue) */ {
 public:
  ListBreakpointsRequest_BreakpointActionValue();
  virtual ~ListBreakpointsRequest_BreakpointActionValue();

  ListBreakpointsRequest_BreakpointActionValue(const ListBreakpointsRequest_BreakpointActionValue& from);

  inline ListBreakpointsRequest_BreakpointActionValue& operator=(const ListBreakpointsRequest_BreakpointActionValue& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListBreakpointsRequest_BreakpointActionValue& default_instance();

  static const ListBreakpointsRequest_BreakpointActionValue* internal_default_instance();

  void Swap(ListBreakpointsRequest_BreakpointActionValue* other);

  // implements Message ----------------------------------------------

  inline ListBreakpointsRequest_BreakpointActionValue* New() const { return New(NULL); }

  ListBreakpointsRequest_BreakpointActionValue* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListBreakpointsRequest_BreakpointActionValue& from);
  void MergeFrom(const ListBreakpointsRequest_BreakpointActionValue& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ListBreakpointsRequest_BreakpointActionValue* other);
  void UnsafeMergeFrom(const ListBreakpointsRequest_BreakpointActionValue& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .google.devtools.clouddebugger.v2.Breakpoint.Action value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::devtools::clouddebugger::v2::Breakpoint_Action value() const;
  void set_value(::google::devtools::clouddebugger::v2::Breakpoint_Action value);

  // @@protoc_insertion_point(class_scope:google.devtools.clouddebugger.v2.ListBreakpointsRequest.BreakpointActionValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int value_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto();
  friend void protobuf_ShutdownFile_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ListBreakpointsRequest_BreakpointActionValue> ListBreakpointsRequest_BreakpointActionValue_default_instance_;

// -------------------------------------------------------------------

class ListBreakpointsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.clouddebugger.v2.ListBreakpointsRequest) */ {
 public:
  ListBreakpointsRequest();
  virtual ~ListBreakpointsRequest();

  ListBreakpointsRequest(const ListBreakpointsRequest& from);

  inline ListBreakpointsRequest& operator=(const ListBreakpointsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListBreakpointsRequest& default_instance();

  static const ListBreakpointsRequest* internal_default_instance();

  void Swap(ListBreakpointsRequest* other);

  // implements Message ----------------------------------------------

  inline ListBreakpointsRequest* New() const { return New(NULL); }

  ListBreakpointsRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListBreakpointsRequest& from);
  void MergeFrom(const ListBreakpointsRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ListBreakpointsRequest* other);
  void UnsafeMergeFrom(const ListBreakpointsRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ListBreakpointsRequest_BreakpointActionValue BreakpointActionValue;

  // accessors -------------------------------------------------------

  // optional string debuggee_id = 1;
  void clear_debuggee_id();
  static const int kDebuggeeIdFieldNumber = 1;
  const ::std::string& debuggee_id() const;
  void set_debuggee_id(const ::std::string& value);
  void set_debuggee_id(const char* value);
  void set_debuggee_id(const char* value, size_t size);
  ::std::string* mutable_debuggee_id();
  ::std::string* release_debuggee_id();
  void set_allocated_debuggee_id(::std::string* debuggee_id);

  // optional bool include_all_users = 2;
  void clear_include_all_users();
  static const int kIncludeAllUsersFieldNumber = 2;
  bool include_all_users() const;
  void set_include_all_users(bool value);

  // optional bool include_inactive = 3;
  void clear_include_inactive();
  static const int kIncludeInactiveFieldNumber = 3;
  bool include_inactive() const;
  void set_include_inactive(bool value);

  // optional .google.devtools.clouddebugger.v2.ListBreakpointsRequest.BreakpointActionValue action = 4;
  bool has_action() const;
  void clear_action();
  static const int kActionFieldNumber = 4;
  const ::google::devtools::clouddebugger::v2::ListBreakpointsRequest_BreakpointActionValue& action() const;
  ::google::devtools::clouddebugger::v2::ListBreakpointsRequest_BreakpointActionValue* mutable_action();
  ::google::devtools::clouddebugger::v2::ListBreakpointsRequest_BreakpointActionValue* release_action();
  void set_allocated_action(::google::devtools::clouddebugger::v2::ListBreakpointsRequest_BreakpointActionValue* action);

  // optional bool strip_results = 5 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_strip_results();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kStripResultsFieldNumber = 5;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool strip_results() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_strip_results(bool value);

  // optional string wait_token = 6;
  void clear_wait_token();
  static const int kWaitTokenFieldNumber = 6;
  const ::std::string& wait_token() const;
  void set_wait_token(const ::std::string& value);
  void set_wait_token(const char* value);
  void set_wait_token(const char* value, size_t size);
  ::std::string* mutable_wait_token();
  ::std::string* release_wait_token();
  void set_allocated_wait_token(::std::string* wait_token);

  // optional string client_version = 8;
  void clear_client_version();
  static const int kClientVersionFieldNumber = 8;
  const ::std::string& client_version() const;
  void set_client_version(const ::std::string& value);
  void set_client_version(const char* value);
  void set_client_version(const char* value, size_t size);
  ::std::string* mutable_client_version();
  ::std::string* release_client_version();
  void set_allocated_client_version(::std::string* client_version);

  // @@protoc_insertion_point(class_scope:google.devtools.clouddebugger.v2.ListBreakpointsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr debuggee_id_;
  ::google::protobuf::internal::ArenaStringPtr wait_token_;
  ::google::protobuf::internal::ArenaStringPtr client_version_;
  ::google::devtools::clouddebugger::v2::ListBreakpointsRequest_BreakpointActionValue* action_;
  bool include_all_users_;
  bool include_inactive_;
  bool strip_results_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto();
  friend void protobuf_ShutdownFile_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ListBreakpointsRequest> ListBreakpointsRequest_default_instance_;

// -------------------------------------------------------------------

class ListBreakpointsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.clouddebugger.v2.ListBreakpointsResponse) */ {
 public:
  ListBreakpointsResponse();
  virtual ~ListBreakpointsResponse();

  ListBreakpointsResponse(const ListBreakpointsResponse& from);

  inline ListBreakpointsResponse& operator=(const ListBreakpointsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListBreakpointsResponse& default_instance();

  static const ListBreakpointsResponse* internal_default_instance();

  void Swap(ListBreakpointsResponse* other);

  // implements Message ----------------------------------------------

  inline ListBreakpointsResponse* New() const { return New(NULL); }

  ListBreakpointsResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListBreakpointsResponse& from);
  void MergeFrom(const ListBreakpointsResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ListBreakpointsResponse* other);
  void UnsafeMergeFrom(const ListBreakpointsResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.devtools.clouddebugger.v2.Breakpoint breakpoints = 1;
  int breakpoints_size() const;
  void clear_breakpoints();
  static const int kBreakpointsFieldNumber = 1;
  const ::google::devtools::clouddebugger::v2::Breakpoint& breakpoints(int index) const;
  ::google::devtools::clouddebugger::v2::Breakpoint* mutable_breakpoints(int index);
  ::google::devtools::clouddebugger::v2::Breakpoint* add_breakpoints();
  ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::Breakpoint >*
      mutable_breakpoints();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::Breakpoint >&
      breakpoints() const;

  // optional string next_wait_token = 2;
  void clear_next_wait_token();
  static const int kNextWaitTokenFieldNumber = 2;
  const ::std::string& next_wait_token() const;
  void set_next_wait_token(const ::std::string& value);
  void set_next_wait_token(const char* value);
  void set_next_wait_token(const char* value, size_t size);
  ::std::string* mutable_next_wait_token();
  ::std::string* release_next_wait_token();
  void set_allocated_next_wait_token(::std::string* next_wait_token);

  // @@protoc_insertion_point(class_scope:google.devtools.clouddebugger.v2.ListBreakpointsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::Breakpoint > breakpoints_;
  ::google::protobuf::internal::ArenaStringPtr next_wait_token_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto();
  friend void protobuf_ShutdownFile_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ListBreakpointsResponse> ListBreakpointsResponse_default_instance_;

// -------------------------------------------------------------------

class ListDebuggeesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.clouddebugger.v2.ListDebuggeesRequest) */ {
 public:
  ListDebuggeesRequest();
  virtual ~ListDebuggeesRequest();

  ListDebuggeesRequest(const ListDebuggeesRequest& from);

  inline ListDebuggeesRequest& operator=(const ListDebuggeesRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListDebuggeesRequest& default_instance();

  static const ListDebuggeesRequest* internal_default_instance();

  void Swap(ListDebuggeesRequest* other);

  // implements Message ----------------------------------------------

  inline ListDebuggeesRequest* New() const { return New(NULL); }

  ListDebuggeesRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListDebuggeesRequest& from);
  void MergeFrom(const ListDebuggeesRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ListDebuggeesRequest* other);
  void UnsafeMergeFrom(const ListDebuggeesRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string project = 2;
  void clear_project();
  static const int kProjectFieldNumber = 2;
  const ::std::string& project() const;
  void set_project(const ::std::string& value);
  void set_project(const char* value);
  void set_project(const char* value, size_t size);
  ::std::string* mutable_project();
  ::std::string* release_project();
  void set_allocated_project(::std::string* project);

  // optional bool include_inactive = 3;
  void clear_include_inactive();
  static const int kIncludeInactiveFieldNumber = 3;
  bool include_inactive() const;
  void set_include_inactive(bool value);

  // optional string client_version = 4;
  void clear_client_version();
  static const int kClientVersionFieldNumber = 4;
  const ::std::string& client_version() const;
  void set_client_version(const ::std::string& value);
  void set_client_version(const char* value);
  void set_client_version(const char* value, size_t size);
  ::std::string* mutable_client_version();
  ::std::string* release_client_version();
  void set_allocated_client_version(::std::string* client_version);

  // @@protoc_insertion_point(class_scope:google.devtools.clouddebugger.v2.ListDebuggeesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_;
  ::google::protobuf::internal::ArenaStringPtr client_version_;
  bool include_inactive_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto();
  friend void protobuf_ShutdownFile_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ListDebuggeesRequest> ListDebuggeesRequest_default_instance_;

// -------------------------------------------------------------------

class ListDebuggeesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.clouddebugger.v2.ListDebuggeesResponse) */ {
 public:
  ListDebuggeesResponse();
  virtual ~ListDebuggeesResponse();

  ListDebuggeesResponse(const ListDebuggeesResponse& from);

  inline ListDebuggeesResponse& operator=(const ListDebuggeesResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListDebuggeesResponse& default_instance();

  static const ListDebuggeesResponse* internal_default_instance();

  void Swap(ListDebuggeesResponse* other);

  // implements Message ----------------------------------------------

  inline ListDebuggeesResponse* New() const { return New(NULL); }

  ListDebuggeesResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListDebuggeesResponse& from);
  void MergeFrom(const ListDebuggeesResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ListDebuggeesResponse* other);
  void UnsafeMergeFrom(const ListDebuggeesResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.devtools.clouddebugger.v2.Debuggee debuggees = 1;
  int debuggees_size() const;
  void clear_debuggees();
  static const int kDebuggeesFieldNumber = 1;
  const ::google::devtools::clouddebugger::v2::Debuggee& debuggees(int index) const;
  ::google::devtools::clouddebugger::v2::Debuggee* mutable_debuggees(int index);
  ::google::devtools::clouddebugger::v2::Debuggee* add_debuggees();
  ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::Debuggee >*
      mutable_debuggees();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::Debuggee >&
      debuggees() const;

  // @@protoc_insertion_point(class_scope:google.devtools.clouddebugger.v2.ListDebuggeesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::Debuggee > debuggees_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto();
  friend void protobuf_ShutdownFile_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ListDebuggeesResponse> ListDebuggeesResponse_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SetBreakpointRequest

// optional string debuggee_id = 1;
inline void SetBreakpointRequest::clear_debuggee_id() {
  debuggee_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetBreakpointRequest::debuggee_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.SetBreakpointRequest.debuggee_id)
  return debuggee_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetBreakpointRequest::set_debuggee_id(const ::std::string& value) {
  
  debuggee_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.SetBreakpointRequest.debuggee_id)
}
inline void SetBreakpointRequest::set_debuggee_id(const char* value) {
  
  debuggee_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.clouddebugger.v2.SetBreakpointRequest.debuggee_id)
}
inline void SetBreakpointRequest::set_debuggee_id(const char* value, size_t size) {
  
  debuggee_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.clouddebugger.v2.SetBreakpointRequest.debuggee_id)
}
inline ::std::string* SetBreakpointRequest::mutable_debuggee_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.SetBreakpointRequest.debuggee_id)
  return debuggee_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetBreakpointRequest::release_debuggee_id() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.SetBreakpointRequest.debuggee_id)
  
  return debuggee_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetBreakpointRequest::set_allocated_debuggee_id(::std::string* debuggee_id) {
  if (debuggee_id != NULL) {
    
  } else {
    
  }
  debuggee_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), debuggee_id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.SetBreakpointRequest.debuggee_id)
}

// optional .google.devtools.clouddebugger.v2.Breakpoint breakpoint = 2;
inline bool SetBreakpointRequest::has_breakpoint() const {
  return this != internal_default_instance() && breakpoint_ != NULL;
}
inline void SetBreakpointRequest::clear_breakpoint() {
  if (GetArenaNoVirtual() == NULL && breakpoint_ != NULL) delete breakpoint_;
  breakpoint_ = NULL;
}
inline const ::google::devtools::clouddebugger::v2::Breakpoint& SetBreakpointRequest::breakpoint() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.SetBreakpointRequest.breakpoint)
  return breakpoint_ != NULL ? *breakpoint_
                         : *::google::devtools::clouddebugger::v2::Breakpoint::internal_default_instance();
}
inline ::google::devtools::clouddebugger::v2::Breakpoint* SetBreakpointRequest::mutable_breakpoint() {
  
  if (breakpoint_ == NULL) {
    breakpoint_ = new ::google::devtools::clouddebugger::v2::Breakpoint;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.SetBreakpointRequest.breakpoint)
  return breakpoint_;
}
inline ::google::devtools::clouddebugger::v2::Breakpoint* SetBreakpointRequest::release_breakpoint() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.SetBreakpointRequest.breakpoint)
  
  ::google::devtools::clouddebugger::v2::Breakpoint* temp = breakpoint_;
  breakpoint_ = NULL;
  return temp;
}
inline void SetBreakpointRequest::set_allocated_breakpoint(::google::devtools::clouddebugger::v2::Breakpoint* breakpoint) {
  delete breakpoint_;
  breakpoint_ = breakpoint;
  if (breakpoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.SetBreakpointRequest.breakpoint)
}

// optional string client_version = 4;
inline void SetBreakpointRequest::clear_client_version() {
  client_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetBreakpointRequest::client_version() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.SetBreakpointRequest.client_version)
  return client_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetBreakpointRequest::set_client_version(const ::std::string& value) {
  
  client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.SetBreakpointRequest.client_version)
}
inline void SetBreakpointRequest::set_client_version(const char* value) {
  
  client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.clouddebugger.v2.SetBreakpointRequest.client_version)
}
inline void SetBreakpointRequest::set_client_version(const char* value, size_t size) {
  
  client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.clouddebugger.v2.SetBreakpointRequest.client_version)
}
inline ::std::string* SetBreakpointRequest::mutable_client_version() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.SetBreakpointRequest.client_version)
  return client_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetBreakpointRequest::release_client_version() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.SetBreakpointRequest.client_version)
  
  return client_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetBreakpointRequest::set_allocated_client_version(::std::string* client_version) {
  if (client_version != NULL) {
    
  } else {
    
  }
  client_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_version);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.SetBreakpointRequest.client_version)
}

inline const SetBreakpointRequest* SetBreakpointRequest::internal_default_instance() {
  return &SetBreakpointRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// SetBreakpointResponse

// optional .google.devtools.clouddebugger.v2.Breakpoint breakpoint = 1;
inline bool SetBreakpointResponse::has_breakpoint() const {
  return this != internal_default_instance() && breakpoint_ != NULL;
}
inline void SetBreakpointResponse::clear_breakpoint() {
  if (GetArenaNoVirtual() == NULL && breakpoint_ != NULL) delete breakpoint_;
  breakpoint_ = NULL;
}
inline const ::google::devtools::clouddebugger::v2::Breakpoint& SetBreakpointResponse::breakpoint() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.SetBreakpointResponse.breakpoint)
  return breakpoint_ != NULL ? *breakpoint_
                         : *::google::devtools::clouddebugger::v2::Breakpoint::internal_default_instance();
}
inline ::google::devtools::clouddebugger::v2::Breakpoint* SetBreakpointResponse::mutable_breakpoint() {
  
  if (breakpoint_ == NULL) {
    breakpoint_ = new ::google::devtools::clouddebugger::v2::Breakpoint;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.SetBreakpointResponse.breakpoint)
  return breakpoint_;
}
inline ::google::devtools::clouddebugger::v2::Breakpoint* SetBreakpointResponse::release_breakpoint() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.SetBreakpointResponse.breakpoint)
  
  ::google::devtools::clouddebugger::v2::Breakpoint* temp = breakpoint_;
  breakpoint_ = NULL;
  return temp;
}
inline void SetBreakpointResponse::set_allocated_breakpoint(::google::devtools::clouddebugger::v2::Breakpoint* breakpoint) {
  delete breakpoint_;
  breakpoint_ = breakpoint;
  if (breakpoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.SetBreakpointResponse.breakpoint)
}

inline const SetBreakpointResponse* SetBreakpointResponse::internal_default_instance() {
  return &SetBreakpointResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// GetBreakpointRequest

// optional string debuggee_id = 1;
inline void GetBreakpointRequest::clear_debuggee_id() {
  debuggee_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetBreakpointRequest::debuggee_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.GetBreakpointRequest.debuggee_id)
  return debuggee_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetBreakpointRequest::set_debuggee_id(const ::std::string& value) {
  
  debuggee_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.GetBreakpointRequest.debuggee_id)
}
inline void GetBreakpointRequest::set_debuggee_id(const char* value) {
  
  debuggee_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.clouddebugger.v2.GetBreakpointRequest.debuggee_id)
}
inline void GetBreakpointRequest::set_debuggee_id(const char* value, size_t size) {
  
  debuggee_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.clouddebugger.v2.GetBreakpointRequest.debuggee_id)
}
inline ::std::string* GetBreakpointRequest::mutable_debuggee_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.GetBreakpointRequest.debuggee_id)
  return debuggee_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetBreakpointRequest::release_debuggee_id() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.GetBreakpointRequest.debuggee_id)
  
  return debuggee_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetBreakpointRequest::set_allocated_debuggee_id(::std::string* debuggee_id) {
  if (debuggee_id != NULL) {
    
  } else {
    
  }
  debuggee_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), debuggee_id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.GetBreakpointRequest.debuggee_id)
}

// optional string breakpoint_id = 2;
inline void GetBreakpointRequest::clear_breakpoint_id() {
  breakpoint_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetBreakpointRequest::breakpoint_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.GetBreakpointRequest.breakpoint_id)
  return breakpoint_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetBreakpointRequest::set_breakpoint_id(const ::std::string& value) {
  
  breakpoint_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.GetBreakpointRequest.breakpoint_id)
}
inline void GetBreakpointRequest::set_breakpoint_id(const char* value) {
  
  breakpoint_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.clouddebugger.v2.GetBreakpointRequest.breakpoint_id)
}
inline void GetBreakpointRequest::set_breakpoint_id(const char* value, size_t size) {
  
  breakpoint_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.clouddebugger.v2.GetBreakpointRequest.breakpoint_id)
}
inline ::std::string* GetBreakpointRequest::mutable_breakpoint_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.GetBreakpointRequest.breakpoint_id)
  return breakpoint_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetBreakpointRequest::release_breakpoint_id() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.GetBreakpointRequest.breakpoint_id)
  
  return breakpoint_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetBreakpointRequest::set_allocated_breakpoint_id(::std::string* breakpoint_id) {
  if (breakpoint_id != NULL) {
    
  } else {
    
  }
  breakpoint_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), breakpoint_id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.GetBreakpointRequest.breakpoint_id)
}

// optional string client_version = 4;
inline void GetBreakpointRequest::clear_client_version() {
  client_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetBreakpointRequest::client_version() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.GetBreakpointRequest.client_version)
  return client_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetBreakpointRequest::set_client_version(const ::std::string& value) {
  
  client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.GetBreakpointRequest.client_version)
}
inline void GetBreakpointRequest::set_client_version(const char* value) {
  
  client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.clouddebugger.v2.GetBreakpointRequest.client_version)
}
inline void GetBreakpointRequest::set_client_version(const char* value, size_t size) {
  
  client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.clouddebugger.v2.GetBreakpointRequest.client_version)
}
inline ::std::string* GetBreakpointRequest::mutable_client_version() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.GetBreakpointRequest.client_version)
  return client_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetBreakpointRequest::release_client_version() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.GetBreakpointRequest.client_version)
  
  return client_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetBreakpointRequest::set_allocated_client_version(::std::string* client_version) {
  if (client_version != NULL) {
    
  } else {
    
  }
  client_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_version);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.GetBreakpointRequest.client_version)
}

inline const GetBreakpointRequest* GetBreakpointRequest::internal_default_instance() {
  return &GetBreakpointRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// GetBreakpointResponse

// optional .google.devtools.clouddebugger.v2.Breakpoint breakpoint = 1;
inline bool GetBreakpointResponse::has_breakpoint() const {
  return this != internal_default_instance() && breakpoint_ != NULL;
}
inline void GetBreakpointResponse::clear_breakpoint() {
  if (GetArenaNoVirtual() == NULL && breakpoint_ != NULL) delete breakpoint_;
  breakpoint_ = NULL;
}
inline const ::google::devtools::clouddebugger::v2::Breakpoint& GetBreakpointResponse::breakpoint() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.GetBreakpointResponse.breakpoint)
  return breakpoint_ != NULL ? *breakpoint_
                         : *::google::devtools::clouddebugger::v2::Breakpoint::internal_default_instance();
}
inline ::google::devtools::clouddebugger::v2::Breakpoint* GetBreakpointResponse::mutable_breakpoint() {
  
  if (breakpoint_ == NULL) {
    breakpoint_ = new ::google::devtools::clouddebugger::v2::Breakpoint;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.GetBreakpointResponse.breakpoint)
  return breakpoint_;
}
inline ::google::devtools::clouddebugger::v2::Breakpoint* GetBreakpointResponse::release_breakpoint() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.GetBreakpointResponse.breakpoint)
  
  ::google::devtools::clouddebugger::v2::Breakpoint* temp = breakpoint_;
  breakpoint_ = NULL;
  return temp;
}
inline void GetBreakpointResponse::set_allocated_breakpoint(::google::devtools::clouddebugger::v2::Breakpoint* breakpoint) {
  delete breakpoint_;
  breakpoint_ = breakpoint;
  if (breakpoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.GetBreakpointResponse.breakpoint)
}

inline const GetBreakpointResponse* GetBreakpointResponse::internal_default_instance() {
  return &GetBreakpointResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// DeleteBreakpointRequest

// optional string debuggee_id = 1;
inline void DeleteBreakpointRequest::clear_debuggee_id() {
  debuggee_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteBreakpointRequest::debuggee_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.DeleteBreakpointRequest.debuggee_id)
  return debuggee_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteBreakpointRequest::set_debuggee_id(const ::std::string& value) {
  
  debuggee_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.DeleteBreakpointRequest.debuggee_id)
}
inline void DeleteBreakpointRequest::set_debuggee_id(const char* value) {
  
  debuggee_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.clouddebugger.v2.DeleteBreakpointRequest.debuggee_id)
}
inline void DeleteBreakpointRequest::set_debuggee_id(const char* value, size_t size) {
  
  debuggee_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.clouddebugger.v2.DeleteBreakpointRequest.debuggee_id)
}
inline ::std::string* DeleteBreakpointRequest::mutable_debuggee_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.DeleteBreakpointRequest.debuggee_id)
  return debuggee_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteBreakpointRequest::release_debuggee_id() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.DeleteBreakpointRequest.debuggee_id)
  
  return debuggee_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteBreakpointRequest::set_allocated_debuggee_id(::std::string* debuggee_id) {
  if (debuggee_id != NULL) {
    
  } else {
    
  }
  debuggee_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), debuggee_id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.DeleteBreakpointRequest.debuggee_id)
}

// optional string breakpoint_id = 2;
inline void DeleteBreakpointRequest::clear_breakpoint_id() {
  breakpoint_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteBreakpointRequest::breakpoint_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.DeleteBreakpointRequest.breakpoint_id)
  return breakpoint_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteBreakpointRequest::set_breakpoint_id(const ::std::string& value) {
  
  breakpoint_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.DeleteBreakpointRequest.breakpoint_id)
}
inline void DeleteBreakpointRequest::set_breakpoint_id(const char* value) {
  
  breakpoint_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.clouddebugger.v2.DeleteBreakpointRequest.breakpoint_id)
}
inline void DeleteBreakpointRequest::set_breakpoint_id(const char* value, size_t size) {
  
  breakpoint_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.clouddebugger.v2.DeleteBreakpointRequest.breakpoint_id)
}
inline ::std::string* DeleteBreakpointRequest::mutable_breakpoint_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.DeleteBreakpointRequest.breakpoint_id)
  return breakpoint_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteBreakpointRequest::release_breakpoint_id() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.DeleteBreakpointRequest.breakpoint_id)
  
  return breakpoint_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteBreakpointRequest::set_allocated_breakpoint_id(::std::string* breakpoint_id) {
  if (breakpoint_id != NULL) {
    
  } else {
    
  }
  breakpoint_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), breakpoint_id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.DeleteBreakpointRequest.breakpoint_id)
}

// optional string client_version = 3;
inline void DeleteBreakpointRequest::clear_client_version() {
  client_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteBreakpointRequest::client_version() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.DeleteBreakpointRequest.client_version)
  return client_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteBreakpointRequest::set_client_version(const ::std::string& value) {
  
  client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.DeleteBreakpointRequest.client_version)
}
inline void DeleteBreakpointRequest::set_client_version(const char* value) {
  
  client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.clouddebugger.v2.DeleteBreakpointRequest.client_version)
}
inline void DeleteBreakpointRequest::set_client_version(const char* value, size_t size) {
  
  client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.clouddebugger.v2.DeleteBreakpointRequest.client_version)
}
inline ::std::string* DeleteBreakpointRequest::mutable_client_version() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.DeleteBreakpointRequest.client_version)
  return client_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteBreakpointRequest::release_client_version() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.DeleteBreakpointRequest.client_version)
  
  return client_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteBreakpointRequest::set_allocated_client_version(::std::string* client_version) {
  if (client_version != NULL) {
    
  } else {
    
  }
  client_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_version);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.DeleteBreakpointRequest.client_version)
}

inline const DeleteBreakpointRequest* DeleteBreakpointRequest::internal_default_instance() {
  return &DeleteBreakpointRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// ListBreakpointsRequest_BreakpointActionValue

// optional .google.devtools.clouddebugger.v2.Breakpoint.Action value = 1;
inline void ListBreakpointsRequest_BreakpointActionValue::clear_value() {
  value_ = 0;
}
inline ::google::devtools::clouddebugger::v2::Breakpoint_Action ListBreakpointsRequest_BreakpointActionValue::value() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.ListBreakpointsRequest.BreakpointActionValue.value)
  return static_cast< ::google::devtools::clouddebugger::v2::Breakpoint_Action >(value_);
}
inline void ListBreakpointsRequest_BreakpointActionValue::set_value(::google::devtools::clouddebugger::v2::Breakpoint_Action value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.ListBreakpointsRequest.BreakpointActionValue.value)
}

inline const ListBreakpointsRequest_BreakpointActionValue* ListBreakpointsRequest_BreakpointActionValue::internal_default_instance() {
  return &ListBreakpointsRequest_BreakpointActionValue_default_instance_.get();
}
// -------------------------------------------------------------------

// ListBreakpointsRequest

// optional string debuggee_id = 1;
inline void ListBreakpointsRequest::clear_debuggee_id() {
  debuggee_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListBreakpointsRequest::debuggee_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.ListBreakpointsRequest.debuggee_id)
  return debuggee_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListBreakpointsRequest::set_debuggee_id(const ::std::string& value) {
  
  debuggee_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.ListBreakpointsRequest.debuggee_id)
}
inline void ListBreakpointsRequest::set_debuggee_id(const char* value) {
  
  debuggee_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.clouddebugger.v2.ListBreakpointsRequest.debuggee_id)
}
inline void ListBreakpointsRequest::set_debuggee_id(const char* value, size_t size) {
  
  debuggee_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.clouddebugger.v2.ListBreakpointsRequest.debuggee_id)
}
inline ::std::string* ListBreakpointsRequest::mutable_debuggee_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.ListBreakpointsRequest.debuggee_id)
  return debuggee_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListBreakpointsRequest::release_debuggee_id() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.ListBreakpointsRequest.debuggee_id)
  
  return debuggee_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListBreakpointsRequest::set_allocated_debuggee_id(::std::string* debuggee_id) {
  if (debuggee_id != NULL) {
    
  } else {
    
  }
  debuggee_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), debuggee_id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.ListBreakpointsRequest.debuggee_id)
}

// optional bool include_all_users = 2;
inline void ListBreakpointsRequest::clear_include_all_users() {
  include_all_users_ = false;
}
inline bool ListBreakpointsRequest::include_all_users() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.ListBreakpointsRequest.include_all_users)
  return include_all_users_;
}
inline void ListBreakpointsRequest::set_include_all_users(bool value) {
  
  include_all_users_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.ListBreakpointsRequest.include_all_users)
}

// optional bool include_inactive = 3;
inline void ListBreakpointsRequest::clear_include_inactive() {
  include_inactive_ = false;
}
inline bool ListBreakpointsRequest::include_inactive() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.ListBreakpointsRequest.include_inactive)
  return include_inactive_;
}
inline void ListBreakpointsRequest::set_include_inactive(bool value) {
  
  include_inactive_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.ListBreakpointsRequest.include_inactive)
}

// optional .google.devtools.clouddebugger.v2.ListBreakpointsRequest.BreakpointActionValue action = 4;
inline bool ListBreakpointsRequest::has_action() const {
  return this != internal_default_instance() && action_ != NULL;
}
inline void ListBreakpointsRequest::clear_action() {
  if (GetArenaNoVirtual() == NULL && action_ != NULL) delete action_;
  action_ = NULL;
}
inline const ::google::devtools::clouddebugger::v2::ListBreakpointsRequest_BreakpointActionValue& ListBreakpointsRequest::action() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.ListBreakpointsRequest.action)
  return action_ != NULL ? *action_
                         : *::google::devtools::clouddebugger::v2::ListBreakpointsRequest_BreakpointActionValue::internal_default_instance();
}
inline ::google::devtools::clouddebugger::v2::ListBreakpointsRequest_BreakpointActionValue* ListBreakpointsRequest::mutable_action() {
  
  if (action_ == NULL) {
    action_ = new ::google::devtools::clouddebugger::v2::ListBreakpointsRequest_BreakpointActionValue;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.ListBreakpointsRequest.action)
  return action_;
}
inline ::google::devtools::clouddebugger::v2::ListBreakpointsRequest_BreakpointActionValue* ListBreakpointsRequest::release_action() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.ListBreakpointsRequest.action)
  
  ::google::devtools::clouddebugger::v2::ListBreakpointsRequest_BreakpointActionValue* temp = action_;
  action_ = NULL;
  return temp;
}
inline void ListBreakpointsRequest::set_allocated_action(::google::devtools::clouddebugger::v2::ListBreakpointsRequest_BreakpointActionValue* action) {
  delete action_;
  action_ = action;
  if (action) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.ListBreakpointsRequest.action)
}

// optional bool strip_results = 5 [deprecated = true];
inline void ListBreakpointsRequest::clear_strip_results() {
  strip_results_ = false;
}
inline bool ListBreakpointsRequest::strip_results() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.ListBreakpointsRequest.strip_results)
  return strip_results_;
}
inline void ListBreakpointsRequest::set_strip_results(bool value) {
  
  strip_results_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.ListBreakpointsRequest.strip_results)
}

// optional string wait_token = 6;
inline void ListBreakpointsRequest::clear_wait_token() {
  wait_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListBreakpointsRequest::wait_token() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.ListBreakpointsRequest.wait_token)
  return wait_token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListBreakpointsRequest::set_wait_token(const ::std::string& value) {
  
  wait_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.ListBreakpointsRequest.wait_token)
}
inline void ListBreakpointsRequest::set_wait_token(const char* value) {
  
  wait_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.clouddebugger.v2.ListBreakpointsRequest.wait_token)
}
inline void ListBreakpointsRequest::set_wait_token(const char* value, size_t size) {
  
  wait_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.clouddebugger.v2.ListBreakpointsRequest.wait_token)
}
inline ::std::string* ListBreakpointsRequest::mutable_wait_token() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.ListBreakpointsRequest.wait_token)
  return wait_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListBreakpointsRequest::release_wait_token() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.ListBreakpointsRequest.wait_token)
  
  return wait_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListBreakpointsRequest::set_allocated_wait_token(::std::string* wait_token) {
  if (wait_token != NULL) {
    
  } else {
    
  }
  wait_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wait_token);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.ListBreakpointsRequest.wait_token)
}

// optional string client_version = 8;
inline void ListBreakpointsRequest::clear_client_version() {
  client_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListBreakpointsRequest::client_version() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.ListBreakpointsRequest.client_version)
  return client_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListBreakpointsRequest::set_client_version(const ::std::string& value) {
  
  client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.ListBreakpointsRequest.client_version)
}
inline void ListBreakpointsRequest::set_client_version(const char* value) {
  
  client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.clouddebugger.v2.ListBreakpointsRequest.client_version)
}
inline void ListBreakpointsRequest::set_client_version(const char* value, size_t size) {
  
  client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.clouddebugger.v2.ListBreakpointsRequest.client_version)
}
inline ::std::string* ListBreakpointsRequest::mutable_client_version() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.ListBreakpointsRequest.client_version)
  return client_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListBreakpointsRequest::release_client_version() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.ListBreakpointsRequest.client_version)
  
  return client_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListBreakpointsRequest::set_allocated_client_version(::std::string* client_version) {
  if (client_version != NULL) {
    
  } else {
    
  }
  client_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_version);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.ListBreakpointsRequest.client_version)
}

inline const ListBreakpointsRequest* ListBreakpointsRequest::internal_default_instance() {
  return &ListBreakpointsRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// ListBreakpointsResponse

// repeated .google.devtools.clouddebugger.v2.Breakpoint breakpoints = 1;
inline int ListBreakpointsResponse::breakpoints_size() const {
  return breakpoints_.size();
}
inline void ListBreakpointsResponse::clear_breakpoints() {
  breakpoints_.Clear();
}
inline const ::google::devtools::clouddebugger::v2::Breakpoint& ListBreakpointsResponse::breakpoints(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.ListBreakpointsResponse.breakpoints)
  return breakpoints_.Get(index);
}
inline ::google::devtools::clouddebugger::v2::Breakpoint* ListBreakpointsResponse::mutable_breakpoints(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.ListBreakpointsResponse.breakpoints)
  return breakpoints_.Mutable(index);
}
inline ::google::devtools::clouddebugger::v2::Breakpoint* ListBreakpointsResponse::add_breakpoints() {
  // @@protoc_insertion_point(field_add:google.devtools.clouddebugger.v2.ListBreakpointsResponse.breakpoints)
  return breakpoints_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::Breakpoint >*
ListBreakpointsResponse::mutable_breakpoints() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.clouddebugger.v2.ListBreakpointsResponse.breakpoints)
  return &breakpoints_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::Breakpoint >&
ListBreakpointsResponse::breakpoints() const {
  // @@protoc_insertion_point(field_list:google.devtools.clouddebugger.v2.ListBreakpointsResponse.breakpoints)
  return breakpoints_;
}

// optional string next_wait_token = 2;
inline void ListBreakpointsResponse::clear_next_wait_token() {
  next_wait_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListBreakpointsResponse::next_wait_token() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.ListBreakpointsResponse.next_wait_token)
  return next_wait_token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListBreakpointsResponse::set_next_wait_token(const ::std::string& value) {
  
  next_wait_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.ListBreakpointsResponse.next_wait_token)
}
inline void ListBreakpointsResponse::set_next_wait_token(const char* value) {
  
  next_wait_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.clouddebugger.v2.ListBreakpointsResponse.next_wait_token)
}
inline void ListBreakpointsResponse::set_next_wait_token(const char* value, size_t size) {
  
  next_wait_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.clouddebugger.v2.ListBreakpointsResponse.next_wait_token)
}
inline ::std::string* ListBreakpointsResponse::mutable_next_wait_token() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.ListBreakpointsResponse.next_wait_token)
  return next_wait_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListBreakpointsResponse::release_next_wait_token() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.ListBreakpointsResponse.next_wait_token)
  
  return next_wait_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListBreakpointsResponse::set_allocated_next_wait_token(::std::string* next_wait_token) {
  if (next_wait_token != NULL) {
    
  } else {
    
  }
  next_wait_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_wait_token);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.ListBreakpointsResponse.next_wait_token)
}

inline const ListBreakpointsResponse* ListBreakpointsResponse::internal_default_instance() {
  return &ListBreakpointsResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// ListDebuggeesRequest

// optional string project = 2;
inline void ListDebuggeesRequest::clear_project() {
  project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListDebuggeesRequest::project() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.ListDebuggeesRequest.project)
  return project_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListDebuggeesRequest::set_project(const ::std::string& value) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.ListDebuggeesRequest.project)
}
inline void ListDebuggeesRequest::set_project(const char* value) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.clouddebugger.v2.ListDebuggeesRequest.project)
}
inline void ListDebuggeesRequest::set_project(const char* value, size_t size) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.clouddebugger.v2.ListDebuggeesRequest.project)
}
inline ::std::string* ListDebuggeesRequest::mutable_project() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.ListDebuggeesRequest.project)
  return project_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListDebuggeesRequest::release_project() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.ListDebuggeesRequest.project)
  
  return project_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListDebuggeesRequest::set_allocated_project(::std::string* project) {
  if (project != NULL) {
    
  } else {
    
  }
  project_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.ListDebuggeesRequest.project)
}

// optional bool include_inactive = 3;
inline void ListDebuggeesRequest::clear_include_inactive() {
  include_inactive_ = false;
}
inline bool ListDebuggeesRequest::include_inactive() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.ListDebuggeesRequest.include_inactive)
  return include_inactive_;
}
inline void ListDebuggeesRequest::set_include_inactive(bool value) {
  
  include_inactive_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.ListDebuggeesRequest.include_inactive)
}

// optional string client_version = 4;
inline void ListDebuggeesRequest::clear_client_version() {
  client_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListDebuggeesRequest::client_version() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.ListDebuggeesRequest.client_version)
  return client_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListDebuggeesRequest::set_client_version(const ::std::string& value) {
  
  client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.ListDebuggeesRequest.client_version)
}
inline void ListDebuggeesRequest::set_client_version(const char* value) {
  
  client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.clouddebugger.v2.ListDebuggeesRequest.client_version)
}
inline void ListDebuggeesRequest::set_client_version(const char* value, size_t size) {
  
  client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.clouddebugger.v2.ListDebuggeesRequest.client_version)
}
inline ::std::string* ListDebuggeesRequest::mutable_client_version() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.ListDebuggeesRequest.client_version)
  return client_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListDebuggeesRequest::release_client_version() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.ListDebuggeesRequest.client_version)
  
  return client_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListDebuggeesRequest::set_allocated_client_version(::std::string* client_version) {
  if (client_version != NULL) {
    
  } else {
    
  }
  client_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_version);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.ListDebuggeesRequest.client_version)
}

inline const ListDebuggeesRequest* ListDebuggeesRequest::internal_default_instance() {
  return &ListDebuggeesRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// ListDebuggeesResponse

// repeated .google.devtools.clouddebugger.v2.Debuggee debuggees = 1;
inline int ListDebuggeesResponse::debuggees_size() const {
  return debuggees_.size();
}
inline void ListDebuggeesResponse::clear_debuggees() {
  debuggees_.Clear();
}
inline const ::google::devtools::clouddebugger::v2::Debuggee& ListDebuggeesResponse::debuggees(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.ListDebuggeesResponse.debuggees)
  return debuggees_.Get(index);
}
inline ::google::devtools::clouddebugger::v2::Debuggee* ListDebuggeesResponse::mutable_debuggees(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.ListDebuggeesResponse.debuggees)
  return debuggees_.Mutable(index);
}
inline ::google::devtools::clouddebugger::v2::Debuggee* ListDebuggeesResponse::add_debuggees() {
  // @@protoc_insertion_point(field_add:google.devtools.clouddebugger.v2.ListDebuggeesResponse.debuggees)
  return debuggees_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::Debuggee >*
ListDebuggeesResponse::mutable_debuggees() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.clouddebugger.v2.ListDebuggeesResponse.debuggees)
  return &debuggees_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::Debuggee >&
ListDebuggeesResponse::debuggees() const {
  // @@protoc_insertion_point(field_list:google.devtools.clouddebugger.v2.ListDebuggeesResponse.debuggees)
  return debuggees_;
}

inline const ListDebuggeesResponse* ListDebuggeesResponse::internal_default_instance() {
  return &ListDebuggeesResponse_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace clouddebugger
}  // namespace devtools
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto__INCLUDED
