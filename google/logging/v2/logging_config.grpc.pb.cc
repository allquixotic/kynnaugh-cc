// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: google/logging/v2/logging_config.proto

#include "google/logging/v2/logging_config.pb.h"
#include "google/logging/v2/logging_config.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace google {
namespace logging {
namespace v2 {

static const char* ConfigServiceV2_method_names[] = {
  "/google.logging.v2.ConfigServiceV2/ListSinks",
  "/google.logging.v2.ConfigServiceV2/GetSink",
  "/google.logging.v2.ConfigServiceV2/CreateSink",
  "/google.logging.v2.ConfigServiceV2/UpdateSink",
  "/google.logging.v2.ConfigServiceV2/DeleteSink",
};

std::unique_ptr< ConfigServiceV2::Stub> ConfigServiceV2::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< ConfigServiceV2::Stub> stub(new ConfigServiceV2::Stub(channel));
  return stub;
}

ConfigServiceV2::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListSinks_(ConfigServiceV2_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSink_(ConfigServiceV2_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateSink_(ConfigServiceV2_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateSink_(ConfigServiceV2_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteSink_(ConfigServiceV2_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ConfigServiceV2::Stub::ListSinks(::grpc::ClientContext* context, const ::google::logging::v2::ListSinksRequest& request, ::google::logging::v2::ListSinksResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ListSinks_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListSinksResponse>* ConfigServiceV2::Stub::AsyncListSinksRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListSinksRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListSinksResponse>(channel_.get(), cq, rpcmethod_ListSinks_, context, request);
}

::grpc::Status ConfigServiceV2::Stub::GetSink(::grpc::ClientContext* context, const ::google::logging::v2::GetSinkRequest& request, ::google::logging::v2::LogSink* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetSink_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogSink>* ConfigServiceV2::Stub::AsyncGetSinkRaw(::grpc::ClientContext* context, const ::google::logging::v2::GetSinkRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogSink>(channel_.get(), cq, rpcmethod_GetSink_, context, request);
}

::grpc::Status ConfigServiceV2::Stub::CreateSink(::grpc::ClientContext* context, const ::google::logging::v2::CreateSinkRequest& request, ::google::logging::v2::LogSink* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_CreateSink_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogSink>* ConfigServiceV2::Stub::AsyncCreateSinkRaw(::grpc::ClientContext* context, const ::google::logging::v2::CreateSinkRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogSink>(channel_.get(), cq, rpcmethod_CreateSink_, context, request);
}

::grpc::Status ConfigServiceV2::Stub::UpdateSink(::grpc::ClientContext* context, const ::google::logging::v2::UpdateSinkRequest& request, ::google::logging::v2::LogSink* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateSink_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogSink>* ConfigServiceV2::Stub::AsyncUpdateSinkRaw(::grpc::ClientContext* context, const ::google::logging::v2::UpdateSinkRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogSink>(channel_.get(), cq, rpcmethod_UpdateSink_, context, request);
}

::grpc::Status ConfigServiceV2::Stub::DeleteSink(::grpc::ClientContext* context, const ::google::logging::v2::DeleteSinkRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteSink_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ConfigServiceV2::Stub::AsyncDeleteSinkRaw(::grpc::ClientContext* context, const ::google::logging::v2::DeleteSinkRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>(channel_.get(), cq, rpcmethod_DeleteSink_, context, request);
}

ConfigServiceV2::Service::Service() {
  (void)ConfigServiceV2_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      ConfigServiceV2_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ConfigServiceV2::Service, ::google::logging::v2::ListSinksRequest, ::google::logging::v2::ListSinksResponse>(
          std::mem_fn(&ConfigServiceV2::Service::ListSinks), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ConfigServiceV2_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ConfigServiceV2::Service, ::google::logging::v2::GetSinkRequest, ::google::logging::v2::LogSink>(
          std::mem_fn(&ConfigServiceV2::Service::GetSink), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ConfigServiceV2_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ConfigServiceV2::Service, ::google::logging::v2::CreateSinkRequest, ::google::logging::v2::LogSink>(
          std::mem_fn(&ConfigServiceV2::Service::CreateSink), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ConfigServiceV2_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ConfigServiceV2::Service, ::google::logging::v2::UpdateSinkRequest, ::google::logging::v2::LogSink>(
          std::mem_fn(&ConfigServiceV2::Service::UpdateSink), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ConfigServiceV2_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ConfigServiceV2::Service, ::google::logging::v2::DeleteSinkRequest, ::google::protobuf::Empty>(
          std::mem_fn(&ConfigServiceV2::Service::DeleteSink), this)));
}

ConfigServiceV2::Service::~Service() {
}

::grpc::Status ConfigServiceV2::Service::ListSinks(::grpc::ServerContext* context, const ::google::logging::v2::ListSinksRequest* request, ::google::logging::v2::ListSinksResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigServiceV2::Service::GetSink(::grpc::ServerContext* context, const ::google::logging::v2::GetSinkRequest* request, ::google::logging::v2::LogSink* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigServiceV2::Service::CreateSink(::grpc::ServerContext* context, const ::google::logging::v2::CreateSinkRequest* request, ::google::logging::v2::LogSink* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigServiceV2::Service::UpdateSink(::grpc::ServerContext* context, const ::google::logging::v2::UpdateSinkRequest* request, ::google::logging::v2::LogSink* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigServiceV2::Service::DeleteSink(::grpc::ServerContext* context, const ::google::logging::v2::DeleteSinkRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace logging
}  // namespace v2

