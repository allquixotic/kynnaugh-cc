// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/genomics/v1alpha2/pipelines.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/genomics/v1alpha2/pipelines.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace genomics {
namespace v1alpha2 {

namespace {

const ::google::protobuf::Descriptor* ComputeEngine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComputeEngine_reflection_ = NULL;
const ::google::protobuf::Descriptor* RuntimeMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RuntimeMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pipeline_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pipeline_reflection_ = NULL;
struct PipelineOneofInstance {
  const ::google::genomics::v1alpha2::DockerExecutor* docker_;
}* Pipeline_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* CreatePipelineRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreatePipelineRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RunPipelineArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunPipelineArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* RunPipelineArgs_InputsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RunPipelineArgs_OutputsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RunPipelineRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunPipelineRequest_reflection_ = NULL;
struct RunPipelineRequestOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr pipeline_id_;
  const ::google::genomics::v1alpha2::Pipeline* ephemeral_pipeline_;
}* RunPipelineRequest_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* GetPipelineRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPipelineRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListPipelinesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListPipelinesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListPipelinesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListPipelinesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeletePipelineRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeletePipelineRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetControllerConfigRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetControllerConfigRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ControllerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ControllerConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ControllerConfig_RepeatedString_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ControllerConfig_RepeatedString_reflection_ = NULL;
const ::google::protobuf::Descriptor* ControllerConfig_VarsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ControllerConfig_DisksEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ControllerConfig_GcsSourcesEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ControllerConfig_GcsSinksEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TimestampEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimestampEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetOperationStatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetOperationStatusRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceAccount_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoggingOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoggingOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* PipelineResources_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PipelineResources_reflection_ = NULL;
const ::google::protobuf::Descriptor* PipelineResources_Disk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PipelineResources_Disk_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PipelineResources_Disk_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PipelineParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PipelineParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* PipelineParameter_LocalCopy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PipelineParameter_LocalCopy_reflection_ = NULL;
const ::google::protobuf::Descriptor* DockerExecutor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DockerExecutor_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto() {
  protobuf_AddDesc_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "google/genomics/v1alpha2/pipelines.proto");
  GOOGLE_CHECK(file != NULL);
  ComputeEngine_descriptor_ = file->message_type(0);
  static const int ComputeEngine_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputeEngine, instance_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputeEngine, zone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputeEngine, machine_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputeEngine, disk_names_),
  };
  ComputeEngine_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ComputeEngine_descriptor_,
      ComputeEngine::internal_default_instance(),
      ComputeEngine_offsets_,
      -1,
      -1,
      -1,
      sizeof(ComputeEngine),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputeEngine, _internal_metadata_));
  RuntimeMetadata_descriptor_ = file->message_type(1);
  static const int RuntimeMetadata_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuntimeMetadata, compute_engine_),
  };
  RuntimeMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RuntimeMetadata_descriptor_,
      RuntimeMetadata::internal_default_instance(),
      RuntimeMetadata_offsets_,
      -1,
      -1,
      -1,
      sizeof(RuntimeMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuntimeMetadata, _internal_metadata_));
  Pipeline_descriptor_ = file->message_type(2);
  static const int Pipeline_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pipeline, project_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pipeline, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pipeline, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pipeline, input_parameters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pipeline, output_parameters_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Pipeline_default_oneof_instance_, docker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pipeline, resources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pipeline, pipeline_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pipeline, executor_),
  };
  Pipeline_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Pipeline_descriptor_,
      Pipeline::internal_default_instance(),
      Pipeline_offsets_,
      -1,
      -1,
      -1,
      Pipeline_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pipeline, _oneof_case_[0]),
      sizeof(Pipeline),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pipeline, _internal_metadata_));
  CreatePipelineRequest_descriptor_ = file->message_type(3);
  static const int CreatePipelineRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePipelineRequest, pipeline_),
  };
  CreatePipelineRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreatePipelineRequest_descriptor_,
      CreatePipelineRequest::internal_default_instance(),
      CreatePipelineRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreatePipelineRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePipelineRequest, _internal_metadata_));
  RunPipelineArgs_descriptor_ = file->message_type(4);
  static const int RunPipelineArgs_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunPipelineArgs, project_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunPipelineArgs, inputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunPipelineArgs, outputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunPipelineArgs, service_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunPipelineArgs, client_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunPipelineArgs, resources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunPipelineArgs, logging_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunPipelineArgs, keep_vm_alive_on_failure_duration_),
  };
  RunPipelineArgs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RunPipelineArgs_descriptor_,
      RunPipelineArgs::internal_default_instance(),
      RunPipelineArgs_offsets_,
      -1,
      -1,
      -1,
      sizeof(RunPipelineArgs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunPipelineArgs, _internal_metadata_));
  RunPipelineArgs_InputsEntry_descriptor_ = RunPipelineArgs_descriptor_->nested_type(0);
  RunPipelineArgs_OutputsEntry_descriptor_ = RunPipelineArgs_descriptor_->nested_type(1);
  RunPipelineRequest_descriptor_ = file->message_type(5);
  static const int RunPipelineRequest_offsets_[4] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RunPipelineRequest_default_oneof_instance_, pipeline_id_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RunPipelineRequest_default_oneof_instance_, ephemeral_pipeline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunPipelineRequest, pipeline_args_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunPipelineRequest, pipeline_),
  };
  RunPipelineRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RunPipelineRequest_descriptor_,
      RunPipelineRequest::internal_default_instance(),
      RunPipelineRequest_offsets_,
      -1,
      -1,
      -1,
      RunPipelineRequest_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunPipelineRequest, _oneof_case_[0]),
      sizeof(RunPipelineRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunPipelineRequest, _internal_metadata_));
  GetPipelineRequest_descriptor_ = file->message_type(6);
  static const int GetPipelineRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPipelineRequest, pipeline_id_),
  };
  GetPipelineRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetPipelineRequest_descriptor_,
      GetPipelineRequest::internal_default_instance(),
      GetPipelineRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetPipelineRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPipelineRequest, _internal_metadata_));
  ListPipelinesRequest_descriptor_ = file->message_type(7);
  static const int ListPipelinesRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListPipelinesRequest, project_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListPipelinesRequest, name_prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListPipelinesRequest, page_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListPipelinesRequest, page_token_),
  };
  ListPipelinesRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListPipelinesRequest_descriptor_,
      ListPipelinesRequest::internal_default_instance(),
      ListPipelinesRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListPipelinesRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListPipelinesRequest, _internal_metadata_));
  ListPipelinesResponse_descriptor_ = file->message_type(8);
  static const int ListPipelinesResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListPipelinesResponse, pipelines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListPipelinesResponse, next_page_token_),
  };
  ListPipelinesResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListPipelinesResponse_descriptor_,
      ListPipelinesResponse::internal_default_instance(),
      ListPipelinesResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListPipelinesResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListPipelinesResponse, _internal_metadata_));
  DeletePipelineRequest_descriptor_ = file->message_type(9);
  static const int DeletePipelineRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletePipelineRequest, pipeline_id_),
  };
  DeletePipelineRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeletePipelineRequest_descriptor_,
      DeletePipelineRequest::internal_default_instance(),
      DeletePipelineRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeletePipelineRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletePipelineRequest, _internal_metadata_));
  GetControllerConfigRequest_descriptor_ = file->message_type(10);
  static const int GetControllerConfigRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetControllerConfigRequest, operation_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetControllerConfigRequest, validation_token_),
  };
  GetControllerConfigRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetControllerConfigRequest_descriptor_,
      GetControllerConfigRequest::internal_default_instance(),
      GetControllerConfigRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetControllerConfigRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetControllerConfigRequest, _internal_metadata_));
  ControllerConfig_descriptor_ = file->message_type(11);
  static const int ControllerConfig_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerConfig, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerConfig, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerConfig, gcs_log_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerConfig, machine_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerConfig, vars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerConfig, disks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerConfig, gcs_sources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerConfig, gcs_sinks_),
  };
  ControllerConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ControllerConfig_descriptor_,
      ControllerConfig::internal_default_instance(),
      ControllerConfig_offsets_,
      -1,
      -1,
      -1,
      sizeof(ControllerConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerConfig, _internal_metadata_));
  ControllerConfig_RepeatedString_descriptor_ = ControllerConfig_descriptor_->nested_type(0);
  static const int ControllerConfig_RepeatedString_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerConfig_RepeatedString, values_),
  };
  ControllerConfig_RepeatedString_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ControllerConfig_RepeatedString_descriptor_,
      ControllerConfig_RepeatedString::internal_default_instance(),
      ControllerConfig_RepeatedString_offsets_,
      -1,
      -1,
      -1,
      sizeof(ControllerConfig_RepeatedString),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerConfig_RepeatedString, _internal_metadata_));
  ControllerConfig_VarsEntry_descriptor_ = ControllerConfig_descriptor_->nested_type(1);
  ControllerConfig_DisksEntry_descriptor_ = ControllerConfig_descriptor_->nested_type(2);
  ControllerConfig_GcsSourcesEntry_descriptor_ = ControllerConfig_descriptor_->nested_type(3);
  ControllerConfig_GcsSinksEntry_descriptor_ = ControllerConfig_descriptor_->nested_type(4);
  TimestampEvent_descriptor_ = file->message_type(12);
  static const int TimestampEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimestampEvent, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimestampEvent, timestamp_),
  };
  TimestampEvent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TimestampEvent_descriptor_,
      TimestampEvent::internal_default_instance(),
      TimestampEvent_offsets_,
      -1,
      -1,
      -1,
      sizeof(TimestampEvent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimestampEvent, _internal_metadata_));
  SetOperationStatusRequest_descriptor_ = file->message_type(13);
  static const int SetOperationStatusRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetOperationStatusRequest, operation_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetOperationStatusRequest, timestamp_events_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetOperationStatusRequest, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetOperationStatusRequest, error_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetOperationStatusRequest, validation_token_),
  };
  SetOperationStatusRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetOperationStatusRequest_descriptor_,
      SetOperationStatusRequest::internal_default_instance(),
      SetOperationStatusRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetOperationStatusRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetOperationStatusRequest, _internal_metadata_));
  ServiceAccount_descriptor_ = file->message_type(14);
  static const int ServiceAccount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceAccount, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceAccount, scopes_),
  };
  ServiceAccount_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServiceAccount_descriptor_,
      ServiceAccount::internal_default_instance(),
      ServiceAccount_offsets_,
      -1,
      -1,
      -1,
      sizeof(ServiceAccount),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceAccount, _internal_metadata_));
  LoggingOptions_descriptor_ = file->message_type(15);
  static const int LoggingOptions_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggingOptions, gcs_path_),
  };
  LoggingOptions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoggingOptions_descriptor_,
      LoggingOptions::internal_default_instance(),
      LoggingOptions_offsets_,
      -1,
      -1,
      -1,
      sizeof(LoggingOptions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggingOptions, _internal_metadata_));
  PipelineResources_descriptor_ = file->message_type(16);
  static const int PipelineResources_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PipelineResources, minimum_cpu_cores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PipelineResources, preemptible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PipelineResources, minimum_ram_gb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PipelineResources, disks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PipelineResources, zones_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PipelineResources, boot_disk_size_gb_),
  };
  PipelineResources_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PipelineResources_descriptor_,
      PipelineResources::internal_default_instance(),
      PipelineResources_offsets_,
      -1,
      -1,
      -1,
      sizeof(PipelineResources),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PipelineResources, _internal_metadata_));
  PipelineResources_Disk_descriptor_ = PipelineResources_descriptor_->nested_type(0);
  static const int PipelineResources_Disk_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PipelineResources_Disk, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PipelineResources_Disk, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PipelineResources_Disk, size_gb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PipelineResources_Disk, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PipelineResources_Disk, auto_delete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PipelineResources_Disk, read_only_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PipelineResources_Disk, mount_point_),
  };
  PipelineResources_Disk_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PipelineResources_Disk_descriptor_,
      PipelineResources_Disk::internal_default_instance(),
      PipelineResources_Disk_offsets_,
      -1,
      -1,
      -1,
      sizeof(PipelineResources_Disk),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PipelineResources_Disk, _internal_metadata_));
  PipelineResources_Disk_Type_descriptor_ = PipelineResources_Disk_descriptor_->enum_type(0);
  PipelineParameter_descriptor_ = file->message_type(17);
  static const int PipelineParameter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PipelineParameter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PipelineParameter, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PipelineParameter, default_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PipelineParameter, local_copy_),
  };
  PipelineParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PipelineParameter_descriptor_,
      PipelineParameter::internal_default_instance(),
      PipelineParameter_offsets_,
      -1,
      -1,
      -1,
      sizeof(PipelineParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PipelineParameter, _internal_metadata_));
  PipelineParameter_LocalCopy_descriptor_ = PipelineParameter_descriptor_->nested_type(0);
  static const int PipelineParameter_LocalCopy_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PipelineParameter_LocalCopy, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PipelineParameter_LocalCopy, disk_),
  };
  PipelineParameter_LocalCopy_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PipelineParameter_LocalCopy_descriptor_,
      PipelineParameter_LocalCopy::internal_default_instance(),
      PipelineParameter_LocalCopy_offsets_,
      -1,
      -1,
      -1,
      sizeof(PipelineParameter_LocalCopy),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PipelineParameter_LocalCopy, _internal_metadata_));
  DockerExecutor_descriptor_ = file->message_type(18);
  static const int DockerExecutor_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerExecutor, image_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerExecutor, cmd_),
  };
  DockerExecutor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DockerExecutor_descriptor_,
      DockerExecutor::internal_default_instance(),
      DockerExecutor_offsets_,
      -1,
      -1,
      -1,
      sizeof(DockerExecutor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerExecutor, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ComputeEngine_descriptor_, ComputeEngine::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RuntimeMetadata_descriptor_, RuntimeMetadata::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Pipeline_descriptor_, Pipeline::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreatePipelineRequest_descriptor_, CreatePipelineRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RunPipelineArgs_descriptor_, RunPipelineArgs::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        RunPipelineArgs_InputsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                RunPipelineArgs_InputsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        RunPipelineArgs_OutputsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                RunPipelineArgs_OutputsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RunPipelineRequest_descriptor_, RunPipelineRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetPipelineRequest_descriptor_, GetPipelineRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListPipelinesRequest_descriptor_, ListPipelinesRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListPipelinesResponse_descriptor_, ListPipelinesResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeletePipelineRequest_descriptor_, DeletePipelineRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetControllerConfigRequest_descriptor_, GetControllerConfigRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ControllerConfig_descriptor_, ControllerConfig::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ControllerConfig_RepeatedString_descriptor_, ControllerConfig_RepeatedString::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ControllerConfig_VarsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                ControllerConfig_VarsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ControllerConfig_DisksEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                ControllerConfig_DisksEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ControllerConfig_GcsSourcesEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::google::genomics::v1alpha2::ControllerConfig_RepeatedString,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                ControllerConfig_GcsSourcesEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ControllerConfig_GcsSinksEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::google::genomics::v1alpha2::ControllerConfig_RepeatedString,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                ControllerConfig_GcsSinksEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TimestampEvent_descriptor_, TimestampEvent::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetOperationStatusRequest_descriptor_, SetOperationStatusRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServiceAccount_descriptor_, ServiceAccount::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoggingOptions_descriptor_, LoggingOptions::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PipelineResources_descriptor_, PipelineResources::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PipelineResources_Disk_descriptor_, PipelineResources_Disk::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PipelineParameter_descriptor_, PipelineParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PipelineParameter_LocalCopy_descriptor_, PipelineParameter_LocalCopy::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DockerExecutor_descriptor_, DockerExecutor::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto() {
  ComputeEngine_default_instance_.Shutdown();
  delete ComputeEngine_reflection_;
  RuntimeMetadata_default_instance_.Shutdown();
  delete RuntimeMetadata_reflection_;
  Pipeline_default_instance_.Shutdown();
  delete Pipeline_default_oneof_instance_;
  delete Pipeline_reflection_;
  CreatePipelineRequest_default_instance_.Shutdown();
  delete CreatePipelineRequest_reflection_;
  RunPipelineArgs_default_instance_.Shutdown();
  delete RunPipelineArgs_reflection_;
  RunPipelineRequest_default_instance_.Shutdown();
  delete RunPipelineRequest_default_oneof_instance_;
  delete RunPipelineRequest_reflection_;
  GetPipelineRequest_default_instance_.Shutdown();
  delete GetPipelineRequest_reflection_;
  ListPipelinesRequest_default_instance_.Shutdown();
  delete ListPipelinesRequest_reflection_;
  ListPipelinesResponse_default_instance_.Shutdown();
  delete ListPipelinesResponse_reflection_;
  DeletePipelineRequest_default_instance_.Shutdown();
  delete DeletePipelineRequest_reflection_;
  GetControllerConfigRequest_default_instance_.Shutdown();
  delete GetControllerConfigRequest_reflection_;
  ControllerConfig_default_instance_.Shutdown();
  delete ControllerConfig_reflection_;
  ControllerConfig_RepeatedString_default_instance_.Shutdown();
  delete ControllerConfig_RepeatedString_reflection_;
  TimestampEvent_default_instance_.Shutdown();
  delete TimestampEvent_reflection_;
  SetOperationStatusRequest_default_instance_.Shutdown();
  delete SetOperationStatusRequest_reflection_;
  ServiceAccount_default_instance_.Shutdown();
  delete ServiceAccount_reflection_;
  LoggingOptions_default_instance_.Shutdown();
  delete LoggingOptions_reflection_;
  PipelineResources_default_instance_.Shutdown();
  delete PipelineResources_reflection_;
  PipelineResources_Disk_default_instance_.Shutdown();
  delete PipelineResources_Disk_reflection_;
  PipelineParameter_default_instance_.Shutdown();
  delete PipelineParameter_reflection_;
  PipelineParameter_LocalCopy_default_instance_.Shutdown();
  delete PipelineParameter_LocalCopy_reflection_;
  DockerExecutor_default_instance_.Shutdown();
  delete DockerExecutor_reflection_;
}

void protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::api::protobuf_InitDefaults_google_2fapi_2fannotations_2eproto();
  ::google::longrunning::protobuf_InitDefaults_google_2flongrunning_2foperations_2eproto();
  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2fduration_2eproto();
  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2fempty_2eproto();
  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2ftimestamp_2eproto();
  ::google::rpc::protobuf_InitDefaults_google_2frpc_2fcode_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  ComputeEngine_default_instance_.DefaultConstruct();
  RuntimeMetadata_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Pipeline_default_instance_.DefaultConstruct();
  Pipeline_default_oneof_instance_ = new PipelineOneofInstance();
  CreatePipelineRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  RunPipelineArgs_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  RunPipelineRequest_default_instance_.DefaultConstruct();
  RunPipelineRequest_default_oneof_instance_ = new RunPipelineRequestOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  GetPipelineRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ListPipelinesRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ListPipelinesResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  DeletePipelineRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  GetControllerConfigRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ControllerConfig_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ControllerConfig_RepeatedString_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TimestampEvent_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SetOperationStatusRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ServiceAccount_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  LoggingOptions_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  PipelineResources_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  PipelineResources_Disk_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  PipelineParameter_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  PipelineParameter_LocalCopy_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  DockerExecutor_default_instance_.DefaultConstruct();
  ComputeEngine_default_instance_.get_mutable()->InitAsDefaultInstance();
  RuntimeMetadata_default_instance_.get_mutable()->InitAsDefaultInstance();
  Pipeline_default_instance_.get_mutable()->InitAsDefaultInstance();
  CreatePipelineRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  RunPipelineArgs_default_instance_.get_mutable()->InitAsDefaultInstance();
  RunPipelineRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  GetPipelineRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  ListPipelinesRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  ListPipelinesResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  DeletePipelineRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  GetControllerConfigRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  ControllerConfig_default_instance_.get_mutable()->InitAsDefaultInstance();
  ControllerConfig_RepeatedString_default_instance_.get_mutable()->InitAsDefaultInstance();
  TimestampEvent_default_instance_.get_mutable()->InitAsDefaultInstance();
  SetOperationStatusRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  ServiceAccount_default_instance_.get_mutable()->InitAsDefaultInstance();
  LoggingOptions_default_instance_.get_mutable()->InitAsDefaultInstance();
  PipelineResources_default_instance_.get_mutable()->InitAsDefaultInstance();
  PipelineResources_Disk_default_instance_.get_mutable()->InitAsDefaultInstance();
  PipelineParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  PipelineParameter_LocalCopy_default_instance_.get_mutable()->InitAsDefaultInstance();
  DockerExecutor_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto_once_);
void protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto_once_,
                 &protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto_impl);
}
void protobuf_AddDesc_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n(google/genomics/v1alpha2/pipelines.pro"
    "to\022\030google.genomics.v1alpha2\032\034google/api"
    "/annotations.proto\032#google/longrunning/o"
    "perations.proto\032\036google/protobuf/duratio"
    "n.proto\032\033google/protobuf/empty.proto\032\037go"
    "ogle/protobuf/timestamp.proto\032\025google/rp"
    "c/code.proto\"^\n\rComputeEngine\022\025\n\rinstanc"
    "e_name\030\001 \001(\t\022\014\n\004zone\030\002 \001(\t\022\024\n\014machine_ty"
    "pe\030\003 \001(\t\022\022\n\ndisk_names\030\004 \003(\t\"R\n\017RuntimeM"
    "etadata\022\?\n\016compute_engine\030\001 \001(\0132\'.google"
    ".genomics.v1alpha2.ComputeEngine\"\355\002\n\010Pip"
    "eline\022\022\n\nproject_id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022"
    "\023\n\013description\030\003 \001(\t\022E\n\020input_parameters"
    "\030\010 \003(\0132+.google.genomics.v1alpha2.Pipeli"
    "neParameter\022F\n\021output_parameters\030\t \003(\0132+"
    ".google.genomics.v1alpha2.PipelineParame"
    "ter\022:\n\006docker\030\005 \001(\0132(.google.genomics.v1"
    "alpha2.DockerExecutorH\000\022>\n\tresources\030\006 \001"
    "(\0132+.google.genomics.v1alpha2.PipelineRe"
    "sources\022\023\n\013pipeline_id\030\007 \001(\tB\n\n\010executor"
    "\"M\n\025CreatePipelineRequest\0224\n\010pipeline\030\001 "
    "\001(\0132\".google.genomics.v1alpha2.Pipeline\""
    "\253\004\n\017RunPipelineArgs\022\022\n\nproject_id\030\001 \001(\t\022"
    "E\n\006inputs\030\002 \003(\01325.google.genomics.v1alph"
    "a2.RunPipelineArgs.InputsEntry\022G\n\007output"
    "s\030\003 \003(\01326.google.genomics.v1alpha2.RunPi"
    "pelineArgs.OutputsEntry\022A\n\017service_accou"
    "nt\030\004 \001(\0132(.google.genomics.v1alpha2.Serv"
    "iceAccount\022\021\n\tclient_id\030\005 \001(\t\022>\n\tresourc"
    "es\030\006 \001(\0132+.google.genomics.v1alpha2.Pipe"
    "lineResources\0229\n\007logging\030\007 \001(\0132(.google."
    "genomics.v1alpha2.LoggingOptions\022D\n!keep"
    "_vm_alive_on_failure_duration\030\010 \001(\0132\031.go"
    "ogle.protobuf.Duration\032-\n\013InputsEntry\022\013\n"
    "\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032.\n\014Outputs"
    "Entry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\273\001"
    "\n\022RunPipelineRequest\022\025\n\013pipeline_id\030\001 \001("
    "\tH\000\022@\n\022ephemeral_pipeline\030\002 \001(\0132\".google"
    ".genomics.v1alpha2.PipelineH\000\022@\n\rpipelin"
    "e_args\030\003 \001(\0132).google.genomics.v1alpha2."
    "RunPipelineArgsB\n\n\010pipeline\")\n\022GetPipeli"
    "neRequest\022\023\n\013pipeline_id\030\001 \001(\t\"f\n\024ListPi"
    "pelinesRequest\022\022\n\nproject_id\030\001 \001(\t\022\023\n\013na"
    "me_prefix\030\002 \001(\t\022\021\n\tpage_size\030\003 \001(\005\022\022\n\npa"
    "ge_token\030\004 \001(\t\"g\n\025ListPipelinesResponse\022"
    "5\n\tpipelines\030\001 \003(\0132\".google.genomics.v1a"
    "lpha2.Pipeline\022\027\n\017next_page_token\030\002 \001(\t\""
    ",\n\025DeletePipelineRequest\022\023\n\013pipeline_id\030"
    "\001 \001(\t\"L\n\032GetControllerConfigRequest\022\024\n\014o"
    "peration_id\030\001 \001(\t\022\030\n\020validation_token\030\002 "
    "\001(\004\"\331\005\n\020ControllerConfig\022\r\n\005image\030\001 \001(\t\022"
    "\013\n\003cmd\030\002 \001(\t\022\024\n\014gcs_log_path\030\003 \001(\t\022\024\n\014ma"
    "chine_type\030\004 \001(\t\022B\n\004vars\030\005 \003(\01324.google."
    "genomics.v1alpha2.ControllerConfig.VarsE"
    "ntry\022D\n\005disks\030\006 \003(\01325.google.genomics.v1"
    "alpha2.ControllerConfig.DisksEntry\022O\n\013gc"
    "s_sources\030\007 \003(\0132:.google.genomics.v1alph"
    "a2.ControllerConfig.GcsSourcesEntry\022K\n\tg"
    "cs_sinks\030\010 \003(\01328.google.genomics.v1alpha"
    "2.ControllerConfig.GcsSinksEntry\032 \n\016Repe"
    "atedString\022\016\n\006values\030\001 \003(\t\032+\n\tVarsEntry\022"
    "\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032,\n\nDisks"
    "Entry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032l\n"
    "\017GcsSourcesEntry\022\013\n\003key\030\001 \001(\t\022H\n\005value\030\002"
    " \001(\01329.google.genomics.v1alpha2.Controll"
    "erConfig.RepeatedString:\0028\001\032j\n\rGcsSinksE"
    "ntry\022\013\n\003key\030\001 \001(\t\022H\n\005value\030\002 \001(\01329.googl"
    "e.genomics.v1alpha2.ControllerConfig.Rep"
    "eatedString:\0028\001\"T\n\016TimestampEvent\022\023\n\013des"
    "cription\030\001 \001(\t\022-\n\ttimestamp\030\002 \001(\0132\032.goog"
    "le.protobuf.Timestamp\"\314\001\n\031SetOperationSt"
    "atusRequest\022\024\n\014operation_id\030\001 \001(\t\022B\n\020tim"
    "estamp_events\030\002 \003(\0132(.google.genomics.v1"
    "alpha2.TimestampEvent\022$\n\nerror_code\030\003 \001("
    "\0162\020.google.rpc.Code\022\025\n\rerror_message\030\004 \001"
    "(\t\022\030\n\020validation_token\030\005 \001(\004\"/\n\016ServiceA"
    "ccount\022\r\n\005email\030\001 \001(\t\022\016\n\006scopes\030\002 \003(\t\"\"\n"
    "\016LoggingOptions\022\020\n\010gcs_path\030\001 \001(\t\"\325\003\n\021Pi"
    "pelineResources\022\031\n\021minimum_cpu_cores\030\001 \001"
    "(\005\022\023\n\013preemptible\030\002 \001(\010\022\026\n\016minimum_ram_g"
    "b\030\003 \001(\001\022\?\n\005disks\030\004 \003(\01320.google.genomics"
    ".v1alpha2.PipelineResources.Disk\022\r\n\005zone"
    "s\030\005 \003(\t\022\031\n\021boot_disk_size_gb\030\006 \001(\005\032\214\002\n\004D"
    "isk\022\014\n\004name\030\001 \001(\t\022C\n\004type\030\002 \001(\01625.google"
    ".genomics.v1alpha2.PipelineResources.Dis"
    "k.Type\022\017\n\007size_gb\030\003 \001(\005\022\016\n\006source\030\004 \001(\t\022"
    "\023\n\013auto_delete\030\006 \001(\010\022\021\n\tread_only\030\007 \001(\010\022"
    "\023\n\013mount_point\030\010 \001(\t\"S\n\004Type\022\024\n\020TYPE_UNS"
    "PECIFIED\020\000\022\022\n\016PERSISTENT_HDD\020\001\022\022\n\016PERSIS"
    "TENT_SSD\020\002\022\r\n\tLOCAL_SSD\020\003\"\301\001\n\021PipelinePa"
    "rameter\022\014\n\004name\030\001 \001(\t\022\023\n\013description\030\002 \001"
    "(\t\022\025\n\rdefault_value\030\005 \001(\t\022I\n\nlocal_copy\030"
    "\006 \001(\01325.google.genomics.v1alpha2.Pipelin"
    "eParameter.LocalCopy\032\'\n\tLocalCopy\022\014\n\004pat"
    "h\030\001 \001(\t\022\014\n\004disk\030\002 \001(\t\"1\n\016DockerExecutor\022"
    "\022\n\nimage_name\030\001 \001(\t\022\013\n\003cmd\030\002 \001(\t2\210\010\n\021Pip"
    "elinesV1Alpha2\022\214\001\n\016CreatePipeline\022/.goog"
    "le.genomics.v1alpha2.CreatePipelineReque"
    "st\032\".google.genomics.v1alpha2.Pipeline\"%"
    "\202\323\344\223\002\037\"\023/v1alpha2/pipelines:\010pipeline\022~\n"
    "\013RunPipeline\022,.google.genomics.v1alpha2."
    "RunPipelineRequest\032\035.google.longrunning."
    "Operation\"\"\202\323\344\223\002\034\"\027/v1alpha2/pipelines:r"
    "un:\001*\022\212\001\n\013GetPipeline\022,.google.genomics."
    "v1alpha2.GetPipelineRequest\032\".google.gen"
    "omics.v1alpha2.Pipeline\")\202\323\344\223\002#\022!/v1alph"
    "a2/pipelines/{pipeline_id}\022\215\001\n\rListPipel"
    "ines\022..google.genomics.v1alpha2.ListPipe"
    "linesRequest\032/.google.genomics.v1alpha2."
    "ListPipelinesResponse\"\033\202\323\344\223\002\025\022\023/v1alpha2"
    "/pipelines\022\204\001\n\016DeletePipeline\022/.google.g"
    "enomics.v1alpha2.DeletePipelineRequest\032\026"
    ".google.protobuf.Empty\")\202\323\344\223\002#*!/v1alpha"
    "2/pipelines/{pipeline_id}\022\250\001\n\023GetControl"
    "lerConfig\0224.google.genomics.v1alpha2.Get"
    "ControllerConfigRequest\032*.google.genomic"
    "s.v1alpha2.ControllerConfig\"/\202\323\344\223\002)\022\'/v1"
    "alpha2/pipelines:getControllerConfig\022\224\001\n"
    "\022SetOperationStatus\0223.google.genomics.v1"
    "alpha2.SetOperationStatusRequest\032\026.googl"
    "e.protobuf.Empty\"1\202\323\344\223\002+\032&/v1alpha2/pipe"
    "lines:setOperationStatus:\001*Bp\n\027com.googl"
    "e.genomics.v1aB\016PipelinesProtoP\001Z@google"
    ".golang.org/genproto/googleapis/genomics"
    "/v1alpha2;genomics\370\001\001b\006proto3", 4989);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/genomics/v1alpha2/pipelines.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_AddDesc_google_2fapi_2fannotations_2eproto();
  ::google::longrunning::protobuf_AddDesc_google_2flongrunning_2foperations_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fduration_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fempty_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2ftimestamp_2eproto();
  ::google::rpc::protobuf_AddDesc_google_2frpc_2fcode_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto_once_);
void protobuf_AddDesc_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto_once_,
                 &protobuf_AddDesc_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto {
  StaticDescriptorInitializer_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto() {
    protobuf_AddDesc_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  }
} static_descriptor_initializer_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComputeEngine::kInstanceNameFieldNumber;
const int ComputeEngine::kZoneFieldNumber;
const int ComputeEngine::kMachineTypeFieldNumber;
const int ComputeEngine::kDiskNamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComputeEngine::ComputeEngine()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1alpha2.ComputeEngine)
}
ComputeEngine::ComputeEngine(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  disk_names_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1alpha2.ComputeEngine)
}

void ComputeEngine::InitAsDefaultInstance() {
}

ComputeEngine::ComputeEngine(const ComputeEngine& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1alpha2.ComputeEngine)
}

void ComputeEngine::SharedCtor() {
  instance_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ComputeEngine::~ComputeEngine() {
  // @@protoc_insertion_point(destructor:google.genomics.v1alpha2.ComputeEngine)
  SharedDtor();
}

void ComputeEngine::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  instance_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  zone_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  machine_type_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void ComputeEngine::ArenaDtor(void* object) {
  ComputeEngine* _this = reinterpret_cast< ComputeEngine* >(object);
  (void)_this;
}
void ComputeEngine::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ComputeEngine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComputeEngine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComputeEngine_descriptor_;
}

const ComputeEngine& ComputeEngine::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ComputeEngine> ComputeEngine_default_instance_;

ComputeEngine* ComputeEngine::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ComputeEngine>(arena);
}

void ComputeEngine::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1alpha2.ComputeEngine)
  instance_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  zone_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  machine_type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  disk_names_.Clear();
}

bool ComputeEngine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1alpha2.ComputeEngine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string instance_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instance_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instance_name().data(), this->instance_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.ComputeEngine.instance_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_zone;
        break;
      }

      // optional string zone = 2;
      case 2: {
        if (tag == 18) {
         parse_zone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zone().data(), this->zone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.ComputeEngine.zone"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_machine_type;
        break;
      }

      // optional string machine_type = 3;
      case 3: {
        if (tag == 26) {
         parse_machine_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->machine_type().data(), this->machine_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.ComputeEngine.machine_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_disk_names;
        break;
      }

      // repeated string disk_names = 4;
      case 4: {
        if (tag == 34) {
         parse_disk_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_disk_names()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->disk_names(this->disk_names_size() - 1).data(),
            this->disk_names(this->disk_names_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.ComputeEngine.disk_names"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_disk_names;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1alpha2.ComputeEngine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1alpha2.ComputeEngine)
  return false;
#undef DO_
}

void ComputeEngine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1alpha2.ComputeEngine)
  // optional string instance_name = 1;
  if (this->instance_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance_name().data(), this->instance_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.ComputeEngine.instance_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->instance_name(), output);
  }

  // optional string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.ComputeEngine.zone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->zone(), output);
  }

  // optional string machine_type = 3;
  if (this->machine_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->machine_type().data(), this->machine_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.ComputeEngine.machine_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->machine_type(), output);
  }

  // repeated string disk_names = 4;
  for (int i = 0; i < this->disk_names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->disk_names(i).data(), this->disk_names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.ComputeEngine.disk_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->disk_names(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1alpha2.ComputeEngine)
}

::google::protobuf::uint8* ComputeEngine::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1alpha2.ComputeEngine)
  // optional string instance_name = 1;
  if (this->instance_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance_name().data(), this->instance_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.ComputeEngine.instance_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instance_name(), target);
  }

  // optional string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.ComputeEngine.zone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->zone(), target);
  }

  // optional string machine_type = 3;
  if (this->machine_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->machine_type().data(), this->machine_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.ComputeEngine.machine_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->machine_type(), target);
  }

  // repeated string disk_names = 4;
  for (int i = 0; i < this->disk_names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->disk_names(i).data(), this->disk_names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.ComputeEngine.disk_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->disk_names(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1alpha2.ComputeEngine)
  return target;
}

size_t ComputeEngine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1alpha2.ComputeEngine)
  size_t total_size = 0;

  // optional string instance_name = 1;
  if (this->instance_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instance_name());
  }

  // optional string zone = 2;
  if (this->zone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zone());
  }

  // optional string machine_type = 3;
  if (this->machine_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->machine_type());
  }

  // repeated string disk_names = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->disk_names_size());
  for (int i = 0; i < this->disk_names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->disk_names(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComputeEngine::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1alpha2.ComputeEngine)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ComputeEngine* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ComputeEngine>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1alpha2.ComputeEngine)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1alpha2.ComputeEngine)
    UnsafeMergeFrom(*source);
  }
}

void ComputeEngine::MergeFrom(const ComputeEngine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1alpha2.ComputeEngine)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ComputeEngine::UnsafeMergeFrom(const ComputeEngine& from) {
  GOOGLE_DCHECK(&from != this);
  disk_names_.UnsafeMergeFrom(from.disk_names_);
  if (from.instance_name().size() > 0) {
    set_instance_name(from.instance_name());
  }
  if (from.zone().size() > 0) {
    set_zone(from.zone());
  }
  if (from.machine_type().size() > 0) {
    set_machine_type(from.machine_type());
  }
}

void ComputeEngine::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1alpha2.ComputeEngine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComputeEngine::CopyFrom(const ComputeEngine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1alpha2.ComputeEngine)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ComputeEngine::IsInitialized() const {

  return true;
}

void ComputeEngine::Swap(ComputeEngine* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ComputeEngine temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ComputeEngine::UnsafeArenaSwap(ComputeEngine* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ComputeEngine::InternalSwap(ComputeEngine* other) {
  instance_name_.Swap(&other->instance_name_);
  zone_.Swap(&other->zone_);
  machine_type_.Swap(&other->machine_type_);
  disk_names_.UnsafeArenaSwap(&other->disk_names_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ComputeEngine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComputeEngine_descriptor_;
  metadata.reflection = ComputeEngine_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ComputeEngine

// optional string instance_name = 1;
void ComputeEngine::clear_instance_name() {
  instance_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ComputeEngine::instance_name() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.ComputeEngine.instance_name)
  return instance_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ComputeEngine::set_instance_name(const ::std::string& value) {
  
  instance_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.ComputeEngine.instance_name)
}
void ComputeEngine::set_instance_name(const char* value) {
  
  instance_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.ComputeEngine.instance_name)
}
void ComputeEngine::set_instance_name(const char* value,
    size_t size) {
  
  instance_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.ComputeEngine.instance_name)
}
::std::string* ComputeEngine::mutable_instance_name() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.ComputeEngine.instance_name)
  return instance_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ComputeEngine::release_instance_name() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.ComputeEngine.instance_name)
  
  return instance_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ComputeEngine::unsafe_arena_release_instance_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.ComputeEngine.instance_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return instance_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ComputeEngine::set_allocated_instance_name(::std::string* instance_name) {
  if (instance_name != NULL) {
    
  } else {
    
  }
  instance_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.ComputeEngine.instance_name)
}
void ComputeEngine::unsafe_arena_set_allocated_instance_name(
    ::std::string* instance_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (instance_name != NULL) {
    
  } else {
    
  }
  instance_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      instance_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.ComputeEngine.instance_name)
}

// optional string zone = 2;
void ComputeEngine::clear_zone() {
  zone_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ComputeEngine::zone() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.ComputeEngine.zone)
  return zone_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ComputeEngine::set_zone(const ::std::string& value) {
  
  zone_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.ComputeEngine.zone)
}
void ComputeEngine::set_zone(const char* value) {
  
  zone_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.ComputeEngine.zone)
}
void ComputeEngine::set_zone(const char* value,
    size_t size) {
  
  zone_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.ComputeEngine.zone)
}
::std::string* ComputeEngine::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.ComputeEngine.zone)
  return zone_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ComputeEngine::release_zone() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.ComputeEngine.zone)
  
  return zone_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ComputeEngine::unsafe_arena_release_zone() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.ComputeEngine.zone)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return zone_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ComputeEngine::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.ComputeEngine.zone)
}
void ComputeEngine::unsafe_arena_set_allocated_zone(
    ::std::string* zone) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      zone, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.ComputeEngine.zone)
}

// optional string machine_type = 3;
void ComputeEngine::clear_machine_type() {
  machine_type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ComputeEngine::machine_type() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.ComputeEngine.machine_type)
  return machine_type_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ComputeEngine::set_machine_type(const ::std::string& value) {
  
  machine_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.ComputeEngine.machine_type)
}
void ComputeEngine::set_machine_type(const char* value) {
  
  machine_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.ComputeEngine.machine_type)
}
void ComputeEngine::set_machine_type(const char* value,
    size_t size) {
  
  machine_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.ComputeEngine.machine_type)
}
::std::string* ComputeEngine::mutable_machine_type() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.ComputeEngine.machine_type)
  return machine_type_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ComputeEngine::release_machine_type() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.ComputeEngine.machine_type)
  
  return machine_type_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ComputeEngine::unsafe_arena_release_machine_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.ComputeEngine.machine_type)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return machine_type_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ComputeEngine::set_allocated_machine_type(::std::string* machine_type) {
  if (machine_type != NULL) {
    
  } else {
    
  }
  machine_type_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_type,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.ComputeEngine.machine_type)
}
void ComputeEngine::unsafe_arena_set_allocated_machine_type(
    ::std::string* machine_type) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (machine_type != NULL) {
    
  } else {
    
  }
  machine_type_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      machine_type, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.ComputeEngine.machine_type)
}

// repeated string disk_names = 4;
int ComputeEngine::disk_names_size() const {
  return disk_names_.size();
}
void ComputeEngine::clear_disk_names() {
  disk_names_.Clear();
}
const ::std::string& ComputeEngine::disk_names(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.ComputeEngine.disk_names)
  return disk_names_.Get(index);
}
::std::string* ComputeEngine::mutable_disk_names(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.ComputeEngine.disk_names)
  return disk_names_.Mutable(index);
}
void ComputeEngine::set_disk_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.ComputeEngine.disk_names)
  disk_names_.Mutable(index)->assign(value);
}
void ComputeEngine::set_disk_names(int index, const char* value) {
  disk_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.ComputeEngine.disk_names)
}
void ComputeEngine::set_disk_names(int index, const char* value, size_t size) {
  disk_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.ComputeEngine.disk_names)
}
::std::string* ComputeEngine::add_disk_names() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1alpha2.ComputeEngine.disk_names)
  return disk_names_.Add();
}
void ComputeEngine::add_disk_names(const ::std::string& value) {
  disk_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1alpha2.ComputeEngine.disk_names)
}
void ComputeEngine::add_disk_names(const char* value) {
  disk_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1alpha2.ComputeEngine.disk_names)
}
void ComputeEngine::add_disk_names(const char* value, size_t size) {
  disk_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1alpha2.ComputeEngine.disk_names)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ComputeEngine::disk_names() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1alpha2.ComputeEngine.disk_names)
  return disk_names_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ComputeEngine::mutable_disk_names() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1alpha2.ComputeEngine.disk_names)
  return &disk_names_;
}

inline const ComputeEngine* ComputeEngine::internal_default_instance() {
  return &ComputeEngine_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void RuntimeMetadata::_slow_mutable_compute_engine() {
  compute_engine_ = ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1alpha2::ComputeEngine >(
      GetArenaNoVirtual());
}
::google::genomics::v1alpha2::ComputeEngine* RuntimeMetadata::_slow_release_compute_engine() {
  if (compute_engine_ == NULL) {
    return NULL;
  } else {
    ::google::genomics::v1alpha2::ComputeEngine* temp = new ::google::genomics::v1alpha2::ComputeEngine(*compute_engine_);
    compute_engine_ = NULL;
    return temp;
  }
}
::google::genomics::v1alpha2::ComputeEngine* RuntimeMetadata::unsafe_arena_release_compute_engine() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.RuntimeMetadata.compute_engine)
  
  ::google::genomics::v1alpha2::ComputeEngine* temp = compute_engine_;
  compute_engine_ = NULL;
  return temp;
}
void RuntimeMetadata::_slow_set_allocated_compute_engine(
    ::google::protobuf::Arena* message_arena, ::google::genomics::v1alpha2::ComputeEngine** compute_engine) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*compute_engine) == NULL) {
      message_arena->Own(*compute_engine);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*compute_engine)) {
      ::google::genomics::v1alpha2::ComputeEngine* new_compute_engine = 
            ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1alpha2::ComputeEngine >(
            message_arena);
      new_compute_engine->CopyFrom(**compute_engine);
      *compute_engine = new_compute_engine;
    }
}
void RuntimeMetadata::unsafe_arena_set_allocated_compute_engine(
    ::google::genomics::v1alpha2::ComputeEngine* compute_engine) {
  if (GetArenaNoVirtual() == NULL) {
    delete compute_engine_;
  }
  compute_engine_ = compute_engine;
  if (compute_engine) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.RuntimeMetadata.compute_engine)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RuntimeMetadata::kComputeEngineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RuntimeMetadata::RuntimeMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1alpha2.RuntimeMetadata)
}
RuntimeMetadata::RuntimeMetadata(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1alpha2.RuntimeMetadata)
}

void RuntimeMetadata::InitAsDefaultInstance() {
  compute_engine_ = const_cast< ::google::genomics::v1alpha2::ComputeEngine*>(
      ::google::genomics::v1alpha2::ComputeEngine::internal_default_instance());
}

RuntimeMetadata::RuntimeMetadata(const RuntimeMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1alpha2.RuntimeMetadata)
}

void RuntimeMetadata::SharedCtor() {
  compute_engine_ = NULL;
  _cached_size_ = 0;
}

RuntimeMetadata::~RuntimeMetadata() {
  // @@protoc_insertion_point(destructor:google.genomics.v1alpha2.RuntimeMetadata)
  SharedDtor();
}

void RuntimeMetadata::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != &RuntimeMetadata_default_instance_.get()) {
    delete compute_engine_;
  }
}

void RuntimeMetadata::ArenaDtor(void* object) {
  RuntimeMetadata* _this = reinterpret_cast< RuntimeMetadata* >(object);
  (void)_this;
}
void RuntimeMetadata::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RuntimeMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RuntimeMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RuntimeMetadata_descriptor_;
}

const RuntimeMetadata& RuntimeMetadata::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RuntimeMetadata> RuntimeMetadata_default_instance_;

RuntimeMetadata* RuntimeMetadata::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RuntimeMetadata>(arena);
}

void RuntimeMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1alpha2.RuntimeMetadata)
  if (GetArenaNoVirtual() == NULL && compute_engine_ != NULL) delete compute_engine_;
  compute_engine_ = NULL;
}

bool RuntimeMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1alpha2.RuntimeMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.genomics.v1alpha2.ComputeEngine compute_engine = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_compute_engine()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1alpha2.RuntimeMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1alpha2.RuntimeMetadata)
  return false;
#undef DO_
}

void RuntimeMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1alpha2.RuntimeMetadata)
  // optional .google.genomics.v1alpha2.ComputeEngine compute_engine = 1;
  if (this->has_compute_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->compute_engine_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1alpha2.RuntimeMetadata)
}

::google::protobuf::uint8* RuntimeMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1alpha2.RuntimeMetadata)
  // optional .google.genomics.v1alpha2.ComputeEngine compute_engine = 1;
  if (this->has_compute_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->compute_engine_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1alpha2.RuntimeMetadata)
  return target;
}

size_t RuntimeMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1alpha2.RuntimeMetadata)
  size_t total_size = 0;

  // optional .google.genomics.v1alpha2.ComputeEngine compute_engine = 1;
  if (this->has_compute_engine()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->compute_engine_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RuntimeMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1alpha2.RuntimeMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RuntimeMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RuntimeMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1alpha2.RuntimeMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1alpha2.RuntimeMetadata)
    UnsafeMergeFrom(*source);
  }
}

void RuntimeMetadata::MergeFrom(const RuntimeMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1alpha2.RuntimeMetadata)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RuntimeMetadata::UnsafeMergeFrom(const RuntimeMetadata& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_compute_engine()) {
    mutable_compute_engine()->::google::genomics::v1alpha2::ComputeEngine::MergeFrom(from.compute_engine());
  }
}

void RuntimeMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1alpha2.RuntimeMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuntimeMetadata::CopyFrom(const RuntimeMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1alpha2.RuntimeMetadata)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RuntimeMetadata::IsInitialized() const {

  return true;
}

void RuntimeMetadata::Swap(RuntimeMetadata* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RuntimeMetadata temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void RuntimeMetadata::UnsafeArenaSwap(RuntimeMetadata* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RuntimeMetadata::InternalSwap(RuntimeMetadata* other) {
  std::swap(compute_engine_, other->compute_engine_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RuntimeMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RuntimeMetadata_descriptor_;
  metadata.reflection = RuntimeMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RuntimeMetadata

// optional .google.genomics.v1alpha2.ComputeEngine compute_engine = 1;
bool RuntimeMetadata::has_compute_engine() const {
  return this != internal_default_instance() && compute_engine_ != NULL;
}
void RuntimeMetadata::clear_compute_engine() {
  if (GetArenaNoVirtual() == NULL && compute_engine_ != NULL) delete compute_engine_;
  compute_engine_ = NULL;
}
const ::google::genomics::v1alpha2::ComputeEngine& RuntimeMetadata::compute_engine() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.RuntimeMetadata.compute_engine)
  return compute_engine_ != NULL ? *compute_engine_
                         : *::google::genomics::v1alpha2::ComputeEngine::internal_default_instance();
}
::google::genomics::v1alpha2::ComputeEngine* RuntimeMetadata::mutable_compute_engine() {
  
  if (compute_engine_ == NULL) {
    _slow_mutable_compute_engine();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.RuntimeMetadata.compute_engine)
  return compute_engine_;
}
::google::genomics::v1alpha2::ComputeEngine* RuntimeMetadata::release_compute_engine() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.RuntimeMetadata.compute_engine)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_compute_engine();
  } else {
    ::google::genomics::v1alpha2::ComputeEngine* temp = compute_engine_;
    compute_engine_ = NULL;
    return temp;
  }
}
 void RuntimeMetadata::set_allocated_compute_engine(::google::genomics::v1alpha2::ComputeEngine* compute_engine) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete compute_engine_;
  }
  if (compute_engine != NULL) {
    _slow_set_allocated_compute_engine(message_arena, &compute_engine);
  }
  compute_engine_ = compute_engine;
  if (compute_engine) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.RuntimeMetadata.compute_engine)
}

inline const RuntimeMetadata* RuntimeMetadata::internal_default_instance() {
  return &RuntimeMetadata_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void Pipeline::_slow_mutable_resources() {
  resources_ = ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1alpha2::PipelineResources >(
      GetArenaNoVirtual());
}
::google::genomics::v1alpha2::PipelineResources* Pipeline::_slow_release_resources() {
  if (resources_ == NULL) {
    return NULL;
  } else {
    ::google::genomics::v1alpha2::PipelineResources* temp = new ::google::genomics::v1alpha2::PipelineResources(*resources_);
    resources_ = NULL;
    return temp;
  }
}
::google::genomics::v1alpha2::PipelineResources* Pipeline::unsafe_arena_release_resources() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.Pipeline.resources)
  
  ::google::genomics::v1alpha2::PipelineResources* temp = resources_;
  resources_ = NULL;
  return temp;
}
void Pipeline::_slow_set_allocated_resources(
    ::google::protobuf::Arena* message_arena, ::google::genomics::v1alpha2::PipelineResources** resources) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*resources) == NULL) {
      message_arena->Own(*resources);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*resources)) {
      ::google::genomics::v1alpha2::PipelineResources* new_resources = 
            ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1alpha2::PipelineResources >(
            message_arena);
      new_resources->CopyFrom(**resources);
      *resources = new_resources;
    }
}
void Pipeline::unsafe_arena_set_allocated_resources(
    ::google::genomics::v1alpha2::PipelineResources* resources) {
  if (GetArenaNoVirtual() == NULL) {
    delete resources_;
  }
  resources_ = resources;
  if (resources) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.Pipeline.resources)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pipeline::kProjectIdFieldNumber;
const int Pipeline::kNameFieldNumber;
const int Pipeline::kDescriptionFieldNumber;
const int Pipeline::kInputParametersFieldNumber;
const int Pipeline::kOutputParametersFieldNumber;
const int Pipeline::kDockerFieldNumber;
const int Pipeline::kResourcesFieldNumber;
const int Pipeline::kPipelineIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pipeline::Pipeline()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1alpha2.Pipeline)
}
Pipeline::Pipeline(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  input_parameters_(arena),
  output_parameters_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1alpha2.Pipeline)
}

void Pipeline::InitAsDefaultInstance() {
  Pipeline_default_oneof_instance_->docker_ = const_cast< ::google::genomics::v1alpha2::DockerExecutor*>(
      ::google::genomics::v1alpha2::DockerExecutor::internal_default_instance());
  resources_ = const_cast< ::google::genomics::v1alpha2::PipelineResources*>(
      ::google::genomics::v1alpha2::PipelineResources::internal_default_instance());
}

Pipeline::Pipeline(const Pipeline& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1alpha2.Pipeline)
}

void Pipeline::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pipeline_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resources_ = NULL;
  clear_has_executor();
  _cached_size_ = 0;
}

Pipeline::~Pipeline() {
  // @@protoc_insertion_point(destructor:google.genomics.v1alpha2.Pipeline)
  SharedDtor();
}

void Pipeline::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  project_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  description_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  pipeline_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (has_executor()) {
    clear_executor();
  }
  if (this != &Pipeline_default_instance_.get()) {
    delete resources_;
  }
}

void Pipeline::ArenaDtor(void* object) {
  Pipeline* _this = reinterpret_cast< Pipeline* >(object);
  (void)_this;
}
void Pipeline::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Pipeline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pipeline::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pipeline_descriptor_;
}

const Pipeline& Pipeline::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Pipeline> Pipeline_default_instance_;

Pipeline* Pipeline::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Pipeline>(arena);
}

void Pipeline::clear_executor() {
// @@protoc_insertion_point(one_of_clear_start:google.genomics.v1alpha2.Pipeline)
  switch (executor_case()) {
    case kDocker: {
      if (GetArenaNoVirtual() == NULL) {
        delete executor_.docker_;
      }
      break;
    }
    case EXECUTOR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EXECUTOR_NOT_SET;
}


void Pipeline::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1alpha2.Pipeline)
  project_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && resources_ != NULL) delete resources_;
  resources_ = NULL;
  pipeline_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  input_parameters_.Clear();
  output_parameters_.Clear();
  clear_executor();
}

bool Pipeline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1alpha2.Pipeline)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string project_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.Pipeline.project_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.Pipeline.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_description;
        break;
      }

      // optional string description = 3;
      case 3: {
        if (tag == 26) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.Pipeline.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_docker;
        break;
      }

      // optional .google.genomics.v1alpha2.DockerExecutor docker = 5;
      case 5: {
        if (tag == 42) {
         parse_docker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_docker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_resources;
        break;
      }

      // optional .google.genomics.v1alpha2.PipelineResources resources = 6;
      case 6: {
        if (tag == 50) {
         parse_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resources()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_pipeline_id;
        break;
      }

      // optional string pipeline_id = 7;
      case 7: {
        if (tag == 58) {
         parse_pipeline_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pipeline_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pipeline_id().data(), this->pipeline_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.Pipeline.pipeline_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_input_parameters;
        break;
      }

      // repeated .google.genomics.v1alpha2.PipelineParameter input_parameters = 8;
      case 8: {
        if (tag == 66) {
         parse_input_parameters:
          DO_(input->IncrementRecursionDepth());
         parse_loop_input_parameters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_input_parameters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_input_parameters;
        if (input->ExpectTag(74)) goto parse_loop_output_parameters;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .google.genomics.v1alpha2.PipelineParameter output_parameters = 9;
      case 9: {
        if (tag == 74) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_output_parameters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_output_parameters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_output_parameters;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1alpha2.Pipeline)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1alpha2.Pipeline)
  return false;
#undef DO_
}

void Pipeline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1alpha2.Pipeline)
  // optional string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.Pipeline.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.Pipeline.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.Pipeline.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // optional .google.genomics.v1alpha2.DockerExecutor docker = 5;
  if (has_docker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *executor_.docker_, output);
  }

  // optional .google.genomics.v1alpha2.PipelineResources resources = 6;
  if (this->has_resources()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->resources_, output);
  }

  // optional string pipeline_id = 7;
  if (this->pipeline_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pipeline_id().data(), this->pipeline_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.Pipeline.pipeline_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->pipeline_id(), output);
  }

  // repeated .google.genomics.v1alpha2.PipelineParameter input_parameters = 8;
  for (unsigned int i = 0, n = this->input_parameters_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->input_parameters(i), output);
  }

  // repeated .google.genomics.v1alpha2.PipelineParameter output_parameters = 9;
  for (unsigned int i = 0, n = this->output_parameters_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->output_parameters(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1alpha2.Pipeline)
}

::google::protobuf::uint8* Pipeline::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1alpha2.Pipeline)
  // optional string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.Pipeline.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.Pipeline.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.Pipeline.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // optional .google.genomics.v1alpha2.DockerExecutor docker = 5;
  if (has_docker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *executor_.docker_, false, target);
  }

  // optional .google.genomics.v1alpha2.PipelineResources resources = 6;
  if (this->has_resources()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->resources_, false, target);
  }

  // optional string pipeline_id = 7;
  if (this->pipeline_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pipeline_id().data(), this->pipeline_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.Pipeline.pipeline_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->pipeline_id(), target);
  }

  // repeated .google.genomics.v1alpha2.PipelineParameter input_parameters = 8;
  for (unsigned int i = 0, n = this->input_parameters_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->input_parameters(i), false, target);
  }

  // repeated .google.genomics.v1alpha2.PipelineParameter output_parameters = 9;
  for (unsigned int i = 0, n = this->output_parameters_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->output_parameters(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1alpha2.Pipeline)
  return target;
}

size_t Pipeline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1alpha2.Pipeline)
  size_t total_size = 0;

  // optional string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // optional .google.genomics.v1alpha2.PipelineResources resources = 6;
  if (this->has_resources()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resources_);
  }

  // optional string pipeline_id = 7;
  if (this->pipeline_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pipeline_id());
  }

  // repeated .google.genomics.v1alpha2.PipelineParameter input_parameters = 8;
  {
    unsigned int count = this->input_parameters_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->input_parameters(i));
    }
  }

  // repeated .google.genomics.v1alpha2.PipelineParameter output_parameters = 9;
  {
    unsigned int count = this->output_parameters_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->output_parameters(i));
    }
  }

  switch (executor_case()) {
    // optional .google.genomics.v1alpha2.DockerExecutor docker = 5;
    case kDocker: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *executor_.docker_);
      break;
    }
    case EXECUTOR_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pipeline::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1alpha2.Pipeline)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Pipeline* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Pipeline>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1alpha2.Pipeline)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1alpha2.Pipeline)
    UnsafeMergeFrom(*source);
  }
}

void Pipeline::MergeFrom(const Pipeline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1alpha2.Pipeline)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Pipeline::UnsafeMergeFrom(const Pipeline& from) {
  GOOGLE_DCHECK(&from != this);
  input_parameters_.MergeFrom(from.input_parameters_);
  output_parameters_.MergeFrom(from.output_parameters_);
  switch (from.executor_case()) {
    case kDocker: {
      mutable_docker()->::google::genomics::v1alpha2::DockerExecutor::MergeFrom(from.docker());
      break;
    }
    case EXECUTOR_NOT_SET: {
      break;
    }
  }
  if (from.project_id().size() > 0) {
    set_project_id(from.project_id());
  }
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.description().size() > 0) {
    set_description(from.description());
  }
  if (from.has_resources()) {
    mutable_resources()->::google::genomics::v1alpha2::PipelineResources::MergeFrom(from.resources());
  }
  if (from.pipeline_id().size() > 0) {
    set_pipeline_id(from.pipeline_id());
  }
}

void Pipeline::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1alpha2.Pipeline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pipeline::CopyFrom(const Pipeline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1alpha2.Pipeline)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Pipeline::IsInitialized() const {

  return true;
}

void Pipeline::Swap(Pipeline* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Pipeline temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void Pipeline::UnsafeArenaSwap(Pipeline* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Pipeline::InternalSwap(Pipeline* other) {
  project_id_.Swap(&other->project_id_);
  name_.Swap(&other->name_);
  description_.Swap(&other->description_);
  input_parameters_.UnsafeArenaSwap(&other->input_parameters_);
  output_parameters_.UnsafeArenaSwap(&other->output_parameters_);
  std::swap(resources_, other->resources_);
  pipeline_id_.Swap(&other->pipeline_id_);
  std::swap(executor_, other->executor_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Pipeline::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pipeline_descriptor_;
  metadata.reflection = Pipeline_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Pipeline

// optional string project_id = 1;
void Pipeline::clear_project_id() {
  project_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Pipeline::project_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.Pipeline.project_id)
  return project_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Pipeline::set_project_id(const ::std::string& value) {
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.Pipeline.project_id)
}
void Pipeline::set_project_id(const char* value) {
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.Pipeline.project_id)
}
void Pipeline::set_project_id(const char* value,
    size_t size) {
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.Pipeline.project_id)
}
::std::string* Pipeline::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.Pipeline.project_id)
  return project_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Pipeline::release_project_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.Pipeline.project_id)
  
  return project_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Pipeline::unsafe_arena_release_project_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.Pipeline.project_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return project_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Pipeline::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.Pipeline.project_id)
}
void Pipeline::unsafe_arena_set_allocated_project_id(
    ::std::string* project_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      project_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.Pipeline.project_id)
}

// optional string name = 2;
void Pipeline::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Pipeline::name() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.Pipeline.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Pipeline::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.Pipeline.name)
}
void Pipeline::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.Pipeline.name)
}
void Pipeline::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.Pipeline.name)
}
::std::string* Pipeline::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.Pipeline.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Pipeline::release_name() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.Pipeline.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Pipeline::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.Pipeline.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Pipeline::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.Pipeline.name)
}
void Pipeline::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.Pipeline.name)
}

// optional string description = 3;
void Pipeline::clear_description() {
  description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Pipeline::description() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.Pipeline.description)
  return description_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Pipeline::set_description(const ::std::string& value) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.Pipeline.description)
}
void Pipeline::set_description(const char* value) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.Pipeline.description)
}
void Pipeline::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.Pipeline.description)
}
::std::string* Pipeline::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.Pipeline.description)
  return description_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Pipeline::release_description() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.Pipeline.description)
  
  return description_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Pipeline::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.Pipeline.description)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return description_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Pipeline::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.Pipeline.description)
}
void Pipeline::unsafe_arena_set_allocated_description(
    ::std::string* description) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (description != NULL) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      description, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.Pipeline.description)
}

// repeated .google.genomics.v1alpha2.PipelineParameter input_parameters = 8;
int Pipeline::input_parameters_size() const {
  return input_parameters_.size();
}
void Pipeline::clear_input_parameters() {
  input_parameters_.Clear();
}
const ::google::genomics::v1alpha2::PipelineParameter& Pipeline::input_parameters(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.Pipeline.input_parameters)
  return input_parameters_.Get(index);
}
::google::genomics::v1alpha2::PipelineParameter* Pipeline::mutable_input_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.Pipeline.input_parameters)
  return input_parameters_.Mutable(index);
}
::google::genomics::v1alpha2::PipelineParameter* Pipeline::add_input_parameters() {
  // @@protoc_insertion_point(field_add:google.genomics.v1alpha2.Pipeline.input_parameters)
  return input_parameters_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::genomics::v1alpha2::PipelineParameter >*
Pipeline::mutable_input_parameters() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1alpha2.Pipeline.input_parameters)
  return &input_parameters_;
}
const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1alpha2::PipelineParameter >&
Pipeline::input_parameters() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1alpha2.Pipeline.input_parameters)
  return input_parameters_;
}

// repeated .google.genomics.v1alpha2.PipelineParameter output_parameters = 9;
int Pipeline::output_parameters_size() const {
  return output_parameters_.size();
}
void Pipeline::clear_output_parameters() {
  output_parameters_.Clear();
}
const ::google::genomics::v1alpha2::PipelineParameter& Pipeline::output_parameters(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.Pipeline.output_parameters)
  return output_parameters_.Get(index);
}
::google::genomics::v1alpha2::PipelineParameter* Pipeline::mutable_output_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.Pipeline.output_parameters)
  return output_parameters_.Mutable(index);
}
::google::genomics::v1alpha2::PipelineParameter* Pipeline::add_output_parameters() {
  // @@protoc_insertion_point(field_add:google.genomics.v1alpha2.Pipeline.output_parameters)
  return output_parameters_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::genomics::v1alpha2::PipelineParameter >*
Pipeline::mutable_output_parameters() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1alpha2.Pipeline.output_parameters)
  return &output_parameters_;
}
const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1alpha2::PipelineParameter >&
Pipeline::output_parameters() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1alpha2.Pipeline.output_parameters)
  return output_parameters_;
}

// optional .google.genomics.v1alpha2.DockerExecutor docker = 5;
bool Pipeline::has_docker() const {
  return executor_case() == kDocker;
}
void Pipeline::set_has_docker() {
  _oneof_case_[0] = kDocker;
}
void Pipeline::clear_docker() {
  if (has_docker()) {
    if (GetArenaNoVirtual() == NULL) {
      delete executor_.docker_;
    }
    clear_has_executor();
  }
}
 const ::google::genomics::v1alpha2::DockerExecutor& Pipeline::docker() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.Pipeline.docker)
  return has_docker()
      ? *executor_.docker_
      : ::google::genomics::v1alpha2::DockerExecutor::default_instance();
}
::google::genomics::v1alpha2::DockerExecutor* Pipeline::mutable_docker() {
  if (!has_docker()) {
    clear_executor();
    set_has_docker();
    executor_.docker_ = 
      ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1alpha2::DockerExecutor >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.Pipeline.docker)
  return executor_.docker_;
}
::google::genomics::v1alpha2::DockerExecutor* Pipeline::release_docker() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.Pipeline.docker)
  if (has_docker()) {
    clear_has_executor();
    if (GetArenaNoVirtual() != NULL) {
      ::google::genomics::v1alpha2::DockerExecutor* temp = new ::google::genomics::v1alpha2::DockerExecutor(*executor_.docker_);
      executor_.docker_ = NULL;
      return temp;
    } else {
      ::google::genomics::v1alpha2::DockerExecutor* temp = executor_.docker_;
      executor_.docker_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void Pipeline::set_allocated_docker(::google::genomics::v1alpha2::DockerExecutor* docker) {
  clear_executor();
  if (docker) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(docker) == NULL) {
      GetArenaNoVirtual()->Own(docker);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(docker)) {
      ::google::genomics::v1alpha2::DockerExecutor* new_docker = 
          ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1alpha2::DockerExecutor >(
          GetArenaNoVirtual());
      new_docker->CopyFrom(*docker);
      docker = new_docker;
    }
    set_has_docker();
    executor_.docker_ = docker;
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.Pipeline.docker)
}
 ::google::genomics::v1alpha2::DockerExecutor* Pipeline::unsafe_arena_release_docker() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.Pipeline.docker)
  if (has_docker()) {
    clear_has_executor();
    ::google::genomics::v1alpha2::DockerExecutor* temp = executor_.docker_;
    executor_.docker_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Pipeline::unsafe_arena_set_allocated_docker(::google::genomics::v1alpha2::DockerExecutor* docker) {
  clear_executor();
  if (docker) {
    set_has_docker();
    executor_.docker_ = docker;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.Pipeline.docker)
}

// optional .google.genomics.v1alpha2.PipelineResources resources = 6;
bool Pipeline::has_resources() const {
  return this != internal_default_instance() && resources_ != NULL;
}
void Pipeline::clear_resources() {
  if (GetArenaNoVirtual() == NULL && resources_ != NULL) delete resources_;
  resources_ = NULL;
}
const ::google::genomics::v1alpha2::PipelineResources& Pipeline::resources() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.Pipeline.resources)
  return resources_ != NULL ? *resources_
                         : *::google::genomics::v1alpha2::PipelineResources::internal_default_instance();
}
::google::genomics::v1alpha2::PipelineResources* Pipeline::mutable_resources() {
  
  if (resources_ == NULL) {
    _slow_mutable_resources();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.Pipeline.resources)
  return resources_;
}
::google::genomics::v1alpha2::PipelineResources* Pipeline::release_resources() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.Pipeline.resources)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_resources();
  } else {
    ::google::genomics::v1alpha2::PipelineResources* temp = resources_;
    resources_ = NULL;
    return temp;
  }
}
 void Pipeline::set_allocated_resources(::google::genomics::v1alpha2::PipelineResources* resources) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resources_;
  }
  if (resources != NULL) {
    _slow_set_allocated_resources(message_arena, &resources);
  }
  resources_ = resources;
  if (resources) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.Pipeline.resources)
}

// optional string pipeline_id = 7;
void Pipeline::clear_pipeline_id() {
  pipeline_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Pipeline::pipeline_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.Pipeline.pipeline_id)
  return pipeline_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Pipeline::set_pipeline_id(const ::std::string& value) {
  
  pipeline_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.Pipeline.pipeline_id)
}
void Pipeline::set_pipeline_id(const char* value) {
  
  pipeline_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.Pipeline.pipeline_id)
}
void Pipeline::set_pipeline_id(const char* value,
    size_t size) {
  
  pipeline_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.Pipeline.pipeline_id)
}
::std::string* Pipeline::mutable_pipeline_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.Pipeline.pipeline_id)
  return pipeline_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Pipeline::release_pipeline_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.Pipeline.pipeline_id)
  
  return pipeline_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Pipeline::unsafe_arena_release_pipeline_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.Pipeline.pipeline_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return pipeline_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Pipeline::set_allocated_pipeline_id(::std::string* pipeline_id) {
  if (pipeline_id != NULL) {
    
  } else {
    
  }
  pipeline_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pipeline_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.Pipeline.pipeline_id)
}
void Pipeline::unsafe_arena_set_allocated_pipeline_id(
    ::std::string* pipeline_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (pipeline_id != NULL) {
    
  } else {
    
  }
  pipeline_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      pipeline_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.Pipeline.pipeline_id)
}

bool Pipeline::has_executor() const {
  return executor_case() != EXECUTOR_NOT_SET;
}
void Pipeline::clear_has_executor() {
  _oneof_case_[0] = EXECUTOR_NOT_SET;
}
Pipeline::ExecutorCase Pipeline::executor_case() const {
  return Pipeline::ExecutorCase(_oneof_case_[0]);
}
inline const Pipeline* Pipeline::internal_default_instance() {
  return &Pipeline_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void CreatePipelineRequest::_slow_mutable_pipeline() {
  pipeline_ = ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1alpha2::Pipeline >(
      GetArenaNoVirtual());
}
::google::genomics::v1alpha2::Pipeline* CreatePipelineRequest::_slow_release_pipeline() {
  if (pipeline_ == NULL) {
    return NULL;
  } else {
    ::google::genomics::v1alpha2::Pipeline* temp = new ::google::genomics::v1alpha2::Pipeline(*pipeline_);
    pipeline_ = NULL;
    return temp;
  }
}
::google::genomics::v1alpha2::Pipeline* CreatePipelineRequest::unsafe_arena_release_pipeline() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.CreatePipelineRequest.pipeline)
  
  ::google::genomics::v1alpha2::Pipeline* temp = pipeline_;
  pipeline_ = NULL;
  return temp;
}
void CreatePipelineRequest::_slow_set_allocated_pipeline(
    ::google::protobuf::Arena* message_arena, ::google::genomics::v1alpha2::Pipeline** pipeline) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*pipeline) == NULL) {
      message_arena->Own(*pipeline);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*pipeline)) {
      ::google::genomics::v1alpha2::Pipeline* new_pipeline = 
            ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1alpha2::Pipeline >(
            message_arena);
      new_pipeline->CopyFrom(**pipeline);
      *pipeline = new_pipeline;
    }
}
void CreatePipelineRequest::unsafe_arena_set_allocated_pipeline(
    ::google::genomics::v1alpha2::Pipeline* pipeline) {
  if (GetArenaNoVirtual() == NULL) {
    delete pipeline_;
  }
  pipeline_ = pipeline;
  if (pipeline) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.CreatePipelineRequest.pipeline)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreatePipelineRequest::kPipelineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreatePipelineRequest::CreatePipelineRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1alpha2.CreatePipelineRequest)
}
CreatePipelineRequest::CreatePipelineRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1alpha2.CreatePipelineRequest)
}

void CreatePipelineRequest::InitAsDefaultInstance() {
  pipeline_ = const_cast< ::google::genomics::v1alpha2::Pipeline*>(
      ::google::genomics::v1alpha2::Pipeline::internal_default_instance());
}

CreatePipelineRequest::CreatePipelineRequest(const CreatePipelineRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1alpha2.CreatePipelineRequest)
}

void CreatePipelineRequest::SharedCtor() {
  pipeline_ = NULL;
  _cached_size_ = 0;
}

CreatePipelineRequest::~CreatePipelineRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1alpha2.CreatePipelineRequest)
  SharedDtor();
}

void CreatePipelineRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != &CreatePipelineRequest_default_instance_.get()) {
    delete pipeline_;
  }
}

void CreatePipelineRequest::ArenaDtor(void* object) {
  CreatePipelineRequest* _this = reinterpret_cast< CreatePipelineRequest* >(object);
  (void)_this;
}
void CreatePipelineRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CreatePipelineRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreatePipelineRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreatePipelineRequest_descriptor_;
}

const CreatePipelineRequest& CreatePipelineRequest::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CreatePipelineRequest> CreatePipelineRequest_default_instance_;

CreatePipelineRequest* CreatePipelineRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CreatePipelineRequest>(arena);
}

void CreatePipelineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1alpha2.CreatePipelineRequest)
  if (GetArenaNoVirtual() == NULL && pipeline_ != NULL) delete pipeline_;
  pipeline_ = NULL;
}

bool CreatePipelineRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1alpha2.CreatePipelineRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.genomics.v1alpha2.Pipeline pipeline = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pipeline()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1alpha2.CreatePipelineRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1alpha2.CreatePipelineRequest)
  return false;
#undef DO_
}

void CreatePipelineRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1alpha2.CreatePipelineRequest)
  // optional .google.genomics.v1alpha2.Pipeline pipeline = 1;
  if (this->has_pipeline()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pipeline_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1alpha2.CreatePipelineRequest)
}

::google::protobuf::uint8* CreatePipelineRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1alpha2.CreatePipelineRequest)
  // optional .google.genomics.v1alpha2.Pipeline pipeline = 1;
  if (this->has_pipeline()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pipeline_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1alpha2.CreatePipelineRequest)
  return target;
}

size_t CreatePipelineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1alpha2.CreatePipelineRequest)
  size_t total_size = 0;

  // optional .google.genomics.v1alpha2.Pipeline pipeline = 1;
  if (this->has_pipeline()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pipeline_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreatePipelineRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1alpha2.CreatePipelineRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CreatePipelineRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreatePipelineRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1alpha2.CreatePipelineRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1alpha2.CreatePipelineRequest)
    UnsafeMergeFrom(*source);
  }
}

void CreatePipelineRequest::MergeFrom(const CreatePipelineRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1alpha2.CreatePipelineRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CreatePipelineRequest::UnsafeMergeFrom(const CreatePipelineRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_pipeline()) {
    mutable_pipeline()->::google::genomics::v1alpha2::Pipeline::MergeFrom(from.pipeline());
  }
}

void CreatePipelineRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1alpha2.CreatePipelineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatePipelineRequest::CopyFrom(const CreatePipelineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1alpha2.CreatePipelineRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CreatePipelineRequest::IsInitialized() const {

  return true;
}

void CreatePipelineRequest::Swap(CreatePipelineRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CreatePipelineRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void CreatePipelineRequest::UnsafeArenaSwap(CreatePipelineRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CreatePipelineRequest::InternalSwap(CreatePipelineRequest* other) {
  std::swap(pipeline_, other->pipeline_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreatePipelineRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreatePipelineRequest_descriptor_;
  metadata.reflection = CreatePipelineRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreatePipelineRequest

// optional .google.genomics.v1alpha2.Pipeline pipeline = 1;
bool CreatePipelineRequest::has_pipeline() const {
  return this != internal_default_instance() && pipeline_ != NULL;
}
void CreatePipelineRequest::clear_pipeline() {
  if (GetArenaNoVirtual() == NULL && pipeline_ != NULL) delete pipeline_;
  pipeline_ = NULL;
}
const ::google::genomics::v1alpha2::Pipeline& CreatePipelineRequest::pipeline() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.CreatePipelineRequest.pipeline)
  return pipeline_ != NULL ? *pipeline_
                         : *::google::genomics::v1alpha2::Pipeline::internal_default_instance();
}
::google::genomics::v1alpha2::Pipeline* CreatePipelineRequest::mutable_pipeline() {
  
  if (pipeline_ == NULL) {
    _slow_mutable_pipeline();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.CreatePipelineRequest.pipeline)
  return pipeline_;
}
::google::genomics::v1alpha2::Pipeline* CreatePipelineRequest::release_pipeline() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.CreatePipelineRequest.pipeline)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_pipeline();
  } else {
    ::google::genomics::v1alpha2::Pipeline* temp = pipeline_;
    pipeline_ = NULL;
    return temp;
  }
}
 void CreatePipelineRequest::set_allocated_pipeline(::google::genomics::v1alpha2::Pipeline* pipeline) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pipeline_;
  }
  if (pipeline != NULL) {
    _slow_set_allocated_pipeline(message_arena, &pipeline);
  }
  pipeline_ = pipeline;
  if (pipeline) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.CreatePipelineRequest.pipeline)
}

inline const CreatePipelineRequest* CreatePipelineRequest::internal_default_instance() {
  return &CreatePipelineRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void RunPipelineArgs::_slow_mutable_service_account() {
  service_account_ = ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1alpha2::ServiceAccount >(
      GetArenaNoVirtual());
}
::google::genomics::v1alpha2::ServiceAccount* RunPipelineArgs::_slow_release_service_account() {
  if (service_account_ == NULL) {
    return NULL;
  } else {
    ::google::genomics::v1alpha2::ServiceAccount* temp = new ::google::genomics::v1alpha2::ServiceAccount(*service_account_);
    service_account_ = NULL;
    return temp;
  }
}
::google::genomics::v1alpha2::ServiceAccount* RunPipelineArgs::unsafe_arena_release_service_account() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.RunPipelineArgs.service_account)
  
  ::google::genomics::v1alpha2::ServiceAccount* temp = service_account_;
  service_account_ = NULL;
  return temp;
}
void RunPipelineArgs::_slow_set_allocated_service_account(
    ::google::protobuf::Arena* message_arena, ::google::genomics::v1alpha2::ServiceAccount** service_account) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*service_account) == NULL) {
      message_arena->Own(*service_account);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*service_account)) {
      ::google::genomics::v1alpha2::ServiceAccount* new_service_account = 
            ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1alpha2::ServiceAccount >(
            message_arena);
      new_service_account->CopyFrom(**service_account);
      *service_account = new_service_account;
    }
}
void RunPipelineArgs::unsafe_arena_set_allocated_service_account(
    ::google::genomics::v1alpha2::ServiceAccount* service_account) {
  if (GetArenaNoVirtual() == NULL) {
    delete service_account_;
  }
  service_account_ = service_account;
  if (service_account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.RunPipelineArgs.service_account)
}
void RunPipelineArgs::_slow_mutable_resources() {
  resources_ = ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1alpha2::PipelineResources >(
      GetArenaNoVirtual());
}
::google::genomics::v1alpha2::PipelineResources* RunPipelineArgs::_slow_release_resources() {
  if (resources_ == NULL) {
    return NULL;
  } else {
    ::google::genomics::v1alpha2::PipelineResources* temp = new ::google::genomics::v1alpha2::PipelineResources(*resources_);
    resources_ = NULL;
    return temp;
  }
}
::google::genomics::v1alpha2::PipelineResources* RunPipelineArgs::unsafe_arena_release_resources() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.RunPipelineArgs.resources)
  
  ::google::genomics::v1alpha2::PipelineResources* temp = resources_;
  resources_ = NULL;
  return temp;
}
void RunPipelineArgs::_slow_set_allocated_resources(
    ::google::protobuf::Arena* message_arena, ::google::genomics::v1alpha2::PipelineResources** resources) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*resources) == NULL) {
      message_arena->Own(*resources);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*resources)) {
      ::google::genomics::v1alpha2::PipelineResources* new_resources = 
            ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1alpha2::PipelineResources >(
            message_arena);
      new_resources->CopyFrom(**resources);
      *resources = new_resources;
    }
}
void RunPipelineArgs::unsafe_arena_set_allocated_resources(
    ::google::genomics::v1alpha2::PipelineResources* resources) {
  if (GetArenaNoVirtual() == NULL) {
    delete resources_;
  }
  resources_ = resources;
  if (resources) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.RunPipelineArgs.resources)
}
void RunPipelineArgs::_slow_mutable_logging() {
  logging_ = ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1alpha2::LoggingOptions >(
      GetArenaNoVirtual());
}
::google::genomics::v1alpha2::LoggingOptions* RunPipelineArgs::_slow_release_logging() {
  if (logging_ == NULL) {
    return NULL;
  } else {
    ::google::genomics::v1alpha2::LoggingOptions* temp = new ::google::genomics::v1alpha2::LoggingOptions(*logging_);
    logging_ = NULL;
    return temp;
  }
}
::google::genomics::v1alpha2::LoggingOptions* RunPipelineArgs::unsafe_arena_release_logging() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.RunPipelineArgs.logging)
  
  ::google::genomics::v1alpha2::LoggingOptions* temp = logging_;
  logging_ = NULL;
  return temp;
}
void RunPipelineArgs::_slow_set_allocated_logging(
    ::google::protobuf::Arena* message_arena, ::google::genomics::v1alpha2::LoggingOptions** logging) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*logging) == NULL) {
      message_arena->Own(*logging);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*logging)) {
      ::google::genomics::v1alpha2::LoggingOptions* new_logging = 
            ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1alpha2::LoggingOptions >(
            message_arena);
      new_logging->CopyFrom(**logging);
      *logging = new_logging;
    }
}
void RunPipelineArgs::unsafe_arena_set_allocated_logging(
    ::google::genomics::v1alpha2::LoggingOptions* logging) {
  if (GetArenaNoVirtual() == NULL) {
    delete logging_;
  }
  logging_ = logging;
  if (logging) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.RunPipelineArgs.logging)
}
void RunPipelineArgs::_slow_mutable_keep_vm_alive_on_failure_duration() {
  keep_vm_alive_on_failure_duration_ = ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Duration >(
      GetArenaNoVirtual());
}
::google::protobuf::Duration* RunPipelineArgs::_slow_release_keep_vm_alive_on_failure_duration() {
  if (keep_vm_alive_on_failure_duration_ == NULL) {
    return NULL;
  } else {
    ::google::protobuf::Duration* temp = new ::google::protobuf::Duration(*keep_vm_alive_on_failure_duration_);
    keep_vm_alive_on_failure_duration_ = NULL;
    return temp;
  }
}
::google::protobuf::Duration* RunPipelineArgs::unsafe_arena_release_keep_vm_alive_on_failure_duration() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.RunPipelineArgs.keep_vm_alive_on_failure_duration)
  
  ::google::protobuf::Duration* temp = keep_vm_alive_on_failure_duration_;
  keep_vm_alive_on_failure_duration_ = NULL;
  return temp;
}
void RunPipelineArgs::_slow_set_allocated_keep_vm_alive_on_failure_duration(
    ::google::protobuf::Arena* message_arena, ::google::protobuf::Duration** keep_vm_alive_on_failure_duration) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*keep_vm_alive_on_failure_duration) == NULL) {
      message_arena->Own(*keep_vm_alive_on_failure_duration);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*keep_vm_alive_on_failure_duration)) {
      ::google::protobuf::Duration* new_keep_vm_alive_on_failure_duration = 
            ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Duration >(
            message_arena);
      new_keep_vm_alive_on_failure_duration->CopyFrom(**keep_vm_alive_on_failure_duration);
      *keep_vm_alive_on_failure_duration = new_keep_vm_alive_on_failure_duration;
    }
}
void RunPipelineArgs::unsafe_arena_set_allocated_keep_vm_alive_on_failure_duration(
    ::google::protobuf::Duration* keep_vm_alive_on_failure_duration) {
  if (GetArenaNoVirtual() == NULL) {
    delete keep_vm_alive_on_failure_duration_;
  }
  keep_vm_alive_on_failure_duration_ = keep_vm_alive_on_failure_duration;
  if (keep_vm_alive_on_failure_duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.RunPipelineArgs.keep_vm_alive_on_failure_duration)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunPipelineArgs::kProjectIdFieldNumber;
const int RunPipelineArgs::kInputsFieldNumber;
const int RunPipelineArgs::kOutputsFieldNumber;
const int RunPipelineArgs::kServiceAccountFieldNumber;
const int RunPipelineArgs::kClientIdFieldNumber;
const int RunPipelineArgs::kResourcesFieldNumber;
const int RunPipelineArgs::kLoggingFieldNumber;
const int RunPipelineArgs::kKeepVmAliveOnFailureDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunPipelineArgs::RunPipelineArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1alpha2.RunPipelineArgs)
}
RunPipelineArgs::RunPipelineArgs(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  inputs_(arena),
  outputs_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1alpha2.RunPipelineArgs)
}

void RunPipelineArgs::InitAsDefaultInstance() {
  service_account_ = const_cast< ::google::genomics::v1alpha2::ServiceAccount*>(
      ::google::genomics::v1alpha2::ServiceAccount::internal_default_instance());
  resources_ = const_cast< ::google::genomics::v1alpha2::PipelineResources*>(
      ::google::genomics::v1alpha2::PipelineResources::internal_default_instance());
  logging_ = const_cast< ::google::genomics::v1alpha2::LoggingOptions*>(
      ::google::genomics::v1alpha2::LoggingOptions::internal_default_instance());
  keep_vm_alive_on_failure_duration_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}

RunPipelineArgs::RunPipelineArgs(const RunPipelineArgs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1alpha2.RunPipelineArgs)
}

void RunPipelineArgs::SharedCtor() {
  inputs_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  inputs_.SetEntryDescriptor(
      &::google::genomics::v1alpha2::RunPipelineArgs_InputsEntry_descriptor_);
  outputs_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  outputs_.SetEntryDescriptor(
      &::google::genomics::v1alpha2::RunPipelineArgs_OutputsEntry_descriptor_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_account_ = NULL;
  resources_ = NULL;
  logging_ = NULL;
  keep_vm_alive_on_failure_duration_ = NULL;
  _cached_size_ = 0;
}

RunPipelineArgs::~RunPipelineArgs() {
  // @@protoc_insertion_point(destructor:google.genomics.v1alpha2.RunPipelineArgs)
  SharedDtor();
}

void RunPipelineArgs::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  project_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  client_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != &RunPipelineArgs_default_instance_.get()) {
    delete service_account_;
    delete resources_;
    delete logging_;
    delete keep_vm_alive_on_failure_duration_;
  }
}

void RunPipelineArgs::ArenaDtor(void* object) {
  RunPipelineArgs* _this = reinterpret_cast< RunPipelineArgs* >(object);
  (void)_this;
}
void RunPipelineArgs::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RunPipelineArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunPipelineArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunPipelineArgs_descriptor_;
}

const RunPipelineArgs& RunPipelineArgs::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RunPipelineArgs> RunPipelineArgs_default_instance_;

RunPipelineArgs* RunPipelineArgs::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RunPipelineArgs>(arena);
}

void RunPipelineArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1alpha2.RunPipelineArgs)
  project_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && service_account_ != NULL) delete service_account_;
  service_account_ = NULL;
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && resources_ != NULL) delete resources_;
  resources_ = NULL;
  if (GetArenaNoVirtual() == NULL && logging_ != NULL) delete logging_;
  logging_ = NULL;
  if (GetArenaNoVirtual() == NULL && keep_vm_alive_on_failure_duration_ != NULL) delete keep_vm_alive_on_failure_duration_;
  keep_vm_alive_on_failure_duration_ = NULL;
  inputs_.Clear();
  outputs_.Clear();
}

bool RunPipelineArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1alpha2.RunPipelineArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string project_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.RunPipelineArgs.project_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_inputs;
        break;
      }

      // map<string, string> inputs = 2;
      case 2: {
        if (tag == 18) {
         parse_inputs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_inputs:
          RunPipelineArgs_InputsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&inputs_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.RunPipelineArgs.InputsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.RunPipelineArgs.InputsEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_inputs;
        if (input->ExpectTag(26)) goto parse_loop_outputs;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, string> outputs = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_outputs:
          RunPipelineArgs_OutputsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&outputs_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.RunPipelineArgs.OutputsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.RunPipelineArgs.OutputsEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_outputs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_service_account;
        break;
      }

      // optional .google.genomics.v1alpha2.ServiceAccount service_account = 4;
      case 4: {
        if (tag == 34) {
         parse_service_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_service_account()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_client_id;
        break;
      }

      // optional string client_id = 5;
      case 5: {
        if (tag == 42) {
         parse_client_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_id().data(), this->client_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.RunPipelineArgs.client_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_resources;
        break;
      }

      // optional .google.genomics.v1alpha2.PipelineResources resources = 6;
      case 6: {
        if (tag == 50) {
         parse_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resources()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_logging;
        break;
      }

      // optional .google.genomics.v1alpha2.LoggingOptions logging = 7;
      case 7: {
        if (tag == 58) {
         parse_logging:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logging()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_keep_vm_alive_on_failure_duration;
        break;
      }

      // optional .google.protobuf.Duration keep_vm_alive_on_failure_duration = 8;
      case 8: {
        if (tag == 66) {
         parse_keep_vm_alive_on_failure_duration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keep_vm_alive_on_failure_duration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1alpha2.RunPipelineArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1alpha2.RunPipelineArgs)
  return false;
#undef DO_
}

void RunPipelineArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1alpha2.RunPipelineArgs)
  // optional string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.RunPipelineArgs.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // map<string, string> inputs = 2;
  if (!this->inputs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1alpha2.RunPipelineArgs.InputsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1alpha2.RunPipelineArgs.InputsEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->inputs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->inputs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->inputs().begin();
          it != this->inputs().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<RunPipelineArgs_InputsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(inputs_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<RunPipelineArgs_InputsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->inputs().begin();
          it != this->inputs().end(); ++it) {
        entry.reset(inputs_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> outputs = 3;
  if (!this->outputs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1alpha2.RunPipelineArgs.OutputsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1alpha2.RunPipelineArgs.OutputsEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->outputs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->outputs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->outputs().begin();
          it != this->outputs().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<RunPipelineArgs_OutputsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(outputs_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<RunPipelineArgs_OutputsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->outputs().begin();
          it != this->outputs().end(); ++it) {
        entry.reset(outputs_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional .google.genomics.v1alpha2.ServiceAccount service_account = 4;
  if (this->has_service_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->service_account_, output);
  }

  // optional string client_id = 5;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.RunPipelineArgs.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->client_id(), output);
  }

  // optional .google.genomics.v1alpha2.PipelineResources resources = 6;
  if (this->has_resources()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->resources_, output);
  }

  // optional .google.genomics.v1alpha2.LoggingOptions logging = 7;
  if (this->has_logging()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->logging_, output);
  }

  // optional .google.protobuf.Duration keep_vm_alive_on_failure_duration = 8;
  if (this->has_keep_vm_alive_on_failure_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->keep_vm_alive_on_failure_duration_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1alpha2.RunPipelineArgs)
}

::google::protobuf::uint8* RunPipelineArgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1alpha2.RunPipelineArgs)
  // optional string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.RunPipelineArgs.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // map<string, string> inputs = 2;
  if (!this->inputs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1alpha2.RunPipelineArgs.InputsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1alpha2.RunPipelineArgs.InputsEntry.value");
      }
    };

    if (deterministic &&
        this->inputs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->inputs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->inputs().begin();
          it != this->inputs().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<RunPipelineArgs_InputsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(inputs_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<RunPipelineArgs_InputsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->inputs().begin();
          it != this->inputs().end(); ++it) {
        entry.reset(inputs_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> outputs = 3;
  if (!this->outputs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1alpha2.RunPipelineArgs.OutputsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1alpha2.RunPipelineArgs.OutputsEntry.value");
      }
    };

    if (deterministic &&
        this->outputs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->outputs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->outputs().begin();
          it != this->outputs().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<RunPipelineArgs_OutputsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(outputs_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<RunPipelineArgs_OutputsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->outputs().begin();
          it != this->outputs().end(); ++it) {
        entry.reset(outputs_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional .google.genomics.v1alpha2.ServiceAccount service_account = 4;
  if (this->has_service_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->service_account_, false, target);
  }

  // optional string client_id = 5;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.RunPipelineArgs.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->client_id(), target);
  }

  // optional .google.genomics.v1alpha2.PipelineResources resources = 6;
  if (this->has_resources()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->resources_, false, target);
  }

  // optional .google.genomics.v1alpha2.LoggingOptions logging = 7;
  if (this->has_logging()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->logging_, false, target);
  }

  // optional .google.protobuf.Duration keep_vm_alive_on_failure_duration = 8;
  if (this->has_keep_vm_alive_on_failure_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->keep_vm_alive_on_failure_duration_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1alpha2.RunPipelineArgs)
  return target;
}

size_t RunPipelineArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1alpha2.RunPipelineArgs)
  size_t total_size = 0;

  // optional string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // optional .google.genomics.v1alpha2.ServiceAccount service_account = 4;
  if (this->has_service_account()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->service_account_);
  }

  // optional string client_id = 5;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  // optional .google.genomics.v1alpha2.PipelineResources resources = 6;
  if (this->has_resources()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resources_);
  }

  // optional .google.genomics.v1alpha2.LoggingOptions logging = 7;
  if (this->has_logging()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->logging_);
  }

  // optional .google.protobuf.Duration keep_vm_alive_on_failure_duration = 8;
  if (this->has_keep_vm_alive_on_failure_duration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->keep_vm_alive_on_failure_duration_);
  }

  // map<string, string> inputs = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->inputs_size());
  {
    ::google::protobuf::scoped_ptr<RunPipelineArgs_InputsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->inputs().begin();
        it != this->inputs().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(inputs_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // map<string, string> outputs = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->outputs_size());
  {
    ::google::protobuf::scoped_ptr<RunPipelineArgs_OutputsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->outputs().begin();
        it != this->outputs().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(outputs_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunPipelineArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1alpha2.RunPipelineArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RunPipelineArgs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RunPipelineArgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1alpha2.RunPipelineArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1alpha2.RunPipelineArgs)
    UnsafeMergeFrom(*source);
  }
}

void RunPipelineArgs::MergeFrom(const RunPipelineArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1alpha2.RunPipelineArgs)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RunPipelineArgs::UnsafeMergeFrom(const RunPipelineArgs& from) {
  GOOGLE_DCHECK(&from != this);
  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
  if (from.project_id().size() > 0) {
    set_project_id(from.project_id());
  }
  if (from.has_service_account()) {
    mutable_service_account()->::google::genomics::v1alpha2::ServiceAccount::MergeFrom(from.service_account());
  }
  if (from.client_id().size() > 0) {
    set_client_id(from.client_id());
  }
  if (from.has_resources()) {
    mutable_resources()->::google::genomics::v1alpha2::PipelineResources::MergeFrom(from.resources());
  }
  if (from.has_logging()) {
    mutable_logging()->::google::genomics::v1alpha2::LoggingOptions::MergeFrom(from.logging());
  }
  if (from.has_keep_vm_alive_on_failure_duration()) {
    mutable_keep_vm_alive_on_failure_duration()->::google::protobuf::Duration::MergeFrom(from.keep_vm_alive_on_failure_duration());
  }
}

void RunPipelineArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1alpha2.RunPipelineArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunPipelineArgs::CopyFrom(const RunPipelineArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1alpha2.RunPipelineArgs)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RunPipelineArgs::IsInitialized() const {

  return true;
}

void RunPipelineArgs::Swap(RunPipelineArgs* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RunPipelineArgs temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void RunPipelineArgs::UnsafeArenaSwap(RunPipelineArgs* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RunPipelineArgs::InternalSwap(RunPipelineArgs* other) {
  project_id_.Swap(&other->project_id_);
  inputs_.Swap(&other->inputs_);
  outputs_.Swap(&other->outputs_);
  std::swap(service_account_, other->service_account_);
  client_id_.Swap(&other->client_id_);
  std::swap(resources_, other->resources_);
  std::swap(logging_, other->logging_);
  std::swap(keep_vm_alive_on_failure_duration_, other->keep_vm_alive_on_failure_duration_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RunPipelineArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunPipelineArgs_descriptor_;
  metadata.reflection = RunPipelineArgs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RunPipelineArgs

// optional string project_id = 1;
void RunPipelineArgs::clear_project_id() {
  project_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& RunPipelineArgs::project_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.RunPipelineArgs.project_id)
  return project_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RunPipelineArgs::set_project_id(const ::std::string& value) {
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.RunPipelineArgs.project_id)
}
void RunPipelineArgs::set_project_id(const char* value) {
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.RunPipelineArgs.project_id)
}
void RunPipelineArgs::set_project_id(const char* value,
    size_t size) {
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.RunPipelineArgs.project_id)
}
::std::string* RunPipelineArgs::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.RunPipelineArgs.project_id)
  return project_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RunPipelineArgs::release_project_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.RunPipelineArgs.project_id)
  
  return project_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RunPipelineArgs::unsafe_arena_release_project_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.RunPipelineArgs.project_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return project_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void RunPipelineArgs::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.RunPipelineArgs.project_id)
}
void RunPipelineArgs::unsafe_arena_set_allocated_project_id(
    ::std::string* project_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      project_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.RunPipelineArgs.project_id)
}

// map<string, string> inputs = 2;
int RunPipelineArgs::inputs_size() const {
  return inputs_.size();
}
void RunPipelineArgs::clear_inputs() {
  inputs_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
RunPipelineArgs::inputs() const {
  // @@protoc_insertion_point(field_map:google.genomics.v1alpha2.RunPipelineArgs.inputs)
  return inputs_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
RunPipelineArgs::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_map:google.genomics.v1alpha2.RunPipelineArgs.inputs)
  return inputs_.MutableMap();
}

// map<string, string> outputs = 3;
int RunPipelineArgs::outputs_size() const {
  return outputs_.size();
}
void RunPipelineArgs::clear_outputs() {
  outputs_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
RunPipelineArgs::outputs() const {
  // @@protoc_insertion_point(field_map:google.genomics.v1alpha2.RunPipelineArgs.outputs)
  return outputs_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
RunPipelineArgs::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_map:google.genomics.v1alpha2.RunPipelineArgs.outputs)
  return outputs_.MutableMap();
}

// optional .google.genomics.v1alpha2.ServiceAccount service_account = 4;
bool RunPipelineArgs::has_service_account() const {
  return this != internal_default_instance() && service_account_ != NULL;
}
void RunPipelineArgs::clear_service_account() {
  if (GetArenaNoVirtual() == NULL && service_account_ != NULL) delete service_account_;
  service_account_ = NULL;
}
const ::google::genomics::v1alpha2::ServiceAccount& RunPipelineArgs::service_account() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.RunPipelineArgs.service_account)
  return service_account_ != NULL ? *service_account_
                         : *::google::genomics::v1alpha2::ServiceAccount::internal_default_instance();
}
::google::genomics::v1alpha2::ServiceAccount* RunPipelineArgs::mutable_service_account() {
  
  if (service_account_ == NULL) {
    _slow_mutable_service_account();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.RunPipelineArgs.service_account)
  return service_account_;
}
::google::genomics::v1alpha2::ServiceAccount* RunPipelineArgs::release_service_account() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.RunPipelineArgs.service_account)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_service_account();
  } else {
    ::google::genomics::v1alpha2::ServiceAccount* temp = service_account_;
    service_account_ = NULL;
    return temp;
  }
}
 void RunPipelineArgs::set_allocated_service_account(::google::genomics::v1alpha2::ServiceAccount* service_account) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete service_account_;
  }
  if (service_account != NULL) {
    _slow_set_allocated_service_account(message_arena, &service_account);
  }
  service_account_ = service_account;
  if (service_account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.RunPipelineArgs.service_account)
}

// optional string client_id = 5;
void RunPipelineArgs::clear_client_id() {
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& RunPipelineArgs::client_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.RunPipelineArgs.client_id)
  return client_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RunPipelineArgs::set_client_id(const ::std::string& value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.RunPipelineArgs.client_id)
}
void RunPipelineArgs::set_client_id(const char* value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.RunPipelineArgs.client_id)
}
void RunPipelineArgs::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.RunPipelineArgs.client_id)
}
::std::string* RunPipelineArgs::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.RunPipelineArgs.client_id)
  return client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RunPipelineArgs::release_client_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.RunPipelineArgs.client_id)
  
  return client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RunPipelineArgs::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.RunPipelineArgs.client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void RunPipelineArgs::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.RunPipelineArgs.client_id)
}
void RunPipelineArgs::unsafe_arena_set_allocated_client_id(
    ::std::string* client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.RunPipelineArgs.client_id)
}

// optional .google.genomics.v1alpha2.PipelineResources resources = 6;
bool RunPipelineArgs::has_resources() const {
  return this != internal_default_instance() && resources_ != NULL;
}
void RunPipelineArgs::clear_resources() {
  if (GetArenaNoVirtual() == NULL && resources_ != NULL) delete resources_;
  resources_ = NULL;
}
const ::google::genomics::v1alpha2::PipelineResources& RunPipelineArgs::resources() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.RunPipelineArgs.resources)
  return resources_ != NULL ? *resources_
                         : *::google::genomics::v1alpha2::PipelineResources::internal_default_instance();
}
::google::genomics::v1alpha2::PipelineResources* RunPipelineArgs::mutable_resources() {
  
  if (resources_ == NULL) {
    _slow_mutable_resources();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.RunPipelineArgs.resources)
  return resources_;
}
::google::genomics::v1alpha2::PipelineResources* RunPipelineArgs::release_resources() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.RunPipelineArgs.resources)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_resources();
  } else {
    ::google::genomics::v1alpha2::PipelineResources* temp = resources_;
    resources_ = NULL;
    return temp;
  }
}
 void RunPipelineArgs::set_allocated_resources(::google::genomics::v1alpha2::PipelineResources* resources) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resources_;
  }
  if (resources != NULL) {
    _slow_set_allocated_resources(message_arena, &resources);
  }
  resources_ = resources;
  if (resources) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.RunPipelineArgs.resources)
}

// optional .google.genomics.v1alpha2.LoggingOptions logging = 7;
bool RunPipelineArgs::has_logging() const {
  return this != internal_default_instance() && logging_ != NULL;
}
void RunPipelineArgs::clear_logging() {
  if (GetArenaNoVirtual() == NULL && logging_ != NULL) delete logging_;
  logging_ = NULL;
}
const ::google::genomics::v1alpha2::LoggingOptions& RunPipelineArgs::logging() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.RunPipelineArgs.logging)
  return logging_ != NULL ? *logging_
                         : *::google::genomics::v1alpha2::LoggingOptions::internal_default_instance();
}
::google::genomics::v1alpha2::LoggingOptions* RunPipelineArgs::mutable_logging() {
  
  if (logging_ == NULL) {
    _slow_mutable_logging();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.RunPipelineArgs.logging)
  return logging_;
}
::google::genomics::v1alpha2::LoggingOptions* RunPipelineArgs::release_logging() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.RunPipelineArgs.logging)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_logging();
  } else {
    ::google::genomics::v1alpha2::LoggingOptions* temp = logging_;
    logging_ = NULL;
    return temp;
  }
}
 void RunPipelineArgs::set_allocated_logging(::google::genomics::v1alpha2::LoggingOptions* logging) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete logging_;
  }
  if (logging != NULL) {
    _slow_set_allocated_logging(message_arena, &logging);
  }
  logging_ = logging;
  if (logging) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.RunPipelineArgs.logging)
}

// optional .google.protobuf.Duration keep_vm_alive_on_failure_duration = 8;
bool RunPipelineArgs::has_keep_vm_alive_on_failure_duration() const {
  return this != internal_default_instance() && keep_vm_alive_on_failure_duration_ != NULL;
}
void RunPipelineArgs::clear_keep_vm_alive_on_failure_duration() {
  if (GetArenaNoVirtual() == NULL && keep_vm_alive_on_failure_duration_ != NULL) delete keep_vm_alive_on_failure_duration_;
  keep_vm_alive_on_failure_duration_ = NULL;
}
const ::google::protobuf::Duration& RunPipelineArgs::keep_vm_alive_on_failure_duration() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.RunPipelineArgs.keep_vm_alive_on_failure_duration)
  return keep_vm_alive_on_failure_duration_ != NULL ? *keep_vm_alive_on_failure_duration_
                         : *::google::protobuf::Duration::internal_default_instance();
}
::google::protobuf::Duration* RunPipelineArgs::mutable_keep_vm_alive_on_failure_duration() {
  
  if (keep_vm_alive_on_failure_duration_ == NULL) {
    _slow_mutable_keep_vm_alive_on_failure_duration();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.RunPipelineArgs.keep_vm_alive_on_failure_duration)
  return keep_vm_alive_on_failure_duration_;
}
::google::protobuf::Duration* RunPipelineArgs::release_keep_vm_alive_on_failure_duration() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.RunPipelineArgs.keep_vm_alive_on_failure_duration)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_keep_vm_alive_on_failure_duration();
  } else {
    ::google::protobuf::Duration* temp = keep_vm_alive_on_failure_duration_;
    keep_vm_alive_on_failure_duration_ = NULL;
    return temp;
  }
}
 void RunPipelineArgs::set_allocated_keep_vm_alive_on_failure_duration(::google::protobuf::Duration* keep_vm_alive_on_failure_duration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete keep_vm_alive_on_failure_duration_;
  }
  if (keep_vm_alive_on_failure_duration != NULL) {
    _slow_set_allocated_keep_vm_alive_on_failure_duration(message_arena, &keep_vm_alive_on_failure_duration);
  }
  keep_vm_alive_on_failure_duration_ = keep_vm_alive_on_failure_duration;
  if (keep_vm_alive_on_failure_duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.RunPipelineArgs.keep_vm_alive_on_failure_duration)
}

inline const RunPipelineArgs* RunPipelineArgs::internal_default_instance() {
  return &RunPipelineArgs_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void RunPipelineRequest::_slow_mutable_pipeline_args() {
  pipeline_args_ = ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1alpha2::RunPipelineArgs >(
      GetArenaNoVirtual());
}
::google::genomics::v1alpha2::RunPipelineArgs* RunPipelineRequest::_slow_release_pipeline_args() {
  if (pipeline_args_ == NULL) {
    return NULL;
  } else {
    ::google::genomics::v1alpha2::RunPipelineArgs* temp = new ::google::genomics::v1alpha2::RunPipelineArgs(*pipeline_args_);
    pipeline_args_ = NULL;
    return temp;
  }
}
::google::genomics::v1alpha2::RunPipelineArgs* RunPipelineRequest::unsafe_arena_release_pipeline_args() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.RunPipelineRequest.pipeline_args)
  
  ::google::genomics::v1alpha2::RunPipelineArgs* temp = pipeline_args_;
  pipeline_args_ = NULL;
  return temp;
}
void RunPipelineRequest::_slow_set_allocated_pipeline_args(
    ::google::protobuf::Arena* message_arena, ::google::genomics::v1alpha2::RunPipelineArgs** pipeline_args) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*pipeline_args) == NULL) {
      message_arena->Own(*pipeline_args);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*pipeline_args)) {
      ::google::genomics::v1alpha2::RunPipelineArgs* new_pipeline_args = 
            ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1alpha2::RunPipelineArgs >(
            message_arena);
      new_pipeline_args->CopyFrom(**pipeline_args);
      *pipeline_args = new_pipeline_args;
    }
}
void RunPipelineRequest::unsafe_arena_set_allocated_pipeline_args(
    ::google::genomics::v1alpha2::RunPipelineArgs* pipeline_args) {
  if (GetArenaNoVirtual() == NULL) {
    delete pipeline_args_;
  }
  pipeline_args_ = pipeline_args;
  if (pipeline_args) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.RunPipelineRequest.pipeline_args)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunPipelineRequest::kPipelineIdFieldNumber;
const int RunPipelineRequest::kEphemeralPipelineFieldNumber;
const int RunPipelineRequest::kPipelineArgsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunPipelineRequest::RunPipelineRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1alpha2.RunPipelineRequest)
}
RunPipelineRequest::RunPipelineRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1alpha2.RunPipelineRequest)
}

void RunPipelineRequest::InitAsDefaultInstance() {
  RunPipelineRequest_default_oneof_instance_->pipeline_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  RunPipelineRequest_default_oneof_instance_->ephemeral_pipeline_ = const_cast< ::google::genomics::v1alpha2::Pipeline*>(
      ::google::genomics::v1alpha2::Pipeline::internal_default_instance());
  pipeline_args_ = const_cast< ::google::genomics::v1alpha2::RunPipelineArgs*>(
      ::google::genomics::v1alpha2::RunPipelineArgs::internal_default_instance());
}

RunPipelineRequest::RunPipelineRequest(const RunPipelineRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1alpha2.RunPipelineRequest)
}

void RunPipelineRequest::SharedCtor() {
  pipeline_args_ = NULL;
  clear_has_pipeline();
  _cached_size_ = 0;
}

RunPipelineRequest::~RunPipelineRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1alpha2.RunPipelineRequest)
  SharedDtor();
}

void RunPipelineRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (has_pipeline()) {
    clear_pipeline();
  }
  if (this != &RunPipelineRequest_default_instance_.get()) {
    delete pipeline_args_;
  }
}

void RunPipelineRequest::ArenaDtor(void* object) {
  RunPipelineRequest* _this = reinterpret_cast< RunPipelineRequest* >(object);
  (void)_this;
}
void RunPipelineRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RunPipelineRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunPipelineRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunPipelineRequest_descriptor_;
}

const RunPipelineRequest& RunPipelineRequest::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RunPipelineRequest> RunPipelineRequest_default_instance_;

RunPipelineRequest* RunPipelineRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RunPipelineRequest>(arena);
}

void RunPipelineRequest::clear_pipeline() {
// @@protoc_insertion_point(one_of_clear_start:google.genomics.v1alpha2.RunPipelineRequest)
  switch (pipeline_case()) {
    case kPipelineId: {
      pipeline_.pipeline_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case kEphemeralPipeline: {
      if (GetArenaNoVirtual() == NULL) {
        delete pipeline_.ephemeral_pipeline_;
      }
      break;
    }
    case PIPELINE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PIPELINE_NOT_SET;
}


void RunPipelineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1alpha2.RunPipelineRequest)
  if (GetArenaNoVirtual() == NULL && pipeline_args_ != NULL) delete pipeline_args_;
  pipeline_args_ = NULL;
  clear_pipeline();
}

bool RunPipelineRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1alpha2.RunPipelineRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pipeline_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pipeline_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pipeline_id().data(), this->pipeline_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.RunPipelineRequest.pipeline_id"));
        } else {
          goto handle_unusual;
        }
        goto after_ephemeral_pipeline;
        break;
      }

      // optional .google.genomics.v1alpha2.Pipeline ephemeral_pipeline = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ephemeral_pipeline()));
        } else {
          goto handle_unusual;
        }
       after_ephemeral_pipeline:
        if (input->ExpectTag(26)) goto parse_pipeline_args;
        break;
      }

      // optional .google.genomics.v1alpha2.RunPipelineArgs pipeline_args = 3;
      case 3: {
        if (tag == 26) {
         parse_pipeline_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pipeline_args()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1alpha2.RunPipelineRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1alpha2.RunPipelineRequest)
  return false;
#undef DO_
}

void RunPipelineRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1alpha2.RunPipelineRequest)
  // optional string pipeline_id = 1;
  if (has_pipeline_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pipeline_id().data(), this->pipeline_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.RunPipelineRequest.pipeline_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pipeline_id(), output);
  }

  // optional .google.genomics.v1alpha2.Pipeline ephemeral_pipeline = 2;
  if (has_ephemeral_pipeline()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *pipeline_.ephemeral_pipeline_, output);
  }

  // optional .google.genomics.v1alpha2.RunPipelineArgs pipeline_args = 3;
  if (this->has_pipeline_args()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->pipeline_args_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1alpha2.RunPipelineRequest)
}

::google::protobuf::uint8* RunPipelineRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1alpha2.RunPipelineRequest)
  // optional string pipeline_id = 1;
  if (has_pipeline_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pipeline_id().data(), this->pipeline_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.RunPipelineRequest.pipeline_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pipeline_id(), target);
  }

  // optional .google.genomics.v1alpha2.Pipeline ephemeral_pipeline = 2;
  if (has_ephemeral_pipeline()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *pipeline_.ephemeral_pipeline_, false, target);
  }

  // optional .google.genomics.v1alpha2.RunPipelineArgs pipeline_args = 3;
  if (this->has_pipeline_args()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->pipeline_args_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1alpha2.RunPipelineRequest)
  return target;
}

size_t RunPipelineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1alpha2.RunPipelineRequest)
  size_t total_size = 0;

  // optional .google.genomics.v1alpha2.RunPipelineArgs pipeline_args = 3;
  if (this->has_pipeline_args()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pipeline_args_);
  }

  switch (pipeline_case()) {
    // optional string pipeline_id = 1;
    case kPipelineId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pipeline_id());
      break;
    }
    // optional .google.genomics.v1alpha2.Pipeline ephemeral_pipeline = 2;
    case kEphemeralPipeline: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *pipeline_.ephemeral_pipeline_);
      break;
    }
    case PIPELINE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunPipelineRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1alpha2.RunPipelineRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RunPipelineRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RunPipelineRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1alpha2.RunPipelineRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1alpha2.RunPipelineRequest)
    UnsafeMergeFrom(*source);
  }
}

void RunPipelineRequest::MergeFrom(const RunPipelineRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1alpha2.RunPipelineRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RunPipelineRequest::UnsafeMergeFrom(const RunPipelineRequest& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.pipeline_case()) {
    case kPipelineId: {
      set_pipeline_id(from.pipeline_id());
      break;
    }
    case kEphemeralPipeline: {
      mutable_ephemeral_pipeline()->::google::genomics::v1alpha2::Pipeline::MergeFrom(from.ephemeral_pipeline());
      break;
    }
    case PIPELINE_NOT_SET: {
      break;
    }
  }
  if (from.has_pipeline_args()) {
    mutable_pipeline_args()->::google::genomics::v1alpha2::RunPipelineArgs::MergeFrom(from.pipeline_args());
  }
}

void RunPipelineRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1alpha2.RunPipelineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunPipelineRequest::CopyFrom(const RunPipelineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1alpha2.RunPipelineRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RunPipelineRequest::IsInitialized() const {

  return true;
}

void RunPipelineRequest::Swap(RunPipelineRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RunPipelineRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void RunPipelineRequest::UnsafeArenaSwap(RunPipelineRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RunPipelineRequest::InternalSwap(RunPipelineRequest* other) {
  std::swap(pipeline_args_, other->pipeline_args_);
  std::swap(pipeline_, other->pipeline_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RunPipelineRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunPipelineRequest_descriptor_;
  metadata.reflection = RunPipelineRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RunPipelineRequest

// optional string pipeline_id = 1;
bool RunPipelineRequest::has_pipeline_id() const {
  return pipeline_case() == kPipelineId;
}
void RunPipelineRequest::set_has_pipeline_id() {
  _oneof_case_[0] = kPipelineId;
}
void RunPipelineRequest::clear_pipeline_id() {
  if (has_pipeline_id()) {
    pipeline_.pipeline_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_pipeline();
  }
}
const ::std::string& RunPipelineRequest::pipeline_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.RunPipelineRequest.pipeline_id)
  if (has_pipeline_id()) {
    return pipeline_.pipeline_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void RunPipelineRequest::set_pipeline_id(const ::std::string& value) {
  if (!has_pipeline_id()) {
    clear_pipeline();
    set_has_pipeline_id();
    pipeline_.pipeline_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  pipeline_.pipeline_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.RunPipelineRequest.pipeline_id)
}
void RunPipelineRequest::set_pipeline_id(const char* value) {
  if (!has_pipeline_id()) {
    clear_pipeline();
    set_has_pipeline_id();
    pipeline_.pipeline_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  pipeline_.pipeline_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.RunPipelineRequest.pipeline_id)
}
void RunPipelineRequest::set_pipeline_id(const char* value,
                             size_t size) {
  if (!has_pipeline_id()) {
    clear_pipeline();
    set_has_pipeline_id();
    pipeline_.pipeline_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  pipeline_.pipeline_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.RunPipelineRequest.pipeline_id)
}
::std::string* RunPipelineRequest::mutable_pipeline_id() {
  if (!has_pipeline_id()) {
    clear_pipeline();
    set_has_pipeline_id();
    pipeline_.pipeline_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return pipeline_.pipeline_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.RunPipelineRequest.pipeline_id)
}
::std::string* RunPipelineRequest::release_pipeline_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.RunPipelineRequest.pipeline_id)
  if (has_pipeline_id()) {
    clear_has_pipeline();
    return pipeline_.pipeline_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
::std::string* RunPipelineRequest::unsafe_arena_release_pipeline_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.RunPipelineRequest.pipeline_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (has_pipeline_id()) {
    clear_has_pipeline();
    return pipeline_.pipeline_id_.UnsafeArenaRelease(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
void RunPipelineRequest::set_allocated_pipeline_id(::std::string* pipeline_id) {
  if (!has_pipeline_id()) {
    pipeline_.pipeline_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_pipeline();
  if (pipeline_id != NULL) {
    set_has_pipeline_id();
    pipeline_.pipeline_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pipeline_id,
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.RunPipelineRequest.pipeline_id)
}
void RunPipelineRequest::unsafe_arena_set_allocated_pipeline_id(::std::string* pipeline_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (!has_pipeline_id()) {
    pipeline_.pipeline_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_pipeline();
  if (pipeline_id) {
    set_has_pipeline_id();
    pipeline_.pipeline_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pipeline_id, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.RunPipelineRequest.pipeline_id)
}

// optional .google.genomics.v1alpha2.Pipeline ephemeral_pipeline = 2;
bool RunPipelineRequest::has_ephemeral_pipeline() const {
  return pipeline_case() == kEphemeralPipeline;
}
void RunPipelineRequest::set_has_ephemeral_pipeline() {
  _oneof_case_[0] = kEphemeralPipeline;
}
void RunPipelineRequest::clear_ephemeral_pipeline() {
  if (has_ephemeral_pipeline()) {
    if (GetArenaNoVirtual() == NULL) {
      delete pipeline_.ephemeral_pipeline_;
    }
    clear_has_pipeline();
  }
}
 const ::google::genomics::v1alpha2::Pipeline& RunPipelineRequest::ephemeral_pipeline() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.RunPipelineRequest.ephemeral_pipeline)
  return has_ephemeral_pipeline()
      ? *pipeline_.ephemeral_pipeline_
      : ::google::genomics::v1alpha2::Pipeline::default_instance();
}
::google::genomics::v1alpha2::Pipeline* RunPipelineRequest::mutable_ephemeral_pipeline() {
  if (!has_ephemeral_pipeline()) {
    clear_pipeline();
    set_has_ephemeral_pipeline();
    pipeline_.ephemeral_pipeline_ = 
      ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1alpha2::Pipeline >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.RunPipelineRequest.ephemeral_pipeline)
  return pipeline_.ephemeral_pipeline_;
}
::google::genomics::v1alpha2::Pipeline* RunPipelineRequest::release_ephemeral_pipeline() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.RunPipelineRequest.ephemeral_pipeline)
  if (has_ephemeral_pipeline()) {
    clear_has_pipeline();
    if (GetArenaNoVirtual() != NULL) {
      ::google::genomics::v1alpha2::Pipeline* temp = new ::google::genomics::v1alpha2::Pipeline(*pipeline_.ephemeral_pipeline_);
      pipeline_.ephemeral_pipeline_ = NULL;
      return temp;
    } else {
      ::google::genomics::v1alpha2::Pipeline* temp = pipeline_.ephemeral_pipeline_;
      pipeline_.ephemeral_pipeline_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void RunPipelineRequest::set_allocated_ephemeral_pipeline(::google::genomics::v1alpha2::Pipeline* ephemeral_pipeline) {
  clear_pipeline();
  if (ephemeral_pipeline) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(ephemeral_pipeline) == NULL) {
      GetArenaNoVirtual()->Own(ephemeral_pipeline);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(ephemeral_pipeline)) {
      ::google::genomics::v1alpha2::Pipeline* new_ephemeral_pipeline = 
          ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1alpha2::Pipeline >(
          GetArenaNoVirtual());
      new_ephemeral_pipeline->CopyFrom(*ephemeral_pipeline);
      ephemeral_pipeline = new_ephemeral_pipeline;
    }
    set_has_ephemeral_pipeline();
    pipeline_.ephemeral_pipeline_ = ephemeral_pipeline;
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.RunPipelineRequest.ephemeral_pipeline)
}
 ::google::genomics::v1alpha2::Pipeline* RunPipelineRequest::unsafe_arena_release_ephemeral_pipeline() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.RunPipelineRequest.ephemeral_pipeline)
  if (has_ephemeral_pipeline()) {
    clear_has_pipeline();
    ::google::genomics::v1alpha2::Pipeline* temp = pipeline_.ephemeral_pipeline_;
    pipeline_.ephemeral_pipeline_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void RunPipelineRequest::unsafe_arena_set_allocated_ephemeral_pipeline(::google::genomics::v1alpha2::Pipeline* ephemeral_pipeline) {
  clear_pipeline();
  if (ephemeral_pipeline) {
    set_has_ephemeral_pipeline();
    pipeline_.ephemeral_pipeline_ = ephemeral_pipeline;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.RunPipelineRequest.ephemeral_pipeline)
}

// optional .google.genomics.v1alpha2.RunPipelineArgs pipeline_args = 3;
bool RunPipelineRequest::has_pipeline_args() const {
  return this != internal_default_instance() && pipeline_args_ != NULL;
}
void RunPipelineRequest::clear_pipeline_args() {
  if (GetArenaNoVirtual() == NULL && pipeline_args_ != NULL) delete pipeline_args_;
  pipeline_args_ = NULL;
}
const ::google::genomics::v1alpha2::RunPipelineArgs& RunPipelineRequest::pipeline_args() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.RunPipelineRequest.pipeline_args)
  return pipeline_args_ != NULL ? *pipeline_args_
                         : *::google::genomics::v1alpha2::RunPipelineArgs::internal_default_instance();
}
::google::genomics::v1alpha2::RunPipelineArgs* RunPipelineRequest::mutable_pipeline_args() {
  
  if (pipeline_args_ == NULL) {
    _slow_mutable_pipeline_args();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.RunPipelineRequest.pipeline_args)
  return pipeline_args_;
}
::google::genomics::v1alpha2::RunPipelineArgs* RunPipelineRequest::release_pipeline_args() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.RunPipelineRequest.pipeline_args)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_pipeline_args();
  } else {
    ::google::genomics::v1alpha2::RunPipelineArgs* temp = pipeline_args_;
    pipeline_args_ = NULL;
    return temp;
  }
}
 void RunPipelineRequest::set_allocated_pipeline_args(::google::genomics::v1alpha2::RunPipelineArgs* pipeline_args) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pipeline_args_;
  }
  if (pipeline_args != NULL) {
    _slow_set_allocated_pipeline_args(message_arena, &pipeline_args);
  }
  pipeline_args_ = pipeline_args;
  if (pipeline_args) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.RunPipelineRequest.pipeline_args)
}

bool RunPipelineRequest::has_pipeline() const {
  return pipeline_case() != PIPELINE_NOT_SET;
}
void RunPipelineRequest::clear_has_pipeline() {
  _oneof_case_[0] = PIPELINE_NOT_SET;
}
RunPipelineRequest::PipelineCase RunPipelineRequest::pipeline_case() const {
  return RunPipelineRequest::PipelineCase(_oneof_case_[0]);
}
inline const RunPipelineRequest* RunPipelineRequest::internal_default_instance() {
  return &RunPipelineRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPipelineRequest::kPipelineIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPipelineRequest::GetPipelineRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1alpha2.GetPipelineRequest)
}
GetPipelineRequest::GetPipelineRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1alpha2.GetPipelineRequest)
}

void GetPipelineRequest::InitAsDefaultInstance() {
}

GetPipelineRequest::GetPipelineRequest(const GetPipelineRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1alpha2.GetPipelineRequest)
}

void GetPipelineRequest::SharedCtor() {
  pipeline_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetPipelineRequest::~GetPipelineRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1alpha2.GetPipelineRequest)
  SharedDtor();
}

void GetPipelineRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  pipeline_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void GetPipelineRequest::ArenaDtor(void* object) {
  GetPipelineRequest* _this = reinterpret_cast< GetPipelineRequest* >(object);
  (void)_this;
}
void GetPipelineRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetPipelineRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPipelineRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPipelineRequest_descriptor_;
}

const GetPipelineRequest& GetPipelineRequest::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetPipelineRequest> GetPipelineRequest_default_instance_;

GetPipelineRequest* GetPipelineRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetPipelineRequest>(arena);
}

void GetPipelineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1alpha2.GetPipelineRequest)
  pipeline_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool GetPipelineRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1alpha2.GetPipelineRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pipeline_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pipeline_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pipeline_id().data(), this->pipeline_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.GetPipelineRequest.pipeline_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1alpha2.GetPipelineRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1alpha2.GetPipelineRequest)
  return false;
#undef DO_
}

void GetPipelineRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1alpha2.GetPipelineRequest)
  // optional string pipeline_id = 1;
  if (this->pipeline_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pipeline_id().data(), this->pipeline_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.GetPipelineRequest.pipeline_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pipeline_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1alpha2.GetPipelineRequest)
}

::google::protobuf::uint8* GetPipelineRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1alpha2.GetPipelineRequest)
  // optional string pipeline_id = 1;
  if (this->pipeline_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pipeline_id().data(), this->pipeline_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.GetPipelineRequest.pipeline_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pipeline_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1alpha2.GetPipelineRequest)
  return target;
}

size_t GetPipelineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1alpha2.GetPipelineRequest)
  size_t total_size = 0;

  // optional string pipeline_id = 1;
  if (this->pipeline_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pipeline_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPipelineRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1alpha2.GetPipelineRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetPipelineRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPipelineRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1alpha2.GetPipelineRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1alpha2.GetPipelineRequest)
    UnsafeMergeFrom(*source);
  }
}

void GetPipelineRequest::MergeFrom(const GetPipelineRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1alpha2.GetPipelineRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetPipelineRequest::UnsafeMergeFrom(const GetPipelineRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.pipeline_id().size() > 0) {
    set_pipeline_id(from.pipeline_id());
  }
}

void GetPipelineRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1alpha2.GetPipelineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPipelineRequest::CopyFrom(const GetPipelineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1alpha2.GetPipelineRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetPipelineRequest::IsInitialized() const {

  return true;
}

void GetPipelineRequest::Swap(GetPipelineRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetPipelineRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void GetPipelineRequest::UnsafeArenaSwap(GetPipelineRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetPipelineRequest::InternalSwap(GetPipelineRequest* other) {
  pipeline_id_.Swap(&other->pipeline_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPipelineRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPipelineRequest_descriptor_;
  metadata.reflection = GetPipelineRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPipelineRequest

// optional string pipeline_id = 1;
void GetPipelineRequest::clear_pipeline_id() {
  pipeline_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetPipelineRequest::pipeline_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.GetPipelineRequest.pipeline_id)
  return pipeline_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetPipelineRequest::set_pipeline_id(const ::std::string& value) {
  
  pipeline_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.GetPipelineRequest.pipeline_id)
}
void GetPipelineRequest::set_pipeline_id(const char* value) {
  
  pipeline_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.GetPipelineRequest.pipeline_id)
}
void GetPipelineRequest::set_pipeline_id(const char* value,
    size_t size) {
  
  pipeline_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.GetPipelineRequest.pipeline_id)
}
::std::string* GetPipelineRequest::mutable_pipeline_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.GetPipelineRequest.pipeline_id)
  return pipeline_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetPipelineRequest::release_pipeline_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.GetPipelineRequest.pipeline_id)
  
  return pipeline_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetPipelineRequest::unsafe_arena_release_pipeline_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.GetPipelineRequest.pipeline_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return pipeline_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetPipelineRequest::set_allocated_pipeline_id(::std::string* pipeline_id) {
  if (pipeline_id != NULL) {
    
  } else {
    
  }
  pipeline_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pipeline_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.GetPipelineRequest.pipeline_id)
}
void GetPipelineRequest::unsafe_arena_set_allocated_pipeline_id(
    ::std::string* pipeline_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (pipeline_id != NULL) {
    
  } else {
    
  }
  pipeline_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      pipeline_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.GetPipelineRequest.pipeline_id)
}

inline const GetPipelineRequest* GetPipelineRequest::internal_default_instance() {
  return &GetPipelineRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListPipelinesRequest::kProjectIdFieldNumber;
const int ListPipelinesRequest::kNamePrefixFieldNumber;
const int ListPipelinesRequest::kPageSizeFieldNumber;
const int ListPipelinesRequest::kPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListPipelinesRequest::ListPipelinesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1alpha2.ListPipelinesRequest)
}
ListPipelinesRequest::ListPipelinesRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1alpha2.ListPipelinesRequest)
}

void ListPipelinesRequest::InitAsDefaultInstance() {
}

ListPipelinesRequest::ListPipelinesRequest(const ListPipelinesRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1alpha2.ListPipelinesRequest)
}

void ListPipelinesRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
  _cached_size_ = 0;
}

ListPipelinesRequest::~ListPipelinesRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1alpha2.ListPipelinesRequest)
  SharedDtor();
}

void ListPipelinesRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  project_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  name_prefix_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  page_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void ListPipelinesRequest::ArenaDtor(void* object) {
  ListPipelinesRequest* _this = reinterpret_cast< ListPipelinesRequest* >(object);
  (void)_this;
}
void ListPipelinesRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ListPipelinesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListPipelinesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListPipelinesRequest_descriptor_;
}

const ListPipelinesRequest& ListPipelinesRequest::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ListPipelinesRequest> ListPipelinesRequest_default_instance_;

ListPipelinesRequest* ListPipelinesRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ListPipelinesRequest>(arena);
}

void ListPipelinesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1alpha2.ListPipelinesRequest)
  project_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  name_prefix_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_size_ = 0;
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool ListPipelinesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1alpha2.ListPipelinesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string project_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.ListPipelinesRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name_prefix;
        break;
      }

      // optional string name_prefix = 2;
      case 2: {
        if (tag == 18) {
         parse_name_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name_prefix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name_prefix().data(), this->name_prefix().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.ListPipelinesRequest.name_prefix"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_page_size;
        break;
      }

      // optional int32 page_size = 3;
      case 3: {
        if (tag == 24) {
         parse_page_size:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_page_token;
        break;
      }

      // optional string page_token = 4;
      case 4: {
        if (tag == 34) {
         parse_page_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), this->page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.ListPipelinesRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1alpha2.ListPipelinesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1alpha2.ListPipelinesRequest)
  return false;
#undef DO_
}

void ListPipelinesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1alpha2.ListPipelinesRequest)
  // optional string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.ListPipelinesRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // optional string name_prefix = 2;
  if (this->name_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name_prefix().data(), this->name_prefix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.ListPipelinesRequest.name_prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name_prefix(), output);
  }

  // optional int32 page_size = 3;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->page_size(), output);
  }

  // optional string page_token = 4;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.ListPipelinesRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1alpha2.ListPipelinesRequest)
}

::google::protobuf::uint8* ListPipelinesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1alpha2.ListPipelinesRequest)
  // optional string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.ListPipelinesRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // optional string name_prefix = 2;
  if (this->name_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name_prefix().data(), this->name_prefix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.ListPipelinesRequest.name_prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name_prefix(), target);
  }

  // optional int32 page_size = 3;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->page_size(), target);
  }

  // optional string page_token = 4;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.ListPipelinesRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1alpha2.ListPipelinesRequest)
  return target;
}

size_t ListPipelinesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1alpha2.ListPipelinesRequest)
  size_t total_size = 0;

  // optional string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // optional string name_prefix = 2;
  if (this->name_prefix().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name_prefix());
  }

  // optional int32 page_size = 3;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  // optional string page_token = 4;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListPipelinesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1alpha2.ListPipelinesRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListPipelinesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListPipelinesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1alpha2.ListPipelinesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1alpha2.ListPipelinesRequest)
    UnsafeMergeFrom(*source);
  }
}

void ListPipelinesRequest::MergeFrom(const ListPipelinesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1alpha2.ListPipelinesRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ListPipelinesRequest::UnsafeMergeFrom(const ListPipelinesRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.project_id().size() > 0) {
    set_project_id(from.project_id());
  }
  if (from.name_prefix().size() > 0) {
    set_name_prefix(from.name_prefix());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
  if (from.page_token().size() > 0) {
    set_page_token(from.page_token());
  }
}

void ListPipelinesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1alpha2.ListPipelinesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPipelinesRequest::CopyFrom(const ListPipelinesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1alpha2.ListPipelinesRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ListPipelinesRequest::IsInitialized() const {

  return true;
}

void ListPipelinesRequest::Swap(ListPipelinesRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListPipelinesRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ListPipelinesRequest::UnsafeArenaSwap(ListPipelinesRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListPipelinesRequest::InternalSwap(ListPipelinesRequest* other) {
  project_id_.Swap(&other->project_id_);
  name_prefix_.Swap(&other->name_prefix_);
  std::swap(page_size_, other->page_size_);
  page_token_.Swap(&other->page_token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListPipelinesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListPipelinesRequest_descriptor_;
  metadata.reflection = ListPipelinesRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListPipelinesRequest

// optional string project_id = 1;
void ListPipelinesRequest::clear_project_id() {
  project_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ListPipelinesRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.ListPipelinesRequest.project_id)
  return project_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListPipelinesRequest::set_project_id(const ::std::string& value) {
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.ListPipelinesRequest.project_id)
}
void ListPipelinesRequest::set_project_id(const char* value) {
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.ListPipelinesRequest.project_id)
}
void ListPipelinesRequest::set_project_id(const char* value,
    size_t size) {
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.ListPipelinesRequest.project_id)
}
::std::string* ListPipelinesRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.ListPipelinesRequest.project_id)
  return project_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListPipelinesRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.ListPipelinesRequest.project_id)
  
  return project_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListPipelinesRequest::unsafe_arena_release_project_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.ListPipelinesRequest.project_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return project_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ListPipelinesRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.ListPipelinesRequest.project_id)
}
void ListPipelinesRequest::unsafe_arena_set_allocated_project_id(
    ::std::string* project_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      project_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.ListPipelinesRequest.project_id)
}

// optional string name_prefix = 2;
void ListPipelinesRequest::clear_name_prefix() {
  name_prefix_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ListPipelinesRequest::name_prefix() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.ListPipelinesRequest.name_prefix)
  return name_prefix_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListPipelinesRequest::set_name_prefix(const ::std::string& value) {
  
  name_prefix_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.ListPipelinesRequest.name_prefix)
}
void ListPipelinesRequest::set_name_prefix(const char* value) {
  
  name_prefix_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.ListPipelinesRequest.name_prefix)
}
void ListPipelinesRequest::set_name_prefix(const char* value,
    size_t size) {
  
  name_prefix_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.ListPipelinesRequest.name_prefix)
}
::std::string* ListPipelinesRequest::mutable_name_prefix() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.ListPipelinesRequest.name_prefix)
  return name_prefix_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListPipelinesRequest::release_name_prefix() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.ListPipelinesRequest.name_prefix)
  
  return name_prefix_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListPipelinesRequest::unsafe_arena_release_name_prefix() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.ListPipelinesRequest.name_prefix)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_prefix_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ListPipelinesRequest::set_allocated_name_prefix(::std::string* name_prefix) {
  if (name_prefix != NULL) {
    
  } else {
    
  }
  name_prefix_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name_prefix,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.ListPipelinesRequest.name_prefix)
}
void ListPipelinesRequest::unsafe_arena_set_allocated_name_prefix(
    ::std::string* name_prefix) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name_prefix != NULL) {
    
  } else {
    
  }
  name_prefix_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name_prefix, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.ListPipelinesRequest.name_prefix)
}

// optional int32 page_size = 3;
void ListPipelinesRequest::clear_page_size() {
  page_size_ = 0;
}
::google::protobuf::int32 ListPipelinesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.ListPipelinesRequest.page_size)
  return page_size_;
}
void ListPipelinesRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.ListPipelinesRequest.page_size)
}

// optional string page_token = 4;
void ListPipelinesRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ListPipelinesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.ListPipelinesRequest.page_token)
  return page_token_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListPipelinesRequest::set_page_token(const ::std::string& value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.ListPipelinesRequest.page_token)
}
void ListPipelinesRequest::set_page_token(const char* value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.ListPipelinesRequest.page_token)
}
void ListPipelinesRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.ListPipelinesRequest.page_token)
}
::std::string* ListPipelinesRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.ListPipelinesRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListPipelinesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.ListPipelinesRequest.page_token)
  
  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListPipelinesRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.ListPipelinesRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ListPipelinesRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.ListPipelinesRequest.page_token)
}
void ListPipelinesRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.ListPipelinesRequest.page_token)
}

inline const ListPipelinesRequest* ListPipelinesRequest::internal_default_instance() {
  return &ListPipelinesRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListPipelinesResponse::kPipelinesFieldNumber;
const int ListPipelinesResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListPipelinesResponse::ListPipelinesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1alpha2.ListPipelinesResponse)
}
ListPipelinesResponse::ListPipelinesResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  pipelines_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1alpha2.ListPipelinesResponse)
}

void ListPipelinesResponse::InitAsDefaultInstance() {
}

ListPipelinesResponse::ListPipelinesResponse(const ListPipelinesResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1alpha2.ListPipelinesResponse)
}

void ListPipelinesResponse::SharedCtor() {
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ListPipelinesResponse::~ListPipelinesResponse() {
  // @@protoc_insertion_point(destructor:google.genomics.v1alpha2.ListPipelinesResponse)
  SharedDtor();
}

void ListPipelinesResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  next_page_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void ListPipelinesResponse::ArenaDtor(void* object) {
  ListPipelinesResponse* _this = reinterpret_cast< ListPipelinesResponse* >(object);
  (void)_this;
}
void ListPipelinesResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ListPipelinesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListPipelinesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListPipelinesResponse_descriptor_;
}

const ListPipelinesResponse& ListPipelinesResponse::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ListPipelinesResponse> ListPipelinesResponse_default_instance_;

ListPipelinesResponse* ListPipelinesResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ListPipelinesResponse>(arena);
}

void ListPipelinesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1alpha2.ListPipelinesResponse)
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  pipelines_.Clear();
}

bool ListPipelinesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1alpha2.ListPipelinesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.genomics.v1alpha2.Pipeline pipelines = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_pipelines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pipelines()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_pipelines;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_next_page_token;
        break;
      }

      // optional string next_page_token = 2;
      case 2: {
        if (tag == 18) {
         parse_next_page_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), this->next_page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.ListPipelinesResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1alpha2.ListPipelinesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1alpha2.ListPipelinesResponse)
  return false;
#undef DO_
}

void ListPipelinesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1alpha2.ListPipelinesResponse)
  // repeated .google.genomics.v1alpha2.Pipeline pipelines = 1;
  for (unsigned int i = 0, n = this->pipelines_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pipelines(i), output);
  }

  // optional string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.ListPipelinesResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1alpha2.ListPipelinesResponse)
}

::google::protobuf::uint8* ListPipelinesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1alpha2.ListPipelinesResponse)
  // repeated .google.genomics.v1alpha2.Pipeline pipelines = 1;
  for (unsigned int i = 0, n = this->pipelines_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->pipelines(i), false, target);
  }

  // optional string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.ListPipelinesResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1alpha2.ListPipelinesResponse)
  return target;
}

size_t ListPipelinesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1alpha2.ListPipelinesResponse)
  size_t total_size = 0;

  // optional string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  // repeated .google.genomics.v1alpha2.Pipeline pipelines = 1;
  {
    unsigned int count = this->pipelines_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pipelines(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListPipelinesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1alpha2.ListPipelinesResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListPipelinesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListPipelinesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1alpha2.ListPipelinesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1alpha2.ListPipelinesResponse)
    UnsafeMergeFrom(*source);
  }
}

void ListPipelinesResponse::MergeFrom(const ListPipelinesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1alpha2.ListPipelinesResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ListPipelinesResponse::UnsafeMergeFrom(const ListPipelinesResponse& from) {
  GOOGLE_DCHECK(&from != this);
  pipelines_.MergeFrom(from.pipelines_);
  if (from.next_page_token().size() > 0) {
    set_next_page_token(from.next_page_token());
  }
}

void ListPipelinesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1alpha2.ListPipelinesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPipelinesResponse::CopyFrom(const ListPipelinesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1alpha2.ListPipelinesResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ListPipelinesResponse::IsInitialized() const {

  return true;
}

void ListPipelinesResponse::Swap(ListPipelinesResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListPipelinesResponse temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ListPipelinesResponse::UnsafeArenaSwap(ListPipelinesResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListPipelinesResponse::InternalSwap(ListPipelinesResponse* other) {
  pipelines_.UnsafeArenaSwap(&other->pipelines_);
  next_page_token_.Swap(&other->next_page_token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListPipelinesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListPipelinesResponse_descriptor_;
  metadata.reflection = ListPipelinesResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListPipelinesResponse

// repeated .google.genomics.v1alpha2.Pipeline pipelines = 1;
int ListPipelinesResponse::pipelines_size() const {
  return pipelines_.size();
}
void ListPipelinesResponse::clear_pipelines() {
  pipelines_.Clear();
}
const ::google::genomics::v1alpha2::Pipeline& ListPipelinesResponse::pipelines(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.ListPipelinesResponse.pipelines)
  return pipelines_.Get(index);
}
::google::genomics::v1alpha2::Pipeline* ListPipelinesResponse::mutable_pipelines(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.ListPipelinesResponse.pipelines)
  return pipelines_.Mutable(index);
}
::google::genomics::v1alpha2::Pipeline* ListPipelinesResponse::add_pipelines() {
  // @@protoc_insertion_point(field_add:google.genomics.v1alpha2.ListPipelinesResponse.pipelines)
  return pipelines_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::genomics::v1alpha2::Pipeline >*
ListPipelinesResponse::mutable_pipelines() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1alpha2.ListPipelinesResponse.pipelines)
  return &pipelines_;
}
const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1alpha2::Pipeline >&
ListPipelinesResponse::pipelines() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1alpha2.ListPipelinesResponse.pipelines)
  return pipelines_;
}

// optional string next_page_token = 2;
void ListPipelinesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ListPipelinesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.ListPipelinesResponse.next_page_token)
  return next_page_token_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListPipelinesResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.ListPipelinesResponse.next_page_token)
}
void ListPipelinesResponse::set_next_page_token(const char* value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.ListPipelinesResponse.next_page_token)
}
void ListPipelinesResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.ListPipelinesResponse.next_page_token)
}
::std::string* ListPipelinesResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.ListPipelinesResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListPipelinesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.ListPipelinesResponse.next_page_token)
  
  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListPipelinesResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.ListPipelinesResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ListPipelinesResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.ListPipelinesResponse.next_page_token)
}
void ListPipelinesResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.ListPipelinesResponse.next_page_token)
}

inline const ListPipelinesResponse* ListPipelinesResponse::internal_default_instance() {
  return &ListPipelinesResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeletePipelineRequest::kPipelineIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeletePipelineRequest::DeletePipelineRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1alpha2.DeletePipelineRequest)
}
DeletePipelineRequest::DeletePipelineRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1alpha2.DeletePipelineRequest)
}

void DeletePipelineRequest::InitAsDefaultInstance() {
}

DeletePipelineRequest::DeletePipelineRequest(const DeletePipelineRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1alpha2.DeletePipelineRequest)
}

void DeletePipelineRequest::SharedCtor() {
  pipeline_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DeletePipelineRequest::~DeletePipelineRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1alpha2.DeletePipelineRequest)
  SharedDtor();
}

void DeletePipelineRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  pipeline_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void DeletePipelineRequest::ArenaDtor(void* object) {
  DeletePipelineRequest* _this = reinterpret_cast< DeletePipelineRequest* >(object);
  (void)_this;
}
void DeletePipelineRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DeletePipelineRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeletePipelineRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeletePipelineRequest_descriptor_;
}

const DeletePipelineRequest& DeletePipelineRequest::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DeletePipelineRequest> DeletePipelineRequest_default_instance_;

DeletePipelineRequest* DeletePipelineRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DeletePipelineRequest>(arena);
}

void DeletePipelineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1alpha2.DeletePipelineRequest)
  pipeline_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool DeletePipelineRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1alpha2.DeletePipelineRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pipeline_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pipeline_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pipeline_id().data(), this->pipeline_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.DeletePipelineRequest.pipeline_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1alpha2.DeletePipelineRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1alpha2.DeletePipelineRequest)
  return false;
#undef DO_
}

void DeletePipelineRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1alpha2.DeletePipelineRequest)
  // optional string pipeline_id = 1;
  if (this->pipeline_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pipeline_id().data(), this->pipeline_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.DeletePipelineRequest.pipeline_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pipeline_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1alpha2.DeletePipelineRequest)
}

::google::protobuf::uint8* DeletePipelineRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1alpha2.DeletePipelineRequest)
  // optional string pipeline_id = 1;
  if (this->pipeline_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pipeline_id().data(), this->pipeline_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.DeletePipelineRequest.pipeline_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pipeline_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1alpha2.DeletePipelineRequest)
  return target;
}

size_t DeletePipelineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1alpha2.DeletePipelineRequest)
  size_t total_size = 0;

  // optional string pipeline_id = 1;
  if (this->pipeline_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pipeline_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeletePipelineRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1alpha2.DeletePipelineRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DeletePipelineRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeletePipelineRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1alpha2.DeletePipelineRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1alpha2.DeletePipelineRequest)
    UnsafeMergeFrom(*source);
  }
}

void DeletePipelineRequest::MergeFrom(const DeletePipelineRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1alpha2.DeletePipelineRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DeletePipelineRequest::UnsafeMergeFrom(const DeletePipelineRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.pipeline_id().size() > 0) {
    set_pipeline_id(from.pipeline_id());
  }
}

void DeletePipelineRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1alpha2.DeletePipelineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeletePipelineRequest::CopyFrom(const DeletePipelineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1alpha2.DeletePipelineRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DeletePipelineRequest::IsInitialized() const {

  return true;
}

void DeletePipelineRequest::Swap(DeletePipelineRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeletePipelineRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void DeletePipelineRequest::UnsafeArenaSwap(DeletePipelineRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeletePipelineRequest::InternalSwap(DeletePipelineRequest* other) {
  pipeline_id_.Swap(&other->pipeline_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeletePipelineRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeletePipelineRequest_descriptor_;
  metadata.reflection = DeletePipelineRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeletePipelineRequest

// optional string pipeline_id = 1;
void DeletePipelineRequest::clear_pipeline_id() {
  pipeline_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& DeletePipelineRequest::pipeline_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.DeletePipelineRequest.pipeline_id)
  return pipeline_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeletePipelineRequest::set_pipeline_id(const ::std::string& value) {
  
  pipeline_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.DeletePipelineRequest.pipeline_id)
}
void DeletePipelineRequest::set_pipeline_id(const char* value) {
  
  pipeline_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.DeletePipelineRequest.pipeline_id)
}
void DeletePipelineRequest::set_pipeline_id(const char* value,
    size_t size) {
  
  pipeline_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.DeletePipelineRequest.pipeline_id)
}
::std::string* DeletePipelineRequest::mutable_pipeline_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.DeletePipelineRequest.pipeline_id)
  return pipeline_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeletePipelineRequest::release_pipeline_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.DeletePipelineRequest.pipeline_id)
  
  return pipeline_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeletePipelineRequest::unsafe_arena_release_pipeline_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.DeletePipelineRequest.pipeline_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return pipeline_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void DeletePipelineRequest::set_allocated_pipeline_id(::std::string* pipeline_id) {
  if (pipeline_id != NULL) {
    
  } else {
    
  }
  pipeline_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pipeline_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.DeletePipelineRequest.pipeline_id)
}
void DeletePipelineRequest::unsafe_arena_set_allocated_pipeline_id(
    ::std::string* pipeline_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (pipeline_id != NULL) {
    
  } else {
    
  }
  pipeline_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      pipeline_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.DeletePipelineRequest.pipeline_id)
}

inline const DeletePipelineRequest* DeletePipelineRequest::internal_default_instance() {
  return &DeletePipelineRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetControllerConfigRequest::kOperationIdFieldNumber;
const int GetControllerConfigRequest::kValidationTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetControllerConfigRequest::GetControllerConfigRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1alpha2.GetControllerConfigRequest)
}
GetControllerConfigRequest::GetControllerConfigRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1alpha2.GetControllerConfigRequest)
}

void GetControllerConfigRequest::InitAsDefaultInstance() {
}

GetControllerConfigRequest::GetControllerConfigRequest(const GetControllerConfigRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1alpha2.GetControllerConfigRequest)
}

void GetControllerConfigRequest::SharedCtor() {
  operation_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  validation_token_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

GetControllerConfigRequest::~GetControllerConfigRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1alpha2.GetControllerConfigRequest)
  SharedDtor();
}

void GetControllerConfigRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  operation_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void GetControllerConfigRequest::ArenaDtor(void* object) {
  GetControllerConfigRequest* _this = reinterpret_cast< GetControllerConfigRequest* >(object);
  (void)_this;
}
void GetControllerConfigRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetControllerConfigRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetControllerConfigRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetControllerConfigRequest_descriptor_;
}

const GetControllerConfigRequest& GetControllerConfigRequest::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetControllerConfigRequest> GetControllerConfigRequest_default_instance_;

GetControllerConfigRequest* GetControllerConfigRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetControllerConfigRequest>(arena);
}

void GetControllerConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1alpha2.GetControllerConfigRequest)
  operation_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  validation_token_ = GOOGLE_ULONGLONG(0);
}

bool GetControllerConfigRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1alpha2.GetControllerConfigRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string operation_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operation_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->operation_id().data(), this->operation_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.GetControllerConfigRequest.operation_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_validation_token;
        break;
      }

      // optional uint64 validation_token = 2;
      case 2: {
        if (tag == 16) {
         parse_validation_token:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &validation_token_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1alpha2.GetControllerConfigRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1alpha2.GetControllerConfigRequest)
  return false;
#undef DO_
}

void GetControllerConfigRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1alpha2.GetControllerConfigRequest)
  // optional string operation_id = 1;
  if (this->operation_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->operation_id().data(), this->operation_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.GetControllerConfigRequest.operation_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->operation_id(), output);
  }

  // optional uint64 validation_token = 2;
  if (this->validation_token() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->validation_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1alpha2.GetControllerConfigRequest)
}

::google::protobuf::uint8* GetControllerConfigRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1alpha2.GetControllerConfigRequest)
  // optional string operation_id = 1;
  if (this->operation_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->operation_id().data(), this->operation_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.GetControllerConfigRequest.operation_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->operation_id(), target);
  }

  // optional uint64 validation_token = 2;
  if (this->validation_token() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->validation_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1alpha2.GetControllerConfigRequest)
  return target;
}

size_t GetControllerConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1alpha2.GetControllerConfigRequest)
  size_t total_size = 0;

  // optional string operation_id = 1;
  if (this->operation_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->operation_id());
  }

  // optional uint64 validation_token = 2;
  if (this->validation_token() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->validation_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetControllerConfigRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1alpha2.GetControllerConfigRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetControllerConfigRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetControllerConfigRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1alpha2.GetControllerConfigRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1alpha2.GetControllerConfigRequest)
    UnsafeMergeFrom(*source);
  }
}

void GetControllerConfigRequest::MergeFrom(const GetControllerConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1alpha2.GetControllerConfigRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetControllerConfigRequest::UnsafeMergeFrom(const GetControllerConfigRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.operation_id().size() > 0) {
    set_operation_id(from.operation_id());
  }
  if (from.validation_token() != 0) {
    set_validation_token(from.validation_token());
  }
}

void GetControllerConfigRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1alpha2.GetControllerConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetControllerConfigRequest::CopyFrom(const GetControllerConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1alpha2.GetControllerConfigRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetControllerConfigRequest::IsInitialized() const {

  return true;
}

void GetControllerConfigRequest::Swap(GetControllerConfigRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetControllerConfigRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void GetControllerConfigRequest::UnsafeArenaSwap(GetControllerConfigRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetControllerConfigRequest::InternalSwap(GetControllerConfigRequest* other) {
  operation_id_.Swap(&other->operation_id_);
  std::swap(validation_token_, other->validation_token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetControllerConfigRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetControllerConfigRequest_descriptor_;
  metadata.reflection = GetControllerConfigRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetControllerConfigRequest

// optional string operation_id = 1;
void GetControllerConfigRequest::clear_operation_id() {
  operation_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetControllerConfigRequest::operation_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.GetControllerConfigRequest.operation_id)
  return operation_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetControllerConfigRequest::set_operation_id(const ::std::string& value) {
  
  operation_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.GetControllerConfigRequest.operation_id)
}
void GetControllerConfigRequest::set_operation_id(const char* value) {
  
  operation_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.GetControllerConfigRequest.operation_id)
}
void GetControllerConfigRequest::set_operation_id(const char* value,
    size_t size) {
  
  operation_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.GetControllerConfigRequest.operation_id)
}
::std::string* GetControllerConfigRequest::mutable_operation_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.GetControllerConfigRequest.operation_id)
  return operation_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetControllerConfigRequest::release_operation_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.GetControllerConfigRequest.operation_id)
  
  return operation_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetControllerConfigRequest::unsafe_arena_release_operation_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.GetControllerConfigRequest.operation_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return operation_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetControllerConfigRequest::set_allocated_operation_id(::std::string* operation_id) {
  if (operation_id != NULL) {
    
  } else {
    
  }
  operation_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operation_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.GetControllerConfigRequest.operation_id)
}
void GetControllerConfigRequest::unsafe_arena_set_allocated_operation_id(
    ::std::string* operation_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (operation_id != NULL) {
    
  } else {
    
  }
  operation_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      operation_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.GetControllerConfigRequest.operation_id)
}

// optional uint64 validation_token = 2;
void GetControllerConfigRequest::clear_validation_token() {
  validation_token_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetControllerConfigRequest::validation_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.GetControllerConfigRequest.validation_token)
  return validation_token_;
}
void GetControllerConfigRequest::set_validation_token(::google::protobuf::uint64 value) {
  
  validation_token_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.GetControllerConfigRequest.validation_token)
}

inline const GetControllerConfigRequest* GetControllerConfigRequest::internal_default_instance() {
  return &GetControllerConfigRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControllerConfig_RepeatedString::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControllerConfig_RepeatedString::ControllerConfig_RepeatedString()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1alpha2.ControllerConfig.RepeatedString)
}
ControllerConfig_RepeatedString::ControllerConfig_RepeatedString(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  values_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1alpha2.ControllerConfig.RepeatedString)
}

void ControllerConfig_RepeatedString::InitAsDefaultInstance() {
}

ControllerConfig_RepeatedString::ControllerConfig_RepeatedString(const ControllerConfig_RepeatedString& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1alpha2.ControllerConfig.RepeatedString)
}

void ControllerConfig_RepeatedString::SharedCtor() {
  _cached_size_ = 0;
}

ControllerConfig_RepeatedString::~ControllerConfig_RepeatedString() {
  // @@protoc_insertion_point(destructor:google.genomics.v1alpha2.ControllerConfig.RepeatedString)
  SharedDtor();
}

void ControllerConfig_RepeatedString::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void ControllerConfig_RepeatedString::ArenaDtor(void* object) {
  ControllerConfig_RepeatedString* _this = reinterpret_cast< ControllerConfig_RepeatedString* >(object);
  (void)_this;
}
void ControllerConfig_RepeatedString::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ControllerConfig_RepeatedString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControllerConfig_RepeatedString::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControllerConfig_RepeatedString_descriptor_;
}

const ControllerConfig_RepeatedString& ControllerConfig_RepeatedString::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ControllerConfig_RepeatedString> ControllerConfig_RepeatedString_default_instance_;

ControllerConfig_RepeatedString* ControllerConfig_RepeatedString::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ControllerConfig_RepeatedString>(arena);
}

void ControllerConfig_RepeatedString::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1alpha2.ControllerConfig.RepeatedString)
  values_.Clear();
}

bool ControllerConfig_RepeatedString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1alpha2.ControllerConfig.RepeatedString)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string values = 1;
      case 1: {
        if (tag == 10) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_values()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->values(this->values_size() - 1).data(),
            this->values(this->values_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.ControllerConfig.RepeatedString.values"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_values;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1alpha2.ControllerConfig.RepeatedString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1alpha2.ControllerConfig.RepeatedString)
  return false;
#undef DO_
}

void ControllerConfig_RepeatedString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1alpha2.ControllerConfig.RepeatedString)
  // repeated string values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->values(i).data(), this->values(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.ControllerConfig.RepeatedString.values");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->values(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1alpha2.ControllerConfig.RepeatedString)
}

::google::protobuf::uint8* ControllerConfig_RepeatedString::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1alpha2.ControllerConfig.RepeatedString)
  // repeated string values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->values(i).data(), this->values(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.ControllerConfig.RepeatedString.values");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->values(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1alpha2.ControllerConfig.RepeatedString)
  return target;
}

size_t ControllerConfig_RepeatedString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1alpha2.ControllerConfig.RepeatedString)
  size_t total_size = 0;

  // repeated string values = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->values_size());
  for (int i = 0; i < this->values_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->values(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControllerConfig_RepeatedString::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1alpha2.ControllerConfig.RepeatedString)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ControllerConfig_RepeatedString* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControllerConfig_RepeatedString>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1alpha2.ControllerConfig.RepeatedString)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1alpha2.ControllerConfig.RepeatedString)
    UnsafeMergeFrom(*source);
  }
}

void ControllerConfig_RepeatedString::MergeFrom(const ControllerConfig_RepeatedString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1alpha2.ControllerConfig.RepeatedString)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ControllerConfig_RepeatedString::UnsafeMergeFrom(const ControllerConfig_RepeatedString& from) {
  GOOGLE_DCHECK(&from != this);
  values_.UnsafeMergeFrom(from.values_);
}

void ControllerConfig_RepeatedString::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1alpha2.ControllerConfig.RepeatedString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerConfig_RepeatedString::CopyFrom(const ControllerConfig_RepeatedString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1alpha2.ControllerConfig.RepeatedString)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ControllerConfig_RepeatedString::IsInitialized() const {

  return true;
}

void ControllerConfig_RepeatedString::Swap(ControllerConfig_RepeatedString* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ControllerConfig_RepeatedString temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ControllerConfig_RepeatedString::UnsafeArenaSwap(ControllerConfig_RepeatedString* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ControllerConfig_RepeatedString::InternalSwap(ControllerConfig_RepeatedString* other) {
  values_.UnsafeArenaSwap(&other->values_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ControllerConfig_RepeatedString::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ControllerConfig_RepeatedString_descriptor_;
  metadata.reflection = ControllerConfig_RepeatedString_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControllerConfig::kImageFieldNumber;
const int ControllerConfig::kCmdFieldNumber;
const int ControllerConfig::kGcsLogPathFieldNumber;
const int ControllerConfig::kMachineTypeFieldNumber;
const int ControllerConfig::kVarsFieldNumber;
const int ControllerConfig::kDisksFieldNumber;
const int ControllerConfig::kGcsSourcesFieldNumber;
const int ControllerConfig::kGcsSinksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControllerConfig::ControllerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1alpha2.ControllerConfig)
}
ControllerConfig::ControllerConfig(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  vars_(arena),
  disks_(arena),
  gcs_sources_(arena),
  gcs_sinks_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1alpha2.ControllerConfig)
}

void ControllerConfig::InitAsDefaultInstance() {
}

ControllerConfig::ControllerConfig(const ControllerConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1alpha2.ControllerConfig)
}

void ControllerConfig::SharedCtor() {
  vars_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  vars_.SetEntryDescriptor(
      &::google::genomics::v1alpha2::ControllerConfig_VarsEntry_descriptor_);
  disks_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  disks_.SetEntryDescriptor(
      &::google::genomics::v1alpha2::ControllerConfig_DisksEntry_descriptor_);
  gcs_sources_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  gcs_sources_.SetEntryDescriptor(
      &::google::genomics::v1alpha2::ControllerConfig_GcsSourcesEntry_descriptor_);
  gcs_sinks_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  gcs_sinks_.SetEntryDescriptor(
      &::google::genomics::v1alpha2::ControllerConfig_GcsSinksEntry_descriptor_);
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gcs_log_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ControllerConfig::~ControllerConfig() {
  // @@protoc_insertion_point(destructor:google.genomics.v1alpha2.ControllerConfig)
  SharedDtor();
}

void ControllerConfig::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  image_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  cmd_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  gcs_log_path_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  machine_type_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void ControllerConfig::ArenaDtor(void* object) {
  ControllerConfig* _this = reinterpret_cast< ControllerConfig* >(object);
  (void)_this;
}
void ControllerConfig::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ControllerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControllerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControllerConfig_descriptor_;
}

const ControllerConfig& ControllerConfig::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ControllerConfig> ControllerConfig_default_instance_;

ControllerConfig* ControllerConfig::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ControllerConfig>(arena);
}

void ControllerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1alpha2.ControllerConfig)
  image_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  cmd_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  gcs_log_path_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  machine_type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  vars_.Clear();
  disks_.Clear();
  gcs_sources_.Clear();
  gcs_sinks_.Clear();
}

bool ControllerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1alpha2.ControllerConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string image = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->image().data(), this->image().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.ControllerConfig.image"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cmd;
        break;
      }

      // optional string cmd = 2;
      case 2: {
        if (tag == 18) {
         parse_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cmd().data(), this->cmd().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.ControllerConfig.cmd"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_gcs_log_path;
        break;
      }

      // optional string gcs_log_path = 3;
      case 3: {
        if (tag == 26) {
         parse_gcs_log_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gcs_log_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gcs_log_path().data(), this->gcs_log_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.ControllerConfig.gcs_log_path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_machine_type;
        break;
      }

      // optional string machine_type = 4;
      case 4: {
        if (tag == 34) {
         parse_machine_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->machine_type().data(), this->machine_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.ControllerConfig.machine_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_vars;
        break;
      }

      // map<string, string> vars = 5;
      case 5: {
        if (tag == 42) {
         parse_vars:
          DO_(input->IncrementRecursionDepth());
         parse_loop_vars:
          ControllerConfig_VarsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&vars_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.ControllerConfig.VarsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.ControllerConfig.VarsEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_vars;
        if (input->ExpectTag(50)) goto parse_loop_disks;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, string> disks = 6;
      case 6: {
        if (tag == 50) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_disks:
          ControllerConfig_DisksEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&disks_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.ControllerConfig.DisksEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.ControllerConfig.DisksEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_disks;
        if (input->ExpectTag(58)) goto parse_loop_gcs_sources;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, .google.genomics.v1alpha2.ControllerConfig.RepeatedString> gcs_sources = 7;
      case 7: {
        if (tag == 58) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_gcs_sources:
          ControllerConfig_GcsSourcesEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::google::genomics::v1alpha2::ControllerConfig_RepeatedString,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::genomics::v1alpha2::ControllerConfig_RepeatedString > > parser(&gcs_sources_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.ControllerConfig.GcsSourcesEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_gcs_sources;
        if (input->ExpectTag(66)) goto parse_loop_gcs_sinks;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, .google.genomics.v1alpha2.ControllerConfig.RepeatedString> gcs_sinks = 8;
      case 8: {
        if (tag == 66) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_gcs_sinks:
          ControllerConfig_GcsSinksEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::google::genomics::v1alpha2::ControllerConfig_RepeatedString,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::genomics::v1alpha2::ControllerConfig_RepeatedString > > parser(&gcs_sinks_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.ControllerConfig.GcsSinksEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_gcs_sinks;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1alpha2.ControllerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1alpha2.ControllerConfig)
  return false;
#undef DO_
}

void ControllerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1alpha2.ControllerConfig)
  // optional string image = 1;
  if (this->image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image().data(), this->image().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.ControllerConfig.image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->image(), output);
  }

  // optional string cmd = 2;
  if (this->cmd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.ControllerConfig.cmd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cmd(), output);
  }

  // optional string gcs_log_path = 3;
  if (this->gcs_log_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gcs_log_path().data(), this->gcs_log_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.ControllerConfig.gcs_log_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->gcs_log_path(), output);
  }

  // optional string machine_type = 4;
  if (this->machine_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->machine_type().data(), this->machine_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.ControllerConfig.machine_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->machine_type(), output);
  }

  // map<string, string> vars = 5;
  if (!this->vars().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1alpha2.ControllerConfig.VarsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1alpha2.ControllerConfig.VarsEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->vars().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->vars().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->vars().begin();
          it != this->vars().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ControllerConfig_VarsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(vars_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ControllerConfig_VarsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->vars().begin();
          it != this->vars().end(); ++it) {
        entry.reset(vars_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> disks = 6;
  if (!this->disks().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1alpha2.ControllerConfig.DisksEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1alpha2.ControllerConfig.DisksEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->disks().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->disks().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->disks().begin();
          it != this->disks().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ControllerConfig_DisksEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(disks_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ControllerConfig_DisksEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->disks().begin();
          it != this->disks().end(); ++it) {
        entry.reset(disks_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .google.genomics.v1alpha2.ControllerConfig.RepeatedString> gcs_sources = 7;
  if (!this->gcs_sources().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::genomics::v1alpha2::ControllerConfig_RepeatedString >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1alpha2.ControllerConfig.GcsSourcesEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->gcs_sources().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->gcs_sources().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::genomics::v1alpha2::ControllerConfig_RepeatedString >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::genomics::v1alpha2::ControllerConfig_RepeatedString >::const_iterator
          it = this->gcs_sources().begin();
          it != this->gcs_sources().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ControllerConfig_GcsSourcesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(gcs_sources_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ControllerConfig_GcsSourcesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::genomics::v1alpha2::ControllerConfig_RepeatedString >::const_iterator
          it = this->gcs_sources().begin();
          it != this->gcs_sources().end(); ++it) {
        entry.reset(gcs_sources_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .google.genomics.v1alpha2.ControllerConfig.RepeatedString> gcs_sinks = 8;
  if (!this->gcs_sinks().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::genomics::v1alpha2::ControllerConfig_RepeatedString >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1alpha2.ControllerConfig.GcsSinksEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->gcs_sinks().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->gcs_sinks().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::genomics::v1alpha2::ControllerConfig_RepeatedString >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::genomics::v1alpha2::ControllerConfig_RepeatedString >::const_iterator
          it = this->gcs_sinks().begin();
          it != this->gcs_sinks().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ControllerConfig_GcsSinksEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(gcs_sinks_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ControllerConfig_GcsSinksEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::genomics::v1alpha2::ControllerConfig_RepeatedString >::const_iterator
          it = this->gcs_sinks().begin();
          it != this->gcs_sinks().end(); ++it) {
        entry.reset(gcs_sinks_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1alpha2.ControllerConfig)
}

::google::protobuf::uint8* ControllerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1alpha2.ControllerConfig)
  // optional string image = 1;
  if (this->image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image().data(), this->image().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.ControllerConfig.image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->image(), target);
  }

  // optional string cmd = 2;
  if (this->cmd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.ControllerConfig.cmd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cmd(), target);
  }

  // optional string gcs_log_path = 3;
  if (this->gcs_log_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gcs_log_path().data(), this->gcs_log_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.ControllerConfig.gcs_log_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gcs_log_path(), target);
  }

  // optional string machine_type = 4;
  if (this->machine_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->machine_type().data(), this->machine_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.ControllerConfig.machine_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->machine_type(), target);
  }

  // map<string, string> vars = 5;
  if (!this->vars().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1alpha2.ControllerConfig.VarsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1alpha2.ControllerConfig.VarsEntry.value");
      }
    };

    if (deterministic &&
        this->vars().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->vars().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->vars().begin();
          it != this->vars().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ControllerConfig_VarsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(vars_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ControllerConfig_VarsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->vars().begin();
          it != this->vars().end(); ++it) {
        entry.reset(vars_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> disks = 6;
  if (!this->disks().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1alpha2.ControllerConfig.DisksEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1alpha2.ControllerConfig.DisksEntry.value");
      }
    };

    if (deterministic &&
        this->disks().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->disks().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->disks().begin();
          it != this->disks().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ControllerConfig_DisksEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(disks_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ControllerConfig_DisksEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->disks().begin();
          it != this->disks().end(); ++it) {
        entry.reset(disks_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .google.genomics.v1alpha2.ControllerConfig.RepeatedString> gcs_sources = 7;
  if (!this->gcs_sources().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::genomics::v1alpha2::ControllerConfig_RepeatedString >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1alpha2.ControllerConfig.GcsSourcesEntry.key");
      }
    };

    if (deterministic &&
        this->gcs_sources().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->gcs_sources().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::genomics::v1alpha2::ControllerConfig_RepeatedString >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::genomics::v1alpha2::ControllerConfig_RepeatedString >::const_iterator
          it = this->gcs_sources().begin();
          it != this->gcs_sources().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ControllerConfig_GcsSourcesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(gcs_sources_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ControllerConfig_GcsSourcesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::genomics::v1alpha2::ControllerConfig_RepeatedString >::const_iterator
          it = this->gcs_sources().begin();
          it != this->gcs_sources().end(); ++it) {
        entry.reset(gcs_sources_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .google.genomics.v1alpha2.ControllerConfig.RepeatedString> gcs_sinks = 8;
  if (!this->gcs_sinks().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::genomics::v1alpha2::ControllerConfig_RepeatedString >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1alpha2.ControllerConfig.GcsSinksEntry.key");
      }
    };

    if (deterministic &&
        this->gcs_sinks().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->gcs_sinks().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::genomics::v1alpha2::ControllerConfig_RepeatedString >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::genomics::v1alpha2::ControllerConfig_RepeatedString >::const_iterator
          it = this->gcs_sinks().begin();
          it != this->gcs_sinks().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ControllerConfig_GcsSinksEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(gcs_sinks_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ControllerConfig_GcsSinksEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::genomics::v1alpha2::ControllerConfig_RepeatedString >::const_iterator
          it = this->gcs_sinks().begin();
          it != this->gcs_sinks().end(); ++it) {
        entry.reset(gcs_sinks_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1alpha2.ControllerConfig)
  return target;
}

size_t ControllerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1alpha2.ControllerConfig)
  size_t total_size = 0;

  // optional string image = 1;
  if (this->image().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image());
  }

  // optional string cmd = 2;
  if (this->cmd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cmd());
  }

  // optional string gcs_log_path = 3;
  if (this->gcs_log_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gcs_log_path());
  }

  // optional string machine_type = 4;
  if (this->machine_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->machine_type());
  }

  // map<string, string> vars = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->vars_size());
  {
    ::google::protobuf::scoped_ptr<ControllerConfig_VarsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->vars().begin();
        it != this->vars().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(vars_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // map<string, string> disks = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->disks_size());
  {
    ::google::protobuf::scoped_ptr<ControllerConfig_DisksEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->disks().begin();
        it != this->disks().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(disks_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // map<string, .google.genomics.v1alpha2.ControllerConfig.RepeatedString> gcs_sources = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->gcs_sources_size());
  {
    ::google::protobuf::scoped_ptr<ControllerConfig_GcsSourcesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::genomics::v1alpha2::ControllerConfig_RepeatedString >::const_iterator
        it = this->gcs_sources().begin();
        it != this->gcs_sources().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(gcs_sources_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // map<string, .google.genomics.v1alpha2.ControllerConfig.RepeatedString> gcs_sinks = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->gcs_sinks_size());
  {
    ::google::protobuf::scoped_ptr<ControllerConfig_GcsSinksEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::genomics::v1alpha2::ControllerConfig_RepeatedString >::const_iterator
        it = this->gcs_sinks().begin();
        it != this->gcs_sinks().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(gcs_sinks_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControllerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1alpha2.ControllerConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ControllerConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControllerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1alpha2.ControllerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1alpha2.ControllerConfig)
    UnsafeMergeFrom(*source);
  }
}

void ControllerConfig::MergeFrom(const ControllerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1alpha2.ControllerConfig)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ControllerConfig::UnsafeMergeFrom(const ControllerConfig& from) {
  GOOGLE_DCHECK(&from != this);
  vars_.MergeFrom(from.vars_);
  disks_.MergeFrom(from.disks_);
  gcs_sources_.MergeFrom(from.gcs_sources_);
  gcs_sinks_.MergeFrom(from.gcs_sinks_);
  if (from.image().size() > 0) {
    set_image(from.image());
  }
  if (from.cmd().size() > 0) {
    set_cmd(from.cmd());
  }
  if (from.gcs_log_path().size() > 0) {
    set_gcs_log_path(from.gcs_log_path());
  }
  if (from.machine_type().size() > 0) {
    set_machine_type(from.machine_type());
  }
}

void ControllerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1alpha2.ControllerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerConfig::CopyFrom(const ControllerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1alpha2.ControllerConfig)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ControllerConfig::IsInitialized() const {

  return true;
}

void ControllerConfig::Swap(ControllerConfig* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ControllerConfig temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ControllerConfig::UnsafeArenaSwap(ControllerConfig* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ControllerConfig::InternalSwap(ControllerConfig* other) {
  image_.Swap(&other->image_);
  cmd_.Swap(&other->cmd_);
  gcs_log_path_.Swap(&other->gcs_log_path_);
  machine_type_.Swap(&other->machine_type_);
  vars_.Swap(&other->vars_);
  disks_.Swap(&other->disks_);
  gcs_sources_.Swap(&other->gcs_sources_);
  gcs_sinks_.Swap(&other->gcs_sinks_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ControllerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ControllerConfig_descriptor_;
  metadata.reflection = ControllerConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ControllerConfig_RepeatedString

// repeated string values = 1;
int ControllerConfig_RepeatedString::values_size() const {
  return values_.size();
}
void ControllerConfig_RepeatedString::clear_values() {
  values_.Clear();
}
const ::std::string& ControllerConfig_RepeatedString::values(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.ControllerConfig.RepeatedString.values)
  return values_.Get(index);
}
::std::string* ControllerConfig_RepeatedString::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.ControllerConfig.RepeatedString.values)
  return values_.Mutable(index);
}
void ControllerConfig_RepeatedString::set_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.ControllerConfig.RepeatedString.values)
  values_.Mutable(index)->assign(value);
}
void ControllerConfig_RepeatedString::set_values(int index, const char* value) {
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.ControllerConfig.RepeatedString.values)
}
void ControllerConfig_RepeatedString::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.ControllerConfig.RepeatedString.values)
}
::std::string* ControllerConfig_RepeatedString::add_values() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1alpha2.ControllerConfig.RepeatedString.values)
  return values_.Add();
}
void ControllerConfig_RepeatedString::add_values(const ::std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1alpha2.ControllerConfig.RepeatedString.values)
}
void ControllerConfig_RepeatedString::add_values(const char* value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1alpha2.ControllerConfig.RepeatedString.values)
}
void ControllerConfig_RepeatedString::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1alpha2.ControllerConfig.RepeatedString.values)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ControllerConfig_RepeatedString::values() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1alpha2.ControllerConfig.RepeatedString.values)
  return values_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ControllerConfig_RepeatedString::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1alpha2.ControllerConfig.RepeatedString.values)
  return &values_;
}

inline const ControllerConfig_RepeatedString* ControllerConfig_RepeatedString::internal_default_instance() {
  return &ControllerConfig_RepeatedString_default_instance_.get();
}
// -------------------------------------------------------------------

// ControllerConfig

// optional string image = 1;
void ControllerConfig::clear_image() {
  image_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ControllerConfig::image() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.ControllerConfig.image)
  return image_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ControllerConfig::set_image(const ::std::string& value) {
  
  image_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.ControllerConfig.image)
}
void ControllerConfig::set_image(const char* value) {
  
  image_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.ControllerConfig.image)
}
void ControllerConfig::set_image(const char* value,
    size_t size) {
  
  image_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.ControllerConfig.image)
}
::std::string* ControllerConfig::mutable_image() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.ControllerConfig.image)
  return image_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ControllerConfig::release_image() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.ControllerConfig.image)
  
  return image_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ControllerConfig::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.ControllerConfig.image)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return image_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ControllerConfig::set_allocated_image(::std::string* image) {
  if (image != NULL) {
    
  } else {
    
  }
  image_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.ControllerConfig.image)
}
void ControllerConfig::unsafe_arena_set_allocated_image(
    ::std::string* image) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (image != NULL) {
    
  } else {
    
  }
  image_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      image, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.ControllerConfig.image)
}

// optional string cmd = 2;
void ControllerConfig::clear_cmd() {
  cmd_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ControllerConfig::cmd() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.ControllerConfig.cmd)
  return cmd_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ControllerConfig::set_cmd(const ::std::string& value) {
  
  cmd_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.ControllerConfig.cmd)
}
void ControllerConfig::set_cmd(const char* value) {
  
  cmd_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.ControllerConfig.cmd)
}
void ControllerConfig::set_cmd(const char* value,
    size_t size) {
  
  cmd_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.ControllerConfig.cmd)
}
::std::string* ControllerConfig::mutable_cmd() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.ControllerConfig.cmd)
  return cmd_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ControllerConfig::release_cmd() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.ControllerConfig.cmd)
  
  return cmd_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ControllerConfig::unsafe_arena_release_cmd() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.ControllerConfig.cmd)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return cmd_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ControllerConfig::set_allocated_cmd(::std::string* cmd) {
  if (cmd != NULL) {
    
  } else {
    
  }
  cmd_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.ControllerConfig.cmd)
}
void ControllerConfig::unsafe_arena_set_allocated_cmd(
    ::std::string* cmd) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (cmd != NULL) {
    
  } else {
    
  }
  cmd_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      cmd, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.ControllerConfig.cmd)
}

// optional string gcs_log_path = 3;
void ControllerConfig::clear_gcs_log_path() {
  gcs_log_path_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ControllerConfig::gcs_log_path() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.ControllerConfig.gcs_log_path)
  return gcs_log_path_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ControllerConfig::set_gcs_log_path(const ::std::string& value) {
  
  gcs_log_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.ControllerConfig.gcs_log_path)
}
void ControllerConfig::set_gcs_log_path(const char* value) {
  
  gcs_log_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.ControllerConfig.gcs_log_path)
}
void ControllerConfig::set_gcs_log_path(const char* value,
    size_t size) {
  
  gcs_log_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.ControllerConfig.gcs_log_path)
}
::std::string* ControllerConfig::mutable_gcs_log_path() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.ControllerConfig.gcs_log_path)
  return gcs_log_path_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ControllerConfig::release_gcs_log_path() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.ControllerConfig.gcs_log_path)
  
  return gcs_log_path_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ControllerConfig::unsafe_arena_release_gcs_log_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.ControllerConfig.gcs_log_path)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return gcs_log_path_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ControllerConfig::set_allocated_gcs_log_path(::std::string* gcs_log_path) {
  if (gcs_log_path != NULL) {
    
  } else {
    
  }
  gcs_log_path_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gcs_log_path,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.ControllerConfig.gcs_log_path)
}
void ControllerConfig::unsafe_arena_set_allocated_gcs_log_path(
    ::std::string* gcs_log_path) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (gcs_log_path != NULL) {
    
  } else {
    
  }
  gcs_log_path_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      gcs_log_path, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.ControllerConfig.gcs_log_path)
}

// optional string machine_type = 4;
void ControllerConfig::clear_machine_type() {
  machine_type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ControllerConfig::machine_type() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.ControllerConfig.machine_type)
  return machine_type_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ControllerConfig::set_machine_type(const ::std::string& value) {
  
  machine_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.ControllerConfig.machine_type)
}
void ControllerConfig::set_machine_type(const char* value) {
  
  machine_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.ControllerConfig.machine_type)
}
void ControllerConfig::set_machine_type(const char* value,
    size_t size) {
  
  machine_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.ControllerConfig.machine_type)
}
::std::string* ControllerConfig::mutable_machine_type() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.ControllerConfig.machine_type)
  return machine_type_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ControllerConfig::release_machine_type() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.ControllerConfig.machine_type)
  
  return machine_type_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ControllerConfig::unsafe_arena_release_machine_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.ControllerConfig.machine_type)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return machine_type_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ControllerConfig::set_allocated_machine_type(::std::string* machine_type) {
  if (machine_type != NULL) {
    
  } else {
    
  }
  machine_type_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_type,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.ControllerConfig.machine_type)
}
void ControllerConfig::unsafe_arena_set_allocated_machine_type(
    ::std::string* machine_type) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (machine_type != NULL) {
    
  } else {
    
  }
  machine_type_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      machine_type, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.ControllerConfig.machine_type)
}

// map<string, string> vars = 5;
int ControllerConfig::vars_size() const {
  return vars_.size();
}
void ControllerConfig::clear_vars() {
  vars_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
ControllerConfig::vars() const {
  // @@protoc_insertion_point(field_map:google.genomics.v1alpha2.ControllerConfig.vars)
  return vars_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
ControllerConfig::mutable_vars() {
  // @@protoc_insertion_point(field_mutable_map:google.genomics.v1alpha2.ControllerConfig.vars)
  return vars_.MutableMap();
}

// map<string, string> disks = 6;
int ControllerConfig::disks_size() const {
  return disks_.size();
}
void ControllerConfig::clear_disks() {
  disks_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
ControllerConfig::disks() const {
  // @@protoc_insertion_point(field_map:google.genomics.v1alpha2.ControllerConfig.disks)
  return disks_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
ControllerConfig::mutable_disks() {
  // @@protoc_insertion_point(field_mutable_map:google.genomics.v1alpha2.ControllerConfig.disks)
  return disks_.MutableMap();
}

// map<string, .google.genomics.v1alpha2.ControllerConfig.RepeatedString> gcs_sources = 7;
int ControllerConfig::gcs_sources_size() const {
  return gcs_sources_.size();
}
void ControllerConfig::clear_gcs_sources() {
  gcs_sources_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::genomics::v1alpha2::ControllerConfig_RepeatedString >&
ControllerConfig::gcs_sources() const {
  // @@protoc_insertion_point(field_map:google.genomics.v1alpha2.ControllerConfig.gcs_sources)
  return gcs_sources_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::genomics::v1alpha2::ControllerConfig_RepeatedString >*
ControllerConfig::mutable_gcs_sources() {
  // @@protoc_insertion_point(field_mutable_map:google.genomics.v1alpha2.ControllerConfig.gcs_sources)
  return gcs_sources_.MutableMap();
}

// map<string, .google.genomics.v1alpha2.ControllerConfig.RepeatedString> gcs_sinks = 8;
int ControllerConfig::gcs_sinks_size() const {
  return gcs_sinks_.size();
}
void ControllerConfig::clear_gcs_sinks() {
  gcs_sinks_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::genomics::v1alpha2::ControllerConfig_RepeatedString >&
ControllerConfig::gcs_sinks() const {
  // @@protoc_insertion_point(field_map:google.genomics.v1alpha2.ControllerConfig.gcs_sinks)
  return gcs_sinks_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::genomics::v1alpha2::ControllerConfig_RepeatedString >*
ControllerConfig::mutable_gcs_sinks() {
  // @@protoc_insertion_point(field_mutable_map:google.genomics.v1alpha2.ControllerConfig.gcs_sinks)
  return gcs_sinks_.MutableMap();
}

inline const ControllerConfig* ControllerConfig::internal_default_instance() {
  return &ControllerConfig_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void TimestampEvent::_slow_mutable_timestamp() {
  timestamp_ = ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Timestamp >(
      GetArenaNoVirtual());
}
::google::protobuf::Timestamp* TimestampEvent::_slow_release_timestamp() {
  if (timestamp_ == NULL) {
    return NULL;
  } else {
    ::google::protobuf::Timestamp* temp = new ::google::protobuf::Timestamp(*timestamp_);
    timestamp_ = NULL;
    return temp;
  }
}
::google::protobuf::Timestamp* TimestampEvent::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.TimestampEvent.timestamp)
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void TimestampEvent::_slow_set_allocated_timestamp(
    ::google::protobuf::Arena* message_arena, ::google::protobuf::Timestamp** timestamp) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*timestamp) == NULL) {
      message_arena->Own(*timestamp);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*timestamp)) {
      ::google::protobuf::Timestamp* new_timestamp = 
            ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Timestamp >(
            message_arena);
      new_timestamp->CopyFrom(**timestamp);
      *timestamp = new_timestamp;
    }
}
void TimestampEvent::unsafe_arena_set_allocated_timestamp(
    ::google::protobuf::Timestamp* timestamp) {
  if (GetArenaNoVirtual() == NULL) {
    delete timestamp_;
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.TimestampEvent.timestamp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimestampEvent::kDescriptionFieldNumber;
const int TimestampEvent::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimestampEvent::TimestampEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1alpha2.TimestampEvent)
}
TimestampEvent::TimestampEvent(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1alpha2.TimestampEvent)
}

void TimestampEvent::InitAsDefaultInstance() {
  timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}

TimestampEvent::TimestampEvent(const TimestampEvent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1alpha2.TimestampEvent)
}

void TimestampEvent::SharedCtor() {
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = NULL;
  _cached_size_ = 0;
}

TimestampEvent::~TimestampEvent() {
  // @@protoc_insertion_point(destructor:google.genomics.v1alpha2.TimestampEvent)
  SharedDtor();
}

void TimestampEvent::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  description_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != &TimestampEvent_default_instance_.get()) {
    delete timestamp_;
  }
}

void TimestampEvent::ArenaDtor(void* object) {
  TimestampEvent* _this = reinterpret_cast< TimestampEvent* >(object);
  (void)_this;
}
void TimestampEvent::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TimestampEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimestampEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimestampEvent_descriptor_;
}

const TimestampEvent& TimestampEvent::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TimestampEvent> TimestampEvent_default_instance_;

TimestampEvent* TimestampEvent::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TimestampEvent>(arena);
}

void TimestampEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1alpha2.TimestampEvent)
  description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}

bool TimestampEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1alpha2.TimestampEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string description = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.TimestampEvent.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_timestamp;
        break;
      }

      // optional .google.protobuf.Timestamp timestamp = 2;
      case 2: {
        if (tag == 18) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1alpha2.TimestampEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1alpha2.TimestampEvent)
  return false;
#undef DO_
}

void TimestampEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1alpha2.TimestampEvent)
  // optional string description = 1;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.TimestampEvent.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->description(), output);
  }

  // optional .google.protobuf.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->timestamp_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1alpha2.TimestampEvent)
}

::google::protobuf::uint8* TimestampEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1alpha2.TimestampEvent)
  // optional string description = 1;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.TimestampEvent.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->description(), target);
  }

  // optional .google.protobuf.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->timestamp_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1alpha2.TimestampEvent)
  return target;
}

size_t TimestampEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1alpha2.TimestampEvent)
  size_t total_size = 0;

  // optional string description = 1;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // optional .google.protobuf.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timestamp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimestampEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1alpha2.TimestampEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TimestampEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimestampEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1alpha2.TimestampEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1alpha2.TimestampEvent)
    UnsafeMergeFrom(*source);
  }
}

void TimestampEvent::MergeFrom(const TimestampEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1alpha2.TimestampEvent)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TimestampEvent::UnsafeMergeFrom(const TimestampEvent& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.description().size() > 0) {
    set_description(from.description());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.timestamp());
  }
}

void TimestampEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1alpha2.TimestampEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimestampEvent::CopyFrom(const TimestampEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1alpha2.TimestampEvent)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TimestampEvent::IsInitialized() const {

  return true;
}

void TimestampEvent::Swap(TimestampEvent* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TimestampEvent temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void TimestampEvent::UnsafeArenaSwap(TimestampEvent* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TimestampEvent::InternalSwap(TimestampEvent* other) {
  description_.Swap(&other->description_);
  std::swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimestampEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimestampEvent_descriptor_;
  metadata.reflection = TimestampEvent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimestampEvent

// optional string description = 1;
void TimestampEvent::clear_description() {
  description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& TimestampEvent::description() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.TimestampEvent.description)
  return description_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TimestampEvent::set_description(const ::std::string& value) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.TimestampEvent.description)
}
void TimestampEvent::set_description(const char* value) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.TimestampEvent.description)
}
void TimestampEvent::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.TimestampEvent.description)
}
::std::string* TimestampEvent::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.TimestampEvent.description)
  return description_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* TimestampEvent::release_description() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.TimestampEvent.description)
  
  return description_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* TimestampEvent::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.TimestampEvent.description)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return description_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void TimestampEvent::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.TimestampEvent.description)
}
void TimestampEvent::unsafe_arena_set_allocated_description(
    ::std::string* description) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (description != NULL) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      description, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.TimestampEvent.description)
}

// optional .google.protobuf.Timestamp timestamp = 2;
bool TimestampEvent::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
void TimestampEvent::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
const ::google::protobuf::Timestamp& TimestampEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.TimestampEvent.timestamp)
  return timestamp_ != NULL ? *timestamp_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* TimestampEvent::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    _slow_mutable_timestamp();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.TimestampEvent.timestamp)
  return timestamp_;
}
::google::protobuf::Timestamp* TimestampEvent::release_timestamp() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.TimestampEvent.timestamp)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_timestamp();
  } else {
    ::google::protobuf::Timestamp* temp = timestamp_;
    timestamp_ = NULL;
    return temp;
  }
}
 void TimestampEvent::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete timestamp_;
  }
  if (timestamp != NULL) {
    _slow_set_allocated_timestamp(message_arena, &timestamp);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.TimestampEvent.timestamp)
}

inline const TimestampEvent* TimestampEvent::internal_default_instance() {
  return &TimestampEvent_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetOperationStatusRequest::kOperationIdFieldNumber;
const int SetOperationStatusRequest::kTimestampEventsFieldNumber;
const int SetOperationStatusRequest::kErrorCodeFieldNumber;
const int SetOperationStatusRequest::kErrorMessageFieldNumber;
const int SetOperationStatusRequest::kValidationTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetOperationStatusRequest::SetOperationStatusRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1alpha2.SetOperationStatusRequest)
}
SetOperationStatusRequest::SetOperationStatusRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  timestamp_events_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1alpha2.SetOperationStatusRequest)
}

void SetOperationStatusRequest::InitAsDefaultInstance() {
}

SetOperationStatusRequest::SetOperationStatusRequest(const SetOperationStatusRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1alpha2.SetOperationStatusRequest)
}

void SetOperationStatusRequest::SharedCtor() {
  operation_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&validation_token_, 0, reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&validation_token_) + sizeof(error_code_));
  _cached_size_ = 0;
}

SetOperationStatusRequest::~SetOperationStatusRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1alpha2.SetOperationStatusRequest)
  SharedDtor();
}

void SetOperationStatusRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  operation_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  error_message_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void SetOperationStatusRequest::ArenaDtor(void* object) {
  SetOperationStatusRequest* _this = reinterpret_cast< SetOperationStatusRequest* >(object);
  (void)_this;
}
void SetOperationStatusRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SetOperationStatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetOperationStatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetOperationStatusRequest_descriptor_;
}

const SetOperationStatusRequest& SetOperationStatusRequest::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SetOperationStatusRequest> SetOperationStatusRequest_default_instance_;

SetOperationStatusRequest* SetOperationStatusRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SetOperationStatusRequest>(arena);
}

void SetOperationStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1alpha2.SetOperationStatusRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SetOperationStatusRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SetOperationStatusRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(validation_token_, error_code_);
  operation_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  error_message_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef ZR_HELPER_
#undef ZR_

  timestamp_events_.Clear();
}

bool SetOperationStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1alpha2.SetOperationStatusRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string operation_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operation_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->operation_id().data(), this->operation_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.SetOperationStatusRequest.operation_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_timestamp_events;
        break;
      }

      // repeated .google.genomics.v1alpha2.TimestampEvent timestamp_events = 2;
      case 2: {
        if (tag == 18) {
         parse_timestamp_events:
          DO_(input->IncrementRecursionDepth());
         parse_loop_timestamp_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_timestamp_events()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_timestamp_events;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_error_code;
        break;
      }

      // optional .google.rpc.Code error_code = 3;
      case 3: {
        if (tag == 24) {
         parse_error_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_error_code(static_cast< ::google::rpc::Code >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_error_message;
        break;
      }

      // optional string error_message = 4;
      case 4: {
        if (tag == 34) {
         parse_error_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_message().data(), this->error_message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.SetOperationStatusRequest.error_message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_validation_token;
        break;
      }

      // optional uint64 validation_token = 5;
      case 5: {
        if (tag == 40) {
         parse_validation_token:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &validation_token_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1alpha2.SetOperationStatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1alpha2.SetOperationStatusRequest)
  return false;
#undef DO_
}

void SetOperationStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1alpha2.SetOperationStatusRequest)
  // optional string operation_id = 1;
  if (this->operation_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->operation_id().data(), this->operation_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.SetOperationStatusRequest.operation_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->operation_id(), output);
  }

  // repeated .google.genomics.v1alpha2.TimestampEvent timestamp_events = 2;
  for (unsigned int i = 0, n = this->timestamp_events_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->timestamp_events(i), output);
  }

  // optional .google.rpc.Code error_code = 3;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->error_code(), output);
  }

  // optional string error_message = 4;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.SetOperationStatusRequest.error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->error_message(), output);
  }

  // optional uint64 validation_token = 5;
  if (this->validation_token() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->validation_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1alpha2.SetOperationStatusRequest)
}

::google::protobuf::uint8* SetOperationStatusRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1alpha2.SetOperationStatusRequest)
  // optional string operation_id = 1;
  if (this->operation_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->operation_id().data(), this->operation_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.SetOperationStatusRequest.operation_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->operation_id(), target);
  }

  // repeated .google.genomics.v1alpha2.TimestampEvent timestamp_events = 2;
  for (unsigned int i = 0, n = this->timestamp_events_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->timestamp_events(i), false, target);
  }

  // optional .google.rpc.Code error_code = 3;
  if (this->error_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->error_code(), target);
  }

  // optional string error_message = 4;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.SetOperationStatusRequest.error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->error_message(), target);
  }

  // optional uint64 validation_token = 5;
  if (this->validation_token() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->validation_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1alpha2.SetOperationStatusRequest)
  return target;
}

size_t SetOperationStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1alpha2.SetOperationStatusRequest)
  size_t total_size = 0;

  // optional string operation_id = 1;
  if (this->operation_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->operation_id());
  }

  // optional .google.rpc.Code error_code = 3;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
  }

  // optional string error_message = 4;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_message());
  }

  // optional uint64 validation_token = 5;
  if (this->validation_token() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->validation_token());
  }

  // repeated .google.genomics.v1alpha2.TimestampEvent timestamp_events = 2;
  {
    unsigned int count = this->timestamp_events_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timestamp_events(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetOperationStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1alpha2.SetOperationStatusRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SetOperationStatusRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetOperationStatusRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1alpha2.SetOperationStatusRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1alpha2.SetOperationStatusRequest)
    UnsafeMergeFrom(*source);
  }
}

void SetOperationStatusRequest::MergeFrom(const SetOperationStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1alpha2.SetOperationStatusRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SetOperationStatusRequest::UnsafeMergeFrom(const SetOperationStatusRequest& from) {
  GOOGLE_DCHECK(&from != this);
  timestamp_events_.MergeFrom(from.timestamp_events_);
  if (from.operation_id().size() > 0) {
    set_operation_id(from.operation_id());
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
  if (from.error_message().size() > 0) {
    set_error_message(from.error_message());
  }
  if (from.validation_token() != 0) {
    set_validation_token(from.validation_token());
  }
}

void SetOperationStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1alpha2.SetOperationStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetOperationStatusRequest::CopyFrom(const SetOperationStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1alpha2.SetOperationStatusRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SetOperationStatusRequest::IsInitialized() const {

  return true;
}

void SetOperationStatusRequest::Swap(SetOperationStatusRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SetOperationStatusRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void SetOperationStatusRequest::UnsafeArenaSwap(SetOperationStatusRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SetOperationStatusRequest::InternalSwap(SetOperationStatusRequest* other) {
  operation_id_.Swap(&other->operation_id_);
  timestamp_events_.UnsafeArenaSwap(&other->timestamp_events_);
  std::swap(error_code_, other->error_code_);
  error_message_.Swap(&other->error_message_);
  std::swap(validation_token_, other->validation_token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetOperationStatusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetOperationStatusRequest_descriptor_;
  metadata.reflection = SetOperationStatusRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetOperationStatusRequest

// optional string operation_id = 1;
void SetOperationStatusRequest::clear_operation_id() {
  operation_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SetOperationStatusRequest::operation_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.SetOperationStatusRequest.operation_id)
  return operation_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetOperationStatusRequest::set_operation_id(const ::std::string& value) {
  
  operation_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.SetOperationStatusRequest.operation_id)
}
void SetOperationStatusRequest::set_operation_id(const char* value) {
  
  operation_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.SetOperationStatusRequest.operation_id)
}
void SetOperationStatusRequest::set_operation_id(const char* value,
    size_t size) {
  
  operation_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.SetOperationStatusRequest.operation_id)
}
::std::string* SetOperationStatusRequest::mutable_operation_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.SetOperationStatusRequest.operation_id)
  return operation_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SetOperationStatusRequest::release_operation_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.SetOperationStatusRequest.operation_id)
  
  return operation_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SetOperationStatusRequest::unsafe_arena_release_operation_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.SetOperationStatusRequest.operation_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return operation_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SetOperationStatusRequest::set_allocated_operation_id(::std::string* operation_id) {
  if (operation_id != NULL) {
    
  } else {
    
  }
  operation_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operation_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.SetOperationStatusRequest.operation_id)
}
void SetOperationStatusRequest::unsafe_arena_set_allocated_operation_id(
    ::std::string* operation_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (operation_id != NULL) {
    
  } else {
    
  }
  operation_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      operation_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.SetOperationStatusRequest.operation_id)
}

// repeated .google.genomics.v1alpha2.TimestampEvent timestamp_events = 2;
int SetOperationStatusRequest::timestamp_events_size() const {
  return timestamp_events_.size();
}
void SetOperationStatusRequest::clear_timestamp_events() {
  timestamp_events_.Clear();
}
const ::google::genomics::v1alpha2::TimestampEvent& SetOperationStatusRequest::timestamp_events(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.SetOperationStatusRequest.timestamp_events)
  return timestamp_events_.Get(index);
}
::google::genomics::v1alpha2::TimestampEvent* SetOperationStatusRequest::mutable_timestamp_events(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.SetOperationStatusRequest.timestamp_events)
  return timestamp_events_.Mutable(index);
}
::google::genomics::v1alpha2::TimestampEvent* SetOperationStatusRequest::add_timestamp_events() {
  // @@protoc_insertion_point(field_add:google.genomics.v1alpha2.SetOperationStatusRequest.timestamp_events)
  return timestamp_events_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::genomics::v1alpha2::TimestampEvent >*
SetOperationStatusRequest::mutable_timestamp_events() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1alpha2.SetOperationStatusRequest.timestamp_events)
  return &timestamp_events_;
}
const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1alpha2::TimestampEvent >&
SetOperationStatusRequest::timestamp_events() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1alpha2.SetOperationStatusRequest.timestamp_events)
  return timestamp_events_;
}

// optional .google.rpc.Code error_code = 3;
void SetOperationStatusRequest::clear_error_code() {
  error_code_ = 0;
}
::google::rpc::Code SetOperationStatusRequest::error_code() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.SetOperationStatusRequest.error_code)
  return static_cast< ::google::rpc::Code >(error_code_);
}
void SetOperationStatusRequest::set_error_code(::google::rpc::Code value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.SetOperationStatusRequest.error_code)
}

// optional string error_message = 4;
void SetOperationStatusRequest::clear_error_message() {
  error_message_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SetOperationStatusRequest::error_message() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.SetOperationStatusRequest.error_message)
  return error_message_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetOperationStatusRequest::set_error_message(const ::std::string& value) {
  
  error_message_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.SetOperationStatusRequest.error_message)
}
void SetOperationStatusRequest::set_error_message(const char* value) {
  
  error_message_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.SetOperationStatusRequest.error_message)
}
void SetOperationStatusRequest::set_error_message(const char* value,
    size_t size) {
  
  error_message_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.SetOperationStatusRequest.error_message)
}
::std::string* SetOperationStatusRequest::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.SetOperationStatusRequest.error_message)
  return error_message_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SetOperationStatusRequest::release_error_message() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.SetOperationStatusRequest.error_message)
  
  return error_message_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SetOperationStatusRequest::unsafe_arena_release_error_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.SetOperationStatusRequest.error_message)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return error_message_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SetOperationStatusRequest::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.SetOperationStatusRequest.error_message)
}
void SetOperationStatusRequest::unsafe_arena_set_allocated_error_message(
    ::std::string* error_message) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      error_message, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.SetOperationStatusRequest.error_message)
}

// optional uint64 validation_token = 5;
void SetOperationStatusRequest::clear_validation_token() {
  validation_token_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SetOperationStatusRequest::validation_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.SetOperationStatusRequest.validation_token)
  return validation_token_;
}
void SetOperationStatusRequest::set_validation_token(::google::protobuf::uint64 value) {
  
  validation_token_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.SetOperationStatusRequest.validation_token)
}

inline const SetOperationStatusRequest* SetOperationStatusRequest::internal_default_instance() {
  return &SetOperationStatusRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceAccount::kEmailFieldNumber;
const int ServiceAccount::kScopesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceAccount::ServiceAccount()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1alpha2.ServiceAccount)
}
ServiceAccount::ServiceAccount(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  scopes_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1alpha2.ServiceAccount)
}

void ServiceAccount::InitAsDefaultInstance() {
}

ServiceAccount::ServiceAccount(const ServiceAccount& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1alpha2.ServiceAccount)
}

void ServiceAccount::SharedCtor() {
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ServiceAccount::~ServiceAccount() {
  // @@protoc_insertion_point(destructor:google.genomics.v1alpha2.ServiceAccount)
  SharedDtor();
}

void ServiceAccount::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  email_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void ServiceAccount::ArenaDtor(void* object) {
  ServiceAccount* _this = reinterpret_cast< ServiceAccount* >(object);
  (void)_this;
}
void ServiceAccount::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ServiceAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceAccount_descriptor_;
}

const ServiceAccount& ServiceAccount::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ServiceAccount> ServiceAccount_default_instance_;

ServiceAccount* ServiceAccount::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ServiceAccount>(arena);
}

void ServiceAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1alpha2.ServiceAccount)
  email_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  scopes_.Clear();
}

bool ServiceAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1alpha2.ServiceAccount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string email = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.ServiceAccount.email"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_scopes;
        break;
      }

      // repeated string scopes = 2;
      case 2: {
        if (tag == 18) {
         parse_scopes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_scopes()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->scopes(this->scopes_size() - 1).data(),
            this->scopes(this->scopes_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.ServiceAccount.scopes"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_scopes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1alpha2.ServiceAccount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1alpha2.ServiceAccount)
  return false;
#undef DO_
}

void ServiceAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1alpha2.ServiceAccount)
  // optional string email = 1;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.ServiceAccount.email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->email(), output);
  }

  // repeated string scopes = 2;
  for (int i = 0; i < this->scopes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scopes(i).data(), this->scopes(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.ServiceAccount.scopes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->scopes(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1alpha2.ServiceAccount)
}

::google::protobuf::uint8* ServiceAccount::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1alpha2.ServiceAccount)
  // optional string email = 1;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.ServiceAccount.email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->email(), target);
  }

  // repeated string scopes = 2;
  for (int i = 0; i < this->scopes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scopes(i).data(), this->scopes(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.ServiceAccount.scopes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->scopes(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1alpha2.ServiceAccount)
  return target;
}

size_t ServiceAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1alpha2.ServiceAccount)
  size_t total_size = 0;

  // optional string email = 1;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->email());
  }

  // repeated string scopes = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->scopes_size());
  for (int i = 0; i < this->scopes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->scopes(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceAccount::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1alpha2.ServiceAccount)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ServiceAccount* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServiceAccount>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1alpha2.ServiceAccount)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1alpha2.ServiceAccount)
    UnsafeMergeFrom(*source);
  }
}

void ServiceAccount::MergeFrom(const ServiceAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1alpha2.ServiceAccount)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ServiceAccount::UnsafeMergeFrom(const ServiceAccount& from) {
  GOOGLE_DCHECK(&from != this);
  scopes_.UnsafeMergeFrom(from.scopes_);
  if (from.email().size() > 0) {
    set_email(from.email());
  }
}

void ServiceAccount::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1alpha2.ServiceAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceAccount::CopyFrom(const ServiceAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1alpha2.ServiceAccount)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ServiceAccount::IsInitialized() const {

  return true;
}

void ServiceAccount::Swap(ServiceAccount* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ServiceAccount temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ServiceAccount::UnsafeArenaSwap(ServiceAccount* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ServiceAccount::InternalSwap(ServiceAccount* other) {
  email_.Swap(&other->email_);
  scopes_.UnsafeArenaSwap(&other->scopes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServiceAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceAccount_descriptor_;
  metadata.reflection = ServiceAccount_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceAccount

// optional string email = 1;
void ServiceAccount::clear_email() {
  email_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ServiceAccount::email() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.ServiceAccount.email)
  return email_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServiceAccount::set_email(const ::std::string& value) {
  
  email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.ServiceAccount.email)
}
void ServiceAccount::set_email(const char* value) {
  
  email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.ServiceAccount.email)
}
void ServiceAccount::set_email(const char* value,
    size_t size) {
  
  email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.ServiceAccount.email)
}
::std::string* ServiceAccount::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.ServiceAccount.email)
  return email_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceAccount::release_email() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.ServiceAccount.email)
  
  return email_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceAccount::unsafe_arena_release_email() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.ServiceAccount.email)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return email_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ServiceAccount::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.ServiceAccount.email)
}
void ServiceAccount::unsafe_arena_set_allocated_email(
    ::std::string* email) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (email != NULL) {
    
  } else {
    
  }
  email_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      email, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.ServiceAccount.email)
}

// repeated string scopes = 2;
int ServiceAccount::scopes_size() const {
  return scopes_.size();
}
void ServiceAccount::clear_scopes() {
  scopes_.Clear();
}
const ::std::string& ServiceAccount::scopes(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.ServiceAccount.scopes)
  return scopes_.Get(index);
}
::std::string* ServiceAccount::mutable_scopes(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.ServiceAccount.scopes)
  return scopes_.Mutable(index);
}
void ServiceAccount::set_scopes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.ServiceAccount.scopes)
  scopes_.Mutable(index)->assign(value);
}
void ServiceAccount::set_scopes(int index, const char* value) {
  scopes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.ServiceAccount.scopes)
}
void ServiceAccount::set_scopes(int index, const char* value, size_t size) {
  scopes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.ServiceAccount.scopes)
}
::std::string* ServiceAccount::add_scopes() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1alpha2.ServiceAccount.scopes)
  return scopes_.Add();
}
void ServiceAccount::add_scopes(const ::std::string& value) {
  scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1alpha2.ServiceAccount.scopes)
}
void ServiceAccount::add_scopes(const char* value) {
  scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1alpha2.ServiceAccount.scopes)
}
void ServiceAccount::add_scopes(const char* value, size_t size) {
  scopes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1alpha2.ServiceAccount.scopes)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ServiceAccount::scopes() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1alpha2.ServiceAccount.scopes)
  return scopes_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ServiceAccount::mutable_scopes() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1alpha2.ServiceAccount.scopes)
  return &scopes_;
}

inline const ServiceAccount* ServiceAccount::internal_default_instance() {
  return &ServiceAccount_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoggingOptions::kGcsPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoggingOptions::LoggingOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1alpha2.LoggingOptions)
}
LoggingOptions::LoggingOptions(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1alpha2.LoggingOptions)
}

void LoggingOptions::InitAsDefaultInstance() {
}

LoggingOptions::LoggingOptions(const LoggingOptions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1alpha2.LoggingOptions)
}

void LoggingOptions::SharedCtor() {
  gcs_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

LoggingOptions::~LoggingOptions() {
  // @@protoc_insertion_point(destructor:google.genomics.v1alpha2.LoggingOptions)
  SharedDtor();
}

void LoggingOptions::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  gcs_path_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void LoggingOptions::ArenaDtor(void* object) {
  LoggingOptions* _this = reinterpret_cast< LoggingOptions* >(object);
  (void)_this;
}
void LoggingOptions::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LoggingOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoggingOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoggingOptions_descriptor_;
}

const LoggingOptions& LoggingOptions::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LoggingOptions> LoggingOptions_default_instance_;

LoggingOptions* LoggingOptions::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<LoggingOptions>(arena);
}

void LoggingOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1alpha2.LoggingOptions)
  gcs_path_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool LoggingOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1alpha2.LoggingOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gcs_path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gcs_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gcs_path().data(), this->gcs_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.LoggingOptions.gcs_path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1alpha2.LoggingOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1alpha2.LoggingOptions)
  return false;
#undef DO_
}

void LoggingOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1alpha2.LoggingOptions)
  // optional string gcs_path = 1;
  if (this->gcs_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gcs_path().data(), this->gcs_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.LoggingOptions.gcs_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gcs_path(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1alpha2.LoggingOptions)
}

::google::protobuf::uint8* LoggingOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1alpha2.LoggingOptions)
  // optional string gcs_path = 1;
  if (this->gcs_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gcs_path().data(), this->gcs_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.LoggingOptions.gcs_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gcs_path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1alpha2.LoggingOptions)
  return target;
}

size_t LoggingOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1alpha2.LoggingOptions)
  size_t total_size = 0;

  // optional string gcs_path = 1;
  if (this->gcs_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gcs_path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoggingOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1alpha2.LoggingOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LoggingOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoggingOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1alpha2.LoggingOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1alpha2.LoggingOptions)
    UnsafeMergeFrom(*source);
  }
}

void LoggingOptions::MergeFrom(const LoggingOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1alpha2.LoggingOptions)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LoggingOptions::UnsafeMergeFrom(const LoggingOptions& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.gcs_path().size() > 0) {
    set_gcs_path(from.gcs_path());
  }
}

void LoggingOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1alpha2.LoggingOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoggingOptions::CopyFrom(const LoggingOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1alpha2.LoggingOptions)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LoggingOptions::IsInitialized() const {

  return true;
}

void LoggingOptions::Swap(LoggingOptions* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LoggingOptions temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void LoggingOptions::UnsafeArenaSwap(LoggingOptions* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LoggingOptions::InternalSwap(LoggingOptions* other) {
  gcs_path_.Swap(&other->gcs_path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoggingOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoggingOptions_descriptor_;
  metadata.reflection = LoggingOptions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoggingOptions

// optional string gcs_path = 1;
void LoggingOptions::clear_gcs_path() {
  gcs_path_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& LoggingOptions::gcs_path() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.LoggingOptions.gcs_path)
  return gcs_path_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoggingOptions::set_gcs_path(const ::std::string& value) {
  
  gcs_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.LoggingOptions.gcs_path)
}
void LoggingOptions::set_gcs_path(const char* value) {
  
  gcs_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.LoggingOptions.gcs_path)
}
void LoggingOptions::set_gcs_path(const char* value,
    size_t size) {
  
  gcs_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.LoggingOptions.gcs_path)
}
::std::string* LoggingOptions::mutable_gcs_path() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.LoggingOptions.gcs_path)
  return gcs_path_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* LoggingOptions::release_gcs_path() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.LoggingOptions.gcs_path)
  
  return gcs_path_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* LoggingOptions::unsafe_arena_release_gcs_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.LoggingOptions.gcs_path)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return gcs_path_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void LoggingOptions::set_allocated_gcs_path(::std::string* gcs_path) {
  if (gcs_path != NULL) {
    
  } else {
    
  }
  gcs_path_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gcs_path,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.LoggingOptions.gcs_path)
}
void LoggingOptions::unsafe_arena_set_allocated_gcs_path(
    ::std::string* gcs_path) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (gcs_path != NULL) {
    
  } else {
    
  }
  gcs_path_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      gcs_path, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.LoggingOptions.gcs_path)
}

inline const LoggingOptions* LoggingOptions::internal_default_instance() {
  return &LoggingOptions_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* PipelineResources_Disk_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PipelineResources_Disk_Type_descriptor_;
}
bool PipelineResources_Disk_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PipelineResources_Disk_Type PipelineResources_Disk::TYPE_UNSPECIFIED;
const PipelineResources_Disk_Type PipelineResources_Disk::PERSISTENT_HDD;
const PipelineResources_Disk_Type PipelineResources_Disk::PERSISTENT_SSD;
const PipelineResources_Disk_Type PipelineResources_Disk::LOCAL_SSD;
const PipelineResources_Disk_Type PipelineResources_Disk::Type_MIN;
const PipelineResources_Disk_Type PipelineResources_Disk::Type_MAX;
const int PipelineResources_Disk::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PipelineResources_Disk::kNameFieldNumber;
const int PipelineResources_Disk::kTypeFieldNumber;
const int PipelineResources_Disk::kSizeGbFieldNumber;
const int PipelineResources_Disk::kSourceFieldNumber;
const int PipelineResources_Disk::kAutoDeleteFieldNumber;
const int PipelineResources_Disk::kReadOnlyFieldNumber;
const int PipelineResources_Disk::kMountPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PipelineResources_Disk::PipelineResources_Disk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1alpha2.PipelineResources.Disk)
}
PipelineResources_Disk::PipelineResources_Disk(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1alpha2.PipelineResources.Disk)
}

void PipelineResources_Disk::InitAsDefaultInstance() {
}

PipelineResources_Disk::PipelineResources_Disk(const PipelineResources_Disk& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1alpha2.PipelineResources.Disk)
}

void PipelineResources_Disk::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mount_point_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&read_only_) -
    reinterpret_cast<char*>(&type_) + sizeof(read_only_));
  _cached_size_ = 0;
}

PipelineResources_Disk::~PipelineResources_Disk() {
  // @@protoc_insertion_point(destructor:google.genomics.v1alpha2.PipelineResources.Disk)
  SharedDtor();
}

void PipelineResources_Disk::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  source_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  mount_point_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void PipelineResources_Disk::ArenaDtor(void* object) {
  PipelineResources_Disk* _this = reinterpret_cast< PipelineResources_Disk* >(object);
  (void)_this;
}
void PipelineResources_Disk::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PipelineResources_Disk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PipelineResources_Disk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PipelineResources_Disk_descriptor_;
}

const PipelineResources_Disk& PipelineResources_Disk::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PipelineResources_Disk> PipelineResources_Disk_default_instance_;

PipelineResources_Disk* PipelineResources_Disk::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<PipelineResources_Disk>(arena);
}

void PipelineResources_Disk::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1alpha2.PipelineResources.Disk)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PipelineResources_Disk, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PipelineResources_Disk*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, read_only_);
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  source_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  mount_point_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef ZR_HELPER_
#undef ZR_

}

bool PipelineResources_Disk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1alpha2.PipelineResources.Disk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.PipelineResources.Disk.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .google.genomics.v1alpha2.PipelineResources.Disk.Type type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::google::genomics::v1alpha2::PipelineResources_Disk_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_size_gb;
        break;
      }

      // optional int32 size_gb = 3;
      case 3: {
        if (tag == 24) {
         parse_size_gb:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_gb_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_source;
        break;
      }

      // optional string source = 4;
      case 4: {
        if (tag == 34) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.PipelineResources.Disk.source"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_auto_delete;
        break;
      }

      // optional bool auto_delete = 6;
      case 6: {
        if (tag == 48) {
         parse_auto_delete:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_delete_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_read_only;
        break;
      }

      // optional bool read_only = 7;
      case 7: {
        if (tag == 56) {
         parse_read_only:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &read_only_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_mount_point;
        break;
      }

      // optional string mount_point = 8;
      case 8: {
        if (tag == 66) {
         parse_mount_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mount_point()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mount_point().data(), this->mount_point().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.PipelineResources.Disk.mount_point"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1alpha2.PipelineResources.Disk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1alpha2.PipelineResources.Disk)
  return false;
#undef DO_
}

void PipelineResources_Disk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1alpha2.PipelineResources.Disk)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.PipelineResources.Disk.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .google.genomics.v1alpha2.PipelineResources.Disk.Type type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional int32 size_gb = 3;
  if (this->size_gb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->size_gb(), output);
  }

  // optional string source = 4;
  if (this->source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.PipelineResources.Disk.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->source(), output);
  }

  // optional bool auto_delete = 6;
  if (this->auto_delete() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->auto_delete(), output);
  }

  // optional bool read_only = 7;
  if (this->read_only() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->read_only(), output);
  }

  // optional string mount_point = 8;
  if (this->mount_point().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mount_point().data(), this->mount_point().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.PipelineResources.Disk.mount_point");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->mount_point(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1alpha2.PipelineResources.Disk)
}

::google::protobuf::uint8* PipelineResources_Disk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1alpha2.PipelineResources.Disk)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.PipelineResources.Disk.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .google.genomics.v1alpha2.PipelineResources.Disk.Type type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional int32 size_gb = 3;
  if (this->size_gb() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->size_gb(), target);
  }

  // optional string source = 4;
  if (this->source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.PipelineResources.Disk.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->source(), target);
  }

  // optional bool auto_delete = 6;
  if (this->auto_delete() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->auto_delete(), target);
  }

  // optional bool read_only = 7;
  if (this->read_only() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->read_only(), target);
  }

  // optional string mount_point = 8;
  if (this->mount_point().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mount_point().data(), this->mount_point().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.PipelineResources.Disk.mount_point");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->mount_point(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1alpha2.PipelineResources.Disk)
  return target;
}

size_t PipelineResources_Disk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1alpha2.PipelineResources.Disk)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .google.genomics.v1alpha2.PipelineResources.Disk.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional int32 size_gb = 3;
  if (this->size_gb() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size_gb());
  }

  // optional string source = 4;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());
  }

  // optional bool auto_delete = 6;
  if (this->auto_delete() != 0) {
    total_size += 1 + 1;
  }

  // optional bool read_only = 7;
  if (this->read_only() != 0) {
    total_size += 1 + 1;
  }

  // optional string mount_point = 8;
  if (this->mount_point().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mount_point());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PipelineResources_Disk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1alpha2.PipelineResources.Disk)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PipelineResources_Disk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PipelineResources_Disk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1alpha2.PipelineResources.Disk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1alpha2.PipelineResources.Disk)
    UnsafeMergeFrom(*source);
  }
}

void PipelineResources_Disk::MergeFrom(const PipelineResources_Disk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1alpha2.PipelineResources.Disk)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PipelineResources_Disk::UnsafeMergeFrom(const PipelineResources_Disk& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.size_gb() != 0) {
    set_size_gb(from.size_gb());
  }
  if (from.source().size() > 0) {
    set_source(from.source());
  }
  if (from.auto_delete() != 0) {
    set_auto_delete(from.auto_delete());
  }
  if (from.read_only() != 0) {
    set_read_only(from.read_only());
  }
  if (from.mount_point().size() > 0) {
    set_mount_point(from.mount_point());
  }
}

void PipelineResources_Disk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1alpha2.PipelineResources.Disk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PipelineResources_Disk::CopyFrom(const PipelineResources_Disk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1alpha2.PipelineResources.Disk)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PipelineResources_Disk::IsInitialized() const {

  return true;
}

void PipelineResources_Disk::Swap(PipelineResources_Disk* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PipelineResources_Disk temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void PipelineResources_Disk::UnsafeArenaSwap(PipelineResources_Disk* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PipelineResources_Disk::InternalSwap(PipelineResources_Disk* other) {
  name_.Swap(&other->name_);
  std::swap(type_, other->type_);
  std::swap(size_gb_, other->size_gb_);
  source_.Swap(&other->source_);
  std::swap(auto_delete_, other->auto_delete_);
  std::swap(read_only_, other->read_only_);
  mount_point_.Swap(&other->mount_point_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PipelineResources_Disk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PipelineResources_Disk_descriptor_;
  metadata.reflection = PipelineResources_Disk_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PipelineResources::kMinimumCpuCoresFieldNumber;
const int PipelineResources::kPreemptibleFieldNumber;
const int PipelineResources::kMinimumRamGbFieldNumber;
const int PipelineResources::kDisksFieldNumber;
const int PipelineResources::kZonesFieldNumber;
const int PipelineResources::kBootDiskSizeGbFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PipelineResources::PipelineResources()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1alpha2.PipelineResources)
}
PipelineResources::PipelineResources(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  disks_(arena),
  zones_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1alpha2.PipelineResources)
}

void PipelineResources::InitAsDefaultInstance() {
}

PipelineResources::PipelineResources(const PipelineResources& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1alpha2.PipelineResources)
}

void PipelineResources::SharedCtor() {
  ::memset(&minimum_cpu_cores_, 0, reinterpret_cast<char*>(&boot_disk_size_gb_) -
    reinterpret_cast<char*>(&minimum_cpu_cores_) + sizeof(boot_disk_size_gb_));
  _cached_size_ = 0;
}

PipelineResources::~PipelineResources() {
  // @@protoc_insertion_point(destructor:google.genomics.v1alpha2.PipelineResources)
  SharedDtor();
}

void PipelineResources::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void PipelineResources::ArenaDtor(void* object) {
  PipelineResources* _this = reinterpret_cast< PipelineResources* >(object);
  (void)_this;
}
void PipelineResources::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PipelineResources::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PipelineResources::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PipelineResources_descriptor_;
}

const PipelineResources& PipelineResources::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PipelineResources> PipelineResources_default_instance_;

PipelineResources* PipelineResources::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<PipelineResources>(arena);
}

void PipelineResources::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1alpha2.PipelineResources)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PipelineResources, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PipelineResources*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(minimum_cpu_cores_, boot_disk_size_gb_);

#undef ZR_HELPER_
#undef ZR_

  disks_.Clear();
  zones_.Clear();
}

bool PipelineResources::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1alpha2.PipelineResources)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 minimum_cpu_cores = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minimum_cpu_cores_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_preemptible;
        break;
      }

      // optional bool preemptible = 2;
      case 2: {
        if (tag == 16) {
         parse_preemptible:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preemptible_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_minimum_ram_gb;
        break;
      }

      // optional double minimum_ram_gb = 3;
      case 3: {
        if (tag == 25) {
         parse_minimum_ram_gb:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minimum_ram_gb_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_disks;
        break;
      }

      // repeated .google.genomics.v1alpha2.PipelineResources.Disk disks = 4;
      case 4: {
        if (tag == 34) {
         parse_disks:
          DO_(input->IncrementRecursionDepth());
         parse_loop_disks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_disks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_disks;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_zones;
        break;
      }

      // repeated string zones = 5;
      case 5: {
        if (tag == 42) {
         parse_zones:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_zones()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zones(this->zones_size() - 1).data(),
            this->zones(this->zones_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.PipelineResources.zones"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_zones;
        if (input->ExpectTag(48)) goto parse_boot_disk_size_gb;
        break;
      }

      // optional int32 boot_disk_size_gb = 6;
      case 6: {
        if (tag == 48) {
         parse_boot_disk_size_gb:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boot_disk_size_gb_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1alpha2.PipelineResources)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1alpha2.PipelineResources)
  return false;
#undef DO_
}

void PipelineResources::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1alpha2.PipelineResources)
  // optional int32 minimum_cpu_cores = 1;
  if (this->minimum_cpu_cores() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->minimum_cpu_cores(), output);
  }

  // optional bool preemptible = 2;
  if (this->preemptible() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->preemptible(), output);
  }

  // optional double minimum_ram_gb = 3;
  if (this->minimum_ram_gb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->minimum_ram_gb(), output);
  }

  // repeated .google.genomics.v1alpha2.PipelineResources.Disk disks = 4;
  for (unsigned int i = 0, n = this->disks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->disks(i), output);
  }

  // repeated string zones = 5;
  for (int i = 0; i < this->zones_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zones(i).data(), this->zones(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.PipelineResources.zones");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->zones(i), output);
  }

  // optional int32 boot_disk_size_gb = 6;
  if (this->boot_disk_size_gb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->boot_disk_size_gb(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1alpha2.PipelineResources)
}

::google::protobuf::uint8* PipelineResources::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1alpha2.PipelineResources)
  // optional int32 minimum_cpu_cores = 1;
  if (this->minimum_cpu_cores() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->minimum_cpu_cores(), target);
  }

  // optional bool preemptible = 2;
  if (this->preemptible() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->preemptible(), target);
  }

  // optional double minimum_ram_gb = 3;
  if (this->minimum_ram_gb() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->minimum_ram_gb(), target);
  }

  // repeated .google.genomics.v1alpha2.PipelineResources.Disk disks = 4;
  for (unsigned int i = 0, n = this->disks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->disks(i), false, target);
  }

  // repeated string zones = 5;
  for (int i = 0; i < this->zones_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zones(i).data(), this->zones(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.PipelineResources.zones");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->zones(i), target);
  }

  // optional int32 boot_disk_size_gb = 6;
  if (this->boot_disk_size_gb() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->boot_disk_size_gb(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1alpha2.PipelineResources)
  return target;
}

size_t PipelineResources::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1alpha2.PipelineResources)
  size_t total_size = 0;

  // optional int32 minimum_cpu_cores = 1;
  if (this->minimum_cpu_cores() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->minimum_cpu_cores());
  }

  // optional bool preemptible = 2;
  if (this->preemptible() != 0) {
    total_size += 1 + 1;
  }

  // optional double minimum_ram_gb = 3;
  if (this->minimum_ram_gb() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 boot_disk_size_gb = 6;
  if (this->boot_disk_size_gb() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->boot_disk_size_gb());
  }

  // repeated .google.genomics.v1alpha2.PipelineResources.Disk disks = 4;
  {
    unsigned int count = this->disks_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->disks(i));
    }
  }

  // repeated string zones = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->zones_size());
  for (int i = 0; i < this->zones_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->zones(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PipelineResources::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1alpha2.PipelineResources)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PipelineResources* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PipelineResources>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1alpha2.PipelineResources)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1alpha2.PipelineResources)
    UnsafeMergeFrom(*source);
  }
}

void PipelineResources::MergeFrom(const PipelineResources& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1alpha2.PipelineResources)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PipelineResources::UnsafeMergeFrom(const PipelineResources& from) {
  GOOGLE_DCHECK(&from != this);
  disks_.MergeFrom(from.disks_);
  zones_.UnsafeMergeFrom(from.zones_);
  if (from.minimum_cpu_cores() != 0) {
    set_minimum_cpu_cores(from.minimum_cpu_cores());
  }
  if (from.preemptible() != 0) {
    set_preemptible(from.preemptible());
  }
  if (from.minimum_ram_gb() != 0) {
    set_minimum_ram_gb(from.minimum_ram_gb());
  }
  if (from.boot_disk_size_gb() != 0) {
    set_boot_disk_size_gb(from.boot_disk_size_gb());
  }
}

void PipelineResources::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1alpha2.PipelineResources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PipelineResources::CopyFrom(const PipelineResources& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1alpha2.PipelineResources)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PipelineResources::IsInitialized() const {

  return true;
}

void PipelineResources::Swap(PipelineResources* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PipelineResources temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void PipelineResources::UnsafeArenaSwap(PipelineResources* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PipelineResources::InternalSwap(PipelineResources* other) {
  std::swap(minimum_cpu_cores_, other->minimum_cpu_cores_);
  std::swap(preemptible_, other->preemptible_);
  std::swap(minimum_ram_gb_, other->minimum_ram_gb_);
  disks_.UnsafeArenaSwap(&other->disks_);
  zones_.UnsafeArenaSwap(&other->zones_);
  std::swap(boot_disk_size_gb_, other->boot_disk_size_gb_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PipelineResources::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PipelineResources_descriptor_;
  metadata.reflection = PipelineResources_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PipelineResources_Disk

// optional string name = 1;
void PipelineResources_Disk::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& PipelineResources_Disk::name() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.PipelineResources.Disk.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PipelineResources_Disk::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.PipelineResources.Disk.name)
}
void PipelineResources_Disk::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.PipelineResources.Disk.name)
}
void PipelineResources_Disk::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.PipelineResources.Disk.name)
}
::std::string* PipelineResources_Disk::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.PipelineResources.Disk.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PipelineResources_Disk::release_name() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.PipelineResources.Disk.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PipelineResources_Disk::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.PipelineResources.Disk.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void PipelineResources_Disk::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.PipelineResources.Disk.name)
}
void PipelineResources_Disk::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.PipelineResources.Disk.name)
}

// optional .google.genomics.v1alpha2.PipelineResources.Disk.Type type = 2;
void PipelineResources_Disk::clear_type() {
  type_ = 0;
}
::google::genomics::v1alpha2::PipelineResources_Disk_Type PipelineResources_Disk::type() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.PipelineResources.Disk.type)
  return static_cast< ::google::genomics::v1alpha2::PipelineResources_Disk_Type >(type_);
}
void PipelineResources_Disk::set_type(::google::genomics::v1alpha2::PipelineResources_Disk_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.PipelineResources.Disk.type)
}

// optional int32 size_gb = 3;
void PipelineResources_Disk::clear_size_gb() {
  size_gb_ = 0;
}
::google::protobuf::int32 PipelineResources_Disk::size_gb() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.PipelineResources.Disk.size_gb)
  return size_gb_;
}
void PipelineResources_Disk::set_size_gb(::google::protobuf::int32 value) {
  
  size_gb_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.PipelineResources.Disk.size_gb)
}

// optional string source = 4;
void PipelineResources_Disk::clear_source() {
  source_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& PipelineResources_Disk::source() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.PipelineResources.Disk.source)
  return source_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PipelineResources_Disk::set_source(const ::std::string& value) {
  
  source_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.PipelineResources.Disk.source)
}
void PipelineResources_Disk::set_source(const char* value) {
  
  source_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.PipelineResources.Disk.source)
}
void PipelineResources_Disk::set_source(const char* value,
    size_t size) {
  
  source_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.PipelineResources.Disk.source)
}
::std::string* PipelineResources_Disk::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.PipelineResources.Disk.source)
  return source_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PipelineResources_Disk::release_source() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.PipelineResources.Disk.source)
  
  return source_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PipelineResources_Disk::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.PipelineResources.Disk.source)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return source_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void PipelineResources_Disk::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    
  } else {
    
  }
  source_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.PipelineResources.Disk.source)
}
void PipelineResources_Disk::unsafe_arena_set_allocated_source(
    ::std::string* source) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (source != NULL) {
    
  } else {
    
  }
  source_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      source, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.PipelineResources.Disk.source)
}

// optional bool auto_delete = 6;
void PipelineResources_Disk::clear_auto_delete() {
  auto_delete_ = false;
}
bool PipelineResources_Disk::auto_delete() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.PipelineResources.Disk.auto_delete)
  return auto_delete_;
}
void PipelineResources_Disk::set_auto_delete(bool value) {
  
  auto_delete_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.PipelineResources.Disk.auto_delete)
}

// optional bool read_only = 7;
void PipelineResources_Disk::clear_read_only() {
  read_only_ = false;
}
bool PipelineResources_Disk::read_only() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.PipelineResources.Disk.read_only)
  return read_only_;
}
void PipelineResources_Disk::set_read_only(bool value) {
  
  read_only_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.PipelineResources.Disk.read_only)
}

// optional string mount_point = 8;
void PipelineResources_Disk::clear_mount_point() {
  mount_point_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& PipelineResources_Disk::mount_point() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.PipelineResources.Disk.mount_point)
  return mount_point_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PipelineResources_Disk::set_mount_point(const ::std::string& value) {
  
  mount_point_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.PipelineResources.Disk.mount_point)
}
void PipelineResources_Disk::set_mount_point(const char* value) {
  
  mount_point_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.PipelineResources.Disk.mount_point)
}
void PipelineResources_Disk::set_mount_point(const char* value,
    size_t size) {
  
  mount_point_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.PipelineResources.Disk.mount_point)
}
::std::string* PipelineResources_Disk::mutable_mount_point() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.PipelineResources.Disk.mount_point)
  return mount_point_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PipelineResources_Disk::release_mount_point() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.PipelineResources.Disk.mount_point)
  
  return mount_point_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PipelineResources_Disk::unsafe_arena_release_mount_point() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.PipelineResources.Disk.mount_point)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return mount_point_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void PipelineResources_Disk::set_allocated_mount_point(::std::string* mount_point) {
  if (mount_point != NULL) {
    
  } else {
    
  }
  mount_point_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mount_point,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.PipelineResources.Disk.mount_point)
}
void PipelineResources_Disk::unsafe_arena_set_allocated_mount_point(
    ::std::string* mount_point) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (mount_point != NULL) {
    
  } else {
    
  }
  mount_point_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      mount_point, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.PipelineResources.Disk.mount_point)
}

inline const PipelineResources_Disk* PipelineResources_Disk::internal_default_instance() {
  return &PipelineResources_Disk_default_instance_.get();
}
// -------------------------------------------------------------------

// PipelineResources

// optional int32 minimum_cpu_cores = 1;
void PipelineResources::clear_minimum_cpu_cores() {
  minimum_cpu_cores_ = 0;
}
::google::protobuf::int32 PipelineResources::minimum_cpu_cores() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.PipelineResources.minimum_cpu_cores)
  return minimum_cpu_cores_;
}
void PipelineResources::set_minimum_cpu_cores(::google::protobuf::int32 value) {
  
  minimum_cpu_cores_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.PipelineResources.minimum_cpu_cores)
}

// optional bool preemptible = 2;
void PipelineResources::clear_preemptible() {
  preemptible_ = false;
}
bool PipelineResources::preemptible() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.PipelineResources.preemptible)
  return preemptible_;
}
void PipelineResources::set_preemptible(bool value) {
  
  preemptible_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.PipelineResources.preemptible)
}

// optional double minimum_ram_gb = 3;
void PipelineResources::clear_minimum_ram_gb() {
  minimum_ram_gb_ = 0;
}
double PipelineResources::minimum_ram_gb() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.PipelineResources.minimum_ram_gb)
  return minimum_ram_gb_;
}
void PipelineResources::set_minimum_ram_gb(double value) {
  
  minimum_ram_gb_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.PipelineResources.minimum_ram_gb)
}

// repeated .google.genomics.v1alpha2.PipelineResources.Disk disks = 4;
int PipelineResources::disks_size() const {
  return disks_.size();
}
void PipelineResources::clear_disks() {
  disks_.Clear();
}
const ::google::genomics::v1alpha2::PipelineResources_Disk& PipelineResources::disks(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.PipelineResources.disks)
  return disks_.Get(index);
}
::google::genomics::v1alpha2::PipelineResources_Disk* PipelineResources::mutable_disks(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.PipelineResources.disks)
  return disks_.Mutable(index);
}
::google::genomics::v1alpha2::PipelineResources_Disk* PipelineResources::add_disks() {
  // @@protoc_insertion_point(field_add:google.genomics.v1alpha2.PipelineResources.disks)
  return disks_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::genomics::v1alpha2::PipelineResources_Disk >*
PipelineResources::mutable_disks() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1alpha2.PipelineResources.disks)
  return &disks_;
}
const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1alpha2::PipelineResources_Disk >&
PipelineResources::disks() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1alpha2.PipelineResources.disks)
  return disks_;
}

// repeated string zones = 5;
int PipelineResources::zones_size() const {
  return zones_.size();
}
void PipelineResources::clear_zones() {
  zones_.Clear();
}
const ::std::string& PipelineResources::zones(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.PipelineResources.zones)
  return zones_.Get(index);
}
::std::string* PipelineResources::mutable_zones(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.PipelineResources.zones)
  return zones_.Mutable(index);
}
void PipelineResources::set_zones(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.PipelineResources.zones)
  zones_.Mutable(index)->assign(value);
}
void PipelineResources::set_zones(int index, const char* value) {
  zones_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.PipelineResources.zones)
}
void PipelineResources::set_zones(int index, const char* value, size_t size) {
  zones_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.PipelineResources.zones)
}
::std::string* PipelineResources::add_zones() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1alpha2.PipelineResources.zones)
  return zones_.Add();
}
void PipelineResources::add_zones(const ::std::string& value) {
  zones_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1alpha2.PipelineResources.zones)
}
void PipelineResources::add_zones(const char* value) {
  zones_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1alpha2.PipelineResources.zones)
}
void PipelineResources::add_zones(const char* value, size_t size) {
  zones_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1alpha2.PipelineResources.zones)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
PipelineResources::zones() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1alpha2.PipelineResources.zones)
  return zones_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
PipelineResources::mutable_zones() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1alpha2.PipelineResources.zones)
  return &zones_;
}

// optional int32 boot_disk_size_gb = 6;
void PipelineResources::clear_boot_disk_size_gb() {
  boot_disk_size_gb_ = 0;
}
::google::protobuf::int32 PipelineResources::boot_disk_size_gb() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.PipelineResources.boot_disk_size_gb)
  return boot_disk_size_gb_;
}
void PipelineResources::set_boot_disk_size_gb(::google::protobuf::int32 value) {
  
  boot_disk_size_gb_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.PipelineResources.boot_disk_size_gb)
}

inline const PipelineResources* PipelineResources::internal_default_instance() {
  return &PipelineResources_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PipelineParameter_LocalCopy::kPathFieldNumber;
const int PipelineParameter_LocalCopy::kDiskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PipelineParameter_LocalCopy::PipelineParameter_LocalCopy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1alpha2.PipelineParameter.LocalCopy)
}
PipelineParameter_LocalCopy::PipelineParameter_LocalCopy(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1alpha2.PipelineParameter.LocalCopy)
}

void PipelineParameter_LocalCopy::InitAsDefaultInstance() {
}

PipelineParameter_LocalCopy::PipelineParameter_LocalCopy(const PipelineParameter_LocalCopy& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1alpha2.PipelineParameter.LocalCopy)
}

void PipelineParameter_LocalCopy::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  disk_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

PipelineParameter_LocalCopy::~PipelineParameter_LocalCopy() {
  // @@protoc_insertion_point(destructor:google.genomics.v1alpha2.PipelineParameter.LocalCopy)
  SharedDtor();
}

void PipelineParameter_LocalCopy::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  path_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  disk_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void PipelineParameter_LocalCopy::ArenaDtor(void* object) {
  PipelineParameter_LocalCopy* _this = reinterpret_cast< PipelineParameter_LocalCopy* >(object);
  (void)_this;
}
void PipelineParameter_LocalCopy::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PipelineParameter_LocalCopy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PipelineParameter_LocalCopy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PipelineParameter_LocalCopy_descriptor_;
}

const PipelineParameter_LocalCopy& PipelineParameter_LocalCopy::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PipelineParameter_LocalCopy> PipelineParameter_LocalCopy_default_instance_;

PipelineParameter_LocalCopy* PipelineParameter_LocalCopy::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<PipelineParameter_LocalCopy>(arena);
}

void PipelineParameter_LocalCopy::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1alpha2.PipelineParameter.LocalCopy)
  path_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  disk_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool PipelineParameter_LocalCopy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1alpha2.PipelineParameter.LocalCopy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.PipelineParameter.LocalCopy.path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_disk;
        break;
      }

      // optional string disk = 2;
      case 2: {
        if (tag == 18) {
         parse_disk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_disk()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->disk().data(), this->disk().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.PipelineParameter.LocalCopy.disk"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1alpha2.PipelineParameter.LocalCopy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1alpha2.PipelineParameter.LocalCopy)
  return false;
#undef DO_
}

void PipelineParameter_LocalCopy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1alpha2.PipelineParameter.LocalCopy)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.PipelineParameter.LocalCopy.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // optional string disk = 2;
  if (this->disk().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->disk().data(), this->disk().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.PipelineParameter.LocalCopy.disk");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->disk(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1alpha2.PipelineParameter.LocalCopy)
}

::google::protobuf::uint8* PipelineParameter_LocalCopy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1alpha2.PipelineParameter.LocalCopy)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.PipelineParameter.LocalCopy.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // optional string disk = 2;
  if (this->disk().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->disk().data(), this->disk().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.PipelineParameter.LocalCopy.disk");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->disk(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1alpha2.PipelineParameter.LocalCopy)
  return target;
}

size_t PipelineParameter_LocalCopy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1alpha2.PipelineParameter.LocalCopy)
  size_t total_size = 0;

  // optional string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // optional string disk = 2;
  if (this->disk().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->disk());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PipelineParameter_LocalCopy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1alpha2.PipelineParameter.LocalCopy)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PipelineParameter_LocalCopy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PipelineParameter_LocalCopy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1alpha2.PipelineParameter.LocalCopy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1alpha2.PipelineParameter.LocalCopy)
    UnsafeMergeFrom(*source);
  }
}

void PipelineParameter_LocalCopy::MergeFrom(const PipelineParameter_LocalCopy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1alpha2.PipelineParameter.LocalCopy)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PipelineParameter_LocalCopy::UnsafeMergeFrom(const PipelineParameter_LocalCopy& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.path().size() > 0) {
    set_path(from.path());
  }
  if (from.disk().size() > 0) {
    set_disk(from.disk());
  }
}

void PipelineParameter_LocalCopy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1alpha2.PipelineParameter.LocalCopy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PipelineParameter_LocalCopy::CopyFrom(const PipelineParameter_LocalCopy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1alpha2.PipelineParameter.LocalCopy)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PipelineParameter_LocalCopy::IsInitialized() const {

  return true;
}

void PipelineParameter_LocalCopy::Swap(PipelineParameter_LocalCopy* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PipelineParameter_LocalCopy temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void PipelineParameter_LocalCopy::UnsafeArenaSwap(PipelineParameter_LocalCopy* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PipelineParameter_LocalCopy::InternalSwap(PipelineParameter_LocalCopy* other) {
  path_.Swap(&other->path_);
  disk_.Swap(&other->disk_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PipelineParameter_LocalCopy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PipelineParameter_LocalCopy_descriptor_;
  metadata.reflection = PipelineParameter_LocalCopy_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

void PipelineParameter::_slow_mutable_local_copy() {
  local_copy_ = ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1alpha2::PipelineParameter_LocalCopy >(
      GetArenaNoVirtual());
}
::google::genomics::v1alpha2::PipelineParameter_LocalCopy* PipelineParameter::_slow_release_local_copy() {
  if (local_copy_ == NULL) {
    return NULL;
  } else {
    ::google::genomics::v1alpha2::PipelineParameter_LocalCopy* temp = new ::google::genomics::v1alpha2::PipelineParameter_LocalCopy(*local_copy_);
    local_copy_ = NULL;
    return temp;
  }
}
::google::genomics::v1alpha2::PipelineParameter_LocalCopy* PipelineParameter::unsafe_arena_release_local_copy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.PipelineParameter.local_copy)
  
  ::google::genomics::v1alpha2::PipelineParameter_LocalCopy* temp = local_copy_;
  local_copy_ = NULL;
  return temp;
}
void PipelineParameter::_slow_set_allocated_local_copy(
    ::google::protobuf::Arena* message_arena, ::google::genomics::v1alpha2::PipelineParameter_LocalCopy** local_copy) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*local_copy) == NULL) {
      message_arena->Own(*local_copy);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*local_copy)) {
      ::google::genomics::v1alpha2::PipelineParameter_LocalCopy* new_local_copy = 
            ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1alpha2::PipelineParameter_LocalCopy >(
            message_arena);
      new_local_copy->CopyFrom(**local_copy);
      *local_copy = new_local_copy;
    }
}
void PipelineParameter::unsafe_arena_set_allocated_local_copy(
    ::google::genomics::v1alpha2::PipelineParameter_LocalCopy* local_copy) {
  if (GetArenaNoVirtual() == NULL) {
    delete local_copy_;
  }
  local_copy_ = local_copy;
  if (local_copy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.PipelineParameter.local_copy)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PipelineParameter::kNameFieldNumber;
const int PipelineParameter::kDescriptionFieldNumber;
const int PipelineParameter::kDefaultValueFieldNumber;
const int PipelineParameter::kLocalCopyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PipelineParameter::PipelineParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1alpha2.PipelineParameter)
}
PipelineParameter::PipelineParameter(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1alpha2.PipelineParameter)
}

void PipelineParameter::InitAsDefaultInstance() {
  local_copy_ = const_cast< ::google::genomics::v1alpha2::PipelineParameter_LocalCopy*>(
      ::google::genomics::v1alpha2::PipelineParameter_LocalCopy::internal_default_instance());
}

PipelineParameter::PipelineParameter(const PipelineParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1alpha2.PipelineParameter)
}

void PipelineParameter::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  default_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_copy_ = NULL;
  _cached_size_ = 0;
}

PipelineParameter::~PipelineParameter() {
  // @@protoc_insertion_point(destructor:google.genomics.v1alpha2.PipelineParameter)
  SharedDtor();
}

void PipelineParameter::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  description_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  default_value_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != &PipelineParameter_default_instance_.get()) {
    delete local_copy_;
  }
}

void PipelineParameter::ArenaDtor(void* object) {
  PipelineParameter* _this = reinterpret_cast< PipelineParameter* >(object);
  (void)_this;
}
void PipelineParameter::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PipelineParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PipelineParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PipelineParameter_descriptor_;
}

const PipelineParameter& PipelineParameter::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PipelineParameter> PipelineParameter_default_instance_;

PipelineParameter* PipelineParameter::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<PipelineParameter>(arena);
}

void PipelineParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1alpha2.PipelineParameter)
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  default_value_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && local_copy_ != NULL) delete local_copy_;
  local_copy_ = NULL;
}

bool PipelineParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1alpha2.PipelineParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.PipelineParameter.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // optional string description = 2;
      case 2: {
        if (tag == 18) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.PipelineParameter.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_default_value;
        break;
      }

      // optional string default_value = 5;
      case 5: {
        if (tag == 42) {
         parse_default_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_default_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->default_value().data(), this->default_value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.PipelineParameter.default_value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_local_copy;
        break;
      }

      // optional .google.genomics.v1alpha2.PipelineParameter.LocalCopy local_copy = 6;
      case 6: {
        if (tag == 50) {
         parse_local_copy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_local_copy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1alpha2.PipelineParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1alpha2.PipelineParameter)
  return false;
#undef DO_
}

void PipelineParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1alpha2.PipelineParameter)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.PipelineParameter.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.PipelineParameter.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // optional string default_value = 5;
  if (this->default_value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->default_value().data(), this->default_value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.PipelineParameter.default_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->default_value(), output);
  }

  // optional .google.genomics.v1alpha2.PipelineParameter.LocalCopy local_copy = 6;
  if (this->has_local_copy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->local_copy_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1alpha2.PipelineParameter)
}

::google::protobuf::uint8* PipelineParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1alpha2.PipelineParameter)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.PipelineParameter.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.PipelineParameter.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // optional string default_value = 5;
  if (this->default_value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->default_value().data(), this->default_value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.PipelineParameter.default_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->default_value(), target);
  }

  // optional .google.genomics.v1alpha2.PipelineParameter.LocalCopy local_copy = 6;
  if (this->has_local_copy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->local_copy_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1alpha2.PipelineParameter)
  return target;
}

size_t PipelineParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1alpha2.PipelineParameter)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // optional string default_value = 5;
  if (this->default_value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->default_value());
  }

  // optional .google.genomics.v1alpha2.PipelineParameter.LocalCopy local_copy = 6;
  if (this->has_local_copy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->local_copy_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PipelineParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1alpha2.PipelineParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PipelineParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PipelineParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1alpha2.PipelineParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1alpha2.PipelineParameter)
    UnsafeMergeFrom(*source);
  }
}

void PipelineParameter::MergeFrom(const PipelineParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1alpha2.PipelineParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PipelineParameter::UnsafeMergeFrom(const PipelineParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.description().size() > 0) {
    set_description(from.description());
  }
  if (from.default_value().size() > 0) {
    set_default_value(from.default_value());
  }
  if (from.has_local_copy()) {
    mutable_local_copy()->::google::genomics::v1alpha2::PipelineParameter_LocalCopy::MergeFrom(from.local_copy());
  }
}

void PipelineParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1alpha2.PipelineParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PipelineParameter::CopyFrom(const PipelineParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1alpha2.PipelineParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PipelineParameter::IsInitialized() const {

  return true;
}

void PipelineParameter::Swap(PipelineParameter* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PipelineParameter temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void PipelineParameter::UnsafeArenaSwap(PipelineParameter* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PipelineParameter::InternalSwap(PipelineParameter* other) {
  name_.Swap(&other->name_);
  description_.Swap(&other->description_);
  default_value_.Swap(&other->default_value_);
  std::swap(local_copy_, other->local_copy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PipelineParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PipelineParameter_descriptor_;
  metadata.reflection = PipelineParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PipelineParameter_LocalCopy

// optional string path = 1;
void PipelineParameter_LocalCopy::clear_path() {
  path_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& PipelineParameter_LocalCopy::path() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.PipelineParameter.LocalCopy.path)
  return path_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PipelineParameter_LocalCopy::set_path(const ::std::string& value) {
  
  path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.PipelineParameter.LocalCopy.path)
}
void PipelineParameter_LocalCopy::set_path(const char* value) {
  
  path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.PipelineParameter.LocalCopy.path)
}
void PipelineParameter_LocalCopy::set_path(const char* value,
    size_t size) {
  
  path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.PipelineParameter.LocalCopy.path)
}
::std::string* PipelineParameter_LocalCopy::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.PipelineParameter.LocalCopy.path)
  return path_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PipelineParameter_LocalCopy::release_path() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.PipelineParameter.LocalCopy.path)
  
  return path_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PipelineParameter_LocalCopy::unsafe_arena_release_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.PipelineParameter.LocalCopy.path)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return path_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void PipelineParameter_LocalCopy::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.PipelineParameter.LocalCopy.path)
}
void PipelineParameter_LocalCopy::unsafe_arena_set_allocated_path(
    ::std::string* path) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (path != NULL) {
    
  } else {
    
  }
  path_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      path, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.PipelineParameter.LocalCopy.path)
}

// optional string disk = 2;
void PipelineParameter_LocalCopy::clear_disk() {
  disk_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& PipelineParameter_LocalCopy::disk() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.PipelineParameter.LocalCopy.disk)
  return disk_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PipelineParameter_LocalCopy::set_disk(const ::std::string& value) {
  
  disk_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.PipelineParameter.LocalCopy.disk)
}
void PipelineParameter_LocalCopy::set_disk(const char* value) {
  
  disk_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.PipelineParameter.LocalCopy.disk)
}
void PipelineParameter_LocalCopy::set_disk(const char* value,
    size_t size) {
  
  disk_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.PipelineParameter.LocalCopy.disk)
}
::std::string* PipelineParameter_LocalCopy::mutable_disk() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.PipelineParameter.LocalCopy.disk)
  return disk_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PipelineParameter_LocalCopy::release_disk() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.PipelineParameter.LocalCopy.disk)
  
  return disk_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PipelineParameter_LocalCopy::unsafe_arena_release_disk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.PipelineParameter.LocalCopy.disk)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return disk_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void PipelineParameter_LocalCopy::set_allocated_disk(::std::string* disk) {
  if (disk != NULL) {
    
  } else {
    
  }
  disk_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), disk,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.PipelineParameter.LocalCopy.disk)
}
void PipelineParameter_LocalCopy::unsafe_arena_set_allocated_disk(
    ::std::string* disk) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (disk != NULL) {
    
  } else {
    
  }
  disk_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      disk, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.PipelineParameter.LocalCopy.disk)
}

inline const PipelineParameter_LocalCopy* PipelineParameter_LocalCopy::internal_default_instance() {
  return &PipelineParameter_LocalCopy_default_instance_.get();
}
// -------------------------------------------------------------------

// PipelineParameter

// optional string name = 1;
void PipelineParameter::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& PipelineParameter::name() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.PipelineParameter.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PipelineParameter::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.PipelineParameter.name)
}
void PipelineParameter::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.PipelineParameter.name)
}
void PipelineParameter::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.PipelineParameter.name)
}
::std::string* PipelineParameter::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.PipelineParameter.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PipelineParameter::release_name() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.PipelineParameter.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PipelineParameter::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.PipelineParameter.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void PipelineParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.PipelineParameter.name)
}
void PipelineParameter::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.PipelineParameter.name)
}

// optional string description = 2;
void PipelineParameter::clear_description() {
  description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& PipelineParameter::description() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.PipelineParameter.description)
  return description_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PipelineParameter::set_description(const ::std::string& value) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.PipelineParameter.description)
}
void PipelineParameter::set_description(const char* value) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.PipelineParameter.description)
}
void PipelineParameter::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.PipelineParameter.description)
}
::std::string* PipelineParameter::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.PipelineParameter.description)
  return description_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PipelineParameter::release_description() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.PipelineParameter.description)
  
  return description_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PipelineParameter::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.PipelineParameter.description)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return description_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void PipelineParameter::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.PipelineParameter.description)
}
void PipelineParameter::unsafe_arena_set_allocated_description(
    ::std::string* description) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (description != NULL) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      description, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.PipelineParameter.description)
}

// optional string default_value = 5;
void PipelineParameter::clear_default_value() {
  default_value_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& PipelineParameter::default_value() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.PipelineParameter.default_value)
  return default_value_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PipelineParameter::set_default_value(const ::std::string& value) {
  
  default_value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.PipelineParameter.default_value)
}
void PipelineParameter::set_default_value(const char* value) {
  
  default_value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.PipelineParameter.default_value)
}
void PipelineParameter::set_default_value(const char* value,
    size_t size) {
  
  default_value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.PipelineParameter.default_value)
}
::std::string* PipelineParameter::mutable_default_value() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.PipelineParameter.default_value)
  return default_value_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PipelineParameter::release_default_value() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.PipelineParameter.default_value)
  
  return default_value_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PipelineParameter::unsafe_arena_release_default_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.PipelineParameter.default_value)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return default_value_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void PipelineParameter::set_allocated_default_value(::std::string* default_value) {
  if (default_value != NULL) {
    
  } else {
    
  }
  default_value_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), default_value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.PipelineParameter.default_value)
}
void PipelineParameter::unsafe_arena_set_allocated_default_value(
    ::std::string* default_value) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (default_value != NULL) {
    
  } else {
    
  }
  default_value_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      default_value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.PipelineParameter.default_value)
}

// optional .google.genomics.v1alpha2.PipelineParameter.LocalCopy local_copy = 6;
bool PipelineParameter::has_local_copy() const {
  return this != internal_default_instance() && local_copy_ != NULL;
}
void PipelineParameter::clear_local_copy() {
  if (GetArenaNoVirtual() == NULL && local_copy_ != NULL) delete local_copy_;
  local_copy_ = NULL;
}
const ::google::genomics::v1alpha2::PipelineParameter_LocalCopy& PipelineParameter::local_copy() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.PipelineParameter.local_copy)
  return local_copy_ != NULL ? *local_copy_
                         : *::google::genomics::v1alpha2::PipelineParameter_LocalCopy::internal_default_instance();
}
::google::genomics::v1alpha2::PipelineParameter_LocalCopy* PipelineParameter::mutable_local_copy() {
  
  if (local_copy_ == NULL) {
    _slow_mutable_local_copy();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.PipelineParameter.local_copy)
  return local_copy_;
}
::google::genomics::v1alpha2::PipelineParameter_LocalCopy* PipelineParameter::release_local_copy() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.PipelineParameter.local_copy)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_local_copy();
  } else {
    ::google::genomics::v1alpha2::PipelineParameter_LocalCopy* temp = local_copy_;
    local_copy_ = NULL;
    return temp;
  }
}
 void PipelineParameter::set_allocated_local_copy(::google::genomics::v1alpha2::PipelineParameter_LocalCopy* local_copy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete local_copy_;
  }
  if (local_copy != NULL) {
    _slow_set_allocated_local_copy(message_arena, &local_copy);
  }
  local_copy_ = local_copy;
  if (local_copy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.PipelineParameter.local_copy)
}

inline const PipelineParameter* PipelineParameter::internal_default_instance() {
  return &PipelineParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DockerExecutor::kImageNameFieldNumber;
const int DockerExecutor::kCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DockerExecutor::DockerExecutor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1alpha2.DockerExecutor)
}
DockerExecutor::DockerExecutor(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1alpha2.DockerExecutor)
}

void DockerExecutor::InitAsDefaultInstance() {
}

DockerExecutor::DockerExecutor(const DockerExecutor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1alpha2.DockerExecutor)
}

void DockerExecutor::SharedCtor() {
  image_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DockerExecutor::~DockerExecutor() {
  // @@protoc_insertion_point(destructor:google.genomics.v1alpha2.DockerExecutor)
  SharedDtor();
}

void DockerExecutor::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  image_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  cmd_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void DockerExecutor::ArenaDtor(void* object) {
  DockerExecutor* _this = reinterpret_cast< DockerExecutor* >(object);
  (void)_this;
}
void DockerExecutor::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DockerExecutor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DockerExecutor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DockerExecutor_descriptor_;
}

const DockerExecutor& DockerExecutor::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DockerExecutor> DockerExecutor_default_instance_;

DockerExecutor* DockerExecutor::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DockerExecutor>(arena);
}

void DockerExecutor::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1alpha2.DockerExecutor)
  image_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  cmd_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool DockerExecutor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1alpha2.DockerExecutor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string image_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->image_name().data(), this->image_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.DockerExecutor.image_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cmd;
        break;
      }

      // optional string cmd = 2;
      case 2: {
        if (tag == 18) {
         parse_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cmd().data(), this->cmd().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1alpha2.DockerExecutor.cmd"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1alpha2.DockerExecutor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1alpha2.DockerExecutor)
  return false;
#undef DO_
}

void DockerExecutor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1alpha2.DockerExecutor)
  // optional string image_name = 1;
  if (this->image_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_name().data(), this->image_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.DockerExecutor.image_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->image_name(), output);
  }

  // optional string cmd = 2;
  if (this->cmd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.DockerExecutor.cmd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cmd(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1alpha2.DockerExecutor)
}

::google::protobuf::uint8* DockerExecutor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1alpha2.DockerExecutor)
  // optional string image_name = 1;
  if (this->image_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_name().data(), this->image_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.DockerExecutor.image_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->image_name(), target);
  }

  // optional string cmd = 2;
  if (this->cmd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1alpha2.DockerExecutor.cmd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cmd(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1alpha2.DockerExecutor)
  return target;
}

size_t DockerExecutor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1alpha2.DockerExecutor)
  size_t total_size = 0;

  // optional string image_name = 1;
  if (this->image_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image_name());
  }

  // optional string cmd = 2;
  if (this->cmd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cmd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DockerExecutor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1alpha2.DockerExecutor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DockerExecutor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DockerExecutor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1alpha2.DockerExecutor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1alpha2.DockerExecutor)
    UnsafeMergeFrom(*source);
  }
}

void DockerExecutor::MergeFrom(const DockerExecutor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1alpha2.DockerExecutor)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DockerExecutor::UnsafeMergeFrom(const DockerExecutor& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.image_name().size() > 0) {
    set_image_name(from.image_name());
  }
  if (from.cmd().size() > 0) {
    set_cmd(from.cmd());
  }
}

void DockerExecutor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1alpha2.DockerExecutor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DockerExecutor::CopyFrom(const DockerExecutor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1alpha2.DockerExecutor)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DockerExecutor::IsInitialized() const {

  return true;
}

void DockerExecutor::Swap(DockerExecutor* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DockerExecutor temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void DockerExecutor::UnsafeArenaSwap(DockerExecutor* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DockerExecutor::InternalSwap(DockerExecutor* other) {
  image_name_.Swap(&other->image_name_);
  cmd_.Swap(&other->cmd_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DockerExecutor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DockerExecutor_descriptor_;
  metadata.reflection = DockerExecutor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DockerExecutor

// optional string image_name = 1;
void DockerExecutor::clear_image_name() {
  image_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& DockerExecutor::image_name() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.DockerExecutor.image_name)
  return image_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DockerExecutor::set_image_name(const ::std::string& value) {
  
  image_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.DockerExecutor.image_name)
}
void DockerExecutor::set_image_name(const char* value) {
  
  image_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.DockerExecutor.image_name)
}
void DockerExecutor::set_image_name(const char* value,
    size_t size) {
  
  image_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.DockerExecutor.image_name)
}
::std::string* DockerExecutor::mutable_image_name() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.DockerExecutor.image_name)
  return image_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DockerExecutor::release_image_name() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.DockerExecutor.image_name)
  
  return image_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DockerExecutor::unsafe_arena_release_image_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.DockerExecutor.image_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return image_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void DockerExecutor::set_allocated_image_name(::std::string* image_name) {
  if (image_name != NULL) {
    
  } else {
    
  }
  image_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.DockerExecutor.image_name)
}
void DockerExecutor::unsafe_arena_set_allocated_image_name(
    ::std::string* image_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (image_name != NULL) {
    
  } else {
    
  }
  image_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      image_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.DockerExecutor.image_name)
}

// optional string cmd = 2;
void DockerExecutor::clear_cmd() {
  cmd_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& DockerExecutor::cmd() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.DockerExecutor.cmd)
  return cmd_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DockerExecutor::set_cmd(const ::std::string& value) {
  
  cmd_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.DockerExecutor.cmd)
}
void DockerExecutor::set_cmd(const char* value) {
  
  cmd_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.DockerExecutor.cmd)
}
void DockerExecutor::set_cmd(const char* value,
    size_t size) {
  
  cmd_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.DockerExecutor.cmd)
}
::std::string* DockerExecutor::mutable_cmd() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.DockerExecutor.cmd)
  return cmd_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DockerExecutor::release_cmd() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.DockerExecutor.cmd)
  
  return cmd_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DockerExecutor::unsafe_arena_release_cmd() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.DockerExecutor.cmd)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return cmd_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void DockerExecutor::set_allocated_cmd(::std::string* cmd) {
  if (cmd != NULL) {
    
  } else {
    
  }
  cmd_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.DockerExecutor.cmd)
}
void DockerExecutor::unsafe_arena_set_allocated_cmd(
    ::std::string* cmd) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (cmd != NULL) {
    
  } else {
    
  }
  cmd_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      cmd, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.DockerExecutor.cmd)
}

inline const DockerExecutor* DockerExecutor::internal_default_instance() {
  return &DockerExecutor_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha2
}  // namespace genomics
}  // namespace google

// @@protoc_insertion_point(global_scope)
