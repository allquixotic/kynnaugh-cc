// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: google/logging/v2/logging.proto
// Original file comments:
// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2flogging_2fv2_2flogging_2eproto__INCLUDED
#define GRPC_google_2flogging_2fv2_2flogging_2eproto__INCLUDED

#include "google/logging/v2/logging.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace google {
namespace logging {
namespace v2 {

// Service for ingesting and querying logs.
class LoggingServiceV2 GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Deletes all the log entries in a log.
    // The log reappears if it receives new entries.
    virtual ::grpc::Status DeleteLog(::grpc::ClientContext* context, const ::google::logging::v2::DeleteLogRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteLog(::grpc::ClientContext* context, const ::google::logging::v2::DeleteLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteLogRaw(context, request, cq));
    }
    // Writes log entries to Stackdriver Logging.  All log entries are
    // written by this method.
    virtual ::grpc::Status WriteLogEntries(::grpc::ClientContext* context, const ::google::logging::v2::WriteLogEntriesRequest& request, ::google::logging::v2::WriteLogEntriesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::WriteLogEntriesResponse>> AsyncWriteLogEntries(::grpc::ClientContext* context, const ::google::logging::v2::WriteLogEntriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::WriteLogEntriesResponse>>(AsyncWriteLogEntriesRaw(context, request, cq));
    }
    // Lists log entries.  Use this method to retrieve log entries from Cloud
    // Logging.  For ways to export log entries, see
    // [Exporting Logs](/logging/docs/export).
    virtual ::grpc::Status ListLogEntries(::grpc::ClientContext* context, const ::google::logging::v2::ListLogEntriesRequest& request, ::google::logging::v2::ListLogEntriesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::ListLogEntriesResponse>> AsyncListLogEntries(::grpc::ClientContext* context, const ::google::logging::v2::ListLogEntriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::ListLogEntriesResponse>>(AsyncListLogEntriesRaw(context, request, cq));
    }
    // Lists the monitored resource descriptors used by Stackdriver Logging.
    virtual ::grpc::Status ListMonitoredResourceDescriptors(::grpc::ClientContext* context, const ::google::logging::v2::ListMonitoredResourceDescriptorsRequest& request, ::google::logging::v2::ListMonitoredResourceDescriptorsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::ListMonitoredResourceDescriptorsResponse>> AsyncListMonitoredResourceDescriptors(::grpc::ClientContext* context, const ::google::logging::v2::ListMonitoredResourceDescriptorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::ListMonitoredResourceDescriptorsResponse>>(AsyncListMonitoredResourceDescriptorsRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteLogRaw(::grpc::ClientContext* context, const ::google::logging::v2::DeleteLogRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::WriteLogEntriesResponse>* AsyncWriteLogEntriesRaw(::grpc::ClientContext* context, const ::google::logging::v2::WriteLogEntriesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::ListLogEntriesResponse>* AsyncListLogEntriesRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListLogEntriesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::ListMonitoredResourceDescriptorsResponse>* AsyncListMonitoredResourceDescriptorsRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListMonitoredResourceDescriptorsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status DeleteLog(::grpc::ClientContext* context, const ::google::logging::v2::DeleteLogRequest& request, ::google::protobuf::Empty* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteLog(::grpc::ClientContext* context, const ::google::logging::v2::DeleteLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteLogRaw(context, request, cq));
    }
    ::grpc::Status WriteLogEntries(::grpc::ClientContext* context, const ::google::logging::v2::WriteLogEntriesRequest& request, ::google::logging::v2::WriteLogEntriesResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::WriteLogEntriesResponse>> AsyncWriteLogEntries(::grpc::ClientContext* context, const ::google::logging::v2::WriteLogEntriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::WriteLogEntriesResponse>>(AsyncWriteLogEntriesRaw(context, request, cq));
    }
    ::grpc::Status ListLogEntries(::grpc::ClientContext* context, const ::google::logging::v2::ListLogEntriesRequest& request, ::google::logging::v2::ListLogEntriesResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListLogEntriesResponse>> AsyncListLogEntries(::grpc::ClientContext* context, const ::google::logging::v2::ListLogEntriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListLogEntriesResponse>>(AsyncListLogEntriesRaw(context, request, cq));
    }
    ::grpc::Status ListMonitoredResourceDescriptors(::grpc::ClientContext* context, const ::google::logging::v2::ListMonitoredResourceDescriptorsRequest& request, ::google::logging::v2::ListMonitoredResourceDescriptorsResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListMonitoredResourceDescriptorsResponse>> AsyncListMonitoredResourceDescriptors(::grpc::ClientContext* context, const ::google::logging::v2::ListMonitoredResourceDescriptorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListMonitoredResourceDescriptorsResponse>>(AsyncListMonitoredResourceDescriptorsRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteLogRaw(::grpc::ClientContext* context, const ::google::logging::v2::DeleteLogRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::WriteLogEntriesResponse>* AsyncWriteLogEntriesRaw(::grpc::ClientContext* context, const ::google::logging::v2::WriteLogEntriesRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListLogEntriesResponse>* AsyncListLogEntriesRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListLogEntriesRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListMonitoredResourceDescriptorsResponse>* AsyncListMonitoredResourceDescriptorsRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListMonitoredResourceDescriptorsRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_DeleteLog_;
    const ::grpc::RpcMethod rpcmethod_WriteLogEntries_;
    const ::grpc::RpcMethod rpcmethod_ListLogEntries_;
    const ::grpc::RpcMethod rpcmethod_ListMonitoredResourceDescriptors_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Deletes all the log entries in a log.
    // The log reappears if it receives new entries.
    virtual ::grpc::Status DeleteLog(::grpc::ServerContext* context, const ::google::logging::v2::DeleteLogRequest* request, ::google::protobuf::Empty* response);
    // Writes log entries to Stackdriver Logging.  All log entries are
    // written by this method.
    virtual ::grpc::Status WriteLogEntries(::grpc::ServerContext* context, const ::google::logging::v2::WriteLogEntriesRequest* request, ::google::logging::v2::WriteLogEntriesResponse* response);
    // Lists log entries.  Use this method to retrieve log entries from Cloud
    // Logging.  For ways to export log entries, see
    // [Exporting Logs](/logging/docs/export).
    virtual ::grpc::Status ListLogEntries(::grpc::ServerContext* context, const ::google::logging::v2::ListLogEntriesRequest* request, ::google::logging::v2::ListLogEntriesResponse* response);
    // Lists the monitored resource descriptors used by Stackdriver Logging.
    virtual ::grpc::Status ListMonitoredResourceDescriptors(::grpc::ServerContext* context, const ::google::logging::v2::ListMonitoredResourceDescriptorsRequest* request, ::google::logging::v2::ListMonitoredResourceDescriptorsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteLog() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_DeleteLog() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLog(::grpc::ServerContext* context, const ::google::logging::v2::DeleteLogRequest* request, ::google::protobuf::Empty* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteLog(::grpc::ServerContext* context, ::google::logging::v2::DeleteLogRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WriteLogEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_WriteLogEntries() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_WriteLogEntries() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteLogEntries(::grpc::ServerContext* context, const ::google::logging::v2::WriteLogEntriesRequest* request, ::google::logging::v2::WriteLogEntriesResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteLogEntries(::grpc::ServerContext* context, ::google::logging::v2::WriteLogEntriesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::logging::v2::WriteLogEntriesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListLogEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListLogEntries() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ListLogEntries() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListLogEntries(::grpc::ServerContext* context, const ::google::logging::v2::ListLogEntriesRequest* request, ::google::logging::v2::ListLogEntriesResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListLogEntries(::grpc::ServerContext* context, ::google::logging::v2::ListLogEntriesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::logging::v2::ListLogEntriesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListMonitoredResourceDescriptors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListMonitoredResourceDescriptors() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ListMonitoredResourceDescriptors() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListMonitoredResourceDescriptors(::grpc::ServerContext* context, const ::google::logging::v2::ListMonitoredResourceDescriptorsRequest* request, ::google::logging::v2::ListMonitoredResourceDescriptorsResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListMonitoredResourceDescriptors(::grpc::ServerContext* context, ::google::logging::v2::ListMonitoredResourceDescriptorsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::logging::v2::ListMonitoredResourceDescriptorsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_DeleteLog<WithAsyncMethod_WriteLogEntries<WithAsyncMethod_ListLogEntries<WithAsyncMethod_ListMonitoredResourceDescriptors<Service > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_DeleteLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteLog() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_DeleteLog() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLog(::grpc::ServerContext* context, const ::google::logging::v2::DeleteLogRequest* request, ::google::protobuf::Empty* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WriteLogEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_WriteLogEntries() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_WriteLogEntries() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteLogEntries(::grpc::ServerContext* context, const ::google::logging::v2::WriteLogEntriesRequest* request, ::google::logging::v2::WriteLogEntriesResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListLogEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListLogEntries() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ListLogEntries() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListLogEntries(::grpc::ServerContext* context, const ::google::logging::v2::ListLogEntriesRequest* request, ::google::logging::v2::ListLogEntriesResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListMonitoredResourceDescriptors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListMonitoredResourceDescriptors() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ListMonitoredResourceDescriptors() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListMonitoredResourceDescriptors(::grpc::ServerContext* context, const ::google::logging::v2::ListMonitoredResourceDescriptorsRequest* request, ::google::logging::v2::ListMonitoredResourceDescriptorsResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

}  // namespace v2
}  // namespace logging
}  // namespace google


#endif  // GRPC_google_2flogging_2fv2_2flogging_2eproto__INCLUDED
