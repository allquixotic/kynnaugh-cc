// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/v1/bigtable_service_messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/bigtable/v1/bigtable_service_messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace bigtable {
namespace v1 {

namespace {

const ::google::protobuf::Descriptor* ReadRowsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadRowsRequest_reflection_ = NULL;
struct ReadRowsRequestOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr row_key_;
  const ::google::bigtable::v1::RowRange* row_range_;
  const ::google::bigtable::v1::RowSet* row_set_;
}* ReadRowsRequest_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* ReadRowsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadRowsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadRowsResponse_Chunk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadRowsResponse_Chunk_reflection_ = NULL;
struct ReadRowsResponse_ChunkOneofInstance {
  const ::google::bigtable::v1::Family* row_contents_;
  bool reset_row_;
  bool commit_row_;
}* ReadRowsResponse_Chunk_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* SampleRowKeysRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SampleRowKeysRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SampleRowKeysResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SampleRowKeysResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MutateRowRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MutateRowRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MutateRowsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MutateRowsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MutateRowsRequest_Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MutateRowsRequest_Entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* MutateRowsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MutateRowsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckAndMutateRowRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckAndMutateRowRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckAndMutateRowResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckAndMutateRowResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadModifyWriteRowRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadModifyWriteRowRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto() {
  protobuf_AddDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "google/bigtable/v1/bigtable_service_messages.proto");
  GOOGLE_CHECK(file != NULL);
  ReadRowsRequest_descriptor_ = file->message_type(0);
  static const int ReadRowsRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsRequest, table_name_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReadRowsRequest_default_oneof_instance_, row_key_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReadRowsRequest_default_oneof_instance_, row_range_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReadRowsRequest_default_oneof_instance_, row_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsRequest, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsRequest, allow_row_interleaving_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsRequest, num_rows_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsRequest, target_),
  };
  ReadRowsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReadRowsRequest_descriptor_,
      ReadRowsRequest::default_instance_,
      ReadRowsRequest_offsets_,
      -1,
      -1,
      -1,
      ReadRowsRequest_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsRequest, _oneof_case_[0]),
      sizeof(ReadRowsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsRequest, _is_default_instance_));
  ReadRowsResponse_descriptor_ = file->message_type(1);
  static const int ReadRowsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsResponse, row_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsResponse, chunks_),
  };
  ReadRowsResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReadRowsResponse_descriptor_,
      ReadRowsResponse::default_instance_,
      ReadRowsResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReadRowsResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsResponse, _is_default_instance_));
  ReadRowsResponse_Chunk_descriptor_ = ReadRowsResponse_descriptor_->nested_type(0);
  static const int ReadRowsResponse_Chunk_offsets_[4] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReadRowsResponse_Chunk_default_oneof_instance_, row_contents_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReadRowsResponse_Chunk_default_oneof_instance_, reset_row_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReadRowsResponse_Chunk_default_oneof_instance_, commit_row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsResponse_Chunk, chunk_),
  };
  ReadRowsResponse_Chunk_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReadRowsResponse_Chunk_descriptor_,
      ReadRowsResponse_Chunk::default_instance_,
      ReadRowsResponse_Chunk_offsets_,
      -1,
      -1,
      -1,
      ReadRowsResponse_Chunk_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsResponse_Chunk, _oneof_case_[0]),
      sizeof(ReadRowsResponse_Chunk),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsResponse_Chunk, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsResponse_Chunk, _is_default_instance_));
  SampleRowKeysRequest_descriptor_ = file->message_type(2);
  static const int SampleRowKeysRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleRowKeysRequest, table_name_),
  };
  SampleRowKeysRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SampleRowKeysRequest_descriptor_,
      SampleRowKeysRequest::default_instance_,
      SampleRowKeysRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SampleRowKeysRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleRowKeysRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleRowKeysRequest, _is_default_instance_));
  SampleRowKeysResponse_descriptor_ = file->message_type(3);
  static const int SampleRowKeysResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleRowKeysResponse, row_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleRowKeysResponse, offset_bytes_),
  };
  SampleRowKeysResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SampleRowKeysResponse_descriptor_,
      SampleRowKeysResponse::default_instance_,
      SampleRowKeysResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SampleRowKeysResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleRowKeysResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleRowKeysResponse, _is_default_instance_));
  MutateRowRequest_descriptor_ = file->message_type(4);
  static const int MutateRowRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowRequest, row_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowRequest, mutations_),
  };
  MutateRowRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MutateRowRequest_descriptor_,
      MutateRowRequest::default_instance_,
      MutateRowRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(MutateRowRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowRequest, _is_default_instance_));
  MutateRowsRequest_descriptor_ = file->message_type(5);
  static const int MutateRowsRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowsRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowsRequest, entries_),
  };
  MutateRowsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MutateRowsRequest_descriptor_,
      MutateRowsRequest::default_instance_,
      MutateRowsRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(MutateRowsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowsRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowsRequest, _is_default_instance_));
  MutateRowsRequest_Entry_descriptor_ = MutateRowsRequest_descriptor_->nested_type(0);
  static const int MutateRowsRequest_Entry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowsRequest_Entry, row_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowsRequest_Entry, mutations_),
  };
  MutateRowsRequest_Entry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MutateRowsRequest_Entry_descriptor_,
      MutateRowsRequest_Entry::default_instance_,
      MutateRowsRequest_Entry_offsets_,
      -1,
      -1,
      -1,
      sizeof(MutateRowsRequest_Entry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowsRequest_Entry, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowsRequest_Entry, _is_default_instance_));
  MutateRowsResponse_descriptor_ = file->message_type(6);
  static const int MutateRowsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowsResponse, statuses_),
  };
  MutateRowsResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MutateRowsResponse_descriptor_,
      MutateRowsResponse::default_instance_,
      MutateRowsResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(MutateRowsResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowsResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowsResponse, _is_default_instance_));
  CheckAndMutateRowRequest_descriptor_ = file->message_type(7);
  static const int CheckAndMutateRowRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAndMutateRowRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAndMutateRowRequest, row_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAndMutateRowRequest, predicate_filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAndMutateRowRequest, true_mutations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAndMutateRowRequest, false_mutations_),
  };
  CheckAndMutateRowRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CheckAndMutateRowRequest_descriptor_,
      CheckAndMutateRowRequest::default_instance_,
      CheckAndMutateRowRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CheckAndMutateRowRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAndMutateRowRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAndMutateRowRequest, _is_default_instance_));
  CheckAndMutateRowResponse_descriptor_ = file->message_type(8);
  static const int CheckAndMutateRowResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAndMutateRowResponse, predicate_matched_),
  };
  CheckAndMutateRowResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CheckAndMutateRowResponse_descriptor_,
      CheckAndMutateRowResponse::default_instance_,
      CheckAndMutateRowResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CheckAndMutateRowResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAndMutateRowResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAndMutateRowResponse, _is_default_instance_));
  ReadModifyWriteRowRequest_descriptor_ = file->message_type(9);
  static const int ReadModifyWriteRowRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadModifyWriteRowRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadModifyWriteRowRequest, row_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadModifyWriteRowRequest, rules_),
  };
  ReadModifyWriteRowRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReadModifyWriteRowRequest_descriptor_,
      ReadModifyWriteRowRequest::default_instance_,
      ReadModifyWriteRowRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReadModifyWriteRowRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadModifyWriteRowRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadModifyWriteRowRequest, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReadRowsRequest_descriptor_, &ReadRowsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReadRowsResponse_descriptor_, &ReadRowsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReadRowsResponse_Chunk_descriptor_, &ReadRowsResponse_Chunk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SampleRowKeysRequest_descriptor_, &SampleRowKeysRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SampleRowKeysResponse_descriptor_, &SampleRowKeysResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MutateRowRequest_descriptor_, &MutateRowRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MutateRowsRequest_descriptor_, &MutateRowsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MutateRowsRequest_Entry_descriptor_, &MutateRowsRequest_Entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MutateRowsResponse_descriptor_, &MutateRowsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CheckAndMutateRowRequest_descriptor_, &CheckAndMutateRowRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CheckAndMutateRowResponse_descriptor_, &CheckAndMutateRowResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReadModifyWriteRowRequest_descriptor_, &ReadModifyWriteRowRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto() {
  delete ReadRowsRequest::default_instance_;
  delete ReadRowsRequest_default_oneof_instance_;
  delete ReadRowsRequest_reflection_;
  delete ReadRowsResponse::default_instance_;
  delete ReadRowsResponse_reflection_;
  delete ReadRowsResponse_Chunk::default_instance_;
  delete ReadRowsResponse_Chunk_default_oneof_instance_;
  delete ReadRowsResponse_Chunk_reflection_;
  delete SampleRowKeysRequest::default_instance_;
  delete SampleRowKeysRequest_reflection_;
  delete SampleRowKeysResponse::default_instance_;
  delete SampleRowKeysResponse_reflection_;
  delete MutateRowRequest::default_instance_;
  delete MutateRowRequest_reflection_;
  delete MutateRowsRequest::default_instance_;
  delete MutateRowsRequest_reflection_;
  delete MutateRowsRequest_Entry::default_instance_;
  delete MutateRowsRequest_Entry_reflection_;
  delete MutateRowsResponse::default_instance_;
  delete MutateRowsResponse_reflection_;
  delete CheckAndMutateRowRequest::default_instance_;
  delete CheckAndMutateRowRequest_reflection_;
  delete CheckAndMutateRowResponse::default_instance_;
  delete CheckAndMutateRowResponse_reflection_;
  delete ReadModifyWriteRowRequest::default_instance_;
  delete ReadModifyWriteRowRequest_reflection_;
}

void protobuf_AddDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::bigtable::v1::protobuf_AddDesc_google_2fbigtable_2fv1_2fbigtable_5fdata_2eproto();
  ::google::rpc::protobuf_AddDesc_google_2frpc_2fstatus_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n2google/bigtable/v1/bigtable_service_me"
    "ssages.proto\022\022google.bigtable.v1\032&google"
    "/bigtable/v1/bigtable_data.proto\032\027google"
    "/rpc/status.proto\"\213\002\n\017ReadRowsRequest\022\022\n"
    "\ntable_name\030\001 \001(\t\022\021\n\007row_key\030\002 \001(\014H\000\0221\n\t"
    "row_range\030\003 \001(\0132\034.google.bigtable.v1.Row"
    "RangeH\000\022-\n\007row_set\030\010 \001(\0132\032.google.bigtab"
    "le.v1.RowSetH\000\022-\n\006filter\030\005 \001(\0132\035.google."
    "bigtable.v1.RowFilter\022\036\n\026allow_row_inter"
    "leaving\030\006 \001(\010\022\026\n\016num_rows_limit\030\007 \001(\003B\010\n"
    "\006target\"\320\001\n\020ReadRowsResponse\022\017\n\007row_key\030"
    "\001 \001(\014\022:\n\006chunks\030\002 \003(\0132*.google.bigtable."
    "v1.ReadRowsResponse.Chunk\032o\n\005Chunk\0222\n\014ro"
    "w_contents\030\001 \001(\0132\032.google.bigtable.v1.Fa"
    "milyH\000\022\023\n\treset_row\030\002 \001(\010H\000\022\024\n\ncommit_ro"
    "w\030\003 \001(\010H\000B\007\n\005chunk\"*\n\024SampleRowKeysReque"
    "st\022\022\n\ntable_name\030\001 \001(\t\">\n\025SampleRowKeysR"
    "esponse\022\017\n\007row_key\030\001 \001(\014\022\024\n\014offset_bytes"
    "\030\002 \001(\003\"h\n\020MutateRowRequest\022\022\n\ntable_name"
    "\030\001 \001(\t\022\017\n\007row_key\030\002 \001(\014\022/\n\tmutations\030\003 \003"
    "(\0132\034.google.bigtable.v1.Mutation\"\260\001\n\021Mut"
    "ateRowsRequest\022\022\n\ntable_name\030\001 \001(\t\022<\n\007en"
    "tries\030\002 \003(\0132+.google.bigtable.v1.MutateR"
    "owsRequest.Entry\032I\n\005Entry\022\017\n\007row_key\030\001 \001"
    "(\014\022/\n\tmutations\030\002 \003(\0132\034.google.bigtable."
    "v1.Mutation\":\n\022MutateRowsResponse\022$\n\010sta"
    "tuses\030\001 \003(\0132\022.google.rpc.Status\"\345\001\n\030Chec"
    "kAndMutateRowRequest\022\022\n\ntable_name\030\001 \001(\t"
    "\022\017\n\007row_key\030\002 \001(\014\0227\n\020predicate_filter\030\006 "
    "\001(\0132\035.google.bigtable.v1.RowFilter\0224\n\016tr"
    "ue_mutations\030\004 \003(\0132\034.google.bigtable.v1."
    "Mutation\0225\n\017false_mutations\030\005 \003(\0132\034.goog"
    "le.bigtable.v1.Mutation\"6\n\031CheckAndMutat"
    "eRowResponse\022\031\n\021predicate_matched\030\001 \001(\010\""
    "x\n\031ReadModifyWriteRowRequest\022\022\n\ntable_na"
    "me\030\001 \001(\t\022\017\n\007row_key\030\002 \001(\014\0226\n\005rules\030\003 \003(\013"
    "2\'.google.bigtable.v1.ReadModifyWriteRul"
    "eB8\n\026com.google.bigtable.v1B\034BigtableSer"
    "viceMessagesProtoP\001b\006proto3", 1547);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/bigtable/v1/bigtable_service_messages.proto", &protobuf_RegisterTypes);
  ReadRowsRequest::default_instance_ = new ReadRowsRequest();
  ReadRowsRequest_default_oneof_instance_ = new ReadRowsRequestOneofInstance();
  ReadRowsResponse::default_instance_ = new ReadRowsResponse();
  ReadRowsResponse_Chunk::default_instance_ = new ReadRowsResponse_Chunk();
  ReadRowsResponse_Chunk_default_oneof_instance_ = new ReadRowsResponse_ChunkOneofInstance();
  SampleRowKeysRequest::default_instance_ = new SampleRowKeysRequest();
  SampleRowKeysResponse::default_instance_ = new SampleRowKeysResponse();
  MutateRowRequest::default_instance_ = new MutateRowRequest();
  MutateRowsRequest::default_instance_ = new MutateRowsRequest();
  MutateRowsRequest_Entry::default_instance_ = new MutateRowsRequest_Entry();
  MutateRowsResponse::default_instance_ = new MutateRowsResponse();
  CheckAndMutateRowRequest::default_instance_ = new CheckAndMutateRowRequest();
  CheckAndMutateRowResponse::default_instance_ = new CheckAndMutateRowResponse();
  ReadModifyWriteRowRequest::default_instance_ = new ReadModifyWriteRowRequest();
  ReadRowsRequest::default_instance_->InitAsDefaultInstance();
  ReadRowsResponse::default_instance_->InitAsDefaultInstance();
  ReadRowsResponse_Chunk::default_instance_->InitAsDefaultInstance();
  SampleRowKeysRequest::default_instance_->InitAsDefaultInstance();
  SampleRowKeysResponse::default_instance_->InitAsDefaultInstance();
  MutateRowRequest::default_instance_->InitAsDefaultInstance();
  MutateRowsRequest::default_instance_->InitAsDefaultInstance();
  MutateRowsRequest_Entry::default_instance_->InitAsDefaultInstance();
  MutateRowsResponse::default_instance_->InitAsDefaultInstance();
  CheckAndMutateRowRequest::default_instance_->InitAsDefaultInstance();
  CheckAndMutateRowResponse::default_instance_->InitAsDefaultInstance();
  ReadModifyWriteRowRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto {
  StaticDescriptorInitializer_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto() {
    protobuf_AddDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto();
  }
} static_descriptor_initializer_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadRowsRequest::kTableNameFieldNumber;
const int ReadRowsRequest::kRowKeyFieldNumber;
const int ReadRowsRequest::kRowRangeFieldNumber;
const int ReadRowsRequest::kRowSetFieldNumber;
const int ReadRowsRequest::kFilterFieldNumber;
const int ReadRowsRequest::kAllowRowInterleavingFieldNumber;
const int ReadRowsRequest::kNumRowsLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadRowsRequest::ReadRowsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v1.ReadRowsRequest)
}

void ReadRowsRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  ReadRowsRequest_default_oneof_instance_->row_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ReadRowsRequest_default_oneof_instance_->row_range_ = const_cast< ::google::bigtable::v1::RowRange*>(&::google::bigtable::v1::RowRange::default_instance());
  ReadRowsRequest_default_oneof_instance_->row_set_ = const_cast< ::google::bigtable::v1::RowSet*>(&::google::bigtable::v1::RowSet::default_instance());
  filter_ = const_cast< ::google::bigtable::v1::RowFilter*>(&::google::bigtable::v1::RowFilter::default_instance());
}

ReadRowsRequest::ReadRowsRequest(const ReadRowsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v1.ReadRowsRequest)
}

void ReadRowsRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_ = NULL;
  allow_row_interleaving_ = false;
  num_rows_limit_ = GOOGLE_LONGLONG(0);
  clear_has_target();
}

ReadRowsRequest::~ReadRowsRequest() {
  // @@protoc_insertion_point(destructor:google.bigtable.v1.ReadRowsRequest)
  SharedDtor();
}

void ReadRowsRequest::SharedDtor() {
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_target()) {
    clear_target();
  }
  if (this != default_instance_) {
    delete filter_;
  }
}

void ReadRowsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadRowsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadRowsRequest_descriptor_;
}

const ReadRowsRequest& ReadRowsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto();
  return *default_instance_;
}

ReadRowsRequest* ReadRowsRequest::default_instance_ = NULL;

ReadRowsRequest* ReadRowsRequest::New(::google::protobuf::Arena* arena) const {
  ReadRowsRequest* n = new ReadRowsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadRowsRequest::clear_target() {
// @@protoc_insertion_point(one_of_clear_start:google.bigtable.v1.ReadRowsRequest)
  switch(target_case()) {
    case kRowKey: {
      target_.row_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kRowRange: {
      delete target_.row_range_;
      break;
    }
    case kRowSet: {
      delete target_.row_set_;
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_NOT_SET;
}


void ReadRowsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v1.ReadRowsRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReadRowsRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReadRowsRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(num_rows_limit_, allow_row_interleaving_);
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && filter_ != NULL) delete filter_;
  filter_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  clear_target();
}

bool ReadRowsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v1.ReadRowsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.v1.ReadRowsRequest.table_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_row_key;
        break;
      }

      // optional bytes row_key = 2;
      case 2: {
        if (tag == 18) {
         parse_row_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_row_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_row_range;
        break;
      }

      // optional .google.bigtable.v1.RowRange row_range = 3;
      case 3: {
        if (tag == 26) {
         parse_row_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_row_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_filter;
        break;
      }

      // optional .google.bigtable.v1.RowFilter filter = 5;
      case 5: {
        if (tag == 42) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_allow_row_interleaving;
        break;
      }

      // optional bool allow_row_interleaving = 6;
      case 6: {
        if (tag == 48) {
         parse_allow_row_interleaving:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_row_interleaving_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_num_rows_limit;
        break;
      }

      // optional int64 num_rows_limit = 7;
      case 7: {
        if (tag == 56) {
         parse_num_rows_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_rows_limit_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_row_set;
        break;
      }

      // optional .google.bigtable.v1.RowSet row_set = 8;
      case 8: {
        if (tag == 66) {
         parse_row_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_row_set()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v1.ReadRowsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v1.ReadRowsRequest)
  return false;
#undef DO_
}

void ReadRowsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v1.ReadRowsRequest)
  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v1.ReadRowsRequest.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table_name(), output);
  }

  // optional bytes row_key = 2;
  if (has_row_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->row_key(), output);
  }

  // optional .google.bigtable.v1.RowRange row_range = 3;
  if (has_row_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *target_.row_range_, output);
  }

  // optional .google.bigtable.v1.RowFilter filter = 5;
  if (this->has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->filter_, output);
  }

  // optional bool allow_row_interleaving = 6;
  if (this->allow_row_interleaving() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->allow_row_interleaving(), output);
  }

  // optional int64 num_rows_limit = 7;
  if (this->num_rows_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->num_rows_limit(), output);
  }

  // optional .google.bigtable.v1.RowSet row_set = 8;
  if (has_row_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *target_.row_set_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v1.ReadRowsRequest)
}

::google::protobuf::uint8* ReadRowsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v1.ReadRowsRequest)
  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v1.ReadRowsRequest.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // optional bytes row_key = 2;
  if (has_row_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->row_key(), target);
  }

  // optional .google.bigtable.v1.RowRange row_range = 3;
  if (has_row_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *target_.row_range_, false, target);
  }

  // optional .google.bigtable.v1.RowFilter filter = 5;
  if (this->has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->filter_, false, target);
  }

  // optional bool allow_row_interleaving = 6;
  if (this->allow_row_interleaving() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->allow_row_interleaving(), target);
  }

  // optional int64 num_rows_limit = 7;
  if (this->num_rows_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->num_rows_limit(), target);
  }

  // optional .google.bigtable.v1.RowSet row_set = 8;
  if (has_row_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *target_.row_set_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v1.ReadRowsRequest)
  return target;
}

int ReadRowsRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v1.ReadRowsRequest)
  int total_size = 0;

  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  // optional .google.bigtable.v1.RowFilter filter = 5;
  if (this->has_filter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->filter_);
  }

  // optional bool allow_row_interleaving = 6;
  if (this->allow_row_interleaving() != 0) {
    total_size += 1 + 1;
  }

  // optional int64 num_rows_limit = 7;
  if (this->num_rows_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->num_rows_limit());
  }

  switch (target_case()) {
    // optional bytes row_key = 2;
    case kRowKey: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->row_key());
      break;
    }
    // optional .google.bigtable.v1.RowRange row_range = 3;
    case kRowRange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *target_.row_range_);
      break;
    }
    // optional .google.bigtable.v1.RowSet row_set = 8;
    case kRowSet: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *target_.row_set_);
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadRowsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v1.ReadRowsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReadRowsRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadRowsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v1.ReadRowsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v1.ReadRowsRequest)
    MergeFrom(*source);
  }
}

void ReadRowsRequest::MergeFrom(const ReadRowsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v1.ReadRowsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.target_case()) {
    case kRowKey: {
      set_row_key(from.row_key());
      break;
    }
    case kRowRange: {
      mutable_row_range()->::google::bigtable::v1::RowRange::MergeFrom(from.row_range());
      break;
    }
    case kRowSet: {
      mutable_row_set()->::google::bigtable::v1::RowSet::MergeFrom(from.row_set());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  if (from.has_filter()) {
    mutable_filter()->::google::bigtable::v1::RowFilter::MergeFrom(from.filter());
  }
  if (from.allow_row_interleaving() != 0) {
    set_allow_row_interleaving(from.allow_row_interleaving());
  }
  if (from.num_rows_limit() != 0) {
    set_num_rows_limit(from.num_rows_limit());
  }
}

void ReadRowsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v1.ReadRowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadRowsRequest::CopyFrom(const ReadRowsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v1.ReadRowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRowsRequest::IsInitialized() const {

  return true;
}

void ReadRowsRequest::Swap(ReadRowsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadRowsRequest::InternalSwap(ReadRowsRequest* other) {
  table_name_.Swap(&other->table_name_);
  std::swap(filter_, other->filter_);
  std::swap(allow_row_interleaving_, other->allow_row_interleaving_);
  std::swap(num_rows_limit_, other->num_rows_limit_);
  std::swap(target_, other->target_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadRowsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadRowsRequest_descriptor_;
  metadata.reflection = ReadRowsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadRowsRequest

// optional string table_name = 1;
void ReadRowsRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ReadRowsRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadRowsRequest.table_name)
  return table_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReadRowsRequest::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v1.ReadRowsRequest.table_name)
}
 void ReadRowsRequest::set_table_name(const char* value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v1.ReadRowsRequest.table_name)
}
 void ReadRowsRequest::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v1.ReadRowsRequest.table_name)
}
 ::std::string* ReadRowsRequest::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.ReadRowsRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReadRowsRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.ReadRowsRequest.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReadRowsRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.ReadRowsRequest.table_name)
}

// optional bytes row_key = 2;
bool ReadRowsRequest::has_row_key() const {
  return target_case() == kRowKey;
}
void ReadRowsRequest::set_has_row_key() {
  _oneof_case_[0] = kRowKey;
}
void ReadRowsRequest::clear_row_key() {
  if (has_row_key()) {
    target_.row_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_target();
  }
}
 const ::std::string& ReadRowsRequest::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadRowsRequest.row_key)
  if (has_row_key()) {
    return target_.row_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void ReadRowsRequest::set_row_key(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v1.ReadRowsRequest.row_key)
  if (!has_row_key()) {
    clear_target();
    set_has_row_key();
    target_.row_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v1.ReadRowsRequest.row_key)
}
 void ReadRowsRequest::set_row_key(const char* value) {
  if (!has_row_key()) {
    clear_target();
    set_has_row_key();
    target_.row_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v1.ReadRowsRequest.row_key)
}
 void ReadRowsRequest::set_row_key(const void* value, size_t size) {
  if (!has_row_key()) {
    clear_target();
    set_has_row_key();
    target_.row_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v1.ReadRowsRequest.row_key)
}
 ::std::string* ReadRowsRequest::mutable_row_key() {
  if (!has_row_key()) {
    clear_target();
    set_has_row_key();
    target_.row_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.ReadRowsRequest.row_key)
  return target_.row_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReadRowsRequest::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.ReadRowsRequest.row_key)
  if (has_row_key()) {
    clear_has_target();
    return target_.row_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void ReadRowsRequest::set_allocated_row_key(::std::string* row_key) {
  if (!has_row_key()) {
    target_.row_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_target();
  if (row_key != NULL) {
    set_has_row_key();
    target_.row_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        row_key);
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.ReadRowsRequest.row_key)
}

// optional .google.bigtable.v1.RowRange row_range = 3;
bool ReadRowsRequest::has_row_range() const {
  return target_case() == kRowRange;
}
void ReadRowsRequest::set_has_row_range() {
  _oneof_case_[0] = kRowRange;
}
void ReadRowsRequest::clear_row_range() {
  if (has_row_range()) {
    delete target_.row_range_;
    clear_has_target();
  }
}
 const ::google::bigtable::v1::RowRange& ReadRowsRequest::row_range() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadRowsRequest.row_range)
  return has_row_range()
      ? *target_.row_range_
      : ::google::bigtable::v1::RowRange::default_instance();
}
::google::bigtable::v1::RowRange* ReadRowsRequest::mutable_row_range() {
  if (!has_row_range()) {
    clear_target();
    set_has_row_range();
    target_.row_range_ = new ::google::bigtable::v1::RowRange;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.ReadRowsRequest.row_range)
  return target_.row_range_;
}
::google::bigtable::v1::RowRange* ReadRowsRequest::release_row_range() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.ReadRowsRequest.row_range)
  if (has_row_range()) {
    clear_has_target();
    ::google::bigtable::v1::RowRange* temp = target_.row_range_;
    target_.row_range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ReadRowsRequest::set_allocated_row_range(::google::bigtable::v1::RowRange* row_range) {
  clear_target();
  if (row_range) {
    set_has_row_range();
    target_.row_range_ = row_range;
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.ReadRowsRequest.row_range)
}

// optional .google.bigtable.v1.RowSet row_set = 8;
bool ReadRowsRequest::has_row_set() const {
  return target_case() == kRowSet;
}
void ReadRowsRequest::set_has_row_set() {
  _oneof_case_[0] = kRowSet;
}
void ReadRowsRequest::clear_row_set() {
  if (has_row_set()) {
    delete target_.row_set_;
    clear_has_target();
  }
}
 const ::google::bigtable::v1::RowSet& ReadRowsRequest::row_set() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadRowsRequest.row_set)
  return has_row_set()
      ? *target_.row_set_
      : ::google::bigtable::v1::RowSet::default_instance();
}
::google::bigtable::v1::RowSet* ReadRowsRequest::mutable_row_set() {
  if (!has_row_set()) {
    clear_target();
    set_has_row_set();
    target_.row_set_ = new ::google::bigtable::v1::RowSet;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.ReadRowsRequest.row_set)
  return target_.row_set_;
}
::google::bigtable::v1::RowSet* ReadRowsRequest::release_row_set() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.ReadRowsRequest.row_set)
  if (has_row_set()) {
    clear_has_target();
    ::google::bigtable::v1::RowSet* temp = target_.row_set_;
    target_.row_set_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ReadRowsRequest::set_allocated_row_set(::google::bigtable::v1::RowSet* row_set) {
  clear_target();
  if (row_set) {
    set_has_row_set();
    target_.row_set_ = row_set;
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.ReadRowsRequest.row_set)
}

// optional .google.bigtable.v1.RowFilter filter = 5;
bool ReadRowsRequest::has_filter() const {
  return !_is_default_instance_ && filter_ != NULL;
}
void ReadRowsRequest::clear_filter() {
  if (GetArenaNoVirtual() == NULL && filter_ != NULL) delete filter_;
  filter_ = NULL;
}
const ::google::bigtable::v1::RowFilter& ReadRowsRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadRowsRequest.filter)
  return filter_ != NULL ? *filter_ : *default_instance_->filter_;
}
::google::bigtable::v1::RowFilter* ReadRowsRequest::mutable_filter() {
  
  if (filter_ == NULL) {
    filter_ = new ::google::bigtable::v1::RowFilter;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.ReadRowsRequest.filter)
  return filter_;
}
::google::bigtable::v1::RowFilter* ReadRowsRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.ReadRowsRequest.filter)
  
  ::google::bigtable::v1::RowFilter* temp = filter_;
  filter_ = NULL;
  return temp;
}
void ReadRowsRequest::set_allocated_filter(::google::bigtable::v1::RowFilter* filter) {
  delete filter_;
  filter_ = filter;
  if (filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.ReadRowsRequest.filter)
}

// optional bool allow_row_interleaving = 6;
void ReadRowsRequest::clear_allow_row_interleaving() {
  allow_row_interleaving_ = false;
}
 bool ReadRowsRequest::allow_row_interleaving() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadRowsRequest.allow_row_interleaving)
  return allow_row_interleaving_;
}
 void ReadRowsRequest::set_allow_row_interleaving(bool value) {
  
  allow_row_interleaving_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v1.ReadRowsRequest.allow_row_interleaving)
}

// optional int64 num_rows_limit = 7;
void ReadRowsRequest::clear_num_rows_limit() {
  num_rows_limit_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ReadRowsRequest::num_rows_limit() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadRowsRequest.num_rows_limit)
  return num_rows_limit_;
}
 void ReadRowsRequest::set_num_rows_limit(::google::protobuf::int64 value) {
  
  num_rows_limit_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v1.ReadRowsRequest.num_rows_limit)
}

bool ReadRowsRequest::has_target() const {
  return target_case() != TARGET_NOT_SET;
}
void ReadRowsRequest::clear_has_target() {
  _oneof_case_[0] = TARGET_NOT_SET;
}
ReadRowsRequest::TargetCase ReadRowsRequest::target_case() const {
  return ReadRowsRequest::TargetCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadRowsResponse_Chunk::kRowContentsFieldNumber;
const int ReadRowsResponse_Chunk::kResetRowFieldNumber;
const int ReadRowsResponse_Chunk::kCommitRowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadRowsResponse_Chunk::ReadRowsResponse_Chunk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v1.ReadRowsResponse.Chunk)
}

void ReadRowsResponse_Chunk::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  ReadRowsResponse_Chunk_default_oneof_instance_->row_contents_ = const_cast< ::google::bigtable::v1::Family*>(&::google::bigtable::v1::Family::default_instance());
  ReadRowsResponse_Chunk_default_oneof_instance_->reset_row_ = false;
  ReadRowsResponse_Chunk_default_oneof_instance_->commit_row_ = false;
}

ReadRowsResponse_Chunk::ReadRowsResponse_Chunk(const ReadRowsResponse_Chunk& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v1.ReadRowsResponse.Chunk)
}

void ReadRowsResponse_Chunk::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_chunk();
}

ReadRowsResponse_Chunk::~ReadRowsResponse_Chunk() {
  // @@protoc_insertion_point(destructor:google.bigtable.v1.ReadRowsResponse.Chunk)
  SharedDtor();
}

void ReadRowsResponse_Chunk::SharedDtor() {
  if (has_chunk()) {
    clear_chunk();
  }
  if (this != default_instance_) {
  }
}

void ReadRowsResponse_Chunk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadRowsResponse_Chunk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadRowsResponse_Chunk_descriptor_;
}

const ReadRowsResponse_Chunk& ReadRowsResponse_Chunk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto();
  return *default_instance_;
}

ReadRowsResponse_Chunk* ReadRowsResponse_Chunk::default_instance_ = NULL;

ReadRowsResponse_Chunk* ReadRowsResponse_Chunk::New(::google::protobuf::Arena* arena) const {
  ReadRowsResponse_Chunk* n = new ReadRowsResponse_Chunk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadRowsResponse_Chunk::clear_chunk() {
// @@protoc_insertion_point(one_of_clear_start:google.bigtable.v1.ReadRowsResponse.Chunk)
  switch(chunk_case()) {
    case kRowContents: {
      delete chunk_.row_contents_;
      break;
    }
    case kResetRow: {
      // No need to clear
      break;
    }
    case kCommitRow: {
      // No need to clear
      break;
    }
    case CHUNK_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CHUNK_NOT_SET;
}


void ReadRowsResponse_Chunk::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v1.ReadRowsResponse.Chunk)
  clear_chunk();
}

bool ReadRowsResponse_Chunk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v1.ReadRowsResponse.Chunk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.bigtable.v1.Family row_contents = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_row_contents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reset_row;
        break;
      }

      // optional bool reset_row = 2;
      case 2: {
        if (tag == 16) {
         parse_reset_row:
          clear_chunk();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chunk_.reset_row_)));
          set_has_reset_row();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_commit_row;
        break;
      }

      // optional bool commit_row = 3;
      case 3: {
        if (tag == 24) {
         parse_commit_row:
          clear_chunk();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chunk_.commit_row_)));
          set_has_commit_row();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v1.ReadRowsResponse.Chunk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v1.ReadRowsResponse.Chunk)
  return false;
#undef DO_
}

void ReadRowsResponse_Chunk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v1.ReadRowsResponse.Chunk)
  // optional .google.bigtable.v1.Family row_contents = 1;
  if (has_row_contents()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *chunk_.row_contents_, output);
  }

  // optional bool reset_row = 2;
  if (has_reset_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->reset_row(), output);
  }

  // optional bool commit_row = 3;
  if (has_commit_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->commit_row(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v1.ReadRowsResponse.Chunk)
}

::google::protobuf::uint8* ReadRowsResponse_Chunk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v1.ReadRowsResponse.Chunk)
  // optional .google.bigtable.v1.Family row_contents = 1;
  if (has_row_contents()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *chunk_.row_contents_, false, target);
  }

  // optional bool reset_row = 2;
  if (has_reset_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->reset_row(), target);
  }

  // optional bool commit_row = 3;
  if (has_commit_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->commit_row(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v1.ReadRowsResponse.Chunk)
  return target;
}

int ReadRowsResponse_Chunk::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v1.ReadRowsResponse.Chunk)
  int total_size = 0;

  switch (chunk_case()) {
    // optional .google.bigtable.v1.Family row_contents = 1;
    case kRowContents: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *chunk_.row_contents_);
      break;
    }
    // optional bool reset_row = 2;
    case kResetRow: {
      total_size += 1 + 1;
      break;
    }
    // optional bool commit_row = 3;
    case kCommitRow: {
      total_size += 1 + 1;
      break;
    }
    case CHUNK_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadRowsResponse_Chunk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v1.ReadRowsResponse.Chunk)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReadRowsResponse_Chunk* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadRowsResponse_Chunk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v1.ReadRowsResponse.Chunk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v1.ReadRowsResponse.Chunk)
    MergeFrom(*source);
  }
}

void ReadRowsResponse_Chunk::MergeFrom(const ReadRowsResponse_Chunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v1.ReadRowsResponse.Chunk)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.chunk_case()) {
    case kRowContents: {
      mutable_row_contents()->::google::bigtable::v1::Family::MergeFrom(from.row_contents());
      break;
    }
    case kResetRow: {
      set_reset_row(from.reset_row());
      break;
    }
    case kCommitRow: {
      set_commit_row(from.commit_row());
      break;
    }
    case CHUNK_NOT_SET: {
      break;
    }
  }
}

void ReadRowsResponse_Chunk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v1.ReadRowsResponse.Chunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadRowsResponse_Chunk::CopyFrom(const ReadRowsResponse_Chunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v1.ReadRowsResponse.Chunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRowsResponse_Chunk::IsInitialized() const {

  return true;
}

void ReadRowsResponse_Chunk::Swap(ReadRowsResponse_Chunk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadRowsResponse_Chunk::InternalSwap(ReadRowsResponse_Chunk* other) {
  std::swap(chunk_, other->chunk_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadRowsResponse_Chunk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadRowsResponse_Chunk_descriptor_;
  metadata.reflection = ReadRowsResponse_Chunk_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadRowsResponse::kRowKeyFieldNumber;
const int ReadRowsResponse::kChunksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadRowsResponse::ReadRowsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v1.ReadRowsResponse)
}

void ReadRowsResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ReadRowsResponse::ReadRowsResponse(const ReadRowsResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v1.ReadRowsResponse)
}

void ReadRowsResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  row_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ReadRowsResponse::~ReadRowsResponse() {
  // @@protoc_insertion_point(destructor:google.bigtable.v1.ReadRowsResponse)
  SharedDtor();
}

void ReadRowsResponse::SharedDtor() {
  row_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ReadRowsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadRowsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadRowsResponse_descriptor_;
}

const ReadRowsResponse& ReadRowsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto();
  return *default_instance_;
}

ReadRowsResponse* ReadRowsResponse::default_instance_ = NULL;

ReadRowsResponse* ReadRowsResponse::New(::google::protobuf::Arena* arena) const {
  ReadRowsResponse* n = new ReadRowsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadRowsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v1.ReadRowsResponse)
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chunks_.Clear();
}

bool ReadRowsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v1.ReadRowsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes row_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_row_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_chunks;
        break;
      }

      // repeated .google.bigtable.v1.ReadRowsResponse.Chunk chunks = 2;
      case 2: {
        if (tag == 18) {
         parse_chunks:
          DO_(input->IncrementRecursionDepth());
         parse_loop_chunks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_chunks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_chunks;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v1.ReadRowsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v1.ReadRowsResponse)
  return false;
#undef DO_
}

void ReadRowsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v1.ReadRowsResponse)
  // optional bytes row_key = 1;
  if (this->row_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->row_key(), output);
  }

  // repeated .google.bigtable.v1.ReadRowsResponse.Chunk chunks = 2;
  for (unsigned int i = 0, n = this->chunks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->chunks(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v1.ReadRowsResponse)
}

::google::protobuf::uint8* ReadRowsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v1.ReadRowsResponse)
  // optional bytes row_key = 1;
  if (this->row_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->row_key(), target);
  }

  // repeated .google.bigtable.v1.ReadRowsResponse.Chunk chunks = 2;
  for (unsigned int i = 0, n = this->chunks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->chunks(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v1.ReadRowsResponse)
  return target;
}

int ReadRowsResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v1.ReadRowsResponse)
  int total_size = 0;

  // optional bytes row_key = 1;
  if (this->row_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->row_key());
  }

  // repeated .google.bigtable.v1.ReadRowsResponse.Chunk chunks = 2;
  total_size += 1 * this->chunks_size();
  for (int i = 0; i < this->chunks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chunks(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadRowsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v1.ReadRowsResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReadRowsResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadRowsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v1.ReadRowsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v1.ReadRowsResponse)
    MergeFrom(*source);
  }
}

void ReadRowsResponse::MergeFrom(const ReadRowsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v1.ReadRowsResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  chunks_.MergeFrom(from.chunks_);
  if (from.row_key().size() > 0) {

    row_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.row_key_);
  }
}

void ReadRowsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v1.ReadRowsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadRowsResponse::CopyFrom(const ReadRowsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v1.ReadRowsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRowsResponse::IsInitialized() const {

  return true;
}

void ReadRowsResponse::Swap(ReadRowsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadRowsResponse::InternalSwap(ReadRowsResponse* other) {
  row_key_.Swap(&other->row_key_);
  chunks_.UnsafeArenaSwap(&other->chunks_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadRowsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadRowsResponse_descriptor_;
  metadata.reflection = ReadRowsResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadRowsResponse_Chunk

// optional .google.bigtable.v1.Family row_contents = 1;
bool ReadRowsResponse_Chunk::has_row_contents() const {
  return chunk_case() == kRowContents;
}
void ReadRowsResponse_Chunk::set_has_row_contents() {
  _oneof_case_[0] = kRowContents;
}
void ReadRowsResponse_Chunk::clear_row_contents() {
  if (has_row_contents()) {
    delete chunk_.row_contents_;
    clear_has_chunk();
  }
}
 const ::google::bigtable::v1::Family& ReadRowsResponse_Chunk::row_contents() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadRowsResponse.Chunk.row_contents)
  return has_row_contents()
      ? *chunk_.row_contents_
      : ::google::bigtable::v1::Family::default_instance();
}
::google::bigtable::v1::Family* ReadRowsResponse_Chunk::mutable_row_contents() {
  if (!has_row_contents()) {
    clear_chunk();
    set_has_row_contents();
    chunk_.row_contents_ = new ::google::bigtable::v1::Family;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.ReadRowsResponse.Chunk.row_contents)
  return chunk_.row_contents_;
}
::google::bigtable::v1::Family* ReadRowsResponse_Chunk::release_row_contents() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.ReadRowsResponse.Chunk.row_contents)
  if (has_row_contents()) {
    clear_has_chunk();
    ::google::bigtable::v1::Family* temp = chunk_.row_contents_;
    chunk_.row_contents_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ReadRowsResponse_Chunk::set_allocated_row_contents(::google::bigtable::v1::Family* row_contents) {
  clear_chunk();
  if (row_contents) {
    set_has_row_contents();
    chunk_.row_contents_ = row_contents;
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.ReadRowsResponse.Chunk.row_contents)
}

// optional bool reset_row = 2;
bool ReadRowsResponse_Chunk::has_reset_row() const {
  return chunk_case() == kResetRow;
}
void ReadRowsResponse_Chunk::set_has_reset_row() {
  _oneof_case_[0] = kResetRow;
}
void ReadRowsResponse_Chunk::clear_reset_row() {
  if (has_reset_row()) {
    chunk_.reset_row_ = false;
    clear_has_chunk();
  }
}
 bool ReadRowsResponse_Chunk::reset_row() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadRowsResponse.Chunk.reset_row)
  if (has_reset_row()) {
    return chunk_.reset_row_;
  }
  return false;
}
 void ReadRowsResponse_Chunk::set_reset_row(bool value) {
  if (!has_reset_row()) {
    clear_chunk();
    set_has_reset_row();
  }
  chunk_.reset_row_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v1.ReadRowsResponse.Chunk.reset_row)
}

// optional bool commit_row = 3;
bool ReadRowsResponse_Chunk::has_commit_row() const {
  return chunk_case() == kCommitRow;
}
void ReadRowsResponse_Chunk::set_has_commit_row() {
  _oneof_case_[0] = kCommitRow;
}
void ReadRowsResponse_Chunk::clear_commit_row() {
  if (has_commit_row()) {
    chunk_.commit_row_ = false;
    clear_has_chunk();
  }
}
 bool ReadRowsResponse_Chunk::commit_row() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadRowsResponse.Chunk.commit_row)
  if (has_commit_row()) {
    return chunk_.commit_row_;
  }
  return false;
}
 void ReadRowsResponse_Chunk::set_commit_row(bool value) {
  if (!has_commit_row()) {
    clear_chunk();
    set_has_commit_row();
  }
  chunk_.commit_row_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v1.ReadRowsResponse.Chunk.commit_row)
}

bool ReadRowsResponse_Chunk::has_chunk() const {
  return chunk_case() != CHUNK_NOT_SET;
}
void ReadRowsResponse_Chunk::clear_has_chunk() {
  _oneof_case_[0] = CHUNK_NOT_SET;
}
ReadRowsResponse_Chunk::ChunkCase ReadRowsResponse_Chunk::chunk_case() const {
  return ReadRowsResponse_Chunk::ChunkCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ReadRowsResponse

// optional bytes row_key = 1;
void ReadRowsResponse::clear_row_key() {
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ReadRowsResponse::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadRowsResponse.row_key)
  return row_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReadRowsResponse::set_row_key(const ::std::string& value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v1.ReadRowsResponse.row_key)
}
 void ReadRowsResponse::set_row_key(const char* value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v1.ReadRowsResponse.row_key)
}
 void ReadRowsResponse::set_row_key(const void* value, size_t size) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v1.ReadRowsResponse.row_key)
}
 ::std::string* ReadRowsResponse::mutable_row_key() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.ReadRowsResponse.row_key)
  return row_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReadRowsResponse::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.ReadRowsResponse.row_key)
  
  return row_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReadRowsResponse::set_allocated_row_key(::std::string* row_key) {
  if (row_key != NULL) {
    
  } else {
    
  }
  row_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row_key);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.ReadRowsResponse.row_key)
}

// repeated .google.bigtable.v1.ReadRowsResponse.Chunk chunks = 2;
int ReadRowsResponse::chunks_size() const {
  return chunks_.size();
}
void ReadRowsResponse::clear_chunks() {
  chunks_.Clear();
}
const ::google::bigtable::v1::ReadRowsResponse_Chunk& ReadRowsResponse::chunks(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadRowsResponse.chunks)
  return chunks_.Get(index);
}
::google::bigtable::v1::ReadRowsResponse_Chunk* ReadRowsResponse::mutable_chunks(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.ReadRowsResponse.chunks)
  return chunks_.Mutable(index);
}
::google::bigtable::v1::ReadRowsResponse_Chunk* ReadRowsResponse::add_chunks() {
  // @@protoc_insertion_point(field_add:google.bigtable.v1.ReadRowsResponse.chunks)
  return chunks_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::ReadRowsResponse_Chunk >*
ReadRowsResponse::mutable_chunks() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v1.ReadRowsResponse.chunks)
  return &chunks_;
}
const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::ReadRowsResponse_Chunk >&
ReadRowsResponse::chunks() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v1.ReadRowsResponse.chunks)
  return chunks_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SampleRowKeysRequest::kTableNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SampleRowKeysRequest::SampleRowKeysRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v1.SampleRowKeysRequest)
}

void SampleRowKeysRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SampleRowKeysRequest::SampleRowKeysRequest(const SampleRowKeysRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v1.SampleRowKeysRequest)
}

void SampleRowKeysRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SampleRowKeysRequest::~SampleRowKeysRequest() {
  // @@protoc_insertion_point(destructor:google.bigtable.v1.SampleRowKeysRequest)
  SharedDtor();
}

void SampleRowKeysRequest::SharedDtor() {
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SampleRowKeysRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SampleRowKeysRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SampleRowKeysRequest_descriptor_;
}

const SampleRowKeysRequest& SampleRowKeysRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto();
  return *default_instance_;
}

SampleRowKeysRequest* SampleRowKeysRequest::default_instance_ = NULL;

SampleRowKeysRequest* SampleRowKeysRequest::New(::google::protobuf::Arena* arena) const {
  SampleRowKeysRequest* n = new SampleRowKeysRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SampleRowKeysRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v1.SampleRowKeysRequest)
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SampleRowKeysRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v1.SampleRowKeysRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.v1.SampleRowKeysRequest.table_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v1.SampleRowKeysRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v1.SampleRowKeysRequest)
  return false;
#undef DO_
}

void SampleRowKeysRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v1.SampleRowKeysRequest)
  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v1.SampleRowKeysRequest.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v1.SampleRowKeysRequest)
}

::google::protobuf::uint8* SampleRowKeysRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v1.SampleRowKeysRequest)
  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v1.SampleRowKeysRequest.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v1.SampleRowKeysRequest)
  return target;
}

int SampleRowKeysRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v1.SampleRowKeysRequest)
  int total_size = 0;

  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SampleRowKeysRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v1.SampleRowKeysRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SampleRowKeysRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SampleRowKeysRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v1.SampleRowKeysRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v1.SampleRowKeysRequest)
    MergeFrom(*source);
  }
}

void SampleRowKeysRequest::MergeFrom(const SampleRowKeysRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v1.SampleRowKeysRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
}

void SampleRowKeysRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v1.SampleRowKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SampleRowKeysRequest::CopyFrom(const SampleRowKeysRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v1.SampleRowKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SampleRowKeysRequest::IsInitialized() const {

  return true;
}

void SampleRowKeysRequest::Swap(SampleRowKeysRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SampleRowKeysRequest::InternalSwap(SampleRowKeysRequest* other) {
  table_name_.Swap(&other->table_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SampleRowKeysRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SampleRowKeysRequest_descriptor_;
  metadata.reflection = SampleRowKeysRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SampleRowKeysRequest

// optional string table_name = 1;
void SampleRowKeysRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SampleRowKeysRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.SampleRowKeysRequest.table_name)
  return table_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SampleRowKeysRequest::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v1.SampleRowKeysRequest.table_name)
}
 void SampleRowKeysRequest::set_table_name(const char* value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v1.SampleRowKeysRequest.table_name)
}
 void SampleRowKeysRequest::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v1.SampleRowKeysRequest.table_name)
}
 ::std::string* SampleRowKeysRequest::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.SampleRowKeysRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SampleRowKeysRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.SampleRowKeysRequest.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SampleRowKeysRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.SampleRowKeysRequest.table_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SampleRowKeysResponse::kRowKeyFieldNumber;
const int SampleRowKeysResponse::kOffsetBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SampleRowKeysResponse::SampleRowKeysResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v1.SampleRowKeysResponse)
}

void SampleRowKeysResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SampleRowKeysResponse::SampleRowKeysResponse(const SampleRowKeysResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v1.SampleRowKeysResponse)
}

void SampleRowKeysResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  row_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offset_bytes_ = GOOGLE_LONGLONG(0);
}

SampleRowKeysResponse::~SampleRowKeysResponse() {
  // @@protoc_insertion_point(destructor:google.bigtable.v1.SampleRowKeysResponse)
  SharedDtor();
}

void SampleRowKeysResponse::SharedDtor() {
  row_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SampleRowKeysResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SampleRowKeysResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SampleRowKeysResponse_descriptor_;
}

const SampleRowKeysResponse& SampleRowKeysResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto();
  return *default_instance_;
}

SampleRowKeysResponse* SampleRowKeysResponse::default_instance_ = NULL;

SampleRowKeysResponse* SampleRowKeysResponse::New(::google::protobuf::Arena* arena) const {
  SampleRowKeysResponse* n = new SampleRowKeysResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SampleRowKeysResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v1.SampleRowKeysResponse)
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offset_bytes_ = GOOGLE_LONGLONG(0);
}

bool SampleRowKeysResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v1.SampleRowKeysResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes row_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_row_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_offset_bytes;
        break;
      }

      // optional int64 offset_bytes = 2;
      case 2: {
        if (tag == 16) {
         parse_offset_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_bytes_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v1.SampleRowKeysResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v1.SampleRowKeysResponse)
  return false;
#undef DO_
}

void SampleRowKeysResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v1.SampleRowKeysResponse)
  // optional bytes row_key = 1;
  if (this->row_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->row_key(), output);
  }

  // optional int64 offset_bytes = 2;
  if (this->offset_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->offset_bytes(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v1.SampleRowKeysResponse)
}

::google::protobuf::uint8* SampleRowKeysResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v1.SampleRowKeysResponse)
  // optional bytes row_key = 1;
  if (this->row_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->row_key(), target);
  }

  // optional int64 offset_bytes = 2;
  if (this->offset_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->offset_bytes(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v1.SampleRowKeysResponse)
  return target;
}

int SampleRowKeysResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v1.SampleRowKeysResponse)
  int total_size = 0;

  // optional bytes row_key = 1;
  if (this->row_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->row_key());
  }

  // optional int64 offset_bytes = 2;
  if (this->offset_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->offset_bytes());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SampleRowKeysResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v1.SampleRowKeysResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SampleRowKeysResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SampleRowKeysResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v1.SampleRowKeysResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v1.SampleRowKeysResponse)
    MergeFrom(*source);
  }
}

void SampleRowKeysResponse::MergeFrom(const SampleRowKeysResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v1.SampleRowKeysResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.row_key().size() > 0) {

    row_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.row_key_);
  }
  if (from.offset_bytes() != 0) {
    set_offset_bytes(from.offset_bytes());
  }
}

void SampleRowKeysResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v1.SampleRowKeysResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SampleRowKeysResponse::CopyFrom(const SampleRowKeysResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v1.SampleRowKeysResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SampleRowKeysResponse::IsInitialized() const {

  return true;
}

void SampleRowKeysResponse::Swap(SampleRowKeysResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SampleRowKeysResponse::InternalSwap(SampleRowKeysResponse* other) {
  row_key_.Swap(&other->row_key_);
  std::swap(offset_bytes_, other->offset_bytes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SampleRowKeysResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SampleRowKeysResponse_descriptor_;
  metadata.reflection = SampleRowKeysResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SampleRowKeysResponse

// optional bytes row_key = 1;
void SampleRowKeysResponse::clear_row_key() {
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SampleRowKeysResponse::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.SampleRowKeysResponse.row_key)
  return row_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SampleRowKeysResponse::set_row_key(const ::std::string& value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v1.SampleRowKeysResponse.row_key)
}
 void SampleRowKeysResponse::set_row_key(const char* value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v1.SampleRowKeysResponse.row_key)
}
 void SampleRowKeysResponse::set_row_key(const void* value, size_t size) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v1.SampleRowKeysResponse.row_key)
}
 ::std::string* SampleRowKeysResponse::mutable_row_key() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.SampleRowKeysResponse.row_key)
  return row_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SampleRowKeysResponse::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.SampleRowKeysResponse.row_key)
  
  return row_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SampleRowKeysResponse::set_allocated_row_key(::std::string* row_key) {
  if (row_key != NULL) {
    
  } else {
    
  }
  row_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row_key);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.SampleRowKeysResponse.row_key)
}

// optional int64 offset_bytes = 2;
void SampleRowKeysResponse::clear_offset_bytes() {
  offset_bytes_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 SampleRowKeysResponse::offset_bytes() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.SampleRowKeysResponse.offset_bytes)
  return offset_bytes_;
}
 void SampleRowKeysResponse::set_offset_bytes(::google::protobuf::int64 value) {
  
  offset_bytes_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v1.SampleRowKeysResponse.offset_bytes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MutateRowRequest::kTableNameFieldNumber;
const int MutateRowRequest::kRowKeyFieldNumber;
const int MutateRowRequest::kMutationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MutateRowRequest::MutateRowRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v1.MutateRowRequest)
}

void MutateRowRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MutateRowRequest::MutateRowRequest(const MutateRowRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v1.MutateRowRequest)
}

void MutateRowRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  row_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MutateRowRequest::~MutateRowRequest() {
  // @@protoc_insertion_point(destructor:google.bigtable.v1.MutateRowRequest)
  SharedDtor();
}

void MutateRowRequest::SharedDtor() {
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  row_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MutateRowRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MutateRowRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MutateRowRequest_descriptor_;
}

const MutateRowRequest& MutateRowRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto();
  return *default_instance_;
}

MutateRowRequest* MutateRowRequest::default_instance_ = NULL;

MutateRowRequest* MutateRowRequest::New(::google::protobuf::Arena* arena) const {
  MutateRowRequest* n = new MutateRowRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MutateRowRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v1.MutateRowRequest)
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mutations_.Clear();
}

bool MutateRowRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v1.MutateRowRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.v1.MutateRowRequest.table_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_row_key;
        break;
      }

      // optional bytes row_key = 2;
      case 2: {
        if (tag == 18) {
         parse_row_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_row_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mutations;
        break;
      }

      // repeated .google.bigtable.v1.Mutation mutations = 3;
      case 3: {
        if (tag == 26) {
         parse_mutations:
          DO_(input->IncrementRecursionDepth());
         parse_loop_mutations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mutations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_mutations;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v1.MutateRowRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v1.MutateRowRequest)
  return false;
#undef DO_
}

void MutateRowRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v1.MutateRowRequest)
  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v1.MutateRowRequest.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table_name(), output);
  }

  // optional bytes row_key = 2;
  if (this->row_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->row_key(), output);
  }

  // repeated .google.bigtable.v1.Mutation mutations = 3;
  for (unsigned int i = 0, n = this->mutations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mutations(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v1.MutateRowRequest)
}

::google::protobuf::uint8* MutateRowRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v1.MutateRowRequest)
  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v1.MutateRowRequest.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // optional bytes row_key = 2;
  if (this->row_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->row_key(), target);
  }

  // repeated .google.bigtable.v1.Mutation mutations = 3;
  for (unsigned int i = 0, n = this->mutations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->mutations(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v1.MutateRowRequest)
  return target;
}

int MutateRowRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v1.MutateRowRequest)
  int total_size = 0;

  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  // optional bytes row_key = 2;
  if (this->row_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->row_key());
  }

  // repeated .google.bigtable.v1.Mutation mutations = 3;
  total_size += 1 * this->mutations_size();
  for (int i = 0; i < this->mutations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mutations(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MutateRowRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v1.MutateRowRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MutateRowRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MutateRowRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v1.MutateRowRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v1.MutateRowRequest)
    MergeFrom(*source);
  }
}

void MutateRowRequest::MergeFrom(const MutateRowRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v1.MutateRowRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  mutations_.MergeFrom(from.mutations_);
  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  if (from.row_key().size() > 0) {

    row_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.row_key_);
  }
}

void MutateRowRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v1.MutateRowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutateRowRequest::CopyFrom(const MutateRowRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v1.MutateRowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MutateRowRequest::IsInitialized() const {

  return true;
}

void MutateRowRequest::Swap(MutateRowRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MutateRowRequest::InternalSwap(MutateRowRequest* other) {
  table_name_.Swap(&other->table_name_);
  row_key_.Swap(&other->row_key_);
  mutations_.UnsafeArenaSwap(&other->mutations_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MutateRowRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MutateRowRequest_descriptor_;
  metadata.reflection = MutateRowRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MutateRowRequest

// optional string table_name = 1;
void MutateRowRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MutateRowRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.MutateRowRequest.table_name)
  return table_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MutateRowRequest::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v1.MutateRowRequest.table_name)
}
 void MutateRowRequest::set_table_name(const char* value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v1.MutateRowRequest.table_name)
}
 void MutateRowRequest::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v1.MutateRowRequest.table_name)
}
 ::std::string* MutateRowRequest::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.MutateRowRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MutateRowRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.MutateRowRequest.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MutateRowRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.MutateRowRequest.table_name)
}

// optional bytes row_key = 2;
void MutateRowRequest::clear_row_key() {
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MutateRowRequest::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.MutateRowRequest.row_key)
  return row_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MutateRowRequest::set_row_key(const ::std::string& value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v1.MutateRowRequest.row_key)
}
 void MutateRowRequest::set_row_key(const char* value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v1.MutateRowRequest.row_key)
}
 void MutateRowRequest::set_row_key(const void* value, size_t size) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v1.MutateRowRequest.row_key)
}
 ::std::string* MutateRowRequest::mutable_row_key() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.MutateRowRequest.row_key)
  return row_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MutateRowRequest::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.MutateRowRequest.row_key)
  
  return row_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MutateRowRequest::set_allocated_row_key(::std::string* row_key) {
  if (row_key != NULL) {
    
  } else {
    
  }
  row_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row_key);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.MutateRowRequest.row_key)
}

// repeated .google.bigtable.v1.Mutation mutations = 3;
int MutateRowRequest::mutations_size() const {
  return mutations_.size();
}
void MutateRowRequest::clear_mutations() {
  mutations_.Clear();
}
const ::google::bigtable::v1::Mutation& MutateRowRequest::mutations(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.MutateRowRequest.mutations)
  return mutations_.Get(index);
}
::google::bigtable::v1::Mutation* MutateRowRequest::mutable_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.MutateRowRequest.mutations)
  return mutations_.Mutable(index);
}
::google::bigtable::v1::Mutation* MutateRowRequest::add_mutations() {
  // @@protoc_insertion_point(field_add:google.bigtable.v1.MutateRowRequest.mutations)
  return mutations_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::Mutation >*
MutateRowRequest::mutable_mutations() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v1.MutateRowRequest.mutations)
  return &mutations_;
}
const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::Mutation >&
MutateRowRequest::mutations() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v1.MutateRowRequest.mutations)
  return mutations_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MutateRowsRequest_Entry::kRowKeyFieldNumber;
const int MutateRowsRequest_Entry::kMutationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MutateRowsRequest_Entry::MutateRowsRequest_Entry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v1.MutateRowsRequest.Entry)
}

void MutateRowsRequest_Entry::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MutateRowsRequest_Entry::MutateRowsRequest_Entry(const MutateRowsRequest_Entry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v1.MutateRowsRequest.Entry)
}

void MutateRowsRequest_Entry::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  row_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MutateRowsRequest_Entry::~MutateRowsRequest_Entry() {
  // @@protoc_insertion_point(destructor:google.bigtable.v1.MutateRowsRequest.Entry)
  SharedDtor();
}

void MutateRowsRequest_Entry::SharedDtor() {
  row_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MutateRowsRequest_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MutateRowsRequest_Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MutateRowsRequest_Entry_descriptor_;
}

const MutateRowsRequest_Entry& MutateRowsRequest_Entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto();
  return *default_instance_;
}

MutateRowsRequest_Entry* MutateRowsRequest_Entry::default_instance_ = NULL;

MutateRowsRequest_Entry* MutateRowsRequest_Entry::New(::google::protobuf::Arena* arena) const {
  MutateRowsRequest_Entry* n = new MutateRowsRequest_Entry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MutateRowsRequest_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v1.MutateRowsRequest.Entry)
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mutations_.Clear();
}

bool MutateRowsRequest_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v1.MutateRowsRequest.Entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes row_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_row_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mutations;
        break;
      }

      // repeated .google.bigtable.v1.Mutation mutations = 2;
      case 2: {
        if (tag == 18) {
         parse_mutations:
          DO_(input->IncrementRecursionDepth());
         parse_loop_mutations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mutations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_mutations;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v1.MutateRowsRequest.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v1.MutateRowsRequest.Entry)
  return false;
#undef DO_
}

void MutateRowsRequest_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v1.MutateRowsRequest.Entry)
  // optional bytes row_key = 1;
  if (this->row_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->row_key(), output);
  }

  // repeated .google.bigtable.v1.Mutation mutations = 2;
  for (unsigned int i = 0, n = this->mutations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mutations(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v1.MutateRowsRequest.Entry)
}

::google::protobuf::uint8* MutateRowsRequest_Entry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v1.MutateRowsRequest.Entry)
  // optional bytes row_key = 1;
  if (this->row_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->row_key(), target);
  }

  // repeated .google.bigtable.v1.Mutation mutations = 2;
  for (unsigned int i = 0, n = this->mutations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->mutations(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v1.MutateRowsRequest.Entry)
  return target;
}

int MutateRowsRequest_Entry::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v1.MutateRowsRequest.Entry)
  int total_size = 0;

  // optional bytes row_key = 1;
  if (this->row_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->row_key());
  }

  // repeated .google.bigtable.v1.Mutation mutations = 2;
  total_size += 1 * this->mutations_size();
  for (int i = 0; i < this->mutations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mutations(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MutateRowsRequest_Entry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v1.MutateRowsRequest.Entry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MutateRowsRequest_Entry* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MutateRowsRequest_Entry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v1.MutateRowsRequest.Entry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v1.MutateRowsRequest.Entry)
    MergeFrom(*source);
  }
}

void MutateRowsRequest_Entry::MergeFrom(const MutateRowsRequest_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v1.MutateRowsRequest.Entry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  mutations_.MergeFrom(from.mutations_);
  if (from.row_key().size() > 0) {

    row_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.row_key_);
  }
}

void MutateRowsRequest_Entry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v1.MutateRowsRequest.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutateRowsRequest_Entry::CopyFrom(const MutateRowsRequest_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v1.MutateRowsRequest.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MutateRowsRequest_Entry::IsInitialized() const {

  return true;
}

void MutateRowsRequest_Entry::Swap(MutateRowsRequest_Entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MutateRowsRequest_Entry::InternalSwap(MutateRowsRequest_Entry* other) {
  row_key_.Swap(&other->row_key_);
  mutations_.UnsafeArenaSwap(&other->mutations_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MutateRowsRequest_Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MutateRowsRequest_Entry_descriptor_;
  metadata.reflection = MutateRowsRequest_Entry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MutateRowsRequest::kTableNameFieldNumber;
const int MutateRowsRequest::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MutateRowsRequest::MutateRowsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v1.MutateRowsRequest)
}

void MutateRowsRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MutateRowsRequest::MutateRowsRequest(const MutateRowsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v1.MutateRowsRequest)
}

void MutateRowsRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MutateRowsRequest::~MutateRowsRequest() {
  // @@protoc_insertion_point(destructor:google.bigtable.v1.MutateRowsRequest)
  SharedDtor();
}

void MutateRowsRequest::SharedDtor() {
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MutateRowsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MutateRowsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MutateRowsRequest_descriptor_;
}

const MutateRowsRequest& MutateRowsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto();
  return *default_instance_;
}

MutateRowsRequest* MutateRowsRequest::default_instance_ = NULL;

MutateRowsRequest* MutateRowsRequest::New(::google::protobuf::Arena* arena) const {
  MutateRowsRequest* n = new MutateRowsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MutateRowsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v1.MutateRowsRequest)
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entries_.Clear();
}

bool MutateRowsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v1.MutateRowsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.v1.MutateRowsRequest.table_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_entries;
        break;
      }

      // repeated .google.bigtable.v1.MutateRowsRequest.Entry entries = 2;
      case 2: {
        if (tag == 18) {
         parse_entries:
          DO_(input->IncrementRecursionDepth());
         parse_loop_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_entries;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v1.MutateRowsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v1.MutateRowsRequest)
  return false;
#undef DO_
}

void MutateRowsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v1.MutateRowsRequest)
  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v1.MutateRowsRequest.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table_name(), output);
  }

  // repeated .google.bigtable.v1.MutateRowsRequest.Entry entries = 2;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entries(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v1.MutateRowsRequest)
}

::google::protobuf::uint8* MutateRowsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v1.MutateRowsRequest)
  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v1.MutateRowsRequest.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // repeated .google.bigtable.v1.MutateRowsRequest.Entry entries = 2;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->entries(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v1.MutateRowsRequest)
  return target;
}

int MutateRowsRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v1.MutateRowsRequest)
  int total_size = 0;

  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  // repeated .google.bigtable.v1.MutateRowsRequest.Entry entries = 2;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MutateRowsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v1.MutateRowsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MutateRowsRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MutateRowsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v1.MutateRowsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v1.MutateRowsRequest)
    MergeFrom(*source);
  }
}

void MutateRowsRequest::MergeFrom(const MutateRowsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v1.MutateRowsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  entries_.MergeFrom(from.entries_);
  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
}

void MutateRowsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v1.MutateRowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutateRowsRequest::CopyFrom(const MutateRowsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v1.MutateRowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MutateRowsRequest::IsInitialized() const {

  return true;
}

void MutateRowsRequest::Swap(MutateRowsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MutateRowsRequest::InternalSwap(MutateRowsRequest* other) {
  table_name_.Swap(&other->table_name_);
  entries_.UnsafeArenaSwap(&other->entries_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MutateRowsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MutateRowsRequest_descriptor_;
  metadata.reflection = MutateRowsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MutateRowsRequest_Entry

// optional bytes row_key = 1;
void MutateRowsRequest_Entry::clear_row_key() {
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MutateRowsRequest_Entry::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.MutateRowsRequest.Entry.row_key)
  return row_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MutateRowsRequest_Entry::set_row_key(const ::std::string& value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v1.MutateRowsRequest.Entry.row_key)
}
 void MutateRowsRequest_Entry::set_row_key(const char* value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v1.MutateRowsRequest.Entry.row_key)
}
 void MutateRowsRequest_Entry::set_row_key(const void* value, size_t size) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v1.MutateRowsRequest.Entry.row_key)
}
 ::std::string* MutateRowsRequest_Entry::mutable_row_key() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.MutateRowsRequest.Entry.row_key)
  return row_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MutateRowsRequest_Entry::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.MutateRowsRequest.Entry.row_key)
  
  return row_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MutateRowsRequest_Entry::set_allocated_row_key(::std::string* row_key) {
  if (row_key != NULL) {
    
  } else {
    
  }
  row_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row_key);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.MutateRowsRequest.Entry.row_key)
}

// repeated .google.bigtable.v1.Mutation mutations = 2;
int MutateRowsRequest_Entry::mutations_size() const {
  return mutations_.size();
}
void MutateRowsRequest_Entry::clear_mutations() {
  mutations_.Clear();
}
const ::google::bigtable::v1::Mutation& MutateRowsRequest_Entry::mutations(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.MutateRowsRequest.Entry.mutations)
  return mutations_.Get(index);
}
::google::bigtable::v1::Mutation* MutateRowsRequest_Entry::mutable_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.MutateRowsRequest.Entry.mutations)
  return mutations_.Mutable(index);
}
::google::bigtable::v1::Mutation* MutateRowsRequest_Entry::add_mutations() {
  // @@protoc_insertion_point(field_add:google.bigtable.v1.MutateRowsRequest.Entry.mutations)
  return mutations_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::Mutation >*
MutateRowsRequest_Entry::mutable_mutations() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v1.MutateRowsRequest.Entry.mutations)
  return &mutations_;
}
const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::Mutation >&
MutateRowsRequest_Entry::mutations() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v1.MutateRowsRequest.Entry.mutations)
  return mutations_;
}

// -------------------------------------------------------------------

// MutateRowsRequest

// optional string table_name = 1;
void MutateRowsRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MutateRowsRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.MutateRowsRequest.table_name)
  return table_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MutateRowsRequest::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v1.MutateRowsRequest.table_name)
}
 void MutateRowsRequest::set_table_name(const char* value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v1.MutateRowsRequest.table_name)
}
 void MutateRowsRequest::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v1.MutateRowsRequest.table_name)
}
 ::std::string* MutateRowsRequest::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.MutateRowsRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MutateRowsRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.MutateRowsRequest.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MutateRowsRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.MutateRowsRequest.table_name)
}

// repeated .google.bigtable.v1.MutateRowsRequest.Entry entries = 2;
int MutateRowsRequest::entries_size() const {
  return entries_.size();
}
void MutateRowsRequest::clear_entries() {
  entries_.Clear();
}
const ::google::bigtable::v1::MutateRowsRequest_Entry& MutateRowsRequest::entries(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.MutateRowsRequest.entries)
  return entries_.Get(index);
}
::google::bigtable::v1::MutateRowsRequest_Entry* MutateRowsRequest::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.MutateRowsRequest.entries)
  return entries_.Mutable(index);
}
::google::bigtable::v1::MutateRowsRequest_Entry* MutateRowsRequest::add_entries() {
  // @@protoc_insertion_point(field_add:google.bigtable.v1.MutateRowsRequest.entries)
  return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::MutateRowsRequest_Entry >*
MutateRowsRequest::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v1.MutateRowsRequest.entries)
  return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::MutateRowsRequest_Entry >&
MutateRowsRequest::entries() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v1.MutateRowsRequest.entries)
  return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MutateRowsResponse::kStatusesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MutateRowsResponse::MutateRowsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v1.MutateRowsResponse)
}

void MutateRowsResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MutateRowsResponse::MutateRowsResponse(const MutateRowsResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v1.MutateRowsResponse)
}

void MutateRowsResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

MutateRowsResponse::~MutateRowsResponse() {
  // @@protoc_insertion_point(destructor:google.bigtable.v1.MutateRowsResponse)
  SharedDtor();
}

void MutateRowsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MutateRowsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MutateRowsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MutateRowsResponse_descriptor_;
}

const MutateRowsResponse& MutateRowsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto();
  return *default_instance_;
}

MutateRowsResponse* MutateRowsResponse::default_instance_ = NULL;

MutateRowsResponse* MutateRowsResponse::New(::google::protobuf::Arena* arena) const {
  MutateRowsResponse* n = new MutateRowsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MutateRowsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v1.MutateRowsResponse)
  statuses_.Clear();
}

bool MutateRowsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v1.MutateRowsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.rpc.Status statuses = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_statuses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_statuses()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_statuses;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v1.MutateRowsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v1.MutateRowsResponse)
  return false;
#undef DO_
}

void MutateRowsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v1.MutateRowsResponse)
  // repeated .google.rpc.Status statuses = 1;
  for (unsigned int i = 0, n = this->statuses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->statuses(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v1.MutateRowsResponse)
}

::google::protobuf::uint8* MutateRowsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v1.MutateRowsResponse)
  // repeated .google.rpc.Status statuses = 1;
  for (unsigned int i = 0, n = this->statuses_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->statuses(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v1.MutateRowsResponse)
  return target;
}

int MutateRowsResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v1.MutateRowsResponse)
  int total_size = 0;

  // repeated .google.rpc.Status statuses = 1;
  total_size += 1 * this->statuses_size();
  for (int i = 0; i < this->statuses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->statuses(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MutateRowsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v1.MutateRowsResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MutateRowsResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MutateRowsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v1.MutateRowsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v1.MutateRowsResponse)
    MergeFrom(*source);
  }
}

void MutateRowsResponse::MergeFrom(const MutateRowsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v1.MutateRowsResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  statuses_.MergeFrom(from.statuses_);
}

void MutateRowsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v1.MutateRowsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutateRowsResponse::CopyFrom(const MutateRowsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v1.MutateRowsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MutateRowsResponse::IsInitialized() const {

  return true;
}

void MutateRowsResponse::Swap(MutateRowsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MutateRowsResponse::InternalSwap(MutateRowsResponse* other) {
  statuses_.UnsafeArenaSwap(&other->statuses_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MutateRowsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MutateRowsResponse_descriptor_;
  metadata.reflection = MutateRowsResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MutateRowsResponse

// repeated .google.rpc.Status statuses = 1;
int MutateRowsResponse::statuses_size() const {
  return statuses_.size();
}
void MutateRowsResponse::clear_statuses() {
  statuses_.Clear();
}
const ::google::rpc::Status& MutateRowsResponse::statuses(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.MutateRowsResponse.statuses)
  return statuses_.Get(index);
}
::google::rpc::Status* MutateRowsResponse::mutable_statuses(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.MutateRowsResponse.statuses)
  return statuses_.Mutable(index);
}
::google::rpc::Status* MutateRowsResponse::add_statuses() {
  // @@protoc_insertion_point(field_add:google.bigtable.v1.MutateRowsResponse.statuses)
  return statuses_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::rpc::Status >*
MutateRowsResponse::mutable_statuses() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v1.MutateRowsResponse.statuses)
  return &statuses_;
}
const ::google::protobuf::RepeatedPtrField< ::google::rpc::Status >&
MutateRowsResponse::statuses() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v1.MutateRowsResponse.statuses)
  return statuses_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckAndMutateRowRequest::kTableNameFieldNumber;
const int CheckAndMutateRowRequest::kRowKeyFieldNumber;
const int CheckAndMutateRowRequest::kPredicateFilterFieldNumber;
const int CheckAndMutateRowRequest::kTrueMutationsFieldNumber;
const int CheckAndMutateRowRequest::kFalseMutationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckAndMutateRowRequest::CheckAndMutateRowRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v1.CheckAndMutateRowRequest)
}

void CheckAndMutateRowRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  predicate_filter_ = const_cast< ::google::bigtable::v1::RowFilter*>(&::google::bigtable::v1::RowFilter::default_instance());
}

CheckAndMutateRowRequest::CheckAndMutateRowRequest(const CheckAndMutateRowRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v1.CheckAndMutateRowRequest)
}

void CheckAndMutateRowRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  row_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  predicate_filter_ = NULL;
}

CheckAndMutateRowRequest::~CheckAndMutateRowRequest() {
  // @@protoc_insertion_point(destructor:google.bigtable.v1.CheckAndMutateRowRequest)
  SharedDtor();
}

void CheckAndMutateRowRequest::SharedDtor() {
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  row_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete predicate_filter_;
  }
}

void CheckAndMutateRowRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckAndMutateRowRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckAndMutateRowRequest_descriptor_;
}

const CheckAndMutateRowRequest& CheckAndMutateRowRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto();
  return *default_instance_;
}

CheckAndMutateRowRequest* CheckAndMutateRowRequest::default_instance_ = NULL;

CheckAndMutateRowRequest* CheckAndMutateRowRequest::New(::google::protobuf::Arena* arena) const {
  CheckAndMutateRowRequest* n = new CheckAndMutateRowRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckAndMutateRowRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v1.CheckAndMutateRowRequest)
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && predicate_filter_ != NULL) delete predicate_filter_;
  predicate_filter_ = NULL;
  true_mutations_.Clear();
  false_mutations_.Clear();
}

bool CheckAndMutateRowRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v1.CheckAndMutateRowRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.v1.CheckAndMutateRowRequest.table_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_row_key;
        break;
      }

      // optional bytes row_key = 2;
      case 2: {
        if (tag == 18) {
         parse_row_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_row_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_true_mutations;
        break;
      }

      // repeated .google.bigtable.v1.Mutation true_mutations = 4;
      case 4: {
        if (tag == 34) {
         parse_true_mutations:
          DO_(input->IncrementRecursionDepth());
         parse_loop_true_mutations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_true_mutations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_true_mutations;
        if (input->ExpectTag(42)) goto parse_loop_false_mutations;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .google.bigtable.v1.Mutation false_mutations = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_false_mutations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_false_mutations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_false_mutations;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(50)) goto parse_predicate_filter;
        break;
      }

      // optional .google.bigtable.v1.RowFilter predicate_filter = 6;
      case 6: {
        if (tag == 50) {
         parse_predicate_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_predicate_filter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v1.CheckAndMutateRowRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v1.CheckAndMutateRowRequest)
  return false;
#undef DO_
}

void CheckAndMutateRowRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v1.CheckAndMutateRowRequest)
  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v1.CheckAndMutateRowRequest.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table_name(), output);
  }

  // optional bytes row_key = 2;
  if (this->row_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->row_key(), output);
  }

  // repeated .google.bigtable.v1.Mutation true_mutations = 4;
  for (unsigned int i = 0, n = this->true_mutations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->true_mutations(i), output);
  }

  // repeated .google.bigtable.v1.Mutation false_mutations = 5;
  for (unsigned int i = 0, n = this->false_mutations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->false_mutations(i), output);
  }

  // optional .google.bigtable.v1.RowFilter predicate_filter = 6;
  if (this->has_predicate_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->predicate_filter_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v1.CheckAndMutateRowRequest)
}

::google::protobuf::uint8* CheckAndMutateRowRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v1.CheckAndMutateRowRequest)
  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v1.CheckAndMutateRowRequest.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // optional bytes row_key = 2;
  if (this->row_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->row_key(), target);
  }

  // repeated .google.bigtable.v1.Mutation true_mutations = 4;
  for (unsigned int i = 0, n = this->true_mutations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->true_mutations(i), false, target);
  }

  // repeated .google.bigtable.v1.Mutation false_mutations = 5;
  for (unsigned int i = 0, n = this->false_mutations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->false_mutations(i), false, target);
  }

  // optional .google.bigtable.v1.RowFilter predicate_filter = 6;
  if (this->has_predicate_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->predicate_filter_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v1.CheckAndMutateRowRequest)
  return target;
}

int CheckAndMutateRowRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v1.CheckAndMutateRowRequest)
  int total_size = 0;

  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  // optional bytes row_key = 2;
  if (this->row_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->row_key());
  }

  // optional .google.bigtable.v1.RowFilter predicate_filter = 6;
  if (this->has_predicate_filter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->predicate_filter_);
  }

  // repeated .google.bigtable.v1.Mutation true_mutations = 4;
  total_size += 1 * this->true_mutations_size();
  for (int i = 0; i < this->true_mutations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->true_mutations(i));
  }

  // repeated .google.bigtable.v1.Mutation false_mutations = 5;
  total_size += 1 * this->false_mutations_size();
  for (int i = 0; i < this->false_mutations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->false_mutations(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckAndMutateRowRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v1.CheckAndMutateRowRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CheckAndMutateRowRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckAndMutateRowRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v1.CheckAndMutateRowRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v1.CheckAndMutateRowRequest)
    MergeFrom(*source);
  }
}

void CheckAndMutateRowRequest::MergeFrom(const CheckAndMutateRowRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v1.CheckAndMutateRowRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  true_mutations_.MergeFrom(from.true_mutations_);
  false_mutations_.MergeFrom(from.false_mutations_);
  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  if (from.row_key().size() > 0) {

    row_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.row_key_);
  }
  if (from.has_predicate_filter()) {
    mutable_predicate_filter()->::google::bigtable::v1::RowFilter::MergeFrom(from.predicate_filter());
  }
}

void CheckAndMutateRowRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v1.CheckAndMutateRowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckAndMutateRowRequest::CopyFrom(const CheckAndMutateRowRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v1.CheckAndMutateRowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckAndMutateRowRequest::IsInitialized() const {

  return true;
}

void CheckAndMutateRowRequest::Swap(CheckAndMutateRowRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckAndMutateRowRequest::InternalSwap(CheckAndMutateRowRequest* other) {
  table_name_.Swap(&other->table_name_);
  row_key_.Swap(&other->row_key_);
  std::swap(predicate_filter_, other->predicate_filter_);
  true_mutations_.UnsafeArenaSwap(&other->true_mutations_);
  false_mutations_.UnsafeArenaSwap(&other->false_mutations_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckAndMutateRowRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckAndMutateRowRequest_descriptor_;
  metadata.reflection = CheckAndMutateRowRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckAndMutateRowRequest

// optional string table_name = 1;
void CheckAndMutateRowRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CheckAndMutateRowRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.CheckAndMutateRowRequest.table_name)
  return table_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CheckAndMutateRowRequest::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v1.CheckAndMutateRowRequest.table_name)
}
 void CheckAndMutateRowRequest::set_table_name(const char* value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v1.CheckAndMutateRowRequest.table_name)
}
 void CheckAndMutateRowRequest::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v1.CheckAndMutateRowRequest.table_name)
}
 ::std::string* CheckAndMutateRowRequest::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.CheckAndMutateRowRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CheckAndMutateRowRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.CheckAndMutateRowRequest.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CheckAndMutateRowRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.CheckAndMutateRowRequest.table_name)
}

// optional bytes row_key = 2;
void CheckAndMutateRowRequest::clear_row_key() {
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CheckAndMutateRowRequest::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.CheckAndMutateRowRequest.row_key)
  return row_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CheckAndMutateRowRequest::set_row_key(const ::std::string& value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v1.CheckAndMutateRowRequest.row_key)
}
 void CheckAndMutateRowRequest::set_row_key(const char* value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v1.CheckAndMutateRowRequest.row_key)
}
 void CheckAndMutateRowRequest::set_row_key(const void* value, size_t size) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v1.CheckAndMutateRowRequest.row_key)
}
 ::std::string* CheckAndMutateRowRequest::mutable_row_key() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.CheckAndMutateRowRequest.row_key)
  return row_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CheckAndMutateRowRequest::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.CheckAndMutateRowRequest.row_key)
  
  return row_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CheckAndMutateRowRequest::set_allocated_row_key(::std::string* row_key) {
  if (row_key != NULL) {
    
  } else {
    
  }
  row_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row_key);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.CheckAndMutateRowRequest.row_key)
}

// optional .google.bigtable.v1.RowFilter predicate_filter = 6;
bool CheckAndMutateRowRequest::has_predicate_filter() const {
  return !_is_default_instance_ && predicate_filter_ != NULL;
}
void CheckAndMutateRowRequest::clear_predicate_filter() {
  if (GetArenaNoVirtual() == NULL && predicate_filter_ != NULL) delete predicate_filter_;
  predicate_filter_ = NULL;
}
const ::google::bigtable::v1::RowFilter& CheckAndMutateRowRequest::predicate_filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.CheckAndMutateRowRequest.predicate_filter)
  return predicate_filter_ != NULL ? *predicate_filter_ : *default_instance_->predicate_filter_;
}
::google::bigtable::v1::RowFilter* CheckAndMutateRowRequest::mutable_predicate_filter() {
  
  if (predicate_filter_ == NULL) {
    predicate_filter_ = new ::google::bigtable::v1::RowFilter;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.CheckAndMutateRowRequest.predicate_filter)
  return predicate_filter_;
}
::google::bigtable::v1::RowFilter* CheckAndMutateRowRequest::release_predicate_filter() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.CheckAndMutateRowRequest.predicate_filter)
  
  ::google::bigtable::v1::RowFilter* temp = predicate_filter_;
  predicate_filter_ = NULL;
  return temp;
}
void CheckAndMutateRowRequest::set_allocated_predicate_filter(::google::bigtable::v1::RowFilter* predicate_filter) {
  delete predicate_filter_;
  predicate_filter_ = predicate_filter;
  if (predicate_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.CheckAndMutateRowRequest.predicate_filter)
}

// repeated .google.bigtable.v1.Mutation true_mutations = 4;
int CheckAndMutateRowRequest::true_mutations_size() const {
  return true_mutations_.size();
}
void CheckAndMutateRowRequest::clear_true_mutations() {
  true_mutations_.Clear();
}
const ::google::bigtable::v1::Mutation& CheckAndMutateRowRequest::true_mutations(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.CheckAndMutateRowRequest.true_mutations)
  return true_mutations_.Get(index);
}
::google::bigtable::v1::Mutation* CheckAndMutateRowRequest::mutable_true_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.CheckAndMutateRowRequest.true_mutations)
  return true_mutations_.Mutable(index);
}
::google::bigtable::v1::Mutation* CheckAndMutateRowRequest::add_true_mutations() {
  // @@protoc_insertion_point(field_add:google.bigtable.v1.CheckAndMutateRowRequest.true_mutations)
  return true_mutations_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::Mutation >*
CheckAndMutateRowRequest::mutable_true_mutations() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v1.CheckAndMutateRowRequest.true_mutations)
  return &true_mutations_;
}
const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::Mutation >&
CheckAndMutateRowRequest::true_mutations() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v1.CheckAndMutateRowRequest.true_mutations)
  return true_mutations_;
}

// repeated .google.bigtable.v1.Mutation false_mutations = 5;
int CheckAndMutateRowRequest::false_mutations_size() const {
  return false_mutations_.size();
}
void CheckAndMutateRowRequest::clear_false_mutations() {
  false_mutations_.Clear();
}
const ::google::bigtable::v1::Mutation& CheckAndMutateRowRequest::false_mutations(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.CheckAndMutateRowRequest.false_mutations)
  return false_mutations_.Get(index);
}
::google::bigtable::v1::Mutation* CheckAndMutateRowRequest::mutable_false_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.CheckAndMutateRowRequest.false_mutations)
  return false_mutations_.Mutable(index);
}
::google::bigtable::v1::Mutation* CheckAndMutateRowRequest::add_false_mutations() {
  // @@protoc_insertion_point(field_add:google.bigtable.v1.CheckAndMutateRowRequest.false_mutations)
  return false_mutations_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::Mutation >*
CheckAndMutateRowRequest::mutable_false_mutations() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v1.CheckAndMutateRowRequest.false_mutations)
  return &false_mutations_;
}
const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::Mutation >&
CheckAndMutateRowRequest::false_mutations() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v1.CheckAndMutateRowRequest.false_mutations)
  return false_mutations_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckAndMutateRowResponse::kPredicateMatchedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckAndMutateRowResponse::CheckAndMutateRowResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v1.CheckAndMutateRowResponse)
}

void CheckAndMutateRowResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CheckAndMutateRowResponse::CheckAndMutateRowResponse(const CheckAndMutateRowResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v1.CheckAndMutateRowResponse)
}

void CheckAndMutateRowResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  predicate_matched_ = false;
}

CheckAndMutateRowResponse::~CheckAndMutateRowResponse() {
  // @@protoc_insertion_point(destructor:google.bigtable.v1.CheckAndMutateRowResponse)
  SharedDtor();
}

void CheckAndMutateRowResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CheckAndMutateRowResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckAndMutateRowResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckAndMutateRowResponse_descriptor_;
}

const CheckAndMutateRowResponse& CheckAndMutateRowResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto();
  return *default_instance_;
}

CheckAndMutateRowResponse* CheckAndMutateRowResponse::default_instance_ = NULL;

CheckAndMutateRowResponse* CheckAndMutateRowResponse::New(::google::protobuf::Arena* arena) const {
  CheckAndMutateRowResponse* n = new CheckAndMutateRowResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckAndMutateRowResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v1.CheckAndMutateRowResponse)
  predicate_matched_ = false;
}

bool CheckAndMutateRowResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v1.CheckAndMutateRowResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool predicate_matched = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &predicate_matched_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v1.CheckAndMutateRowResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v1.CheckAndMutateRowResponse)
  return false;
#undef DO_
}

void CheckAndMutateRowResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v1.CheckAndMutateRowResponse)
  // optional bool predicate_matched = 1;
  if (this->predicate_matched() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->predicate_matched(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v1.CheckAndMutateRowResponse)
}

::google::protobuf::uint8* CheckAndMutateRowResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v1.CheckAndMutateRowResponse)
  // optional bool predicate_matched = 1;
  if (this->predicate_matched() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->predicate_matched(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v1.CheckAndMutateRowResponse)
  return target;
}

int CheckAndMutateRowResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v1.CheckAndMutateRowResponse)
  int total_size = 0;

  // optional bool predicate_matched = 1;
  if (this->predicate_matched() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckAndMutateRowResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v1.CheckAndMutateRowResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CheckAndMutateRowResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckAndMutateRowResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v1.CheckAndMutateRowResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v1.CheckAndMutateRowResponse)
    MergeFrom(*source);
  }
}

void CheckAndMutateRowResponse::MergeFrom(const CheckAndMutateRowResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v1.CheckAndMutateRowResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.predicate_matched() != 0) {
    set_predicate_matched(from.predicate_matched());
  }
}

void CheckAndMutateRowResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v1.CheckAndMutateRowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckAndMutateRowResponse::CopyFrom(const CheckAndMutateRowResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v1.CheckAndMutateRowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckAndMutateRowResponse::IsInitialized() const {

  return true;
}

void CheckAndMutateRowResponse::Swap(CheckAndMutateRowResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckAndMutateRowResponse::InternalSwap(CheckAndMutateRowResponse* other) {
  std::swap(predicate_matched_, other->predicate_matched_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckAndMutateRowResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckAndMutateRowResponse_descriptor_;
  metadata.reflection = CheckAndMutateRowResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckAndMutateRowResponse

// optional bool predicate_matched = 1;
void CheckAndMutateRowResponse::clear_predicate_matched() {
  predicate_matched_ = false;
}
 bool CheckAndMutateRowResponse::predicate_matched() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.CheckAndMutateRowResponse.predicate_matched)
  return predicate_matched_;
}
 void CheckAndMutateRowResponse::set_predicate_matched(bool value) {
  
  predicate_matched_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v1.CheckAndMutateRowResponse.predicate_matched)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadModifyWriteRowRequest::kTableNameFieldNumber;
const int ReadModifyWriteRowRequest::kRowKeyFieldNumber;
const int ReadModifyWriteRowRequest::kRulesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadModifyWriteRowRequest::ReadModifyWriteRowRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v1.ReadModifyWriteRowRequest)
}

void ReadModifyWriteRowRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ReadModifyWriteRowRequest::ReadModifyWriteRowRequest(const ReadModifyWriteRowRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v1.ReadModifyWriteRowRequest)
}

void ReadModifyWriteRowRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  row_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ReadModifyWriteRowRequest::~ReadModifyWriteRowRequest() {
  // @@protoc_insertion_point(destructor:google.bigtable.v1.ReadModifyWriteRowRequest)
  SharedDtor();
}

void ReadModifyWriteRowRequest::SharedDtor() {
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  row_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ReadModifyWriteRowRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadModifyWriteRowRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadModifyWriteRowRequest_descriptor_;
}

const ReadModifyWriteRowRequest& ReadModifyWriteRowRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto();
  return *default_instance_;
}

ReadModifyWriteRowRequest* ReadModifyWriteRowRequest::default_instance_ = NULL;

ReadModifyWriteRowRequest* ReadModifyWriteRowRequest::New(::google::protobuf::Arena* arena) const {
  ReadModifyWriteRowRequest* n = new ReadModifyWriteRowRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadModifyWriteRowRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v1.ReadModifyWriteRowRequest)
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rules_.Clear();
}

bool ReadModifyWriteRowRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v1.ReadModifyWriteRowRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.v1.ReadModifyWriteRowRequest.table_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_row_key;
        break;
      }

      // optional bytes row_key = 2;
      case 2: {
        if (tag == 18) {
         parse_row_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_row_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rules;
        break;
      }

      // repeated .google.bigtable.v1.ReadModifyWriteRule rules = 3;
      case 3: {
        if (tag == 26) {
         parse_rules:
          DO_(input->IncrementRecursionDepth());
         parse_loop_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_rules()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_rules;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v1.ReadModifyWriteRowRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v1.ReadModifyWriteRowRequest)
  return false;
#undef DO_
}

void ReadModifyWriteRowRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v1.ReadModifyWriteRowRequest)
  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v1.ReadModifyWriteRowRequest.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table_name(), output);
  }

  // optional bytes row_key = 2;
  if (this->row_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->row_key(), output);
  }

  // repeated .google.bigtable.v1.ReadModifyWriteRule rules = 3;
  for (unsigned int i = 0, n = this->rules_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rules(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v1.ReadModifyWriteRowRequest)
}

::google::protobuf::uint8* ReadModifyWriteRowRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v1.ReadModifyWriteRowRequest)
  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v1.ReadModifyWriteRowRequest.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // optional bytes row_key = 2;
  if (this->row_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->row_key(), target);
  }

  // repeated .google.bigtable.v1.ReadModifyWriteRule rules = 3;
  for (unsigned int i = 0, n = this->rules_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->rules(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v1.ReadModifyWriteRowRequest)
  return target;
}

int ReadModifyWriteRowRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v1.ReadModifyWriteRowRequest)
  int total_size = 0;

  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  // optional bytes row_key = 2;
  if (this->row_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->row_key());
  }

  // repeated .google.bigtable.v1.ReadModifyWriteRule rules = 3;
  total_size += 1 * this->rules_size();
  for (int i = 0; i < this->rules_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rules(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadModifyWriteRowRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v1.ReadModifyWriteRowRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReadModifyWriteRowRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadModifyWriteRowRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v1.ReadModifyWriteRowRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v1.ReadModifyWriteRowRequest)
    MergeFrom(*source);
  }
}

void ReadModifyWriteRowRequest::MergeFrom(const ReadModifyWriteRowRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v1.ReadModifyWriteRowRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  rules_.MergeFrom(from.rules_);
  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  if (from.row_key().size() > 0) {

    row_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.row_key_);
  }
}

void ReadModifyWriteRowRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v1.ReadModifyWriteRowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadModifyWriteRowRequest::CopyFrom(const ReadModifyWriteRowRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v1.ReadModifyWriteRowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadModifyWriteRowRequest::IsInitialized() const {

  return true;
}

void ReadModifyWriteRowRequest::Swap(ReadModifyWriteRowRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadModifyWriteRowRequest::InternalSwap(ReadModifyWriteRowRequest* other) {
  table_name_.Swap(&other->table_name_);
  row_key_.Swap(&other->row_key_);
  rules_.UnsafeArenaSwap(&other->rules_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadModifyWriteRowRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadModifyWriteRowRequest_descriptor_;
  metadata.reflection = ReadModifyWriteRowRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadModifyWriteRowRequest

// optional string table_name = 1;
void ReadModifyWriteRowRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ReadModifyWriteRowRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadModifyWriteRowRequest.table_name)
  return table_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReadModifyWriteRowRequest::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v1.ReadModifyWriteRowRequest.table_name)
}
 void ReadModifyWriteRowRequest::set_table_name(const char* value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v1.ReadModifyWriteRowRequest.table_name)
}
 void ReadModifyWriteRowRequest::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v1.ReadModifyWriteRowRequest.table_name)
}
 ::std::string* ReadModifyWriteRowRequest::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.ReadModifyWriteRowRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReadModifyWriteRowRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.ReadModifyWriteRowRequest.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReadModifyWriteRowRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.ReadModifyWriteRowRequest.table_name)
}

// optional bytes row_key = 2;
void ReadModifyWriteRowRequest::clear_row_key() {
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ReadModifyWriteRowRequest::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadModifyWriteRowRequest.row_key)
  return row_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReadModifyWriteRowRequest::set_row_key(const ::std::string& value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v1.ReadModifyWriteRowRequest.row_key)
}
 void ReadModifyWriteRowRequest::set_row_key(const char* value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v1.ReadModifyWriteRowRequest.row_key)
}
 void ReadModifyWriteRowRequest::set_row_key(const void* value, size_t size) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v1.ReadModifyWriteRowRequest.row_key)
}
 ::std::string* ReadModifyWriteRowRequest::mutable_row_key() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.ReadModifyWriteRowRequest.row_key)
  return row_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReadModifyWriteRowRequest::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.ReadModifyWriteRowRequest.row_key)
  
  return row_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReadModifyWriteRowRequest::set_allocated_row_key(::std::string* row_key) {
  if (row_key != NULL) {
    
  } else {
    
  }
  row_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row_key);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.ReadModifyWriteRowRequest.row_key)
}

// repeated .google.bigtable.v1.ReadModifyWriteRule rules = 3;
int ReadModifyWriteRowRequest::rules_size() const {
  return rules_.size();
}
void ReadModifyWriteRowRequest::clear_rules() {
  rules_.Clear();
}
const ::google::bigtable::v1::ReadModifyWriteRule& ReadModifyWriteRowRequest::rules(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadModifyWriteRowRequest.rules)
  return rules_.Get(index);
}
::google::bigtable::v1::ReadModifyWriteRule* ReadModifyWriteRowRequest::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.ReadModifyWriteRowRequest.rules)
  return rules_.Mutable(index);
}
::google::bigtable::v1::ReadModifyWriteRule* ReadModifyWriteRowRequest::add_rules() {
  // @@protoc_insertion_point(field_add:google.bigtable.v1.ReadModifyWriteRowRequest.rules)
  return rules_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::ReadModifyWriteRule >*
ReadModifyWriteRowRequest::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v1.ReadModifyWriteRowRequest.rules)
  return &rules_;
}
const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::ReadModifyWriteRule >&
ReadModifyWriteRowRequest::rules() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v1.ReadModifyWriteRowRequest.rules)
  return rules_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace bigtable
}  // namespace google

// @@protoc_insertion_point(global_scope)
