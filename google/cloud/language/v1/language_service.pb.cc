// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/language/v1/language_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/cloud/language/v1/language_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace cloud {
namespace language {
namespace v1 {

namespace {

const ::google::protobuf::Descriptor* Document_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Document_reflection_ = NULL;
struct DocumentOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr gcs_content_uri_;
}* Document_default_oneof_instance_ = NULL;
const ::google::protobuf::EnumDescriptor* Document_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Sentence_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sentence_reflection_ = NULL;
const ::google::protobuf::Descriptor* Entity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Entity_reflection_ = NULL;
const ::google::protobuf::Descriptor* Entity_MetadataEntry_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Entity_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Token_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Token_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sentiment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sentiment_reflection_ = NULL;
const ::google::protobuf::Descriptor* PartOfSpeech_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PartOfSpeech_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PartOfSpeech_Tag_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PartOfSpeech_Aspect_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PartOfSpeech_Case_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PartOfSpeech_Form_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PartOfSpeech_Gender_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PartOfSpeech_Mood_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PartOfSpeech_Number_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PartOfSpeech_Person_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PartOfSpeech_Proper_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PartOfSpeech_Reciprocity_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PartOfSpeech_Tense_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PartOfSpeech_Voice_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DependencyEdge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DependencyEdge_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DependencyEdge_Label_descriptor_ = NULL;
const ::google::protobuf::Descriptor* EntityMention_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntityMention_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EntityMention_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TextSpan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TextSpan_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnalyzeSentimentRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnalyzeSentimentRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnalyzeSentimentResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnalyzeSentimentResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnalyzeEntitiesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnalyzeEntitiesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnalyzeEntitiesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnalyzeEntitiesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnalyzeSyntaxRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnalyzeSyntaxRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnalyzeSyntaxResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnalyzeSyntaxResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnnotateTextRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnnotateTextRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnnotateTextRequest_Features_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnnotateTextRequest_Features_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnnotateTextResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnnotateTextResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EncodingType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto() {
  protobuf_AddDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "google/cloud/language/v1/language_service.proto");
  GOOGLE_CHECK(file != NULL);
  Document_descriptor_ = file->message_type(0);
  static const int Document_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, type_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Document_default_oneof_instance_, content_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Document_default_oneof_instance_, gcs_content_uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, source_),
  };
  Document_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Document_descriptor_,
      Document::internal_default_instance(),
      Document_offsets_,
      -1,
      -1,
      -1,
      Document_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, _oneof_case_[0]),
      sizeof(Document),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, _internal_metadata_));
  Document_Type_descriptor_ = Document_descriptor_->enum_type(0);
  Sentence_descriptor_ = file->message_type(1);
  static const int Sentence_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sentence, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sentence, sentiment_),
  };
  Sentence_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Sentence_descriptor_,
      Sentence::internal_default_instance(),
      Sentence_offsets_,
      -1,
      -1,
      -1,
      sizeof(Sentence),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sentence, _internal_metadata_));
  Entity_descriptor_ = file->message_type(2);
  static const int Entity_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, salience_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, mentions_),
  };
  Entity_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Entity_descriptor_,
      Entity::internal_default_instance(),
      Entity_offsets_,
      -1,
      -1,
      -1,
      sizeof(Entity),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, _internal_metadata_));
  Entity_MetadataEntry_descriptor_ = Entity_descriptor_->nested_type(0);
  Entity_Type_descriptor_ = Entity_descriptor_->enum_type(0);
  Token_descriptor_ = file->message_type(3);
  static const int Token_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, part_of_speech_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, dependency_edge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, lemma_),
  };
  Token_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Token_descriptor_,
      Token::internal_default_instance(),
      Token_offsets_,
      -1,
      -1,
      -1,
      sizeof(Token),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, _internal_metadata_));
  Sentiment_descriptor_ = file->message_type(4);
  static const int Sentiment_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sentiment, magnitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sentiment, score_),
  };
  Sentiment_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Sentiment_descriptor_,
      Sentiment::internal_default_instance(),
      Sentiment_offsets_,
      -1,
      -1,
      -1,
      sizeof(Sentiment),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sentiment, _internal_metadata_));
  PartOfSpeech_descriptor_ = file->message_type(5);
  static const int PartOfSpeech_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartOfSpeech, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartOfSpeech, aspect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartOfSpeech, case__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartOfSpeech, form_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartOfSpeech, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartOfSpeech, mood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartOfSpeech, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartOfSpeech, person_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartOfSpeech, proper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartOfSpeech, reciprocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartOfSpeech, tense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartOfSpeech, voice_),
  };
  PartOfSpeech_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PartOfSpeech_descriptor_,
      PartOfSpeech::internal_default_instance(),
      PartOfSpeech_offsets_,
      -1,
      -1,
      -1,
      sizeof(PartOfSpeech),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartOfSpeech, _internal_metadata_));
  PartOfSpeech_Tag_descriptor_ = PartOfSpeech_descriptor_->enum_type(0);
  PartOfSpeech_Aspect_descriptor_ = PartOfSpeech_descriptor_->enum_type(1);
  PartOfSpeech_Case_descriptor_ = PartOfSpeech_descriptor_->enum_type(2);
  PartOfSpeech_Form_descriptor_ = PartOfSpeech_descriptor_->enum_type(3);
  PartOfSpeech_Gender_descriptor_ = PartOfSpeech_descriptor_->enum_type(4);
  PartOfSpeech_Mood_descriptor_ = PartOfSpeech_descriptor_->enum_type(5);
  PartOfSpeech_Number_descriptor_ = PartOfSpeech_descriptor_->enum_type(6);
  PartOfSpeech_Person_descriptor_ = PartOfSpeech_descriptor_->enum_type(7);
  PartOfSpeech_Proper_descriptor_ = PartOfSpeech_descriptor_->enum_type(8);
  PartOfSpeech_Reciprocity_descriptor_ = PartOfSpeech_descriptor_->enum_type(9);
  PartOfSpeech_Tense_descriptor_ = PartOfSpeech_descriptor_->enum_type(10);
  PartOfSpeech_Voice_descriptor_ = PartOfSpeech_descriptor_->enum_type(11);
  DependencyEdge_descriptor_ = file->message_type(6);
  static const int DependencyEdge_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DependencyEdge, head_token_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DependencyEdge, label_),
  };
  DependencyEdge_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DependencyEdge_descriptor_,
      DependencyEdge::internal_default_instance(),
      DependencyEdge_offsets_,
      -1,
      -1,
      -1,
      sizeof(DependencyEdge),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DependencyEdge, _internal_metadata_));
  DependencyEdge_Label_descriptor_ = DependencyEdge_descriptor_->enum_type(0);
  EntityMention_descriptor_ = file->message_type(7);
  static const int EntityMention_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityMention, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityMention, type_),
  };
  EntityMention_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EntityMention_descriptor_,
      EntityMention::internal_default_instance(),
      EntityMention_offsets_,
      -1,
      -1,
      -1,
      sizeof(EntityMention),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityMention, _internal_metadata_));
  EntityMention_Type_descriptor_ = EntityMention_descriptor_->enum_type(0);
  TextSpan_descriptor_ = file->message_type(8);
  static const int TextSpan_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextSpan, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextSpan, begin_offset_),
  };
  TextSpan_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TextSpan_descriptor_,
      TextSpan::internal_default_instance(),
      TextSpan_offsets_,
      -1,
      -1,
      -1,
      sizeof(TextSpan),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextSpan, _internal_metadata_));
  AnalyzeSentimentRequest_descriptor_ = file->message_type(9);
  static const int AnalyzeSentimentRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeSentimentRequest, document_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeSentimentRequest, encoding_type_),
  };
  AnalyzeSentimentRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AnalyzeSentimentRequest_descriptor_,
      AnalyzeSentimentRequest::internal_default_instance(),
      AnalyzeSentimentRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(AnalyzeSentimentRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeSentimentRequest, _internal_metadata_));
  AnalyzeSentimentResponse_descriptor_ = file->message_type(10);
  static const int AnalyzeSentimentResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeSentimentResponse, document_sentiment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeSentimentResponse, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeSentimentResponse, sentences_),
  };
  AnalyzeSentimentResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AnalyzeSentimentResponse_descriptor_,
      AnalyzeSentimentResponse::internal_default_instance(),
      AnalyzeSentimentResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(AnalyzeSentimentResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeSentimentResponse, _internal_metadata_));
  AnalyzeEntitiesRequest_descriptor_ = file->message_type(11);
  static const int AnalyzeEntitiesRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeEntitiesRequest, document_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeEntitiesRequest, encoding_type_),
  };
  AnalyzeEntitiesRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AnalyzeEntitiesRequest_descriptor_,
      AnalyzeEntitiesRequest::internal_default_instance(),
      AnalyzeEntitiesRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(AnalyzeEntitiesRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeEntitiesRequest, _internal_metadata_));
  AnalyzeEntitiesResponse_descriptor_ = file->message_type(12);
  static const int AnalyzeEntitiesResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeEntitiesResponse, entities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeEntitiesResponse, language_),
  };
  AnalyzeEntitiesResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AnalyzeEntitiesResponse_descriptor_,
      AnalyzeEntitiesResponse::internal_default_instance(),
      AnalyzeEntitiesResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(AnalyzeEntitiesResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeEntitiesResponse, _internal_metadata_));
  AnalyzeSyntaxRequest_descriptor_ = file->message_type(13);
  static const int AnalyzeSyntaxRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeSyntaxRequest, document_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeSyntaxRequest, encoding_type_),
  };
  AnalyzeSyntaxRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AnalyzeSyntaxRequest_descriptor_,
      AnalyzeSyntaxRequest::internal_default_instance(),
      AnalyzeSyntaxRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(AnalyzeSyntaxRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeSyntaxRequest, _internal_metadata_));
  AnalyzeSyntaxResponse_descriptor_ = file->message_type(14);
  static const int AnalyzeSyntaxResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeSyntaxResponse, sentences_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeSyntaxResponse, tokens_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeSyntaxResponse, language_),
  };
  AnalyzeSyntaxResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AnalyzeSyntaxResponse_descriptor_,
      AnalyzeSyntaxResponse::internal_default_instance(),
      AnalyzeSyntaxResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(AnalyzeSyntaxResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeSyntaxResponse, _internal_metadata_));
  AnnotateTextRequest_descriptor_ = file->message_type(15);
  static const int AnnotateTextRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotateTextRequest, document_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotateTextRequest, features_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotateTextRequest, encoding_type_),
  };
  AnnotateTextRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AnnotateTextRequest_descriptor_,
      AnnotateTextRequest::internal_default_instance(),
      AnnotateTextRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(AnnotateTextRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotateTextRequest, _internal_metadata_));
  AnnotateTextRequest_Features_descriptor_ = AnnotateTextRequest_descriptor_->nested_type(0);
  static const int AnnotateTextRequest_Features_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotateTextRequest_Features, extract_syntax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotateTextRequest_Features, extract_entities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotateTextRequest_Features, extract_document_sentiment_),
  };
  AnnotateTextRequest_Features_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AnnotateTextRequest_Features_descriptor_,
      AnnotateTextRequest_Features::internal_default_instance(),
      AnnotateTextRequest_Features_offsets_,
      -1,
      -1,
      -1,
      sizeof(AnnotateTextRequest_Features),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotateTextRequest_Features, _internal_metadata_));
  AnnotateTextResponse_descriptor_ = file->message_type(16);
  static const int AnnotateTextResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotateTextResponse, sentences_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotateTextResponse, tokens_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotateTextResponse, entities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotateTextResponse, document_sentiment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotateTextResponse, language_),
  };
  AnnotateTextResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AnnotateTextResponse_descriptor_,
      AnnotateTextResponse::internal_default_instance(),
      AnnotateTextResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(AnnotateTextResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotateTextResponse, _internal_metadata_));
  EncodingType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Document_descriptor_, Document::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Sentence_descriptor_, Sentence::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Entity_descriptor_, Entity::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Entity_MetadataEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                Entity_MetadataEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Token_descriptor_, Token::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Sentiment_descriptor_, Sentiment::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PartOfSpeech_descriptor_, PartOfSpeech::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DependencyEdge_descriptor_, DependencyEdge::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EntityMention_descriptor_, EntityMention::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TextSpan_descriptor_, TextSpan::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AnalyzeSentimentRequest_descriptor_, AnalyzeSentimentRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AnalyzeSentimentResponse_descriptor_, AnalyzeSentimentResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AnalyzeEntitiesRequest_descriptor_, AnalyzeEntitiesRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AnalyzeEntitiesResponse_descriptor_, AnalyzeEntitiesResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AnalyzeSyntaxRequest_descriptor_, AnalyzeSyntaxRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AnalyzeSyntaxResponse_descriptor_, AnalyzeSyntaxResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AnnotateTextRequest_descriptor_, AnnotateTextRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AnnotateTextRequest_Features_descriptor_, AnnotateTextRequest_Features::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AnnotateTextResponse_descriptor_, AnnotateTextResponse::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto() {
  Document_default_instance_.Shutdown();
  delete Document_default_oneof_instance_;
  delete Document_reflection_;
  Sentence_default_instance_.Shutdown();
  delete Sentence_reflection_;
  Entity_default_instance_.Shutdown();
  delete Entity_reflection_;
  Token_default_instance_.Shutdown();
  delete Token_reflection_;
  Sentiment_default_instance_.Shutdown();
  delete Sentiment_reflection_;
  PartOfSpeech_default_instance_.Shutdown();
  delete PartOfSpeech_reflection_;
  DependencyEdge_default_instance_.Shutdown();
  delete DependencyEdge_reflection_;
  EntityMention_default_instance_.Shutdown();
  delete EntityMention_reflection_;
  TextSpan_default_instance_.Shutdown();
  delete TextSpan_reflection_;
  AnalyzeSentimentRequest_default_instance_.Shutdown();
  delete AnalyzeSentimentRequest_reflection_;
  AnalyzeSentimentResponse_default_instance_.Shutdown();
  delete AnalyzeSentimentResponse_reflection_;
  AnalyzeEntitiesRequest_default_instance_.Shutdown();
  delete AnalyzeEntitiesRequest_reflection_;
  AnalyzeEntitiesResponse_default_instance_.Shutdown();
  delete AnalyzeEntitiesResponse_reflection_;
  AnalyzeSyntaxRequest_default_instance_.Shutdown();
  delete AnalyzeSyntaxRequest_reflection_;
  AnalyzeSyntaxResponse_default_instance_.Shutdown();
  delete AnalyzeSyntaxResponse_reflection_;
  AnnotateTextRequest_default_instance_.Shutdown();
  delete AnnotateTextRequest_reflection_;
  AnnotateTextRequest_Features_default_instance_.Shutdown();
  delete AnnotateTextRequest_Features_reflection_;
  AnnotateTextResponse_default_instance_.Shutdown();
  delete AnnotateTextResponse_reflection_;
}

void protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::api::protobuf_InitDefaults_google_2fapi_2fannotations_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  Document_default_instance_.DefaultConstruct();
  Document_default_oneof_instance_ = new DocumentOneofInstance();
  Sentence_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Entity_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Token_default_instance_.DefaultConstruct();
  Sentiment_default_instance_.DefaultConstruct();
  PartOfSpeech_default_instance_.DefaultConstruct();
  DependencyEdge_default_instance_.DefaultConstruct();
  EntityMention_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TextSpan_default_instance_.DefaultConstruct();
  AnalyzeSentimentRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  AnalyzeSentimentResponse_default_instance_.DefaultConstruct();
  AnalyzeEntitiesRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  AnalyzeEntitiesResponse_default_instance_.DefaultConstruct();
  AnalyzeSyntaxRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  AnalyzeSyntaxResponse_default_instance_.DefaultConstruct();
  AnnotateTextRequest_default_instance_.DefaultConstruct();
  AnnotateTextRequest_Features_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  AnnotateTextResponse_default_instance_.DefaultConstruct();
  Document_default_instance_.get_mutable()->InitAsDefaultInstance();
  Sentence_default_instance_.get_mutable()->InitAsDefaultInstance();
  Entity_default_instance_.get_mutable()->InitAsDefaultInstance();
  Token_default_instance_.get_mutable()->InitAsDefaultInstance();
  Sentiment_default_instance_.get_mutable()->InitAsDefaultInstance();
  PartOfSpeech_default_instance_.get_mutable()->InitAsDefaultInstance();
  DependencyEdge_default_instance_.get_mutable()->InitAsDefaultInstance();
  EntityMention_default_instance_.get_mutable()->InitAsDefaultInstance();
  TextSpan_default_instance_.get_mutable()->InitAsDefaultInstance();
  AnalyzeSentimentRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  AnalyzeSentimentResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  AnalyzeEntitiesRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  AnalyzeEntitiesResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  AnalyzeSyntaxRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  AnalyzeSyntaxResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  AnnotateTextRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  AnnotateTextRequest_Features_default_instance_.get_mutable()->InitAsDefaultInstance();
  AnnotateTextResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_once_);
void protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_once_,
                 &protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_impl);
}
void protobuf_AddDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n/google/cloud/language/v1/language_serv"
    "ice.proto\022\030google.cloud.language.v1\032\034goo"
    "gle/api/annotations.proto\"\303\001\n\010Document\0225"
    "\n\004type\030\001 \001(\0162\'.google.cloud.language.v1."
    "Document.Type\022\021\n\007content\030\002 \001(\tH\000\022\031\n\017gcs_"
    "content_uri\030\003 \001(\tH\000\022\020\n\010language\030\004 \001(\t\"6\n"
    "\004Type\022\024\n\020TYPE_UNSPECIFIED\020\000\022\016\n\nPLAIN_TEX"
    "T\020\001\022\010\n\004HTML\020\002B\010\n\006source\"t\n\010Sentence\0220\n\004t"
    "ext\030\001 \001(\0132\".google.cloud.language.v1.Tex"
    "tSpan\0226\n\tsentiment\030\002 \001(\0132#.google.cloud."
    "language.v1.Sentiment\"\206\003\n\006Entity\022\014\n\004name"
    "\030\001 \001(\t\0223\n\004type\030\002 \001(\0162%.google.cloud.lang"
    "uage.v1.Entity.Type\022@\n\010metadata\030\003 \003(\0132.."
    "google.cloud.language.v1.Entity.Metadata"
    "Entry\022\020\n\010salience\030\004 \001(\002\0229\n\010mentions\030\005 \003("
    "\0132\'.google.cloud.language.v1.EntityMenti"
    "on\032/\n\rMetadataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005valu"
    "e\030\002 \001(\t:\0028\001\"y\n\004Type\022\013\n\007UNKNOWN\020\000\022\n\n\006PERS"
    "ON\020\001\022\014\n\010LOCATION\020\002\022\020\n\014ORGANIZATION\020\003\022\t\n\005"
    "EVENT\020\004\022\017\n\013WORK_OF_ART\020\005\022\021\n\rCONSUMER_GOO"
    "D\020\006\022\t\n\005OTHER\020\007\"\313\001\n\005Token\0220\n\004text\030\001 \001(\0132\""
    ".google.cloud.language.v1.TextSpan\022>\n\016pa"
    "rt_of_speech\030\002 \001(\0132&.google.cloud.langua"
    "ge.v1.PartOfSpeech\022A\n\017dependency_edge\030\003 "
    "\001(\0132(.google.cloud.language.v1.Dependenc"
    "yEdge\022\r\n\005lemma\030\004 \001(\t\"-\n\tSentiment\022\021\n\tmag"
    "nitude\030\002 \001(\002\022\r\n\005score\030\003 \001(\002\"\243\020\n\014PartOfSp"
    "eech\0227\n\003tag\030\001 \001(\0162*.google.cloud.languag"
    "e.v1.PartOfSpeech.Tag\022=\n\006aspect\030\002 \001(\0162-."
    "google.cloud.language.v1.PartOfSpeech.As"
    "pect\0229\n\004case\030\003 \001(\0162+.google.cloud.langua"
    "ge.v1.PartOfSpeech.Case\0229\n\004form\030\004 \001(\0162+."
    "google.cloud.language.v1.PartOfSpeech.Fo"
    "rm\022=\n\006gender\030\005 \001(\0162-.google.cloud.langua"
    "ge.v1.PartOfSpeech.Gender\0229\n\004mood\030\006 \001(\0162"
    "+.google.cloud.language.v1.PartOfSpeech."
    "Mood\022=\n\006number\030\007 \001(\0162-.google.cloud.lang"
    "uage.v1.PartOfSpeech.Number\022=\n\006person\030\010 "
    "\001(\0162-.google.cloud.language.v1.PartOfSpe"
    "ech.Person\022=\n\006proper\030\t \001(\0162-.google.clou"
    "d.language.v1.PartOfSpeech.Proper\022G\n\013rec"
    "iprocity\030\n \001(\01622.google.cloud.language.v"
    "1.PartOfSpeech.Reciprocity\022;\n\005tense\030\013 \001("
    "\0162,.google.cloud.language.v1.PartOfSpeec"
    "h.Tense\022;\n\005voice\030\014 \001(\0162,.google.cloud.la"
    "nguage.v1.PartOfSpeech.Voice\"\215\001\n\003Tag\022\013\n\007"
    "UNKNOWN\020\000\022\007\n\003ADJ\020\001\022\007\n\003ADP\020\002\022\007\n\003ADV\020\003\022\010\n\004"
    "CONJ\020\004\022\007\n\003DET\020\005\022\010\n\004NOUN\020\006\022\007\n\003NUM\020\007\022\010\n\004PR"
    "ON\020\010\022\007\n\003PRT\020\t\022\t\n\005PUNCT\020\n\022\010\n\004VERB\020\013\022\005\n\001X\020"
    "\014\022\t\n\005AFFIX\020\r\"O\n\006Aspect\022\022\n\016ASPECT_UNKNOWN"
    "\020\000\022\016\n\nPERFECTIVE\020\001\022\020\n\014IMPERFECTIVE\020\002\022\017\n\013"
    "PROGRESSIVE\020\003\"\370\001\n\004Case\022\020\n\014CASE_UNKNOWN\020\000"
    "\022\016\n\nACCUSATIVE\020\001\022\r\n\tADVERBIAL\020\002\022\021\n\rCOMPL"
    "EMENTIVE\020\003\022\n\n\006DATIVE\020\004\022\014\n\010GENITIVE\020\005\022\020\n\014"
    "INSTRUMENTAL\020\006\022\014\n\010LOCATIVE\020\007\022\016\n\nNOMINATI"
    "VE\020\010\022\013\n\007OBLIQUE\020\t\022\r\n\tPARTITIVE\020\n\022\021\n\rPREP"
    "OSITIONAL\020\013\022\022\n\016REFLEXIVE_CASE\020\014\022\021\n\rRELAT"
    "IVE_CASE\020\r\022\014\n\010VOCATIVE\020\016\"\257\001\n\004Form\022\020\n\014FOR"
    "M_UNKNOWN\020\000\022\014\n\010ADNOMIAL\020\001\022\r\n\tAUXILIARY\020\002"
    "\022\022\n\016COMPLEMENTIZER\020\003\022\020\n\014FINAL_ENDING\020\004\022\n"
    "\n\006GERUND\020\005\022\n\n\006REALIS\020\006\022\014\n\010IRREALIS\020\007\022\t\n\005"
    "SHORT\020\010\022\010\n\004LONG\020\t\022\t\n\005ORDER\020\n\022\014\n\010SPECIFIC"
    "\020\013\"E\n\006Gender\022\022\n\016GENDER_UNKNOWN\020\000\022\014\n\010FEMI"
    "NINE\020\001\022\r\n\tMASCULINE\020\002\022\n\n\006NEUTER\020\003\"\177\n\004Moo"
    "d\022\020\n\014MOOD_UNKNOWN\020\000\022\024\n\020CONDITIONAL_MOOD\020"
    "\001\022\016\n\nIMPERATIVE\020\002\022\016\n\nINDICATIVE\020\003\022\021\n\rINT"
    "ERROGATIVE\020\004\022\013\n\007JUSSIVE\020\005\022\017\n\013SUBJUNCTIVE"
    "\020\006\"@\n\006Number\022\022\n\016NUMBER_UNKNOWN\020\000\022\014\n\010SING"
    "ULAR\020\001\022\n\n\006PLURAL\020\002\022\010\n\004DUAL\020\003\"T\n\006Person\022\022"
    "\n\016PERSON_UNKNOWN\020\000\022\t\n\005FIRST\020\001\022\n\n\006SECOND\020"
    "\002\022\t\n\005THIRD\020\003\022\024\n\020REFLEXIVE_PERSON\020\004\"8\n\006Pr"
    "oper\022\022\n\016PROPER_UNKNOWN\020\000\022\n\n\006PROPER\020\001\022\016\n\n"
    "NOT_PROPER\020\002\"J\n\013Reciprocity\022\027\n\023RECIPROCI"
    "TY_UNKNOWN\020\000\022\016\n\nRECIPROCAL\020\001\022\022\n\016NON_RECI"
    "PROCAL\020\002\"s\n\005Tense\022\021\n\rTENSE_UNKNOWN\020\000\022\025\n\021"
    "CONDITIONAL_TENSE\020\001\022\n\n\006FUTURE\020\002\022\010\n\004PAST\020"
    "\003\022\013\n\007PRESENT\020\004\022\r\n\tIMPERFECT\020\005\022\016\n\nPLUPERF"
    "ECT\020\006\"B\n\005Voice\022\021\n\rVOICE_UNKNOWN\020\000\022\n\n\006ACT"
    "IVE\020\001\022\r\n\tCAUSATIVE\020\002\022\013\n\007PASSIVE\020\003\"\330\007\n\016De"
    "pendencyEdge\022\030\n\020head_token_index\030\001 \001(\005\022="
    "\n\005label\030\002 \001(\0162..google.cloud.language.v1"
    ".DependencyEdge.Label\"\354\006\n\005Label\022\013\n\007UNKNO"
    "WN\020\000\022\n\n\006ABBREV\020\001\022\t\n\005ACOMP\020\002\022\t\n\005ADVCL\020\003\022\n"
    "\n\006ADVMOD\020\004\022\010\n\004AMOD\020\005\022\t\n\005APPOS\020\006\022\010\n\004ATTR\020"
    "\007\022\007\n\003AUX\020\010\022\013\n\007AUXPASS\020\t\022\006\n\002CC\020\n\022\t\n\005CCOMP"
    "\020\013\022\010\n\004CONJ\020\014\022\t\n\005CSUBJ\020\r\022\r\n\tCSUBJPASS\020\016\022\007"
    "\n\003DEP\020\017\022\007\n\003DET\020\020\022\r\n\tDISCOURSE\020\021\022\010\n\004DOBJ\020"
    "\022\022\010\n\004EXPL\020\023\022\014\n\010GOESWITH\020\024\022\010\n\004IOBJ\020\025\022\010\n\004M"
    "ARK\020\026\022\007\n\003MWE\020\027\022\007\n\003MWV\020\030\022\007\n\003NEG\020\031\022\006\n\002NN\020\032"
    "\022\014\n\010NPADVMOD\020\033\022\t\n\005NSUBJ\020\034\022\r\n\tNSUBJPASS\020\035"
    "\022\007\n\003NUM\020\036\022\n\n\006NUMBER\020\037\022\005\n\001P\020 \022\r\n\tPARATAXI"
    "S\020!\022\013\n\007PARTMOD\020\"\022\t\n\005PCOMP\020#\022\010\n\004POBJ\020$\022\010\n"
    "\004POSS\020%\022\013\n\007POSTNEG\020&\022\013\n\007PRECOMP\020\'\022\013\n\007PRE"
    "CONJ\020(\022\n\n\006PREDET\020)\022\010\n\004PREF\020*\022\010\n\004PREP\020+\022\t"
    "\n\005PRONL\020,\022\007\n\003PRT\020-\022\006\n\002PS\020.\022\014\n\010QUANTMOD\020/"
    "\022\t\n\005RCMOD\0200\022\014\n\010RCMODREL\0201\022\t\n\005RDROP\0202\022\007\n\003"
    "REF\0203\022\013\n\007REMNANT\0204\022\016\n\nREPARANDUM\0205\022\010\n\004RO"
    "OT\0206\022\010\n\004SNUM\0207\022\010\n\004SUFF\0208\022\010\n\004TMOD\0209\022\t\n\005TO"
    "PIC\020:\022\010\n\004VMOD\020;\022\014\n\010VOCATIVE\020<\022\t\n\005XCOMP\020="
    "\022\n\n\006SUFFIX\020>\022\t\n\005TITLE\020\?\022\014\n\010ADVPHMOD\020@\022\013\n"
    "\007AUXCAUS\020A\022\t\n\005AUXVV\020B\022\t\n\005DTMOD\020C\022\013\n\007FORE"
    "IGN\020D\022\006\n\002KW\020E\022\010\n\004LIST\020F\022\010\n\004NOMC\020G\022\014\n\010NOM"
    "CSUBJ\020H\022\020\n\014NOMCSUBJPASS\020I\022\010\n\004NUMC\020J\022\007\n\003C"
    "OP\020K\022\016\n\nDISLOCATED\020L\"\257\001\n\rEntityMention\0220"
    "\n\004text\030\001 \001(\0132\".google.cloud.language.v1."
    "TextSpan\022:\n\004type\030\002 \001(\0162,.google.cloud.la"
    "nguage.v1.EntityMention.Type\"0\n\004Type\022\020\n\014"
    "TYPE_UNKNOWN\020\000\022\n\n\006PROPER\020\001\022\n\n\006COMMON\020\002\"1"
    "\n\010TextSpan\022\017\n\007content\030\001 \001(\t\022\024\n\014begin_off"
    "set\030\002 \001(\005\"\216\001\n\027AnalyzeSentimentRequest\0224\n"
    "\010document\030\001 \001(\0132\".google.cloud.language."
    "v1.Document\022=\n\rencoding_type\030\002 \001(\0162&.goo"
    "gle.cloud.language.v1.EncodingType\"\244\001\n\030A"
    "nalyzeSentimentResponse\022\?\n\022document_sent"
    "iment\030\001 \001(\0132#.google.cloud.language.v1.S"
    "entiment\022\020\n\010language\030\002 \001(\t\0225\n\tsentences\030"
    "\003 \003(\0132\".google.cloud.language.v1.Sentenc"
    "e\"\215\001\n\026AnalyzeEntitiesRequest\0224\n\010document"
    "\030\001 \001(\0132\".google.cloud.language.v1.Docume"
    "nt\022=\n\rencoding_type\030\002 \001(\0162&.google.cloud"
    ".language.v1.EncodingType\"_\n\027AnalyzeEnti"
    "tiesResponse\0222\n\010entities\030\001 \003(\0132 .google."
    "cloud.language.v1.Entity\022\020\n\010language\030\002 \001"
    "(\t\"\213\001\n\024AnalyzeSyntaxRequest\0224\n\010document\030"
    "\001 \001(\0132\".google.cloud.language.v1.Documen"
    "t\022=\n\rencoding_type\030\002 \001(\0162&.google.cloud."
    "language.v1.EncodingType\"\221\001\n\025AnalyzeSynt"
    "axResponse\0225\n\tsentences\030\001 \003(\0132\".google.c"
    "loud.language.v1.Sentence\022/\n\006tokens\030\002 \003("
    "\0132\037.google.cloud.language.v1.Token\022\020\n\010la"
    "nguage\030\003 \001(\t\"\266\002\n\023AnnotateTextRequest\0224\n\010"
    "document\030\001 \001(\0132\".google.cloud.language.v"
    "1.Document\022H\n\010features\030\002 \001(\01326.google.cl"
    "oud.language.v1.AnnotateTextRequest.Feat"
    "ures\022=\n\rencoding_type\030\003 \001(\0162&.google.clo"
    "ud.language.v1.EncodingType\032`\n\010Features\022"
    "\026\n\016extract_syntax\030\001 \001(\010\022\030\n\020extract_entit"
    "ies\030\002 \001(\010\022\"\n\032extract_document_sentiment\030"
    "\003 \001(\010\"\205\002\n\024AnnotateTextResponse\0225\n\tsenten"
    "ces\030\001 \003(\0132\".google.cloud.language.v1.Sen"
    "tence\022/\n\006tokens\030\002 \003(\0132\037.google.cloud.lan"
    "guage.v1.Token\0222\n\010entities\030\003 \003(\0132 .googl"
    "e.cloud.language.v1.Entity\022\?\n\022document_s"
    "entiment\030\004 \001(\0132#.google.cloud.language.v"
    "1.Sentiment\022\020\n\010language\030\005 \001(\t*8\n\014Encodin"
    "gType\022\010\n\004NONE\020\000\022\010\n\004UTF8\020\001\022\t\n\005UTF16\020\002\022\t\n\005"
    "UTF32\020\0032\215\005\n\017LanguageService\022\244\001\n\020AnalyzeS"
    "entiment\0221.google.cloud.language.v1.Anal"
    "yzeSentimentRequest\0322.google.cloud.langu"
    "age.v1.AnalyzeSentimentResponse\")\202\323\344\223\002#\""
    "\036/v1/documents:analyzeSentiment:\001*\022\240\001\n\017A"
    "nalyzeEntities\0220.google.cloud.language.v"
    "1.AnalyzeEntitiesRequest\0321.google.cloud."
    "language.v1.AnalyzeEntitiesResponse\"(\202\323\344"
    "\223\002\"\"\035/v1/documents:analyzeEntities:\001*\022\230\001"
    "\n\rAnalyzeSyntax\022..google.cloud.language."
    "v1.AnalyzeSyntaxRequest\032/.google.cloud.l"
    "anguage.v1.AnalyzeSyntaxResponse\"&\202\323\344\223\002 "
    "\"\033/v1/documents:analyzeSyntax:\001*\022\224\001\n\014Ann"
    "otateText\022-.google.cloud.language.v1.Ann"
    "otateTextRequest\032..google.cloud.language"
    ".v1.AnnotateTextResponse\"%\202\323\344\223\002\037\"\032/v1/do"
    "cuments:annotateText:\001*Bx\n\034com.google.cl"
    "oud.language.v1B\024LanguageServiceProtoP\001Z"
    "@google.golang.org/genproto/googleapis/c"
    "loud/language/v1;languageb\006proto3", 6633);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/cloud/language/v1/language_service.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_AddDesc_google_2fapi_2fannotations_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_once_);
void protobuf_AddDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_once_,
                 &protobuf_AddDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto {
  StaticDescriptorInitializer_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto() {
    protobuf_AddDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  }
} static_descriptor_initializer_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_;
const ::google::protobuf::EnumDescriptor* EncodingType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EncodingType_descriptor_;
}
bool EncodingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* Document_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Document_Type_descriptor_;
}
bool Document_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Document_Type Document::TYPE_UNSPECIFIED;
const Document_Type Document::PLAIN_TEXT;
const Document_Type Document::HTML;
const Document_Type Document::Type_MIN;
const Document_Type Document::Type_MAX;
const int Document::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Document::kTypeFieldNumber;
const int Document::kContentFieldNumber;
const int Document::kGcsContentUriFieldNumber;
const int Document::kLanguageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Document::Document()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.language.v1.Document)
}

void Document::InitAsDefaultInstance() {
  Document_default_oneof_instance_->content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  Document_default_oneof_instance_->gcs_content_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Document::Document(const Document& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.cloud.language.v1.Document)
}

void Document::SharedCtor() {
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  clear_has_source();
  _cached_size_ = 0;
}

Document::~Document() {
  // @@protoc_insertion_point(destructor:google.cloud.language.v1.Document)
  SharedDtor();
}

void Document::SharedDtor() {
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_source()) {
    clear_source();
  }
}

void Document::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Document::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Document_descriptor_;
}

const Document& Document::default_instance() {
  protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Document> Document_default_instance_;

Document* Document::New(::google::protobuf::Arena* arena) const {
  Document* n = new Document;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Document::clear_source() {
// @@protoc_insertion_point(one_of_clear_start:google.cloud.language.v1.Document)
  switch (source_case()) {
    case kContent: {
      source_.content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kGcsContentUri: {
      source_.gcs_content_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SOURCE_NOT_SET;
}


void Document::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.language.v1.Document)
  type_ = 0;
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_source();
}

bool Document::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.language.v1.Document)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.cloud.language.v1.Document.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::google::cloud::language::v1::Document_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional string content = 2;
      case 2: {
        if (tag == 18) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.language.v1.Document.content"));
        } else {
          goto handle_unusual;
        }
        goto after_gcs_content_uri;
        break;
      }

      // optional string gcs_content_uri = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gcs_content_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gcs_content_uri().data(), this->gcs_content_uri().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.language.v1.Document.gcs_content_uri"));
        } else {
          goto handle_unusual;
        }
       after_gcs_content_uri:
        if (input->ExpectTag(34)) goto parse_language;
        break;
      }

      // optional string language = 4;
      case 4: {
        if (tag == 34) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.language.v1.Document.language"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.language.v1.Document)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.language.v1.Document)
  return false;
#undef DO_
}

void Document::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.language.v1.Document)
  // optional .google.cloud.language.v1.Document.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.language.v1.Document.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  // optional string gcs_content_uri = 3;
  if (has_gcs_content_uri()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gcs_content_uri().data(), this->gcs_content_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.language.v1.Document.gcs_content_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->gcs_content_uri(), output);
  }

  // optional string language = 4;
  if (this->language().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.language.v1.Document.language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->language(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.language.v1.Document)
}

::google::protobuf::uint8* Document::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.language.v1.Document)
  // optional .google.cloud.language.v1.Document.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.language.v1.Document.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  // optional string gcs_content_uri = 3;
  if (has_gcs_content_uri()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gcs_content_uri().data(), this->gcs_content_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.language.v1.Document.gcs_content_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gcs_content_uri(), target);
  }

  // optional string language = 4;
  if (this->language().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.language.v1.Document.language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->language(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.language.v1.Document)
  return target;
}

size_t Document::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.language.v1.Document)
  size_t total_size = 0;

  // optional .google.cloud.language.v1.Document.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional string language = 4;
  if (this->language().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language());
  }

  switch (source_case()) {
    // optional string content = 2;
    case kContent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
      break;
    }
    // optional string gcs_content_uri = 3;
    case kGcsContentUri: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gcs_content_uri());
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Document::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.language.v1.Document)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Document* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Document>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.language.v1.Document)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.language.v1.Document)
    UnsafeMergeFrom(*source);
  }
}

void Document::MergeFrom(const Document& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.language.v1.Document)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Document::UnsafeMergeFrom(const Document& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.source_case()) {
    case kContent: {
      set_content(from.content());
      break;
    }
    case kGcsContentUri: {
      set_gcs_content_uri(from.gcs_content_uri());
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.language().size() > 0) {

    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
}

void Document::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.language.v1.Document)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Document::CopyFrom(const Document& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.language.v1.Document)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Document::IsInitialized() const {

  return true;
}

void Document::Swap(Document* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Document::InternalSwap(Document* other) {
  std::swap(type_, other->type_);
  language_.Swap(&other->language_);
  std::swap(source_, other->source_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Document::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Document_descriptor_;
  metadata.reflection = Document_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Document

// optional .google.cloud.language.v1.Document.Type type = 1;
void Document::clear_type() {
  type_ = 0;
}
::google::cloud::language::v1::Document_Type Document::type() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.Document.type)
  return static_cast< ::google::cloud::language::v1::Document_Type >(type_);
}
void Document::set_type(::google::cloud::language::v1::Document_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.Document.type)
}

// optional string content = 2;
bool Document::has_content() const {
  return source_case() == kContent;
}
void Document::set_has_content() {
  _oneof_case_[0] = kContent;
}
void Document::clear_content() {
  if (has_content()) {
    source_.content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_source();
  }
}
const ::std::string& Document::content() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.Document.content)
  if (has_content()) {
    return source_.content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void Document::set_content(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.Document.content)
  if (!has_content()) {
    clear_source();
    set_has_content();
    source_.content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  source_.content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.Document.content)
}
void Document::set_content(const char* value) {
  if (!has_content()) {
    clear_source();
    set_has_content();
    source_.content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  source_.content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.language.v1.Document.content)
}
void Document::set_content(const char* value, size_t size) {
  if (!has_content()) {
    clear_source();
    set_has_content();
    source_.content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  source_.content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.language.v1.Document.content)
}
::std::string* Document::mutable_content() {
  if (!has_content()) {
    clear_source();
    set_has_content();
    source_.content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.Document.content)
  return source_.content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Document::release_content() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.Document.content)
  if (has_content()) {
    clear_has_source();
    return source_.content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void Document::set_allocated_content(::std::string* content) {
  if (!has_content()) {
    source_.content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_source();
  if (content != NULL) {
    set_has_content();
    source_.content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        content);
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.Document.content)
}

// optional string gcs_content_uri = 3;
bool Document::has_gcs_content_uri() const {
  return source_case() == kGcsContentUri;
}
void Document::set_has_gcs_content_uri() {
  _oneof_case_[0] = kGcsContentUri;
}
void Document::clear_gcs_content_uri() {
  if (has_gcs_content_uri()) {
    source_.gcs_content_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_source();
  }
}
const ::std::string& Document::gcs_content_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.Document.gcs_content_uri)
  if (has_gcs_content_uri()) {
    return source_.gcs_content_uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void Document::set_gcs_content_uri(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.Document.gcs_content_uri)
  if (!has_gcs_content_uri()) {
    clear_source();
    set_has_gcs_content_uri();
    source_.gcs_content_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  source_.gcs_content_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.Document.gcs_content_uri)
}
void Document::set_gcs_content_uri(const char* value) {
  if (!has_gcs_content_uri()) {
    clear_source();
    set_has_gcs_content_uri();
    source_.gcs_content_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  source_.gcs_content_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.language.v1.Document.gcs_content_uri)
}
void Document::set_gcs_content_uri(const char* value, size_t size) {
  if (!has_gcs_content_uri()) {
    clear_source();
    set_has_gcs_content_uri();
    source_.gcs_content_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  source_.gcs_content_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.language.v1.Document.gcs_content_uri)
}
::std::string* Document::mutable_gcs_content_uri() {
  if (!has_gcs_content_uri()) {
    clear_source();
    set_has_gcs_content_uri();
    source_.gcs_content_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.Document.gcs_content_uri)
  return source_.gcs_content_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Document::release_gcs_content_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.Document.gcs_content_uri)
  if (has_gcs_content_uri()) {
    clear_has_source();
    return source_.gcs_content_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void Document::set_allocated_gcs_content_uri(::std::string* gcs_content_uri) {
  if (!has_gcs_content_uri()) {
    source_.gcs_content_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_source();
  if (gcs_content_uri != NULL) {
    set_has_gcs_content_uri();
    source_.gcs_content_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        gcs_content_uri);
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.Document.gcs_content_uri)
}

// optional string language = 4;
void Document::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Document::language() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.Document.language)
  return language_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Document::set_language(const ::std::string& value) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.Document.language)
}
void Document::set_language(const char* value) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.language.v1.Document.language)
}
void Document::set_language(const char* value, size_t size) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.language.v1.Document.language)
}
::std::string* Document::mutable_language() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.Document.language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Document::release_language() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.Document.language)
  
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Document::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    
  } else {
    
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.Document.language)
}

bool Document::has_source() const {
  return source_case() != SOURCE_NOT_SET;
}
void Document::clear_has_source() {
  _oneof_case_[0] = SOURCE_NOT_SET;
}
Document::SourceCase Document::source_case() const {
  return Document::SourceCase(_oneof_case_[0]);
}
inline const Document* Document::internal_default_instance() {
  return &Document_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sentence::kTextFieldNumber;
const int Sentence::kSentimentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sentence::Sentence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.language.v1.Sentence)
}

void Sentence::InitAsDefaultInstance() {
  text_ = const_cast< ::google::cloud::language::v1::TextSpan*>(
      ::google::cloud::language::v1::TextSpan::internal_default_instance());
  sentiment_ = const_cast< ::google::cloud::language::v1::Sentiment*>(
      ::google::cloud::language::v1::Sentiment::internal_default_instance());
}

Sentence::Sentence(const Sentence& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.cloud.language.v1.Sentence)
}

void Sentence::SharedCtor() {
  text_ = NULL;
  sentiment_ = NULL;
  _cached_size_ = 0;
}

Sentence::~Sentence() {
  // @@protoc_insertion_point(destructor:google.cloud.language.v1.Sentence)
  SharedDtor();
}

void Sentence::SharedDtor() {
  if (this != &Sentence_default_instance_.get()) {
    delete text_;
    delete sentiment_;
  }
}

void Sentence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sentence::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sentence_descriptor_;
}

const Sentence& Sentence::default_instance() {
  protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Sentence> Sentence_default_instance_;

Sentence* Sentence::New(::google::protobuf::Arena* arena) const {
  Sentence* n = new Sentence;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Sentence::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.language.v1.Sentence)
  if (GetArenaNoVirtual() == NULL && text_ != NULL) delete text_;
  text_ = NULL;
  if (GetArenaNoVirtual() == NULL && sentiment_ != NULL) delete sentiment_;
  sentiment_ = NULL;
}

bool Sentence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.language.v1.Sentence)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.cloud.language.v1.TextSpan text = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sentiment;
        break;
      }

      // optional .google.cloud.language.v1.Sentiment sentiment = 2;
      case 2: {
        if (tag == 18) {
         parse_sentiment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sentiment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.language.v1.Sentence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.language.v1.Sentence)
  return false;
#undef DO_
}

void Sentence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.language.v1.Sentence)
  // optional .google.cloud.language.v1.TextSpan text = 1;
  if (this->has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->text_, output);
  }

  // optional .google.cloud.language.v1.Sentiment sentiment = 2;
  if (this->has_sentiment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->sentiment_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.language.v1.Sentence)
}

::google::protobuf::uint8* Sentence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.language.v1.Sentence)
  // optional .google.cloud.language.v1.TextSpan text = 1;
  if (this->has_text()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->text_, false, target);
  }

  // optional .google.cloud.language.v1.Sentiment sentiment = 2;
  if (this->has_sentiment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->sentiment_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.language.v1.Sentence)
  return target;
}

size_t Sentence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.language.v1.Sentence)
  size_t total_size = 0;

  // optional .google.cloud.language.v1.TextSpan text = 1;
  if (this->has_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->text_);
  }

  // optional .google.cloud.language.v1.Sentiment sentiment = 2;
  if (this->has_sentiment()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sentiment_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sentence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.language.v1.Sentence)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Sentence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sentence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.language.v1.Sentence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.language.v1.Sentence)
    UnsafeMergeFrom(*source);
  }
}

void Sentence::MergeFrom(const Sentence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.language.v1.Sentence)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Sentence::UnsafeMergeFrom(const Sentence& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_text()) {
    mutable_text()->::google::cloud::language::v1::TextSpan::MergeFrom(from.text());
  }
  if (from.has_sentiment()) {
    mutable_sentiment()->::google::cloud::language::v1::Sentiment::MergeFrom(from.sentiment());
  }
}

void Sentence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.language.v1.Sentence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sentence::CopyFrom(const Sentence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.language.v1.Sentence)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Sentence::IsInitialized() const {

  return true;
}

void Sentence::Swap(Sentence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sentence::InternalSwap(Sentence* other) {
  std::swap(text_, other->text_);
  std::swap(sentiment_, other->sentiment_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Sentence::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sentence_descriptor_;
  metadata.reflection = Sentence_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Sentence

// optional .google.cloud.language.v1.TextSpan text = 1;
bool Sentence::has_text() const {
  return this != internal_default_instance() && text_ != NULL;
}
void Sentence::clear_text() {
  if (GetArenaNoVirtual() == NULL && text_ != NULL) delete text_;
  text_ = NULL;
}
const ::google::cloud::language::v1::TextSpan& Sentence::text() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.Sentence.text)
  return text_ != NULL ? *text_
                         : *::google::cloud::language::v1::TextSpan::internal_default_instance();
}
::google::cloud::language::v1::TextSpan* Sentence::mutable_text() {
  
  if (text_ == NULL) {
    text_ = new ::google::cloud::language::v1::TextSpan;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.Sentence.text)
  return text_;
}
::google::cloud::language::v1::TextSpan* Sentence::release_text() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.Sentence.text)
  
  ::google::cloud::language::v1::TextSpan* temp = text_;
  text_ = NULL;
  return temp;
}
void Sentence::set_allocated_text(::google::cloud::language::v1::TextSpan* text) {
  delete text_;
  text_ = text;
  if (text) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.Sentence.text)
}

// optional .google.cloud.language.v1.Sentiment sentiment = 2;
bool Sentence::has_sentiment() const {
  return this != internal_default_instance() && sentiment_ != NULL;
}
void Sentence::clear_sentiment() {
  if (GetArenaNoVirtual() == NULL && sentiment_ != NULL) delete sentiment_;
  sentiment_ = NULL;
}
const ::google::cloud::language::v1::Sentiment& Sentence::sentiment() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.Sentence.sentiment)
  return sentiment_ != NULL ? *sentiment_
                         : *::google::cloud::language::v1::Sentiment::internal_default_instance();
}
::google::cloud::language::v1::Sentiment* Sentence::mutable_sentiment() {
  
  if (sentiment_ == NULL) {
    sentiment_ = new ::google::cloud::language::v1::Sentiment;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.Sentence.sentiment)
  return sentiment_;
}
::google::cloud::language::v1::Sentiment* Sentence::release_sentiment() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.Sentence.sentiment)
  
  ::google::cloud::language::v1::Sentiment* temp = sentiment_;
  sentiment_ = NULL;
  return temp;
}
void Sentence::set_allocated_sentiment(::google::cloud::language::v1::Sentiment* sentiment) {
  delete sentiment_;
  sentiment_ = sentiment;
  if (sentiment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.Sentence.sentiment)
}

inline const Sentence* Sentence::internal_default_instance() {
  return &Sentence_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Entity_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Entity_Type_descriptor_;
}
bool Entity_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Entity_Type Entity::UNKNOWN;
const Entity_Type Entity::PERSON;
const Entity_Type Entity::LOCATION;
const Entity_Type Entity::ORGANIZATION;
const Entity_Type Entity::EVENT;
const Entity_Type Entity::WORK_OF_ART;
const Entity_Type Entity::CONSUMER_GOOD;
const Entity_Type Entity::OTHER;
const Entity_Type Entity::Type_MIN;
const Entity_Type Entity::Type_MAX;
const int Entity::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Entity::kNameFieldNumber;
const int Entity::kTypeFieldNumber;
const int Entity::kMetadataFieldNumber;
const int Entity::kSalienceFieldNumber;
const int Entity::kMentionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Entity::Entity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.language.v1.Entity)
}

void Entity::InitAsDefaultInstance() {
}

Entity::Entity(const Entity& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.cloud.language.v1.Entity)
}

void Entity::SharedCtor() {
  metadata_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  metadata_.SetEntryDescriptor(
      &::google::cloud::language::v1::Entity_MetadataEntry_descriptor_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&salience_) -
    reinterpret_cast<char*>(&type_) + sizeof(salience_));
  _cached_size_ = 0;
}

Entity::~Entity() {
  // @@protoc_insertion_point(destructor:google.cloud.language.v1.Entity)
  SharedDtor();
}

void Entity::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Entity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Entity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Entity_descriptor_;
}

const Entity& Entity::default_instance() {
  protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Entity> Entity_default_instance_;

Entity* Entity::New(::google::protobuf::Arena* arena) const {
  Entity* n = new Entity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Entity::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.language.v1.Entity)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Entity, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Entity*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, salience_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  metadata_.Clear();
  mentions_.Clear();
}

bool Entity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.language.v1.Entity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.language.v1.Entity.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .google.cloud.language.v1.Entity.Type type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::google::cloud::language::v1::Entity_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_metadata;
        break;
      }

      // map<string, string> metadata = 3;
      case 3: {
        if (tag == 26) {
         parse_metadata:
          DO_(input->IncrementRecursionDepth());
         parse_loop_metadata:
          Entity_MetadataEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&metadata_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.language.v1.Entity.MetadataEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.language.v1.Entity.MetadataEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_metadata;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(37)) goto parse_salience;
        break;
      }

      // optional float salience = 4;
      case 4: {
        if (tag == 37) {
         parse_salience:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &salience_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_mentions;
        break;
      }

      // repeated .google.cloud.language.v1.EntityMention mentions = 5;
      case 5: {
        if (tag == 42) {
         parse_mentions:
          DO_(input->IncrementRecursionDepth());
         parse_loop_mentions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mentions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_mentions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.language.v1.Entity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.language.v1.Entity)
  return false;
#undef DO_
}

void Entity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.language.v1.Entity)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.language.v1.Entity.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .google.cloud.language.v1.Entity.Type type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // map<string, string> metadata = 3;
  if (!this->metadata().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.cloud.language.v1.Entity.MetadataEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.cloud.language.v1.Entity.MetadataEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->metadata().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->metadata().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->metadata().begin();
          it != this->metadata().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Entity_MetadataEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(metadata_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Entity_MetadataEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->metadata().begin();
          it != this->metadata().end(); ++it) {
        entry.reset(metadata_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional float salience = 4;
  if (this->salience() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->salience(), output);
  }

  // repeated .google.cloud.language.v1.EntityMention mentions = 5;
  for (unsigned int i = 0, n = this->mentions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->mentions(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.language.v1.Entity)
}

::google::protobuf::uint8* Entity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.language.v1.Entity)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.language.v1.Entity.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .google.cloud.language.v1.Entity.Type type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // map<string, string> metadata = 3;
  if (!this->metadata().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.cloud.language.v1.Entity.MetadataEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.cloud.language.v1.Entity.MetadataEntry.value");
      }
    };

    if (deterministic &&
        this->metadata().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->metadata().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->metadata().begin();
          it != this->metadata().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Entity_MetadataEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(metadata_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Entity_MetadataEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->metadata().begin();
          it != this->metadata().end(); ++it) {
        entry.reset(metadata_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional float salience = 4;
  if (this->salience() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->salience(), target);
  }

  // repeated .google.cloud.language.v1.EntityMention mentions = 5;
  for (unsigned int i = 0, n = this->mentions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->mentions(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.language.v1.Entity)
  return target;
}

size_t Entity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.language.v1.Entity)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .google.cloud.language.v1.Entity.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional float salience = 4;
  if (this->salience() != 0) {
    total_size += 1 + 4;
  }

  // map<string, string> metadata = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->metadata_size());
  {
    ::google::protobuf::scoped_ptr<Entity_MetadataEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->metadata().begin();
        it != this->metadata().end(); ++it) {
      entry.reset(metadata_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .google.cloud.language.v1.EntityMention mentions = 5;
  {
    unsigned int count = this->mentions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mentions(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Entity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.language.v1.Entity)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Entity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Entity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.language.v1.Entity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.language.v1.Entity)
    UnsafeMergeFrom(*source);
  }
}

void Entity::MergeFrom(const Entity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.language.v1.Entity)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Entity::UnsafeMergeFrom(const Entity& from) {
  GOOGLE_DCHECK(&from != this);
  metadata_.MergeFrom(from.metadata_);
  mentions_.MergeFrom(from.mentions_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.salience() != 0) {
    set_salience(from.salience());
  }
}

void Entity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.language.v1.Entity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entity::CopyFrom(const Entity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.language.v1.Entity)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Entity::IsInitialized() const {

  return true;
}

void Entity::Swap(Entity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Entity::InternalSwap(Entity* other) {
  name_.Swap(&other->name_);
  std::swap(type_, other->type_);
  metadata_.Swap(&other->metadata_);
  std::swap(salience_, other->salience_);
  mentions_.UnsafeArenaSwap(&other->mentions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Entity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Entity_descriptor_;
  metadata.reflection = Entity_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Entity

// optional string name = 1;
void Entity::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Entity::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.Entity.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Entity::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.Entity.name)
}
void Entity::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.language.v1.Entity.name)
}
void Entity::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.language.v1.Entity.name)
}
::std::string* Entity::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.Entity.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Entity::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.Entity.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Entity::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.Entity.name)
}

// optional .google.cloud.language.v1.Entity.Type type = 2;
void Entity::clear_type() {
  type_ = 0;
}
::google::cloud::language::v1::Entity_Type Entity::type() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.Entity.type)
  return static_cast< ::google::cloud::language::v1::Entity_Type >(type_);
}
void Entity::set_type(::google::cloud::language::v1::Entity_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.Entity.type)
}

// map<string, string> metadata = 3;
int Entity::metadata_size() const {
  return metadata_.size();
}
void Entity::clear_metadata() {
  metadata_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
Entity::metadata() const {
  // @@protoc_insertion_point(field_map:google.cloud.language.v1.Entity.metadata)
  return metadata_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
Entity::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.language.v1.Entity.metadata)
  return metadata_.MutableMap();
}

// optional float salience = 4;
void Entity::clear_salience() {
  salience_ = 0;
}
float Entity::salience() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.Entity.salience)
  return salience_;
}
void Entity::set_salience(float value) {
  
  salience_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.Entity.salience)
}

// repeated .google.cloud.language.v1.EntityMention mentions = 5;
int Entity::mentions_size() const {
  return mentions_.size();
}
void Entity::clear_mentions() {
  mentions_.Clear();
}
const ::google::cloud::language::v1::EntityMention& Entity::mentions(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.Entity.mentions)
  return mentions_.Get(index);
}
::google::cloud::language::v1::EntityMention* Entity::mutable_mentions(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.Entity.mentions)
  return mentions_.Mutable(index);
}
::google::cloud::language::v1::EntityMention* Entity::add_mentions() {
  // @@protoc_insertion_point(field_add:google.cloud.language.v1.Entity.mentions)
  return mentions_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::EntityMention >*
Entity::mutable_mentions() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.language.v1.Entity.mentions)
  return &mentions_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::EntityMention >&
Entity::mentions() const {
  // @@protoc_insertion_point(field_list:google.cloud.language.v1.Entity.mentions)
  return mentions_;
}

inline const Entity* Entity::internal_default_instance() {
  return &Entity_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Token::kTextFieldNumber;
const int Token::kPartOfSpeechFieldNumber;
const int Token::kDependencyEdgeFieldNumber;
const int Token::kLemmaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Token::Token()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.language.v1.Token)
}

void Token::InitAsDefaultInstance() {
  text_ = const_cast< ::google::cloud::language::v1::TextSpan*>(
      ::google::cloud::language::v1::TextSpan::internal_default_instance());
  part_of_speech_ = const_cast< ::google::cloud::language::v1::PartOfSpeech*>(
      ::google::cloud::language::v1::PartOfSpeech::internal_default_instance());
  dependency_edge_ = const_cast< ::google::cloud::language::v1::DependencyEdge*>(
      ::google::cloud::language::v1::DependencyEdge::internal_default_instance());
}

Token::Token(const Token& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.cloud.language.v1.Token)
}

void Token::SharedCtor() {
  lemma_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_ = NULL;
  part_of_speech_ = NULL;
  dependency_edge_ = NULL;
  _cached_size_ = 0;
}

Token::~Token() {
  // @@protoc_insertion_point(destructor:google.cloud.language.v1.Token)
  SharedDtor();
}

void Token::SharedDtor() {
  lemma_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &Token_default_instance_.get()) {
    delete text_;
    delete part_of_speech_;
    delete dependency_edge_;
  }
}

void Token::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Token::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Token_descriptor_;
}

const Token& Token::default_instance() {
  protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Token> Token_default_instance_;

Token* Token::New(::google::protobuf::Arena* arena) const {
  Token* n = new Token;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Token::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.language.v1.Token)
  if (GetArenaNoVirtual() == NULL && text_ != NULL) delete text_;
  text_ = NULL;
  if (GetArenaNoVirtual() == NULL && part_of_speech_ != NULL) delete part_of_speech_;
  part_of_speech_ = NULL;
  if (GetArenaNoVirtual() == NULL && dependency_edge_ != NULL) delete dependency_edge_;
  dependency_edge_ = NULL;
  lemma_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Token::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.language.v1.Token)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.cloud.language.v1.TextSpan text = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_part_of_speech;
        break;
      }

      // optional .google.cloud.language.v1.PartOfSpeech part_of_speech = 2;
      case 2: {
        if (tag == 18) {
         parse_part_of_speech:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_part_of_speech()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dependency_edge;
        break;
      }

      // optional .google.cloud.language.v1.DependencyEdge dependency_edge = 3;
      case 3: {
        if (tag == 26) {
         parse_dependency_edge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dependency_edge()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_lemma;
        break;
      }

      // optional string lemma = 4;
      case 4: {
        if (tag == 34) {
         parse_lemma:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lemma()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lemma().data(), this->lemma().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.language.v1.Token.lemma"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.language.v1.Token)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.language.v1.Token)
  return false;
#undef DO_
}

void Token::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.language.v1.Token)
  // optional .google.cloud.language.v1.TextSpan text = 1;
  if (this->has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->text_, output);
  }

  // optional .google.cloud.language.v1.PartOfSpeech part_of_speech = 2;
  if (this->has_part_of_speech()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->part_of_speech_, output);
  }

  // optional .google.cloud.language.v1.DependencyEdge dependency_edge = 3;
  if (this->has_dependency_edge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->dependency_edge_, output);
  }

  // optional string lemma = 4;
  if (this->lemma().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lemma().data(), this->lemma().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.language.v1.Token.lemma");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->lemma(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.language.v1.Token)
}

::google::protobuf::uint8* Token::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.language.v1.Token)
  // optional .google.cloud.language.v1.TextSpan text = 1;
  if (this->has_text()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->text_, false, target);
  }

  // optional .google.cloud.language.v1.PartOfSpeech part_of_speech = 2;
  if (this->has_part_of_speech()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->part_of_speech_, false, target);
  }

  // optional .google.cloud.language.v1.DependencyEdge dependency_edge = 3;
  if (this->has_dependency_edge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->dependency_edge_, false, target);
  }

  // optional string lemma = 4;
  if (this->lemma().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lemma().data(), this->lemma().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.language.v1.Token.lemma");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->lemma(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.language.v1.Token)
  return target;
}

size_t Token::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.language.v1.Token)
  size_t total_size = 0;

  // optional .google.cloud.language.v1.TextSpan text = 1;
  if (this->has_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->text_);
  }

  // optional .google.cloud.language.v1.PartOfSpeech part_of_speech = 2;
  if (this->has_part_of_speech()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->part_of_speech_);
  }

  // optional .google.cloud.language.v1.DependencyEdge dependency_edge = 3;
  if (this->has_dependency_edge()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dependency_edge_);
  }

  // optional string lemma = 4;
  if (this->lemma().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lemma());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Token::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.language.v1.Token)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Token* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Token>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.language.v1.Token)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.language.v1.Token)
    UnsafeMergeFrom(*source);
  }
}

void Token::MergeFrom(const Token& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.language.v1.Token)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Token::UnsafeMergeFrom(const Token& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_text()) {
    mutable_text()->::google::cloud::language::v1::TextSpan::MergeFrom(from.text());
  }
  if (from.has_part_of_speech()) {
    mutable_part_of_speech()->::google::cloud::language::v1::PartOfSpeech::MergeFrom(from.part_of_speech());
  }
  if (from.has_dependency_edge()) {
    mutable_dependency_edge()->::google::cloud::language::v1::DependencyEdge::MergeFrom(from.dependency_edge());
  }
  if (from.lemma().size() > 0) {

    lemma_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lemma_);
  }
}

void Token::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.language.v1.Token)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Token::CopyFrom(const Token& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.language.v1.Token)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Token::IsInitialized() const {

  return true;
}

void Token::Swap(Token* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Token::InternalSwap(Token* other) {
  std::swap(text_, other->text_);
  std::swap(part_of_speech_, other->part_of_speech_);
  std::swap(dependency_edge_, other->dependency_edge_);
  lemma_.Swap(&other->lemma_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Token::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Token_descriptor_;
  metadata.reflection = Token_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Token

// optional .google.cloud.language.v1.TextSpan text = 1;
bool Token::has_text() const {
  return this != internal_default_instance() && text_ != NULL;
}
void Token::clear_text() {
  if (GetArenaNoVirtual() == NULL && text_ != NULL) delete text_;
  text_ = NULL;
}
const ::google::cloud::language::v1::TextSpan& Token::text() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.Token.text)
  return text_ != NULL ? *text_
                         : *::google::cloud::language::v1::TextSpan::internal_default_instance();
}
::google::cloud::language::v1::TextSpan* Token::mutable_text() {
  
  if (text_ == NULL) {
    text_ = new ::google::cloud::language::v1::TextSpan;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.Token.text)
  return text_;
}
::google::cloud::language::v1::TextSpan* Token::release_text() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.Token.text)
  
  ::google::cloud::language::v1::TextSpan* temp = text_;
  text_ = NULL;
  return temp;
}
void Token::set_allocated_text(::google::cloud::language::v1::TextSpan* text) {
  delete text_;
  text_ = text;
  if (text) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.Token.text)
}

// optional .google.cloud.language.v1.PartOfSpeech part_of_speech = 2;
bool Token::has_part_of_speech() const {
  return this != internal_default_instance() && part_of_speech_ != NULL;
}
void Token::clear_part_of_speech() {
  if (GetArenaNoVirtual() == NULL && part_of_speech_ != NULL) delete part_of_speech_;
  part_of_speech_ = NULL;
}
const ::google::cloud::language::v1::PartOfSpeech& Token::part_of_speech() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.Token.part_of_speech)
  return part_of_speech_ != NULL ? *part_of_speech_
                         : *::google::cloud::language::v1::PartOfSpeech::internal_default_instance();
}
::google::cloud::language::v1::PartOfSpeech* Token::mutable_part_of_speech() {
  
  if (part_of_speech_ == NULL) {
    part_of_speech_ = new ::google::cloud::language::v1::PartOfSpeech;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.Token.part_of_speech)
  return part_of_speech_;
}
::google::cloud::language::v1::PartOfSpeech* Token::release_part_of_speech() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.Token.part_of_speech)
  
  ::google::cloud::language::v1::PartOfSpeech* temp = part_of_speech_;
  part_of_speech_ = NULL;
  return temp;
}
void Token::set_allocated_part_of_speech(::google::cloud::language::v1::PartOfSpeech* part_of_speech) {
  delete part_of_speech_;
  part_of_speech_ = part_of_speech;
  if (part_of_speech) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.Token.part_of_speech)
}

// optional .google.cloud.language.v1.DependencyEdge dependency_edge = 3;
bool Token::has_dependency_edge() const {
  return this != internal_default_instance() && dependency_edge_ != NULL;
}
void Token::clear_dependency_edge() {
  if (GetArenaNoVirtual() == NULL && dependency_edge_ != NULL) delete dependency_edge_;
  dependency_edge_ = NULL;
}
const ::google::cloud::language::v1::DependencyEdge& Token::dependency_edge() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.Token.dependency_edge)
  return dependency_edge_ != NULL ? *dependency_edge_
                         : *::google::cloud::language::v1::DependencyEdge::internal_default_instance();
}
::google::cloud::language::v1::DependencyEdge* Token::mutable_dependency_edge() {
  
  if (dependency_edge_ == NULL) {
    dependency_edge_ = new ::google::cloud::language::v1::DependencyEdge;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.Token.dependency_edge)
  return dependency_edge_;
}
::google::cloud::language::v1::DependencyEdge* Token::release_dependency_edge() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.Token.dependency_edge)
  
  ::google::cloud::language::v1::DependencyEdge* temp = dependency_edge_;
  dependency_edge_ = NULL;
  return temp;
}
void Token::set_allocated_dependency_edge(::google::cloud::language::v1::DependencyEdge* dependency_edge) {
  delete dependency_edge_;
  dependency_edge_ = dependency_edge;
  if (dependency_edge) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.Token.dependency_edge)
}

// optional string lemma = 4;
void Token::clear_lemma() {
  lemma_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Token::lemma() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.Token.lemma)
  return lemma_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Token::set_lemma(const ::std::string& value) {
  
  lemma_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.Token.lemma)
}
void Token::set_lemma(const char* value) {
  
  lemma_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.language.v1.Token.lemma)
}
void Token::set_lemma(const char* value, size_t size) {
  
  lemma_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.language.v1.Token.lemma)
}
::std::string* Token::mutable_lemma() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.Token.lemma)
  return lemma_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Token::release_lemma() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.Token.lemma)
  
  return lemma_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Token::set_allocated_lemma(::std::string* lemma) {
  if (lemma != NULL) {
    
  } else {
    
  }
  lemma_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lemma);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.Token.lemma)
}

inline const Token* Token::internal_default_instance() {
  return &Token_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sentiment::kMagnitudeFieldNumber;
const int Sentiment::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sentiment::Sentiment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.language.v1.Sentiment)
}

void Sentiment::InitAsDefaultInstance() {
}

Sentiment::Sentiment(const Sentiment& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.cloud.language.v1.Sentiment)
}

void Sentiment::SharedCtor() {
  ::memset(&magnitude_, 0, reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&magnitude_) + sizeof(score_));
  _cached_size_ = 0;
}

Sentiment::~Sentiment() {
  // @@protoc_insertion_point(destructor:google.cloud.language.v1.Sentiment)
  SharedDtor();
}

void Sentiment::SharedDtor() {
}

void Sentiment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sentiment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sentiment_descriptor_;
}

const Sentiment& Sentiment::default_instance() {
  protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Sentiment> Sentiment_default_instance_;

Sentiment* Sentiment::New(::google::protobuf::Arena* arena) const {
  Sentiment* n = new Sentiment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Sentiment::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.language.v1.Sentiment)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Sentiment, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Sentiment*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(magnitude_, score_);

#undef ZR_HELPER_
#undef ZR_

}

bool Sentiment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.language.v1.Sentiment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float magnitude = 2;
      case 2: {
        if (tag == 21) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &magnitude_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_score;
        break;
      }

      // optional float score = 3;
      case 3: {
        if (tag == 29) {
         parse_score:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.language.v1.Sentiment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.language.v1.Sentiment)
  return false;
#undef DO_
}

void Sentiment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.language.v1.Sentiment)
  // optional float magnitude = 2;
  if (this->magnitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->magnitude(), output);
  }

  // optional float score = 3;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->score(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.language.v1.Sentiment)
}

::google::protobuf::uint8* Sentiment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.language.v1.Sentiment)
  // optional float magnitude = 2;
  if (this->magnitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->magnitude(), target);
  }

  // optional float score = 3;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->score(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.language.v1.Sentiment)
  return target;
}

size_t Sentiment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.language.v1.Sentiment)
  size_t total_size = 0;

  // optional float magnitude = 2;
  if (this->magnitude() != 0) {
    total_size += 1 + 4;
  }

  // optional float score = 3;
  if (this->score() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sentiment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.language.v1.Sentiment)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Sentiment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sentiment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.language.v1.Sentiment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.language.v1.Sentiment)
    UnsafeMergeFrom(*source);
  }
}

void Sentiment::MergeFrom(const Sentiment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.language.v1.Sentiment)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Sentiment::UnsafeMergeFrom(const Sentiment& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.magnitude() != 0) {
    set_magnitude(from.magnitude());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
}

void Sentiment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.language.v1.Sentiment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sentiment::CopyFrom(const Sentiment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.language.v1.Sentiment)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Sentiment::IsInitialized() const {

  return true;
}

void Sentiment::Swap(Sentiment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sentiment::InternalSwap(Sentiment* other) {
  std::swap(magnitude_, other->magnitude_);
  std::swap(score_, other->score_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Sentiment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sentiment_descriptor_;
  metadata.reflection = Sentiment_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Sentiment

// optional float magnitude = 2;
void Sentiment::clear_magnitude() {
  magnitude_ = 0;
}
float Sentiment::magnitude() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.Sentiment.magnitude)
  return magnitude_;
}
void Sentiment::set_magnitude(float value) {
  
  magnitude_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.Sentiment.magnitude)
}

// optional float score = 3;
void Sentiment::clear_score() {
  score_ = 0;
}
float Sentiment::score() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.Sentiment.score)
  return score_;
}
void Sentiment::set_score(float value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.Sentiment.score)
}

inline const Sentiment* Sentiment::internal_default_instance() {
  return &Sentiment_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* PartOfSpeech_Tag_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartOfSpeech_Tag_descriptor_;
}
bool PartOfSpeech_Tag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PartOfSpeech_Tag PartOfSpeech::UNKNOWN;
const PartOfSpeech_Tag PartOfSpeech::ADJ;
const PartOfSpeech_Tag PartOfSpeech::ADP;
const PartOfSpeech_Tag PartOfSpeech::ADV;
const PartOfSpeech_Tag PartOfSpeech::CONJ;
const PartOfSpeech_Tag PartOfSpeech::DET;
const PartOfSpeech_Tag PartOfSpeech::NOUN;
const PartOfSpeech_Tag PartOfSpeech::NUM;
const PartOfSpeech_Tag PartOfSpeech::PRON;
const PartOfSpeech_Tag PartOfSpeech::PRT;
const PartOfSpeech_Tag PartOfSpeech::PUNCT;
const PartOfSpeech_Tag PartOfSpeech::VERB;
const PartOfSpeech_Tag PartOfSpeech::X;
const PartOfSpeech_Tag PartOfSpeech::AFFIX;
const PartOfSpeech_Tag PartOfSpeech::Tag_MIN;
const PartOfSpeech_Tag PartOfSpeech::Tag_MAX;
const int PartOfSpeech::Tag_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PartOfSpeech_Aspect_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartOfSpeech_Aspect_descriptor_;
}
bool PartOfSpeech_Aspect_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PartOfSpeech_Aspect PartOfSpeech::ASPECT_UNKNOWN;
const PartOfSpeech_Aspect PartOfSpeech::PERFECTIVE;
const PartOfSpeech_Aspect PartOfSpeech::IMPERFECTIVE;
const PartOfSpeech_Aspect PartOfSpeech::PROGRESSIVE;
const PartOfSpeech_Aspect PartOfSpeech::Aspect_MIN;
const PartOfSpeech_Aspect PartOfSpeech::Aspect_MAX;
const int PartOfSpeech::Aspect_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PartOfSpeech_Case_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartOfSpeech_Case_descriptor_;
}
bool PartOfSpeech_Case_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PartOfSpeech_Case PartOfSpeech::CASE_UNKNOWN;
const PartOfSpeech_Case PartOfSpeech::ACCUSATIVE;
const PartOfSpeech_Case PartOfSpeech::ADVERBIAL;
const PartOfSpeech_Case PartOfSpeech::COMPLEMENTIVE;
const PartOfSpeech_Case PartOfSpeech::DATIVE;
const PartOfSpeech_Case PartOfSpeech::GENITIVE;
const PartOfSpeech_Case PartOfSpeech::INSTRUMENTAL;
const PartOfSpeech_Case PartOfSpeech::LOCATIVE;
const PartOfSpeech_Case PartOfSpeech::NOMINATIVE;
const PartOfSpeech_Case PartOfSpeech::OBLIQUE;
const PartOfSpeech_Case PartOfSpeech::PARTITIVE;
const PartOfSpeech_Case PartOfSpeech::PREPOSITIONAL;
const PartOfSpeech_Case PartOfSpeech::REFLEXIVE_CASE;
const PartOfSpeech_Case PartOfSpeech::RELATIVE_CASE;
const PartOfSpeech_Case PartOfSpeech::VOCATIVE;
const PartOfSpeech_Case PartOfSpeech::Case_MIN;
const PartOfSpeech_Case PartOfSpeech::Case_MAX;
const int PartOfSpeech::Case_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PartOfSpeech_Form_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartOfSpeech_Form_descriptor_;
}
bool PartOfSpeech_Form_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PartOfSpeech_Form PartOfSpeech::FORM_UNKNOWN;
const PartOfSpeech_Form PartOfSpeech::ADNOMIAL;
const PartOfSpeech_Form PartOfSpeech::AUXILIARY;
const PartOfSpeech_Form PartOfSpeech::COMPLEMENTIZER;
const PartOfSpeech_Form PartOfSpeech::FINAL_ENDING;
const PartOfSpeech_Form PartOfSpeech::GERUND;
const PartOfSpeech_Form PartOfSpeech::REALIS;
const PartOfSpeech_Form PartOfSpeech::IRREALIS;
const PartOfSpeech_Form PartOfSpeech::SHORT;
const PartOfSpeech_Form PartOfSpeech::LONG;
const PartOfSpeech_Form PartOfSpeech::ORDER;
const PartOfSpeech_Form PartOfSpeech::SPECIFIC;
const PartOfSpeech_Form PartOfSpeech::Form_MIN;
const PartOfSpeech_Form PartOfSpeech::Form_MAX;
const int PartOfSpeech::Form_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PartOfSpeech_Gender_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartOfSpeech_Gender_descriptor_;
}
bool PartOfSpeech_Gender_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PartOfSpeech_Gender PartOfSpeech::GENDER_UNKNOWN;
const PartOfSpeech_Gender PartOfSpeech::FEMININE;
const PartOfSpeech_Gender PartOfSpeech::MASCULINE;
const PartOfSpeech_Gender PartOfSpeech::NEUTER;
const PartOfSpeech_Gender PartOfSpeech::Gender_MIN;
const PartOfSpeech_Gender PartOfSpeech::Gender_MAX;
const int PartOfSpeech::Gender_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PartOfSpeech_Mood_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartOfSpeech_Mood_descriptor_;
}
bool PartOfSpeech_Mood_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PartOfSpeech_Mood PartOfSpeech::MOOD_UNKNOWN;
const PartOfSpeech_Mood PartOfSpeech::CONDITIONAL_MOOD;
const PartOfSpeech_Mood PartOfSpeech::IMPERATIVE;
const PartOfSpeech_Mood PartOfSpeech::INDICATIVE;
const PartOfSpeech_Mood PartOfSpeech::INTERROGATIVE;
const PartOfSpeech_Mood PartOfSpeech::JUSSIVE;
const PartOfSpeech_Mood PartOfSpeech::SUBJUNCTIVE;
const PartOfSpeech_Mood PartOfSpeech::Mood_MIN;
const PartOfSpeech_Mood PartOfSpeech::Mood_MAX;
const int PartOfSpeech::Mood_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PartOfSpeech_Number_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartOfSpeech_Number_descriptor_;
}
bool PartOfSpeech_Number_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PartOfSpeech_Number PartOfSpeech::NUMBER_UNKNOWN;
const PartOfSpeech_Number PartOfSpeech::SINGULAR;
const PartOfSpeech_Number PartOfSpeech::PLURAL;
const PartOfSpeech_Number PartOfSpeech::DUAL;
const PartOfSpeech_Number PartOfSpeech::Number_MIN;
const PartOfSpeech_Number PartOfSpeech::Number_MAX;
const int PartOfSpeech::Number_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PartOfSpeech_Person_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartOfSpeech_Person_descriptor_;
}
bool PartOfSpeech_Person_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PartOfSpeech_Person PartOfSpeech::PERSON_UNKNOWN;
const PartOfSpeech_Person PartOfSpeech::FIRST;
const PartOfSpeech_Person PartOfSpeech::SECOND;
const PartOfSpeech_Person PartOfSpeech::THIRD;
const PartOfSpeech_Person PartOfSpeech::REFLEXIVE_PERSON;
const PartOfSpeech_Person PartOfSpeech::Person_MIN;
const PartOfSpeech_Person PartOfSpeech::Person_MAX;
const int PartOfSpeech::Person_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PartOfSpeech_Proper_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartOfSpeech_Proper_descriptor_;
}
bool PartOfSpeech_Proper_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PartOfSpeech_Proper PartOfSpeech::PROPER_UNKNOWN;
const PartOfSpeech_Proper PartOfSpeech::PROPER;
const PartOfSpeech_Proper PartOfSpeech::NOT_PROPER;
const PartOfSpeech_Proper PartOfSpeech::Proper_MIN;
const PartOfSpeech_Proper PartOfSpeech::Proper_MAX;
const int PartOfSpeech::Proper_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PartOfSpeech_Reciprocity_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartOfSpeech_Reciprocity_descriptor_;
}
bool PartOfSpeech_Reciprocity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PartOfSpeech_Reciprocity PartOfSpeech::RECIPROCITY_UNKNOWN;
const PartOfSpeech_Reciprocity PartOfSpeech::RECIPROCAL;
const PartOfSpeech_Reciprocity PartOfSpeech::NON_RECIPROCAL;
const PartOfSpeech_Reciprocity PartOfSpeech::Reciprocity_MIN;
const PartOfSpeech_Reciprocity PartOfSpeech::Reciprocity_MAX;
const int PartOfSpeech::Reciprocity_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PartOfSpeech_Tense_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartOfSpeech_Tense_descriptor_;
}
bool PartOfSpeech_Tense_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PartOfSpeech_Tense PartOfSpeech::TENSE_UNKNOWN;
const PartOfSpeech_Tense PartOfSpeech::CONDITIONAL_TENSE;
const PartOfSpeech_Tense PartOfSpeech::FUTURE;
const PartOfSpeech_Tense PartOfSpeech::PAST;
const PartOfSpeech_Tense PartOfSpeech::PRESENT;
const PartOfSpeech_Tense PartOfSpeech::IMPERFECT;
const PartOfSpeech_Tense PartOfSpeech::PLUPERFECT;
const PartOfSpeech_Tense PartOfSpeech::Tense_MIN;
const PartOfSpeech_Tense PartOfSpeech::Tense_MAX;
const int PartOfSpeech::Tense_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PartOfSpeech_Voice_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartOfSpeech_Voice_descriptor_;
}
bool PartOfSpeech_Voice_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PartOfSpeech_Voice PartOfSpeech::VOICE_UNKNOWN;
const PartOfSpeech_Voice PartOfSpeech::ACTIVE;
const PartOfSpeech_Voice PartOfSpeech::CAUSATIVE;
const PartOfSpeech_Voice PartOfSpeech::PASSIVE;
const PartOfSpeech_Voice PartOfSpeech::Voice_MIN;
const PartOfSpeech_Voice PartOfSpeech::Voice_MAX;
const int PartOfSpeech::Voice_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PartOfSpeech::kTagFieldNumber;
const int PartOfSpeech::kAspectFieldNumber;
const int PartOfSpeech::kCaseFieldNumber;
const int PartOfSpeech::kFormFieldNumber;
const int PartOfSpeech::kGenderFieldNumber;
const int PartOfSpeech::kMoodFieldNumber;
const int PartOfSpeech::kNumberFieldNumber;
const int PartOfSpeech::kPersonFieldNumber;
const int PartOfSpeech::kProperFieldNumber;
const int PartOfSpeech::kReciprocityFieldNumber;
const int PartOfSpeech::kTenseFieldNumber;
const int PartOfSpeech::kVoiceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PartOfSpeech::PartOfSpeech()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.language.v1.PartOfSpeech)
}

void PartOfSpeech::InitAsDefaultInstance() {
}

PartOfSpeech::PartOfSpeech(const PartOfSpeech& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.cloud.language.v1.PartOfSpeech)
}

void PartOfSpeech::SharedCtor() {
  ::memset(&tag_, 0, reinterpret_cast<char*>(&voice_) -
    reinterpret_cast<char*>(&tag_) + sizeof(voice_));
  _cached_size_ = 0;
}

PartOfSpeech::~PartOfSpeech() {
  // @@protoc_insertion_point(destructor:google.cloud.language.v1.PartOfSpeech)
  SharedDtor();
}

void PartOfSpeech::SharedDtor() {
}

void PartOfSpeech::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PartOfSpeech::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartOfSpeech_descriptor_;
}

const PartOfSpeech& PartOfSpeech::default_instance() {
  protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PartOfSpeech> PartOfSpeech_default_instance_;

PartOfSpeech* PartOfSpeech::New(::google::protobuf::Arena* arena) const {
  PartOfSpeech* n = new PartOfSpeech;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PartOfSpeech::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.language.v1.PartOfSpeech)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PartOfSpeech, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PartOfSpeech*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(tag_, person_);
  ZR_(proper_, voice_);

#undef ZR_HELPER_
#undef ZR_

}

bool PartOfSpeech::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.language.v1.PartOfSpeech)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.cloud.language.v1.PartOfSpeech.Tag tag = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_tag(static_cast< ::google::cloud::language::v1::PartOfSpeech_Tag >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_aspect;
        break;
      }

      // optional .google.cloud.language.v1.PartOfSpeech.Aspect aspect = 2;
      case 2: {
        if (tag == 16) {
         parse_aspect:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_aspect(static_cast< ::google::cloud::language::v1::PartOfSpeech_Aspect >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_case;
        break;
      }

      // optional .google.cloud.language.v1.PartOfSpeech.Case case = 3;
      case 3: {
        if (tag == 24) {
         parse_case:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_case_(static_cast< ::google::cloud::language::v1::PartOfSpeech_Case >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_form;
        break;
      }

      // optional .google.cloud.language.v1.PartOfSpeech.Form form = 4;
      case 4: {
        if (tag == 32) {
         parse_form:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_form(static_cast< ::google::cloud::language::v1::PartOfSpeech_Form >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gender;
        break;
      }

      // optional .google.cloud.language.v1.PartOfSpeech.Gender gender = 5;
      case 5: {
        if (tag == 40) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gender(static_cast< ::google::cloud::language::v1::PartOfSpeech_Gender >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mood;
        break;
      }

      // optional .google.cloud.language.v1.PartOfSpeech.Mood mood = 6;
      case 6: {
        if (tag == 48) {
         parse_mood:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mood(static_cast< ::google::cloud::language::v1::PartOfSpeech_Mood >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_number;
        break;
      }

      // optional .google.cloud.language.v1.PartOfSpeech.Number number = 7;
      case 7: {
        if (tag == 56) {
         parse_number:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_number(static_cast< ::google::cloud::language::v1::PartOfSpeech_Number >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_person;
        break;
      }

      // optional .google.cloud.language.v1.PartOfSpeech.Person person = 8;
      case 8: {
        if (tag == 64) {
         parse_person:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_person(static_cast< ::google::cloud::language::v1::PartOfSpeech_Person >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_proper;
        break;
      }

      // optional .google.cloud.language.v1.PartOfSpeech.Proper proper = 9;
      case 9: {
        if (tag == 72) {
         parse_proper:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_proper(static_cast< ::google::cloud::language::v1::PartOfSpeech_Proper >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_reciprocity;
        break;
      }

      // optional .google.cloud.language.v1.PartOfSpeech.Reciprocity reciprocity = 10;
      case 10: {
        if (tag == 80) {
         parse_reciprocity:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reciprocity(static_cast< ::google::cloud::language::v1::PartOfSpeech_Reciprocity >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_tense;
        break;
      }

      // optional .google.cloud.language.v1.PartOfSpeech.Tense tense = 11;
      case 11: {
        if (tag == 88) {
         parse_tense:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_tense(static_cast< ::google::cloud::language::v1::PartOfSpeech_Tense >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_voice;
        break;
      }

      // optional .google.cloud.language.v1.PartOfSpeech.Voice voice = 12;
      case 12: {
        if (tag == 96) {
         parse_voice:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_voice(static_cast< ::google::cloud::language::v1::PartOfSpeech_Voice >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.language.v1.PartOfSpeech)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.language.v1.PartOfSpeech)
  return false;
#undef DO_
}

void PartOfSpeech::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.language.v1.PartOfSpeech)
  // optional .google.cloud.language.v1.PartOfSpeech.Tag tag = 1;
  if (this->tag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->tag(), output);
  }

  // optional .google.cloud.language.v1.PartOfSpeech.Aspect aspect = 2;
  if (this->aspect() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->aspect(), output);
  }

  // optional .google.cloud.language.v1.PartOfSpeech.Case case = 3;
  if (this->case_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->case_(), output);
  }

  // optional .google.cloud.language.v1.PartOfSpeech.Form form = 4;
  if (this->form() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->form(), output);
  }

  // optional .google.cloud.language.v1.PartOfSpeech.Gender gender = 5;
  if (this->gender() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->gender(), output);
  }

  // optional .google.cloud.language.v1.PartOfSpeech.Mood mood = 6;
  if (this->mood() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->mood(), output);
  }

  // optional .google.cloud.language.v1.PartOfSpeech.Number number = 7;
  if (this->number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->number(), output);
  }

  // optional .google.cloud.language.v1.PartOfSpeech.Person person = 8;
  if (this->person() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->person(), output);
  }

  // optional .google.cloud.language.v1.PartOfSpeech.Proper proper = 9;
  if (this->proper() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->proper(), output);
  }

  // optional .google.cloud.language.v1.PartOfSpeech.Reciprocity reciprocity = 10;
  if (this->reciprocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->reciprocity(), output);
  }

  // optional .google.cloud.language.v1.PartOfSpeech.Tense tense = 11;
  if (this->tense() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->tense(), output);
  }

  // optional .google.cloud.language.v1.PartOfSpeech.Voice voice = 12;
  if (this->voice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->voice(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.language.v1.PartOfSpeech)
}

::google::protobuf::uint8* PartOfSpeech::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.language.v1.PartOfSpeech)
  // optional .google.cloud.language.v1.PartOfSpeech.Tag tag = 1;
  if (this->tag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->tag(), target);
  }

  // optional .google.cloud.language.v1.PartOfSpeech.Aspect aspect = 2;
  if (this->aspect() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->aspect(), target);
  }

  // optional .google.cloud.language.v1.PartOfSpeech.Case case = 3;
  if (this->case_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->case_(), target);
  }

  // optional .google.cloud.language.v1.PartOfSpeech.Form form = 4;
  if (this->form() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->form(), target);
  }

  // optional .google.cloud.language.v1.PartOfSpeech.Gender gender = 5;
  if (this->gender() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->gender(), target);
  }

  // optional .google.cloud.language.v1.PartOfSpeech.Mood mood = 6;
  if (this->mood() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->mood(), target);
  }

  // optional .google.cloud.language.v1.PartOfSpeech.Number number = 7;
  if (this->number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->number(), target);
  }

  // optional .google.cloud.language.v1.PartOfSpeech.Person person = 8;
  if (this->person() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->person(), target);
  }

  // optional .google.cloud.language.v1.PartOfSpeech.Proper proper = 9;
  if (this->proper() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->proper(), target);
  }

  // optional .google.cloud.language.v1.PartOfSpeech.Reciprocity reciprocity = 10;
  if (this->reciprocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->reciprocity(), target);
  }

  // optional .google.cloud.language.v1.PartOfSpeech.Tense tense = 11;
  if (this->tense() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->tense(), target);
  }

  // optional .google.cloud.language.v1.PartOfSpeech.Voice voice = 12;
  if (this->voice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->voice(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.language.v1.PartOfSpeech)
  return target;
}

size_t PartOfSpeech::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.language.v1.PartOfSpeech)
  size_t total_size = 0;

  // optional .google.cloud.language.v1.PartOfSpeech.Tag tag = 1;
  if (this->tag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tag());
  }

  // optional .google.cloud.language.v1.PartOfSpeech.Aspect aspect = 2;
  if (this->aspect() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->aspect());
  }

  // optional .google.cloud.language.v1.PartOfSpeech.Case case = 3;
  if (this->case_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->case_());
  }

  // optional .google.cloud.language.v1.PartOfSpeech.Form form = 4;
  if (this->form() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->form());
  }

  // optional .google.cloud.language.v1.PartOfSpeech.Gender gender = 5;
  if (this->gender() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
  }

  // optional .google.cloud.language.v1.PartOfSpeech.Mood mood = 6;
  if (this->mood() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mood());
  }

  // optional .google.cloud.language.v1.PartOfSpeech.Number number = 7;
  if (this->number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->number());
  }

  // optional .google.cloud.language.v1.PartOfSpeech.Person person = 8;
  if (this->person() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->person());
  }

  // optional .google.cloud.language.v1.PartOfSpeech.Proper proper = 9;
  if (this->proper() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->proper());
  }

  // optional .google.cloud.language.v1.PartOfSpeech.Reciprocity reciprocity = 10;
  if (this->reciprocity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reciprocity());
  }

  // optional .google.cloud.language.v1.PartOfSpeech.Tense tense = 11;
  if (this->tense() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tense());
  }

  // optional .google.cloud.language.v1.PartOfSpeech.Voice voice = 12;
  if (this->voice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->voice());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PartOfSpeech::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.language.v1.PartOfSpeech)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PartOfSpeech* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PartOfSpeech>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.language.v1.PartOfSpeech)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.language.v1.PartOfSpeech)
    UnsafeMergeFrom(*source);
  }
}

void PartOfSpeech::MergeFrom(const PartOfSpeech& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.language.v1.PartOfSpeech)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PartOfSpeech::UnsafeMergeFrom(const PartOfSpeech& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.tag() != 0) {
    set_tag(from.tag());
  }
  if (from.aspect() != 0) {
    set_aspect(from.aspect());
  }
  if (from.case_() != 0) {
    set_case_(from.case_());
  }
  if (from.form() != 0) {
    set_form(from.form());
  }
  if (from.gender() != 0) {
    set_gender(from.gender());
  }
  if (from.mood() != 0) {
    set_mood(from.mood());
  }
  if (from.number() != 0) {
    set_number(from.number());
  }
  if (from.person() != 0) {
    set_person(from.person());
  }
  if (from.proper() != 0) {
    set_proper(from.proper());
  }
  if (from.reciprocity() != 0) {
    set_reciprocity(from.reciprocity());
  }
  if (from.tense() != 0) {
    set_tense(from.tense());
  }
  if (from.voice() != 0) {
    set_voice(from.voice());
  }
}

void PartOfSpeech::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.language.v1.PartOfSpeech)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartOfSpeech::CopyFrom(const PartOfSpeech& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.language.v1.PartOfSpeech)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PartOfSpeech::IsInitialized() const {

  return true;
}

void PartOfSpeech::Swap(PartOfSpeech* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PartOfSpeech::InternalSwap(PartOfSpeech* other) {
  std::swap(tag_, other->tag_);
  std::swap(aspect_, other->aspect_);
  std::swap(case__, other->case__);
  std::swap(form_, other->form_);
  std::swap(gender_, other->gender_);
  std::swap(mood_, other->mood_);
  std::swap(number_, other->number_);
  std::swap(person_, other->person_);
  std::swap(proper_, other->proper_);
  std::swap(reciprocity_, other->reciprocity_);
  std::swap(tense_, other->tense_);
  std::swap(voice_, other->voice_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PartOfSpeech::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PartOfSpeech_descriptor_;
  metadata.reflection = PartOfSpeech_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PartOfSpeech

// optional .google.cloud.language.v1.PartOfSpeech.Tag tag = 1;
void PartOfSpeech::clear_tag() {
  tag_ = 0;
}
::google::cloud::language::v1::PartOfSpeech_Tag PartOfSpeech::tag() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.PartOfSpeech.tag)
  return static_cast< ::google::cloud::language::v1::PartOfSpeech_Tag >(tag_);
}
void PartOfSpeech::set_tag(::google::cloud::language::v1::PartOfSpeech_Tag value) {
  
  tag_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.PartOfSpeech.tag)
}

// optional .google.cloud.language.v1.PartOfSpeech.Aspect aspect = 2;
void PartOfSpeech::clear_aspect() {
  aspect_ = 0;
}
::google::cloud::language::v1::PartOfSpeech_Aspect PartOfSpeech::aspect() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.PartOfSpeech.aspect)
  return static_cast< ::google::cloud::language::v1::PartOfSpeech_Aspect >(aspect_);
}
void PartOfSpeech::set_aspect(::google::cloud::language::v1::PartOfSpeech_Aspect value) {
  
  aspect_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.PartOfSpeech.aspect)
}

// optional .google.cloud.language.v1.PartOfSpeech.Case case = 3;
void PartOfSpeech::clear_case_() {
  case__ = 0;
}
::google::cloud::language::v1::PartOfSpeech_Case PartOfSpeech::case_() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.PartOfSpeech.case)
  return static_cast< ::google::cloud::language::v1::PartOfSpeech_Case >(case__);
}
void PartOfSpeech::set_case_(::google::cloud::language::v1::PartOfSpeech_Case value) {
  
  case__ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.PartOfSpeech.case)
}

// optional .google.cloud.language.v1.PartOfSpeech.Form form = 4;
void PartOfSpeech::clear_form() {
  form_ = 0;
}
::google::cloud::language::v1::PartOfSpeech_Form PartOfSpeech::form() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.PartOfSpeech.form)
  return static_cast< ::google::cloud::language::v1::PartOfSpeech_Form >(form_);
}
void PartOfSpeech::set_form(::google::cloud::language::v1::PartOfSpeech_Form value) {
  
  form_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.PartOfSpeech.form)
}

// optional .google.cloud.language.v1.PartOfSpeech.Gender gender = 5;
void PartOfSpeech::clear_gender() {
  gender_ = 0;
}
::google::cloud::language::v1::PartOfSpeech_Gender PartOfSpeech::gender() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.PartOfSpeech.gender)
  return static_cast< ::google::cloud::language::v1::PartOfSpeech_Gender >(gender_);
}
void PartOfSpeech::set_gender(::google::cloud::language::v1::PartOfSpeech_Gender value) {
  
  gender_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.PartOfSpeech.gender)
}

// optional .google.cloud.language.v1.PartOfSpeech.Mood mood = 6;
void PartOfSpeech::clear_mood() {
  mood_ = 0;
}
::google::cloud::language::v1::PartOfSpeech_Mood PartOfSpeech::mood() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.PartOfSpeech.mood)
  return static_cast< ::google::cloud::language::v1::PartOfSpeech_Mood >(mood_);
}
void PartOfSpeech::set_mood(::google::cloud::language::v1::PartOfSpeech_Mood value) {
  
  mood_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.PartOfSpeech.mood)
}

// optional .google.cloud.language.v1.PartOfSpeech.Number number = 7;
void PartOfSpeech::clear_number() {
  number_ = 0;
}
::google::cloud::language::v1::PartOfSpeech_Number PartOfSpeech::number() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.PartOfSpeech.number)
  return static_cast< ::google::cloud::language::v1::PartOfSpeech_Number >(number_);
}
void PartOfSpeech::set_number(::google::cloud::language::v1::PartOfSpeech_Number value) {
  
  number_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.PartOfSpeech.number)
}

// optional .google.cloud.language.v1.PartOfSpeech.Person person = 8;
void PartOfSpeech::clear_person() {
  person_ = 0;
}
::google::cloud::language::v1::PartOfSpeech_Person PartOfSpeech::person() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.PartOfSpeech.person)
  return static_cast< ::google::cloud::language::v1::PartOfSpeech_Person >(person_);
}
void PartOfSpeech::set_person(::google::cloud::language::v1::PartOfSpeech_Person value) {
  
  person_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.PartOfSpeech.person)
}

// optional .google.cloud.language.v1.PartOfSpeech.Proper proper = 9;
void PartOfSpeech::clear_proper() {
  proper_ = 0;
}
::google::cloud::language::v1::PartOfSpeech_Proper PartOfSpeech::proper() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.PartOfSpeech.proper)
  return static_cast< ::google::cloud::language::v1::PartOfSpeech_Proper >(proper_);
}
void PartOfSpeech::set_proper(::google::cloud::language::v1::PartOfSpeech_Proper value) {
  
  proper_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.PartOfSpeech.proper)
}

// optional .google.cloud.language.v1.PartOfSpeech.Reciprocity reciprocity = 10;
void PartOfSpeech::clear_reciprocity() {
  reciprocity_ = 0;
}
::google::cloud::language::v1::PartOfSpeech_Reciprocity PartOfSpeech::reciprocity() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.PartOfSpeech.reciprocity)
  return static_cast< ::google::cloud::language::v1::PartOfSpeech_Reciprocity >(reciprocity_);
}
void PartOfSpeech::set_reciprocity(::google::cloud::language::v1::PartOfSpeech_Reciprocity value) {
  
  reciprocity_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.PartOfSpeech.reciprocity)
}

// optional .google.cloud.language.v1.PartOfSpeech.Tense tense = 11;
void PartOfSpeech::clear_tense() {
  tense_ = 0;
}
::google::cloud::language::v1::PartOfSpeech_Tense PartOfSpeech::tense() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.PartOfSpeech.tense)
  return static_cast< ::google::cloud::language::v1::PartOfSpeech_Tense >(tense_);
}
void PartOfSpeech::set_tense(::google::cloud::language::v1::PartOfSpeech_Tense value) {
  
  tense_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.PartOfSpeech.tense)
}

// optional .google.cloud.language.v1.PartOfSpeech.Voice voice = 12;
void PartOfSpeech::clear_voice() {
  voice_ = 0;
}
::google::cloud::language::v1::PartOfSpeech_Voice PartOfSpeech::voice() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.PartOfSpeech.voice)
  return static_cast< ::google::cloud::language::v1::PartOfSpeech_Voice >(voice_);
}
void PartOfSpeech::set_voice(::google::cloud::language::v1::PartOfSpeech_Voice value) {
  
  voice_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.PartOfSpeech.voice)
}

inline const PartOfSpeech* PartOfSpeech::internal_default_instance() {
  return &PartOfSpeech_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* DependencyEdge_Label_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DependencyEdge_Label_descriptor_;
}
bool DependencyEdge_Label_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DependencyEdge_Label DependencyEdge::UNKNOWN;
const DependencyEdge_Label DependencyEdge::ABBREV;
const DependencyEdge_Label DependencyEdge::ACOMP;
const DependencyEdge_Label DependencyEdge::ADVCL;
const DependencyEdge_Label DependencyEdge::ADVMOD;
const DependencyEdge_Label DependencyEdge::AMOD;
const DependencyEdge_Label DependencyEdge::APPOS;
const DependencyEdge_Label DependencyEdge::ATTR;
const DependencyEdge_Label DependencyEdge::AUX;
const DependencyEdge_Label DependencyEdge::AUXPASS;
const DependencyEdge_Label DependencyEdge::CC;
const DependencyEdge_Label DependencyEdge::CCOMP;
const DependencyEdge_Label DependencyEdge::CONJ;
const DependencyEdge_Label DependencyEdge::CSUBJ;
const DependencyEdge_Label DependencyEdge::CSUBJPASS;
const DependencyEdge_Label DependencyEdge::DEP;
const DependencyEdge_Label DependencyEdge::DET;
const DependencyEdge_Label DependencyEdge::DISCOURSE;
const DependencyEdge_Label DependencyEdge::DOBJ;
const DependencyEdge_Label DependencyEdge::EXPL;
const DependencyEdge_Label DependencyEdge::GOESWITH;
const DependencyEdge_Label DependencyEdge::IOBJ;
const DependencyEdge_Label DependencyEdge::MARK;
const DependencyEdge_Label DependencyEdge::MWE;
const DependencyEdge_Label DependencyEdge::MWV;
const DependencyEdge_Label DependencyEdge::NEG;
const DependencyEdge_Label DependencyEdge::NN;
const DependencyEdge_Label DependencyEdge::NPADVMOD;
const DependencyEdge_Label DependencyEdge::NSUBJ;
const DependencyEdge_Label DependencyEdge::NSUBJPASS;
const DependencyEdge_Label DependencyEdge::NUM;
const DependencyEdge_Label DependencyEdge::NUMBER;
const DependencyEdge_Label DependencyEdge::P;
const DependencyEdge_Label DependencyEdge::PARATAXIS;
const DependencyEdge_Label DependencyEdge::PARTMOD;
const DependencyEdge_Label DependencyEdge::PCOMP;
const DependencyEdge_Label DependencyEdge::POBJ;
const DependencyEdge_Label DependencyEdge::POSS;
const DependencyEdge_Label DependencyEdge::POSTNEG;
const DependencyEdge_Label DependencyEdge::PRECOMP;
const DependencyEdge_Label DependencyEdge::PRECONJ;
const DependencyEdge_Label DependencyEdge::PREDET;
const DependencyEdge_Label DependencyEdge::PREF;
const DependencyEdge_Label DependencyEdge::PREP;
const DependencyEdge_Label DependencyEdge::PRONL;
const DependencyEdge_Label DependencyEdge::PRT;
const DependencyEdge_Label DependencyEdge::PS;
const DependencyEdge_Label DependencyEdge::QUANTMOD;
const DependencyEdge_Label DependencyEdge::RCMOD;
const DependencyEdge_Label DependencyEdge::RCMODREL;
const DependencyEdge_Label DependencyEdge::RDROP;
const DependencyEdge_Label DependencyEdge::REF;
const DependencyEdge_Label DependencyEdge::REMNANT;
const DependencyEdge_Label DependencyEdge::REPARANDUM;
const DependencyEdge_Label DependencyEdge::ROOT;
const DependencyEdge_Label DependencyEdge::SNUM;
const DependencyEdge_Label DependencyEdge::SUFF;
const DependencyEdge_Label DependencyEdge::TMOD;
const DependencyEdge_Label DependencyEdge::TOPIC;
const DependencyEdge_Label DependencyEdge::VMOD;
const DependencyEdge_Label DependencyEdge::VOCATIVE;
const DependencyEdge_Label DependencyEdge::XCOMP;
const DependencyEdge_Label DependencyEdge::SUFFIX;
const DependencyEdge_Label DependencyEdge::TITLE;
const DependencyEdge_Label DependencyEdge::ADVPHMOD;
const DependencyEdge_Label DependencyEdge::AUXCAUS;
const DependencyEdge_Label DependencyEdge::AUXVV;
const DependencyEdge_Label DependencyEdge::DTMOD;
const DependencyEdge_Label DependencyEdge::FOREIGN;
const DependencyEdge_Label DependencyEdge::KW;
const DependencyEdge_Label DependencyEdge::LIST;
const DependencyEdge_Label DependencyEdge::NOMC;
const DependencyEdge_Label DependencyEdge::NOMCSUBJ;
const DependencyEdge_Label DependencyEdge::NOMCSUBJPASS;
const DependencyEdge_Label DependencyEdge::NUMC;
const DependencyEdge_Label DependencyEdge::COP;
const DependencyEdge_Label DependencyEdge::DISLOCATED;
const DependencyEdge_Label DependencyEdge::Label_MIN;
const DependencyEdge_Label DependencyEdge::Label_MAX;
const int DependencyEdge::Label_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DependencyEdge::kHeadTokenIndexFieldNumber;
const int DependencyEdge::kLabelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DependencyEdge::DependencyEdge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.language.v1.DependencyEdge)
}

void DependencyEdge::InitAsDefaultInstance() {
}

DependencyEdge::DependencyEdge(const DependencyEdge& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.cloud.language.v1.DependencyEdge)
}

void DependencyEdge::SharedCtor() {
  ::memset(&head_token_index_, 0, reinterpret_cast<char*>(&label_) -
    reinterpret_cast<char*>(&head_token_index_) + sizeof(label_));
  _cached_size_ = 0;
}

DependencyEdge::~DependencyEdge() {
  // @@protoc_insertion_point(destructor:google.cloud.language.v1.DependencyEdge)
  SharedDtor();
}

void DependencyEdge::SharedDtor() {
}

void DependencyEdge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DependencyEdge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DependencyEdge_descriptor_;
}

const DependencyEdge& DependencyEdge::default_instance() {
  protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DependencyEdge> DependencyEdge_default_instance_;

DependencyEdge* DependencyEdge::New(::google::protobuf::Arena* arena) const {
  DependencyEdge* n = new DependencyEdge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DependencyEdge::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.language.v1.DependencyEdge)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DependencyEdge, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DependencyEdge*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(head_token_index_, label_);

#undef ZR_HELPER_
#undef ZR_

}

bool DependencyEdge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.language.v1.DependencyEdge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 head_token_index = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &head_token_index_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_label;
        break;
      }

      // optional .google.cloud.language.v1.DependencyEdge.Label label = 2;
      case 2: {
        if (tag == 16) {
         parse_label:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_label(static_cast< ::google::cloud::language::v1::DependencyEdge_Label >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.language.v1.DependencyEdge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.language.v1.DependencyEdge)
  return false;
#undef DO_
}

void DependencyEdge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.language.v1.DependencyEdge)
  // optional int32 head_token_index = 1;
  if (this->head_token_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->head_token_index(), output);
  }

  // optional .google.cloud.language.v1.DependencyEdge.Label label = 2;
  if (this->label() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->label(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.language.v1.DependencyEdge)
}

::google::protobuf::uint8* DependencyEdge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.language.v1.DependencyEdge)
  // optional int32 head_token_index = 1;
  if (this->head_token_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->head_token_index(), target);
  }

  // optional .google.cloud.language.v1.DependencyEdge.Label label = 2;
  if (this->label() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->label(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.language.v1.DependencyEdge)
  return target;
}

size_t DependencyEdge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.language.v1.DependencyEdge)
  size_t total_size = 0;

  // optional int32 head_token_index = 1;
  if (this->head_token_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->head_token_index());
  }

  // optional .google.cloud.language.v1.DependencyEdge.Label label = 2;
  if (this->label() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->label());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DependencyEdge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.language.v1.DependencyEdge)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DependencyEdge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DependencyEdge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.language.v1.DependencyEdge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.language.v1.DependencyEdge)
    UnsafeMergeFrom(*source);
  }
}

void DependencyEdge::MergeFrom(const DependencyEdge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.language.v1.DependencyEdge)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DependencyEdge::UnsafeMergeFrom(const DependencyEdge& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.head_token_index() != 0) {
    set_head_token_index(from.head_token_index());
  }
  if (from.label() != 0) {
    set_label(from.label());
  }
}

void DependencyEdge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.language.v1.DependencyEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DependencyEdge::CopyFrom(const DependencyEdge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.language.v1.DependencyEdge)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DependencyEdge::IsInitialized() const {

  return true;
}

void DependencyEdge::Swap(DependencyEdge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DependencyEdge::InternalSwap(DependencyEdge* other) {
  std::swap(head_token_index_, other->head_token_index_);
  std::swap(label_, other->label_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DependencyEdge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DependencyEdge_descriptor_;
  metadata.reflection = DependencyEdge_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DependencyEdge

// optional int32 head_token_index = 1;
void DependencyEdge::clear_head_token_index() {
  head_token_index_ = 0;
}
::google::protobuf::int32 DependencyEdge::head_token_index() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.DependencyEdge.head_token_index)
  return head_token_index_;
}
void DependencyEdge::set_head_token_index(::google::protobuf::int32 value) {
  
  head_token_index_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.DependencyEdge.head_token_index)
}

// optional .google.cloud.language.v1.DependencyEdge.Label label = 2;
void DependencyEdge::clear_label() {
  label_ = 0;
}
::google::cloud::language::v1::DependencyEdge_Label DependencyEdge::label() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.DependencyEdge.label)
  return static_cast< ::google::cloud::language::v1::DependencyEdge_Label >(label_);
}
void DependencyEdge::set_label(::google::cloud::language::v1::DependencyEdge_Label value) {
  
  label_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.DependencyEdge.label)
}

inline const DependencyEdge* DependencyEdge::internal_default_instance() {
  return &DependencyEdge_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* EntityMention_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntityMention_Type_descriptor_;
}
bool EntityMention_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EntityMention_Type EntityMention::TYPE_UNKNOWN;
const EntityMention_Type EntityMention::PROPER;
const EntityMention_Type EntityMention::COMMON;
const EntityMention_Type EntityMention::Type_MIN;
const EntityMention_Type EntityMention::Type_MAX;
const int EntityMention::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityMention::kTextFieldNumber;
const int EntityMention::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityMention::EntityMention()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.language.v1.EntityMention)
}

void EntityMention::InitAsDefaultInstance() {
  text_ = const_cast< ::google::cloud::language::v1::TextSpan*>(
      ::google::cloud::language::v1::TextSpan::internal_default_instance());
}

EntityMention::EntityMention(const EntityMention& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.cloud.language.v1.EntityMention)
}

void EntityMention::SharedCtor() {
  text_ = NULL;
  type_ = 0;
  _cached_size_ = 0;
}

EntityMention::~EntityMention() {
  // @@protoc_insertion_point(destructor:google.cloud.language.v1.EntityMention)
  SharedDtor();
}

void EntityMention::SharedDtor() {
  if (this != &EntityMention_default_instance_.get()) {
    delete text_;
  }
}

void EntityMention::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityMention::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntityMention_descriptor_;
}

const EntityMention& EntityMention::default_instance() {
  protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EntityMention> EntityMention_default_instance_;

EntityMention* EntityMention::New(::google::protobuf::Arena* arena) const {
  EntityMention* n = new EntityMention;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityMention::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.language.v1.EntityMention)
  if (GetArenaNoVirtual() == NULL && text_ != NULL) delete text_;
  text_ = NULL;
  type_ = 0;
}

bool EntityMention::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.language.v1.EntityMention)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.cloud.language.v1.TextSpan text = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .google.cloud.language.v1.EntityMention.Type type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::google::cloud::language::v1::EntityMention_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.language.v1.EntityMention)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.language.v1.EntityMention)
  return false;
#undef DO_
}

void EntityMention::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.language.v1.EntityMention)
  // optional .google.cloud.language.v1.TextSpan text = 1;
  if (this->has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->text_, output);
  }

  // optional .google.cloud.language.v1.EntityMention.Type type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.language.v1.EntityMention)
}

::google::protobuf::uint8* EntityMention::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.language.v1.EntityMention)
  // optional .google.cloud.language.v1.TextSpan text = 1;
  if (this->has_text()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->text_, false, target);
  }

  // optional .google.cloud.language.v1.EntityMention.Type type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.language.v1.EntityMention)
  return target;
}

size_t EntityMention::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.language.v1.EntityMention)
  size_t total_size = 0;

  // optional .google.cloud.language.v1.TextSpan text = 1;
  if (this->has_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->text_);
  }

  // optional .google.cloud.language.v1.EntityMention.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityMention::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.language.v1.EntityMention)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EntityMention* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityMention>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.language.v1.EntityMention)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.language.v1.EntityMention)
    UnsafeMergeFrom(*source);
  }
}

void EntityMention::MergeFrom(const EntityMention& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.language.v1.EntityMention)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EntityMention::UnsafeMergeFrom(const EntityMention& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_text()) {
    mutable_text()->::google::cloud::language::v1::TextSpan::MergeFrom(from.text());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void EntityMention::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.language.v1.EntityMention)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityMention::CopyFrom(const EntityMention& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.language.v1.EntityMention)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EntityMention::IsInitialized() const {

  return true;
}

void EntityMention::Swap(EntityMention* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityMention::InternalSwap(EntityMention* other) {
  std::swap(text_, other->text_);
  std::swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityMention::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntityMention_descriptor_;
  metadata.reflection = EntityMention_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EntityMention

// optional .google.cloud.language.v1.TextSpan text = 1;
bool EntityMention::has_text() const {
  return this != internal_default_instance() && text_ != NULL;
}
void EntityMention::clear_text() {
  if (GetArenaNoVirtual() == NULL && text_ != NULL) delete text_;
  text_ = NULL;
}
const ::google::cloud::language::v1::TextSpan& EntityMention::text() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.EntityMention.text)
  return text_ != NULL ? *text_
                         : *::google::cloud::language::v1::TextSpan::internal_default_instance();
}
::google::cloud::language::v1::TextSpan* EntityMention::mutable_text() {
  
  if (text_ == NULL) {
    text_ = new ::google::cloud::language::v1::TextSpan;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.EntityMention.text)
  return text_;
}
::google::cloud::language::v1::TextSpan* EntityMention::release_text() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.EntityMention.text)
  
  ::google::cloud::language::v1::TextSpan* temp = text_;
  text_ = NULL;
  return temp;
}
void EntityMention::set_allocated_text(::google::cloud::language::v1::TextSpan* text) {
  delete text_;
  text_ = text;
  if (text) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.EntityMention.text)
}

// optional .google.cloud.language.v1.EntityMention.Type type = 2;
void EntityMention::clear_type() {
  type_ = 0;
}
::google::cloud::language::v1::EntityMention_Type EntityMention::type() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.EntityMention.type)
  return static_cast< ::google::cloud::language::v1::EntityMention_Type >(type_);
}
void EntityMention::set_type(::google::cloud::language::v1::EntityMention_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.EntityMention.type)
}

inline const EntityMention* EntityMention::internal_default_instance() {
  return &EntityMention_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TextSpan::kContentFieldNumber;
const int TextSpan::kBeginOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TextSpan::TextSpan()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.language.v1.TextSpan)
}

void TextSpan::InitAsDefaultInstance() {
}

TextSpan::TextSpan(const TextSpan& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.cloud.language.v1.TextSpan)
}

void TextSpan::SharedCtor() {
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  begin_offset_ = 0;
  _cached_size_ = 0;
}

TextSpan::~TextSpan() {
  // @@protoc_insertion_point(destructor:google.cloud.language.v1.TextSpan)
  SharedDtor();
}

void TextSpan::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TextSpan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TextSpan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TextSpan_descriptor_;
}

const TextSpan& TextSpan::default_instance() {
  protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TextSpan> TextSpan_default_instance_;

TextSpan* TextSpan::New(::google::protobuf::Arena* arena) const {
  TextSpan* n = new TextSpan;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TextSpan::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.language.v1.TextSpan)
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  begin_offset_ = 0;
}

bool TextSpan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.language.v1.TextSpan)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string content = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.language.v1.TextSpan.content"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_begin_offset;
        break;
      }

      // optional int32 begin_offset = 2;
      case 2: {
        if (tag == 16) {
         parse_begin_offset:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &begin_offset_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.language.v1.TextSpan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.language.v1.TextSpan)
  return false;
#undef DO_
}

void TextSpan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.language.v1.TextSpan)
  // optional string content = 1;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.language.v1.TextSpan.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->content(), output);
  }

  // optional int32 begin_offset = 2;
  if (this->begin_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->begin_offset(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.language.v1.TextSpan)
}

::google::protobuf::uint8* TextSpan::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.language.v1.TextSpan)
  // optional string content = 1;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.language.v1.TextSpan.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  // optional int32 begin_offset = 2;
  if (this->begin_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->begin_offset(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.language.v1.TextSpan)
  return target;
}

size_t TextSpan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.language.v1.TextSpan)
  size_t total_size = 0;

  // optional string content = 1;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  // optional int32 begin_offset = 2;
  if (this->begin_offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->begin_offset());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextSpan::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.language.v1.TextSpan)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TextSpan* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TextSpan>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.language.v1.TextSpan)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.language.v1.TextSpan)
    UnsafeMergeFrom(*source);
  }
}

void TextSpan::MergeFrom(const TextSpan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.language.v1.TextSpan)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TextSpan::UnsafeMergeFrom(const TextSpan& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.begin_offset() != 0) {
    set_begin_offset(from.begin_offset());
  }
}

void TextSpan::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.language.v1.TextSpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextSpan::CopyFrom(const TextSpan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.language.v1.TextSpan)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TextSpan::IsInitialized() const {

  return true;
}

void TextSpan::Swap(TextSpan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TextSpan::InternalSwap(TextSpan* other) {
  content_.Swap(&other->content_);
  std::swap(begin_offset_, other->begin_offset_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TextSpan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TextSpan_descriptor_;
  metadata.reflection = TextSpan_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TextSpan

// optional string content = 1;
void TextSpan::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TextSpan::content() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.TextSpan.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TextSpan::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.TextSpan.content)
}
void TextSpan::set_content(const char* value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.language.v1.TextSpan.content)
}
void TextSpan::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.language.v1.TextSpan.content)
}
::std::string* TextSpan::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.TextSpan.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TextSpan::release_content() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.TextSpan.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TextSpan::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.TextSpan.content)
}

// optional int32 begin_offset = 2;
void TextSpan::clear_begin_offset() {
  begin_offset_ = 0;
}
::google::protobuf::int32 TextSpan::begin_offset() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.TextSpan.begin_offset)
  return begin_offset_;
}
void TextSpan::set_begin_offset(::google::protobuf::int32 value) {
  
  begin_offset_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.TextSpan.begin_offset)
}

inline const TextSpan* TextSpan::internal_default_instance() {
  return &TextSpan_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalyzeSentimentRequest::kDocumentFieldNumber;
const int AnalyzeSentimentRequest::kEncodingTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalyzeSentimentRequest::AnalyzeSentimentRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.language.v1.AnalyzeSentimentRequest)
}

void AnalyzeSentimentRequest::InitAsDefaultInstance() {
  document_ = const_cast< ::google::cloud::language::v1::Document*>(
      ::google::cloud::language::v1::Document::internal_default_instance());
}

AnalyzeSentimentRequest::AnalyzeSentimentRequest(const AnalyzeSentimentRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.cloud.language.v1.AnalyzeSentimentRequest)
}

void AnalyzeSentimentRequest::SharedCtor() {
  document_ = NULL;
  encoding_type_ = 0;
  _cached_size_ = 0;
}

AnalyzeSentimentRequest::~AnalyzeSentimentRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.language.v1.AnalyzeSentimentRequest)
  SharedDtor();
}

void AnalyzeSentimentRequest::SharedDtor() {
  if (this != &AnalyzeSentimentRequest_default_instance_.get()) {
    delete document_;
  }
}

void AnalyzeSentimentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnalyzeSentimentRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnalyzeSentimentRequest_descriptor_;
}

const AnalyzeSentimentRequest& AnalyzeSentimentRequest::default_instance() {
  protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AnalyzeSentimentRequest> AnalyzeSentimentRequest_default_instance_;

AnalyzeSentimentRequest* AnalyzeSentimentRequest::New(::google::protobuf::Arena* arena) const {
  AnalyzeSentimentRequest* n = new AnalyzeSentimentRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnalyzeSentimentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.language.v1.AnalyzeSentimentRequest)
  if (GetArenaNoVirtual() == NULL && document_ != NULL) delete document_;
  document_ = NULL;
  encoding_type_ = 0;
}

bool AnalyzeSentimentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.language.v1.AnalyzeSentimentRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.cloud.language.v1.Document document = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_encoding_type;
        break;
      }

      // optional .google.cloud.language.v1.EncodingType encoding_type = 2;
      case 2: {
        if (tag == 16) {
         parse_encoding_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encoding_type(static_cast< ::google::cloud::language::v1::EncodingType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.language.v1.AnalyzeSentimentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.language.v1.AnalyzeSentimentRequest)
  return false;
#undef DO_
}

void AnalyzeSentimentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.language.v1.AnalyzeSentimentRequest)
  // optional .google.cloud.language.v1.Document document = 1;
  if (this->has_document()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->document_, output);
  }

  // optional .google.cloud.language.v1.EncodingType encoding_type = 2;
  if (this->encoding_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->encoding_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.language.v1.AnalyzeSentimentRequest)
}

::google::protobuf::uint8* AnalyzeSentimentRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.language.v1.AnalyzeSentimentRequest)
  // optional .google.cloud.language.v1.Document document = 1;
  if (this->has_document()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->document_, false, target);
  }

  // optional .google.cloud.language.v1.EncodingType encoding_type = 2;
  if (this->encoding_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->encoding_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.language.v1.AnalyzeSentimentRequest)
  return target;
}

size_t AnalyzeSentimentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.language.v1.AnalyzeSentimentRequest)
  size_t total_size = 0;

  // optional .google.cloud.language.v1.Document document = 1;
  if (this->has_document()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->document_);
  }

  // optional .google.cloud.language.v1.EncodingType encoding_type = 2;
  if (this->encoding_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnalyzeSentimentRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.language.v1.AnalyzeSentimentRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AnalyzeSentimentRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnalyzeSentimentRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.language.v1.AnalyzeSentimentRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.language.v1.AnalyzeSentimentRequest)
    UnsafeMergeFrom(*source);
  }
}

void AnalyzeSentimentRequest::MergeFrom(const AnalyzeSentimentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.language.v1.AnalyzeSentimentRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AnalyzeSentimentRequest::UnsafeMergeFrom(const AnalyzeSentimentRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_document()) {
    mutable_document()->::google::cloud::language::v1::Document::MergeFrom(from.document());
  }
  if (from.encoding_type() != 0) {
    set_encoding_type(from.encoding_type());
  }
}

void AnalyzeSentimentRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.language.v1.AnalyzeSentimentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalyzeSentimentRequest::CopyFrom(const AnalyzeSentimentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.language.v1.AnalyzeSentimentRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AnalyzeSentimentRequest::IsInitialized() const {

  return true;
}

void AnalyzeSentimentRequest::Swap(AnalyzeSentimentRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalyzeSentimentRequest::InternalSwap(AnalyzeSentimentRequest* other) {
  std::swap(document_, other->document_);
  std::swap(encoding_type_, other->encoding_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnalyzeSentimentRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnalyzeSentimentRequest_descriptor_;
  metadata.reflection = AnalyzeSentimentRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AnalyzeSentimentRequest

// optional .google.cloud.language.v1.Document document = 1;
bool AnalyzeSentimentRequest::has_document() const {
  return this != internal_default_instance() && document_ != NULL;
}
void AnalyzeSentimentRequest::clear_document() {
  if (GetArenaNoVirtual() == NULL && document_ != NULL) delete document_;
  document_ = NULL;
}
const ::google::cloud::language::v1::Document& AnalyzeSentimentRequest::document() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnalyzeSentimentRequest.document)
  return document_ != NULL ? *document_
                         : *::google::cloud::language::v1::Document::internal_default_instance();
}
::google::cloud::language::v1::Document* AnalyzeSentimentRequest::mutable_document() {
  
  if (document_ == NULL) {
    document_ = new ::google::cloud::language::v1::Document;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.AnalyzeSentimentRequest.document)
  return document_;
}
::google::cloud::language::v1::Document* AnalyzeSentimentRequest::release_document() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.AnalyzeSentimentRequest.document)
  
  ::google::cloud::language::v1::Document* temp = document_;
  document_ = NULL;
  return temp;
}
void AnalyzeSentimentRequest::set_allocated_document(::google::cloud::language::v1::Document* document) {
  delete document_;
  document_ = document;
  if (document) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.AnalyzeSentimentRequest.document)
}

// optional .google.cloud.language.v1.EncodingType encoding_type = 2;
void AnalyzeSentimentRequest::clear_encoding_type() {
  encoding_type_ = 0;
}
::google::cloud::language::v1::EncodingType AnalyzeSentimentRequest::encoding_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnalyzeSentimentRequest.encoding_type)
  return static_cast< ::google::cloud::language::v1::EncodingType >(encoding_type_);
}
void AnalyzeSentimentRequest::set_encoding_type(::google::cloud::language::v1::EncodingType value) {
  
  encoding_type_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.AnalyzeSentimentRequest.encoding_type)
}

inline const AnalyzeSentimentRequest* AnalyzeSentimentRequest::internal_default_instance() {
  return &AnalyzeSentimentRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalyzeSentimentResponse::kDocumentSentimentFieldNumber;
const int AnalyzeSentimentResponse::kLanguageFieldNumber;
const int AnalyzeSentimentResponse::kSentencesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalyzeSentimentResponse::AnalyzeSentimentResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.language.v1.AnalyzeSentimentResponse)
}

void AnalyzeSentimentResponse::InitAsDefaultInstance() {
  document_sentiment_ = const_cast< ::google::cloud::language::v1::Sentiment*>(
      ::google::cloud::language::v1::Sentiment::internal_default_instance());
}

AnalyzeSentimentResponse::AnalyzeSentimentResponse(const AnalyzeSentimentResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.cloud.language.v1.AnalyzeSentimentResponse)
}

void AnalyzeSentimentResponse::SharedCtor() {
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  document_sentiment_ = NULL;
  _cached_size_ = 0;
}

AnalyzeSentimentResponse::~AnalyzeSentimentResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.language.v1.AnalyzeSentimentResponse)
  SharedDtor();
}

void AnalyzeSentimentResponse::SharedDtor() {
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &AnalyzeSentimentResponse_default_instance_.get()) {
    delete document_sentiment_;
  }
}

void AnalyzeSentimentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnalyzeSentimentResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnalyzeSentimentResponse_descriptor_;
}

const AnalyzeSentimentResponse& AnalyzeSentimentResponse::default_instance() {
  protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AnalyzeSentimentResponse> AnalyzeSentimentResponse_default_instance_;

AnalyzeSentimentResponse* AnalyzeSentimentResponse::New(::google::protobuf::Arena* arena) const {
  AnalyzeSentimentResponse* n = new AnalyzeSentimentResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnalyzeSentimentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.language.v1.AnalyzeSentimentResponse)
  if (GetArenaNoVirtual() == NULL && document_sentiment_ != NULL) delete document_sentiment_;
  document_sentiment_ = NULL;
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sentences_.Clear();
}

bool AnalyzeSentimentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.language.v1.AnalyzeSentimentResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.cloud.language.v1.Sentiment document_sentiment = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document_sentiment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_language;
        break;
      }

      // optional string language = 2;
      case 2: {
        if (tag == 18) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.language.v1.AnalyzeSentimentResponse.language"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sentences;
        break;
      }

      // repeated .google.cloud.language.v1.Sentence sentences = 3;
      case 3: {
        if (tag == 26) {
         parse_sentences:
          DO_(input->IncrementRecursionDepth());
         parse_loop_sentences:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sentences()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_sentences;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.language.v1.AnalyzeSentimentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.language.v1.AnalyzeSentimentResponse)
  return false;
#undef DO_
}

void AnalyzeSentimentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.language.v1.AnalyzeSentimentResponse)
  // optional .google.cloud.language.v1.Sentiment document_sentiment = 1;
  if (this->has_document_sentiment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->document_sentiment_, output);
  }

  // optional string language = 2;
  if (this->language().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.language.v1.AnalyzeSentimentResponse.language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->language(), output);
  }

  // repeated .google.cloud.language.v1.Sentence sentences = 3;
  for (unsigned int i = 0, n = this->sentences_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sentences(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.language.v1.AnalyzeSentimentResponse)
}

::google::protobuf::uint8* AnalyzeSentimentResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.language.v1.AnalyzeSentimentResponse)
  // optional .google.cloud.language.v1.Sentiment document_sentiment = 1;
  if (this->has_document_sentiment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->document_sentiment_, false, target);
  }

  // optional string language = 2;
  if (this->language().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.language.v1.AnalyzeSentimentResponse.language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->language(), target);
  }

  // repeated .google.cloud.language.v1.Sentence sentences = 3;
  for (unsigned int i = 0, n = this->sentences_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->sentences(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.language.v1.AnalyzeSentimentResponse)
  return target;
}

size_t AnalyzeSentimentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.language.v1.AnalyzeSentimentResponse)
  size_t total_size = 0;

  // optional .google.cloud.language.v1.Sentiment document_sentiment = 1;
  if (this->has_document_sentiment()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->document_sentiment_);
  }

  // optional string language = 2;
  if (this->language().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language());
  }

  // repeated .google.cloud.language.v1.Sentence sentences = 3;
  {
    unsigned int count = this->sentences_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sentences(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnalyzeSentimentResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.language.v1.AnalyzeSentimentResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AnalyzeSentimentResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnalyzeSentimentResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.language.v1.AnalyzeSentimentResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.language.v1.AnalyzeSentimentResponse)
    UnsafeMergeFrom(*source);
  }
}

void AnalyzeSentimentResponse::MergeFrom(const AnalyzeSentimentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.language.v1.AnalyzeSentimentResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AnalyzeSentimentResponse::UnsafeMergeFrom(const AnalyzeSentimentResponse& from) {
  GOOGLE_DCHECK(&from != this);
  sentences_.MergeFrom(from.sentences_);
  if (from.has_document_sentiment()) {
    mutable_document_sentiment()->::google::cloud::language::v1::Sentiment::MergeFrom(from.document_sentiment());
  }
  if (from.language().size() > 0) {

    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
}

void AnalyzeSentimentResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.language.v1.AnalyzeSentimentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalyzeSentimentResponse::CopyFrom(const AnalyzeSentimentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.language.v1.AnalyzeSentimentResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AnalyzeSentimentResponse::IsInitialized() const {

  return true;
}

void AnalyzeSentimentResponse::Swap(AnalyzeSentimentResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalyzeSentimentResponse::InternalSwap(AnalyzeSentimentResponse* other) {
  std::swap(document_sentiment_, other->document_sentiment_);
  language_.Swap(&other->language_);
  sentences_.UnsafeArenaSwap(&other->sentences_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnalyzeSentimentResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnalyzeSentimentResponse_descriptor_;
  metadata.reflection = AnalyzeSentimentResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AnalyzeSentimentResponse

// optional .google.cloud.language.v1.Sentiment document_sentiment = 1;
bool AnalyzeSentimentResponse::has_document_sentiment() const {
  return this != internal_default_instance() && document_sentiment_ != NULL;
}
void AnalyzeSentimentResponse::clear_document_sentiment() {
  if (GetArenaNoVirtual() == NULL && document_sentiment_ != NULL) delete document_sentiment_;
  document_sentiment_ = NULL;
}
const ::google::cloud::language::v1::Sentiment& AnalyzeSentimentResponse::document_sentiment() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnalyzeSentimentResponse.document_sentiment)
  return document_sentiment_ != NULL ? *document_sentiment_
                         : *::google::cloud::language::v1::Sentiment::internal_default_instance();
}
::google::cloud::language::v1::Sentiment* AnalyzeSentimentResponse::mutable_document_sentiment() {
  
  if (document_sentiment_ == NULL) {
    document_sentiment_ = new ::google::cloud::language::v1::Sentiment;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.AnalyzeSentimentResponse.document_sentiment)
  return document_sentiment_;
}
::google::cloud::language::v1::Sentiment* AnalyzeSentimentResponse::release_document_sentiment() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.AnalyzeSentimentResponse.document_sentiment)
  
  ::google::cloud::language::v1::Sentiment* temp = document_sentiment_;
  document_sentiment_ = NULL;
  return temp;
}
void AnalyzeSentimentResponse::set_allocated_document_sentiment(::google::cloud::language::v1::Sentiment* document_sentiment) {
  delete document_sentiment_;
  document_sentiment_ = document_sentiment;
  if (document_sentiment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.AnalyzeSentimentResponse.document_sentiment)
}

// optional string language = 2;
void AnalyzeSentimentResponse::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AnalyzeSentimentResponse::language() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnalyzeSentimentResponse.language)
  return language_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AnalyzeSentimentResponse::set_language(const ::std::string& value) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.AnalyzeSentimentResponse.language)
}
void AnalyzeSentimentResponse::set_language(const char* value) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.language.v1.AnalyzeSentimentResponse.language)
}
void AnalyzeSentimentResponse::set_language(const char* value, size_t size) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.language.v1.AnalyzeSentimentResponse.language)
}
::std::string* AnalyzeSentimentResponse::mutable_language() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.AnalyzeSentimentResponse.language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AnalyzeSentimentResponse::release_language() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.AnalyzeSentimentResponse.language)
  
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AnalyzeSentimentResponse::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    
  } else {
    
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.AnalyzeSentimentResponse.language)
}

// repeated .google.cloud.language.v1.Sentence sentences = 3;
int AnalyzeSentimentResponse::sentences_size() const {
  return sentences_.size();
}
void AnalyzeSentimentResponse::clear_sentences() {
  sentences_.Clear();
}
const ::google::cloud::language::v1::Sentence& AnalyzeSentimentResponse::sentences(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnalyzeSentimentResponse.sentences)
  return sentences_.Get(index);
}
::google::cloud::language::v1::Sentence* AnalyzeSentimentResponse::mutable_sentences(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.AnalyzeSentimentResponse.sentences)
  return sentences_.Mutable(index);
}
::google::cloud::language::v1::Sentence* AnalyzeSentimentResponse::add_sentences() {
  // @@protoc_insertion_point(field_add:google.cloud.language.v1.AnalyzeSentimentResponse.sentences)
  return sentences_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Sentence >*
AnalyzeSentimentResponse::mutable_sentences() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.language.v1.AnalyzeSentimentResponse.sentences)
  return &sentences_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Sentence >&
AnalyzeSentimentResponse::sentences() const {
  // @@protoc_insertion_point(field_list:google.cloud.language.v1.AnalyzeSentimentResponse.sentences)
  return sentences_;
}

inline const AnalyzeSentimentResponse* AnalyzeSentimentResponse::internal_default_instance() {
  return &AnalyzeSentimentResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalyzeEntitiesRequest::kDocumentFieldNumber;
const int AnalyzeEntitiesRequest::kEncodingTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalyzeEntitiesRequest::AnalyzeEntitiesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.language.v1.AnalyzeEntitiesRequest)
}

void AnalyzeEntitiesRequest::InitAsDefaultInstance() {
  document_ = const_cast< ::google::cloud::language::v1::Document*>(
      ::google::cloud::language::v1::Document::internal_default_instance());
}

AnalyzeEntitiesRequest::AnalyzeEntitiesRequest(const AnalyzeEntitiesRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.cloud.language.v1.AnalyzeEntitiesRequest)
}

void AnalyzeEntitiesRequest::SharedCtor() {
  document_ = NULL;
  encoding_type_ = 0;
  _cached_size_ = 0;
}

AnalyzeEntitiesRequest::~AnalyzeEntitiesRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.language.v1.AnalyzeEntitiesRequest)
  SharedDtor();
}

void AnalyzeEntitiesRequest::SharedDtor() {
  if (this != &AnalyzeEntitiesRequest_default_instance_.get()) {
    delete document_;
  }
}

void AnalyzeEntitiesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnalyzeEntitiesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnalyzeEntitiesRequest_descriptor_;
}

const AnalyzeEntitiesRequest& AnalyzeEntitiesRequest::default_instance() {
  protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AnalyzeEntitiesRequest> AnalyzeEntitiesRequest_default_instance_;

AnalyzeEntitiesRequest* AnalyzeEntitiesRequest::New(::google::protobuf::Arena* arena) const {
  AnalyzeEntitiesRequest* n = new AnalyzeEntitiesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnalyzeEntitiesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.language.v1.AnalyzeEntitiesRequest)
  if (GetArenaNoVirtual() == NULL && document_ != NULL) delete document_;
  document_ = NULL;
  encoding_type_ = 0;
}

bool AnalyzeEntitiesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.language.v1.AnalyzeEntitiesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.cloud.language.v1.Document document = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_encoding_type;
        break;
      }

      // optional .google.cloud.language.v1.EncodingType encoding_type = 2;
      case 2: {
        if (tag == 16) {
         parse_encoding_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encoding_type(static_cast< ::google::cloud::language::v1::EncodingType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.language.v1.AnalyzeEntitiesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.language.v1.AnalyzeEntitiesRequest)
  return false;
#undef DO_
}

void AnalyzeEntitiesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.language.v1.AnalyzeEntitiesRequest)
  // optional .google.cloud.language.v1.Document document = 1;
  if (this->has_document()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->document_, output);
  }

  // optional .google.cloud.language.v1.EncodingType encoding_type = 2;
  if (this->encoding_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->encoding_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.language.v1.AnalyzeEntitiesRequest)
}

::google::protobuf::uint8* AnalyzeEntitiesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.language.v1.AnalyzeEntitiesRequest)
  // optional .google.cloud.language.v1.Document document = 1;
  if (this->has_document()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->document_, false, target);
  }

  // optional .google.cloud.language.v1.EncodingType encoding_type = 2;
  if (this->encoding_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->encoding_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.language.v1.AnalyzeEntitiesRequest)
  return target;
}

size_t AnalyzeEntitiesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.language.v1.AnalyzeEntitiesRequest)
  size_t total_size = 0;

  // optional .google.cloud.language.v1.Document document = 1;
  if (this->has_document()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->document_);
  }

  // optional .google.cloud.language.v1.EncodingType encoding_type = 2;
  if (this->encoding_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnalyzeEntitiesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.language.v1.AnalyzeEntitiesRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AnalyzeEntitiesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnalyzeEntitiesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.language.v1.AnalyzeEntitiesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.language.v1.AnalyzeEntitiesRequest)
    UnsafeMergeFrom(*source);
  }
}

void AnalyzeEntitiesRequest::MergeFrom(const AnalyzeEntitiesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.language.v1.AnalyzeEntitiesRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AnalyzeEntitiesRequest::UnsafeMergeFrom(const AnalyzeEntitiesRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_document()) {
    mutable_document()->::google::cloud::language::v1::Document::MergeFrom(from.document());
  }
  if (from.encoding_type() != 0) {
    set_encoding_type(from.encoding_type());
  }
}

void AnalyzeEntitiesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.language.v1.AnalyzeEntitiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalyzeEntitiesRequest::CopyFrom(const AnalyzeEntitiesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.language.v1.AnalyzeEntitiesRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AnalyzeEntitiesRequest::IsInitialized() const {

  return true;
}

void AnalyzeEntitiesRequest::Swap(AnalyzeEntitiesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalyzeEntitiesRequest::InternalSwap(AnalyzeEntitiesRequest* other) {
  std::swap(document_, other->document_);
  std::swap(encoding_type_, other->encoding_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnalyzeEntitiesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnalyzeEntitiesRequest_descriptor_;
  metadata.reflection = AnalyzeEntitiesRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AnalyzeEntitiesRequest

// optional .google.cloud.language.v1.Document document = 1;
bool AnalyzeEntitiesRequest::has_document() const {
  return this != internal_default_instance() && document_ != NULL;
}
void AnalyzeEntitiesRequest::clear_document() {
  if (GetArenaNoVirtual() == NULL && document_ != NULL) delete document_;
  document_ = NULL;
}
const ::google::cloud::language::v1::Document& AnalyzeEntitiesRequest::document() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnalyzeEntitiesRequest.document)
  return document_ != NULL ? *document_
                         : *::google::cloud::language::v1::Document::internal_default_instance();
}
::google::cloud::language::v1::Document* AnalyzeEntitiesRequest::mutable_document() {
  
  if (document_ == NULL) {
    document_ = new ::google::cloud::language::v1::Document;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.AnalyzeEntitiesRequest.document)
  return document_;
}
::google::cloud::language::v1::Document* AnalyzeEntitiesRequest::release_document() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.AnalyzeEntitiesRequest.document)
  
  ::google::cloud::language::v1::Document* temp = document_;
  document_ = NULL;
  return temp;
}
void AnalyzeEntitiesRequest::set_allocated_document(::google::cloud::language::v1::Document* document) {
  delete document_;
  document_ = document;
  if (document) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.AnalyzeEntitiesRequest.document)
}

// optional .google.cloud.language.v1.EncodingType encoding_type = 2;
void AnalyzeEntitiesRequest::clear_encoding_type() {
  encoding_type_ = 0;
}
::google::cloud::language::v1::EncodingType AnalyzeEntitiesRequest::encoding_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnalyzeEntitiesRequest.encoding_type)
  return static_cast< ::google::cloud::language::v1::EncodingType >(encoding_type_);
}
void AnalyzeEntitiesRequest::set_encoding_type(::google::cloud::language::v1::EncodingType value) {
  
  encoding_type_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.AnalyzeEntitiesRequest.encoding_type)
}

inline const AnalyzeEntitiesRequest* AnalyzeEntitiesRequest::internal_default_instance() {
  return &AnalyzeEntitiesRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalyzeEntitiesResponse::kEntitiesFieldNumber;
const int AnalyzeEntitiesResponse::kLanguageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalyzeEntitiesResponse::AnalyzeEntitiesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.language.v1.AnalyzeEntitiesResponse)
}

void AnalyzeEntitiesResponse::InitAsDefaultInstance() {
}

AnalyzeEntitiesResponse::AnalyzeEntitiesResponse(const AnalyzeEntitiesResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.cloud.language.v1.AnalyzeEntitiesResponse)
}

void AnalyzeEntitiesResponse::SharedCtor() {
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AnalyzeEntitiesResponse::~AnalyzeEntitiesResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.language.v1.AnalyzeEntitiesResponse)
  SharedDtor();
}

void AnalyzeEntitiesResponse::SharedDtor() {
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AnalyzeEntitiesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnalyzeEntitiesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnalyzeEntitiesResponse_descriptor_;
}

const AnalyzeEntitiesResponse& AnalyzeEntitiesResponse::default_instance() {
  protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AnalyzeEntitiesResponse> AnalyzeEntitiesResponse_default_instance_;

AnalyzeEntitiesResponse* AnalyzeEntitiesResponse::New(::google::protobuf::Arena* arena) const {
  AnalyzeEntitiesResponse* n = new AnalyzeEntitiesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnalyzeEntitiesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.language.v1.AnalyzeEntitiesResponse)
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entities_.Clear();
}

bool AnalyzeEntitiesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.language.v1.AnalyzeEntitiesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.cloud.language.v1.Entity entities = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_entities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_entities()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_entities;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_language;
        break;
      }

      // optional string language = 2;
      case 2: {
        if (tag == 18) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.language.v1.AnalyzeEntitiesResponse.language"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.language.v1.AnalyzeEntitiesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.language.v1.AnalyzeEntitiesResponse)
  return false;
#undef DO_
}

void AnalyzeEntitiesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.language.v1.AnalyzeEntitiesResponse)
  // repeated .google.cloud.language.v1.Entity entities = 1;
  for (unsigned int i = 0, n = this->entities_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entities(i), output);
  }

  // optional string language = 2;
  if (this->language().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.language.v1.AnalyzeEntitiesResponse.language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->language(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.language.v1.AnalyzeEntitiesResponse)
}

::google::protobuf::uint8* AnalyzeEntitiesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.language.v1.AnalyzeEntitiesResponse)
  // repeated .google.cloud.language.v1.Entity entities = 1;
  for (unsigned int i = 0, n = this->entities_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->entities(i), false, target);
  }

  // optional string language = 2;
  if (this->language().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.language.v1.AnalyzeEntitiesResponse.language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->language(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.language.v1.AnalyzeEntitiesResponse)
  return target;
}

size_t AnalyzeEntitiesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.language.v1.AnalyzeEntitiesResponse)
  size_t total_size = 0;

  // optional string language = 2;
  if (this->language().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language());
  }

  // repeated .google.cloud.language.v1.Entity entities = 1;
  {
    unsigned int count = this->entities_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entities(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnalyzeEntitiesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.language.v1.AnalyzeEntitiesResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AnalyzeEntitiesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnalyzeEntitiesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.language.v1.AnalyzeEntitiesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.language.v1.AnalyzeEntitiesResponse)
    UnsafeMergeFrom(*source);
  }
}

void AnalyzeEntitiesResponse::MergeFrom(const AnalyzeEntitiesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.language.v1.AnalyzeEntitiesResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AnalyzeEntitiesResponse::UnsafeMergeFrom(const AnalyzeEntitiesResponse& from) {
  GOOGLE_DCHECK(&from != this);
  entities_.MergeFrom(from.entities_);
  if (from.language().size() > 0) {

    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
}

void AnalyzeEntitiesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.language.v1.AnalyzeEntitiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalyzeEntitiesResponse::CopyFrom(const AnalyzeEntitiesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.language.v1.AnalyzeEntitiesResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AnalyzeEntitiesResponse::IsInitialized() const {

  return true;
}

void AnalyzeEntitiesResponse::Swap(AnalyzeEntitiesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalyzeEntitiesResponse::InternalSwap(AnalyzeEntitiesResponse* other) {
  entities_.UnsafeArenaSwap(&other->entities_);
  language_.Swap(&other->language_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnalyzeEntitiesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnalyzeEntitiesResponse_descriptor_;
  metadata.reflection = AnalyzeEntitiesResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AnalyzeEntitiesResponse

// repeated .google.cloud.language.v1.Entity entities = 1;
int AnalyzeEntitiesResponse::entities_size() const {
  return entities_.size();
}
void AnalyzeEntitiesResponse::clear_entities() {
  entities_.Clear();
}
const ::google::cloud::language::v1::Entity& AnalyzeEntitiesResponse::entities(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnalyzeEntitiesResponse.entities)
  return entities_.Get(index);
}
::google::cloud::language::v1::Entity* AnalyzeEntitiesResponse::mutable_entities(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.AnalyzeEntitiesResponse.entities)
  return entities_.Mutable(index);
}
::google::cloud::language::v1::Entity* AnalyzeEntitiesResponse::add_entities() {
  // @@protoc_insertion_point(field_add:google.cloud.language.v1.AnalyzeEntitiesResponse.entities)
  return entities_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Entity >*
AnalyzeEntitiesResponse::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.language.v1.AnalyzeEntitiesResponse.entities)
  return &entities_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Entity >&
AnalyzeEntitiesResponse::entities() const {
  // @@protoc_insertion_point(field_list:google.cloud.language.v1.AnalyzeEntitiesResponse.entities)
  return entities_;
}

// optional string language = 2;
void AnalyzeEntitiesResponse::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AnalyzeEntitiesResponse::language() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnalyzeEntitiesResponse.language)
  return language_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AnalyzeEntitiesResponse::set_language(const ::std::string& value) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.AnalyzeEntitiesResponse.language)
}
void AnalyzeEntitiesResponse::set_language(const char* value) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.language.v1.AnalyzeEntitiesResponse.language)
}
void AnalyzeEntitiesResponse::set_language(const char* value, size_t size) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.language.v1.AnalyzeEntitiesResponse.language)
}
::std::string* AnalyzeEntitiesResponse::mutable_language() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.AnalyzeEntitiesResponse.language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AnalyzeEntitiesResponse::release_language() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.AnalyzeEntitiesResponse.language)
  
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AnalyzeEntitiesResponse::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    
  } else {
    
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.AnalyzeEntitiesResponse.language)
}

inline const AnalyzeEntitiesResponse* AnalyzeEntitiesResponse::internal_default_instance() {
  return &AnalyzeEntitiesResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalyzeSyntaxRequest::kDocumentFieldNumber;
const int AnalyzeSyntaxRequest::kEncodingTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalyzeSyntaxRequest::AnalyzeSyntaxRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.language.v1.AnalyzeSyntaxRequest)
}

void AnalyzeSyntaxRequest::InitAsDefaultInstance() {
  document_ = const_cast< ::google::cloud::language::v1::Document*>(
      ::google::cloud::language::v1::Document::internal_default_instance());
}

AnalyzeSyntaxRequest::AnalyzeSyntaxRequest(const AnalyzeSyntaxRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.cloud.language.v1.AnalyzeSyntaxRequest)
}

void AnalyzeSyntaxRequest::SharedCtor() {
  document_ = NULL;
  encoding_type_ = 0;
  _cached_size_ = 0;
}

AnalyzeSyntaxRequest::~AnalyzeSyntaxRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.language.v1.AnalyzeSyntaxRequest)
  SharedDtor();
}

void AnalyzeSyntaxRequest::SharedDtor() {
  if (this != &AnalyzeSyntaxRequest_default_instance_.get()) {
    delete document_;
  }
}

void AnalyzeSyntaxRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnalyzeSyntaxRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnalyzeSyntaxRequest_descriptor_;
}

const AnalyzeSyntaxRequest& AnalyzeSyntaxRequest::default_instance() {
  protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AnalyzeSyntaxRequest> AnalyzeSyntaxRequest_default_instance_;

AnalyzeSyntaxRequest* AnalyzeSyntaxRequest::New(::google::protobuf::Arena* arena) const {
  AnalyzeSyntaxRequest* n = new AnalyzeSyntaxRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnalyzeSyntaxRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.language.v1.AnalyzeSyntaxRequest)
  if (GetArenaNoVirtual() == NULL && document_ != NULL) delete document_;
  document_ = NULL;
  encoding_type_ = 0;
}

bool AnalyzeSyntaxRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.language.v1.AnalyzeSyntaxRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.cloud.language.v1.Document document = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_encoding_type;
        break;
      }

      // optional .google.cloud.language.v1.EncodingType encoding_type = 2;
      case 2: {
        if (tag == 16) {
         parse_encoding_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encoding_type(static_cast< ::google::cloud::language::v1::EncodingType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.language.v1.AnalyzeSyntaxRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.language.v1.AnalyzeSyntaxRequest)
  return false;
#undef DO_
}

void AnalyzeSyntaxRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.language.v1.AnalyzeSyntaxRequest)
  // optional .google.cloud.language.v1.Document document = 1;
  if (this->has_document()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->document_, output);
  }

  // optional .google.cloud.language.v1.EncodingType encoding_type = 2;
  if (this->encoding_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->encoding_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.language.v1.AnalyzeSyntaxRequest)
}

::google::protobuf::uint8* AnalyzeSyntaxRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.language.v1.AnalyzeSyntaxRequest)
  // optional .google.cloud.language.v1.Document document = 1;
  if (this->has_document()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->document_, false, target);
  }

  // optional .google.cloud.language.v1.EncodingType encoding_type = 2;
  if (this->encoding_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->encoding_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.language.v1.AnalyzeSyntaxRequest)
  return target;
}

size_t AnalyzeSyntaxRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.language.v1.AnalyzeSyntaxRequest)
  size_t total_size = 0;

  // optional .google.cloud.language.v1.Document document = 1;
  if (this->has_document()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->document_);
  }

  // optional .google.cloud.language.v1.EncodingType encoding_type = 2;
  if (this->encoding_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnalyzeSyntaxRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.language.v1.AnalyzeSyntaxRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AnalyzeSyntaxRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnalyzeSyntaxRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.language.v1.AnalyzeSyntaxRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.language.v1.AnalyzeSyntaxRequest)
    UnsafeMergeFrom(*source);
  }
}

void AnalyzeSyntaxRequest::MergeFrom(const AnalyzeSyntaxRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.language.v1.AnalyzeSyntaxRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AnalyzeSyntaxRequest::UnsafeMergeFrom(const AnalyzeSyntaxRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_document()) {
    mutable_document()->::google::cloud::language::v1::Document::MergeFrom(from.document());
  }
  if (from.encoding_type() != 0) {
    set_encoding_type(from.encoding_type());
  }
}

void AnalyzeSyntaxRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.language.v1.AnalyzeSyntaxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalyzeSyntaxRequest::CopyFrom(const AnalyzeSyntaxRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.language.v1.AnalyzeSyntaxRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AnalyzeSyntaxRequest::IsInitialized() const {

  return true;
}

void AnalyzeSyntaxRequest::Swap(AnalyzeSyntaxRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalyzeSyntaxRequest::InternalSwap(AnalyzeSyntaxRequest* other) {
  std::swap(document_, other->document_);
  std::swap(encoding_type_, other->encoding_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnalyzeSyntaxRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnalyzeSyntaxRequest_descriptor_;
  metadata.reflection = AnalyzeSyntaxRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AnalyzeSyntaxRequest

// optional .google.cloud.language.v1.Document document = 1;
bool AnalyzeSyntaxRequest::has_document() const {
  return this != internal_default_instance() && document_ != NULL;
}
void AnalyzeSyntaxRequest::clear_document() {
  if (GetArenaNoVirtual() == NULL && document_ != NULL) delete document_;
  document_ = NULL;
}
const ::google::cloud::language::v1::Document& AnalyzeSyntaxRequest::document() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnalyzeSyntaxRequest.document)
  return document_ != NULL ? *document_
                         : *::google::cloud::language::v1::Document::internal_default_instance();
}
::google::cloud::language::v1::Document* AnalyzeSyntaxRequest::mutable_document() {
  
  if (document_ == NULL) {
    document_ = new ::google::cloud::language::v1::Document;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.AnalyzeSyntaxRequest.document)
  return document_;
}
::google::cloud::language::v1::Document* AnalyzeSyntaxRequest::release_document() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.AnalyzeSyntaxRequest.document)
  
  ::google::cloud::language::v1::Document* temp = document_;
  document_ = NULL;
  return temp;
}
void AnalyzeSyntaxRequest::set_allocated_document(::google::cloud::language::v1::Document* document) {
  delete document_;
  document_ = document;
  if (document) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.AnalyzeSyntaxRequest.document)
}

// optional .google.cloud.language.v1.EncodingType encoding_type = 2;
void AnalyzeSyntaxRequest::clear_encoding_type() {
  encoding_type_ = 0;
}
::google::cloud::language::v1::EncodingType AnalyzeSyntaxRequest::encoding_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnalyzeSyntaxRequest.encoding_type)
  return static_cast< ::google::cloud::language::v1::EncodingType >(encoding_type_);
}
void AnalyzeSyntaxRequest::set_encoding_type(::google::cloud::language::v1::EncodingType value) {
  
  encoding_type_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.AnalyzeSyntaxRequest.encoding_type)
}

inline const AnalyzeSyntaxRequest* AnalyzeSyntaxRequest::internal_default_instance() {
  return &AnalyzeSyntaxRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalyzeSyntaxResponse::kSentencesFieldNumber;
const int AnalyzeSyntaxResponse::kTokensFieldNumber;
const int AnalyzeSyntaxResponse::kLanguageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalyzeSyntaxResponse::AnalyzeSyntaxResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.language.v1.AnalyzeSyntaxResponse)
}

void AnalyzeSyntaxResponse::InitAsDefaultInstance() {
}

AnalyzeSyntaxResponse::AnalyzeSyntaxResponse(const AnalyzeSyntaxResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.cloud.language.v1.AnalyzeSyntaxResponse)
}

void AnalyzeSyntaxResponse::SharedCtor() {
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AnalyzeSyntaxResponse::~AnalyzeSyntaxResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.language.v1.AnalyzeSyntaxResponse)
  SharedDtor();
}

void AnalyzeSyntaxResponse::SharedDtor() {
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AnalyzeSyntaxResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnalyzeSyntaxResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnalyzeSyntaxResponse_descriptor_;
}

const AnalyzeSyntaxResponse& AnalyzeSyntaxResponse::default_instance() {
  protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AnalyzeSyntaxResponse> AnalyzeSyntaxResponse_default_instance_;

AnalyzeSyntaxResponse* AnalyzeSyntaxResponse::New(::google::protobuf::Arena* arena) const {
  AnalyzeSyntaxResponse* n = new AnalyzeSyntaxResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnalyzeSyntaxResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.language.v1.AnalyzeSyntaxResponse)
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sentences_.Clear();
  tokens_.Clear();
}

bool AnalyzeSyntaxResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.language.v1.AnalyzeSyntaxResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.cloud.language.v1.Sentence sentences = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_sentences:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sentences()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_sentences;
        if (input->ExpectTag(18)) goto parse_loop_tokens;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .google.cloud.language.v1.Token tokens = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_tokens:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tokens()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_tokens;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_language;
        break;
      }

      // optional string language = 3;
      case 3: {
        if (tag == 26) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.language.v1.AnalyzeSyntaxResponse.language"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.language.v1.AnalyzeSyntaxResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.language.v1.AnalyzeSyntaxResponse)
  return false;
#undef DO_
}

void AnalyzeSyntaxResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.language.v1.AnalyzeSyntaxResponse)
  // repeated .google.cloud.language.v1.Sentence sentences = 1;
  for (unsigned int i = 0, n = this->sentences_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sentences(i), output);
  }

  // repeated .google.cloud.language.v1.Token tokens = 2;
  for (unsigned int i = 0, n = this->tokens_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tokens(i), output);
  }

  // optional string language = 3;
  if (this->language().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.language.v1.AnalyzeSyntaxResponse.language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->language(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.language.v1.AnalyzeSyntaxResponse)
}

::google::protobuf::uint8* AnalyzeSyntaxResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.language.v1.AnalyzeSyntaxResponse)
  // repeated .google.cloud.language.v1.Sentence sentences = 1;
  for (unsigned int i = 0, n = this->sentences_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->sentences(i), false, target);
  }

  // repeated .google.cloud.language.v1.Token tokens = 2;
  for (unsigned int i = 0, n = this->tokens_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->tokens(i), false, target);
  }

  // optional string language = 3;
  if (this->language().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.language.v1.AnalyzeSyntaxResponse.language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->language(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.language.v1.AnalyzeSyntaxResponse)
  return target;
}

size_t AnalyzeSyntaxResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.language.v1.AnalyzeSyntaxResponse)
  size_t total_size = 0;

  // optional string language = 3;
  if (this->language().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language());
  }

  // repeated .google.cloud.language.v1.Sentence sentences = 1;
  {
    unsigned int count = this->sentences_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sentences(i));
    }
  }

  // repeated .google.cloud.language.v1.Token tokens = 2;
  {
    unsigned int count = this->tokens_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tokens(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnalyzeSyntaxResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.language.v1.AnalyzeSyntaxResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AnalyzeSyntaxResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnalyzeSyntaxResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.language.v1.AnalyzeSyntaxResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.language.v1.AnalyzeSyntaxResponse)
    UnsafeMergeFrom(*source);
  }
}

void AnalyzeSyntaxResponse::MergeFrom(const AnalyzeSyntaxResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.language.v1.AnalyzeSyntaxResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AnalyzeSyntaxResponse::UnsafeMergeFrom(const AnalyzeSyntaxResponse& from) {
  GOOGLE_DCHECK(&from != this);
  sentences_.MergeFrom(from.sentences_);
  tokens_.MergeFrom(from.tokens_);
  if (from.language().size() > 0) {

    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
}

void AnalyzeSyntaxResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.language.v1.AnalyzeSyntaxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalyzeSyntaxResponse::CopyFrom(const AnalyzeSyntaxResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.language.v1.AnalyzeSyntaxResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AnalyzeSyntaxResponse::IsInitialized() const {

  return true;
}

void AnalyzeSyntaxResponse::Swap(AnalyzeSyntaxResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalyzeSyntaxResponse::InternalSwap(AnalyzeSyntaxResponse* other) {
  sentences_.UnsafeArenaSwap(&other->sentences_);
  tokens_.UnsafeArenaSwap(&other->tokens_);
  language_.Swap(&other->language_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnalyzeSyntaxResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnalyzeSyntaxResponse_descriptor_;
  metadata.reflection = AnalyzeSyntaxResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AnalyzeSyntaxResponse

// repeated .google.cloud.language.v1.Sentence sentences = 1;
int AnalyzeSyntaxResponse::sentences_size() const {
  return sentences_.size();
}
void AnalyzeSyntaxResponse::clear_sentences() {
  sentences_.Clear();
}
const ::google::cloud::language::v1::Sentence& AnalyzeSyntaxResponse::sentences(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnalyzeSyntaxResponse.sentences)
  return sentences_.Get(index);
}
::google::cloud::language::v1::Sentence* AnalyzeSyntaxResponse::mutable_sentences(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.AnalyzeSyntaxResponse.sentences)
  return sentences_.Mutable(index);
}
::google::cloud::language::v1::Sentence* AnalyzeSyntaxResponse::add_sentences() {
  // @@protoc_insertion_point(field_add:google.cloud.language.v1.AnalyzeSyntaxResponse.sentences)
  return sentences_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Sentence >*
AnalyzeSyntaxResponse::mutable_sentences() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.language.v1.AnalyzeSyntaxResponse.sentences)
  return &sentences_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Sentence >&
AnalyzeSyntaxResponse::sentences() const {
  // @@protoc_insertion_point(field_list:google.cloud.language.v1.AnalyzeSyntaxResponse.sentences)
  return sentences_;
}

// repeated .google.cloud.language.v1.Token tokens = 2;
int AnalyzeSyntaxResponse::tokens_size() const {
  return tokens_.size();
}
void AnalyzeSyntaxResponse::clear_tokens() {
  tokens_.Clear();
}
const ::google::cloud::language::v1::Token& AnalyzeSyntaxResponse::tokens(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnalyzeSyntaxResponse.tokens)
  return tokens_.Get(index);
}
::google::cloud::language::v1::Token* AnalyzeSyntaxResponse::mutable_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.AnalyzeSyntaxResponse.tokens)
  return tokens_.Mutable(index);
}
::google::cloud::language::v1::Token* AnalyzeSyntaxResponse::add_tokens() {
  // @@protoc_insertion_point(field_add:google.cloud.language.v1.AnalyzeSyntaxResponse.tokens)
  return tokens_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Token >*
AnalyzeSyntaxResponse::mutable_tokens() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.language.v1.AnalyzeSyntaxResponse.tokens)
  return &tokens_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Token >&
AnalyzeSyntaxResponse::tokens() const {
  // @@protoc_insertion_point(field_list:google.cloud.language.v1.AnalyzeSyntaxResponse.tokens)
  return tokens_;
}

// optional string language = 3;
void AnalyzeSyntaxResponse::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AnalyzeSyntaxResponse::language() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnalyzeSyntaxResponse.language)
  return language_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AnalyzeSyntaxResponse::set_language(const ::std::string& value) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.AnalyzeSyntaxResponse.language)
}
void AnalyzeSyntaxResponse::set_language(const char* value) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.language.v1.AnalyzeSyntaxResponse.language)
}
void AnalyzeSyntaxResponse::set_language(const char* value, size_t size) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.language.v1.AnalyzeSyntaxResponse.language)
}
::std::string* AnalyzeSyntaxResponse::mutable_language() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.AnalyzeSyntaxResponse.language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AnalyzeSyntaxResponse::release_language() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.AnalyzeSyntaxResponse.language)
  
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AnalyzeSyntaxResponse::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    
  } else {
    
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.AnalyzeSyntaxResponse.language)
}

inline const AnalyzeSyntaxResponse* AnalyzeSyntaxResponse::internal_default_instance() {
  return &AnalyzeSyntaxResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnnotateTextRequest_Features::kExtractSyntaxFieldNumber;
const int AnnotateTextRequest_Features::kExtractEntitiesFieldNumber;
const int AnnotateTextRequest_Features::kExtractDocumentSentimentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnnotateTextRequest_Features::AnnotateTextRequest_Features()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.language.v1.AnnotateTextRequest.Features)
}

void AnnotateTextRequest_Features::InitAsDefaultInstance() {
}

AnnotateTextRequest_Features::AnnotateTextRequest_Features(const AnnotateTextRequest_Features& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.cloud.language.v1.AnnotateTextRequest.Features)
}

void AnnotateTextRequest_Features::SharedCtor() {
  ::memset(&extract_syntax_, 0, reinterpret_cast<char*>(&extract_document_sentiment_) -
    reinterpret_cast<char*>(&extract_syntax_) + sizeof(extract_document_sentiment_));
  _cached_size_ = 0;
}

AnnotateTextRequest_Features::~AnnotateTextRequest_Features() {
  // @@protoc_insertion_point(destructor:google.cloud.language.v1.AnnotateTextRequest.Features)
  SharedDtor();
}

void AnnotateTextRequest_Features::SharedDtor() {
}

void AnnotateTextRequest_Features::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnnotateTextRequest_Features::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnnotateTextRequest_Features_descriptor_;
}

const AnnotateTextRequest_Features& AnnotateTextRequest_Features::default_instance() {
  protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AnnotateTextRequest_Features> AnnotateTextRequest_Features_default_instance_;

AnnotateTextRequest_Features* AnnotateTextRequest_Features::New(::google::protobuf::Arena* arena) const {
  AnnotateTextRequest_Features* n = new AnnotateTextRequest_Features;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnnotateTextRequest_Features::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.language.v1.AnnotateTextRequest.Features)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AnnotateTextRequest_Features, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AnnotateTextRequest_Features*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(extract_syntax_, extract_document_sentiment_);

#undef ZR_HELPER_
#undef ZR_

}

bool AnnotateTextRequest_Features::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.language.v1.AnnotateTextRequest.Features)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool extract_syntax = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &extract_syntax_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_extract_entities;
        break;
      }

      // optional bool extract_entities = 2;
      case 2: {
        if (tag == 16) {
         parse_extract_entities:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &extract_entities_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_extract_document_sentiment;
        break;
      }

      // optional bool extract_document_sentiment = 3;
      case 3: {
        if (tag == 24) {
         parse_extract_document_sentiment:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &extract_document_sentiment_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.language.v1.AnnotateTextRequest.Features)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.language.v1.AnnotateTextRequest.Features)
  return false;
#undef DO_
}

void AnnotateTextRequest_Features::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.language.v1.AnnotateTextRequest.Features)
  // optional bool extract_syntax = 1;
  if (this->extract_syntax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->extract_syntax(), output);
  }

  // optional bool extract_entities = 2;
  if (this->extract_entities() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->extract_entities(), output);
  }

  // optional bool extract_document_sentiment = 3;
  if (this->extract_document_sentiment() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->extract_document_sentiment(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.language.v1.AnnotateTextRequest.Features)
}

::google::protobuf::uint8* AnnotateTextRequest_Features::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.language.v1.AnnotateTextRequest.Features)
  // optional bool extract_syntax = 1;
  if (this->extract_syntax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->extract_syntax(), target);
  }

  // optional bool extract_entities = 2;
  if (this->extract_entities() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->extract_entities(), target);
  }

  // optional bool extract_document_sentiment = 3;
  if (this->extract_document_sentiment() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->extract_document_sentiment(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.language.v1.AnnotateTextRequest.Features)
  return target;
}

size_t AnnotateTextRequest_Features::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.language.v1.AnnotateTextRequest.Features)
  size_t total_size = 0;

  // optional bool extract_syntax = 1;
  if (this->extract_syntax() != 0) {
    total_size += 1 + 1;
  }

  // optional bool extract_entities = 2;
  if (this->extract_entities() != 0) {
    total_size += 1 + 1;
  }

  // optional bool extract_document_sentiment = 3;
  if (this->extract_document_sentiment() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnnotateTextRequest_Features::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.language.v1.AnnotateTextRequest.Features)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AnnotateTextRequest_Features* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnnotateTextRequest_Features>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.language.v1.AnnotateTextRequest.Features)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.language.v1.AnnotateTextRequest.Features)
    UnsafeMergeFrom(*source);
  }
}

void AnnotateTextRequest_Features::MergeFrom(const AnnotateTextRequest_Features& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.language.v1.AnnotateTextRequest.Features)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AnnotateTextRequest_Features::UnsafeMergeFrom(const AnnotateTextRequest_Features& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.extract_syntax() != 0) {
    set_extract_syntax(from.extract_syntax());
  }
  if (from.extract_entities() != 0) {
    set_extract_entities(from.extract_entities());
  }
  if (from.extract_document_sentiment() != 0) {
    set_extract_document_sentiment(from.extract_document_sentiment());
  }
}

void AnnotateTextRequest_Features::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.language.v1.AnnotateTextRequest.Features)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnnotateTextRequest_Features::CopyFrom(const AnnotateTextRequest_Features& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.language.v1.AnnotateTextRequest.Features)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AnnotateTextRequest_Features::IsInitialized() const {

  return true;
}

void AnnotateTextRequest_Features::Swap(AnnotateTextRequest_Features* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnnotateTextRequest_Features::InternalSwap(AnnotateTextRequest_Features* other) {
  std::swap(extract_syntax_, other->extract_syntax_);
  std::swap(extract_entities_, other->extract_entities_);
  std::swap(extract_document_sentiment_, other->extract_document_sentiment_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnnotateTextRequest_Features::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnnotateTextRequest_Features_descriptor_;
  metadata.reflection = AnnotateTextRequest_Features_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnnotateTextRequest::kDocumentFieldNumber;
const int AnnotateTextRequest::kFeaturesFieldNumber;
const int AnnotateTextRequest::kEncodingTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnnotateTextRequest::AnnotateTextRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.language.v1.AnnotateTextRequest)
}

void AnnotateTextRequest::InitAsDefaultInstance() {
  document_ = const_cast< ::google::cloud::language::v1::Document*>(
      ::google::cloud::language::v1::Document::internal_default_instance());
  features_ = const_cast< ::google::cloud::language::v1::AnnotateTextRequest_Features*>(
      ::google::cloud::language::v1::AnnotateTextRequest_Features::internal_default_instance());
}

AnnotateTextRequest::AnnotateTextRequest(const AnnotateTextRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.cloud.language.v1.AnnotateTextRequest)
}

void AnnotateTextRequest::SharedCtor() {
  document_ = NULL;
  features_ = NULL;
  encoding_type_ = 0;
  _cached_size_ = 0;
}

AnnotateTextRequest::~AnnotateTextRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.language.v1.AnnotateTextRequest)
  SharedDtor();
}

void AnnotateTextRequest::SharedDtor() {
  if (this != &AnnotateTextRequest_default_instance_.get()) {
    delete document_;
    delete features_;
  }
}

void AnnotateTextRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnnotateTextRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnnotateTextRequest_descriptor_;
}

const AnnotateTextRequest& AnnotateTextRequest::default_instance() {
  protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AnnotateTextRequest> AnnotateTextRequest_default_instance_;

AnnotateTextRequest* AnnotateTextRequest::New(::google::protobuf::Arena* arena) const {
  AnnotateTextRequest* n = new AnnotateTextRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnnotateTextRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.language.v1.AnnotateTextRequest)
  if (GetArenaNoVirtual() == NULL && document_ != NULL) delete document_;
  document_ = NULL;
  if (GetArenaNoVirtual() == NULL && features_ != NULL) delete features_;
  features_ = NULL;
  encoding_type_ = 0;
}

bool AnnotateTextRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.language.v1.AnnotateTextRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.cloud.language.v1.Document document = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_features;
        break;
      }

      // optional .google.cloud.language.v1.AnnotateTextRequest.Features features = 2;
      case 2: {
        if (tag == 18) {
         parse_features:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_features()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_encoding_type;
        break;
      }

      // optional .google.cloud.language.v1.EncodingType encoding_type = 3;
      case 3: {
        if (tag == 24) {
         parse_encoding_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encoding_type(static_cast< ::google::cloud::language::v1::EncodingType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.language.v1.AnnotateTextRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.language.v1.AnnotateTextRequest)
  return false;
#undef DO_
}

void AnnotateTextRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.language.v1.AnnotateTextRequest)
  // optional .google.cloud.language.v1.Document document = 1;
  if (this->has_document()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->document_, output);
  }

  // optional .google.cloud.language.v1.AnnotateTextRequest.Features features = 2;
  if (this->has_features()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->features_, output);
  }

  // optional .google.cloud.language.v1.EncodingType encoding_type = 3;
  if (this->encoding_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->encoding_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.language.v1.AnnotateTextRequest)
}

::google::protobuf::uint8* AnnotateTextRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.language.v1.AnnotateTextRequest)
  // optional .google.cloud.language.v1.Document document = 1;
  if (this->has_document()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->document_, false, target);
  }

  // optional .google.cloud.language.v1.AnnotateTextRequest.Features features = 2;
  if (this->has_features()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->features_, false, target);
  }

  // optional .google.cloud.language.v1.EncodingType encoding_type = 3;
  if (this->encoding_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->encoding_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.language.v1.AnnotateTextRequest)
  return target;
}

size_t AnnotateTextRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.language.v1.AnnotateTextRequest)
  size_t total_size = 0;

  // optional .google.cloud.language.v1.Document document = 1;
  if (this->has_document()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->document_);
  }

  // optional .google.cloud.language.v1.AnnotateTextRequest.Features features = 2;
  if (this->has_features()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->features_);
  }

  // optional .google.cloud.language.v1.EncodingType encoding_type = 3;
  if (this->encoding_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnnotateTextRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.language.v1.AnnotateTextRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AnnotateTextRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnnotateTextRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.language.v1.AnnotateTextRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.language.v1.AnnotateTextRequest)
    UnsafeMergeFrom(*source);
  }
}

void AnnotateTextRequest::MergeFrom(const AnnotateTextRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.language.v1.AnnotateTextRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AnnotateTextRequest::UnsafeMergeFrom(const AnnotateTextRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_document()) {
    mutable_document()->::google::cloud::language::v1::Document::MergeFrom(from.document());
  }
  if (from.has_features()) {
    mutable_features()->::google::cloud::language::v1::AnnotateTextRequest_Features::MergeFrom(from.features());
  }
  if (from.encoding_type() != 0) {
    set_encoding_type(from.encoding_type());
  }
}

void AnnotateTextRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.language.v1.AnnotateTextRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnnotateTextRequest::CopyFrom(const AnnotateTextRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.language.v1.AnnotateTextRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AnnotateTextRequest::IsInitialized() const {

  return true;
}

void AnnotateTextRequest::Swap(AnnotateTextRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnnotateTextRequest::InternalSwap(AnnotateTextRequest* other) {
  std::swap(document_, other->document_);
  std::swap(features_, other->features_);
  std::swap(encoding_type_, other->encoding_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnnotateTextRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnnotateTextRequest_descriptor_;
  metadata.reflection = AnnotateTextRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AnnotateTextRequest_Features

// optional bool extract_syntax = 1;
void AnnotateTextRequest_Features::clear_extract_syntax() {
  extract_syntax_ = false;
}
bool AnnotateTextRequest_Features::extract_syntax() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnnotateTextRequest.Features.extract_syntax)
  return extract_syntax_;
}
void AnnotateTextRequest_Features::set_extract_syntax(bool value) {
  
  extract_syntax_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.AnnotateTextRequest.Features.extract_syntax)
}

// optional bool extract_entities = 2;
void AnnotateTextRequest_Features::clear_extract_entities() {
  extract_entities_ = false;
}
bool AnnotateTextRequest_Features::extract_entities() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnnotateTextRequest.Features.extract_entities)
  return extract_entities_;
}
void AnnotateTextRequest_Features::set_extract_entities(bool value) {
  
  extract_entities_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.AnnotateTextRequest.Features.extract_entities)
}

// optional bool extract_document_sentiment = 3;
void AnnotateTextRequest_Features::clear_extract_document_sentiment() {
  extract_document_sentiment_ = false;
}
bool AnnotateTextRequest_Features::extract_document_sentiment() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnnotateTextRequest.Features.extract_document_sentiment)
  return extract_document_sentiment_;
}
void AnnotateTextRequest_Features::set_extract_document_sentiment(bool value) {
  
  extract_document_sentiment_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.AnnotateTextRequest.Features.extract_document_sentiment)
}

inline const AnnotateTextRequest_Features* AnnotateTextRequest_Features::internal_default_instance() {
  return &AnnotateTextRequest_Features_default_instance_.get();
}
// -------------------------------------------------------------------

// AnnotateTextRequest

// optional .google.cloud.language.v1.Document document = 1;
bool AnnotateTextRequest::has_document() const {
  return this != internal_default_instance() && document_ != NULL;
}
void AnnotateTextRequest::clear_document() {
  if (GetArenaNoVirtual() == NULL && document_ != NULL) delete document_;
  document_ = NULL;
}
const ::google::cloud::language::v1::Document& AnnotateTextRequest::document() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnnotateTextRequest.document)
  return document_ != NULL ? *document_
                         : *::google::cloud::language::v1::Document::internal_default_instance();
}
::google::cloud::language::v1::Document* AnnotateTextRequest::mutable_document() {
  
  if (document_ == NULL) {
    document_ = new ::google::cloud::language::v1::Document;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.AnnotateTextRequest.document)
  return document_;
}
::google::cloud::language::v1::Document* AnnotateTextRequest::release_document() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.AnnotateTextRequest.document)
  
  ::google::cloud::language::v1::Document* temp = document_;
  document_ = NULL;
  return temp;
}
void AnnotateTextRequest::set_allocated_document(::google::cloud::language::v1::Document* document) {
  delete document_;
  document_ = document;
  if (document) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.AnnotateTextRequest.document)
}

// optional .google.cloud.language.v1.AnnotateTextRequest.Features features = 2;
bool AnnotateTextRequest::has_features() const {
  return this != internal_default_instance() && features_ != NULL;
}
void AnnotateTextRequest::clear_features() {
  if (GetArenaNoVirtual() == NULL && features_ != NULL) delete features_;
  features_ = NULL;
}
const ::google::cloud::language::v1::AnnotateTextRequest_Features& AnnotateTextRequest::features() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnnotateTextRequest.features)
  return features_ != NULL ? *features_
                         : *::google::cloud::language::v1::AnnotateTextRequest_Features::internal_default_instance();
}
::google::cloud::language::v1::AnnotateTextRequest_Features* AnnotateTextRequest::mutable_features() {
  
  if (features_ == NULL) {
    features_ = new ::google::cloud::language::v1::AnnotateTextRequest_Features;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.AnnotateTextRequest.features)
  return features_;
}
::google::cloud::language::v1::AnnotateTextRequest_Features* AnnotateTextRequest::release_features() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.AnnotateTextRequest.features)
  
  ::google::cloud::language::v1::AnnotateTextRequest_Features* temp = features_;
  features_ = NULL;
  return temp;
}
void AnnotateTextRequest::set_allocated_features(::google::cloud::language::v1::AnnotateTextRequest_Features* features) {
  delete features_;
  features_ = features;
  if (features) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.AnnotateTextRequest.features)
}

// optional .google.cloud.language.v1.EncodingType encoding_type = 3;
void AnnotateTextRequest::clear_encoding_type() {
  encoding_type_ = 0;
}
::google::cloud::language::v1::EncodingType AnnotateTextRequest::encoding_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnnotateTextRequest.encoding_type)
  return static_cast< ::google::cloud::language::v1::EncodingType >(encoding_type_);
}
void AnnotateTextRequest::set_encoding_type(::google::cloud::language::v1::EncodingType value) {
  
  encoding_type_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.AnnotateTextRequest.encoding_type)
}

inline const AnnotateTextRequest* AnnotateTextRequest::internal_default_instance() {
  return &AnnotateTextRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnnotateTextResponse::kSentencesFieldNumber;
const int AnnotateTextResponse::kTokensFieldNumber;
const int AnnotateTextResponse::kEntitiesFieldNumber;
const int AnnotateTextResponse::kDocumentSentimentFieldNumber;
const int AnnotateTextResponse::kLanguageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnnotateTextResponse::AnnotateTextResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.language.v1.AnnotateTextResponse)
}

void AnnotateTextResponse::InitAsDefaultInstance() {
  document_sentiment_ = const_cast< ::google::cloud::language::v1::Sentiment*>(
      ::google::cloud::language::v1::Sentiment::internal_default_instance());
}

AnnotateTextResponse::AnnotateTextResponse(const AnnotateTextResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.cloud.language.v1.AnnotateTextResponse)
}

void AnnotateTextResponse::SharedCtor() {
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  document_sentiment_ = NULL;
  _cached_size_ = 0;
}

AnnotateTextResponse::~AnnotateTextResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.language.v1.AnnotateTextResponse)
  SharedDtor();
}

void AnnotateTextResponse::SharedDtor() {
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &AnnotateTextResponse_default_instance_.get()) {
    delete document_sentiment_;
  }
}

void AnnotateTextResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnnotateTextResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnnotateTextResponse_descriptor_;
}

const AnnotateTextResponse& AnnotateTextResponse::default_instance() {
  protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AnnotateTextResponse> AnnotateTextResponse_default_instance_;

AnnotateTextResponse* AnnotateTextResponse::New(::google::protobuf::Arena* arena) const {
  AnnotateTextResponse* n = new AnnotateTextResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnnotateTextResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.language.v1.AnnotateTextResponse)
  if (GetArenaNoVirtual() == NULL && document_sentiment_ != NULL) delete document_sentiment_;
  document_sentiment_ = NULL;
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sentences_.Clear();
  tokens_.Clear();
  entities_.Clear();
}

bool AnnotateTextResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.language.v1.AnnotateTextResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.cloud.language.v1.Sentence sentences = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_sentences:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sentences()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_sentences;
        if (input->ExpectTag(18)) goto parse_loop_tokens;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .google.cloud.language.v1.Token tokens = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_tokens:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tokens()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_tokens;
        if (input->ExpectTag(26)) goto parse_loop_entities;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .google.cloud.language.v1.Entity entities = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_entities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_entities()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_entities;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_document_sentiment;
        break;
      }

      // optional .google.cloud.language.v1.Sentiment document_sentiment = 4;
      case 4: {
        if (tag == 34) {
         parse_document_sentiment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document_sentiment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_language;
        break;
      }

      // optional string language = 5;
      case 5: {
        if (tag == 42) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.language.v1.AnnotateTextResponse.language"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.language.v1.AnnotateTextResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.language.v1.AnnotateTextResponse)
  return false;
#undef DO_
}

void AnnotateTextResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.language.v1.AnnotateTextResponse)
  // repeated .google.cloud.language.v1.Sentence sentences = 1;
  for (unsigned int i = 0, n = this->sentences_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sentences(i), output);
  }

  // repeated .google.cloud.language.v1.Token tokens = 2;
  for (unsigned int i = 0, n = this->tokens_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tokens(i), output);
  }

  // repeated .google.cloud.language.v1.Entity entities = 3;
  for (unsigned int i = 0, n = this->entities_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->entities(i), output);
  }

  // optional .google.cloud.language.v1.Sentiment document_sentiment = 4;
  if (this->has_document_sentiment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->document_sentiment_, output);
  }

  // optional string language = 5;
  if (this->language().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.language.v1.AnnotateTextResponse.language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->language(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.language.v1.AnnotateTextResponse)
}

::google::protobuf::uint8* AnnotateTextResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.language.v1.AnnotateTextResponse)
  // repeated .google.cloud.language.v1.Sentence sentences = 1;
  for (unsigned int i = 0, n = this->sentences_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->sentences(i), false, target);
  }

  // repeated .google.cloud.language.v1.Token tokens = 2;
  for (unsigned int i = 0, n = this->tokens_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->tokens(i), false, target);
  }

  // repeated .google.cloud.language.v1.Entity entities = 3;
  for (unsigned int i = 0, n = this->entities_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->entities(i), false, target);
  }

  // optional .google.cloud.language.v1.Sentiment document_sentiment = 4;
  if (this->has_document_sentiment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->document_sentiment_, false, target);
  }

  // optional string language = 5;
  if (this->language().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.language.v1.AnnotateTextResponse.language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->language(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.language.v1.AnnotateTextResponse)
  return target;
}

size_t AnnotateTextResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.language.v1.AnnotateTextResponse)
  size_t total_size = 0;

  // optional .google.cloud.language.v1.Sentiment document_sentiment = 4;
  if (this->has_document_sentiment()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->document_sentiment_);
  }

  // optional string language = 5;
  if (this->language().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language());
  }

  // repeated .google.cloud.language.v1.Sentence sentences = 1;
  {
    unsigned int count = this->sentences_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sentences(i));
    }
  }

  // repeated .google.cloud.language.v1.Token tokens = 2;
  {
    unsigned int count = this->tokens_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tokens(i));
    }
  }

  // repeated .google.cloud.language.v1.Entity entities = 3;
  {
    unsigned int count = this->entities_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entities(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnnotateTextResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.language.v1.AnnotateTextResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AnnotateTextResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnnotateTextResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.language.v1.AnnotateTextResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.language.v1.AnnotateTextResponse)
    UnsafeMergeFrom(*source);
  }
}

void AnnotateTextResponse::MergeFrom(const AnnotateTextResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.language.v1.AnnotateTextResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AnnotateTextResponse::UnsafeMergeFrom(const AnnotateTextResponse& from) {
  GOOGLE_DCHECK(&from != this);
  sentences_.MergeFrom(from.sentences_);
  tokens_.MergeFrom(from.tokens_);
  entities_.MergeFrom(from.entities_);
  if (from.has_document_sentiment()) {
    mutable_document_sentiment()->::google::cloud::language::v1::Sentiment::MergeFrom(from.document_sentiment());
  }
  if (from.language().size() > 0) {

    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
}

void AnnotateTextResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.language.v1.AnnotateTextResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnnotateTextResponse::CopyFrom(const AnnotateTextResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.language.v1.AnnotateTextResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AnnotateTextResponse::IsInitialized() const {

  return true;
}

void AnnotateTextResponse::Swap(AnnotateTextResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnnotateTextResponse::InternalSwap(AnnotateTextResponse* other) {
  sentences_.UnsafeArenaSwap(&other->sentences_);
  tokens_.UnsafeArenaSwap(&other->tokens_);
  entities_.UnsafeArenaSwap(&other->entities_);
  std::swap(document_sentiment_, other->document_sentiment_);
  language_.Swap(&other->language_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnnotateTextResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnnotateTextResponse_descriptor_;
  metadata.reflection = AnnotateTextResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AnnotateTextResponse

// repeated .google.cloud.language.v1.Sentence sentences = 1;
int AnnotateTextResponse::sentences_size() const {
  return sentences_.size();
}
void AnnotateTextResponse::clear_sentences() {
  sentences_.Clear();
}
const ::google::cloud::language::v1::Sentence& AnnotateTextResponse::sentences(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnnotateTextResponse.sentences)
  return sentences_.Get(index);
}
::google::cloud::language::v1::Sentence* AnnotateTextResponse::mutable_sentences(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.AnnotateTextResponse.sentences)
  return sentences_.Mutable(index);
}
::google::cloud::language::v1::Sentence* AnnotateTextResponse::add_sentences() {
  // @@protoc_insertion_point(field_add:google.cloud.language.v1.AnnotateTextResponse.sentences)
  return sentences_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Sentence >*
AnnotateTextResponse::mutable_sentences() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.language.v1.AnnotateTextResponse.sentences)
  return &sentences_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Sentence >&
AnnotateTextResponse::sentences() const {
  // @@protoc_insertion_point(field_list:google.cloud.language.v1.AnnotateTextResponse.sentences)
  return sentences_;
}

// repeated .google.cloud.language.v1.Token tokens = 2;
int AnnotateTextResponse::tokens_size() const {
  return tokens_.size();
}
void AnnotateTextResponse::clear_tokens() {
  tokens_.Clear();
}
const ::google::cloud::language::v1::Token& AnnotateTextResponse::tokens(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnnotateTextResponse.tokens)
  return tokens_.Get(index);
}
::google::cloud::language::v1::Token* AnnotateTextResponse::mutable_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.AnnotateTextResponse.tokens)
  return tokens_.Mutable(index);
}
::google::cloud::language::v1::Token* AnnotateTextResponse::add_tokens() {
  // @@protoc_insertion_point(field_add:google.cloud.language.v1.AnnotateTextResponse.tokens)
  return tokens_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Token >*
AnnotateTextResponse::mutable_tokens() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.language.v1.AnnotateTextResponse.tokens)
  return &tokens_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Token >&
AnnotateTextResponse::tokens() const {
  // @@protoc_insertion_point(field_list:google.cloud.language.v1.AnnotateTextResponse.tokens)
  return tokens_;
}

// repeated .google.cloud.language.v1.Entity entities = 3;
int AnnotateTextResponse::entities_size() const {
  return entities_.size();
}
void AnnotateTextResponse::clear_entities() {
  entities_.Clear();
}
const ::google::cloud::language::v1::Entity& AnnotateTextResponse::entities(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnnotateTextResponse.entities)
  return entities_.Get(index);
}
::google::cloud::language::v1::Entity* AnnotateTextResponse::mutable_entities(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.AnnotateTextResponse.entities)
  return entities_.Mutable(index);
}
::google::cloud::language::v1::Entity* AnnotateTextResponse::add_entities() {
  // @@protoc_insertion_point(field_add:google.cloud.language.v1.AnnotateTextResponse.entities)
  return entities_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Entity >*
AnnotateTextResponse::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.language.v1.AnnotateTextResponse.entities)
  return &entities_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Entity >&
AnnotateTextResponse::entities() const {
  // @@protoc_insertion_point(field_list:google.cloud.language.v1.AnnotateTextResponse.entities)
  return entities_;
}

// optional .google.cloud.language.v1.Sentiment document_sentiment = 4;
bool AnnotateTextResponse::has_document_sentiment() const {
  return this != internal_default_instance() && document_sentiment_ != NULL;
}
void AnnotateTextResponse::clear_document_sentiment() {
  if (GetArenaNoVirtual() == NULL && document_sentiment_ != NULL) delete document_sentiment_;
  document_sentiment_ = NULL;
}
const ::google::cloud::language::v1::Sentiment& AnnotateTextResponse::document_sentiment() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnnotateTextResponse.document_sentiment)
  return document_sentiment_ != NULL ? *document_sentiment_
                         : *::google::cloud::language::v1::Sentiment::internal_default_instance();
}
::google::cloud::language::v1::Sentiment* AnnotateTextResponse::mutable_document_sentiment() {
  
  if (document_sentiment_ == NULL) {
    document_sentiment_ = new ::google::cloud::language::v1::Sentiment;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.AnnotateTextResponse.document_sentiment)
  return document_sentiment_;
}
::google::cloud::language::v1::Sentiment* AnnotateTextResponse::release_document_sentiment() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.AnnotateTextResponse.document_sentiment)
  
  ::google::cloud::language::v1::Sentiment* temp = document_sentiment_;
  document_sentiment_ = NULL;
  return temp;
}
void AnnotateTextResponse::set_allocated_document_sentiment(::google::cloud::language::v1::Sentiment* document_sentiment) {
  delete document_sentiment_;
  document_sentiment_ = document_sentiment;
  if (document_sentiment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.AnnotateTextResponse.document_sentiment)
}

// optional string language = 5;
void AnnotateTextResponse::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AnnotateTextResponse::language() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnnotateTextResponse.language)
  return language_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AnnotateTextResponse::set_language(const ::std::string& value) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.AnnotateTextResponse.language)
}
void AnnotateTextResponse::set_language(const char* value) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.language.v1.AnnotateTextResponse.language)
}
void AnnotateTextResponse::set_language(const char* value, size_t size) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.language.v1.AnnotateTextResponse.language)
}
::std::string* AnnotateTextResponse::mutable_language() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.AnnotateTextResponse.language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AnnotateTextResponse::release_language() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.AnnotateTextResponse.language)
  
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AnnotateTextResponse::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    
  } else {
    
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.AnnotateTextResponse.language)
}

inline const AnnotateTextResponse* AnnotateTextResponse::internal_default_instance() {
  return &AnnotateTextResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace language
}  // namespace cloud
}  // namespace google

// @@protoc_insertion_point(global_scope)
