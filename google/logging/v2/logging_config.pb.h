// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/logging/v2/logging_config.proto

#ifndef PROTOBUF_google_2flogging_2fv2_2flogging_5fconfig_2eproto__INCLUDED
#define PROTOBUF_google_2flogging_2fv2_2flogging_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace logging {
namespace v2 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_google_2flogging_2fv2_2flogging_5fconfig_2eproto();
void protobuf_InitDefaults_google_2flogging_2fv2_2flogging_5fconfig_2eproto();
void protobuf_AssignDesc_google_2flogging_2fv2_2flogging_5fconfig_2eproto();
void protobuf_ShutdownFile_google_2flogging_2fv2_2flogging_5fconfig_2eproto();

class CreateSinkRequest;
class DeleteSinkRequest;
class GetSinkRequest;
class ListSinksRequest;
class ListSinksResponse;
class LogSink;
class UpdateSinkRequest;

enum LogSink_VersionFormat {
  LogSink_VersionFormat_VERSION_FORMAT_UNSPECIFIED = 0,
  LogSink_VersionFormat_V2 = 1,
  LogSink_VersionFormat_V1 = 2,
  LogSink_VersionFormat_LogSink_VersionFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LogSink_VersionFormat_LogSink_VersionFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LogSink_VersionFormat_IsValid(int value);
const LogSink_VersionFormat LogSink_VersionFormat_VersionFormat_MIN = LogSink_VersionFormat_VERSION_FORMAT_UNSPECIFIED;
const LogSink_VersionFormat LogSink_VersionFormat_VersionFormat_MAX = LogSink_VersionFormat_V1;
const int LogSink_VersionFormat_VersionFormat_ARRAYSIZE = LogSink_VersionFormat_VersionFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogSink_VersionFormat_descriptor();
inline const ::std::string& LogSink_VersionFormat_Name(LogSink_VersionFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogSink_VersionFormat_descriptor(), value);
}
inline bool LogSink_VersionFormat_Parse(
    const ::std::string& name, LogSink_VersionFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogSink_VersionFormat>(
    LogSink_VersionFormat_descriptor(), name, value);
}
// ===================================================================

class LogSink : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.LogSink) */ {
 public:
  LogSink();
  virtual ~LogSink();

  LogSink(const LogSink& from);

  inline LogSink& operator=(const LogSink& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogSink& default_instance();

  static const LogSink* internal_default_instance();

  void Swap(LogSink* other);

  // implements Message ----------------------------------------------

  inline LogSink* New() const { return New(NULL); }

  LogSink* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogSink& from);
  void MergeFrom(const LogSink& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogSink* other);
  void UnsafeMergeFrom(const LogSink& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LogSink_VersionFormat VersionFormat;
  static const VersionFormat VERSION_FORMAT_UNSPECIFIED =
    LogSink_VersionFormat_VERSION_FORMAT_UNSPECIFIED;
  static const VersionFormat V2 =
    LogSink_VersionFormat_V2;
  static const VersionFormat V1 =
    LogSink_VersionFormat_V1;
  static inline bool VersionFormat_IsValid(int value) {
    return LogSink_VersionFormat_IsValid(value);
  }
  static const VersionFormat VersionFormat_MIN =
    LogSink_VersionFormat_VersionFormat_MIN;
  static const VersionFormat VersionFormat_MAX =
    LogSink_VersionFormat_VersionFormat_MAX;
  static const int VersionFormat_ARRAYSIZE =
    LogSink_VersionFormat_VersionFormat_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VersionFormat_descriptor() {
    return LogSink_VersionFormat_descriptor();
  }
  static inline const ::std::string& VersionFormat_Name(VersionFormat value) {
    return LogSink_VersionFormat_Name(value);
  }
  static inline bool VersionFormat_Parse(const ::std::string& name,
      VersionFormat* value) {
    return LogSink_VersionFormat_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string destination = 3;
  void clear_destination();
  static const int kDestinationFieldNumber = 3;
  const ::std::string& destination() const;
  void set_destination(const ::std::string& value);
  void set_destination(const char* value);
  void set_destination(const char* value, size_t size);
  ::std::string* mutable_destination();
  ::std::string* release_destination();
  void set_allocated_destination(::std::string* destination);

  // optional string filter = 5;
  void clear_filter();
  static const int kFilterFieldNumber = 5;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // optional .google.logging.v2.LogSink.VersionFormat output_version_format = 6;
  void clear_output_version_format();
  static const int kOutputVersionFormatFieldNumber = 6;
  ::google::logging::v2::LogSink_VersionFormat output_version_format() const;
  void set_output_version_format(::google::logging::v2::LogSink_VersionFormat value);

  // optional string writer_identity = 8;
  void clear_writer_identity();
  static const int kWriterIdentityFieldNumber = 8;
  const ::std::string& writer_identity() const;
  void set_writer_identity(const ::std::string& value);
  void set_writer_identity(const char* value);
  void set_writer_identity(const char* value, size_t size);
  ::std::string* mutable_writer_identity();
  ::std::string* release_writer_identity();
  void set_allocated_writer_identity(::std::string* writer_identity);

  // optional .google.protobuf.Timestamp start_time = 10;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 10;
  const ::google::protobuf::Timestamp& start_time() const;
  ::google::protobuf::Timestamp* mutable_start_time();
  ::google::protobuf::Timestamp* release_start_time();
  void set_allocated_start_time(::google::protobuf::Timestamp* start_time);

  // optional .google.protobuf.Timestamp end_time = 11;
  bool has_end_time() const;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 11;
  const ::google::protobuf::Timestamp& end_time() const;
  ::google::protobuf::Timestamp* mutable_end_time();
  ::google::protobuf::Timestamp* release_end_time();
  void set_allocated_end_time(::google::protobuf::Timestamp* end_time);

  // @@protoc_insertion_point(class_scope:google.logging.v2.LogSink)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr destination_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::protobuf::internal::ArenaStringPtr writer_identity_;
  ::google::protobuf::Timestamp* start_time_;
  ::google::protobuf::Timestamp* end_time_;
  int output_version_format_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2flogging_2fv2_2flogging_5fconfig_2eproto_impl();
  friend void  protobuf_AddDesc_google_2flogging_2fv2_2flogging_5fconfig_2eproto_impl();
  friend void protobuf_AssignDesc_google_2flogging_2fv2_2flogging_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_google_2flogging_2fv2_2flogging_5fconfig_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<LogSink> LogSink_default_instance_;

// -------------------------------------------------------------------

class ListSinksRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.ListSinksRequest) */ {
 public:
  ListSinksRequest();
  virtual ~ListSinksRequest();

  ListSinksRequest(const ListSinksRequest& from);

  inline ListSinksRequest& operator=(const ListSinksRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListSinksRequest& default_instance();

  static const ListSinksRequest* internal_default_instance();

  void Swap(ListSinksRequest* other);

  // implements Message ----------------------------------------------

  inline ListSinksRequest* New() const { return New(NULL); }

  ListSinksRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListSinksRequest& from);
  void MergeFrom(const ListSinksRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ListSinksRequest* other);
  void UnsafeMergeFrom(const ListSinksRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // optional string page_token = 2;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 2;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // optional int32 page_size = 3;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 3;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.logging.v2.ListSinksRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2flogging_2fv2_2flogging_5fconfig_2eproto_impl();
  friend void  protobuf_AddDesc_google_2flogging_2fv2_2flogging_5fconfig_2eproto_impl();
  friend void protobuf_AssignDesc_google_2flogging_2fv2_2flogging_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_google_2flogging_2fv2_2flogging_5fconfig_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ListSinksRequest> ListSinksRequest_default_instance_;

// -------------------------------------------------------------------

class ListSinksResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.ListSinksResponse) */ {
 public:
  ListSinksResponse();
  virtual ~ListSinksResponse();

  ListSinksResponse(const ListSinksResponse& from);

  inline ListSinksResponse& operator=(const ListSinksResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListSinksResponse& default_instance();

  static const ListSinksResponse* internal_default_instance();

  void Swap(ListSinksResponse* other);

  // implements Message ----------------------------------------------

  inline ListSinksResponse* New() const { return New(NULL); }

  ListSinksResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListSinksResponse& from);
  void MergeFrom(const ListSinksResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ListSinksResponse* other);
  void UnsafeMergeFrom(const ListSinksResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.logging.v2.LogSink sinks = 1;
  int sinks_size() const;
  void clear_sinks();
  static const int kSinksFieldNumber = 1;
  const ::google::logging::v2::LogSink& sinks(int index) const;
  ::google::logging::v2::LogSink* mutable_sinks(int index);
  ::google::logging::v2::LogSink* add_sinks();
  ::google::protobuf::RepeatedPtrField< ::google::logging::v2::LogSink >*
      mutable_sinks();
  const ::google::protobuf::RepeatedPtrField< ::google::logging::v2::LogSink >&
      sinks() const;

  // optional string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.logging.v2.ListSinksResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::logging::v2::LogSink > sinks_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2flogging_2fv2_2flogging_5fconfig_2eproto_impl();
  friend void  protobuf_AddDesc_google_2flogging_2fv2_2flogging_5fconfig_2eproto_impl();
  friend void protobuf_AssignDesc_google_2flogging_2fv2_2flogging_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_google_2flogging_2fv2_2flogging_5fconfig_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ListSinksResponse> ListSinksResponse_default_instance_;

// -------------------------------------------------------------------

class GetSinkRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.GetSinkRequest) */ {
 public:
  GetSinkRequest();
  virtual ~GetSinkRequest();

  GetSinkRequest(const GetSinkRequest& from);

  inline GetSinkRequest& operator=(const GetSinkRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSinkRequest& default_instance();

  static const GetSinkRequest* internal_default_instance();

  void Swap(GetSinkRequest* other);

  // implements Message ----------------------------------------------

  inline GetSinkRequest* New() const { return New(NULL); }

  GetSinkRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetSinkRequest& from);
  void MergeFrom(const GetSinkRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetSinkRequest* other);
  void UnsafeMergeFrom(const GetSinkRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sink_name = 1;
  void clear_sink_name();
  static const int kSinkNameFieldNumber = 1;
  const ::std::string& sink_name() const;
  void set_sink_name(const ::std::string& value);
  void set_sink_name(const char* value);
  void set_sink_name(const char* value, size_t size);
  ::std::string* mutable_sink_name();
  ::std::string* release_sink_name();
  void set_allocated_sink_name(::std::string* sink_name);

  // @@protoc_insertion_point(class_scope:google.logging.v2.GetSinkRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sink_name_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2flogging_2fv2_2flogging_5fconfig_2eproto_impl();
  friend void  protobuf_AddDesc_google_2flogging_2fv2_2flogging_5fconfig_2eproto_impl();
  friend void protobuf_AssignDesc_google_2flogging_2fv2_2flogging_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_google_2flogging_2fv2_2flogging_5fconfig_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<GetSinkRequest> GetSinkRequest_default_instance_;

// -------------------------------------------------------------------

class CreateSinkRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.CreateSinkRequest) */ {
 public:
  CreateSinkRequest();
  virtual ~CreateSinkRequest();

  CreateSinkRequest(const CreateSinkRequest& from);

  inline CreateSinkRequest& operator=(const CreateSinkRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateSinkRequest& default_instance();

  static const CreateSinkRequest* internal_default_instance();

  void Swap(CreateSinkRequest* other);

  // implements Message ----------------------------------------------

  inline CreateSinkRequest* New() const { return New(NULL); }

  CreateSinkRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateSinkRequest& from);
  void MergeFrom(const CreateSinkRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CreateSinkRequest* other);
  void UnsafeMergeFrom(const CreateSinkRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // optional .google.logging.v2.LogSink sink = 2;
  bool has_sink() const;
  void clear_sink();
  static const int kSinkFieldNumber = 2;
  const ::google::logging::v2::LogSink& sink() const;
  ::google::logging::v2::LogSink* mutable_sink();
  ::google::logging::v2::LogSink* release_sink();
  void set_allocated_sink(::google::logging::v2::LogSink* sink);

  // optional bool unique_writer_identity = 3;
  void clear_unique_writer_identity();
  static const int kUniqueWriterIdentityFieldNumber = 3;
  bool unique_writer_identity() const;
  void set_unique_writer_identity(bool value);

  // @@protoc_insertion_point(class_scope:google.logging.v2.CreateSinkRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::logging::v2::LogSink* sink_;
  bool unique_writer_identity_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2flogging_2fv2_2flogging_5fconfig_2eproto_impl();
  friend void  protobuf_AddDesc_google_2flogging_2fv2_2flogging_5fconfig_2eproto_impl();
  friend void protobuf_AssignDesc_google_2flogging_2fv2_2flogging_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_google_2flogging_2fv2_2flogging_5fconfig_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<CreateSinkRequest> CreateSinkRequest_default_instance_;

// -------------------------------------------------------------------

class UpdateSinkRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.UpdateSinkRequest) */ {
 public:
  UpdateSinkRequest();
  virtual ~UpdateSinkRequest();

  UpdateSinkRequest(const UpdateSinkRequest& from);

  inline UpdateSinkRequest& operator=(const UpdateSinkRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateSinkRequest& default_instance();

  static const UpdateSinkRequest* internal_default_instance();

  void Swap(UpdateSinkRequest* other);

  // implements Message ----------------------------------------------

  inline UpdateSinkRequest* New() const { return New(NULL); }

  UpdateSinkRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateSinkRequest& from);
  void MergeFrom(const UpdateSinkRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UpdateSinkRequest* other);
  void UnsafeMergeFrom(const UpdateSinkRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sink_name = 1;
  void clear_sink_name();
  static const int kSinkNameFieldNumber = 1;
  const ::std::string& sink_name() const;
  void set_sink_name(const ::std::string& value);
  void set_sink_name(const char* value);
  void set_sink_name(const char* value, size_t size);
  ::std::string* mutable_sink_name();
  ::std::string* release_sink_name();
  void set_allocated_sink_name(::std::string* sink_name);

  // optional .google.logging.v2.LogSink sink = 2;
  bool has_sink() const;
  void clear_sink();
  static const int kSinkFieldNumber = 2;
  const ::google::logging::v2::LogSink& sink() const;
  ::google::logging::v2::LogSink* mutable_sink();
  ::google::logging::v2::LogSink* release_sink();
  void set_allocated_sink(::google::logging::v2::LogSink* sink);

  // optional bool unique_writer_identity = 3;
  void clear_unique_writer_identity();
  static const int kUniqueWriterIdentityFieldNumber = 3;
  bool unique_writer_identity() const;
  void set_unique_writer_identity(bool value);

  // @@protoc_insertion_point(class_scope:google.logging.v2.UpdateSinkRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sink_name_;
  ::google::logging::v2::LogSink* sink_;
  bool unique_writer_identity_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2flogging_2fv2_2flogging_5fconfig_2eproto_impl();
  friend void  protobuf_AddDesc_google_2flogging_2fv2_2flogging_5fconfig_2eproto_impl();
  friend void protobuf_AssignDesc_google_2flogging_2fv2_2flogging_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_google_2flogging_2fv2_2flogging_5fconfig_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<UpdateSinkRequest> UpdateSinkRequest_default_instance_;

// -------------------------------------------------------------------

class DeleteSinkRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.DeleteSinkRequest) */ {
 public:
  DeleteSinkRequest();
  virtual ~DeleteSinkRequest();

  DeleteSinkRequest(const DeleteSinkRequest& from);

  inline DeleteSinkRequest& operator=(const DeleteSinkRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteSinkRequest& default_instance();

  static const DeleteSinkRequest* internal_default_instance();

  void Swap(DeleteSinkRequest* other);

  // implements Message ----------------------------------------------

  inline DeleteSinkRequest* New() const { return New(NULL); }

  DeleteSinkRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteSinkRequest& from);
  void MergeFrom(const DeleteSinkRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteSinkRequest* other);
  void UnsafeMergeFrom(const DeleteSinkRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sink_name = 1;
  void clear_sink_name();
  static const int kSinkNameFieldNumber = 1;
  const ::std::string& sink_name() const;
  void set_sink_name(const ::std::string& value);
  void set_sink_name(const char* value);
  void set_sink_name(const char* value, size_t size);
  ::std::string* mutable_sink_name();
  ::std::string* release_sink_name();
  void set_allocated_sink_name(::std::string* sink_name);

  // @@protoc_insertion_point(class_scope:google.logging.v2.DeleteSinkRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sink_name_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2flogging_2fv2_2flogging_5fconfig_2eproto_impl();
  friend void  protobuf_AddDesc_google_2flogging_2fv2_2flogging_5fconfig_2eproto_impl();
  friend void protobuf_AssignDesc_google_2flogging_2fv2_2flogging_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_google_2flogging_2fv2_2flogging_5fconfig_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<DeleteSinkRequest> DeleteSinkRequest_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LogSink

// optional string name = 1;
inline void LogSink::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogSink::name() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogSink.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogSink::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.logging.v2.LogSink.name)
}
inline void LogSink::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogSink.name)
}
inline void LogSink::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogSink.name)
}
inline ::std::string* LogSink::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogSink.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogSink::release_name() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogSink.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogSink::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogSink.name)
}

// optional string destination = 3;
inline void LogSink::clear_destination() {
  destination_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogSink::destination() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogSink.destination)
  return destination_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogSink::set_destination(const ::std::string& value) {
  
  destination_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.logging.v2.LogSink.destination)
}
inline void LogSink::set_destination(const char* value) {
  
  destination_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogSink.destination)
}
inline void LogSink::set_destination(const char* value, size_t size) {
  
  destination_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogSink.destination)
}
inline ::std::string* LogSink::mutable_destination() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogSink.destination)
  return destination_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogSink::release_destination() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogSink.destination)
  
  return destination_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogSink::set_allocated_destination(::std::string* destination) {
  if (destination != NULL) {
    
  } else {
    
  }
  destination_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destination);
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogSink.destination)
}

// optional string filter = 5;
inline void LogSink::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogSink::filter() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogSink.filter)
  return filter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogSink::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.logging.v2.LogSink.filter)
}
inline void LogSink::set_filter(const char* value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogSink.filter)
}
inline void LogSink::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogSink.filter)
}
inline ::std::string* LogSink::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogSink.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogSink::release_filter() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogSink.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogSink::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogSink.filter)
}

// optional .google.logging.v2.LogSink.VersionFormat output_version_format = 6;
inline void LogSink::clear_output_version_format() {
  output_version_format_ = 0;
}
inline ::google::logging::v2::LogSink_VersionFormat LogSink::output_version_format() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogSink.output_version_format)
  return static_cast< ::google::logging::v2::LogSink_VersionFormat >(output_version_format_);
}
inline void LogSink::set_output_version_format(::google::logging::v2::LogSink_VersionFormat value) {
  
  output_version_format_ = value;
  // @@protoc_insertion_point(field_set:google.logging.v2.LogSink.output_version_format)
}

// optional string writer_identity = 8;
inline void LogSink::clear_writer_identity() {
  writer_identity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogSink::writer_identity() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogSink.writer_identity)
  return writer_identity_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogSink::set_writer_identity(const ::std::string& value) {
  
  writer_identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.logging.v2.LogSink.writer_identity)
}
inline void LogSink::set_writer_identity(const char* value) {
  
  writer_identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogSink.writer_identity)
}
inline void LogSink::set_writer_identity(const char* value, size_t size) {
  
  writer_identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogSink.writer_identity)
}
inline ::std::string* LogSink::mutable_writer_identity() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogSink.writer_identity)
  return writer_identity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogSink::release_writer_identity() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogSink.writer_identity)
  
  return writer_identity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogSink::set_allocated_writer_identity(::std::string* writer_identity) {
  if (writer_identity != NULL) {
    
  } else {
    
  }
  writer_identity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), writer_identity);
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogSink.writer_identity)
}

// optional .google.protobuf.Timestamp start_time = 10;
inline bool LogSink::has_start_time() const {
  return this != internal_default_instance() && start_time_ != NULL;
}
inline void LogSink::clear_start_time() {
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) delete start_time_;
  start_time_ = NULL;
}
inline const ::google::protobuf::Timestamp& LogSink::start_time() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogSink.start_time)
  return start_time_ != NULL ? *start_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
inline ::google::protobuf::Timestamp* LogSink::mutable_start_time() {
  
  if (start_time_ == NULL) {
    start_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogSink.start_time)
  return start_time_;
}
inline ::google::protobuf::Timestamp* LogSink::release_start_time() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogSink.start_time)
  
  ::google::protobuf::Timestamp* temp = start_time_;
  start_time_ = NULL;
  return temp;
}
inline void LogSink::set_allocated_start_time(::google::protobuf::Timestamp* start_time) {
  delete start_time_;
  if (start_time != NULL && start_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_start_time = new ::google::protobuf::Timestamp;
    new_start_time->CopyFrom(*start_time);
    start_time = new_start_time;
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogSink.start_time)
}

// optional .google.protobuf.Timestamp end_time = 11;
inline bool LogSink::has_end_time() const {
  return this != internal_default_instance() && end_time_ != NULL;
}
inline void LogSink::clear_end_time() {
  if (GetArenaNoVirtual() == NULL && end_time_ != NULL) delete end_time_;
  end_time_ = NULL;
}
inline const ::google::protobuf::Timestamp& LogSink::end_time() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogSink.end_time)
  return end_time_ != NULL ? *end_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
inline ::google::protobuf::Timestamp* LogSink::mutable_end_time() {
  
  if (end_time_ == NULL) {
    end_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogSink.end_time)
  return end_time_;
}
inline ::google::protobuf::Timestamp* LogSink::release_end_time() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogSink.end_time)
  
  ::google::protobuf::Timestamp* temp = end_time_;
  end_time_ = NULL;
  return temp;
}
inline void LogSink::set_allocated_end_time(::google::protobuf::Timestamp* end_time) {
  delete end_time_;
  if (end_time != NULL && end_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_end_time = new ::google::protobuf::Timestamp;
    new_end_time->CopyFrom(*end_time);
    end_time = new_end_time;
  }
  end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogSink.end_time)
}

inline const LogSink* LogSink::internal_default_instance() {
  return &LogSink_default_instance_.get();
}
// -------------------------------------------------------------------

// ListSinksRequest

// optional string parent = 1;
inline void ListSinksRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListSinksRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListSinksRequest.parent)
  return parent_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListSinksRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.logging.v2.ListSinksRequest.parent)
}
inline void ListSinksRequest::set_parent(const char* value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.logging.v2.ListSinksRequest.parent)
}
inline void ListSinksRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.ListSinksRequest.parent)
}
inline ::std::string* ListSinksRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListSinksRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListSinksRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.logging.v2.ListSinksRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListSinksRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.ListSinksRequest.parent)
}

// optional string page_token = 2;
inline void ListSinksRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListSinksRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListSinksRequest.page_token)
  return page_token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListSinksRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.logging.v2.ListSinksRequest.page_token)
}
inline void ListSinksRequest::set_page_token(const char* value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.logging.v2.ListSinksRequest.page_token)
}
inline void ListSinksRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.ListSinksRequest.page_token)
}
inline ::std::string* ListSinksRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListSinksRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListSinksRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.logging.v2.ListSinksRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListSinksRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.ListSinksRequest.page_token)
}

// optional int32 page_size = 3;
inline void ListSinksRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListSinksRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListSinksRequest.page_size)
  return page_size_;
}
inline void ListSinksRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.logging.v2.ListSinksRequest.page_size)
}

inline const ListSinksRequest* ListSinksRequest::internal_default_instance() {
  return &ListSinksRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// ListSinksResponse

// repeated .google.logging.v2.LogSink sinks = 1;
inline int ListSinksResponse::sinks_size() const {
  return sinks_.size();
}
inline void ListSinksResponse::clear_sinks() {
  sinks_.Clear();
}
inline const ::google::logging::v2::LogSink& ListSinksResponse::sinks(int index) const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListSinksResponse.sinks)
  return sinks_.Get(index);
}
inline ::google::logging::v2::LogSink* ListSinksResponse::mutable_sinks(int index) {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListSinksResponse.sinks)
  return sinks_.Mutable(index);
}
inline ::google::logging::v2::LogSink* ListSinksResponse::add_sinks() {
  // @@protoc_insertion_point(field_add:google.logging.v2.ListSinksResponse.sinks)
  return sinks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::logging::v2::LogSink >*
ListSinksResponse::mutable_sinks() {
  // @@protoc_insertion_point(field_mutable_list:google.logging.v2.ListSinksResponse.sinks)
  return &sinks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::logging::v2::LogSink >&
ListSinksResponse::sinks() const {
  // @@protoc_insertion_point(field_list:google.logging.v2.ListSinksResponse.sinks)
  return sinks_;
}

// optional string next_page_token = 2;
inline void ListSinksResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListSinksResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListSinksResponse.next_page_token)
  return next_page_token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListSinksResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.logging.v2.ListSinksResponse.next_page_token)
}
inline void ListSinksResponse::set_next_page_token(const char* value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.logging.v2.ListSinksResponse.next_page_token)
}
inline void ListSinksResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.ListSinksResponse.next_page_token)
}
inline ::std::string* ListSinksResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListSinksResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListSinksResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.logging.v2.ListSinksResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListSinksResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.ListSinksResponse.next_page_token)
}

inline const ListSinksResponse* ListSinksResponse::internal_default_instance() {
  return &ListSinksResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// GetSinkRequest

// optional string sink_name = 1;
inline void GetSinkRequest::clear_sink_name() {
  sink_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetSinkRequest::sink_name() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.GetSinkRequest.sink_name)
  return sink_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetSinkRequest::set_sink_name(const ::std::string& value) {
  
  sink_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.logging.v2.GetSinkRequest.sink_name)
}
inline void GetSinkRequest::set_sink_name(const char* value) {
  
  sink_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.logging.v2.GetSinkRequest.sink_name)
}
inline void GetSinkRequest::set_sink_name(const char* value, size_t size) {
  
  sink_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.GetSinkRequest.sink_name)
}
inline ::std::string* GetSinkRequest::mutable_sink_name() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.GetSinkRequest.sink_name)
  return sink_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetSinkRequest::release_sink_name() {
  // @@protoc_insertion_point(field_release:google.logging.v2.GetSinkRequest.sink_name)
  
  return sink_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetSinkRequest::set_allocated_sink_name(::std::string* sink_name) {
  if (sink_name != NULL) {
    
  } else {
    
  }
  sink_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sink_name);
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.GetSinkRequest.sink_name)
}

inline const GetSinkRequest* GetSinkRequest::internal_default_instance() {
  return &GetSinkRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// CreateSinkRequest

// optional string parent = 1;
inline void CreateSinkRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateSinkRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.CreateSinkRequest.parent)
  return parent_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateSinkRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.logging.v2.CreateSinkRequest.parent)
}
inline void CreateSinkRequest::set_parent(const char* value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.logging.v2.CreateSinkRequest.parent)
}
inline void CreateSinkRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.CreateSinkRequest.parent)
}
inline ::std::string* CreateSinkRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.CreateSinkRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateSinkRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.logging.v2.CreateSinkRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateSinkRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.CreateSinkRequest.parent)
}

// optional .google.logging.v2.LogSink sink = 2;
inline bool CreateSinkRequest::has_sink() const {
  return this != internal_default_instance() && sink_ != NULL;
}
inline void CreateSinkRequest::clear_sink() {
  if (GetArenaNoVirtual() == NULL && sink_ != NULL) delete sink_;
  sink_ = NULL;
}
inline const ::google::logging::v2::LogSink& CreateSinkRequest::sink() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.CreateSinkRequest.sink)
  return sink_ != NULL ? *sink_
                         : *::google::logging::v2::LogSink::internal_default_instance();
}
inline ::google::logging::v2::LogSink* CreateSinkRequest::mutable_sink() {
  
  if (sink_ == NULL) {
    sink_ = new ::google::logging::v2::LogSink;
  }
  // @@protoc_insertion_point(field_mutable:google.logging.v2.CreateSinkRequest.sink)
  return sink_;
}
inline ::google::logging::v2::LogSink* CreateSinkRequest::release_sink() {
  // @@protoc_insertion_point(field_release:google.logging.v2.CreateSinkRequest.sink)
  
  ::google::logging::v2::LogSink* temp = sink_;
  sink_ = NULL;
  return temp;
}
inline void CreateSinkRequest::set_allocated_sink(::google::logging::v2::LogSink* sink) {
  delete sink_;
  sink_ = sink;
  if (sink) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.CreateSinkRequest.sink)
}

// optional bool unique_writer_identity = 3;
inline void CreateSinkRequest::clear_unique_writer_identity() {
  unique_writer_identity_ = false;
}
inline bool CreateSinkRequest::unique_writer_identity() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.CreateSinkRequest.unique_writer_identity)
  return unique_writer_identity_;
}
inline void CreateSinkRequest::set_unique_writer_identity(bool value) {
  
  unique_writer_identity_ = value;
  // @@protoc_insertion_point(field_set:google.logging.v2.CreateSinkRequest.unique_writer_identity)
}

inline const CreateSinkRequest* CreateSinkRequest::internal_default_instance() {
  return &CreateSinkRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// UpdateSinkRequest

// optional string sink_name = 1;
inline void UpdateSinkRequest::clear_sink_name() {
  sink_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateSinkRequest::sink_name() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.UpdateSinkRequest.sink_name)
  return sink_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateSinkRequest::set_sink_name(const ::std::string& value) {
  
  sink_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.logging.v2.UpdateSinkRequest.sink_name)
}
inline void UpdateSinkRequest::set_sink_name(const char* value) {
  
  sink_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.logging.v2.UpdateSinkRequest.sink_name)
}
inline void UpdateSinkRequest::set_sink_name(const char* value, size_t size) {
  
  sink_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.UpdateSinkRequest.sink_name)
}
inline ::std::string* UpdateSinkRequest::mutable_sink_name() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.UpdateSinkRequest.sink_name)
  return sink_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateSinkRequest::release_sink_name() {
  // @@protoc_insertion_point(field_release:google.logging.v2.UpdateSinkRequest.sink_name)
  
  return sink_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateSinkRequest::set_allocated_sink_name(::std::string* sink_name) {
  if (sink_name != NULL) {
    
  } else {
    
  }
  sink_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sink_name);
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.UpdateSinkRequest.sink_name)
}

// optional .google.logging.v2.LogSink sink = 2;
inline bool UpdateSinkRequest::has_sink() const {
  return this != internal_default_instance() && sink_ != NULL;
}
inline void UpdateSinkRequest::clear_sink() {
  if (GetArenaNoVirtual() == NULL && sink_ != NULL) delete sink_;
  sink_ = NULL;
}
inline const ::google::logging::v2::LogSink& UpdateSinkRequest::sink() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.UpdateSinkRequest.sink)
  return sink_ != NULL ? *sink_
                         : *::google::logging::v2::LogSink::internal_default_instance();
}
inline ::google::logging::v2::LogSink* UpdateSinkRequest::mutable_sink() {
  
  if (sink_ == NULL) {
    sink_ = new ::google::logging::v2::LogSink;
  }
  // @@protoc_insertion_point(field_mutable:google.logging.v2.UpdateSinkRequest.sink)
  return sink_;
}
inline ::google::logging::v2::LogSink* UpdateSinkRequest::release_sink() {
  // @@protoc_insertion_point(field_release:google.logging.v2.UpdateSinkRequest.sink)
  
  ::google::logging::v2::LogSink* temp = sink_;
  sink_ = NULL;
  return temp;
}
inline void UpdateSinkRequest::set_allocated_sink(::google::logging::v2::LogSink* sink) {
  delete sink_;
  sink_ = sink;
  if (sink) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.UpdateSinkRequest.sink)
}

// optional bool unique_writer_identity = 3;
inline void UpdateSinkRequest::clear_unique_writer_identity() {
  unique_writer_identity_ = false;
}
inline bool UpdateSinkRequest::unique_writer_identity() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.UpdateSinkRequest.unique_writer_identity)
  return unique_writer_identity_;
}
inline void UpdateSinkRequest::set_unique_writer_identity(bool value) {
  
  unique_writer_identity_ = value;
  // @@protoc_insertion_point(field_set:google.logging.v2.UpdateSinkRequest.unique_writer_identity)
}

inline const UpdateSinkRequest* UpdateSinkRequest::internal_default_instance() {
  return &UpdateSinkRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// DeleteSinkRequest

// optional string sink_name = 1;
inline void DeleteSinkRequest::clear_sink_name() {
  sink_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteSinkRequest::sink_name() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.DeleteSinkRequest.sink_name)
  return sink_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteSinkRequest::set_sink_name(const ::std::string& value) {
  
  sink_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.logging.v2.DeleteSinkRequest.sink_name)
}
inline void DeleteSinkRequest::set_sink_name(const char* value) {
  
  sink_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.logging.v2.DeleteSinkRequest.sink_name)
}
inline void DeleteSinkRequest::set_sink_name(const char* value, size_t size) {
  
  sink_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.DeleteSinkRequest.sink_name)
}
inline ::std::string* DeleteSinkRequest::mutable_sink_name() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.DeleteSinkRequest.sink_name)
  return sink_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteSinkRequest::release_sink_name() {
  // @@protoc_insertion_point(field_release:google.logging.v2.DeleteSinkRequest.sink_name)
  
  return sink_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteSinkRequest::set_allocated_sink_name(::std::string* sink_name) {
  if (sink_name != NULL) {
    
  } else {
    
  }
  sink_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sink_name);
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.DeleteSinkRequest.sink_name)
}

inline const DeleteSinkRequest* DeleteSinkRequest::internal_default_instance() {
  return &DeleteSinkRequest_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace logging
}  // namespace google

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::logging::v2::LogSink_VersionFormat> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::logging::v2::LogSink_VersionFormat>() {
  return ::google::logging::v2::LogSink_VersionFormat_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2flogging_2fv2_2flogging_5fconfig_2eproto__INCLUDED
