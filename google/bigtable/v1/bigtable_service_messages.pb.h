// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/v1/bigtable_service_messages.proto

#ifndef PROTOBUF_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto__INCLUDED
#define PROTOBUF_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/bigtable/v1/bigtable_data.pb.h"
#include "google/rpc/status.pb.h"
// @@protoc_insertion_point(includes)

namespace google {
namespace bigtable {
namespace v1 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto();
void protobuf_InitDefaults_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto();
void protobuf_AssignDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto();
void protobuf_ShutdownFile_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto();

class CheckAndMutateRowRequest;
class CheckAndMutateRowResponse;
class MutateRowRequest;
class MutateRowsRequest;
class MutateRowsRequest_Entry;
class MutateRowsResponse;
class ReadModifyWriteRowRequest;
class ReadRowsRequest;
class ReadRowsResponse;
class ReadRowsResponse_Chunk;
class SampleRowKeysRequest;
class SampleRowKeysResponse;

// ===================================================================

class ReadRowsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v1.ReadRowsRequest) */ {
 public:
  ReadRowsRequest();
  virtual ~ReadRowsRequest();

  ReadRowsRequest(const ReadRowsRequest& from);

  inline ReadRowsRequest& operator=(const ReadRowsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadRowsRequest& default_instance();

  enum TargetCase {
    kRowKey = 2,
    kRowRange = 3,
    kRowSet = 8,
    TARGET_NOT_SET = 0,
  };

  static const ReadRowsRequest* internal_default_instance();

  void Swap(ReadRowsRequest* other);

  // implements Message ----------------------------------------------

  inline ReadRowsRequest* New() const { return New(NULL); }

  ReadRowsRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadRowsRequest& from);
  void MergeFrom(const ReadRowsRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReadRowsRequest* other);
  void UnsafeMergeFrom(const ReadRowsRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string table_name = 1;
  void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  const ::std::string& table_name() const;
  void set_table_name(const ::std::string& value);
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  ::std::string* mutable_table_name();
  ::std::string* release_table_name();
  void set_allocated_table_name(::std::string* table_name);

  // optional bytes row_key = 2;
  private:
  bool has_row_key() const;
  public:
  void clear_row_key();
  static const int kRowKeyFieldNumber = 2;
  const ::std::string& row_key() const;
  void set_row_key(const ::std::string& value);
  void set_row_key(const char* value);
  void set_row_key(const void* value, size_t size);
  ::std::string* mutable_row_key();
  ::std::string* release_row_key();
  void set_allocated_row_key(::std::string* row_key);

  // optional .google.bigtable.v1.RowRange row_range = 3;
  bool has_row_range() const;
  void clear_row_range();
  static const int kRowRangeFieldNumber = 3;
  const ::google::bigtable::v1::RowRange& row_range() const;
  ::google::bigtable::v1::RowRange* mutable_row_range();
  ::google::bigtable::v1::RowRange* release_row_range();
  void set_allocated_row_range(::google::bigtable::v1::RowRange* row_range);

  // optional .google.bigtable.v1.RowSet row_set = 8;
  bool has_row_set() const;
  void clear_row_set();
  static const int kRowSetFieldNumber = 8;
  const ::google::bigtable::v1::RowSet& row_set() const;
  ::google::bigtable::v1::RowSet* mutable_row_set();
  ::google::bigtable::v1::RowSet* release_row_set();
  void set_allocated_row_set(::google::bigtable::v1::RowSet* row_set);

  // optional .google.bigtable.v1.RowFilter filter = 5;
  bool has_filter() const;
  void clear_filter();
  static const int kFilterFieldNumber = 5;
  const ::google::bigtable::v1::RowFilter& filter() const;
  ::google::bigtable::v1::RowFilter* mutable_filter();
  ::google::bigtable::v1::RowFilter* release_filter();
  void set_allocated_filter(::google::bigtable::v1::RowFilter* filter);

  // optional bool allow_row_interleaving = 6;
  void clear_allow_row_interleaving();
  static const int kAllowRowInterleavingFieldNumber = 6;
  bool allow_row_interleaving() const;
  void set_allow_row_interleaving(bool value);

  // optional int64 num_rows_limit = 7;
  void clear_num_rows_limit();
  static const int kNumRowsLimitFieldNumber = 7;
  ::google::protobuf::int64 num_rows_limit() const;
  void set_num_rows_limit(::google::protobuf::int64 value);

  TargetCase target_case() const;
  // @@protoc_insertion_point(class_scope:google.bigtable.v1.ReadRowsRequest)
 private:
  inline void set_has_row_key();
  inline void set_has_row_range();
  inline void set_has_row_set();

  inline bool has_target() const;
  void clear_target();
  inline void clear_has_target();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_name_;
  ::google::bigtable::v1::RowFilter* filter_;
  ::google::protobuf::int64 num_rows_limit_;
  bool allow_row_interleaving_;
  union TargetUnion {
    TargetUnion() {}
    ::google::protobuf::internal::ArenaStringPtr row_key_;
    ::google::bigtable::v1::RowRange* row_range_;
    ::google::bigtable::v1::RowSet* row_set_;
  } target_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_InitDefaults_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ReadRowsRequest> ReadRowsRequest_default_instance_;

// -------------------------------------------------------------------

class ReadRowsResponse_Chunk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v1.ReadRowsResponse.Chunk) */ {
 public:
  ReadRowsResponse_Chunk();
  virtual ~ReadRowsResponse_Chunk();

  ReadRowsResponse_Chunk(const ReadRowsResponse_Chunk& from);

  inline ReadRowsResponse_Chunk& operator=(const ReadRowsResponse_Chunk& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadRowsResponse_Chunk& default_instance();

  enum ChunkCase {
    kRowContents = 1,
    kResetRow = 2,
    kCommitRow = 3,
    CHUNK_NOT_SET = 0,
  };

  static const ReadRowsResponse_Chunk* internal_default_instance();

  void Swap(ReadRowsResponse_Chunk* other);

  // implements Message ----------------------------------------------

  inline ReadRowsResponse_Chunk* New() const { return New(NULL); }

  ReadRowsResponse_Chunk* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadRowsResponse_Chunk& from);
  void MergeFrom(const ReadRowsResponse_Chunk& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReadRowsResponse_Chunk* other);
  void UnsafeMergeFrom(const ReadRowsResponse_Chunk& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .google.bigtable.v1.Family row_contents = 1;
  bool has_row_contents() const;
  void clear_row_contents();
  static const int kRowContentsFieldNumber = 1;
  const ::google::bigtable::v1::Family& row_contents() const;
  ::google::bigtable::v1::Family* mutable_row_contents();
  ::google::bigtable::v1::Family* release_row_contents();
  void set_allocated_row_contents(::google::bigtable::v1::Family* row_contents);

  // optional bool reset_row = 2;
  private:
  bool has_reset_row() const;
  public:
  void clear_reset_row();
  static const int kResetRowFieldNumber = 2;
  bool reset_row() const;
  void set_reset_row(bool value);

  // optional bool commit_row = 3;
  private:
  bool has_commit_row() const;
  public:
  void clear_commit_row();
  static const int kCommitRowFieldNumber = 3;
  bool commit_row() const;
  void set_commit_row(bool value);

  ChunkCase chunk_case() const;
  // @@protoc_insertion_point(class_scope:google.bigtable.v1.ReadRowsResponse.Chunk)
 private:
  inline void set_has_row_contents();
  inline void set_has_reset_row();
  inline void set_has_commit_row();

  inline bool has_chunk() const;
  void clear_chunk();
  inline void clear_has_chunk();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ChunkUnion {
    ChunkUnion() {}
    ::google::bigtable::v1::Family* row_contents_;
    bool reset_row_;
    bool commit_row_;
  } chunk_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_InitDefaults_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ReadRowsResponse_Chunk> ReadRowsResponse_Chunk_default_instance_;

// -------------------------------------------------------------------

class ReadRowsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v1.ReadRowsResponse) */ {
 public:
  ReadRowsResponse();
  virtual ~ReadRowsResponse();

  ReadRowsResponse(const ReadRowsResponse& from);

  inline ReadRowsResponse& operator=(const ReadRowsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadRowsResponse& default_instance();

  static const ReadRowsResponse* internal_default_instance();

  void Swap(ReadRowsResponse* other);

  // implements Message ----------------------------------------------

  inline ReadRowsResponse* New() const { return New(NULL); }

  ReadRowsResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadRowsResponse& from);
  void MergeFrom(const ReadRowsResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReadRowsResponse* other);
  void UnsafeMergeFrom(const ReadRowsResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReadRowsResponse_Chunk Chunk;

  // accessors -------------------------------------------------------

  // optional bytes row_key = 1;
  void clear_row_key();
  static const int kRowKeyFieldNumber = 1;
  const ::std::string& row_key() const;
  void set_row_key(const ::std::string& value);
  void set_row_key(const char* value);
  void set_row_key(const void* value, size_t size);
  ::std::string* mutable_row_key();
  ::std::string* release_row_key();
  void set_allocated_row_key(::std::string* row_key);

  // repeated .google.bigtable.v1.ReadRowsResponse.Chunk chunks = 2;
  int chunks_size() const;
  void clear_chunks();
  static const int kChunksFieldNumber = 2;
  const ::google::bigtable::v1::ReadRowsResponse_Chunk& chunks(int index) const;
  ::google::bigtable::v1::ReadRowsResponse_Chunk* mutable_chunks(int index);
  ::google::bigtable::v1::ReadRowsResponse_Chunk* add_chunks();
  ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::ReadRowsResponse_Chunk >*
      mutable_chunks();
  const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::ReadRowsResponse_Chunk >&
      chunks() const;

  // @@protoc_insertion_point(class_scope:google.bigtable.v1.ReadRowsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::ReadRowsResponse_Chunk > chunks_;
  ::google::protobuf::internal::ArenaStringPtr row_key_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ReadRowsResponse> ReadRowsResponse_default_instance_;

// -------------------------------------------------------------------

class SampleRowKeysRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v1.SampleRowKeysRequest) */ {
 public:
  SampleRowKeysRequest();
  virtual ~SampleRowKeysRequest();

  SampleRowKeysRequest(const SampleRowKeysRequest& from);

  inline SampleRowKeysRequest& operator=(const SampleRowKeysRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SampleRowKeysRequest& default_instance();

  static const SampleRowKeysRequest* internal_default_instance();

  void Swap(SampleRowKeysRequest* other);

  // implements Message ----------------------------------------------

  inline SampleRowKeysRequest* New() const { return New(NULL); }

  SampleRowKeysRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SampleRowKeysRequest& from);
  void MergeFrom(const SampleRowKeysRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SampleRowKeysRequest* other);
  void UnsafeMergeFrom(const SampleRowKeysRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string table_name = 1;
  void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  const ::std::string& table_name() const;
  void set_table_name(const ::std::string& value);
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  ::std::string* mutable_table_name();
  ::std::string* release_table_name();
  void set_allocated_table_name(::std::string* table_name);

  // @@protoc_insertion_point(class_scope:google.bigtable.v1.SampleRowKeysRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_name_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SampleRowKeysRequest> SampleRowKeysRequest_default_instance_;

// -------------------------------------------------------------------

class SampleRowKeysResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v1.SampleRowKeysResponse) */ {
 public:
  SampleRowKeysResponse();
  virtual ~SampleRowKeysResponse();

  SampleRowKeysResponse(const SampleRowKeysResponse& from);

  inline SampleRowKeysResponse& operator=(const SampleRowKeysResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SampleRowKeysResponse& default_instance();

  static const SampleRowKeysResponse* internal_default_instance();

  void Swap(SampleRowKeysResponse* other);

  // implements Message ----------------------------------------------

  inline SampleRowKeysResponse* New() const { return New(NULL); }

  SampleRowKeysResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SampleRowKeysResponse& from);
  void MergeFrom(const SampleRowKeysResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SampleRowKeysResponse* other);
  void UnsafeMergeFrom(const SampleRowKeysResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes row_key = 1;
  void clear_row_key();
  static const int kRowKeyFieldNumber = 1;
  const ::std::string& row_key() const;
  void set_row_key(const ::std::string& value);
  void set_row_key(const char* value);
  void set_row_key(const void* value, size_t size);
  ::std::string* mutable_row_key();
  ::std::string* release_row_key();
  void set_allocated_row_key(::std::string* row_key);

  // optional int64 offset_bytes = 2;
  void clear_offset_bytes();
  static const int kOffsetBytesFieldNumber = 2;
  ::google::protobuf::int64 offset_bytes() const;
  void set_offset_bytes(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.bigtable.v1.SampleRowKeysResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr row_key_;
  ::google::protobuf::int64 offset_bytes_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SampleRowKeysResponse> SampleRowKeysResponse_default_instance_;

// -------------------------------------------------------------------

class MutateRowRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v1.MutateRowRequest) */ {
 public:
  MutateRowRequest();
  virtual ~MutateRowRequest();

  MutateRowRequest(const MutateRowRequest& from);

  inline MutateRowRequest& operator=(const MutateRowRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MutateRowRequest& default_instance();

  static const MutateRowRequest* internal_default_instance();

  void Swap(MutateRowRequest* other);

  // implements Message ----------------------------------------------

  inline MutateRowRequest* New() const { return New(NULL); }

  MutateRowRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MutateRowRequest& from);
  void MergeFrom(const MutateRowRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MutateRowRequest* other);
  void UnsafeMergeFrom(const MutateRowRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string table_name = 1;
  void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  const ::std::string& table_name() const;
  void set_table_name(const ::std::string& value);
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  ::std::string* mutable_table_name();
  ::std::string* release_table_name();
  void set_allocated_table_name(::std::string* table_name);

  // optional bytes row_key = 2;
  void clear_row_key();
  static const int kRowKeyFieldNumber = 2;
  const ::std::string& row_key() const;
  void set_row_key(const ::std::string& value);
  void set_row_key(const char* value);
  void set_row_key(const void* value, size_t size);
  ::std::string* mutable_row_key();
  ::std::string* release_row_key();
  void set_allocated_row_key(::std::string* row_key);

  // repeated .google.bigtable.v1.Mutation mutations = 3;
  int mutations_size() const;
  void clear_mutations();
  static const int kMutationsFieldNumber = 3;
  const ::google::bigtable::v1::Mutation& mutations(int index) const;
  ::google::bigtable::v1::Mutation* mutable_mutations(int index);
  ::google::bigtable::v1::Mutation* add_mutations();
  ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::Mutation >*
      mutable_mutations();
  const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::Mutation >&
      mutations() const;

  // @@protoc_insertion_point(class_scope:google.bigtable.v1.MutateRowRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::Mutation > mutations_;
  ::google::protobuf::internal::ArenaStringPtr table_name_;
  ::google::protobuf::internal::ArenaStringPtr row_key_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MutateRowRequest> MutateRowRequest_default_instance_;

// -------------------------------------------------------------------

class MutateRowsRequest_Entry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v1.MutateRowsRequest.Entry) */ {
 public:
  MutateRowsRequest_Entry();
  virtual ~MutateRowsRequest_Entry();

  MutateRowsRequest_Entry(const MutateRowsRequest_Entry& from);

  inline MutateRowsRequest_Entry& operator=(const MutateRowsRequest_Entry& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MutateRowsRequest_Entry& default_instance();

  static const MutateRowsRequest_Entry* internal_default_instance();

  void Swap(MutateRowsRequest_Entry* other);

  // implements Message ----------------------------------------------

  inline MutateRowsRequest_Entry* New() const { return New(NULL); }

  MutateRowsRequest_Entry* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MutateRowsRequest_Entry& from);
  void MergeFrom(const MutateRowsRequest_Entry& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MutateRowsRequest_Entry* other);
  void UnsafeMergeFrom(const MutateRowsRequest_Entry& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes row_key = 1;
  void clear_row_key();
  static const int kRowKeyFieldNumber = 1;
  const ::std::string& row_key() const;
  void set_row_key(const ::std::string& value);
  void set_row_key(const char* value);
  void set_row_key(const void* value, size_t size);
  ::std::string* mutable_row_key();
  ::std::string* release_row_key();
  void set_allocated_row_key(::std::string* row_key);

  // repeated .google.bigtable.v1.Mutation mutations = 2;
  int mutations_size() const;
  void clear_mutations();
  static const int kMutationsFieldNumber = 2;
  const ::google::bigtable::v1::Mutation& mutations(int index) const;
  ::google::bigtable::v1::Mutation* mutable_mutations(int index);
  ::google::bigtable::v1::Mutation* add_mutations();
  ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::Mutation >*
      mutable_mutations();
  const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::Mutation >&
      mutations() const;

  // @@protoc_insertion_point(class_scope:google.bigtable.v1.MutateRowsRequest.Entry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::Mutation > mutations_;
  ::google::protobuf::internal::ArenaStringPtr row_key_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MutateRowsRequest_Entry> MutateRowsRequest_Entry_default_instance_;

// -------------------------------------------------------------------

class MutateRowsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v1.MutateRowsRequest) */ {
 public:
  MutateRowsRequest();
  virtual ~MutateRowsRequest();

  MutateRowsRequest(const MutateRowsRequest& from);

  inline MutateRowsRequest& operator=(const MutateRowsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MutateRowsRequest& default_instance();

  static const MutateRowsRequest* internal_default_instance();

  void Swap(MutateRowsRequest* other);

  // implements Message ----------------------------------------------

  inline MutateRowsRequest* New() const { return New(NULL); }

  MutateRowsRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MutateRowsRequest& from);
  void MergeFrom(const MutateRowsRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MutateRowsRequest* other);
  void UnsafeMergeFrom(const MutateRowsRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MutateRowsRequest_Entry Entry;

  // accessors -------------------------------------------------------

  // optional string table_name = 1;
  void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  const ::std::string& table_name() const;
  void set_table_name(const ::std::string& value);
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  ::std::string* mutable_table_name();
  ::std::string* release_table_name();
  void set_allocated_table_name(::std::string* table_name);

  // repeated .google.bigtable.v1.MutateRowsRequest.Entry entries = 2;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 2;
  const ::google::bigtable::v1::MutateRowsRequest_Entry& entries(int index) const;
  ::google::bigtable::v1::MutateRowsRequest_Entry* mutable_entries(int index);
  ::google::bigtable::v1::MutateRowsRequest_Entry* add_entries();
  ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::MutateRowsRequest_Entry >*
      mutable_entries();
  const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::MutateRowsRequest_Entry >&
      entries() const;

  // @@protoc_insertion_point(class_scope:google.bigtable.v1.MutateRowsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::MutateRowsRequest_Entry > entries_;
  ::google::protobuf::internal::ArenaStringPtr table_name_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MutateRowsRequest> MutateRowsRequest_default_instance_;

// -------------------------------------------------------------------

class MutateRowsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v1.MutateRowsResponse) */ {
 public:
  MutateRowsResponse();
  virtual ~MutateRowsResponse();

  MutateRowsResponse(const MutateRowsResponse& from);

  inline MutateRowsResponse& operator=(const MutateRowsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MutateRowsResponse& default_instance();

  static const MutateRowsResponse* internal_default_instance();

  void Swap(MutateRowsResponse* other);

  // implements Message ----------------------------------------------

  inline MutateRowsResponse* New() const { return New(NULL); }

  MutateRowsResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MutateRowsResponse& from);
  void MergeFrom(const MutateRowsResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MutateRowsResponse* other);
  void UnsafeMergeFrom(const MutateRowsResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.rpc.Status statuses = 1;
  int statuses_size() const;
  void clear_statuses();
  static const int kStatusesFieldNumber = 1;
  const ::google::rpc::Status& statuses(int index) const;
  ::google::rpc::Status* mutable_statuses(int index);
  ::google::rpc::Status* add_statuses();
  ::google::protobuf::RepeatedPtrField< ::google::rpc::Status >*
      mutable_statuses();
  const ::google::protobuf::RepeatedPtrField< ::google::rpc::Status >&
      statuses() const;

  // @@protoc_insertion_point(class_scope:google.bigtable.v1.MutateRowsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::rpc::Status > statuses_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MutateRowsResponse> MutateRowsResponse_default_instance_;

// -------------------------------------------------------------------

class CheckAndMutateRowRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v1.CheckAndMutateRowRequest) */ {
 public:
  CheckAndMutateRowRequest();
  virtual ~CheckAndMutateRowRequest();

  CheckAndMutateRowRequest(const CheckAndMutateRowRequest& from);

  inline CheckAndMutateRowRequest& operator=(const CheckAndMutateRowRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckAndMutateRowRequest& default_instance();

  static const CheckAndMutateRowRequest* internal_default_instance();

  void Swap(CheckAndMutateRowRequest* other);

  // implements Message ----------------------------------------------

  inline CheckAndMutateRowRequest* New() const { return New(NULL); }

  CheckAndMutateRowRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheckAndMutateRowRequest& from);
  void MergeFrom(const CheckAndMutateRowRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CheckAndMutateRowRequest* other);
  void UnsafeMergeFrom(const CheckAndMutateRowRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string table_name = 1;
  void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  const ::std::string& table_name() const;
  void set_table_name(const ::std::string& value);
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  ::std::string* mutable_table_name();
  ::std::string* release_table_name();
  void set_allocated_table_name(::std::string* table_name);

  // optional bytes row_key = 2;
  void clear_row_key();
  static const int kRowKeyFieldNumber = 2;
  const ::std::string& row_key() const;
  void set_row_key(const ::std::string& value);
  void set_row_key(const char* value);
  void set_row_key(const void* value, size_t size);
  ::std::string* mutable_row_key();
  ::std::string* release_row_key();
  void set_allocated_row_key(::std::string* row_key);

  // optional .google.bigtable.v1.RowFilter predicate_filter = 6;
  bool has_predicate_filter() const;
  void clear_predicate_filter();
  static const int kPredicateFilterFieldNumber = 6;
  const ::google::bigtable::v1::RowFilter& predicate_filter() const;
  ::google::bigtable::v1::RowFilter* mutable_predicate_filter();
  ::google::bigtable::v1::RowFilter* release_predicate_filter();
  void set_allocated_predicate_filter(::google::bigtable::v1::RowFilter* predicate_filter);

  // repeated .google.bigtable.v1.Mutation true_mutations = 4;
  int true_mutations_size() const;
  void clear_true_mutations();
  static const int kTrueMutationsFieldNumber = 4;
  const ::google::bigtable::v1::Mutation& true_mutations(int index) const;
  ::google::bigtable::v1::Mutation* mutable_true_mutations(int index);
  ::google::bigtable::v1::Mutation* add_true_mutations();
  ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::Mutation >*
      mutable_true_mutations();
  const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::Mutation >&
      true_mutations() const;

  // repeated .google.bigtable.v1.Mutation false_mutations = 5;
  int false_mutations_size() const;
  void clear_false_mutations();
  static const int kFalseMutationsFieldNumber = 5;
  const ::google::bigtable::v1::Mutation& false_mutations(int index) const;
  ::google::bigtable::v1::Mutation* mutable_false_mutations(int index);
  ::google::bigtable::v1::Mutation* add_false_mutations();
  ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::Mutation >*
      mutable_false_mutations();
  const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::Mutation >&
      false_mutations() const;

  // @@protoc_insertion_point(class_scope:google.bigtable.v1.CheckAndMutateRowRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::Mutation > true_mutations_;
  ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::Mutation > false_mutations_;
  ::google::protobuf::internal::ArenaStringPtr table_name_;
  ::google::protobuf::internal::ArenaStringPtr row_key_;
  ::google::bigtable::v1::RowFilter* predicate_filter_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<CheckAndMutateRowRequest> CheckAndMutateRowRequest_default_instance_;

// -------------------------------------------------------------------

class CheckAndMutateRowResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v1.CheckAndMutateRowResponse) */ {
 public:
  CheckAndMutateRowResponse();
  virtual ~CheckAndMutateRowResponse();

  CheckAndMutateRowResponse(const CheckAndMutateRowResponse& from);

  inline CheckAndMutateRowResponse& operator=(const CheckAndMutateRowResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckAndMutateRowResponse& default_instance();

  static const CheckAndMutateRowResponse* internal_default_instance();

  void Swap(CheckAndMutateRowResponse* other);

  // implements Message ----------------------------------------------

  inline CheckAndMutateRowResponse* New() const { return New(NULL); }

  CheckAndMutateRowResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheckAndMutateRowResponse& from);
  void MergeFrom(const CheckAndMutateRowResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CheckAndMutateRowResponse* other);
  void UnsafeMergeFrom(const CheckAndMutateRowResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool predicate_matched = 1;
  void clear_predicate_matched();
  static const int kPredicateMatchedFieldNumber = 1;
  bool predicate_matched() const;
  void set_predicate_matched(bool value);

  // @@protoc_insertion_point(class_scope:google.bigtable.v1.CheckAndMutateRowResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool predicate_matched_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<CheckAndMutateRowResponse> CheckAndMutateRowResponse_default_instance_;

// -------------------------------------------------------------------

class ReadModifyWriteRowRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v1.ReadModifyWriteRowRequest) */ {
 public:
  ReadModifyWriteRowRequest();
  virtual ~ReadModifyWriteRowRequest();

  ReadModifyWriteRowRequest(const ReadModifyWriteRowRequest& from);

  inline ReadModifyWriteRowRequest& operator=(const ReadModifyWriteRowRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadModifyWriteRowRequest& default_instance();

  static const ReadModifyWriteRowRequest* internal_default_instance();

  void Swap(ReadModifyWriteRowRequest* other);

  // implements Message ----------------------------------------------

  inline ReadModifyWriteRowRequest* New() const { return New(NULL); }

  ReadModifyWriteRowRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadModifyWriteRowRequest& from);
  void MergeFrom(const ReadModifyWriteRowRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReadModifyWriteRowRequest* other);
  void UnsafeMergeFrom(const ReadModifyWriteRowRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string table_name = 1;
  void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  const ::std::string& table_name() const;
  void set_table_name(const ::std::string& value);
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  ::std::string* mutable_table_name();
  ::std::string* release_table_name();
  void set_allocated_table_name(::std::string* table_name);

  // optional bytes row_key = 2;
  void clear_row_key();
  static const int kRowKeyFieldNumber = 2;
  const ::std::string& row_key() const;
  void set_row_key(const ::std::string& value);
  void set_row_key(const char* value);
  void set_row_key(const void* value, size_t size);
  ::std::string* mutable_row_key();
  ::std::string* release_row_key();
  void set_allocated_row_key(::std::string* row_key);

  // repeated .google.bigtable.v1.ReadModifyWriteRule rules = 3;
  int rules_size() const;
  void clear_rules();
  static const int kRulesFieldNumber = 3;
  const ::google::bigtable::v1::ReadModifyWriteRule& rules(int index) const;
  ::google::bigtable::v1::ReadModifyWriteRule* mutable_rules(int index);
  ::google::bigtable::v1::ReadModifyWriteRule* add_rules();
  ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::ReadModifyWriteRule >*
      mutable_rules();
  const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::ReadModifyWriteRule >&
      rules() const;

  // @@protoc_insertion_point(class_scope:google.bigtable.v1.ReadModifyWriteRowRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::ReadModifyWriteRule > rules_;
  ::google::protobuf::internal::ArenaStringPtr table_name_;
  ::google::protobuf::internal::ArenaStringPtr row_key_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ReadModifyWriteRowRequest> ReadModifyWriteRowRequest_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadRowsRequest

// optional string table_name = 1;
inline void ReadRowsRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadRowsRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadRowsRequest.table_name)
  return table_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadRowsRequest::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v1.ReadRowsRequest.table_name)
}
inline void ReadRowsRequest::set_table_name(const char* value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v1.ReadRowsRequest.table_name)
}
inline void ReadRowsRequest::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v1.ReadRowsRequest.table_name)
}
inline ::std::string* ReadRowsRequest::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.ReadRowsRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadRowsRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.ReadRowsRequest.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadRowsRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.ReadRowsRequest.table_name)
}

// optional bytes row_key = 2;
inline bool ReadRowsRequest::has_row_key() const {
  return target_case() == kRowKey;
}
inline void ReadRowsRequest::set_has_row_key() {
  _oneof_case_[0] = kRowKey;
}
inline void ReadRowsRequest::clear_row_key() {
  if (has_row_key()) {
    target_.row_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_target();
  }
}
inline const ::std::string& ReadRowsRequest::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadRowsRequest.row_key)
  if (has_row_key()) {
    return target_.row_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ReadRowsRequest::set_row_key(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v1.ReadRowsRequest.row_key)
  if (!has_row_key()) {
    clear_target();
    set_has_row_key();
    target_.row_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v1.ReadRowsRequest.row_key)
}
inline void ReadRowsRequest::set_row_key(const char* value) {
  if (!has_row_key()) {
    clear_target();
    set_has_row_key();
    target_.row_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v1.ReadRowsRequest.row_key)
}
inline void ReadRowsRequest::set_row_key(const void* value, size_t size) {
  if (!has_row_key()) {
    clear_target();
    set_has_row_key();
    target_.row_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v1.ReadRowsRequest.row_key)
}
inline ::std::string* ReadRowsRequest::mutable_row_key() {
  if (!has_row_key()) {
    clear_target();
    set_has_row_key();
    target_.row_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.ReadRowsRequest.row_key)
  return target_.row_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadRowsRequest::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.ReadRowsRequest.row_key)
  if (has_row_key()) {
    clear_has_target();
    return target_.row_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void ReadRowsRequest::set_allocated_row_key(::std::string* row_key) {
  if (!has_row_key()) {
    target_.row_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_target();
  if (row_key != NULL) {
    set_has_row_key();
    target_.row_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        row_key);
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.ReadRowsRequest.row_key)
}

// optional .google.bigtable.v1.RowRange row_range = 3;
inline bool ReadRowsRequest::has_row_range() const {
  return target_case() == kRowRange;
}
inline void ReadRowsRequest::set_has_row_range() {
  _oneof_case_[0] = kRowRange;
}
inline void ReadRowsRequest::clear_row_range() {
  if (has_row_range()) {
    delete target_.row_range_;
    clear_has_target();
  }
}
inline  const ::google::bigtable::v1::RowRange& ReadRowsRequest::row_range() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadRowsRequest.row_range)
  return has_row_range()
      ? *target_.row_range_
      : ::google::bigtable::v1::RowRange::default_instance();
}
inline ::google::bigtable::v1::RowRange* ReadRowsRequest::mutable_row_range() {
  if (!has_row_range()) {
    clear_target();
    set_has_row_range();
    target_.row_range_ = new ::google::bigtable::v1::RowRange;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.ReadRowsRequest.row_range)
  return target_.row_range_;
}
inline ::google::bigtable::v1::RowRange* ReadRowsRequest::release_row_range() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.ReadRowsRequest.row_range)
  if (has_row_range()) {
    clear_has_target();
    ::google::bigtable::v1::RowRange* temp = target_.row_range_;
    target_.row_range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ReadRowsRequest::set_allocated_row_range(::google::bigtable::v1::RowRange* row_range) {
  clear_target();
  if (row_range) {
    set_has_row_range();
    target_.row_range_ = row_range;
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.ReadRowsRequest.row_range)
}

// optional .google.bigtable.v1.RowSet row_set = 8;
inline bool ReadRowsRequest::has_row_set() const {
  return target_case() == kRowSet;
}
inline void ReadRowsRequest::set_has_row_set() {
  _oneof_case_[0] = kRowSet;
}
inline void ReadRowsRequest::clear_row_set() {
  if (has_row_set()) {
    delete target_.row_set_;
    clear_has_target();
  }
}
inline  const ::google::bigtable::v1::RowSet& ReadRowsRequest::row_set() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadRowsRequest.row_set)
  return has_row_set()
      ? *target_.row_set_
      : ::google::bigtable::v1::RowSet::default_instance();
}
inline ::google::bigtable::v1::RowSet* ReadRowsRequest::mutable_row_set() {
  if (!has_row_set()) {
    clear_target();
    set_has_row_set();
    target_.row_set_ = new ::google::bigtable::v1::RowSet;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.ReadRowsRequest.row_set)
  return target_.row_set_;
}
inline ::google::bigtable::v1::RowSet* ReadRowsRequest::release_row_set() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.ReadRowsRequest.row_set)
  if (has_row_set()) {
    clear_has_target();
    ::google::bigtable::v1::RowSet* temp = target_.row_set_;
    target_.row_set_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ReadRowsRequest::set_allocated_row_set(::google::bigtable::v1::RowSet* row_set) {
  clear_target();
  if (row_set) {
    set_has_row_set();
    target_.row_set_ = row_set;
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.ReadRowsRequest.row_set)
}

// optional .google.bigtable.v1.RowFilter filter = 5;
inline bool ReadRowsRequest::has_filter() const {
  return this != internal_default_instance() && filter_ != NULL;
}
inline void ReadRowsRequest::clear_filter() {
  if (GetArenaNoVirtual() == NULL && filter_ != NULL) delete filter_;
  filter_ = NULL;
}
inline const ::google::bigtable::v1::RowFilter& ReadRowsRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadRowsRequest.filter)
  return filter_ != NULL ? *filter_
                         : *::google::bigtable::v1::RowFilter::internal_default_instance();
}
inline ::google::bigtable::v1::RowFilter* ReadRowsRequest::mutable_filter() {
  
  if (filter_ == NULL) {
    filter_ = new ::google::bigtable::v1::RowFilter;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.ReadRowsRequest.filter)
  return filter_;
}
inline ::google::bigtable::v1::RowFilter* ReadRowsRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.ReadRowsRequest.filter)
  
  ::google::bigtable::v1::RowFilter* temp = filter_;
  filter_ = NULL;
  return temp;
}
inline void ReadRowsRequest::set_allocated_filter(::google::bigtable::v1::RowFilter* filter) {
  delete filter_;
  filter_ = filter;
  if (filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.ReadRowsRequest.filter)
}

// optional bool allow_row_interleaving = 6;
inline void ReadRowsRequest::clear_allow_row_interleaving() {
  allow_row_interleaving_ = false;
}
inline bool ReadRowsRequest::allow_row_interleaving() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadRowsRequest.allow_row_interleaving)
  return allow_row_interleaving_;
}
inline void ReadRowsRequest::set_allow_row_interleaving(bool value) {
  
  allow_row_interleaving_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v1.ReadRowsRequest.allow_row_interleaving)
}

// optional int64 num_rows_limit = 7;
inline void ReadRowsRequest::clear_num_rows_limit() {
  num_rows_limit_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ReadRowsRequest::num_rows_limit() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadRowsRequest.num_rows_limit)
  return num_rows_limit_;
}
inline void ReadRowsRequest::set_num_rows_limit(::google::protobuf::int64 value) {
  
  num_rows_limit_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v1.ReadRowsRequest.num_rows_limit)
}

inline bool ReadRowsRequest::has_target() const {
  return target_case() != TARGET_NOT_SET;
}
inline void ReadRowsRequest::clear_has_target() {
  _oneof_case_[0] = TARGET_NOT_SET;
}
inline ReadRowsRequest::TargetCase ReadRowsRequest::target_case() const {
  return ReadRowsRequest::TargetCase(_oneof_case_[0]);
}
inline const ReadRowsRequest* ReadRowsRequest::internal_default_instance() {
  return &ReadRowsRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// ReadRowsResponse_Chunk

// optional .google.bigtable.v1.Family row_contents = 1;
inline bool ReadRowsResponse_Chunk::has_row_contents() const {
  return chunk_case() == kRowContents;
}
inline void ReadRowsResponse_Chunk::set_has_row_contents() {
  _oneof_case_[0] = kRowContents;
}
inline void ReadRowsResponse_Chunk::clear_row_contents() {
  if (has_row_contents()) {
    delete chunk_.row_contents_;
    clear_has_chunk();
  }
}
inline  const ::google::bigtable::v1::Family& ReadRowsResponse_Chunk::row_contents() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadRowsResponse.Chunk.row_contents)
  return has_row_contents()
      ? *chunk_.row_contents_
      : ::google::bigtable::v1::Family::default_instance();
}
inline ::google::bigtable::v1::Family* ReadRowsResponse_Chunk::mutable_row_contents() {
  if (!has_row_contents()) {
    clear_chunk();
    set_has_row_contents();
    chunk_.row_contents_ = new ::google::bigtable::v1::Family;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.ReadRowsResponse.Chunk.row_contents)
  return chunk_.row_contents_;
}
inline ::google::bigtable::v1::Family* ReadRowsResponse_Chunk::release_row_contents() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.ReadRowsResponse.Chunk.row_contents)
  if (has_row_contents()) {
    clear_has_chunk();
    ::google::bigtable::v1::Family* temp = chunk_.row_contents_;
    chunk_.row_contents_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ReadRowsResponse_Chunk::set_allocated_row_contents(::google::bigtable::v1::Family* row_contents) {
  clear_chunk();
  if (row_contents) {
    set_has_row_contents();
    chunk_.row_contents_ = row_contents;
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.ReadRowsResponse.Chunk.row_contents)
}

// optional bool reset_row = 2;
inline bool ReadRowsResponse_Chunk::has_reset_row() const {
  return chunk_case() == kResetRow;
}
inline void ReadRowsResponse_Chunk::set_has_reset_row() {
  _oneof_case_[0] = kResetRow;
}
inline void ReadRowsResponse_Chunk::clear_reset_row() {
  if (has_reset_row()) {
    chunk_.reset_row_ = false;
    clear_has_chunk();
  }
}
inline bool ReadRowsResponse_Chunk::reset_row() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadRowsResponse.Chunk.reset_row)
  if (has_reset_row()) {
    return chunk_.reset_row_;
  }
  return false;
}
inline void ReadRowsResponse_Chunk::set_reset_row(bool value) {
  if (!has_reset_row()) {
    clear_chunk();
    set_has_reset_row();
  }
  chunk_.reset_row_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v1.ReadRowsResponse.Chunk.reset_row)
}

// optional bool commit_row = 3;
inline bool ReadRowsResponse_Chunk::has_commit_row() const {
  return chunk_case() == kCommitRow;
}
inline void ReadRowsResponse_Chunk::set_has_commit_row() {
  _oneof_case_[0] = kCommitRow;
}
inline void ReadRowsResponse_Chunk::clear_commit_row() {
  if (has_commit_row()) {
    chunk_.commit_row_ = false;
    clear_has_chunk();
  }
}
inline bool ReadRowsResponse_Chunk::commit_row() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadRowsResponse.Chunk.commit_row)
  if (has_commit_row()) {
    return chunk_.commit_row_;
  }
  return false;
}
inline void ReadRowsResponse_Chunk::set_commit_row(bool value) {
  if (!has_commit_row()) {
    clear_chunk();
    set_has_commit_row();
  }
  chunk_.commit_row_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v1.ReadRowsResponse.Chunk.commit_row)
}

inline bool ReadRowsResponse_Chunk::has_chunk() const {
  return chunk_case() != CHUNK_NOT_SET;
}
inline void ReadRowsResponse_Chunk::clear_has_chunk() {
  _oneof_case_[0] = CHUNK_NOT_SET;
}
inline ReadRowsResponse_Chunk::ChunkCase ReadRowsResponse_Chunk::chunk_case() const {
  return ReadRowsResponse_Chunk::ChunkCase(_oneof_case_[0]);
}
inline const ReadRowsResponse_Chunk* ReadRowsResponse_Chunk::internal_default_instance() {
  return &ReadRowsResponse_Chunk_default_instance_.get();
}
// -------------------------------------------------------------------

// ReadRowsResponse

// optional bytes row_key = 1;
inline void ReadRowsResponse::clear_row_key() {
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadRowsResponse::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadRowsResponse.row_key)
  return row_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadRowsResponse::set_row_key(const ::std::string& value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v1.ReadRowsResponse.row_key)
}
inline void ReadRowsResponse::set_row_key(const char* value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v1.ReadRowsResponse.row_key)
}
inline void ReadRowsResponse::set_row_key(const void* value, size_t size) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v1.ReadRowsResponse.row_key)
}
inline ::std::string* ReadRowsResponse::mutable_row_key() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.ReadRowsResponse.row_key)
  return row_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadRowsResponse::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.ReadRowsResponse.row_key)
  
  return row_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadRowsResponse::set_allocated_row_key(::std::string* row_key) {
  if (row_key != NULL) {
    
  } else {
    
  }
  row_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row_key);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.ReadRowsResponse.row_key)
}

// repeated .google.bigtable.v1.ReadRowsResponse.Chunk chunks = 2;
inline int ReadRowsResponse::chunks_size() const {
  return chunks_.size();
}
inline void ReadRowsResponse::clear_chunks() {
  chunks_.Clear();
}
inline const ::google::bigtable::v1::ReadRowsResponse_Chunk& ReadRowsResponse::chunks(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadRowsResponse.chunks)
  return chunks_.Get(index);
}
inline ::google::bigtable::v1::ReadRowsResponse_Chunk* ReadRowsResponse::mutable_chunks(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.ReadRowsResponse.chunks)
  return chunks_.Mutable(index);
}
inline ::google::bigtable::v1::ReadRowsResponse_Chunk* ReadRowsResponse::add_chunks() {
  // @@protoc_insertion_point(field_add:google.bigtable.v1.ReadRowsResponse.chunks)
  return chunks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::ReadRowsResponse_Chunk >*
ReadRowsResponse::mutable_chunks() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v1.ReadRowsResponse.chunks)
  return &chunks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::ReadRowsResponse_Chunk >&
ReadRowsResponse::chunks() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v1.ReadRowsResponse.chunks)
  return chunks_;
}

inline const ReadRowsResponse* ReadRowsResponse::internal_default_instance() {
  return &ReadRowsResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// SampleRowKeysRequest

// optional string table_name = 1;
inline void SampleRowKeysRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SampleRowKeysRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.SampleRowKeysRequest.table_name)
  return table_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SampleRowKeysRequest::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v1.SampleRowKeysRequest.table_name)
}
inline void SampleRowKeysRequest::set_table_name(const char* value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v1.SampleRowKeysRequest.table_name)
}
inline void SampleRowKeysRequest::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v1.SampleRowKeysRequest.table_name)
}
inline ::std::string* SampleRowKeysRequest::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.SampleRowKeysRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SampleRowKeysRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.SampleRowKeysRequest.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SampleRowKeysRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.SampleRowKeysRequest.table_name)
}

inline const SampleRowKeysRequest* SampleRowKeysRequest::internal_default_instance() {
  return &SampleRowKeysRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// SampleRowKeysResponse

// optional bytes row_key = 1;
inline void SampleRowKeysResponse::clear_row_key() {
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SampleRowKeysResponse::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.SampleRowKeysResponse.row_key)
  return row_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SampleRowKeysResponse::set_row_key(const ::std::string& value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v1.SampleRowKeysResponse.row_key)
}
inline void SampleRowKeysResponse::set_row_key(const char* value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v1.SampleRowKeysResponse.row_key)
}
inline void SampleRowKeysResponse::set_row_key(const void* value, size_t size) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v1.SampleRowKeysResponse.row_key)
}
inline ::std::string* SampleRowKeysResponse::mutable_row_key() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.SampleRowKeysResponse.row_key)
  return row_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SampleRowKeysResponse::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.SampleRowKeysResponse.row_key)
  
  return row_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SampleRowKeysResponse::set_allocated_row_key(::std::string* row_key) {
  if (row_key != NULL) {
    
  } else {
    
  }
  row_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row_key);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.SampleRowKeysResponse.row_key)
}

// optional int64 offset_bytes = 2;
inline void SampleRowKeysResponse::clear_offset_bytes() {
  offset_bytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SampleRowKeysResponse::offset_bytes() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.SampleRowKeysResponse.offset_bytes)
  return offset_bytes_;
}
inline void SampleRowKeysResponse::set_offset_bytes(::google::protobuf::int64 value) {
  
  offset_bytes_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v1.SampleRowKeysResponse.offset_bytes)
}

inline const SampleRowKeysResponse* SampleRowKeysResponse::internal_default_instance() {
  return &SampleRowKeysResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// MutateRowRequest

// optional string table_name = 1;
inline void MutateRowRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MutateRowRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.MutateRowRequest.table_name)
  return table_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MutateRowRequest::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v1.MutateRowRequest.table_name)
}
inline void MutateRowRequest::set_table_name(const char* value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v1.MutateRowRequest.table_name)
}
inline void MutateRowRequest::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v1.MutateRowRequest.table_name)
}
inline ::std::string* MutateRowRequest::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.MutateRowRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MutateRowRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.MutateRowRequest.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MutateRowRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.MutateRowRequest.table_name)
}

// optional bytes row_key = 2;
inline void MutateRowRequest::clear_row_key() {
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MutateRowRequest::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.MutateRowRequest.row_key)
  return row_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MutateRowRequest::set_row_key(const ::std::string& value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v1.MutateRowRequest.row_key)
}
inline void MutateRowRequest::set_row_key(const char* value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v1.MutateRowRequest.row_key)
}
inline void MutateRowRequest::set_row_key(const void* value, size_t size) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v1.MutateRowRequest.row_key)
}
inline ::std::string* MutateRowRequest::mutable_row_key() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.MutateRowRequest.row_key)
  return row_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MutateRowRequest::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.MutateRowRequest.row_key)
  
  return row_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MutateRowRequest::set_allocated_row_key(::std::string* row_key) {
  if (row_key != NULL) {
    
  } else {
    
  }
  row_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row_key);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.MutateRowRequest.row_key)
}

// repeated .google.bigtable.v1.Mutation mutations = 3;
inline int MutateRowRequest::mutations_size() const {
  return mutations_.size();
}
inline void MutateRowRequest::clear_mutations() {
  mutations_.Clear();
}
inline const ::google::bigtable::v1::Mutation& MutateRowRequest::mutations(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.MutateRowRequest.mutations)
  return mutations_.Get(index);
}
inline ::google::bigtable::v1::Mutation* MutateRowRequest::mutable_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.MutateRowRequest.mutations)
  return mutations_.Mutable(index);
}
inline ::google::bigtable::v1::Mutation* MutateRowRequest::add_mutations() {
  // @@protoc_insertion_point(field_add:google.bigtable.v1.MutateRowRequest.mutations)
  return mutations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::Mutation >*
MutateRowRequest::mutable_mutations() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v1.MutateRowRequest.mutations)
  return &mutations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::Mutation >&
MutateRowRequest::mutations() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v1.MutateRowRequest.mutations)
  return mutations_;
}

inline const MutateRowRequest* MutateRowRequest::internal_default_instance() {
  return &MutateRowRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// MutateRowsRequest_Entry

// optional bytes row_key = 1;
inline void MutateRowsRequest_Entry::clear_row_key() {
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MutateRowsRequest_Entry::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.MutateRowsRequest.Entry.row_key)
  return row_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MutateRowsRequest_Entry::set_row_key(const ::std::string& value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v1.MutateRowsRequest.Entry.row_key)
}
inline void MutateRowsRequest_Entry::set_row_key(const char* value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v1.MutateRowsRequest.Entry.row_key)
}
inline void MutateRowsRequest_Entry::set_row_key(const void* value, size_t size) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v1.MutateRowsRequest.Entry.row_key)
}
inline ::std::string* MutateRowsRequest_Entry::mutable_row_key() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.MutateRowsRequest.Entry.row_key)
  return row_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MutateRowsRequest_Entry::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.MutateRowsRequest.Entry.row_key)
  
  return row_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MutateRowsRequest_Entry::set_allocated_row_key(::std::string* row_key) {
  if (row_key != NULL) {
    
  } else {
    
  }
  row_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row_key);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.MutateRowsRequest.Entry.row_key)
}

// repeated .google.bigtable.v1.Mutation mutations = 2;
inline int MutateRowsRequest_Entry::mutations_size() const {
  return mutations_.size();
}
inline void MutateRowsRequest_Entry::clear_mutations() {
  mutations_.Clear();
}
inline const ::google::bigtable::v1::Mutation& MutateRowsRequest_Entry::mutations(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.MutateRowsRequest.Entry.mutations)
  return mutations_.Get(index);
}
inline ::google::bigtable::v1::Mutation* MutateRowsRequest_Entry::mutable_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.MutateRowsRequest.Entry.mutations)
  return mutations_.Mutable(index);
}
inline ::google::bigtable::v1::Mutation* MutateRowsRequest_Entry::add_mutations() {
  // @@protoc_insertion_point(field_add:google.bigtable.v1.MutateRowsRequest.Entry.mutations)
  return mutations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::Mutation >*
MutateRowsRequest_Entry::mutable_mutations() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v1.MutateRowsRequest.Entry.mutations)
  return &mutations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::Mutation >&
MutateRowsRequest_Entry::mutations() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v1.MutateRowsRequest.Entry.mutations)
  return mutations_;
}

inline const MutateRowsRequest_Entry* MutateRowsRequest_Entry::internal_default_instance() {
  return &MutateRowsRequest_Entry_default_instance_.get();
}
// -------------------------------------------------------------------

// MutateRowsRequest

// optional string table_name = 1;
inline void MutateRowsRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MutateRowsRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.MutateRowsRequest.table_name)
  return table_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MutateRowsRequest::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v1.MutateRowsRequest.table_name)
}
inline void MutateRowsRequest::set_table_name(const char* value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v1.MutateRowsRequest.table_name)
}
inline void MutateRowsRequest::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v1.MutateRowsRequest.table_name)
}
inline ::std::string* MutateRowsRequest::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.MutateRowsRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MutateRowsRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.MutateRowsRequest.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MutateRowsRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.MutateRowsRequest.table_name)
}

// repeated .google.bigtable.v1.MutateRowsRequest.Entry entries = 2;
inline int MutateRowsRequest::entries_size() const {
  return entries_.size();
}
inline void MutateRowsRequest::clear_entries() {
  entries_.Clear();
}
inline const ::google::bigtable::v1::MutateRowsRequest_Entry& MutateRowsRequest::entries(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.MutateRowsRequest.entries)
  return entries_.Get(index);
}
inline ::google::bigtable::v1::MutateRowsRequest_Entry* MutateRowsRequest::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.MutateRowsRequest.entries)
  return entries_.Mutable(index);
}
inline ::google::bigtable::v1::MutateRowsRequest_Entry* MutateRowsRequest::add_entries() {
  // @@protoc_insertion_point(field_add:google.bigtable.v1.MutateRowsRequest.entries)
  return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::MutateRowsRequest_Entry >*
MutateRowsRequest::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v1.MutateRowsRequest.entries)
  return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::MutateRowsRequest_Entry >&
MutateRowsRequest::entries() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v1.MutateRowsRequest.entries)
  return entries_;
}

inline const MutateRowsRequest* MutateRowsRequest::internal_default_instance() {
  return &MutateRowsRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// MutateRowsResponse

// repeated .google.rpc.Status statuses = 1;
inline int MutateRowsResponse::statuses_size() const {
  return statuses_.size();
}
inline void MutateRowsResponse::clear_statuses() {
  statuses_.Clear();
}
inline const ::google::rpc::Status& MutateRowsResponse::statuses(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.MutateRowsResponse.statuses)
  return statuses_.Get(index);
}
inline ::google::rpc::Status* MutateRowsResponse::mutable_statuses(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.MutateRowsResponse.statuses)
  return statuses_.Mutable(index);
}
inline ::google::rpc::Status* MutateRowsResponse::add_statuses() {
  // @@protoc_insertion_point(field_add:google.bigtable.v1.MutateRowsResponse.statuses)
  return statuses_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::rpc::Status >*
MutateRowsResponse::mutable_statuses() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v1.MutateRowsResponse.statuses)
  return &statuses_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::rpc::Status >&
MutateRowsResponse::statuses() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v1.MutateRowsResponse.statuses)
  return statuses_;
}

inline const MutateRowsResponse* MutateRowsResponse::internal_default_instance() {
  return &MutateRowsResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// CheckAndMutateRowRequest

// optional string table_name = 1;
inline void CheckAndMutateRowRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CheckAndMutateRowRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.CheckAndMutateRowRequest.table_name)
  return table_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckAndMutateRowRequest::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v1.CheckAndMutateRowRequest.table_name)
}
inline void CheckAndMutateRowRequest::set_table_name(const char* value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v1.CheckAndMutateRowRequest.table_name)
}
inline void CheckAndMutateRowRequest::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v1.CheckAndMutateRowRequest.table_name)
}
inline ::std::string* CheckAndMutateRowRequest::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.CheckAndMutateRowRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckAndMutateRowRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.CheckAndMutateRowRequest.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckAndMutateRowRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.CheckAndMutateRowRequest.table_name)
}

// optional bytes row_key = 2;
inline void CheckAndMutateRowRequest::clear_row_key() {
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CheckAndMutateRowRequest::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.CheckAndMutateRowRequest.row_key)
  return row_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckAndMutateRowRequest::set_row_key(const ::std::string& value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v1.CheckAndMutateRowRequest.row_key)
}
inline void CheckAndMutateRowRequest::set_row_key(const char* value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v1.CheckAndMutateRowRequest.row_key)
}
inline void CheckAndMutateRowRequest::set_row_key(const void* value, size_t size) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v1.CheckAndMutateRowRequest.row_key)
}
inline ::std::string* CheckAndMutateRowRequest::mutable_row_key() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.CheckAndMutateRowRequest.row_key)
  return row_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckAndMutateRowRequest::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.CheckAndMutateRowRequest.row_key)
  
  return row_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckAndMutateRowRequest::set_allocated_row_key(::std::string* row_key) {
  if (row_key != NULL) {
    
  } else {
    
  }
  row_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row_key);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.CheckAndMutateRowRequest.row_key)
}

// optional .google.bigtable.v1.RowFilter predicate_filter = 6;
inline bool CheckAndMutateRowRequest::has_predicate_filter() const {
  return this != internal_default_instance() && predicate_filter_ != NULL;
}
inline void CheckAndMutateRowRequest::clear_predicate_filter() {
  if (GetArenaNoVirtual() == NULL && predicate_filter_ != NULL) delete predicate_filter_;
  predicate_filter_ = NULL;
}
inline const ::google::bigtable::v1::RowFilter& CheckAndMutateRowRequest::predicate_filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.CheckAndMutateRowRequest.predicate_filter)
  return predicate_filter_ != NULL ? *predicate_filter_
                         : *::google::bigtable::v1::RowFilter::internal_default_instance();
}
inline ::google::bigtable::v1::RowFilter* CheckAndMutateRowRequest::mutable_predicate_filter() {
  
  if (predicate_filter_ == NULL) {
    predicate_filter_ = new ::google::bigtable::v1::RowFilter;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.CheckAndMutateRowRequest.predicate_filter)
  return predicate_filter_;
}
inline ::google::bigtable::v1::RowFilter* CheckAndMutateRowRequest::release_predicate_filter() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.CheckAndMutateRowRequest.predicate_filter)
  
  ::google::bigtable::v1::RowFilter* temp = predicate_filter_;
  predicate_filter_ = NULL;
  return temp;
}
inline void CheckAndMutateRowRequest::set_allocated_predicate_filter(::google::bigtable::v1::RowFilter* predicate_filter) {
  delete predicate_filter_;
  predicate_filter_ = predicate_filter;
  if (predicate_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.CheckAndMutateRowRequest.predicate_filter)
}

// repeated .google.bigtable.v1.Mutation true_mutations = 4;
inline int CheckAndMutateRowRequest::true_mutations_size() const {
  return true_mutations_.size();
}
inline void CheckAndMutateRowRequest::clear_true_mutations() {
  true_mutations_.Clear();
}
inline const ::google::bigtable::v1::Mutation& CheckAndMutateRowRequest::true_mutations(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.CheckAndMutateRowRequest.true_mutations)
  return true_mutations_.Get(index);
}
inline ::google::bigtable::v1::Mutation* CheckAndMutateRowRequest::mutable_true_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.CheckAndMutateRowRequest.true_mutations)
  return true_mutations_.Mutable(index);
}
inline ::google::bigtable::v1::Mutation* CheckAndMutateRowRequest::add_true_mutations() {
  // @@protoc_insertion_point(field_add:google.bigtable.v1.CheckAndMutateRowRequest.true_mutations)
  return true_mutations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::Mutation >*
CheckAndMutateRowRequest::mutable_true_mutations() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v1.CheckAndMutateRowRequest.true_mutations)
  return &true_mutations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::Mutation >&
CheckAndMutateRowRequest::true_mutations() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v1.CheckAndMutateRowRequest.true_mutations)
  return true_mutations_;
}

// repeated .google.bigtable.v1.Mutation false_mutations = 5;
inline int CheckAndMutateRowRequest::false_mutations_size() const {
  return false_mutations_.size();
}
inline void CheckAndMutateRowRequest::clear_false_mutations() {
  false_mutations_.Clear();
}
inline const ::google::bigtable::v1::Mutation& CheckAndMutateRowRequest::false_mutations(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.CheckAndMutateRowRequest.false_mutations)
  return false_mutations_.Get(index);
}
inline ::google::bigtable::v1::Mutation* CheckAndMutateRowRequest::mutable_false_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.CheckAndMutateRowRequest.false_mutations)
  return false_mutations_.Mutable(index);
}
inline ::google::bigtable::v1::Mutation* CheckAndMutateRowRequest::add_false_mutations() {
  // @@protoc_insertion_point(field_add:google.bigtable.v1.CheckAndMutateRowRequest.false_mutations)
  return false_mutations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::Mutation >*
CheckAndMutateRowRequest::mutable_false_mutations() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v1.CheckAndMutateRowRequest.false_mutations)
  return &false_mutations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::Mutation >&
CheckAndMutateRowRequest::false_mutations() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v1.CheckAndMutateRowRequest.false_mutations)
  return false_mutations_;
}

inline const CheckAndMutateRowRequest* CheckAndMutateRowRequest::internal_default_instance() {
  return &CheckAndMutateRowRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// CheckAndMutateRowResponse

// optional bool predicate_matched = 1;
inline void CheckAndMutateRowResponse::clear_predicate_matched() {
  predicate_matched_ = false;
}
inline bool CheckAndMutateRowResponse::predicate_matched() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.CheckAndMutateRowResponse.predicate_matched)
  return predicate_matched_;
}
inline void CheckAndMutateRowResponse::set_predicate_matched(bool value) {
  
  predicate_matched_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v1.CheckAndMutateRowResponse.predicate_matched)
}

inline const CheckAndMutateRowResponse* CheckAndMutateRowResponse::internal_default_instance() {
  return &CheckAndMutateRowResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// ReadModifyWriteRowRequest

// optional string table_name = 1;
inline void ReadModifyWriteRowRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadModifyWriteRowRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadModifyWriteRowRequest.table_name)
  return table_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadModifyWriteRowRequest::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v1.ReadModifyWriteRowRequest.table_name)
}
inline void ReadModifyWriteRowRequest::set_table_name(const char* value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v1.ReadModifyWriteRowRequest.table_name)
}
inline void ReadModifyWriteRowRequest::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v1.ReadModifyWriteRowRequest.table_name)
}
inline ::std::string* ReadModifyWriteRowRequest::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.ReadModifyWriteRowRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadModifyWriteRowRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.ReadModifyWriteRowRequest.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadModifyWriteRowRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.ReadModifyWriteRowRequest.table_name)
}

// optional bytes row_key = 2;
inline void ReadModifyWriteRowRequest::clear_row_key() {
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadModifyWriteRowRequest::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadModifyWriteRowRequest.row_key)
  return row_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadModifyWriteRowRequest::set_row_key(const ::std::string& value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v1.ReadModifyWriteRowRequest.row_key)
}
inline void ReadModifyWriteRowRequest::set_row_key(const char* value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v1.ReadModifyWriteRowRequest.row_key)
}
inline void ReadModifyWriteRowRequest::set_row_key(const void* value, size_t size) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v1.ReadModifyWriteRowRequest.row_key)
}
inline ::std::string* ReadModifyWriteRowRequest::mutable_row_key() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.ReadModifyWriteRowRequest.row_key)
  return row_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadModifyWriteRowRequest::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.ReadModifyWriteRowRequest.row_key)
  
  return row_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadModifyWriteRowRequest::set_allocated_row_key(::std::string* row_key) {
  if (row_key != NULL) {
    
  } else {
    
  }
  row_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row_key);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.ReadModifyWriteRowRequest.row_key)
}

// repeated .google.bigtable.v1.ReadModifyWriteRule rules = 3;
inline int ReadModifyWriteRowRequest::rules_size() const {
  return rules_.size();
}
inline void ReadModifyWriteRowRequest::clear_rules() {
  rules_.Clear();
}
inline const ::google::bigtable::v1::ReadModifyWriteRule& ReadModifyWriteRowRequest::rules(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadModifyWriteRowRequest.rules)
  return rules_.Get(index);
}
inline ::google::bigtable::v1::ReadModifyWriteRule* ReadModifyWriteRowRequest::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.ReadModifyWriteRowRequest.rules)
  return rules_.Mutable(index);
}
inline ::google::bigtable::v1::ReadModifyWriteRule* ReadModifyWriteRowRequest::add_rules() {
  // @@protoc_insertion_point(field_add:google.bigtable.v1.ReadModifyWriteRowRequest.rules)
  return rules_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::ReadModifyWriteRule >*
ReadModifyWriteRowRequest::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v1.ReadModifyWriteRowRequest.rules)
  return &rules_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::ReadModifyWriteRule >&
ReadModifyWriteRowRequest::rules() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v1.ReadModifyWriteRowRequest.rules)
  return rules_;
}

inline const ReadModifyWriteRowRequest* ReadModifyWriteRowRequest::internal_default_instance() {
  return &ReadModifyWriteRowRequest_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace bigtable
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto__INCLUDED
