// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/monitoring/v3/metric.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/monitoring/v3/metric.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace monitoring {
namespace v3 {

namespace {

const ::google::protobuf::Descriptor* Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeSeries_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeSeries_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_google_2fmonitoring_2fv3_2fmetric_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_google_2fmonitoring_2fv3_2fmetric_2eproto() {
  protobuf_AddDesc_google_2fmonitoring_2fv3_2fmetric_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "google/monitoring/v3/metric.proto");
  GOOGLE_CHECK(file != NULL);
  Point_descriptor_ = file->message_type(0);
  static const int Point_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, value_),
  };
  Point_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Point_descriptor_,
      Point::internal_default_instance(),
      Point_offsets_,
      -1,
      -1,
      -1,
      sizeof(Point),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _internal_metadata_));
  TimeSeries_descriptor_ = file->message_type(1);
  static const int TimeSeries_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeries, metric_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeries, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeries, metric_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeries, value_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeries, points_),
  };
  TimeSeries_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TimeSeries_descriptor_,
      TimeSeries::internal_default_instance(),
      TimeSeries_offsets_,
      -1,
      -1,
      -1,
      sizeof(TimeSeries),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeries, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_google_2fmonitoring_2fv3_2fmetric_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Point_descriptor_, Point::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TimeSeries_descriptor_, TimeSeries::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_google_2fmonitoring_2fv3_2fmetric_2eproto() {
  Point_default_instance_.Shutdown();
  delete Point_reflection_;
  TimeSeries_default_instance_.Shutdown();
  delete TimeSeries_reflection_;
}

void protobuf_InitDefaults_google_2fmonitoring_2fv3_2fmetric_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::api::protobuf_InitDefaults_google_2fapi_2fmetric_2eproto();
  ::google::api::protobuf_InitDefaults_google_2fapi_2fmonitored_5fresource_2eproto();
  ::google::monitoring::v3::protobuf_InitDefaults_google_2fmonitoring_2fv3_2fcommon_2eproto();
  Point_default_instance_.DefaultConstruct();
  TimeSeries_default_instance_.DefaultConstruct();
  Point_default_instance_.get_mutable()->InitAsDefaultInstance();
  TimeSeries_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_google_2fmonitoring_2fv3_2fmetric_2eproto_once_);
void protobuf_InitDefaults_google_2fmonitoring_2fv3_2fmetric_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_google_2fmonitoring_2fv3_2fmetric_2eproto_once_,
                 &protobuf_InitDefaults_google_2fmonitoring_2fv3_2fmetric_2eproto_impl);
}
void protobuf_AddDesc_google_2fmonitoring_2fv3_2fmetric_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_google_2fmonitoring_2fv3_2fmetric_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!google/monitoring/v3/metric.proto\022\024goo"
    "gle.monitoring.v3\032\027google/api/metric.pro"
    "to\032#google/api/monitored_resource.proto\032"
    "!google/monitoring/v3/common.proto\"n\n\005Po"
    "int\0224\n\010interval\030\001 \001(\0132\".google.monitorin"
    "g.v3.TimeInterval\022/\n\005value\030\002 \001(\0132 .googl"
    "e.monitoring.v3.TypedValue\"\210\002\n\nTimeSerie"
    "s\022\"\n\006metric\030\001 \001(\0132\022.google.api.Metric\022/\n"
    "\010resource\030\002 \001(\0132\035.google.api.MonitoredRe"
    "source\022<\n\013metric_kind\030\003 \001(\0162\'.google.api"
    ".MetricDescriptor.MetricKind\022:\n\nvalue_ty"
    "pe\030\004 \001(\0162&.google.api.MetricDescriptor.V"
    "alueType\022+\n\006points\030\005 \003(\0132\033.google.monito"
    "ring.v3.PointB\206\001\n\030com.google.monitoring."
    "v3B\013MetricProtoP\001Z>google.golang.org/gen"
    "proto/googleapis/monitoring/v3;monitorin"
    "g\252\002\032Google.Cloud.Monitoring.V3b\006proto3", 678);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/monitoring/v3/metric.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_AddDesc_google_2fapi_2fmetric_2eproto();
  ::google::api::protobuf_AddDesc_google_2fapi_2fmonitored_5fresource_2eproto();
  ::google::monitoring::v3::protobuf_AddDesc_google_2fmonitoring_2fv3_2fcommon_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_google_2fmonitoring_2fv3_2fmetric_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_google_2fmonitoring_2fv3_2fmetric_2eproto_once_);
void protobuf_AddDesc_google_2fmonitoring_2fv3_2fmetric_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_google_2fmonitoring_2fv3_2fmetric_2eproto_once_,
                 &protobuf_AddDesc_google_2fmonitoring_2fv3_2fmetric_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_google_2fmonitoring_2fv3_2fmetric_2eproto {
  StaticDescriptorInitializer_google_2fmonitoring_2fv3_2fmetric_2eproto() {
    protobuf_AddDesc_google_2fmonitoring_2fv3_2fmetric_2eproto();
  }
} static_descriptor_initializer_google_2fmonitoring_2fv3_2fmetric_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kIntervalFieldNumber;
const int Point::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fmonitoring_2fv3_2fmetric_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.monitoring.v3.Point)
}

void Point::InitAsDefaultInstance() {
  interval_ = const_cast< ::google::monitoring::v3::TimeInterval*>(
      ::google::monitoring::v3::TimeInterval::internal_default_instance());
  value_ = const_cast< ::google::monitoring::v3::TypedValue*>(
      ::google::monitoring::v3::TypedValue::internal_default_instance());
}

Point::Point(const Point& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.monitoring.v3.Point)
}

void Point::SharedCtor() {
  interval_ = NULL;
  value_ = NULL;
  _cached_size_ = 0;
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:google.monitoring.v3.Point)
  SharedDtor();
}

void Point::SharedDtor() {
  if (this != &Point_default_instance_.get()) {
    delete interval_;
    delete value_;
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point_descriptor_;
}

const Point& Point::default_instance() {
  protobuf_InitDefaults_google_2fmonitoring_2fv3_2fmetric_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Point> Point_default_instance_;

Point* Point::New(::google::protobuf::Arena* arena) const {
  Point* n = new Point;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:google.monitoring.v3.Point)
  if (GetArenaNoVirtual() == NULL && interval_ != NULL) delete interval_;
  interval_ = NULL;
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.monitoring.v3.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.monitoring.v3.TimeInterval interval = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_interval()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional .google.monitoring.v3.TypedValue value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.monitoring.v3.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.monitoring.v3.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.monitoring.v3.Point)
  // optional .google.monitoring.v3.TimeInterval interval = 1;
  if (this->has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->interval_, output);
  }

  // optional .google.monitoring.v3.TypedValue value = 2;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.monitoring.v3.Point)
}

::google::protobuf::uint8* Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.monitoring.v3.Point)
  // optional .google.monitoring.v3.TimeInterval interval = 1;
  if (this->has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->interval_, false, target);
  }

  // optional .google.monitoring.v3.TypedValue value = 2;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->value_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.monitoring.v3.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.monitoring.v3.Point)
  size_t total_size = 0;

  // optional .google.monitoring.v3.TimeInterval interval = 1;
  if (this->has_interval()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->interval_);
  }

  // optional .google.monitoring.v3.TypedValue value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.monitoring.v3.Point)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Point* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.monitoring.v3.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.monitoring.v3.Point)
    UnsafeMergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.monitoring.v3.Point)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Point::UnsafeMergeFrom(const Point& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_interval()) {
    mutable_interval()->::google::monitoring::v3::TimeInterval::MergeFrom(from.interval());
  }
  if (from.has_value()) {
    mutable_value()->::google::monitoring::v3::TypedValue::MergeFrom(from.value());
  }
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.monitoring.v3.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.monitoring.v3.Point)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Point::IsInitialized() const {

  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  std::swap(interval_, other->interval_);
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point_descriptor_;
  metadata.reflection = Point_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Point

// optional .google.monitoring.v3.TimeInterval interval = 1;
bool Point::has_interval() const {
  return this != internal_default_instance() && interval_ != NULL;
}
void Point::clear_interval() {
  if (GetArenaNoVirtual() == NULL && interval_ != NULL) delete interval_;
  interval_ = NULL;
}
const ::google::monitoring::v3::TimeInterval& Point::interval() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.Point.interval)
  return interval_ != NULL ? *interval_
                         : *::google::monitoring::v3::TimeInterval::internal_default_instance();
}
::google::monitoring::v3::TimeInterval* Point::mutable_interval() {
  
  if (interval_ == NULL) {
    interval_ = new ::google::monitoring::v3::TimeInterval;
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.Point.interval)
  return interval_;
}
::google::monitoring::v3::TimeInterval* Point::release_interval() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.Point.interval)
  
  ::google::monitoring::v3::TimeInterval* temp = interval_;
  interval_ = NULL;
  return temp;
}
void Point::set_allocated_interval(::google::monitoring::v3::TimeInterval* interval) {
  delete interval_;
  interval_ = interval;
  if (interval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.Point.interval)
}

// optional .google.monitoring.v3.TypedValue value = 2;
bool Point::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
void Point::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
const ::google::monitoring::v3::TypedValue& Point::value() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.Point.value)
  return value_ != NULL ? *value_
                         : *::google::monitoring::v3::TypedValue::internal_default_instance();
}
::google::monitoring::v3::TypedValue* Point::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::google::monitoring::v3::TypedValue;
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.Point.value)
  return value_;
}
::google::monitoring::v3::TypedValue* Point::release_value() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.Point.value)
  
  ::google::monitoring::v3::TypedValue* temp = value_;
  value_ = NULL;
  return temp;
}
void Point::set_allocated_value(::google::monitoring::v3::TypedValue* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.Point.value)
}

inline const Point* Point::internal_default_instance() {
  return &Point_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeSeries::kMetricFieldNumber;
const int TimeSeries::kResourceFieldNumber;
const int TimeSeries::kMetricKindFieldNumber;
const int TimeSeries::kValueTypeFieldNumber;
const int TimeSeries::kPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeSeries::TimeSeries()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fmonitoring_2fv3_2fmetric_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.monitoring.v3.TimeSeries)
}

void TimeSeries::InitAsDefaultInstance() {
  metric_ = const_cast< ::google::api::Metric*>(
      ::google::api::Metric::internal_default_instance());
  resource_ = const_cast< ::google::api::MonitoredResource*>(
      ::google::api::MonitoredResource::internal_default_instance());
}

TimeSeries::TimeSeries(const TimeSeries& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.monitoring.v3.TimeSeries)
}

void TimeSeries::SharedCtor() {
  metric_ = NULL;
  resource_ = NULL;
  ::memset(&metric_kind_, 0, reinterpret_cast<char*>(&value_type_) -
    reinterpret_cast<char*>(&metric_kind_) + sizeof(value_type_));
  _cached_size_ = 0;
}

TimeSeries::~TimeSeries() {
  // @@protoc_insertion_point(destructor:google.monitoring.v3.TimeSeries)
  SharedDtor();
}

void TimeSeries::SharedDtor() {
  if (this != &TimeSeries_default_instance_.get()) {
    delete metric_;
    delete resource_;
  }
}

void TimeSeries::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeSeries::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeSeries_descriptor_;
}

const TimeSeries& TimeSeries::default_instance() {
  protobuf_InitDefaults_google_2fmonitoring_2fv3_2fmetric_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TimeSeries> TimeSeries_default_instance_;

TimeSeries* TimeSeries::New(::google::protobuf::Arena* arena) const {
  TimeSeries* n = new TimeSeries;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimeSeries::Clear() {
// @@protoc_insertion_point(message_clear_start:google.monitoring.v3.TimeSeries)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TimeSeries, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TimeSeries*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(metric_kind_, value_type_);
  if (GetArenaNoVirtual() == NULL && metric_ != NULL) delete metric_;
  metric_ = NULL;
  if (GetArenaNoVirtual() == NULL && resource_ != NULL) delete resource_;
  resource_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  points_.Clear();
}

bool TimeSeries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.monitoring.v3.TimeSeries)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.api.Metric metric = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metric()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_resource;
        break;
      }

      // optional .google.api.MonitoredResource resource = 2;
      case 2: {
        if (tag == 18) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_metric_kind;
        break;
      }

      // optional .google.api.MetricDescriptor.MetricKind metric_kind = 3;
      case 3: {
        if (tag == 24) {
         parse_metric_kind:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_metric_kind(static_cast< ::google::api::MetricDescriptor_MetricKind >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_value_type;
        break;
      }

      // optional .google.api.MetricDescriptor.ValueType value_type = 4;
      case 4: {
        if (tag == 32) {
         parse_value_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_value_type(static_cast< ::google::api::MetricDescriptor_ValueType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_points;
        break;
      }

      // repeated .google.monitoring.v3.Point points = 5;
      case 5: {
        if (tag == 42) {
         parse_points:
          DO_(input->IncrementRecursionDepth());
         parse_loop_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_points;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.monitoring.v3.TimeSeries)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.monitoring.v3.TimeSeries)
  return false;
#undef DO_
}

void TimeSeries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.monitoring.v3.TimeSeries)
  // optional .google.api.Metric metric = 1;
  if (this->has_metric()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->metric_, output);
  }

  // optional .google.api.MonitoredResource resource = 2;
  if (this->has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->resource_, output);
  }

  // optional .google.api.MetricDescriptor.MetricKind metric_kind = 3;
  if (this->metric_kind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->metric_kind(), output);
  }

  // optional .google.api.MetricDescriptor.ValueType value_type = 4;
  if (this->value_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->value_type(), output);
  }

  // repeated .google.monitoring.v3.Point points = 5;
  for (unsigned int i = 0, n = this->points_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->points(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.monitoring.v3.TimeSeries)
}

::google::protobuf::uint8* TimeSeries::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.monitoring.v3.TimeSeries)
  // optional .google.api.Metric metric = 1;
  if (this->has_metric()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->metric_, false, target);
  }

  // optional .google.api.MonitoredResource resource = 2;
  if (this->has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->resource_, false, target);
  }

  // optional .google.api.MetricDescriptor.MetricKind metric_kind = 3;
  if (this->metric_kind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->metric_kind(), target);
  }

  // optional .google.api.MetricDescriptor.ValueType value_type = 4;
  if (this->value_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->value_type(), target);
  }

  // repeated .google.monitoring.v3.Point points = 5;
  for (unsigned int i = 0, n = this->points_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->points(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.monitoring.v3.TimeSeries)
  return target;
}

size_t TimeSeries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.monitoring.v3.TimeSeries)
  size_t total_size = 0;

  // optional .google.api.Metric metric = 1;
  if (this->has_metric()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->metric_);
  }

  // optional .google.api.MonitoredResource resource = 2;
  if (this->has_resource()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resource_);
  }

  // optional .google.api.MetricDescriptor.MetricKind metric_kind = 3;
  if (this->metric_kind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->metric_kind());
  }

  // optional .google.api.MetricDescriptor.ValueType value_type = 4;
  if (this->value_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->value_type());
  }

  // repeated .google.monitoring.v3.Point points = 5;
  {
    unsigned int count = this->points_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->points(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeSeries::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.monitoring.v3.TimeSeries)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TimeSeries* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeSeries>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.monitoring.v3.TimeSeries)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.monitoring.v3.TimeSeries)
    UnsafeMergeFrom(*source);
  }
}

void TimeSeries::MergeFrom(const TimeSeries& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.monitoring.v3.TimeSeries)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TimeSeries::UnsafeMergeFrom(const TimeSeries& from) {
  GOOGLE_DCHECK(&from != this);
  points_.MergeFrom(from.points_);
  if (from.has_metric()) {
    mutable_metric()->::google::api::Metric::MergeFrom(from.metric());
  }
  if (from.has_resource()) {
    mutable_resource()->::google::api::MonitoredResource::MergeFrom(from.resource());
  }
  if (from.metric_kind() != 0) {
    set_metric_kind(from.metric_kind());
  }
  if (from.value_type() != 0) {
    set_value_type(from.value_type());
  }
}

void TimeSeries::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.monitoring.v3.TimeSeries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeSeries::CopyFrom(const TimeSeries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.monitoring.v3.TimeSeries)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TimeSeries::IsInitialized() const {

  return true;
}

void TimeSeries::Swap(TimeSeries* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeSeries::InternalSwap(TimeSeries* other) {
  std::swap(metric_, other->metric_);
  std::swap(resource_, other->resource_);
  std::swap(metric_kind_, other->metric_kind_);
  std::swap(value_type_, other->value_type_);
  points_.UnsafeArenaSwap(&other->points_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimeSeries::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeSeries_descriptor_;
  metadata.reflection = TimeSeries_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimeSeries

// optional .google.api.Metric metric = 1;
bool TimeSeries::has_metric() const {
  return this != internal_default_instance() && metric_ != NULL;
}
void TimeSeries::clear_metric() {
  if (GetArenaNoVirtual() == NULL && metric_ != NULL) delete metric_;
  metric_ = NULL;
}
const ::google::api::Metric& TimeSeries::metric() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.TimeSeries.metric)
  return metric_ != NULL ? *metric_
                         : *::google::api::Metric::internal_default_instance();
}
::google::api::Metric* TimeSeries::mutable_metric() {
  
  if (metric_ == NULL) {
    metric_ = new ::google::api::Metric;
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.TimeSeries.metric)
  return metric_;
}
::google::api::Metric* TimeSeries::release_metric() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.TimeSeries.metric)
  
  ::google::api::Metric* temp = metric_;
  metric_ = NULL;
  return temp;
}
void TimeSeries::set_allocated_metric(::google::api::Metric* metric) {
  delete metric_;
  metric_ = metric;
  if (metric) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.TimeSeries.metric)
}

// optional .google.api.MonitoredResource resource = 2;
bool TimeSeries::has_resource() const {
  return this != internal_default_instance() && resource_ != NULL;
}
void TimeSeries::clear_resource() {
  if (GetArenaNoVirtual() == NULL && resource_ != NULL) delete resource_;
  resource_ = NULL;
}
const ::google::api::MonitoredResource& TimeSeries::resource() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.TimeSeries.resource)
  return resource_ != NULL ? *resource_
                         : *::google::api::MonitoredResource::internal_default_instance();
}
::google::api::MonitoredResource* TimeSeries::mutable_resource() {
  
  if (resource_ == NULL) {
    resource_ = new ::google::api::MonitoredResource;
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.TimeSeries.resource)
  return resource_;
}
::google::api::MonitoredResource* TimeSeries::release_resource() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.TimeSeries.resource)
  
  ::google::api::MonitoredResource* temp = resource_;
  resource_ = NULL;
  return temp;
}
void TimeSeries::set_allocated_resource(::google::api::MonitoredResource* resource) {
  delete resource_;
  if (resource != NULL && resource->GetArena() != NULL) {
    ::google::api::MonitoredResource* new_resource = new ::google::api::MonitoredResource;
    new_resource->CopyFrom(*resource);
    resource = new_resource;
  }
  resource_ = resource;
  if (resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.TimeSeries.resource)
}

// optional .google.api.MetricDescriptor.MetricKind metric_kind = 3;
void TimeSeries::clear_metric_kind() {
  metric_kind_ = 0;
}
::google::api::MetricDescriptor_MetricKind TimeSeries::metric_kind() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.TimeSeries.metric_kind)
  return static_cast< ::google::api::MetricDescriptor_MetricKind >(metric_kind_);
}
void TimeSeries::set_metric_kind(::google::api::MetricDescriptor_MetricKind value) {
  
  metric_kind_ = value;
  // @@protoc_insertion_point(field_set:google.monitoring.v3.TimeSeries.metric_kind)
}

// optional .google.api.MetricDescriptor.ValueType value_type = 4;
void TimeSeries::clear_value_type() {
  value_type_ = 0;
}
::google::api::MetricDescriptor_ValueType TimeSeries::value_type() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.TimeSeries.value_type)
  return static_cast< ::google::api::MetricDescriptor_ValueType >(value_type_);
}
void TimeSeries::set_value_type(::google::api::MetricDescriptor_ValueType value) {
  
  value_type_ = value;
  // @@protoc_insertion_point(field_set:google.monitoring.v3.TimeSeries.value_type)
}

// repeated .google.monitoring.v3.Point points = 5;
int TimeSeries::points_size() const {
  return points_.size();
}
void TimeSeries::clear_points() {
  points_.Clear();
}
const ::google::monitoring::v3::Point& TimeSeries::points(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.TimeSeries.points)
  return points_.Get(index);
}
::google::monitoring::v3::Point* TimeSeries::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.TimeSeries.points)
  return points_.Mutable(index);
}
::google::monitoring::v3::Point* TimeSeries::add_points() {
  // @@protoc_insertion_point(field_add:google.monitoring.v3.TimeSeries.points)
  return points_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::Point >*
TimeSeries::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.TimeSeries.points)
  return &points_;
}
const ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::Point >&
TimeSeries::points() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.TimeSeries.points)
  return points_;
}

inline const TimeSeries* TimeSeries::internal_default_instance() {
  return &TimeSeries_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v3
}  // namespace monitoring
}  // namespace google

// @@protoc_insertion_point(global_scope)
