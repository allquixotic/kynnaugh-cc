// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: google/pubsub/v1beta2/pubsub.proto
// Original file comments:
// Copyright (c) 2015, Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fpubsub_2fv1beta2_2fpubsub_2eproto__INCLUDED
#define GRPC_google_2fpubsub_2fv1beta2_2fpubsub_2eproto__INCLUDED

#include "google/pubsub/v1beta2/pubsub.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace google {
namespace pubsub {
namespace v1beta2 {

// The service that an application uses to manipulate subscriptions and to
// consume messages from a subscription via the Pull method.
class Subscriber GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Creates a subscription to a given topic for a given subscriber.
    // If the subscription already exists, returns ALREADY_EXISTS.
    // If the corresponding topic doesn't exist, returns NOT_FOUND.
    //
    // If the name is not provided in the request, the server will assign a random
    // name for this subscription on the same project as the topic.
    virtual ::grpc::Status CreateSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Subscription& request, ::google::pubsub::v1beta2::Subscription* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::Subscription>> AsyncCreateSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Subscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::Subscription>>(AsyncCreateSubscriptionRaw(context, request, cq));
    }
    // Gets the configuration details of a subscription.
    virtual ::grpc::Status GetSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetSubscriptionRequest& request, ::google::pubsub::v1beta2::Subscription* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::Subscription>> AsyncGetSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::Subscription>>(AsyncGetSubscriptionRaw(context, request, cq));
    }
    // Lists matching subscriptions.
    virtual ::grpc::Status ListSubscriptions(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListSubscriptionsRequest& request, ::google::pubsub::v1beta2::ListSubscriptionsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::ListSubscriptionsResponse>> AsyncListSubscriptions(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::ListSubscriptionsResponse>>(AsyncListSubscriptionsRaw(context, request, cq));
    }
    // Deletes an existing subscription. All pending messages in the subscription
    // are immediately dropped. Calls to Pull after deletion will return
    // NOT_FOUND. After a subscription is deleted, a new one may be created with
    // the same name, but the new one has no association with the old
    // subscription, or its topic unless the same topic is specified.
    virtual ::grpc::Status DeleteSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteSubscriptionRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteSubscriptionRaw(context, request, cq));
    }
    // Modifies the ack deadline for a specific message. This method is useful to
    // indicate that more time is needed to process a message by the subscriber,
    // or to make the message available for redelivery if the processing was
    // interrupted.
    virtual ::grpc::Status ModifyAckDeadline(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyAckDeadlineRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncModifyAckDeadline(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyAckDeadlineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncModifyAckDeadlineRaw(context, request, cq));
    }
    // Acknowledges the messages associated with the ack tokens in the
    // AcknowledgeRequest. The Pub/Sub system can remove the relevant messages
    // from the subscription.
    //
    // Acknowledging a message whose ack deadline has expired may succeed,
    // but such a message may be redelivered later. Acknowledging a message more
    // than once will not result in an error.
    virtual ::grpc::Status Acknowledge(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::AcknowledgeRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncAcknowledge(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::AcknowledgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncAcknowledgeRaw(context, request, cq));
    }
    // Pulls messages from the server. Returns an empty list if there are no
    // messages available in the backlog. The server may return UNAVAILABLE if
    // there are too many concurrent pull requests pending for the given
    // subscription.
    virtual ::grpc::Status Pull(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PullRequest& request, ::google::pubsub::v1beta2::PullResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::PullResponse>> AsyncPull(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PullRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::PullResponse>>(AsyncPullRaw(context, request, cq));
    }
    // Modifies the PushConfig for a specified subscription.
    //
    // This may be used to change a push subscription to a pull one (signified
    // by an empty PushConfig) or vice versa, or change the endpoint URL and other
    // attributes of a push subscription. Messages will accumulate for
    // delivery continuously through the call regardless of changes to the
    // PushConfig.
    virtual ::grpc::Status ModifyPushConfig(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyPushConfigRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncModifyPushConfig(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyPushConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncModifyPushConfigRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::Subscription>* AsyncCreateSubscriptionRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Subscription& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::Subscription>* AsyncGetSubscriptionRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::ListSubscriptionsResponse>* AsyncListSubscriptionsRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteSubscriptionRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteSubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncModifyAckDeadlineRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyAckDeadlineRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncAcknowledgeRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::AcknowledgeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::PullResponse>* AsyncPullRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PullRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncModifyPushConfigRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyPushConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Subscription& request, ::google::pubsub::v1beta2::Subscription* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Subscription>> AsyncCreateSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Subscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Subscription>>(AsyncCreateSubscriptionRaw(context, request, cq));
    }
    ::grpc::Status GetSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetSubscriptionRequest& request, ::google::pubsub::v1beta2::Subscription* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Subscription>> AsyncGetSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Subscription>>(AsyncGetSubscriptionRaw(context, request, cq));
    }
    ::grpc::Status ListSubscriptions(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListSubscriptionsRequest& request, ::google::pubsub::v1beta2::ListSubscriptionsResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::ListSubscriptionsResponse>> AsyncListSubscriptions(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::ListSubscriptionsResponse>>(AsyncListSubscriptionsRaw(context, request, cq));
    }
    ::grpc::Status DeleteSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteSubscriptionRequest& request, ::google::protobuf::Empty* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteSubscriptionRaw(context, request, cq));
    }
    ::grpc::Status ModifyAckDeadline(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyAckDeadlineRequest& request, ::google::protobuf::Empty* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncModifyAckDeadline(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyAckDeadlineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncModifyAckDeadlineRaw(context, request, cq));
    }
    ::grpc::Status Acknowledge(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::AcknowledgeRequest& request, ::google::protobuf::Empty* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncAcknowledge(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::AcknowledgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncAcknowledgeRaw(context, request, cq));
    }
    ::grpc::Status Pull(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PullRequest& request, ::google::pubsub::v1beta2::PullResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::PullResponse>> AsyncPull(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PullRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::PullResponse>>(AsyncPullRaw(context, request, cq));
    }
    ::grpc::Status ModifyPushConfig(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyPushConfigRequest& request, ::google::protobuf::Empty* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncModifyPushConfig(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyPushConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncModifyPushConfigRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Subscription>* AsyncCreateSubscriptionRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Subscription& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Subscription>* AsyncGetSubscriptionRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::ListSubscriptionsResponse>* AsyncListSubscriptionsRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteSubscriptionRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteSubscriptionRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncModifyAckDeadlineRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyAckDeadlineRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncAcknowledgeRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::AcknowledgeRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::PullResponse>* AsyncPullRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PullRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncModifyPushConfigRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyPushConfigRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_CreateSubscription_;
    const ::grpc::RpcMethod rpcmethod_GetSubscription_;
    const ::grpc::RpcMethod rpcmethod_ListSubscriptions_;
    const ::grpc::RpcMethod rpcmethod_DeleteSubscription_;
    const ::grpc::RpcMethod rpcmethod_ModifyAckDeadline_;
    const ::grpc::RpcMethod rpcmethod_Acknowledge_;
    const ::grpc::RpcMethod rpcmethod_Pull_;
    const ::grpc::RpcMethod rpcmethod_ModifyPushConfig_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Creates a subscription to a given topic for a given subscriber.
    // If the subscription already exists, returns ALREADY_EXISTS.
    // If the corresponding topic doesn't exist, returns NOT_FOUND.
    //
    // If the name is not provided in the request, the server will assign a random
    // name for this subscription on the same project as the topic.
    virtual ::grpc::Status CreateSubscription(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::Subscription* request, ::google::pubsub::v1beta2::Subscription* response);
    // Gets the configuration details of a subscription.
    virtual ::grpc::Status GetSubscription(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::GetSubscriptionRequest* request, ::google::pubsub::v1beta2::Subscription* response);
    // Lists matching subscriptions.
    virtual ::grpc::Status ListSubscriptions(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::ListSubscriptionsRequest* request, ::google::pubsub::v1beta2::ListSubscriptionsResponse* response);
    // Deletes an existing subscription. All pending messages in the subscription
    // are immediately dropped. Calls to Pull after deletion will return
    // NOT_FOUND. After a subscription is deleted, a new one may be created with
    // the same name, but the new one has no association with the old
    // subscription, or its topic unless the same topic is specified.
    virtual ::grpc::Status DeleteSubscription(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::DeleteSubscriptionRequest* request, ::google::protobuf::Empty* response);
    // Modifies the ack deadline for a specific message. This method is useful to
    // indicate that more time is needed to process a message by the subscriber,
    // or to make the message available for redelivery if the processing was
    // interrupted.
    virtual ::grpc::Status ModifyAckDeadline(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::ModifyAckDeadlineRequest* request, ::google::protobuf::Empty* response);
    // Acknowledges the messages associated with the ack tokens in the
    // AcknowledgeRequest. The Pub/Sub system can remove the relevant messages
    // from the subscription.
    //
    // Acknowledging a message whose ack deadline has expired may succeed,
    // but such a message may be redelivered later. Acknowledging a message more
    // than once will not result in an error.
    virtual ::grpc::Status Acknowledge(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::AcknowledgeRequest* request, ::google::protobuf::Empty* response);
    // Pulls messages from the server. Returns an empty list if there are no
    // messages available in the backlog. The server may return UNAVAILABLE if
    // there are too many concurrent pull requests pending for the given
    // subscription.
    virtual ::grpc::Status Pull(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::PullRequest* request, ::google::pubsub::v1beta2::PullResponse* response);
    // Modifies the PushConfig for a specified subscription.
    //
    // This may be used to change a push subscription to a pull one (signified
    // by an empty PushConfig) or vice versa, or change the endpoint URL and other
    // attributes of a push subscription. Messages will accumulate for
    // delivery continuously through the call regardless of changes to the
    // PushConfig.
    virtual ::grpc::Status ModifyPushConfig(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::ModifyPushConfigRequest* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateSubscription() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateSubscription() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSubscription(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::Subscription* request, ::google::pubsub::v1beta2::Subscription* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateSubscription(::grpc::ServerContext* context, ::google::pubsub::v1beta2::Subscription* request, ::grpc::ServerAsyncResponseWriter< ::google::pubsub::v1beta2::Subscription>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetSubscription() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetSubscription() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscription(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::GetSubscriptionRequest* request, ::google::pubsub::v1beta2::Subscription* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSubscription(::grpc::ServerContext* context, ::google::pubsub::v1beta2::GetSubscriptionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::pubsub::v1beta2::Subscription>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListSubscriptions() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ListSubscriptions() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSubscriptions(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::ListSubscriptionsRequest* request, ::google::pubsub::v1beta2::ListSubscriptionsResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListSubscriptions(::grpc::ServerContext* context, ::google::pubsub::v1beta2::ListSubscriptionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::pubsub::v1beta2::ListSubscriptionsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteSubscription() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteSubscription() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSubscription(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::DeleteSubscriptionRequest* request, ::google::protobuf::Empty* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSubscription(::grpc::ServerContext* context, ::google::pubsub::v1beta2::DeleteSubscriptionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ModifyAckDeadline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ModifyAckDeadline() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ModifyAckDeadline() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModifyAckDeadline(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::ModifyAckDeadlineRequest* request, ::google::protobuf::Empty* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestModifyAckDeadline(::grpc::ServerContext* context, ::google::pubsub::v1beta2::ModifyAckDeadlineRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Acknowledge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Acknowledge() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Acknowledge() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Acknowledge(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::AcknowledgeRequest* request, ::google::protobuf::Empty* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAcknowledge(::grpc::ServerContext* context, ::google::pubsub::v1beta2::AcknowledgeRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Pull : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Pull() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Pull() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Pull(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::PullRequest* request, ::google::pubsub::v1beta2::PullResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPull(::grpc::ServerContext* context, ::google::pubsub::v1beta2::PullRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::pubsub::v1beta2::PullResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ModifyPushConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ModifyPushConfig() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_ModifyPushConfig() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModifyPushConfig(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::ModifyPushConfigRequest* request, ::google::protobuf::Empty* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestModifyPushConfig(::grpc::ServerContext* context, ::google::pubsub::v1beta2::ModifyPushConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateSubscription<WithAsyncMethod_GetSubscription<WithAsyncMethod_ListSubscriptions<WithAsyncMethod_DeleteSubscription<WithAsyncMethod_ModifyAckDeadline<WithAsyncMethod_Acknowledge<WithAsyncMethod_Pull<WithAsyncMethod_ModifyPushConfig<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_CreateSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateSubscription() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateSubscription() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSubscription(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::Subscription* request, ::google::pubsub::v1beta2::Subscription* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetSubscription() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetSubscription() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscription(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::GetSubscriptionRequest* request, ::google::pubsub::v1beta2::Subscription* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListSubscriptions() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ListSubscriptions() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSubscriptions(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::ListSubscriptionsRequest* request, ::google::pubsub::v1beta2::ListSubscriptionsResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteSubscription() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteSubscription() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSubscription(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::DeleteSubscriptionRequest* request, ::google::protobuf::Empty* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ModifyAckDeadline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ModifyAckDeadline() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ModifyAckDeadline() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModifyAckDeadline(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::ModifyAckDeadlineRequest* request, ::google::protobuf::Empty* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Acknowledge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Acknowledge() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Acknowledge() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Acknowledge(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::AcknowledgeRequest* request, ::google::protobuf::Empty* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Pull : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Pull() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Pull() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Pull(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::PullRequest* request, ::google::pubsub::v1beta2::PullResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ModifyPushConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ModifyPushConfig() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_ModifyPushConfig() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModifyPushConfig(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::ModifyPushConfigRequest* request, ::google::protobuf::Empty* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

// The service that an application uses to manipulate topics, and to send
// messages to a topic.
class Publisher GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Creates the given topic with the given name.
    virtual ::grpc::Status CreateTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Topic& request, ::google::pubsub::v1beta2::Topic* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::Topic>> AsyncCreateTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Topic& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::Topic>>(AsyncCreateTopicRaw(context, request, cq));
    }
    // Adds one or more messages to the topic. Returns NOT_FOUND if the topic does
    // not exist.
    virtual ::grpc::Status Publish(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PublishRequest& request, ::google::pubsub::v1beta2::PublishResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::PublishResponse>> AsyncPublish(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PublishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::PublishResponse>>(AsyncPublishRaw(context, request, cq));
    }
    // Gets the configuration of a topic.
    virtual ::grpc::Status GetTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetTopicRequest& request, ::google::pubsub::v1beta2::Topic* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::Topic>> AsyncGetTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetTopicRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::Topic>>(AsyncGetTopicRaw(context, request, cq));
    }
    // Lists matching topics.
    virtual ::grpc::Status ListTopics(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicsRequest& request, ::google::pubsub::v1beta2::ListTopicsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::ListTopicsResponse>> AsyncListTopics(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::ListTopicsResponse>>(AsyncListTopicsRaw(context, request, cq));
    }
    // Lists the name of the subscriptions for this topic.
    virtual ::grpc::Status ListTopicSubscriptions(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest& request, ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse>> AsyncListTopicSubscriptions(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse>>(AsyncListTopicSubscriptionsRaw(context, request, cq));
    }
    // Deletes the topic with the given name. Returns NOT_FOUND if the topic does
    // not exist. After a topic is deleted, a new topic may be created with the
    // same name; this is an entirely new topic with none of the old
    // configuration or subscriptions. Existing subscriptions to this topic are
    // not deleted.
    virtual ::grpc::Status DeleteTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteTopicRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteTopicRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteTopicRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::Topic>* AsyncCreateTopicRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Topic& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::PublishResponse>* AsyncPublishRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PublishRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::Topic>* AsyncGetTopicRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetTopicRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::ListTopicsResponse>* AsyncListTopicsRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse>* AsyncListTopicSubscriptionsRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteTopicRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteTopicRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Topic& request, ::google::pubsub::v1beta2::Topic* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Topic>> AsyncCreateTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Topic& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Topic>>(AsyncCreateTopicRaw(context, request, cq));
    }
    ::grpc::Status Publish(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PublishRequest& request, ::google::pubsub::v1beta2::PublishResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::PublishResponse>> AsyncPublish(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PublishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::PublishResponse>>(AsyncPublishRaw(context, request, cq));
    }
    ::grpc::Status GetTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetTopicRequest& request, ::google::pubsub::v1beta2::Topic* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Topic>> AsyncGetTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetTopicRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Topic>>(AsyncGetTopicRaw(context, request, cq));
    }
    ::grpc::Status ListTopics(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicsRequest& request, ::google::pubsub::v1beta2::ListTopicsResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::ListTopicsResponse>> AsyncListTopics(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::ListTopicsResponse>>(AsyncListTopicsRaw(context, request, cq));
    }
    ::grpc::Status ListTopicSubscriptions(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest& request, ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse>> AsyncListTopicSubscriptions(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse>>(AsyncListTopicSubscriptionsRaw(context, request, cq));
    }
    ::grpc::Status DeleteTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteTopicRequest& request, ::google::protobuf::Empty* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteTopicRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteTopicRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Topic>* AsyncCreateTopicRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Topic& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::PublishResponse>* AsyncPublishRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PublishRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Topic>* AsyncGetTopicRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetTopicRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::ListTopicsResponse>* AsyncListTopicsRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicsRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse>* AsyncListTopicSubscriptionsRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteTopicRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteTopicRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_CreateTopic_;
    const ::grpc::RpcMethod rpcmethod_Publish_;
    const ::grpc::RpcMethod rpcmethod_GetTopic_;
    const ::grpc::RpcMethod rpcmethod_ListTopics_;
    const ::grpc::RpcMethod rpcmethod_ListTopicSubscriptions_;
    const ::grpc::RpcMethod rpcmethod_DeleteTopic_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Creates the given topic with the given name.
    virtual ::grpc::Status CreateTopic(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::Topic* request, ::google::pubsub::v1beta2::Topic* response);
    // Adds one or more messages to the topic. Returns NOT_FOUND if the topic does
    // not exist.
    virtual ::grpc::Status Publish(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::PublishRequest* request, ::google::pubsub::v1beta2::PublishResponse* response);
    // Gets the configuration of a topic.
    virtual ::grpc::Status GetTopic(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::GetTopicRequest* request, ::google::pubsub::v1beta2::Topic* response);
    // Lists matching topics.
    virtual ::grpc::Status ListTopics(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::ListTopicsRequest* request, ::google::pubsub::v1beta2::ListTopicsResponse* response);
    // Lists the name of the subscriptions for this topic.
    virtual ::grpc::Status ListTopicSubscriptions(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest* request, ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse* response);
    // Deletes the topic with the given name. Returns NOT_FOUND if the topic does
    // not exist. After a topic is deleted, a new topic may be created with the
    // same name; this is an entirely new topic with none of the old
    // configuration or subscriptions. Existing subscriptions to this topic are
    // not deleted.
    virtual ::grpc::Status DeleteTopic(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::DeleteTopicRequest* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateTopic() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateTopic() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTopic(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::Topic* request, ::google::pubsub::v1beta2::Topic* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateTopic(::grpc::ServerContext* context, ::google::pubsub::v1beta2::Topic* request, ::grpc::ServerAsyncResponseWriter< ::google::pubsub::v1beta2::Topic>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Publish() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Publish() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publish(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::PublishRequest* request, ::google::pubsub::v1beta2::PublishResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPublish(::grpc::ServerContext* context, ::google::pubsub::v1beta2::PublishRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::pubsub::v1beta2::PublishResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetTopic() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetTopic() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTopic(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::GetTopicRequest* request, ::google::pubsub::v1beta2::Topic* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTopic(::grpc::ServerContext* context, ::google::pubsub::v1beta2::GetTopicRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::pubsub::v1beta2::Topic>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListTopics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListTopics() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ListTopics() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTopics(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::ListTopicsRequest* request, ::google::pubsub::v1beta2::ListTopicsResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListTopics(::grpc::ServerContext* context, ::google::pubsub::v1beta2::ListTopicsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::pubsub::v1beta2::ListTopicsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListTopicSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListTopicSubscriptions() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ListTopicSubscriptions() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTopicSubscriptions(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest* request, ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListTopicSubscriptions(::grpc::ServerContext* context, ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteTopic() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_DeleteTopic() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTopic(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::DeleteTopicRequest* request, ::google::protobuf::Empty* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteTopic(::grpc::ServerContext* context, ::google::pubsub::v1beta2::DeleteTopicRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateTopic<WithAsyncMethod_Publish<WithAsyncMethod_GetTopic<WithAsyncMethod_ListTopics<WithAsyncMethod_ListTopicSubscriptions<WithAsyncMethod_DeleteTopic<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_CreateTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateTopic() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateTopic() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTopic(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::Topic* request, ::google::pubsub::v1beta2::Topic* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Publish() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Publish() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publish(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::PublishRequest* request, ::google::pubsub::v1beta2::PublishResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetTopic() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetTopic() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTopic(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::GetTopicRequest* request, ::google::pubsub::v1beta2::Topic* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListTopics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListTopics() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ListTopics() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTopics(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::ListTopicsRequest* request, ::google::pubsub::v1beta2::ListTopicsResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListTopicSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListTopicSubscriptions() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ListTopicSubscriptions() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTopicSubscriptions(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest* request, ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteTopic() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_DeleteTopic() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTopic(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::DeleteTopicRequest* request, ::google::protobuf::Empty* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

}  // namespace v1beta2
}  // namespace pubsub
}  // namespace google


#endif  // GRPC_google_2fpubsub_2fv1beta2_2fpubsub_2eproto__INCLUDED
