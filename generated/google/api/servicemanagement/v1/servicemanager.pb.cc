// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/servicemanagement/v1/servicemanager.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/api/servicemanagement/v1/servicemanager.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace api {
namespace servicemanagement {
namespace v1 {
class ListServicesRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListServicesRequest> {};
ListServicesRequestDefaultTypeInternal _ListServicesRequest_default_instance_;
class ListServicesResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListServicesResponse> {};
ListServicesResponseDefaultTypeInternal _ListServicesResponse_default_instance_;
class GetServiceRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetServiceRequest> {};
GetServiceRequestDefaultTypeInternal _GetServiceRequest_default_instance_;
class CreateServiceRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateServiceRequest> {};
CreateServiceRequestDefaultTypeInternal _CreateServiceRequest_default_instance_;
class DeleteServiceRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeleteServiceRequest> {};
DeleteServiceRequestDefaultTypeInternal _DeleteServiceRequest_default_instance_;
class UndeleteServiceRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UndeleteServiceRequest> {};
UndeleteServiceRequestDefaultTypeInternal _UndeleteServiceRequest_default_instance_;
class UndeleteServiceResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UndeleteServiceResponse> {};
UndeleteServiceResponseDefaultTypeInternal _UndeleteServiceResponse_default_instance_;
class GetServiceConfigRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetServiceConfigRequest> {};
GetServiceConfigRequestDefaultTypeInternal _GetServiceConfigRequest_default_instance_;
class ListServiceConfigsRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListServiceConfigsRequest> {};
ListServiceConfigsRequestDefaultTypeInternal _ListServiceConfigsRequest_default_instance_;
class ListServiceConfigsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListServiceConfigsResponse> {};
ListServiceConfigsResponseDefaultTypeInternal _ListServiceConfigsResponse_default_instance_;
class CreateServiceConfigRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateServiceConfigRequest> {};
CreateServiceConfigRequestDefaultTypeInternal _CreateServiceConfigRequest_default_instance_;
class SubmitConfigSourceRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SubmitConfigSourceRequest> {};
SubmitConfigSourceRequestDefaultTypeInternal _SubmitConfigSourceRequest_default_instance_;
class SubmitConfigSourceResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SubmitConfigSourceResponse> {};
SubmitConfigSourceResponseDefaultTypeInternal _SubmitConfigSourceResponse_default_instance_;
class CreateServiceRolloutRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateServiceRolloutRequest> {};
CreateServiceRolloutRequestDefaultTypeInternal _CreateServiceRolloutRequest_default_instance_;
class ListServiceRolloutsRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListServiceRolloutsRequest> {};
ListServiceRolloutsRequestDefaultTypeInternal _ListServiceRolloutsRequest_default_instance_;
class ListServiceRolloutsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListServiceRolloutsResponse> {};
ListServiceRolloutsResponseDefaultTypeInternal _ListServiceRolloutsResponse_default_instance_;
class GetServiceRolloutRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetServiceRolloutRequest> {};
GetServiceRolloutRequestDefaultTypeInternal _GetServiceRolloutRequest_default_instance_;
class EnableServiceRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EnableServiceRequest> {};
EnableServiceRequestDefaultTypeInternal _EnableServiceRequest_default_instance_;
class DisableServiceRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DisableServiceRequest> {};
DisableServiceRequestDefaultTypeInternal _DisableServiceRequest_default_instance_;
class GenerateConfigReportRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GenerateConfigReportRequest> {};
GenerateConfigReportRequestDefaultTypeInternal _GenerateConfigReportRequest_default_instance_;
class GenerateConfigReportResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GenerateConfigReportResponse> {};
GenerateConfigReportResponseDefaultTypeInternal _GenerateConfigReportResponse_default_instance_;

namespace {

::google::protobuf::Metadata file_level_metadata[21];

}  // namespace


const ::google::protobuf::uint32* protobuf_Offsets_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto() GOOGLE_ATTRIBUTE_COLD;
const ::google::protobuf::uint32* protobuf_Offsets_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto() {
  static const ::google::protobuf::uint32 offsets[] = {
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListServicesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListServicesRequest, producer_project_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListServicesRequest, page_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListServicesRequest, page_token_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListServicesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListServicesResponse, services_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListServicesResponse, next_page_token_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceRequest, service_name_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateServiceRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateServiceRequest, service_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteServiceRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteServiceRequest, service_name_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndeleteServiceRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndeleteServiceRequest, service_name_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndeleteServiceResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndeleteServiceResponse, service_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceConfigRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceConfigRequest, service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceConfigRequest, config_id_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListServiceConfigsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListServiceConfigsRequest, service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListServiceConfigsRequest, page_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListServiceConfigsRequest, page_size_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListServiceConfigsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListServiceConfigsResponse, service_configs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListServiceConfigsResponse, next_page_token_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateServiceConfigRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateServiceConfigRequest, service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateServiceConfigRequest, service_config_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitConfigSourceRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitConfigSourceRequest, service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitConfigSourceRequest, config_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitConfigSourceRequest, validate_only_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitConfigSourceResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitConfigSourceResponse, service_config_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateServiceRolloutRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateServiceRolloutRequest, service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateServiceRolloutRequest, rollout_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListServiceRolloutsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListServiceRolloutsRequest, service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListServiceRolloutsRequest, page_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListServiceRolloutsRequest, page_size_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListServiceRolloutsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListServiceRolloutsResponse, rollouts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListServiceRolloutsResponse, next_page_token_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceRolloutRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceRolloutRequest, service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceRolloutRequest, rollout_id_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableServiceRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableServiceRequest, service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableServiceRequest, consumer_id_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisableServiceRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisableServiceRequest, service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisableServiceRequest, consumer_id_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenerateConfigReportRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenerateConfigReportRequest, new_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenerateConfigReportRequest, old_config_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenerateConfigReportResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenerateConfigReportResponse, service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenerateConfigReportResponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenerateConfigReportResponse, change_reports_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenerateConfigReportResponse, diagnostics_),
  };
  return offsets;
}

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(ListServicesRequest)},
  { 7, -1, sizeof(ListServicesResponse)},
  { 13, -1, sizeof(GetServiceRequest)},
  { 18, -1, sizeof(CreateServiceRequest)},
  { 23, -1, sizeof(DeleteServiceRequest)},
  { 28, -1, sizeof(UndeleteServiceRequest)},
  { 33, -1, sizeof(UndeleteServiceResponse)},
  { 38, -1, sizeof(GetServiceConfigRequest)},
  { 44, -1, sizeof(ListServiceConfigsRequest)},
  { 51, -1, sizeof(ListServiceConfigsResponse)},
  { 57, -1, sizeof(CreateServiceConfigRequest)},
  { 63, -1, sizeof(SubmitConfigSourceRequest)},
  { 70, -1, sizeof(SubmitConfigSourceResponse)},
  { 75, -1, sizeof(CreateServiceRolloutRequest)},
  { 81, -1, sizeof(ListServiceRolloutsRequest)},
  { 88, -1, sizeof(ListServiceRolloutsResponse)},
  { 94, -1, sizeof(GetServiceRolloutRequest)},
  { 100, -1, sizeof(EnableServiceRequest)},
  { 106, -1, sizeof(DisableServiceRequest)},
  { 112, -1, sizeof(GenerateConfigReportRequest)},
  { 118, -1, sizeof(GenerateConfigReportResponse)},
};

static const ::google::protobuf::internal::DefaultInstanceData file_default_instances[] = {
  {reinterpret_cast<const ::google::protobuf::Message*>(&_ListServicesRequest_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_ListServicesResponse_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_GetServiceRequest_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_CreateServiceRequest_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_DeleteServiceRequest_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_UndeleteServiceRequest_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_UndeleteServiceResponse_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_GetServiceConfigRequest_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_ListServiceConfigsRequest_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_ListServiceConfigsResponse_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_CreateServiceConfigRequest_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_SubmitConfigSourceRequest_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_SubmitConfigSourceResponse_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_CreateServiceRolloutRequest_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_ListServiceRolloutsRequest_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_ListServiceRolloutsResponse_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_GetServiceRolloutRequest_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_EnableServiceRequest_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_DisableServiceRequest_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_GenerateConfigReportRequest_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_GenerateConfigReportResponse_default_instance_), NULL},
};

namespace {

void protobuf_AssignDescriptors() {
  protobuf_AddDesc_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/api/servicemanagement/v1/servicemanager.proto", schemas, file_default_instances, protobuf_Offsets_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto(), factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 21);
}

}  // namespace

void protobuf_ShutdownFile_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto() {
  _ListServicesRequest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ListServicesResponse_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _GetServiceRequest_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CreateServiceRequest_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _DeleteServiceRequest_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _UndeleteServiceRequest_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _UndeleteServiceResponse_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _GetServiceConfigRequest_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _ListServiceConfigsRequest_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _ListServiceConfigsResponse_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CreateServiceConfigRequest_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _SubmitConfigSourceRequest_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _SubmitConfigSourceResponse_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _CreateServiceRolloutRequest_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _ListServiceRolloutsRequest_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _ListServiceRolloutsResponse_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _GetServiceRolloutRequest_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _EnableServiceRequest_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _DisableServiceRequest_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _GenerateConfigReportRequest_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _GenerateConfigReportResponse_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
}

void protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::api::protobuf_InitDefaults_google_2fapi_2fannotations_2eproto();
  ::google::api::protobuf_InitDefaults_google_2fapi_2fservice_2eproto();
  ::google::api::servicemanagement::v1::protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto();
  ::google::longrunning::protobuf_InitDefaults_google_2flongrunning_2foperations_2eproto();
  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2fany_2eproto();
  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2fempty_2eproto();
  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2ffield_5fmask_2eproto();
  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2fstruct_2eproto();
  ::google::rpc::protobuf_InitDefaults_google_2frpc_2fstatus_2eproto();
  ::google::protobuf::internal::InitProtobufDefaults();
  _ListServicesRequest_default_instance_.DefaultConstruct();
  _ListServicesResponse_default_instance_.DefaultConstruct();
  _GetServiceRequest_default_instance_.DefaultConstruct();
  _CreateServiceRequest_default_instance_.DefaultConstruct();
  _DeleteServiceRequest_default_instance_.DefaultConstruct();
  _UndeleteServiceRequest_default_instance_.DefaultConstruct();
  _UndeleteServiceResponse_default_instance_.DefaultConstruct();
  _GetServiceConfigRequest_default_instance_.DefaultConstruct();
  _ListServiceConfigsRequest_default_instance_.DefaultConstruct();
  _ListServiceConfigsResponse_default_instance_.DefaultConstruct();
  _CreateServiceConfigRequest_default_instance_.DefaultConstruct();
  _SubmitConfigSourceRequest_default_instance_.DefaultConstruct();
  _SubmitConfigSourceResponse_default_instance_.DefaultConstruct();
  _CreateServiceRolloutRequest_default_instance_.DefaultConstruct();
  _ListServiceRolloutsRequest_default_instance_.DefaultConstruct();
  _ListServiceRolloutsResponse_default_instance_.DefaultConstruct();
  _GetServiceRolloutRequest_default_instance_.DefaultConstruct();
  _EnableServiceRequest_default_instance_.DefaultConstruct();
  _DisableServiceRequest_default_instance_.DefaultConstruct();
  _GenerateConfigReportRequest_default_instance_.DefaultConstruct();
  _GenerateConfigReportResponse_default_instance_.DefaultConstruct();
  _CreateServiceRequest_default_instance_.get_mutable()->service_ = const_cast< ::google::api::servicemanagement::v1::ManagedService*>(
      ::google::api::servicemanagement::v1::ManagedService::internal_default_instance());
  _UndeleteServiceResponse_default_instance_.get_mutable()->service_ = const_cast< ::google::api::servicemanagement::v1::ManagedService*>(
      ::google::api::servicemanagement::v1::ManagedService::internal_default_instance());
  _CreateServiceConfigRequest_default_instance_.get_mutable()->service_config_ = const_cast< ::google::api::Service*>(
      ::google::api::Service::internal_default_instance());
  _SubmitConfigSourceRequest_default_instance_.get_mutable()->config_source_ = const_cast< ::google::api::servicemanagement::v1::ConfigSource*>(
      ::google::api::servicemanagement::v1::ConfigSource::internal_default_instance());
  _SubmitConfigSourceResponse_default_instance_.get_mutable()->service_config_ = const_cast< ::google::api::Service*>(
      ::google::api::Service::internal_default_instance());
  _CreateServiceRolloutRequest_default_instance_.get_mutable()->rollout_ = const_cast< ::google::api::servicemanagement::v1::Rollout*>(
      ::google::api::servicemanagement::v1::Rollout::internal_default_instance());
  _GenerateConfigReportRequest_default_instance_.get_mutable()->new_config_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
  _GenerateConfigReportRequest_default_instance_.get_mutable()->old_config_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}

void protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto_impl);
}
void protobuf_AddDesc_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto_impl() {
  protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  static const char descriptor[] = {
      "\n4google/api/servicemanagement/v1/servic"
      "emanager.proto\022\037google.api.servicemanage"
      "ment.v1\032\034google/api/annotations.proto\032\030g"
      "oogle/api/service.proto\032/google/api/serv"
      "icemanagement/v1/resources.proto\032#google"
      "/longrunning/operations.proto\032\031google/pr"
      "otobuf/any.proto\032\033google/protobuf/empty."
      "proto\032 google/protobuf/field_mask.proto\032"
      "\034google/protobuf/struct.proto\032\027google/rp"
      "c/status.proto\"Y\n\023ListServicesRequest\022\033\n"
      "\023producer_project_id\030\001 \001(\t\022\021\n\tpage_size\030"
      "\005 \001(\005\022\022\n\npage_token\030\006 \001(\t\"r\n\024ListService"
      "sResponse\022A\n\010services\030\001 \003(\0132/.google.api"
      ".servicemanagement.v1.ManagedService\022\027\n\017"
      "next_page_token\030\002 \001(\t\")\n\021GetServiceReque"
      "st\022\024\n\014service_name\030\001 \001(\t\"X\n\024CreateServic"
      "eRequest\022@\n\007service\030\001 \001(\0132/.google.api.s"
      "ervicemanagement.v1.ManagedService\",\n\024De"
      "leteServiceRequest\022\024\n\014service_name\030\001 \001(\t"
      "\".\n\026UndeleteServiceRequest\022\024\n\014service_na"
      "me\030\001 \001(\t\"[\n\027UndeleteServiceResponse\022@\n\007s"
      "ervice\030\001 \001(\0132/.google.api.servicemanagem"
      "ent.v1.ManagedService\"B\n\027GetServiceConfi"
      "gRequest\022\024\n\014service_name\030\001 \001(\t\022\021\n\tconfig"
      "_id\030\002 \001(\t\"X\n\031ListServiceConfigsRequest\022\024"
      "\n\014service_name\030\001 \001(\t\022\022\n\npage_token\030\002 \001(\t"
      "\022\021\n\tpage_size\030\003 \001(\005\"c\n\032ListServiceConfig"
      "sResponse\022,\n\017service_configs\030\001 \003(\0132\023.goo"
      "gle.api.Service\022\027\n\017next_page_token\030\002 \001(\t"
      "\"_\n\032CreateServiceConfigRequest\022\024\n\014servic"
      "e_name\030\001 \001(\t\022+\n\016service_config\030\002 \001(\0132\023.g"
      "oogle.api.Service\"\216\001\n\031SubmitConfigSource"
      "Request\022\024\n\014service_name\030\001 \001(\t\022D\n\rconfig_"
      "source\030\002 \001(\0132-.google.api.servicemanagem"
      "ent.v1.ConfigSource\022\025\n\rvalidate_only\030\003 \001"
      "(\010\"I\n\032SubmitConfigSourceResponse\022+\n\016serv"
      "ice_config\030\001 \001(\0132\023.google.api.Service\"n\n"
      "\033CreateServiceRolloutRequest\022\024\n\014service_"
      "name\030\001 \001(\t\0229\n\007rollout\030\002 \001(\0132(.google.api"
      ".servicemanagement.v1.Rollout\"Y\n\032ListSer"
      "viceRolloutsRequest\022\024\n\014service_name\030\001 \001("
      "\t\022\022\n\npage_token\030\002 \001(\t\022\021\n\tpage_size\030\003 \001(\005"
      "\"r\n\033ListServiceRolloutsResponse\022:\n\010rollo"
      "uts\030\001 \003(\0132(.google.api.servicemanagement"
      ".v1.Rollout\022\027\n\017next_page_token\030\002 \001(\t\"D\n\030"
      "GetServiceRolloutRequest\022\024\n\014service_name"
      "\030\001 \001(\t\022\022\n\nrollout_id\030\002 \001(\t\"A\n\024EnableServ"
      "iceRequest\022\024\n\014service_name\030\001 \001(\t\022\023\n\013cons"
      "umer_id\030\002 \001(\t\"B\n\025DisableServiceRequest\022\024"
      "\n\014service_name\030\001 \001(\t\022\023\n\013consumer_id\030\002 \001("
      "\t\"q\n\033GenerateConfigReportRequest\022(\n\nnew_"
      "config\030\001 \001(\0132\024.google.protobuf.Any\022(\n\nol"
      "d_config\030\002 \001(\0132\024.google.protobuf.Any\"\311\001\n"
      "\034GenerateConfigReportResponse\022\024\n\014service"
      "_name\030\001 \001(\t\022\n\n\002id\030\002 \001(\t\022E\n\016change_report"
      "s\030\003 \003(\0132-.google.api.servicemanagement.v"
      "1.ChangeReport\022@\n\013diagnostics\030\004 \003(\0132+.go"
      "ogle.api.servicemanagement.v1.Diagnostic"
      "2\256\023\n\016ServiceManager\022\221\001\n\014ListServices\0224.g"
      "oogle.api.servicemanagement.v1.ListServi"
      "cesRequest\0325.google.api.servicemanagemen"
      "t.v1.ListServicesResponse\"\024\202\323\344\223\002\016\022\014/v1/s"
      "ervices\022\226\001\n\nGetService\0222.google.api.serv"
      "icemanagement.v1.GetServiceRequest\032/.goo"
      "gle.api.servicemanagement.v1.ManagedServ"
      "ice\"#\202\323\344\223\002\035\022\033/v1/services/{service_name}"
      "\022\204\001\n\rCreateService\0225.google.api.servicem"
      "anagement.v1.CreateServiceRequest\032\035.goog"
      "le.longrunning.Operation\"\035\202\323\344\223\002\027\"\014/v1/se"
      "rvices:\007service\022\212\001\n\rDeleteService\0225.goog"
      "le.api.servicemanagement.v1.DeleteServic"
      "eRequest\032\035.google.longrunning.Operation\""
      "#\202\323\344\223\002\035*\033/v1/services/{service_name}\022\227\001\n"
      "\017UndeleteService\0227.google.api.serviceman"
      "agement.v1.UndeleteServiceRequest\032\035.goog"
      "le.longrunning.Operation\",\202\323\344\223\002&\"$/v1/se"
      "rvices/{service_name}:undelete\022\272\001\n\022ListS"
      "erviceConfigs\022:.google.api.servicemanage"
      "ment.v1.ListServiceConfigsRequest\032;.goog"
      "le.api.servicemanagement.v1.ListServiceC"
      "onfigsResponse\"+\202\323\344\223\002%\022#/v1/services/{se"
      "rvice_name}/configs\022\232\001\n\020GetServiceConfig"
      "\0228.google.api.servicemanagement.v1.GetSe"
      "rviceConfigRequest\032\023.google.api.Service\""
      "7\202\323\344\223\0021\022//v1/services/{service_name}/con"
      "figs/{config_id}\022\244\001\n\023CreateServiceConfig"
      "\022;.google.api.servicemanagement.v1.Creat"
      "eServiceConfigRequest\032\023.google.api.Servi"
      "ce\";\202\323\344\223\0025\"#/v1/services/{service_name}/"
      "configs:\016service_config\022\246\001\n\022SubmitConfig"
      "Source\022:.google.api.servicemanagement.v1"
      ".SubmitConfigSourceRequest\032\035.google.long"
      "running.Operation\"5\202\323\344\223\002/\"*/v1/services/"
      "{service_name}/configs:submit:\001*\022\276\001\n\023Lis"
      "tServiceRollouts\022;.google.api.serviceman"
      "agement.v1.ListServiceRolloutsRequest\032<."
      "google.api.servicemanagement.v1.ListServ"
      "iceRolloutsResponse\",\202\323\344\223\002&\022$/v1/service"
      "s/{service_name}/rollouts\022\263\001\n\021GetService"
      "Rollout\0229.google.api.servicemanagement.v"
      "1.GetServiceRolloutRequest\032(.google.api."
      "servicemanagement.v1.Rollout\"9\202\323\344\223\0023\0221/v"
      "1/services/{service_name}/rollouts/{roll"
      "out_id}\022\252\001\n\024CreateServiceRollout\022<.googl"
      "e.api.servicemanagement.v1.CreateService"
      "RolloutRequest\032\035.google.longrunning.Oper"
      "ation\"5\202\323\344\223\002/\"$/v1/services/{service_nam"
      "e}/rollouts:\007rollout\022\301\001\n\024GenerateConfigR"
      "eport\022<.google.api.servicemanagement.v1."
      "GenerateConfigReportRequest\032=.google.api"
      ".servicemanagement.v1.GenerateConfigRepo"
      "rtResponse\",\202\323\344\223\002&\"!/v1/services:generat"
      "eConfigReport:\001*\022\224\001\n\rEnableService\0225.goo"
      "gle.api.servicemanagement.v1.EnableServi"
      "ceRequest\032\035.google.longrunning.Operation"
      "\"-\202\323\344\223\002\'\"\"/v1/services/{service_name}:en"
      "able:\001*\022\227\001\n\016DisableService\0226.google.api."
      "servicemanagement.v1.DisableServiceReque"
      "st\032\035.google.longrunning.Operation\".\202\323\344\223\002"
      "(\"#/v1/services/{service_name}:disable:\001"
      "*BC\n#com.google.api.servicemanagement.v1"
      "B\023ServiceManagerProtoP\001\242\002\004GASMb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4878);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/api/servicemanagement/v1/servicemanager.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_AddDesc_google_2fapi_2fannotations_2eproto();
  ::google::api::protobuf_AddDesc_google_2fapi_2fservice_2eproto();
  ::google::api::servicemanagement::v1::protobuf_AddDesc_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto();
  ::google::longrunning::protobuf_AddDesc_google_2flongrunning_2foperations_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fany_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fempty_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2ffield_5fmask_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fstruct_2eproto();
  ::google::rpc::protobuf_AddDesc_google_2frpc_2fstatus_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto_once_);
void protobuf_AddDesc_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto_once_,
                 &protobuf_AddDesc_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto {
  StaticDescriptorInitializer_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto() {
    protobuf_AddDesc_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  }
} static_descriptor_initializer_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListServicesRequest::kProducerProjectIdFieldNumber;
const int ListServicesRequest::kPageSizeFieldNumber;
const int ListServicesRequest::kPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListServicesRequest::ListServicesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicemanagement.v1.ListServicesRequest)
}
ListServicesRequest::ListServicesRequest(const ListServicesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  producer_project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.producer_project_id().size() > 0) {
    producer_project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.producer_project_id_);
  }
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token_);
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:google.api.servicemanagement.v1.ListServicesRequest)
}

void ListServicesRequest::SharedCtor() {
  producer_project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
  _cached_size_ = 0;
}

ListServicesRequest::~ListServicesRequest() {
  // @@protoc_insertion_point(destructor:google.api.servicemanagement.v1.ListServicesRequest)
  SharedDtor();
}

void ListServicesRequest::SharedDtor() {
  producer_project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListServicesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListServicesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[0].descriptor;
}

const ListServicesRequest& ListServicesRequest::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  return *internal_default_instance();
}

ListServicesRequest* ListServicesRequest::New(::google::protobuf::Arena* arena) const {
  ListServicesRequest* n = new ListServicesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListServicesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicemanagement.v1.ListServicesRequest)
  producer_project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
}

bool ListServicesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.servicemanagement.v1.ListServicesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string producer_project_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_producer_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->producer_project_id().data(), this->producer_project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicemanagement.v1.ListServicesRequest.producer_project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), this->page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicemanagement.v1.ListServicesRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.servicemanagement.v1.ListServicesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.servicemanagement.v1.ListServicesRequest)
  return false;
#undef DO_
}

void ListServicesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.servicemanagement.v1.ListServicesRequest)
  // string producer_project_id = 1;
  if (this->producer_project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->producer_project_id().data(), this->producer_project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.ListServicesRequest.producer_project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->producer_project_id(), output);
  }

  // int32 page_size = 5;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->page_size(), output);
  }

  // string page_token = 6;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.ListServicesRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.servicemanagement.v1.ListServicesRequest)
}

::google::protobuf::uint8* ListServicesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicemanagement.v1.ListServicesRequest)
  // string producer_project_id = 1;
  if (this->producer_project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->producer_project_id().data(), this->producer_project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.ListServicesRequest.producer_project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->producer_project_id(), target);
  }

  // int32 page_size = 5;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->page_size(), target);
  }

  // string page_token = 6;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.ListServicesRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicemanagement.v1.ListServicesRequest)
  return target;
}

size_t ListServicesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicemanagement.v1.ListServicesRequest)
  size_t total_size = 0;

  // string producer_project_id = 1;
  if (this->producer_project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->producer_project_id());
  }

  // string page_token = 6;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // int32 page_size = 5;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListServicesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicemanagement.v1.ListServicesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListServicesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListServicesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicemanagement.v1.ListServicesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicemanagement.v1.ListServicesRequest)
    MergeFrom(*source);
  }
}

void ListServicesRequest::MergeFrom(const ListServicesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicemanagement.v1.ListServicesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.producer_project_id().size() > 0) {

    producer_project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.producer_project_id_);
  }
  if (from.page_token().size() > 0) {

    page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token_);
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void ListServicesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicemanagement.v1.ListServicesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListServicesRequest::CopyFrom(const ListServicesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicemanagement.v1.ListServicesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListServicesRequest::IsInitialized() const {
  return true;
}

void ListServicesRequest::Swap(ListServicesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListServicesRequest::InternalSwap(ListServicesRequest* other) {
  producer_project_id_.Swap(&other->producer_project_id_);
  page_token_.Swap(&other->page_token_);
  std::swap(page_size_, other->page_size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListServicesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListServicesRequest

// string producer_project_id = 1;
void ListServicesRequest::clear_producer_project_id() {
  producer_project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListServicesRequest::producer_project_id() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.ListServicesRequest.producer_project_id)
  return producer_project_id_.GetNoArena();
}
void ListServicesRequest::set_producer_project_id(const ::std::string& value) {
  
  producer_project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.ListServicesRequest.producer_project_id)
}
void ListServicesRequest::set_producer_project_id(const char* value) {
  
  producer_project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicemanagement.v1.ListServicesRequest.producer_project_id)
}
void ListServicesRequest::set_producer_project_id(const char* value, size_t size) {
  
  producer_project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicemanagement.v1.ListServicesRequest.producer_project_id)
}
::std::string* ListServicesRequest::mutable_producer_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.ListServicesRequest.producer_project_id)
  return producer_project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListServicesRequest::release_producer_project_id() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.ListServicesRequest.producer_project_id)
  
  return producer_project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListServicesRequest::set_allocated_producer_project_id(::std::string* producer_project_id) {
  if (producer_project_id != NULL) {
    
  } else {
    
  }
  producer_project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), producer_project_id);
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.ListServicesRequest.producer_project_id)
}

// int32 page_size = 5;
void ListServicesRequest::clear_page_size() {
  page_size_ = 0;
}
::google::protobuf::int32 ListServicesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.ListServicesRequest.page_size)
  return page_size_;
}
void ListServicesRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.ListServicesRequest.page_size)
}

// string page_token = 6;
void ListServicesRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListServicesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.ListServicesRequest.page_token)
  return page_token_.GetNoArena();
}
void ListServicesRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.ListServicesRequest.page_token)
}
void ListServicesRequest::set_page_token(const char* value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicemanagement.v1.ListServicesRequest.page_token)
}
void ListServicesRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicemanagement.v1.ListServicesRequest.page_token)
}
::std::string* ListServicesRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.ListServicesRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListServicesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.ListServicesRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListServicesRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.ListServicesRequest.page_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListServicesResponse::kServicesFieldNumber;
const int ListServicesResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListServicesResponse::ListServicesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicemanagement.v1.ListServicesResponse)
}
ListServicesResponse::ListServicesResponse(const ListServicesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      services_(from.services_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token_);
  }
  // @@protoc_insertion_point(copy_constructor:google.api.servicemanagement.v1.ListServicesResponse)
}

void ListServicesResponse::SharedCtor() {
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ListServicesResponse::~ListServicesResponse() {
  // @@protoc_insertion_point(destructor:google.api.servicemanagement.v1.ListServicesResponse)
  SharedDtor();
}

void ListServicesResponse::SharedDtor() {
  next_page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListServicesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListServicesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[1].descriptor;
}

const ListServicesResponse& ListServicesResponse::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  return *internal_default_instance();
}

ListServicesResponse* ListServicesResponse::New(::google::protobuf::Arena* arena) const {
  ListServicesResponse* n = new ListServicesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListServicesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicemanagement.v1.ListServicesResponse)
  services_.Clear();
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ListServicesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.servicemanagement.v1.ListServicesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.api.servicemanagement.v1.ManagedService services = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_services()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // string next_page_token = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), this->next_page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicemanagement.v1.ListServicesResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.servicemanagement.v1.ListServicesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.servicemanagement.v1.ListServicesResponse)
  return false;
#undef DO_
}

void ListServicesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.servicemanagement.v1.ListServicesResponse)
  // repeated .google.api.servicemanagement.v1.ManagedService services = 1;
  for (unsigned int i = 0, n = this->services_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->services(i), output);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.ListServicesResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.servicemanagement.v1.ListServicesResponse)
}

::google::protobuf::uint8* ListServicesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicemanagement.v1.ListServicesResponse)
  // repeated .google.api.servicemanagement.v1.ManagedService services = 1;
  for (unsigned int i = 0, n = this->services_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->services(i), false, target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.ListServicesResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicemanagement.v1.ListServicesResponse)
  return target;
}

size_t ListServicesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicemanagement.v1.ListServicesResponse)
  size_t total_size = 0;

  // repeated .google.api.servicemanagement.v1.ManagedService services = 1;
  {
    unsigned int count = this->services_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->services(i));
    }
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListServicesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicemanagement.v1.ListServicesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListServicesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListServicesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicemanagement.v1.ListServicesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicemanagement.v1.ListServicesResponse)
    MergeFrom(*source);
  }
}

void ListServicesResponse::MergeFrom(const ListServicesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicemanagement.v1.ListServicesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  services_.MergeFrom(from.services_);
  if (from.next_page_token().size() > 0) {

    next_page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token_);
  }
}

void ListServicesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicemanagement.v1.ListServicesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListServicesResponse::CopyFrom(const ListServicesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicemanagement.v1.ListServicesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListServicesResponse::IsInitialized() const {
  return true;
}

void ListServicesResponse::Swap(ListServicesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListServicesResponse::InternalSwap(ListServicesResponse* other) {
  services_.UnsafeArenaSwap(&other->services_);
  next_page_token_.Swap(&other->next_page_token_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListServicesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListServicesResponse

// repeated .google.api.servicemanagement.v1.ManagedService services = 1;
int ListServicesResponse::services_size() const {
  return services_.size();
}
void ListServicesResponse::clear_services() {
  services_.Clear();
}
const ::google::api::servicemanagement::v1::ManagedService& ListServicesResponse::services(int index) const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.ListServicesResponse.services)
  return services_.Get(index);
}
::google::api::servicemanagement::v1::ManagedService* ListServicesResponse::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.ListServicesResponse.services)
  return services_.Mutable(index);
}
::google::api::servicemanagement::v1::ManagedService* ListServicesResponse::add_services() {
  // @@protoc_insertion_point(field_add:google.api.servicemanagement.v1.ListServicesResponse.services)
  return services_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::api::servicemanagement::v1::ManagedService >*
ListServicesResponse::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:google.api.servicemanagement.v1.ListServicesResponse.services)
  return &services_;
}
const ::google::protobuf::RepeatedPtrField< ::google::api::servicemanagement::v1::ManagedService >&
ListServicesResponse::services() const {
  // @@protoc_insertion_point(field_list:google.api.servicemanagement.v1.ListServicesResponse.services)
  return services_;
}

// string next_page_token = 2;
void ListServicesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListServicesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.ListServicesResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
void ListServicesResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.ListServicesResponse.next_page_token)
}
void ListServicesResponse::set_next_page_token(const char* value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicemanagement.v1.ListServicesResponse.next_page_token)
}
void ListServicesResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicemanagement.v1.ListServicesResponse.next_page_token)
}
::std::string* ListServicesResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.ListServicesResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListServicesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.ListServicesResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListServicesResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.ListServicesResponse.next_page_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetServiceRequest::kServiceNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetServiceRequest::GetServiceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicemanagement.v1.GetServiceRequest)
}
GetServiceRequest::GetServiceRequest(const GetServiceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service_name().size() > 0) {
    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.api.servicemanagement.v1.GetServiceRequest)
}

void GetServiceRequest::SharedCtor() {
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetServiceRequest::~GetServiceRequest() {
  // @@protoc_insertion_point(destructor:google.api.servicemanagement.v1.GetServiceRequest)
  SharedDtor();
}

void GetServiceRequest::SharedDtor() {
  service_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetServiceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetServiceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[2].descriptor;
}

const GetServiceRequest& GetServiceRequest::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  return *internal_default_instance();
}

GetServiceRequest* GetServiceRequest::New(::google::protobuf::Arena* arena) const {
  GetServiceRequest* n = new GetServiceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicemanagement.v1.GetServiceRequest)
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetServiceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.servicemanagement.v1.GetServiceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string service_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicemanagement.v1.GetServiceRequest.service_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.servicemanagement.v1.GetServiceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.servicemanagement.v1.GetServiceRequest)
  return false;
#undef DO_
}

void GetServiceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.servicemanagement.v1.GetServiceRequest)
  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.GetServiceRequest.service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->service_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.servicemanagement.v1.GetServiceRequest)
}

::google::protobuf::uint8* GetServiceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicemanagement.v1.GetServiceRequest)
  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.GetServiceRequest.service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicemanagement.v1.GetServiceRequest)
  return target;
}

size_t GetServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicemanagement.v1.GetServiceRequest)
  size_t total_size = 0;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServiceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicemanagement.v1.GetServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServiceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetServiceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicemanagement.v1.GetServiceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicemanagement.v1.GetServiceRequest)
    MergeFrom(*source);
  }
}

void GetServiceRequest::MergeFrom(const GetServiceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicemanagement.v1.GetServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.service_name().size() > 0) {

    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
}

void GetServiceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicemanagement.v1.GetServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceRequest::CopyFrom(const GetServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicemanagement.v1.GetServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceRequest::IsInitialized() const {
  return true;
}

void GetServiceRequest::Swap(GetServiceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetServiceRequest::InternalSwap(GetServiceRequest* other) {
  service_name_.Swap(&other->service_name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetServiceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetServiceRequest

// string service_name = 1;
void GetServiceRequest::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetServiceRequest::service_name() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.GetServiceRequest.service_name)
  return service_name_.GetNoArena();
}
void GetServiceRequest::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.GetServiceRequest.service_name)
}
void GetServiceRequest::set_service_name(const char* value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicemanagement.v1.GetServiceRequest.service_name)
}
void GetServiceRequest::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicemanagement.v1.GetServiceRequest.service_name)
}
::std::string* GetServiceRequest::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.GetServiceRequest.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetServiceRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.GetServiceRequest.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetServiceRequest::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.GetServiceRequest.service_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateServiceRequest::kServiceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateServiceRequest::CreateServiceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicemanagement.v1.CreateServiceRequest)
}
CreateServiceRequest::CreateServiceRequest(const CreateServiceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_service()) {
    service_ = new ::google::api::servicemanagement::v1::ManagedService(*from.service_);
  } else {
    service_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.api.servicemanagement.v1.CreateServiceRequest)
}

void CreateServiceRequest::SharedCtor() {
  service_ = NULL;
  _cached_size_ = 0;
}

CreateServiceRequest::~CreateServiceRequest() {
  // @@protoc_insertion_point(destructor:google.api.servicemanagement.v1.CreateServiceRequest)
  SharedDtor();
}

void CreateServiceRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete service_;
  }
}

void CreateServiceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateServiceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[3].descriptor;
}

const CreateServiceRequest& CreateServiceRequest::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  return *internal_default_instance();
}

CreateServiceRequest* CreateServiceRequest::New(::google::protobuf::Arena* arena) const {
  CreateServiceRequest* n = new CreateServiceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicemanagement.v1.CreateServiceRequest)
  if (GetArenaNoVirtual() == NULL && service_ != NULL) {
    delete service_;
  }
  service_ = NULL;
}

bool CreateServiceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.servicemanagement.v1.CreateServiceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.api.servicemanagement.v1.ManagedService service = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_service()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.servicemanagement.v1.CreateServiceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.servicemanagement.v1.CreateServiceRequest)
  return false;
#undef DO_
}

void CreateServiceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.servicemanagement.v1.CreateServiceRequest)
  // .google.api.servicemanagement.v1.ManagedService service = 1;
  if (this->has_service()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->service_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.servicemanagement.v1.CreateServiceRequest)
}

::google::protobuf::uint8* CreateServiceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicemanagement.v1.CreateServiceRequest)
  // .google.api.servicemanagement.v1.ManagedService service = 1;
  if (this->has_service()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->service_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicemanagement.v1.CreateServiceRequest)
  return target;
}

size_t CreateServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicemanagement.v1.CreateServiceRequest)
  size_t total_size = 0;

  // .google.api.servicemanagement.v1.ManagedService service = 1;
  if (this->has_service()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->service_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateServiceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicemanagement.v1.CreateServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateServiceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateServiceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicemanagement.v1.CreateServiceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicemanagement.v1.CreateServiceRequest)
    MergeFrom(*source);
  }
}

void CreateServiceRequest::MergeFrom(const CreateServiceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicemanagement.v1.CreateServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_service()) {
    mutable_service()->::google::api::servicemanagement::v1::ManagedService::MergeFrom(from.service());
  }
}

void CreateServiceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicemanagement.v1.CreateServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateServiceRequest::CopyFrom(const CreateServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicemanagement.v1.CreateServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateServiceRequest::IsInitialized() const {
  return true;
}

void CreateServiceRequest::Swap(CreateServiceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateServiceRequest::InternalSwap(CreateServiceRequest* other) {
  std::swap(service_, other->service_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateServiceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateServiceRequest

// .google.api.servicemanagement.v1.ManagedService service = 1;
bool CreateServiceRequest::has_service() const {
  return this != internal_default_instance() && service_ != NULL;
}
void CreateServiceRequest::clear_service() {
  if (GetArenaNoVirtual() == NULL && service_ != NULL) delete service_;
  service_ = NULL;
}
const ::google::api::servicemanagement::v1::ManagedService& CreateServiceRequest::service() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.CreateServiceRequest.service)
  return service_ != NULL ? *service_
                         : *::google::api::servicemanagement::v1::ManagedService::internal_default_instance();
}
::google::api::servicemanagement::v1::ManagedService* CreateServiceRequest::mutable_service() {
  
  if (service_ == NULL) {
    service_ = new ::google::api::servicemanagement::v1::ManagedService;
  }
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.CreateServiceRequest.service)
  return service_;
}
::google::api::servicemanagement::v1::ManagedService* CreateServiceRequest::release_service() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.CreateServiceRequest.service)
  
  ::google::api::servicemanagement::v1::ManagedService* temp = service_;
  service_ = NULL;
  return temp;
}
void CreateServiceRequest::set_allocated_service(::google::api::servicemanagement::v1::ManagedService* service) {
  delete service_;
  service_ = service;
  if (service) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.CreateServiceRequest.service)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteServiceRequest::kServiceNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteServiceRequest::DeleteServiceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicemanagement.v1.DeleteServiceRequest)
}
DeleteServiceRequest::DeleteServiceRequest(const DeleteServiceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service_name().size() > 0) {
    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.api.servicemanagement.v1.DeleteServiceRequest)
}

void DeleteServiceRequest::SharedCtor() {
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DeleteServiceRequest::~DeleteServiceRequest() {
  // @@protoc_insertion_point(destructor:google.api.servicemanagement.v1.DeleteServiceRequest)
  SharedDtor();
}

void DeleteServiceRequest::SharedDtor() {
  service_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteServiceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteServiceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[4].descriptor;
}

const DeleteServiceRequest& DeleteServiceRequest::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  return *internal_default_instance();
}

DeleteServiceRequest* DeleteServiceRequest::New(::google::protobuf::Arena* arena) const {
  DeleteServiceRequest* n = new DeleteServiceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicemanagement.v1.DeleteServiceRequest)
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeleteServiceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.servicemanagement.v1.DeleteServiceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string service_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicemanagement.v1.DeleteServiceRequest.service_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.servicemanagement.v1.DeleteServiceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.servicemanagement.v1.DeleteServiceRequest)
  return false;
#undef DO_
}

void DeleteServiceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.servicemanagement.v1.DeleteServiceRequest)
  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.DeleteServiceRequest.service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->service_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.servicemanagement.v1.DeleteServiceRequest)
}

::google::protobuf::uint8* DeleteServiceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicemanagement.v1.DeleteServiceRequest)
  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.DeleteServiceRequest.service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicemanagement.v1.DeleteServiceRequest)
  return target;
}

size_t DeleteServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicemanagement.v1.DeleteServiceRequest)
  size_t total_size = 0;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteServiceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicemanagement.v1.DeleteServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteServiceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteServiceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicemanagement.v1.DeleteServiceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicemanagement.v1.DeleteServiceRequest)
    MergeFrom(*source);
  }
}

void DeleteServiceRequest::MergeFrom(const DeleteServiceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicemanagement.v1.DeleteServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.service_name().size() > 0) {

    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
}

void DeleteServiceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicemanagement.v1.DeleteServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteServiceRequest::CopyFrom(const DeleteServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicemanagement.v1.DeleteServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteServiceRequest::IsInitialized() const {
  return true;
}

void DeleteServiceRequest::Swap(DeleteServiceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteServiceRequest::InternalSwap(DeleteServiceRequest* other) {
  service_name_.Swap(&other->service_name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteServiceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteServiceRequest

// string service_name = 1;
void DeleteServiceRequest::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeleteServiceRequest::service_name() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.DeleteServiceRequest.service_name)
  return service_name_.GetNoArena();
}
void DeleteServiceRequest::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.DeleteServiceRequest.service_name)
}
void DeleteServiceRequest::set_service_name(const char* value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicemanagement.v1.DeleteServiceRequest.service_name)
}
void DeleteServiceRequest::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicemanagement.v1.DeleteServiceRequest.service_name)
}
::std::string* DeleteServiceRequest::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.DeleteServiceRequest.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeleteServiceRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.DeleteServiceRequest.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteServiceRequest::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.DeleteServiceRequest.service_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UndeleteServiceRequest::kServiceNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UndeleteServiceRequest::UndeleteServiceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicemanagement.v1.UndeleteServiceRequest)
}
UndeleteServiceRequest::UndeleteServiceRequest(const UndeleteServiceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service_name().size() > 0) {
    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.api.servicemanagement.v1.UndeleteServiceRequest)
}

void UndeleteServiceRequest::SharedCtor() {
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

UndeleteServiceRequest::~UndeleteServiceRequest() {
  // @@protoc_insertion_point(destructor:google.api.servicemanagement.v1.UndeleteServiceRequest)
  SharedDtor();
}

void UndeleteServiceRequest::SharedDtor() {
  service_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UndeleteServiceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UndeleteServiceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[5].descriptor;
}

const UndeleteServiceRequest& UndeleteServiceRequest::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  return *internal_default_instance();
}

UndeleteServiceRequest* UndeleteServiceRequest::New(::google::protobuf::Arena* arena) const {
  UndeleteServiceRequest* n = new UndeleteServiceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UndeleteServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicemanagement.v1.UndeleteServiceRequest)
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UndeleteServiceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.servicemanagement.v1.UndeleteServiceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string service_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicemanagement.v1.UndeleteServiceRequest.service_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.servicemanagement.v1.UndeleteServiceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.servicemanagement.v1.UndeleteServiceRequest)
  return false;
#undef DO_
}

void UndeleteServiceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.servicemanagement.v1.UndeleteServiceRequest)
  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.UndeleteServiceRequest.service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->service_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.servicemanagement.v1.UndeleteServiceRequest)
}

::google::protobuf::uint8* UndeleteServiceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicemanagement.v1.UndeleteServiceRequest)
  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.UndeleteServiceRequest.service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicemanagement.v1.UndeleteServiceRequest)
  return target;
}

size_t UndeleteServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicemanagement.v1.UndeleteServiceRequest)
  size_t total_size = 0;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UndeleteServiceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicemanagement.v1.UndeleteServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UndeleteServiceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UndeleteServiceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicemanagement.v1.UndeleteServiceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicemanagement.v1.UndeleteServiceRequest)
    MergeFrom(*source);
  }
}

void UndeleteServiceRequest::MergeFrom(const UndeleteServiceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicemanagement.v1.UndeleteServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.service_name().size() > 0) {

    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
}

void UndeleteServiceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicemanagement.v1.UndeleteServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UndeleteServiceRequest::CopyFrom(const UndeleteServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicemanagement.v1.UndeleteServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndeleteServiceRequest::IsInitialized() const {
  return true;
}

void UndeleteServiceRequest::Swap(UndeleteServiceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UndeleteServiceRequest::InternalSwap(UndeleteServiceRequest* other) {
  service_name_.Swap(&other->service_name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UndeleteServiceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UndeleteServiceRequest

// string service_name = 1;
void UndeleteServiceRequest::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UndeleteServiceRequest::service_name() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.UndeleteServiceRequest.service_name)
  return service_name_.GetNoArena();
}
void UndeleteServiceRequest::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.UndeleteServiceRequest.service_name)
}
void UndeleteServiceRequest::set_service_name(const char* value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicemanagement.v1.UndeleteServiceRequest.service_name)
}
void UndeleteServiceRequest::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicemanagement.v1.UndeleteServiceRequest.service_name)
}
::std::string* UndeleteServiceRequest::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.UndeleteServiceRequest.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UndeleteServiceRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.UndeleteServiceRequest.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UndeleteServiceRequest::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.UndeleteServiceRequest.service_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UndeleteServiceResponse::kServiceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UndeleteServiceResponse::UndeleteServiceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicemanagement.v1.UndeleteServiceResponse)
}
UndeleteServiceResponse::UndeleteServiceResponse(const UndeleteServiceResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_service()) {
    service_ = new ::google::api::servicemanagement::v1::ManagedService(*from.service_);
  } else {
    service_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.api.servicemanagement.v1.UndeleteServiceResponse)
}

void UndeleteServiceResponse::SharedCtor() {
  service_ = NULL;
  _cached_size_ = 0;
}

UndeleteServiceResponse::~UndeleteServiceResponse() {
  // @@protoc_insertion_point(destructor:google.api.servicemanagement.v1.UndeleteServiceResponse)
  SharedDtor();
}

void UndeleteServiceResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete service_;
  }
}

void UndeleteServiceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UndeleteServiceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[6].descriptor;
}

const UndeleteServiceResponse& UndeleteServiceResponse::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  return *internal_default_instance();
}

UndeleteServiceResponse* UndeleteServiceResponse::New(::google::protobuf::Arena* arena) const {
  UndeleteServiceResponse* n = new UndeleteServiceResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UndeleteServiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicemanagement.v1.UndeleteServiceResponse)
  if (GetArenaNoVirtual() == NULL && service_ != NULL) {
    delete service_;
  }
  service_ = NULL;
}

bool UndeleteServiceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.servicemanagement.v1.UndeleteServiceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.api.servicemanagement.v1.ManagedService service = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_service()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.servicemanagement.v1.UndeleteServiceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.servicemanagement.v1.UndeleteServiceResponse)
  return false;
#undef DO_
}

void UndeleteServiceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.servicemanagement.v1.UndeleteServiceResponse)
  // .google.api.servicemanagement.v1.ManagedService service = 1;
  if (this->has_service()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->service_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.servicemanagement.v1.UndeleteServiceResponse)
}

::google::protobuf::uint8* UndeleteServiceResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicemanagement.v1.UndeleteServiceResponse)
  // .google.api.servicemanagement.v1.ManagedService service = 1;
  if (this->has_service()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->service_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicemanagement.v1.UndeleteServiceResponse)
  return target;
}

size_t UndeleteServiceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicemanagement.v1.UndeleteServiceResponse)
  size_t total_size = 0;

  // .google.api.servicemanagement.v1.ManagedService service = 1;
  if (this->has_service()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->service_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UndeleteServiceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicemanagement.v1.UndeleteServiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UndeleteServiceResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UndeleteServiceResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicemanagement.v1.UndeleteServiceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicemanagement.v1.UndeleteServiceResponse)
    MergeFrom(*source);
  }
}

void UndeleteServiceResponse::MergeFrom(const UndeleteServiceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicemanagement.v1.UndeleteServiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_service()) {
    mutable_service()->::google::api::servicemanagement::v1::ManagedService::MergeFrom(from.service());
  }
}

void UndeleteServiceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicemanagement.v1.UndeleteServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UndeleteServiceResponse::CopyFrom(const UndeleteServiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicemanagement.v1.UndeleteServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndeleteServiceResponse::IsInitialized() const {
  return true;
}

void UndeleteServiceResponse::Swap(UndeleteServiceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UndeleteServiceResponse::InternalSwap(UndeleteServiceResponse* other) {
  std::swap(service_, other->service_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UndeleteServiceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UndeleteServiceResponse

// .google.api.servicemanagement.v1.ManagedService service = 1;
bool UndeleteServiceResponse::has_service() const {
  return this != internal_default_instance() && service_ != NULL;
}
void UndeleteServiceResponse::clear_service() {
  if (GetArenaNoVirtual() == NULL && service_ != NULL) delete service_;
  service_ = NULL;
}
const ::google::api::servicemanagement::v1::ManagedService& UndeleteServiceResponse::service() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.UndeleteServiceResponse.service)
  return service_ != NULL ? *service_
                         : *::google::api::servicemanagement::v1::ManagedService::internal_default_instance();
}
::google::api::servicemanagement::v1::ManagedService* UndeleteServiceResponse::mutable_service() {
  
  if (service_ == NULL) {
    service_ = new ::google::api::servicemanagement::v1::ManagedService;
  }
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.UndeleteServiceResponse.service)
  return service_;
}
::google::api::servicemanagement::v1::ManagedService* UndeleteServiceResponse::release_service() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.UndeleteServiceResponse.service)
  
  ::google::api::servicemanagement::v1::ManagedService* temp = service_;
  service_ = NULL;
  return temp;
}
void UndeleteServiceResponse::set_allocated_service(::google::api::servicemanagement::v1::ManagedService* service) {
  delete service_;
  service_ = service;
  if (service) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.UndeleteServiceResponse.service)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetServiceConfigRequest::kServiceNameFieldNumber;
const int GetServiceConfigRequest::kConfigIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetServiceConfigRequest::GetServiceConfigRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicemanagement.v1.GetServiceConfigRequest)
}
GetServiceConfigRequest::GetServiceConfigRequest(const GetServiceConfigRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service_name().size() > 0) {
    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  config_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.config_id().size() > 0) {
    config_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_id_);
  }
  // @@protoc_insertion_point(copy_constructor:google.api.servicemanagement.v1.GetServiceConfigRequest)
}

void GetServiceConfigRequest::SharedCtor() {
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetServiceConfigRequest::~GetServiceConfigRequest() {
  // @@protoc_insertion_point(destructor:google.api.servicemanagement.v1.GetServiceConfigRequest)
  SharedDtor();
}

void GetServiceConfigRequest::SharedDtor() {
  service_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetServiceConfigRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetServiceConfigRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[7].descriptor;
}

const GetServiceConfigRequest& GetServiceConfigRequest::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  return *internal_default_instance();
}

GetServiceConfigRequest* GetServiceConfigRequest::New(::google::protobuf::Arena* arena) const {
  GetServiceConfigRequest* n = new GetServiceConfigRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetServiceConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicemanagement.v1.GetServiceConfigRequest)
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetServiceConfigRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.servicemanagement.v1.GetServiceConfigRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string service_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicemanagement.v1.GetServiceConfigRequest.service_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string config_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->config_id().data(), this->config_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicemanagement.v1.GetServiceConfigRequest.config_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.servicemanagement.v1.GetServiceConfigRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.servicemanagement.v1.GetServiceConfigRequest)
  return false;
#undef DO_
}

void GetServiceConfigRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.servicemanagement.v1.GetServiceConfigRequest)
  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.GetServiceConfigRequest.service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->service_name(), output);
  }

  // string config_id = 2;
  if (this->config_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->config_id().data(), this->config_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.GetServiceConfigRequest.config_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->config_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.servicemanagement.v1.GetServiceConfigRequest)
}

::google::protobuf::uint8* GetServiceConfigRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicemanagement.v1.GetServiceConfigRequest)
  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.GetServiceConfigRequest.service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_name(), target);
  }

  // string config_id = 2;
  if (this->config_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->config_id().data(), this->config_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.GetServiceConfigRequest.config_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->config_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicemanagement.v1.GetServiceConfigRequest)
  return target;
}

size_t GetServiceConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicemanagement.v1.GetServiceConfigRequest)
  size_t total_size = 0;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_name());
  }

  // string config_id = 2;
  if (this->config_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->config_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServiceConfigRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicemanagement.v1.GetServiceConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServiceConfigRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetServiceConfigRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicemanagement.v1.GetServiceConfigRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicemanagement.v1.GetServiceConfigRequest)
    MergeFrom(*source);
  }
}

void GetServiceConfigRequest::MergeFrom(const GetServiceConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicemanagement.v1.GetServiceConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.service_name().size() > 0) {

    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  if (from.config_id().size() > 0) {

    config_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_id_);
  }
}

void GetServiceConfigRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicemanagement.v1.GetServiceConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceConfigRequest::CopyFrom(const GetServiceConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicemanagement.v1.GetServiceConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceConfigRequest::IsInitialized() const {
  return true;
}

void GetServiceConfigRequest::Swap(GetServiceConfigRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetServiceConfigRequest::InternalSwap(GetServiceConfigRequest* other) {
  service_name_.Swap(&other->service_name_);
  config_id_.Swap(&other->config_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetServiceConfigRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetServiceConfigRequest

// string service_name = 1;
void GetServiceConfigRequest::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetServiceConfigRequest::service_name() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.GetServiceConfigRequest.service_name)
  return service_name_.GetNoArena();
}
void GetServiceConfigRequest::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.GetServiceConfigRequest.service_name)
}
void GetServiceConfigRequest::set_service_name(const char* value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicemanagement.v1.GetServiceConfigRequest.service_name)
}
void GetServiceConfigRequest::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicemanagement.v1.GetServiceConfigRequest.service_name)
}
::std::string* GetServiceConfigRequest::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.GetServiceConfigRequest.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetServiceConfigRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.GetServiceConfigRequest.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetServiceConfigRequest::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.GetServiceConfigRequest.service_name)
}

// string config_id = 2;
void GetServiceConfigRequest::clear_config_id() {
  config_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetServiceConfigRequest::config_id() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.GetServiceConfigRequest.config_id)
  return config_id_.GetNoArena();
}
void GetServiceConfigRequest::set_config_id(const ::std::string& value) {
  
  config_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.GetServiceConfigRequest.config_id)
}
void GetServiceConfigRequest::set_config_id(const char* value) {
  
  config_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicemanagement.v1.GetServiceConfigRequest.config_id)
}
void GetServiceConfigRequest::set_config_id(const char* value, size_t size) {
  
  config_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicemanagement.v1.GetServiceConfigRequest.config_id)
}
::std::string* GetServiceConfigRequest::mutable_config_id() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.GetServiceConfigRequest.config_id)
  return config_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetServiceConfigRequest::release_config_id() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.GetServiceConfigRequest.config_id)
  
  return config_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetServiceConfigRequest::set_allocated_config_id(::std::string* config_id) {
  if (config_id != NULL) {
    
  } else {
    
  }
  config_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config_id);
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.GetServiceConfigRequest.config_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListServiceConfigsRequest::kServiceNameFieldNumber;
const int ListServiceConfigsRequest::kPageTokenFieldNumber;
const int ListServiceConfigsRequest::kPageSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListServiceConfigsRequest::ListServiceConfigsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicemanagement.v1.ListServiceConfigsRequest)
}
ListServiceConfigsRequest::ListServiceConfigsRequest(const ListServiceConfigsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service_name().size() > 0) {
    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token_);
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:google.api.servicemanagement.v1.ListServiceConfigsRequest)
}

void ListServiceConfigsRequest::SharedCtor() {
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
  _cached_size_ = 0;
}

ListServiceConfigsRequest::~ListServiceConfigsRequest() {
  // @@protoc_insertion_point(destructor:google.api.servicemanagement.v1.ListServiceConfigsRequest)
  SharedDtor();
}

void ListServiceConfigsRequest::SharedDtor() {
  service_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListServiceConfigsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListServiceConfigsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[8].descriptor;
}

const ListServiceConfigsRequest& ListServiceConfigsRequest::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  return *internal_default_instance();
}

ListServiceConfigsRequest* ListServiceConfigsRequest::New(::google::protobuf::Arena* arena) const {
  ListServiceConfigsRequest* n = new ListServiceConfigsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListServiceConfigsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicemanagement.v1.ListServiceConfigsRequest)
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
}

bool ListServiceConfigsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.servicemanagement.v1.ListServiceConfigsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string service_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicemanagement.v1.ListServiceConfigsRequest.service_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), this->page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicemanagement.v1.ListServiceConfigsRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.servicemanagement.v1.ListServiceConfigsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.servicemanagement.v1.ListServiceConfigsRequest)
  return false;
#undef DO_
}

void ListServiceConfigsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.servicemanagement.v1.ListServiceConfigsRequest)
  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.ListServiceConfigsRequest.service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->service_name(), output);
  }

  // string page_token = 2;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.ListServiceConfigsRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->page_token(), output);
  }

  // int32 page_size = 3;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->page_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.servicemanagement.v1.ListServiceConfigsRequest)
}

::google::protobuf::uint8* ListServiceConfigsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicemanagement.v1.ListServiceConfigsRequest)
  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.ListServiceConfigsRequest.service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_name(), target);
  }

  // string page_token = 2;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.ListServiceConfigsRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->page_token(), target);
  }

  // int32 page_size = 3;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->page_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicemanagement.v1.ListServiceConfigsRequest)
  return target;
}

size_t ListServiceConfigsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicemanagement.v1.ListServiceConfigsRequest)
  size_t total_size = 0;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_name());
  }

  // string page_token = 2;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // int32 page_size = 3;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListServiceConfigsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicemanagement.v1.ListServiceConfigsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListServiceConfigsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListServiceConfigsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicemanagement.v1.ListServiceConfigsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicemanagement.v1.ListServiceConfigsRequest)
    MergeFrom(*source);
  }
}

void ListServiceConfigsRequest::MergeFrom(const ListServiceConfigsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicemanagement.v1.ListServiceConfigsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.service_name().size() > 0) {

    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  if (from.page_token().size() > 0) {

    page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token_);
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void ListServiceConfigsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicemanagement.v1.ListServiceConfigsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListServiceConfigsRequest::CopyFrom(const ListServiceConfigsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicemanagement.v1.ListServiceConfigsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListServiceConfigsRequest::IsInitialized() const {
  return true;
}

void ListServiceConfigsRequest::Swap(ListServiceConfigsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListServiceConfigsRequest::InternalSwap(ListServiceConfigsRequest* other) {
  service_name_.Swap(&other->service_name_);
  page_token_.Swap(&other->page_token_);
  std::swap(page_size_, other->page_size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListServiceConfigsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListServiceConfigsRequest

// string service_name = 1;
void ListServiceConfigsRequest::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListServiceConfigsRequest::service_name() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.ListServiceConfigsRequest.service_name)
  return service_name_.GetNoArena();
}
void ListServiceConfigsRequest::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.ListServiceConfigsRequest.service_name)
}
void ListServiceConfigsRequest::set_service_name(const char* value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicemanagement.v1.ListServiceConfigsRequest.service_name)
}
void ListServiceConfigsRequest::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicemanagement.v1.ListServiceConfigsRequest.service_name)
}
::std::string* ListServiceConfigsRequest::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.ListServiceConfigsRequest.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListServiceConfigsRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.ListServiceConfigsRequest.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListServiceConfigsRequest::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.ListServiceConfigsRequest.service_name)
}

// string page_token = 2;
void ListServiceConfigsRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListServiceConfigsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.ListServiceConfigsRequest.page_token)
  return page_token_.GetNoArena();
}
void ListServiceConfigsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.ListServiceConfigsRequest.page_token)
}
void ListServiceConfigsRequest::set_page_token(const char* value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicemanagement.v1.ListServiceConfigsRequest.page_token)
}
void ListServiceConfigsRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicemanagement.v1.ListServiceConfigsRequest.page_token)
}
::std::string* ListServiceConfigsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.ListServiceConfigsRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListServiceConfigsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.ListServiceConfigsRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListServiceConfigsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.ListServiceConfigsRequest.page_token)
}

// int32 page_size = 3;
void ListServiceConfigsRequest::clear_page_size() {
  page_size_ = 0;
}
::google::protobuf::int32 ListServiceConfigsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.ListServiceConfigsRequest.page_size)
  return page_size_;
}
void ListServiceConfigsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.ListServiceConfigsRequest.page_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListServiceConfigsResponse::kServiceConfigsFieldNumber;
const int ListServiceConfigsResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListServiceConfigsResponse::ListServiceConfigsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicemanagement.v1.ListServiceConfigsResponse)
}
ListServiceConfigsResponse::ListServiceConfigsResponse(const ListServiceConfigsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      service_configs_(from.service_configs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token_);
  }
  // @@protoc_insertion_point(copy_constructor:google.api.servicemanagement.v1.ListServiceConfigsResponse)
}

void ListServiceConfigsResponse::SharedCtor() {
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ListServiceConfigsResponse::~ListServiceConfigsResponse() {
  // @@protoc_insertion_point(destructor:google.api.servicemanagement.v1.ListServiceConfigsResponse)
  SharedDtor();
}

void ListServiceConfigsResponse::SharedDtor() {
  next_page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListServiceConfigsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListServiceConfigsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[9].descriptor;
}

const ListServiceConfigsResponse& ListServiceConfigsResponse::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  return *internal_default_instance();
}

ListServiceConfigsResponse* ListServiceConfigsResponse::New(::google::protobuf::Arena* arena) const {
  ListServiceConfigsResponse* n = new ListServiceConfigsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListServiceConfigsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicemanagement.v1.ListServiceConfigsResponse)
  service_configs_.Clear();
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ListServiceConfigsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.servicemanagement.v1.ListServiceConfigsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.api.Service service_configs = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_service_configs()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // string next_page_token = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), this->next_page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicemanagement.v1.ListServiceConfigsResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.servicemanagement.v1.ListServiceConfigsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.servicemanagement.v1.ListServiceConfigsResponse)
  return false;
#undef DO_
}

void ListServiceConfigsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.servicemanagement.v1.ListServiceConfigsResponse)
  // repeated .google.api.Service service_configs = 1;
  for (unsigned int i = 0, n = this->service_configs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->service_configs(i), output);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.ListServiceConfigsResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.servicemanagement.v1.ListServiceConfigsResponse)
}

::google::protobuf::uint8* ListServiceConfigsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicemanagement.v1.ListServiceConfigsResponse)
  // repeated .google.api.Service service_configs = 1;
  for (unsigned int i = 0, n = this->service_configs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->service_configs(i), false, target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.ListServiceConfigsResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicemanagement.v1.ListServiceConfigsResponse)
  return target;
}

size_t ListServiceConfigsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicemanagement.v1.ListServiceConfigsResponse)
  size_t total_size = 0;

  // repeated .google.api.Service service_configs = 1;
  {
    unsigned int count = this->service_configs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->service_configs(i));
    }
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListServiceConfigsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicemanagement.v1.ListServiceConfigsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListServiceConfigsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListServiceConfigsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicemanagement.v1.ListServiceConfigsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicemanagement.v1.ListServiceConfigsResponse)
    MergeFrom(*source);
  }
}

void ListServiceConfigsResponse::MergeFrom(const ListServiceConfigsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicemanagement.v1.ListServiceConfigsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_configs_.MergeFrom(from.service_configs_);
  if (from.next_page_token().size() > 0) {

    next_page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token_);
  }
}

void ListServiceConfigsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicemanagement.v1.ListServiceConfigsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListServiceConfigsResponse::CopyFrom(const ListServiceConfigsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicemanagement.v1.ListServiceConfigsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListServiceConfigsResponse::IsInitialized() const {
  return true;
}

void ListServiceConfigsResponse::Swap(ListServiceConfigsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListServiceConfigsResponse::InternalSwap(ListServiceConfigsResponse* other) {
  service_configs_.UnsafeArenaSwap(&other->service_configs_);
  next_page_token_.Swap(&other->next_page_token_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListServiceConfigsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListServiceConfigsResponse

// repeated .google.api.Service service_configs = 1;
int ListServiceConfigsResponse::service_configs_size() const {
  return service_configs_.size();
}
void ListServiceConfigsResponse::clear_service_configs() {
  service_configs_.Clear();
}
const ::google::api::Service& ListServiceConfigsResponse::service_configs(int index) const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.ListServiceConfigsResponse.service_configs)
  return service_configs_.Get(index);
}
::google::api::Service* ListServiceConfigsResponse::mutable_service_configs(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.ListServiceConfigsResponse.service_configs)
  return service_configs_.Mutable(index);
}
::google::api::Service* ListServiceConfigsResponse::add_service_configs() {
  // @@protoc_insertion_point(field_add:google.api.servicemanagement.v1.ListServiceConfigsResponse.service_configs)
  return service_configs_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::api::Service >*
ListServiceConfigsResponse::mutable_service_configs() {
  // @@protoc_insertion_point(field_mutable_list:google.api.servicemanagement.v1.ListServiceConfigsResponse.service_configs)
  return &service_configs_;
}
const ::google::protobuf::RepeatedPtrField< ::google::api::Service >&
ListServiceConfigsResponse::service_configs() const {
  // @@protoc_insertion_point(field_list:google.api.servicemanagement.v1.ListServiceConfigsResponse.service_configs)
  return service_configs_;
}

// string next_page_token = 2;
void ListServiceConfigsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListServiceConfigsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.ListServiceConfigsResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
void ListServiceConfigsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.ListServiceConfigsResponse.next_page_token)
}
void ListServiceConfigsResponse::set_next_page_token(const char* value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicemanagement.v1.ListServiceConfigsResponse.next_page_token)
}
void ListServiceConfigsResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicemanagement.v1.ListServiceConfigsResponse.next_page_token)
}
::std::string* ListServiceConfigsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.ListServiceConfigsResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListServiceConfigsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.ListServiceConfigsResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListServiceConfigsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.ListServiceConfigsResponse.next_page_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateServiceConfigRequest::kServiceNameFieldNumber;
const int CreateServiceConfigRequest::kServiceConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateServiceConfigRequest::CreateServiceConfigRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicemanagement.v1.CreateServiceConfigRequest)
}
CreateServiceConfigRequest::CreateServiceConfigRequest(const CreateServiceConfigRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service_name().size() > 0) {
    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  if (from.has_service_config()) {
    service_config_ = new ::google::api::Service(*from.service_config_);
  } else {
    service_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.api.servicemanagement.v1.CreateServiceConfigRequest)
}

void CreateServiceConfigRequest::SharedCtor() {
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_config_ = NULL;
  _cached_size_ = 0;
}

CreateServiceConfigRequest::~CreateServiceConfigRequest() {
  // @@protoc_insertion_point(destructor:google.api.servicemanagement.v1.CreateServiceConfigRequest)
  SharedDtor();
}

void CreateServiceConfigRequest::SharedDtor() {
  service_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete service_config_;
  }
}

void CreateServiceConfigRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateServiceConfigRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[10].descriptor;
}

const CreateServiceConfigRequest& CreateServiceConfigRequest::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  return *internal_default_instance();
}

CreateServiceConfigRequest* CreateServiceConfigRequest::New(::google::protobuf::Arena* arena) const {
  CreateServiceConfigRequest* n = new CreateServiceConfigRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateServiceConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicemanagement.v1.CreateServiceConfigRequest)
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && service_config_ != NULL) {
    delete service_config_;
  }
  service_config_ = NULL;
}

bool CreateServiceConfigRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.servicemanagement.v1.CreateServiceConfigRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string service_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicemanagement.v1.CreateServiceConfigRequest.service_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.api.Service service_config = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_service_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.servicemanagement.v1.CreateServiceConfigRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.servicemanagement.v1.CreateServiceConfigRequest)
  return false;
#undef DO_
}

void CreateServiceConfigRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.servicemanagement.v1.CreateServiceConfigRequest)
  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.CreateServiceConfigRequest.service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->service_name(), output);
  }

  // .google.api.Service service_config = 2;
  if (this->has_service_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->service_config_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.servicemanagement.v1.CreateServiceConfigRequest)
}

::google::protobuf::uint8* CreateServiceConfigRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicemanagement.v1.CreateServiceConfigRequest)
  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.CreateServiceConfigRequest.service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_name(), target);
  }

  // .google.api.Service service_config = 2;
  if (this->has_service_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->service_config_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicemanagement.v1.CreateServiceConfigRequest)
  return target;
}

size_t CreateServiceConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicemanagement.v1.CreateServiceConfigRequest)
  size_t total_size = 0;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_name());
  }

  // .google.api.Service service_config = 2;
  if (this->has_service_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->service_config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateServiceConfigRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicemanagement.v1.CreateServiceConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateServiceConfigRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateServiceConfigRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicemanagement.v1.CreateServiceConfigRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicemanagement.v1.CreateServiceConfigRequest)
    MergeFrom(*source);
  }
}

void CreateServiceConfigRequest::MergeFrom(const CreateServiceConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicemanagement.v1.CreateServiceConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.service_name().size() > 0) {

    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  if (from.has_service_config()) {
    mutable_service_config()->::google::api::Service::MergeFrom(from.service_config());
  }
}

void CreateServiceConfigRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicemanagement.v1.CreateServiceConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateServiceConfigRequest::CopyFrom(const CreateServiceConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicemanagement.v1.CreateServiceConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateServiceConfigRequest::IsInitialized() const {
  return true;
}

void CreateServiceConfigRequest::Swap(CreateServiceConfigRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateServiceConfigRequest::InternalSwap(CreateServiceConfigRequest* other) {
  service_name_.Swap(&other->service_name_);
  std::swap(service_config_, other->service_config_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateServiceConfigRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateServiceConfigRequest

// string service_name = 1;
void CreateServiceConfigRequest::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateServiceConfigRequest::service_name() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.CreateServiceConfigRequest.service_name)
  return service_name_.GetNoArena();
}
void CreateServiceConfigRequest::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.CreateServiceConfigRequest.service_name)
}
void CreateServiceConfigRequest::set_service_name(const char* value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicemanagement.v1.CreateServiceConfigRequest.service_name)
}
void CreateServiceConfigRequest::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicemanagement.v1.CreateServiceConfigRequest.service_name)
}
::std::string* CreateServiceConfigRequest::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.CreateServiceConfigRequest.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateServiceConfigRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.CreateServiceConfigRequest.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateServiceConfigRequest::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.CreateServiceConfigRequest.service_name)
}

// .google.api.Service service_config = 2;
bool CreateServiceConfigRequest::has_service_config() const {
  return this != internal_default_instance() && service_config_ != NULL;
}
void CreateServiceConfigRequest::clear_service_config() {
  if (GetArenaNoVirtual() == NULL && service_config_ != NULL) delete service_config_;
  service_config_ = NULL;
}
const ::google::api::Service& CreateServiceConfigRequest::service_config() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.CreateServiceConfigRequest.service_config)
  return service_config_ != NULL ? *service_config_
                         : *::google::api::Service::internal_default_instance();
}
::google::api::Service* CreateServiceConfigRequest::mutable_service_config() {
  
  if (service_config_ == NULL) {
    service_config_ = new ::google::api::Service;
  }
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.CreateServiceConfigRequest.service_config)
  return service_config_;
}
::google::api::Service* CreateServiceConfigRequest::release_service_config() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.CreateServiceConfigRequest.service_config)
  
  ::google::api::Service* temp = service_config_;
  service_config_ = NULL;
  return temp;
}
void CreateServiceConfigRequest::set_allocated_service_config(::google::api::Service* service_config) {
  delete service_config_;
  service_config_ = service_config;
  if (service_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.CreateServiceConfigRequest.service_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubmitConfigSourceRequest::kServiceNameFieldNumber;
const int SubmitConfigSourceRequest::kConfigSourceFieldNumber;
const int SubmitConfigSourceRequest::kValidateOnlyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubmitConfigSourceRequest::SubmitConfigSourceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicemanagement.v1.SubmitConfigSourceRequest)
}
SubmitConfigSourceRequest::SubmitConfigSourceRequest(const SubmitConfigSourceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service_name().size() > 0) {
    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  if (from.has_config_source()) {
    config_source_ = new ::google::api::servicemanagement::v1::ConfigSource(*from.config_source_);
  } else {
    config_source_ = NULL;
  }
  validate_only_ = from.validate_only_;
  // @@protoc_insertion_point(copy_constructor:google.api.servicemanagement.v1.SubmitConfigSourceRequest)
}

void SubmitConfigSourceRequest::SharedCtor() {
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&config_source_, 0, reinterpret_cast<char*>(&validate_only_) -
    reinterpret_cast<char*>(&config_source_) + sizeof(validate_only_));
  _cached_size_ = 0;
}

SubmitConfigSourceRequest::~SubmitConfigSourceRequest() {
  // @@protoc_insertion_point(destructor:google.api.servicemanagement.v1.SubmitConfigSourceRequest)
  SharedDtor();
}

void SubmitConfigSourceRequest::SharedDtor() {
  service_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete config_source_;
  }
}

void SubmitConfigSourceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubmitConfigSourceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[11].descriptor;
}

const SubmitConfigSourceRequest& SubmitConfigSourceRequest::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  return *internal_default_instance();
}

SubmitConfigSourceRequest* SubmitConfigSourceRequest::New(::google::protobuf::Arena* arena) const {
  SubmitConfigSourceRequest* n = new SubmitConfigSourceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubmitConfigSourceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicemanagement.v1.SubmitConfigSourceRequest)
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && config_source_ != NULL) {
    delete config_source_;
  }
  config_source_ = NULL;
  validate_only_ = false;
}

bool SubmitConfigSourceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.servicemanagement.v1.SubmitConfigSourceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string service_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicemanagement.v1.SubmitConfigSourceRequest.service_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.api.servicemanagement.v1.ConfigSource config_source = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool validate_only = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &validate_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.servicemanagement.v1.SubmitConfigSourceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.servicemanagement.v1.SubmitConfigSourceRequest)
  return false;
#undef DO_
}

void SubmitConfigSourceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.servicemanagement.v1.SubmitConfigSourceRequest)
  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.SubmitConfigSourceRequest.service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->service_name(), output);
  }

  // .google.api.servicemanagement.v1.ConfigSource config_source = 2;
  if (this->has_config_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->config_source_, output);
  }

  // bool validate_only = 3;
  if (this->validate_only() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->validate_only(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.servicemanagement.v1.SubmitConfigSourceRequest)
}

::google::protobuf::uint8* SubmitConfigSourceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicemanagement.v1.SubmitConfigSourceRequest)
  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.SubmitConfigSourceRequest.service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_name(), target);
  }

  // .google.api.servicemanagement.v1.ConfigSource config_source = 2;
  if (this->has_config_source()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->config_source_, false, target);
  }

  // bool validate_only = 3;
  if (this->validate_only() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->validate_only(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicemanagement.v1.SubmitConfigSourceRequest)
  return target;
}

size_t SubmitConfigSourceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicemanagement.v1.SubmitConfigSourceRequest)
  size_t total_size = 0;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_name());
  }

  // .google.api.servicemanagement.v1.ConfigSource config_source = 2;
  if (this->has_config_source()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_source_);
  }

  // bool validate_only = 3;
  if (this->validate_only() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubmitConfigSourceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicemanagement.v1.SubmitConfigSourceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmitConfigSourceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubmitConfigSourceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicemanagement.v1.SubmitConfigSourceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicemanagement.v1.SubmitConfigSourceRequest)
    MergeFrom(*source);
  }
}

void SubmitConfigSourceRequest::MergeFrom(const SubmitConfigSourceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicemanagement.v1.SubmitConfigSourceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.service_name().size() > 0) {

    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  if (from.has_config_source()) {
    mutable_config_source()->::google::api::servicemanagement::v1::ConfigSource::MergeFrom(from.config_source());
  }
  if (from.validate_only() != 0) {
    set_validate_only(from.validate_only());
  }
}

void SubmitConfigSourceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicemanagement.v1.SubmitConfigSourceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitConfigSourceRequest::CopyFrom(const SubmitConfigSourceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicemanagement.v1.SubmitConfigSourceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitConfigSourceRequest::IsInitialized() const {
  return true;
}

void SubmitConfigSourceRequest::Swap(SubmitConfigSourceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubmitConfigSourceRequest::InternalSwap(SubmitConfigSourceRequest* other) {
  service_name_.Swap(&other->service_name_);
  std::swap(config_source_, other->config_source_);
  std::swap(validate_only_, other->validate_only_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubmitConfigSourceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubmitConfigSourceRequest

// string service_name = 1;
void SubmitConfigSourceRequest::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SubmitConfigSourceRequest::service_name() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.SubmitConfigSourceRequest.service_name)
  return service_name_.GetNoArena();
}
void SubmitConfigSourceRequest::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.SubmitConfigSourceRequest.service_name)
}
void SubmitConfigSourceRequest::set_service_name(const char* value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicemanagement.v1.SubmitConfigSourceRequest.service_name)
}
void SubmitConfigSourceRequest::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicemanagement.v1.SubmitConfigSourceRequest.service_name)
}
::std::string* SubmitConfigSourceRequest::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.SubmitConfigSourceRequest.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SubmitConfigSourceRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.SubmitConfigSourceRequest.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubmitConfigSourceRequest::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.SubmitConfigSourceRequest.service_name)
}

// .google.api.servicemanagement.v1.ConfigSource config_source = 2;
bool SubmitConfigSourceRequest::has_config_source() const {
  return this != internal_default_instance() && config_source_ != NULL;
}
void SubmitConfigSourceRequest::clear_config_source() {
  if (GetArenaNoVirtual() == NULL && config_source_ != NULL) delete config_source_;
  config_source_ = NULL;
}
const ::google::api::servicemanagement::v1::ConfigSource& SubmitConfigSourceRequest::config_source() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.SubmitConfigSourceRequest.config_source)
  return config_source_ != NULL ? *config_source_
                         : *::google::api::servicemanagement::v1::ConfigSource::internal_default_instance();
}
::google::api::servicemanagement::v1::ConfigSource* SubmitConfigSourceRequest::mutable_config_source() {
  
  if (config_source_ == NULL) {
    config_source_ = new ::google::api::servicemanagement::v1::ConfigSource;
  }
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.SubmitConfigSourceRequest.config_source)
  return config_source_;
}
::google::api::servicemanagement::v1::ConfigSource* SubmitConfigSourceRequest::release_config_source() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.SubmitConfigSourceRequest.config_source)
  
  ::google::api::servicemanagement::v1::ConfigSource* temp = config_source_;
  config_source_ = NULL;
  return temp;
}
void SubmitConfigSourceRequest::set_allocated_config_source(::google::api::servicemanagement::v1::ConfigSource* config_source) {
  delete config_source_;
  config_source_ = config_source;
  if (config_source) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.SubmitConfigSourceRequest.config_source)
}

// bool validate_only = 3;
void SubmitConfigSourceRequest::clear_validate_only() {
  validate_only_ = false;
}
bool SubmitConfigSourceRequest::validate_only() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.SubmitConfigSourceRequest.validate_only)
  return validate_only_;
}
void SubmitConfigSourceRequest::set_validate_only(bool value) {
  
  validate_only_ = value;
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.SubmitConfigSourceRequest.validate_only)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubmitConfigSourceResponse::kServiceConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubmitConfigSourceResponse::SubmitConfigSourceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicemanagement.v1.SubmitConfigSourceResponse)
}
SubmitConfigSourceResponse::SubmitConfigSourceResponse(const SubmitConfigSourceResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_service_config()) {
    service_config_ = new ::google::api::Service(*from.service_config_);
  } else {
    service_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.api.servicemanagement.v1.SubmitConfigSourceResponse)
}

void SubmitConfigSourceResponse::SharedCtor() {
  service_config_ = NULL;
  _cached_size_ = 0;
}

SubmitConfigSourceResponse::~SubmitConfigSourceResponse() {
  // @@protoc_insertion_point(destructor:google.api.servicemanagement.v1.SubmitConfigSourceResponse)
  SharedDtor();
}

void SubmitConfigSourceResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete service_config_;
  }
}

void SubmitConfigSourceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubmitConfigSourceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[12].descriptor;
}

const SubmitConfigSourceResponse& SubmitConfigSourceResponse::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  return *internal_default_instance();
}

SubmitConfigSourceResponse* SubmitConfigSourceResponse::New(::google::protobuf::Arena* arena) const {
  SubmitConfigSourceResponse* n = new SubmitConfigSourceResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubmitConfigSourceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicemanagement.v1.SubmitConfigSourceResponse)
  if (GetArenaNoVirtual() == NULL && service_config_ != NULL) {
    delete service_config_;
  }
  service_config_ = NULL;
}

bool SubmitConfigSourceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.servicemanagement.v1.SubmitConfigSourceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.api.Service service_config = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_service_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.servicemanagement.v1.SubmitConfigSourceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.servicemanagement.v1.SubmitConfigSourceResponse)
  return false;
#undef DO_
}

void SubmitConfigSourceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.servicemanagement.v1.SubmitConfigSourceResponse)
  // .google.api.Service service_config = 1;
  if (this->has_service_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->service_config_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.servicemanagement.v1.SubmitConfigSourceResponse)
}

::google::protobuf::uint8* SubmitConfigSourceResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicemanagement.v1.SubmitConfigSourceResponse)
  // .google.api.Service service_config = 1;
  if (this->has_service_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->service_config_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicemanagement.v1.SubmitConfigSourceResponse)
  return target;
}

size_t SubmitConfigSourceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicemanagement.v1.SubmitConfigSourceResponse)
  size_t total_size = 0;

  // .google.api.Service service_config = 1;
  if (this->has_service_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->service_config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubmitConfigSourceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicemanagement.v1.SubmitConfigSourceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmitConfigSourceResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubmitConfigSourceResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicemanagement.v1.SubmitConfigSourceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicemanagement.v1.SubmitConfigSourceResponse)
    MergeFrom(*source);
  }
}

void SubmitConfigSourceResponse::MergeFrom(const SubmitConfigSourceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicemanagement.v1.SubmitConfigSourceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_service_config()) {
    mutable_service_config()->::google::api::Service::MergeFrom(from.service_config());
  }
}

void SubmitConfigSourceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicemanagement.v1.SubmitConfigSourceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitConfigSourceResponse::CopyFrom(const SubmitConfigSourceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicemanagement.v1.SubmitConfigSourceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitConfigSourceResponse::IsInitialized() const {
  return true;
}

void SubmitConfigSourceResponse::Swap(SubmitConfigSourceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubmitConfigSourceResponse::InternalSwap(SubmitConfigSourceResponse* other) {
  std::swap(service_config_, other->service_config_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubmitConfigSourceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubmitConfigSourceResponse

// .google.api.Service service_config = 1;
bool SubmitConfigSourceResponse::has_service_config() const {
  return this != internal_default_instance() && service_config_ != NULL;
}
void SubmitConfigSourceResponse::clear_service_config() {
  if (GetArenaNoVirtual() == NULL && service_config_ != NULL) delete service_config_;
  service_config_ = NULL;
}
const ::google::api::Service& SubmitConfigSourceResponse::service_config() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.SubmitConfigSourceResponse.service_config)
  return service_config_ != NULL ? *service_config_
                         : *::google::api::Service::internal_default_instance();
}
::google::api::Service* SubmitConfigSourceResponse::mutable_service_config() {
  
  if (service_config_ == NULL) {
    service_config_ = new ::google::api::Service;
  }
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.SubmitConfigSourceResponse.service_config)
  return service_config_;
}
::google::api::Service* SubmitConfigSourceResponse::release_service_config() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.SubmitConfigSourceResponse.service_config)
  
  ::google::api::Service* temp = service_config_;
  service_config_ = NULL;
  return temp;
}
void SubmitConfigSourceResponse::set_allocated_service_config(::google::api::Service* service_config) {
  delete service_config_;
  service_config_ = service_config;
  if (service_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.SubmitConfigSourceResponse.service_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateServiceRolloutRequest::kServiceNameFieldNumber;
const int CreateServiceRolloutRequest::kRolloutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateServiceRolloutRequest::CreateServiceRolloutRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicemanagement.v1.CreateServiceRolloutRequest)
}
CreateServiceRolloutRequest::CreateServiceRolloutRequest(const CreateServiceRolloutRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service_name().size() > 0) {
    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  if (from.has_rollout()) {
    rollout_ = new ::google::api::servicemanagement::v1::Rollout(*from.rollout_);
  } else {
    rollout_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.api.servicemanagement.v1.CreateServiceRolloutRequest)
}

void CreateServiceRolloutRequest::SharedCtor() {
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rollout_ = NULL;
  _cached_size_ = 0;
}

CreateServiceRolloutRequest::~CreateServiceRolloutRequest() {
  // @@protoc_insertion_point(destructor:google.api.servicemanagement.v1.CreateServiceRolloutRequest)
  SharedDtor();
}

void CreateServiceRolloutRequest::SharedDtor() {
  service_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete rollout_;
  }
}

void CreateServiceRolloutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateServiceRolloutRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[13].descriptor;
}

const CreateServiceRolloutRequest& CreateServiceRolloutRequest::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  return *internal_default_instance();
}

CreateServiceRolloutRequest* CreateServiceRolloutRequest::New(::google::protobuf::Arena* arena) const {
  CreateServiceRolloutRequest* n = new CreateServiceRolloutRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateServiceRolloutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicemanagement.v1.CreateServiceRolloutRequest)
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && rollout_ != NULL) {
    delete rollout_;
  }
  rollout_ = NULL;
}

bool CreateServiceRolloutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.servicemanagement.v1.CreateServiceRolloutRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string service_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicemanagement.v1.CreateServiceRolloutRequest.service_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.api.servicemanagement.v1.Rollout rollout = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rollout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.servicemanagement.v1.CreateServiceRolloutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.servicemanagement.v1.CreateServiceRolloutRequest)
  return false;
#undef DO_
}

void CreateServiceRolloutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.servicemanagement.v1.CreateServiceRolloutRequest)
  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.CreateServiceRolloutRequest.service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->service_name(), output);
  }

  // .google.api.servicemanagement.v1.Rollout rollout = 2;
  if (this->has_rollout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->rollout_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.servicemanagement.v1.CreateServiceRolloutRequest)
}

::google::protobuf::uint8* CreateServiceRolloutRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicemanagement.v1.CreateServiceRolloutRequest)
  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.CreateServiceRolloutRequest.service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_name(), target);
  }

  // .google.api.servicemanagement.v1.Rollout rollout = 2;
  if (this->has_rollout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->rollout_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicemanagement.v1.CreateServiceRolloutRequest)
  return target;
}

size_t CreateServiceRolloutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicemanagement.v1.CreateServiceRolloutRequest)
  size_t total_size = 0;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_name());
  }

  // .google.api.servicemanagement.v1.Rollout rollout = 2;
  if (this->has_rollout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rollout_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateServiceRolloutRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicemanagement.v1.CreateServiceRolloutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateServiceRolloutRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateServiceRolloutRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicemanagement.v1.CreateServiceRolloutRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicemanagement.v1.CreateServiceRolloutRequest)
    MergeFrom(*source);
  }
}

void CreateServiceRolloutRequest::MergeFrom(const CreateServiceRolloutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicemanagement.v1.CreateServiceRolloutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.service_name().size() > 0) {

    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  if (from.has_rollout()) {
    mutable_rollout()->::google::api::servicemanagement::v1::Rollout::MergeFrom(from.rollout());
  }
}

void CreateServiceRolloutRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicemanagement.v1.CreateServiceRolloutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateServiceRolloutRequest::CopyFrom(const CreateServiceRolloutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicemanagement.v1.CreateServiceRolloutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateServiceRolloutRequest::IsInitialized() const {
  return true;
}

void CreateServiceRolloutRequest::Swap(CreateServiceRolloutRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateServiceRolloutRequest::InternalSwap(CreateServiceRolloutRequest* other) {
  service_name_.Swap(&other->service_name_);
  std::swap(rollout_, other->rollout_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateServiceRolloutRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateServiceRolloutRequest

// string service_name = 1;
void CreateServiceRolloutRequest::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateServiceRolloutRequest::service_name() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.CreateServiceRolloutRequest.service_name)
  return service_name_.GetNoArena();
}
void CreateServiceRolloutRequest::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.CreateServiceRolloutRequest.service_name)
}
void CreateServiceRolloutRequest::set_service_name(const char* value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicemanagement.v1.CreateServiceRolloutRequest.service_name)
}
void CreateServiceRolloutRequest::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicemanagement.v1.CreateServiceRolloutRequest.service_name)
}
::std::string* CreateServiceRolloutRequest::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.CreateServiceRolloutRequest.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateServiceRolloutRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.CreateServiceRolloutRequest.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateServiceRolloutRequest::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.CreateServiceRolloutRequest.service_name)
}

// .google.api.servicemanagement.v1.Rollout rollout = 2;
bool CreateServiceRolloutRequest::has_rollout() const {
  return this != internal_default_instance() && rollout_ != NULL;
}
void CreateServiceRolloutRequest::clear_rollout() {
  if (GetArenaNoVirtual() == NULL && rollout_ != NULL) delete rollout_;
  rollout_ = NULL;
}
const ::google::api::servicemanagement::v1::Rollout& CreateServiceRolloutRequest::rollout() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.CreateServiceRolloutRequest.rollout)
  return rollout_ != NULL ? *rollout_
                         : *::google::api::servicemanagement::v1::Rollout::internal_default_instance();
}
::google::api::servicemanagement::v1::Rollout* CreateServiceRolloutRequest::mutable_rollout() {
  
  if (rollout_ == NULL) {
    rollout_ = new ::google::api::servicemanagement::v1::Rollout;
  }
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.CreateServiceRolloutRequest.rollout)
  return rollout_;
}
::google::api::servicemanagement::v1::Rollout* CreateServiceRolloutRequest::release_rollout() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.CreateServiceRolloutRequest.rollout)
  
  ::google::api::servicemanagement::v1::Rollout* temp = rollout_;
  rollout_ = NULL;
  return temp;
}
void CreateServiceRolloutRequest::set_allocated_rollout(::google::api::servicemanagement::v1::Rollout* rollout) {
  delete rollout_;
  rollout_ = rollout;
  if (rollout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.CreateServiceRolloutRequest.rollout)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListServiceRolloutsRequest::kServiceNameFieldNumber;
const int ListServiceRolloutsRequest::kPageTokenFieldNumber;
const int ListServiceRolloutsRequest::kPageSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListServiceRolloutsRequest::ListServiceRolloutsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicemanagement.v1.ListServiceRolloutsRequest)
}
ListServiceRolloutsRequest::ListServiceRolloutsRequest(const ListServiceRolloutsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service_name().size() > 0) {
    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token_);
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:google.api.servicemanagement.v1.ListServiceRolloutsRequest)
}

void ListServiceRolloutsRequest::SharedCtor() {
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
  _cached_size_ = 0;
}

ListServiceRolloutsRequest::~ListServiceRolloutsRequest() {
  // @@protoc_insertion_point(destructor:google.api.servicemanagement.v1.ListServiceRolloutsRequest)
  SharedDtor();
}

void ListServiceRolloutsRequest::SharedDtor() {
  service_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListServiceRolloutsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListServiceRolloutsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[14].descriptor;
}

const ListServiceRolloutsRequest& ListServiceRolloutsRequest::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  return *internal_default_instance();
}

ListServiceRolloutsRequest* ListServiceRolloutsRequest::New(::google::protobuf::Arena* arena) const {
  ListServiceRolloutsRequest* n = new ListServiceRolloutsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListServiceRolloutsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicemanagement.v1.ListServiceRolloutsRequest)
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
}

bool ListServiceRolloutsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.servicemanagement.v1.ListServiceRolloutsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string service_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicemanagement.v1.ListServiceRolloutsRequest.service_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), this->page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicemanagement.v1.ListServiceRolloutsRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.servicemanagement.v1.ListServiceRolloutsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.servicemanagement.v1.ListServiceRolloutsRequest)
  return false;
#undef DO_
}

void ListServiceRolloutsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.servicemanagement.v1.ListServiceRolloutsRequest)
  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.ListServiceRolloutsRequest.service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->service_name(), output);
  }

  // string page_token = 2;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.ListServiceRolloutsRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->page_token(), output);
  }

  // int32 page_size = 3;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->page_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.servicemanagement.v1.ListServiceRolloutsRequest)
}

::google::protobuf::uint8* ListServiceRolloutsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicemanagement.v1.ListServiceRolloutsRequest)
  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.ListServiceRolloutsRequest.service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_name(), target);
  }

  // string page_token = 2;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.ListServiceRolloutsRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->page_token(), target);
  }

  // int32 page_size = 3;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->page_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicemanagement.v1.ListServiceRolloutsRequest)
  return target;
}

size_t ListServiceRolloutsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicemanagement.v1.ListServiceRolloutsRequest)
  size_t total_size = 0;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_name());
  }

  // string page_token = 2;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // int32 page_size = 3;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListServiceRolloutsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicemanagement.v1.ListServiceRolloutsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListServiceRolloutsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListServiceRolloutsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicemanagement.v1.ListServiceRolloutsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicemanagement.v1.ListServiceRolloutsRequest)
    MergeFrom(*source);
  }
}

void ListServiceRolloutsRequest::MergeFrom(const ListServiceRolloutsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicemanagement.v1.ListServiceRolloutsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.service_name().size() > 0) {

    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  if (from.page_token().size() > 0) {

    page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token_);
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void ListServiceRolloutsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicemanagement.v1.ListServiceRolloutsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListServiceRolloutsRequest::CopyFrom(const ListServiceRolloutsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicemanagement.v1.ListServiceRolloutsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListServiceRolloutsRequest::IsInitialized() const {
  return true;
}

void ListServiceRolloutsRequest::Swap(ListServiceRolloutsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListServiceRolloutsRequest::InternalSwap(ListServiceRolloutsRequest* other) {
  service_name_.Swap(&other->service_name_);
  page_token_.Swap(&other->page_token_);
  std::swap(page_size_, other->page_size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListServiceRolloutsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[14];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListServiceRolloutsRequest

// string service_name = 1;
void ListServiceRolloutsRequest::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListServiceRolloutsRequest::service_name() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.ListServiceRolloutsRequest.service_name)
  return service_name_.GetNoArena();
}
void ListServiceRolloutsRequest::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.ListServiceRolloutsRequest.service_name)
}
void ListServiceRolloutsRequest::set_service_name(const char* value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicemanagement.v1.ListServiceRolloutsRequest.service_name)
}
void ListServiceRolloutsRequest::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicemanagement.v1.ListServiceRolloutsRequest.service_name)
}
::std::string* ListServiceRolloutsRequest::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.ListServiceRolloutsRequest.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListServiceRolloutsRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.ListServiceRolloutsRequest.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListServiceRolloutsRequest::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.ListServiceRolloutsRequest.service_name)
}

// string page_token = 2;
void ListServiceRolloutsRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListServiceRolloutsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.ListServiceRolloutsRequest.page_token)
  return page_token_.GetNoArena();
}
void ListServiceRolloutsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.ListServiceRolloutsRequest.page_token)
}
void ListServiceRolloutsRequest::set_page_token(const char* value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicemanagement.v1.ListServiceRolloutsRequest.page_token)
}
void ListServiceRolloutsRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicemanagement.v1.ListServiceRolloutsRequest.page_token)
}
::std::string* ListServiceRolloutsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.ListServiceRolloutsRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListServiceRolloutsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.ListServiceRolloutsRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListServiceRolloutsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.ListServiceRolloutsRequest.page_token)
}

// int32 page_size = 3;
void ListServiceRolloutsRequest::clear_page_size() {
  page_size_ = 0;
}
::google::protobuf::int32 ListServiceRolloutsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.ListServiceRolloutsRequest.page_size)
  return page_size_;
}
void ListServiceRolloutsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.ListServiceRolloutsRequest.page_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListServiceRolloutsResponse::kRolloutsFieldNumber;
const int ListServiceRolloutsResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListServiceRolloutsResponse::ListServiceRolloutsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicemanagement.v1.ListServiceRolloutsResponse)
}
ListServiceRolloutsResponse::ListServiceRolloutsResponse(const ListServiceRolloutsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      rollouts_(from.rollouts_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token_);
  }
  // @@protoc_insertion_point(copy_constructor:google.api.servicemanagement.v1.ListServiceRolloutsResponse)
}

void ListServiceRolloutsResponse::SharedCtor() {
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ListServiceRolloutsResponse::~ListServiceRolloutsResponse() {
  // @@protoc_insertion_point(destructor:google.api.servicemanagement.v1.ListServiceRolloutsResponse)
  SharedDtor();
}

void ListServiceRolloutsResponse::SharedDtor() {
  next_page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListServiceRolloutsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListServiceRolloutsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[15].descriptor;
}

const ListServiceRolloutsResponse& ListServiceRolloutsResponse::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  return *internal_default_instance();
}

ListServiceRolloutsResponse* ListServiceRolloutsResponse::New(::google::protobuf::Arena* arena) const {
  ListServiceRolloutsResponse* n = new ListServiceRolloutsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListServiceRolloutsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicemanagement.v1.ListServiceRolloutsResponse)
  rollouts_.Clear();
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ListServiceRolloutsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.servicemanagement.v1.ListServiceRolloutsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.api.servicemanagement.v1.Rollout rollouts = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_rollouts()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // string next_page_token = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), this->next_page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicemanagement.v1.ListServiceRolloutsResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.servicemanagement.v1.ListServiceRolloutsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.servicemanagement.v1.ListServiceRolloutsResponse)
  return false;
#undef DO_
}

void ListServiceRolloutsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.servicemanagement.v1.ListServiceRolloutsResponse)
  // repeated .google.api.servicemanagement.v1.Rollout rollouts = 1;
  for (unsigned int i = 0, n = this->rollouts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rollouts(i), output);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.ListServiceRolloutsResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.servicemanagement.v1.ListServiceRolloutsResponse)
}

::google::protobuf::uint8* ListServiceRolloutsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicemanagement.v1.ListServiceRolloutsResponse)
  // repeated .google.api.servicemanagement.v1.Rollout rollouts = 1;
  for (unsigned int i = 0, n = this->rollouts_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->rollouts(i), false, target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.ListServiceRolloutsResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicemanagement.v1.ListServiceRolloutsResponse)
  return target;
}

size_t ListServiceRolloutsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicemanagement.v1.ListServiceRolloutsResponse)
  size_t total_size = 0;

  // repeated .google.api.servicemanagement.v1.Rollout rollouts = 1;
  {
    unsigned int count = this->rollouts_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rollouts(i));
    }
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListServiceRolloutsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicemanagement.v1.ListServiceRolloutsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListServiceRolloutsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListServiceRolloutsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicemanagement.v1.ListServiceRolloutsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicemanagement.v1.ListServiceRolloutsResponse)
    MergeFrom(*source);
  }
}

void ListServiceRolloutsResponse::MergeFrom(const ListServiceRolloutsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicemanagement.v1.ListServiceRolloutsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rollouts_.MergeFrom(from.rollouts_);
  if (from.next_page_token().size() > 0) {

    next_page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token_);
  }
}

void ListServiceRolloutsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicemanagement.v1.ListServiceRolloutsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListServiceRolloutsResponse::CopyFrom(const ListServiceRolloutsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicemanagement.v1.ListServiceRolloutsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListServiceRolloutsResponse::IsInitialized() const {
  return true;
}

void ListServiceRolloutsResponse::Swap(ListServiceRolloutsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListServiceRolloutsResponse::InternalSwap(ListServiceRolloutsResponse* other) {
  rollouts_.UnsafeArenaSwap(&other->rollouts_);
  next_page_token_.Swap(&other->next_page_token_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListServiceRolloutsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[15];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListServiceRolloutsResponse

// repeated .google.api.servicemanagement.v1.Rollout rollouts = 1;
int ListServiceRolloutsResponse::rollouts_size() const {
  return rollouts_.size();
}
void ListServiceRolloutsResponse::clear_rollouts() {
  rollouts_.Clear();
}
const ::google::api::servicemanagement::v1::Rollout& ListServiceRolloutsResponse::rollouts(int index) const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.ListServiceRolloutsResponse.rollouts)
  return rollouts_.Get(index);
}
::google::api::servicemanagement::v1::Rollout* ListServiceRolloutsResponse::mutable_rollouts(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.ListServiceRolloutsResponse.rollouts)
  return rollouts_.Mutable(index);
}
::google::api::servicemanagement::v1::Rollout* ListServiceRolloutsResponse::add_rollouts() {
  // @@protoc_insertion_point(field_add:google.api.servicemanagement.v1.ListServiceRolloutsResponse.rollouts)
  return rollouts_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::api::servicemanagement::v1::Rollout >*
ListServiceRolloutsResponse::mutable_rollouts() {
  // @@protoc_insertion_point(field_mutable_list:google.api.servicemanagement.v1.ListServiceRolloutsResponse.rollouts)
  return &rollouts_;
}
const ::google::protobuf::RepeatedPtrField< ::google::api::servicemanagement::v1::Rollout >&
ListServiceRolloutsResponse::rollouts() const {
  // @@protoc_insertion_point(field_list:google.api.servicemanagement.v1.ListServiceRolloutsResponse.rollouts)
  return rollouts_;
}

// string next_page_token = 2;
void ListServiceRolloutsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListServiceRolloutsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.ListServiceRolloutsResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
void ListServiceRolloutsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.ListServiceRolloutsResponse.next_page_token)
}
void ListServiceRolloutsResponse::set_next_page_token(const char* value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicemanagement.v1.ListServiceRolloutsResponse.next_page_token)
}
void ListServiceRolloutsResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicemanagement.v1.ListServiceRolloutsResponse.next_page_token)
}
::std::string* ListServiceRolloutsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.ListServiceRolloutsResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListServiceRolloutsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.ListServiceRolloutsResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListServiceRolloutsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.ListServiceRolloutsResponse.next_page_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetServiceRolloutRequest::kServiceNameFieldNumber;
const int GetServiceRolloutRequest::kRolloutIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetServiceRolloutRequest::GetServiceRolloutRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicemanagement.v1.GetServiceRolloutRequest)
}
GetServiceRolloutRequest::GetServiceRolloutRequest(const GetServiceRolloutRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service_name().size() > 0) {
    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  rollout_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rollout_id().size() > 0) {
    rollout_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rollout_id_);
  }
  // @@protoc_insertion_point(copy_constructor:google.api.servicemanagement.v1.GetServiceRolloutRequest)
}

void GetServiceRolloutRequest::SharedCtor() {
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rollout_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetServiceRolloutRequest::~GetServiceRolloutRequest() {
  // @@protoc_insertion_point(destructor:google.api.servicemanagement.v1.GetServiceRolloutRequest)
  SharedDtor();
}

void GetServiceRolloutRequest::SharedDtor() {
  service_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rollout_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetServiceRolloutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetServiceRolloutRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[16].descriptor;
}

const GetServiceRolloutRequest& GetServiceRolloutRequest::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  return *internal_default_instance();
}

GetServiceRolloutRequest* GetServiceRolloutRequest::New(::google::protobuf::Arena* arena) const {
  GetServiceRolloutRequest* n = new GetServiceRolloutRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetServiceRolloutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicemanagement.v1.GetServiceRolloutRequest)
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rollout_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetServiceRolloutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.servicemanagement.v1.GetServiceRolloutRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string service_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicemanagement.v1.GetServiceRolloutRequest.service_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string rollout_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rollout_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rollout_id().data(), this->rollout_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicemanagement.v1.GetServiceRolloutRequest.rollout_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.servicemanagement.v1.GetServiceRolloutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.servicemanagement.v1.GetServiceRolloutRequest)
  return false;
#undef DO_
}

void GetServiceRolloutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.servicemanagement.v1.GetServiceRolloutRequest)
  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.GetServiceRolloutRequest.service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->service_name(), output);
  }

  // string rollout_id = 2;
  if (this->rollout_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rollout_id().data(), this->rollout_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.GetServiceRolloutRequest.rollout_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rollout_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.servicemanagement.v1.GetServiceRolloutRequest)
}

::google::protobuf::uint8* GetServiceRolloutRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicemanagement.v1.GetServiceRolloutRequest)
  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.GetServiceRolloutRequest.service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_name(), target);
  }

  // string rollout_id = 2;
  if (this->rollout_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rollout_id().data(), this->rollout_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.GetServiceRolloutRequest.rollout_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rollout_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicemanagement.v1.GetServiceRolloutRequest)
  return target;
}

size_t GetServiceRolloutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicemanagement.v1.GetServiceRolloutRequest)
  size_t total_size = 0;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_name());
  }

  // string rollout_id = 2;
  if (this->rollout_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rollout_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServiceRolloutRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicemanagement.v1.GetServiceRolloutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServiceRolloutRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetServiceRolloutRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicemanagement.v1.GetServiceRolloutRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicemanagement.v1.GetServiceRolloutRequest)
    MergeFrom(*source);
  }
}

void GetServiceRolloutRequest::MergeFrom(const GetServiceRolloutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicemanagement.v1.GetServiceRolloutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.service_name().size() > 0) {

    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  if (from.rollout_id().size() > 0) {

    rollout_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rollout_id_);
  }
}

void GetServiceRolloutRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicemanagement.v1.GetServiceRolloutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceRolloutRequest::CopyFrom(const GetServiceRolloutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicemanagement.v1.GetServiceRolloutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceRolloutRequest::IsInitialized() const {
  return true;
}

void GetServiceRolloutRequest::Swap(GetServiceRolloutRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetServiceRolloutRequest::InternalSwap(GetServiceRolloutRequest* other) {
  service_name_.Swap(&other->service_name_);
  rollout_id_.Swap(&other->rollout_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetServiceRolloutRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[16];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetServiceRolloutRequest

// string service_name = 1;
void GetServiceRolloutRequest::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetServiceRolloutRequest::service_name() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.GetServiceRolloutRequest.service_name)
  return service_name_.GetNoArena();
}
void GetServiceRolloutRequest::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.GetServiceRolloutRequest.service_name)
}
void GetServiceRolloutRequest::set_service_name(const char* value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicemanagement.v1.GetServiceRolloutRequest.service_name)
}
void GetServiceRolloutRequest::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicemanagement.v1.GetServiceRolloutRequest.service_name)
}
::std::string* GetServiceRolloutRequest::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.GetServiceRolloutRequest.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetServiceRolloutRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.GetServiceRolloutRequest.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetServiceRolloutRequest::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.GetServiceRolloutRequest.service_name)
}

// string rollout_id = 2;
void GetServiceRolloutRequest::clear_rollout_id() {
  rollout_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetServiceRolloutRequest::rollout_id() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.GetServiceRolloutRequest.rollout_id)
  return rollout_id_.GetNoArena();
}
void GetServiceRolloutRequest::set_rollout_id(const ::std::string& value) {
  
  rollout_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.GetServiceRolloutRequest.rollout_id)
}
void GetServiceRolloutRequest::set_rollout_id(const char* value) {
  
  rollout_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicemanagement.v1.GetServiceRolloutRequest.rollout_id)
}
void GetServiceRolloutRequest::set_rollout_id(const char* value, size_t size) {
  
  rollout_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicemanagement.v1.GetServiceRolloutRequest.rollout_id)
}
::std::string* GetServiceRolloutRequest::mutable_rollout_id() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.GetServiceRolloutRequest.rollout_id)
  return rollout_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetServiceRolloutRequest::release_rollout_id() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.GetServiceRolloutRequest.rollout_id)
  
  return rollout_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetServiceRolloutRequest::set_allocated_rollout_id(::std::string* rollout_id) {
  if (rollout_id != NULL) {
    
  } else {
    
  }
  rollout_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rollout_id);
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.GetServiceRolloutRequest.rollout_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnableServiceRequest::kServiceNameFieldNumber;
const int EnableServiceRequest::kConsumerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnableServiceRequest::EnableServiceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicemanagement.v1.EnableServiceRequest)
}
EnableServiceRequest::EnableServiceRequest(const EnableServiceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service_name().size() > 0) {
    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  consumer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.consumer_id().size() > 0) {
    consumer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.consumer_id_);
  }
  // @@protoc_insertion_point(copy_constructor:google.api.servicemanagement.v1.EnableServiceRequest)
}

void EnableServiceRequest::SharedCtor() {
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  consumer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

EnableServiceRequest::~EnableServiceRequest() {
  // @@protoc_insertion_point(destructor:google.api.servicemanagement.v1.EnableServiceRequest)
  SharedDtor();
}

void EnableServiceRequest::SharedDtor() {
  service_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  consumer_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EnableServiceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnableServiceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[17].descriptor;
}

const EnableServiceRequest& EnableServiceRequest::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  return *internal_default_instance();
}

EnableServiceRequest* EnableServiceRequest::New(::google::protobuf::Arena* arena) const {
  EnableServiceRequest* n = new EnableServiceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnableServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicemanagement.v1.EnableServiceRequest)
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  consumer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool EnableServiceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.servicemanagement.v1.EnableServiceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string service_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicemanagement.v1.EnableServiceRequest.service_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string consumer_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_consumer_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->consumer_id().data(), this->consumer_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicemanagement.v1.EnableServiceRequest.consumer_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.servicemanagement.v1.EnableServiceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.servicemanagement.v1.EnableServiceRequest)
  return false;
#undef DO_
}

void EnableServiceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.servicemanagement.v1.EnableServiceRequest)
  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.EnableServiceRequest.service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->service_name(), output);
  }

  // string consumer_id = 2;
  if (this->consumer_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->consumer_id().data(), this->consumer_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.EnableServiceRequest.consumer_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->consumer_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.servicemanagement.v1.EnableServiceRequest)
}

::google::protobuf::uint8* EnableServiceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicemanagement.v1.EnableServiceRequest)
  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.EnableServiceRequest.service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_name(), target);
  }

  // string consumer_id = 2;
  if (this->consumer_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->consumer_id().data(), this->consumer_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.EnableServiceRequest.consumer_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->consumer_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicemanagement.v1.EnableServiceRequest)
  return target;
}

size_t EnableServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicemanagement.v1.EnableServiceRequest)
  size_t total_size = 0;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_name());
  }

  // string consumer_id = 2;
  if (this->consumer_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->consumer_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnableServiceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicemanagement.v1.EnableServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EnableServiceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EnableServiceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicemanagement.v1.EnableServiceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicemanagement.v1.EnableServiceRequest)
    MergeFrom(*source);
  }
}

void EnableServiceRequest::MergeFrom(const EnableServiceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicemanagement.v1.EnableServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.service_name().size() > 0) {

    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  if (from.consumer_id().size() > 0) {

    consumer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.consumer_id_);
  }
}

void EnableServiceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicemanagement.v1.EnableServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnableServiceRequest::CopyFrom(const EnableServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicemanagement.v1.EnableServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableServiceRequest::IsInitialized() const {
  return true;
}

void EnableServiceRequest::Swap(EnableServiceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnableServiceRequest::InternalSwap(EnableServiceRequest* other) {
  service_name_.Swap(&other->service_name_);
  consumer_id_.Swap(&other->consumer_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnableServiceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[17];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EnableServiceRequest

// string service_name = 1;
void EnableServiceRequest::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EnableServiceRequest::service_name() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.EnableServiceRequest.service_name)
  return service_name_.GetNoArena();
}
void EnableServiceRequest::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.EnableServiceRequest.service_name)
}
void EnableServiceRequest::set_service_name(const char* value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicemanagement.v1.EnableServiceRequest.service_name)
}
void EnableServiceRequest::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicemanagement.v1.EnableServiceRequest.service_name)
}
::std::string* EnableServiceRequest::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.EnableServiceRequest.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EnableServiceRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.EnableServiceRequest.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EnableServiceRequest::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.EnableServiceRequest.service_name)
}

// string consumer_id = 2;
void EnableServiceRequest::clear_consumer_id() {
  consumer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EnableServiceRequest::consumer_id() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.EnableServiceRequest.consumer_id)
  return consumer_id_.GetNoArena();
}
void EnableServiceRequest::set_consumer_id(const ::std::string& value) {
  
  consumer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.EnableServiceRequest.consumer_id)
}
void EnableServiceRequest::set_consumer_id(const char* value) {
  
  consumer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicemanagement.v1.EnableServiceRequest.consumer_id)
}
void EnableServiceRequest::set_consumer_id(const char* value, size_t size) {
  
  consumer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicemanagement.v1.EnableServiceRequest.consumer_id)
}
::std::string* EnableServiceRequest::mutable_consumer_id() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.EnableServiceRequest.consumer_id)
  return consumer_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EnableServiceRequest::release_consumer_id() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.EnableServiceRequest.consumer_id)
  
  return consumer_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EnableServiceRequest::set_allocated_consumer_id(::std::string* consumer_id) {
  if (consumer_id != NULL) {
    
  } else {
    
  }
  consumer_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), consumer_id);
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.EnableServiceRequest.consumer_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DisableServiceRequest::kServiceNameFieldNumber;
const int DisableServiceRequest::kConsumerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DisableServiceRequest::DisableServiceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicemanagement.v1.DisableServiceRequest)
}
DisableServiceRequest::DisableServiceRequest(const DisableServiceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service_name().size() > 0) {
    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  consumer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.consumer_id().size() > 0) {
    consumer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.consumer_id_);
  }
  // @@protoc_insertion_point(copy_constructor:google.api.servicemanagement.v1.DisableServiceRequest)
}

void DisableServiceRequest::SharedCtor() {
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  consumer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DisableServiceRequest::~DisableServiceRequest() {
  // @@protoc_insertion_point(destructor:google.api.servicemanagement.v1.DisableServiceRequest)
  SharedDtor();
}

void DisableServiceRequest::SharedDtor() {
  service_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  consumer_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DisableServiceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DisableServiceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[18].descriptor;
}

const DisableServiceRequest& DisableServiceRequest::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  return *internal_default_instance();
}

DisableServiceRequest* DisableServiceRequest::New(::google::protobuf::Arena* arena) const {
  DisableServiceRequest* n = new DisableServiceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DisableServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicemanagement.v1.DisableServiceRequest)
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  consumer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DisableServiceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.servicemanagement.v1.DisableServiceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string service_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicemanagement.v1.DisableServiceRequest.service_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string consumer_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_consumer_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->consumer_id().data(), this->consumer_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicemanagement.v1.DisableServiceRequest.consumer_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.servicemanagement.v1.DisableServiceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.servicemanagement.v1.DisableServiceRequest)
  return false;
#undef DO_
}

void DisableServiceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.servicemanagement.v1.DisableServiceRequest)
  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.DisableServiceRequest.service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->service_name(), output);
  }

  // string consumer_id = 2;
  if (this->consumer_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->consumer_id().data(), this->consumer_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.DisableServiceRequest.consumer_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->consumer_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.servicemanagement.v1.DisableServiceRequest)
}

::google::protobuf::uint8* DisableServiceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicemanagement.v1.DisableServiceRequest)
  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.DisableServiceRequest.service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_name(), target);
  }

  // string consumer_id = 2;
  if (this->consumer_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->consumer_id().data(), this->consumer_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.DisableServiceRequest.consumer_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->consumer_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicemanagement.v1.DisableServiceRequest)
  return target;
}

size_t DisableServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicemanagement.v1.DisableServiceRequest)
  size_t total_size = 0;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_name());
  }

  // string consumer_id = 2;
  if (this->consumer_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->consumer_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DisableServiceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicemanagement.v1.DisableServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DisableServiceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DisableServiceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicemanagement.v1.DisableServiceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicemanagement.v1.DisableServiceRequest)
    MergeFrom(*source);
  }
}

void DisableServiceRequest::MergeFrom(const DisableServiceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicemanagement.v1.DisableServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.service_name().size() > 0) {

    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  if (from.consumer_id().size() > 0) {

    consumer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.consumer_id_);
  }
}

void DisableServiceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicemanagement.v1.DisableServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisableServiceRequest::CopyFrom(const DisableServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicemanagement.v1.DisableServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisableServiceRequest::IsInitialized() const {
  return true;
}

void DisableServiceRequest::Swap(DisableServiceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DisableServiceRequest::InternalSwap(DisableServiceRequest* other) {
  service_name_.Swap(&other->service_name_);
  consumer_id_.Swap(&other->consumer_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DisableServiceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[18];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DisableServiceRequest

// string service_name = 1;
void DisableServiceRequest::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DisableServiceRequest::service_name() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.DisableServiceRequest.service_name)
  return service_name_.GetNoArena();
}
void DisableServiceRequest::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.DisableServiceRequest.service_name)
}
void DisableServiceRequest::set_service_name(const char* value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicemanagement.v1.DisableServiceRequest.service_name)
}
void DisableServiceRequest::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicemanagement.v1.DisableServiceRequest.service_name)
}
::std::string* DisableServiceRequest::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.DisableServiceRequest.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DisableServiceRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.DisableServiceRequest.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DisableServiceRequest::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.DisableServiceRequest.service_name)
}

// string consumer_id = 2;
void DisableServiceRequest::clear_consumer_id() {
  consumer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DisableServiceRequest::consumer_id() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.DisableServiceRequest.consumer_id)
  return consumer_id_.GetNoArena();
}
void DisableServiceRequest::set_consumer_id(const ::std::string& value) {
  
  consumer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.DisableServiceRequest.consumer_id)
}
void DisableServiceRequest::set_consumer_id(const char* value) {
  
  consumer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicemanagement.v1.DisableServiceRequest.consumer_id)
}
void DisableServiceRequest::set_consumer_id(const char* value, size_t size) {
  
  consumer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicemanagement.v1.DisableServiceRequest.consumer_id)
}
::std::string* DisableServiceRequest::mutable_consumer_id() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.DisableServiceRequest.consumer_id)
  return consumer_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DisableServiceRequest::release_consumer_id() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.DisableServiceRequest.consumer_id)
  
  return consumer_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DisableServiceRequest::set_allocated_consumer_id(::std::string* consumer_id) {
  if (consumer_id != NULL) {
    
  } else {
    
  }
  consumer_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), consumer_id);
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.DisableServiceRequest.consumer_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GenerateConfigReportRequest::kNewConfigFieldNumber;
const int GenerateConfigReportRequest::kOldConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GenerateConfigReportRequest::GenerateConfigReportRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicemanagement.v1.GenerateConfigReportRequest)
}
GenerateConfigReportRequest::GenerateConfigReportRequest(const GenerateConfigReportRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_new_config()) {
    new_config_ = new ::google::protobuf::Any(*from.new_config_);
  } else {
    new_config_ = NULL;
  }
  if (from.has_old_config()) {
    old_config_ = new ::google::protobuf::Any(*from.old_config_);
  } else {
    old_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.api.servicemanagement.v1.GenerateConfigReportRequest)
}

void GenerateConfigReportRequest::SharedCtor() {
  ::memset(&new_config_, 0, reinterpret_cast<char*>(&old_config_) -
    reinterpret_cast<char*>(&new_config_) + sizeof(old_config_));
  _cached_size_ = 0;
}

GenerateConfigReportRequest::~GenerateConfigReportRequest() {
  // @@protoc_insertion_point(destructor:google.api.servicemanagement.v1.GenerateConfigReportRequest)
  SharedDtor();
}

void GenerateConfigReportRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete new_config_;
  }
  if (this != internal_default_instance()) {
    delete old_config_;
  }
}

void GenerateConfigReportRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GenerateConfigReportRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[19].descriptor;
}

const GenerateConfigReportRequest& GenerateConfigReportRequest::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  return *internal_default_instance();
}

GenerateConfigReportRequest* GenerateConfigReportRequest::New(::google::protobuf::Arena* arena) const {
  GenerateConfigReportRequest* n = new GenerateConfigReportRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GenerateConfigReportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicemanagement.v1.GenerateConfigReportRequest)
  if (GetArenaNoVirtual() == NULL && new_config_ != NULL) {
    delete new_config_;
  }
  new_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && old_config_ != NULL) {
    delete old_config_;
  }
  old_config_ = NULL;
}

bool GenerateConfigReportRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.servicemanagement.v1.GenerateConfigReportRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Any new_config = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any old_config = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.servicemanagement.v1.GenerateConfigReportRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.servicemanagement.v1.GenerateConfigReportRequest)
  return false;
#undef DO_
}

void GenerateConfigReportRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.servicemanagement.v1.GenerateConfigReportRequest)
  // .google.protobuf.Any new_config = 1;
  if (this->has_new_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->new_config_, output);
  }

  // .google.protobuf.Any old_config = 2;
  if (this->has_old_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->old_config_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.servicemanagement.v1.GenerateConfigReportRequest)
}

::google::protobuf::uint8* GenerateConfigReportRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicemanagement.v1.GenerateConfigReportRequest)
  // .google.protobuf.Any new_config = 1;
  if (this->has_new_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->new_config_, false, target);
  }

  // .google.protobuf.Any old_config = 2;
  if (this->has_old_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->old_config_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicemanagement.v1.GenerateConfigReportRequest)
  return target;
}

size_t GenerateConfigReportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicemanagement.v1.GenerateConfigReportRequest)
  size_t total_size = 0;

  // .google.protobuf.Any new_config = 1;
  if (this->has_new_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->new_config_);
  }

  // .google.protobuf.Any old_config = 2;
  if (this->has_old_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->old_config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenerateConfigReportRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicemanagement.v1.GenerateConfigReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GenerateConfigReportRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GenerateConfigReportRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicemanagement.v1.GenerateConfigReportRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicemanagement.v1.GenerateConfigReportRequest)
    MergeFrom(*source);
  }
}

void GenerateConfigReportRequest::MergeFrom(const GenerateConfigReportRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicemanagement.v1.GenerateConfigReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_new_config()) {
    mutable_new_config()->::google::protobuf::Any::MergeFrom(from.new_config());
  }
  if (from.has_old_config()) {
    mutable_old_config()->::google::protobuf::Any::MergeFrom(from.old_config());
  }
}

void GenerateConfigReportRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicemanagement.v1.GenerateConfigReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenerateConfigReportRequest::CopyFrom(const GenerateConfigReportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicemanagement.v1.GenerateConfigReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenerateConfigReportRequest::IsInitialized() const {
  return true;
}

void GenerateConfigReportRequest::Swap(GenerateConfigReportRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GenerateConfigReportRequest::InternalSwap(GenerateConfigReportRequest* other) {
  std::swap(new_config_, other->new_config_);
  std::swap(old_config_, other->old_config_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GenerateConfigReportRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[19];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GenerateConfigReportRequest

// .google.protobuf.Any new_config = 1;
bool GenerateConfigReportRequest::has_new_config() const {
  return this != internal_default_instance() && new_config_ != NULL;
}
void GenerateConfigReportRequest::clear_new_config() {
  if (GetArenaNoVirtual() == NULL && new_config_ != NULL) delete new_config_;
  new_config_ = NULL;
}
const ::google::protobuf::Any& GenerateConfigReportRequest::new_config() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.GenerateConfigReportRequest.new_config)
  return new_config_ != NULL ? *new_config_
                         : *::google::protobuf::Any::internal_default_instance();
}
::google::protobuf::Any* GenerateConfigReportRequest::mutable_new_config() {
  
  if (new_config_ == NULL) {
    new_config_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.GenerateConfigReportRequest.new_config)
  return new_config_;
}
::google::protobuf::Any* GenerateConfigReportRequest::release_new_config() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.GenerateConfigReportRequest.new_config)
  
  ::google::protobuf::Any* temp = new_config_;
  new_config_ = NULL;
  return temp;
}
void GenerateConfigReportRequest::set_allocated_new_config(::google::protobuf::Any* new_config) {
  delete new_config_;
  new_config_ = new_config;
  if (new_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.GenerateConfigReportRequest.new_config)
}

// .google.protobuf.Any old_config = 2;
bool GenerateConfigReportRequest::has_old_config() const {
  return this != internal_default_instance() && old_config_ != NULL;
}
void GenerateConfigReportRequest::clear_old_config() {
  if (GetArenaNoVirtual() == NULL && old_config_ != NULL) delete old_config_;
  old_config_ = NULL;
}
const ::google::protobuf::Any& GenerateConfigReportRequest::old_config() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.GenerateConfigReportRequest.old_config)
  return old_config_ != NULL ? *old_config_
                         : *::google::protobuf::Any::internal_default_instance();
}
::google::protobuf::Any* GenerateConfigReportRequest::mutable_old_config() {
  
  if (old_config_ == NULL) {
    old_config_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.GenerateConfigReportRequest.old_config)
  return old_config_;
}
::google::protobuf::Any* GenerateConfigReportRequest::release_old_config() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.GenerateConfigReportRequest.old_config)
  
  ::google::protobuf::Any* temp = old_config_;
  old_config_ = NULL;
  return temp;
}
void GenerateConfigReportRequest::set_allocated_old_config(::google::protobuf::Any* old_config) {
  delete old_config_;
  old_config_ = old_config;
  if (old_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.GenerateConfigReportRequest.old_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GenerateConfigReportResponse::kServiceNameFieldNumber;
const int GenerateConfigReportResponse::kIdFieldNumber;
const int GenerateConfigReportResponse::kChangeReportsFieldNumber;
const int GenerateConfigReportResponse::kDiagnosticsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GenerateConfigReportResponse::GenerateConfigReportResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicemanagement.v1.GenerateConfigReportResponse)
}
GenerateConfigReportResponse::GenerateConfigReportResponse(const GenerateConfigReportResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      change_reports_(from.change_reports_),
      diagnostics_(from.diagnostics_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service_name().size() > 0) {
    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:google.api.servicemanagement.v1.GenerateConfigReportResponse)
}

void GenerateConfigReportResponse::SharedCtor() {
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GenerateConfigReportResponse::~GenerateConfigReportResponse() {
  // @@protoc_insertion_point(destructor:google.api.servicemanagement.v1.GenerateConfigReportResponse)
  SharedDtor();
}

void GenerateConfigReportResponse::SharedDtor() {
  service_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GenerateConfigReportResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GenerateConfigReportResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[20].descriptor;
}

const GenerateConfigReportResponse& GenerateConfigReportResponse::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto();
  return *internal_default_instance();
}

GenerateConfigReportResponse* GenerateConfigReportResponse::New(::google::protobuf::Arena* arena) const {
  GenerateConfigReportResponse* n = new GenerateConfigReportResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GenerateConfigReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicemanagement.v1.GenerateConfigReportResponse)
  change_reports_.Clear();
  diagnostics_.Clear();
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GenerateConfigReportResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.servicemanagement.v1.GenerateConfigReportResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string service_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicemanagement.v1.GenerateConfigReportResponse.service_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicemanagement.v1.GenerateConfigReportResponse.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.api.servicemanagement.v1.ChangeReport change_reports = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_change_reports()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .google.api.servicemanagement.v1.Diagnostic diagnostics = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_diagnostics()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.servicemanagement.v1.GenerateConfigReportResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.servicemanagement.v1.GenerateConfigReportResponse)
  return false;
#undef DO_
}

void GenerateConfigReportResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.servicemanagement.v1.GenerateConfigReportResponse)
  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.GenerateConfigReportResponse.service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->service_name(), output);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.GenerateConfigReportResponse.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // repeated .google.api.servicemanagement.v1.ChangeReport change_reports = 3;
  for (unsigned int i = 0, n = this->change_reports_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->change_reports(i), output);
  }

  // repeated .google.api.servicemanagement.v1.Diagnostic diagnostics = 4;
  for (unsigned int i = 0, n = this->diagnostics_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->diagnostics(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.servicemanagement.v1.GenerateConfigReportResponse)
}

::google::protobuf::uint8* GenerateConfigReportResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicemanagement.v1.GenerateConfigReportResponse)
  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.GenerateConfigReportResponse.service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_name(), target);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.GenerateConfigReportResponse.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // repeated .google.api.servicemanagement.v1.ChangeReport change_reports = 3;
  for (unsigned int i = 0, n = this->change_reports_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->change_reports(i), false, target);
  }

  // repeated .google.api.servicemanagement.v1.Diagnostic diagnostics = 4;
  for (unsigned int i = 0, n = this->diagnostics_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->diagnostics(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicemanagement.v1.GenerateConfigReportResponse)
  return target;
}

size_t GenerateConfigReportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicemanagement.v1.GenerateConfigReportResponse)
  size_t total_size = 0;

  // repeated .google.api.servicemanagement.v1.ChangeReport change_reports = 3;
  {
    unsigned int count = this->change_reports_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->change_reports(i));
    }
  }

  // repeated .google.api.servicemanagement.v1.Diagnostic diagnostics = 4;
  {
    unsigned int count = this->diagnostics_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->diagnostics(i));
    }
  }

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_name());
  }

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenerateConfigReportResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicemanagement.v1.GenerateConfigReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GenerateConfigReportResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GenerateConfigReportResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicemanagement.v1.GenerateConfigReportResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicemanagement.v1.GenerateConfigReportResponse)
    MergeFrom(*source);
  }
}

void GenerateConfigReportResponse::MergeFrom(const GenerateConfigReportResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicemanagement.v1.GenerateConfigReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  change_reports_.MergeFrom(from.change_reports_);
  diagnostics_.MergeFrom(from.diagnostics_);
  if (from.service_name().size() > 0) {

    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void GenerateConfigReportResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicemanagement.v1.GenerateConfigReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenerateConfigReportResponse::CopyFrom(const GenerateConfigReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicemanagement.v1.GenerateConfigReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenerateConfigReportResponse::IsInitialized() const {
  return true;
}

void GenerateConfigReportResponse::Swap(GenerateConfigReportResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GenerateConfigReportResponse::InternalSwap(GenerateConfigReportResponse* other) {
  change_reports_.UnsafeArenaSwap(&other->change_reports_);
  diagnostics_.UnsafeArenaSwap(&other->diagnostics_);
  service_name_.Swap(&other->service_name_);
  id_.Swap(&other->id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GenerateConfigReportResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[20];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GenerateConfigReportResponse

// string service_name = 1;
void GenerateConfigReportResponse::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GenerateConfigReportResponse::service_name() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.GenerateConfigReportResponse.service_name)
  return service_name_.GetNoArena();
}
void GenerateConfigReportResponse::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.GenerateConfigReportResponse.service_name)
}
void GenerateConfigReportResponse::set_service_name(const char* value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicemanagement.v1.GenerateConfigReportResponse.service_name)
}
void GenerateConfigReportResponse::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicemanagement.v1.GenerateConfigReportResponse.service_name)
}
::std::string* GenerateConfigReportResponse::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.GenerateConfigReportResponse.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GenerateConfigReportResponse::release_service_name() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.GenerateConfigReportResponse.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GenerateConfigReportResponse::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.GenerateConfigReportResponse.service_name)
}

// string id = 2;
void GenerateConfigReportResponse::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GenerateConfigReportResponse::id() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.GenerateConfigReportResponse.id)
  return id_.GetNoArena();
}
void GenerateConfigReportResponse::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.GenerateConfigReportResponse.id)
}
void GenerateConfigReportResponse::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicemanagement.v1.GenerateConfigReportResponse.id)
}
void GenerateConfigReportResponse::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicemanagement.v1.GenerateConfigReportResponse.id)
}
::std::string* GenerateConfigReportResponse::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.GenerateConfigReportResponse.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GenerateConfigReportResponse::release_id() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.GenerateConfigReportResponse.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GenerateConfigReportResponse::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.GenerateConfigReportResponse.id)
}

// repeated .google.api.servicemanagement.v1.ChangeReport change_reports = 3;
int GenerateConfigReportResponse::change_reports_size() const {
  return change_reports_.size();
}
void GenerateConfigReportResponse::clear_change_reports() {
  change_reports_.Clear();
}
const ::google::api::servicemanagement::v1::ChangeReport& GenerateConfigReportResponse::change_reports(int index) const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.GenerateConfigReportResponse.change_reports)
  return change_reports_.Get(index);
}
::google::api::servicemanagement::v1::ChangeReport* GenerateConfigReportResponse::mutable_change_reports(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.GenerateConfigReportResponse.change_reports)
  return change_reports_.Mutable(index);
}
::google::api::servicemanagement::v1::ChangeReport* GenerateConfigReportResponse::add_change_reports() {
  // @@protoc_insertion_point(field_add:google.api.servicemanagement.v1.GenerateConfigReportResponse.change_reports)
  return change_reports_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::api::servicemanagement::v1::ChangeReport >*
GenerateConfigReportResponse::mutable_change_reports() {
  // @@protoc_insertion_point(field_mutable_list:google.api.servicemanagement.v1.GenerateConfigReportResponse.change_reports)
  return &change_reports_;
}
const ::google::protobuf::RepeatedPtrField< ::google::api::servicemanagement::v1::ChangeReport >&
GenerateConfigReportResponse::change_reports() const {
  // @@protoc_insertion_point(field_list:google.api.servicemanagement.v1.GenerateConfigReportResponse.change_reports)
  return change_reports_;
}

// repeated .google.api.servicemanagement.v1.Diagnostic diagnostics = 4;
int GenerateConfigReportResponse::diagnostics_size() const {
  return diagnostics_.size();
}
void GenerateConfigReportResponse::clear_diagnostics() {
  diagnostics_.Clear();
}
const ::google::api::servicemanagement::v1::Diagnostic& GenerateConfigReportResponse::diagnostics(int index) const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.GenerateConfigReportResponse.diagnostics)
  return diagnostics_.Get(index);
}
::google::api::servicemanagement::v1::Diagnostic* GenerateConfigReportResponse::mutable_diagnostics(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.GenerateConfigReportResponse.diagnostics)
  return diagnostics_.Mutable(index);
}
::google::api::servicemanagement::v1::Diagnostic* GenerateConfigReportResponse::add_diagnostics() {
  // @@protoc_insertion_point(field_add:google.api.servicemanagement.v1.GenerateConfigReportResponse.diagnostics)
  return diagnostics_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::api::servicemanagement::v1::Diagnostic >*
GenerateConfigReportResponse::mutable_diagnostics() {
  // @@protoc_insertion_point(field_mutable_list:google.api.servicemanagement.v1.GenerateConfigReportResponse.diagnostics)
  return &diagnostics_;
}
const ::google::protobuf::RepeatedPtrField< ::google::api::servicemanagement::v1::Diagnostic >&
GenerateConfigReportResponse::diagnostics() const {
  // @@protoc_insertion_point(field_list:google.api.servicemanagement.v1.GenerateConfigReportResponse.diagnostics)
  return diagnostics_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace servicemanagement
}  // namespace api
}  // namespace google

// @@protoc_insertion_point(global_scope)
