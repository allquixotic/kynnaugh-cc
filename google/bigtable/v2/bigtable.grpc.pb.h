// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: google/bigtable/v2/bigtable.proto
// Original file comments:
// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fbigtable_2fv2_2fbigtable_2eproto__INCLUDED
#define GRPC_google_2fbigtable_2fv2_2fbigtable_2eproto__INCLUDED

#include "google/bigtable/v2/bigtable.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace google {
namespace bigtable {
namespace v2 {

// Service for reading from and writing to existing Bigtable tables.
class Bigtable GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Streams back the contents of all requested rows, optionally
    // applying the same Reader filter to each. Depending on their size,
    // rows and cells may be broken up across multiple responses, but
    // atomicity of each row will still be preserved. See the
    // ReadRowsResponse documentation for details.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::google::bigtable::v2::ReadRowsResponse>> ReadRows(::grpc::ClientContext* context, const ::google::bigtable::v2::ReadRowsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::google::bigtable::v2::ReadRowsResponse>>(ReadRowsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::bigtable::v2::ReadRowsResponse>> AsyncReadRows(::grpc::ClientContext* context, const ::google::bigtable::v2::ReadRowsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::bigtable::v2::ReadRowsResponse>>(AsyncReadRowsRaw(context, request, cq, tag));
    }
    // Returns a sample of row keys in the table. The returned row keys will
    // delimit contiguous sections of the table of approximately equal size,
    // which can be used to break up the data for distributed tasks like
    // mapreduces.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::google::bigtable::v2::SampleRowKeysResponse>> SampleRowKeys(::grpc::ClientContext* context, const ::google::bigtable::v2::SampleRowKeysRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::google::bigtable::v2::SampleRowKeysResponse>>(SampleRowKeysRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::bigtable::v2::SampleRowKeysResponse>> AsyncSampleRowKeys(::grpc::ClientContext* context, const ::google::bigtable::v2::SampleRowKeysRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::bigtable::v2::SampleRowKeysResponse>>(AsyncSampleRowKeysRaw(context, request, cq, tag));
    }
    // Mutates a row atomically. Cells already present in the row are left
    // unchanged unless explicitly changed by `mutation`.
    virtual ::grpc::Status MutateRow(::grpc::ClientContext* context, const ::google::bigtable::v2::MutateRowRequest& request, ::google::bigtable::v2::MutateRowResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::bigtable::v2::MutateRowResponse>> AsyncMutateRow(::grpc::ClientContext* context, const ::google::bigtable::v2::MutateRowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::bigtable::v2::MutateRowResponse>>(AsyncMutateRowRaw(context, request, cq));
    }
    // Mutates multiple rows in a batch. Each individual row is mutated
    // atomically as in MutateRow, but the entire batch is not executed
    // atomically.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::google::bigtable::v2::MutateRowsResponse>> MutateRows(::grpc::ClientContext* context, const ::google::bigtable::v2::MutateRowsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::google::bigtable::v2::MutateRowsResponse>>(MutateRowsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::bigtable::v2::MutateRowsResponse>> AsyncMutateRows(::grpc::ClientContext* context, const ::google::bigtable::v2::MutateRowsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::bigtable::v2::MutateRowsResponse>>(AsyncMutateRowsRaw(context, request, cq, tag));
    }
    // Mutates a row atomically based on the output of a predicate Reader filter.
    virtual ::grpc::Status CheckAndMutateRow(::grpc::ClientContext* context, const ::google::bigtable::v2::CheckAndMutateRowRequest& request, ::google::bigtable::v2::CheckAndMutateRowResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::bigtable::v2::CheckAndMutateRowResponse>> AsyncCheckAndMutateRow(::grpc::ClientContext* context, const ::google::bigtable::v2::CheckAndMutateRowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::bigtable::v2::CheckAndMutateRowResponse>>(AsyncCheckAndMutateRowRaw(context, request, cq));
    }
    // Modifies a row atomically. The method reads the latest existing timestamp
    // and value from the specified columns and writes a new entry based on
    // pre-defined read/modify/write rules. The new value for the timestamp is the
    // greater of the existing timestamp or the current server time. The method
    // returns the new contents of all modified cells.
    virtual ::grpc::Status ReadModifyWriteRow(::grpc::ClientContext* context, const ::google::bigtable::v2::ReadModifyWriteRowRequest& request, ::google::bigtable::v2::ReadModifyWriteRowResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::bigtable::v2::ReadModifyWriteRowResponse>> AsyncReadModifyWriteRow(::grpc::ClientContext* context, const ::google::bigtable::v2::ReadModifyWriteRowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::bigtable::v2::ReadModifyWriteRowResponse>>(AsyncReadModifyWriteRowRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientReaderInterface< ::google::bigtable::v2::ReadRowsResponse>* ReadRowsRaw(::grpc::ClientContext* context, const ::google::bigtable::v2::ReadRowsRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::google::bigtable::v2::ReadRowsResponse>* AsyncReadRowsRaw(::grpc::ClientContext* context, const ::google::bigtable::v2::ReadRowsRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientReaderInterface< ::google::bigtable::v2::SampleRowKeysResponse>* SampleRowKeysRaw(::grpc::ClientContext* context, const ::google::bigtable::v2::SampleRowKeysRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::google::bigtable::v2::SampleRowKeysResponse>* AsyncSampleRowKeysRaw(::grpc::ClientContext* context, const ::google::bigtable::v2::SampleRowKeysRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::bigtable::v2::MutateRowResponse>* AsyncMutateRowRaw(::grpc::ClientContext* context, const ::google::bigtable::v2::MutateRowRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::google::bigtable::v2::MutateRowsResponse>* MutateRowsRaw(::grpc::ClientContext* context, const ::google::bigtable::v2::MutateRowsRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::google::bigtable::v2::MutateRowsResponse>* AsyncMutateRowsRaw(::grpc::ClientContext* context, const ::google::bigtable::v2::MutateRowsRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::bigtable::v2::CheckAndMutateRowResponse>* AsyncCheckAndMutateRowRaw(::grpc::ClientContext* context, const ::google::bigtable::v2::CheckAndMutateRowRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::bigtable::v2::ReadModifyWriteRowResponse>* AsyncReadModifyWriteRowRaw(::grpc::ClientContext* context, const ::google::bigtable::v2::ReadModifyWriteRowRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::google::bigtable::v2::ReadRowsResponse>> ReadRows(::grpc::ClientContext* context, const ::google::bigtable::v2::ReadRowsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::google::bigtable::v2::ReadRowsResponse>>(ReadRowsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::google::bigtable::v2::ReadRowsResponse>> AsyncReadRows(::grpc::ClientContext* context, const ::google::bigtable::v2::ReadRowsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::google::bigtable::v2::ReadRowsResponse>>(AsyncReadRowsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReader< ::google::bigtable::v2::SampleRowKeysResponse>> SampleRowKeys(::grpc::ClientContext* context, const ::google::bigtable::v2::SampleRowKeysRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::google::bigtable::v2::SampleRowKeysResponse>>(SampleRowKeysRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::google::bigtable::v2::SampleRowKeysResponse>> AsyncSampleRowKeys(::grpc::ClientContext* context, const ::google::bigtable::v2::SampleRowKeysRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::google::bigtable::v2::SampleRowKeysResponse>>(AsyncSampleRowKeysRaw(context, request, cq, tag));
    }
    ::grpc::Status MutateRow(::grpc::ClientContext* context, const ::google::bigtable::v2::MutateRowRequest& request, ::google::bigtable::v2::MutateRowResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::bigtable::v2::MutateRowResponse>> AsyncMutateRow(::grpc::ClientContext* context, const ::google::bigtable::v2::MutateRowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::bigtable::v2::MutateRowResponse>>(AsyncMutateRowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::google::bigtable::v2::MutateRowsResponse>> MutateRows(::grpc::ClientContext* context, const ::google::bigtable::v2::MutateRowsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::google::bigtable::v2::MutateRowsResponse>>(MutateRowsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::google::bigtable::v2::MutateRowsResponse>> AsyncMutateRows(::grpc::ClientContext* context, const ::google::bigtable::v2::MutateRowsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::google::bigtable::v2::MutateRowsResponse>>(AsyncMutateRowsRaw(context, request, cq, tag));
    }
    ::grpc::Status CheckAndMutateRow(::grpc::ClientContext* context, const ::google::bigtable::v2::CheckAndMutateRowRequest& request, ::google::bigtable::v2::CheckAndMutateRowResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::bigtable::v2::CheckAndMutateRowResponse>> AsyncCheckAndMutateRow(::grpc::ClientContext* context, const ::google::bigtable::v2::CheckAndMutateRowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::bigtable::v2::CheckAndMutateRowResponse>>(AsyncCheckAndMutateRowRaw(context, request, cq));
    }
    ::grpc::Status ReadModifyWriteRow(::grpc::ClientContext* context, const ::google::bigtable::v2::ReadModifyWriteRowRequest& request, ::google::bigtable::v2::ReadModifyWriteRowResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::bigtable::v2::ReadModifyWriteRowResponse>> AsyncReadModifyWriteRow(::grpc::ClientContext* context, const ::google::bigtable::v2::ReadModifyWriteRowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::bigtable::v2::ReadModifyWriteRowResponse>>(AsyncReadModifyWriteRowRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientReader< ::google::bigtable::v2::ReadRowsResponse>* ReadRowsRaw(::grpc::ClientContext* context, const ::google::bigtable::v2::ReadRowsRequest& request) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReader< ::google::bigtable::v2::ReadRowsResponse>* AsyncReadRowsRaw(::grpc::ClientContext* context, const ::google::bigtable::v2::ReadRowsRequest& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientReader< ::google::bigtable::v2::SampleRowKeysResponse>* SampleRowKeysRaw(::grpc::ClientContext* context, const ::google::bigtable::v2::SampleRowKeysRequest& request) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReader< ::google::bigtable::v2::SampleRowKeysResponse>* AsyncSampleRowKeysRaw(::grpc::ClientContext* context, const ::google::bigtable::v2::SampleRowKeysRequest& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::bigtable::v2::MutateRowResponse>* AsyncMutateRowRaw(::grpc::ClientContext* context, const ::google::bigtable::v2::MutateRowRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientReader< ::google::bigtable::v2::MutateRowsResponse>* MutateRowsRaw(::grpc::ClientContext* context, const ::google::bigtable::v2::MutateRowsRequest& request) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReader< ::google::bigtable::v2::MutateRowsResponse>* AsyncMutateRowsRaw(::grpc::ClientContext* context, const ::google::bigtable::v2::MutateRowsRequest& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::bigtable::v2::CheckAndMutateRowResponse>* AsyncCheckAndMutateRowRaw(::grpc::ClientContext* context, const ::google::bigtable::v2::CheckAndMutateRowRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::bigtable::v2::ReadModifyWriteRowResponse>* AsyncReadModifyWriteRowRaw(::grpc::ClientContext* context, const ::google::bigtable::v2::ReadModifyWriteRowRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_ReadRows_;
    const ::grpc::RpcMethod rpcmethod_SampleRowKeys_;
    const ::grpc::RpcMethod rpcmethod_MutateRow_;
    const ::grpc::RpcMethod rpcmethod_MutateRows_;
    const ::grpc::RpcMethod rpcmethod_CheckAndMutateRow_;
    const ::grpc::RpcMethod rpcmethod_ReadModifyWriteRow_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Streams back the contents of all requested rows, optionally
    // applying the same Reader filter to each. Depending on their size,
    // rows and cells may be broken up across multiple responses, but
    // atomicity of each row will still be preserved. See the
    // ReadRowsResponse documentation for details.
    virtual ::grpc::Status ReadRows(::grpc::ServerContext* context, const ::google::bigtable::v2::ReadRowsRequest* request, ::grpc::ServerWriter< ::google::bigtable::v2::ReadRowsResponse>* writer);
    // Returns a sample of row keys in the table. The returned row keys will
    // delimit contiguous sections of the table of approximately equal size,
    // which can be used to break up the data for distributed tasks like
    // mapreduces.
    virtual ::grpc::Status SampleRowKeys(::grpc::ServerContext* context, const ::google::bigtable::v2::SampleRowKeysRequest* request, ::grpc::ServerWriter< ::google::bigtable::v2::SampleRowKeysResponse>* writer);
    // Mutates a row atomically. Cells already present in the row are left
    // unchanged unless explicitly changed by `mutation`.
    virtual ::grpc::Status MutateRow(::grpc::ServerContext* context, const ::google::bigtable::v2::MutateRowRequest* request, ::google::bigtable::v2::MutateRowResponse* response);
    // Mutates multiple rows in a batch. Each individual row is mutated
    // atomically as in MutateRow, but the entire batch is not executed
    // atomically.
    virtual ::grpc::Status MutateRows(::grpc::ServerContext* context, const ::google::bigtable::v2::MutateRowsRequest* request, ::grpc::ServerWriter< ::google::bigtable::v2::MutateRowsResponse>* writer);
    // Mutates a row atomically based on the output of a predicate Reader filter.
    virtual ::grpc::Status CheckAndMutateRow(::grpc::ServerContext* context, const ::google::bigtable::v2::CheckAndMutateRowRequest* request, ::google::bigtable::v2::CheckAndMutateRowResponse* response);
    // Modifies a row atomically. The method reads the latest existing timestamp
    // and value from the specified columns and writes a new entry based on
    // pre-defined read/modify/write rules. The new value for the timestamp is the
    // greater of the existing timestamp or the current server time. The method
    // returns the new contents of all modified cells.
    virtual ::grpc::Status ReadModifyWriteRow(::grpc::ServerContext* context, const ::google::bigtable::v2::ReadModifyWriteRowRequest* request, ::google::bigtable::v2::ReadModifyWriteRowResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadRows : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ReadRows() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ReadRows() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadRows(::grpc::ServerContext* context, const ::google::bigtable::v2::ReadRowsRequest* request, ::grpc::ServerWriter< ::google::bigtable::v2::ReadRowsResponse>* writer) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadRows(::grpc::ServerContext* context, ::google::bigtable::v2::ReadRowsRequest* request, ::grpc::ServerAsyncWriter< ::google::bigtable::v2::ReadRowsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SampleRowKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SampleRowKeys() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SampleRowKeys() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SampleRowKeys(::grpc::ServerContext* context, const ::google::bigtable::v2::SampleRowKeysRequest* request, ::grpc::ServerWriter< ::google::bigtable::v2::SampleRowKeysResponse>* writer) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSampleRowKeys(::grpc::ServerContext* context, ::google::bigtable::v2::SampleRowKeysRequest* request, ::grpc::ServerAsyncWriter< ::google::bigtable::v2::SampleRowKeysResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MutateRow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_MutateRow() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_MutateRow() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MutateRow(::grpc::ServerContext* context, const ::google::bigtable::v2::MutateRowRequest* request, ::google::bigtable::v2::MutateRowResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMutateRow(::grpc::ServerContext* context, ::google::bigtable::v2::MutateRowRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::bigtable::v2::MutateRowResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MutateRows : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_MutateRows() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_MutateRows() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MutateRows(::grpc::ServerContext* context, const ::google::bigtable::v2::MutateRowsRequest* request, ::grpc::ServerWriter< ::google::bigtable::v2::MutateRowsResponse>* writer) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMutateRows(::grpc::ServerContext* context, ::google::bigtable::v2::MutateRowsRequest* request, ::grpc::ServerAsyncWriter< ::google::bigtable::v2::MutateRowsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckAndMutateRow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CheckAndMutateRow() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_CheckAndMutateRow() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckAndMutateRow(::grpc::ServerContext* context, const ::google::bigtable::v2::CheckAndMutateRowRequest* request, ::google::bigtable::v2::CheckAndMutateRowResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckAndMutateRow(::grpc::ServerContext* context, ::google::bigtable::v2::CheckAndMutateRowRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::bigtable::v2::CheckAndMutateRowResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadModifyWriteRow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ReadModifyWriteRow() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ReadModifyWriteRow() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadModifyWriteRow(::grpc::ServerContext* context, const ::google::bigtable::v2::ReadModifyWriteRowRequest* request, ::google::bigtable::v2::ReadModifyWriteRowResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadModifyWriteRow(::grpc::ServerContext* context, ::google::bigtable::v2::ReadModifyWriteRowRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::bigtable::v2::ReadModifyWriteRowResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ReadRows<WithAsyncMethod_SampleRowKeys<WithAsyncMethod_MutateRow<WithAsyncMethod_MutateRows<WithAsyncMethod_CheckAndMutateRow<WithAsyncMethod_ReadModifyWriteRow<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_ReadRows : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ReadRows() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ReadRows() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadRows(::grpc::ServerContext* context, const ::google::bigtable::v2::ReadRowsRequest* request, ::grpc::ServerWriter< ::google::bigtable::v2::ReadRowsResponse>* writer) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SampleRowKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SampleRowKeys() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SampleRowKeys() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SampleRowKeys(::grpc::ServerContext* context, const ::google::bigtable::v2::SampleRowKeysRequest* request, ::grpc::ServerWriter< ::google::bigtable::v2::SampleRowKeysResponse>* writer) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MutateRow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_MutateRow() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_MutateRow() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MutateRow(::grpc::ServerContext* context, const ::google::bigtable::v2::MutateRowRequest* request, ::google::bigtable::v2::MutateRowResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MutateRows : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_MutateRows() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_MutateRows() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MutateRows(::grpc::ServerContext* context, const ::google::bigtable::v2::MutateRowsRequest* request, ::grpc::ServerWriter< ::google::bigtable::v2::MutateRowsResponse>* writer) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckAndMutateRow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CheckAndMutateRow() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_CheckAndMutateRow() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckAndMutateRow(::grpc::ServerContext* context, const ::google::bigtable::v2::CheckAndMutateRowRequest* request, ::google::bigtable::v2::CheckAndMutateRowResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReadModifyWriteRow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ReadModifyWriteRow() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ReadModifyWriteRow() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadModifyWriteRow(::grpc::ServerContext* context, const ::google::bigtable::v2::ReadModifyWriteRowRequest* request, ::google::bigtable::v2::ReadModifyWriteRowResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

}  // namespace v2
}  // namespace bigtable
}  // namespace google


#endif  // GRPC_google_2fbigtable_2fv2_2fbigtable_2eproto__INCLUDED
