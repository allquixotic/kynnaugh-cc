// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/v2/data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/bigtable/v2/data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace bigtable {
namespace v2 {

namespace {

const ::google::protobuf::Descriptor* Row_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Row_reflection_ = NULL;
const ::google::protobuf::Descriptor* Family_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Family_reflection_ = NULL;
const ::google::protobuf::Descriptor* Column_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Column_reflection_ = NULL;
const ::google::protobuf::Descriptor* Cell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cell_reflection_ = NULL;
const ::google::protobuf::Descriptor* RowRange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RowRange_reflection_ = NULL;
struct RowRangeOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr start_key_closed_;
  ::google::protobuf::internal::ArenaStringPtr start_key_open_;
  ::google::protobuf::internal::ArenaStringPtr end_key_open_;
  ::google::protobuf::internal::ArenaStringPtr end_key_closed_;
}* RowRange_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* RowSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RowSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* ColumnRange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColumnRange_reflection_ = NULL;
struct ColumnRangeOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr start_qualifier_closed_;
  ::google::protobuf::internal::ArenaStringPtr start_qualifier_open_;
  ::google::protobuf::internal::ArenaStringPtr end_qualifier_closed_;
  ::google::protobuf::internal::ArenaStringPtr end_qualifier_open_;
}* ColumnRange_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* TimestampRange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimestampRange_reflection_ = NULL;
const ::google::protobuf::Descriptor* ValueRange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ValueRange_reflection_ = NULL;
struct ValueRangeOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr start_value_closed_;
  ::google::protobuf::internal::ArenaStringPtr start_value_open_;
  ::google::protobuf::internal::ArenaStringPtr end_value_closed_;
  ::google::protobuf::internal::ArenaStringPtr end_value_open_;
}* ValueRange_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* RowFilter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RowFilter_reflection_ = NULL;
struct RowFilterOneofInstance {
  const ::google::bigtable::v2::RowFilter_Chain* chain_;
  const ::google::bigtable::v2::RowFilter_Interleave* interleave_;
  const ::google::bigtable::v2::RowFilter_Condition* condition_;
  bool sink_;
  bool pass_all_filter_;
  bool block_all_filter_;
  ::google::protobuf::internal::ArenaStringPtr row_key_regex_filter_;
  double row_sample_filter_;
  ::google::protobuf::internal::ArenaStringPtr family_name_regex_filter_;
  ::google::protobuf::internal::ArenaStringPtr column_qualifier_regex_filter_;
  const ::google::bigtable::v2::ColumnRange* column_range_filter_;
  const ::google::bigtable::v2::TimestampRange* timestamp_range_filter_;
  ::google::protobuf::internal::ArenaStringPtr value_regex_filter_;
  const ::google::bigtable::v2::ValueRange* value_range_filter_;
  ::google::protobuf::int32 cells_per_row_offset_filter_;
  ::google::protobuf::int32 cells_per_row_limit_filter_;
  ::google::protobuf::int32 cells_per_column_limit_filter_;
  bool strip_value_transformer_;
  ::google::protobuf::internal::ArenaStringPtr apply_label_transformer_;
}* RowFilter_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* RowFilter_Chain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RowFilter_Chain_reflection_ = NULL;
const ::google::protobuf::Descriptor* RowFilter_Interleave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RowFilter_Interleave_reflection_ = NULL;
const ::google::protobuf::Descriptor* RowFilter_Condition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RowFilter_Condition_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mutation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mutation_reflection_ = NULL;
struct MutationOneofInstance {
  const ::google::bigtable::v2::Mutation_SetCell* set_cell_;
  const ::google::bigtable::v2::Mutation_DeleteFromColumn* delete_from_column_;
  const ::google::bigtable::v2::Mutation_DeleteFromFamily* delete_from_family_;
  const ::google::bigtable::v2::Mutation_DeleteFromRow* delete_from_row_;
}* Mutation_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Mutation_SetCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mutation_SetCell_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mutation_DeleteFromColumn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mutation_DeleteFromColumn_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mutation_DeleteFromFamily_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mutation_DeleteFromFamily_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mutation_DeleteFromRow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mutation_DeleteFromRow_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadModifyWriteRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadModifyWriteRule_reflection_ = NULL;
struct ReadModifyWriteRuleOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr append_value_;
  ::google::protobuf::int64 increment_amount_;
}* ReadModifyWriteRule_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_google_2fbigtable_2fv2_2fdata_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_google_2fbigtable_2fv2_2fdata_2eproto() {
  protobuf_AddDesc_google_2fbigtable_2fv2_2fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "google/bigtable/v2/data.proto");
  GOOGLE_CHECK(file != NULL);
  Row_descriptor_ = file->message_type(0);
  static const int Row_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Row, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Row, families_),
  };
  Row_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Row_descriptor_,
      Row::internal_default_instance(),
      Row_offsets_,
      -1,
      -1,
      -1,
      sizeof(Row),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Row, _internal_metadata_));
  Family_descriptor_ = file->message_type(1);
  static const int Family_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Family, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Family, columns_),
  };
  Family_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Family_descriptor_,
      Family::internal_default_instance(),
      Family_offsets_,
      -1,
      -1,
      -1,
      sizeof(Family),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Family, _internal_metadata_));
  Column_descriptor_ = file->message_type(2);
  static const int Column_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, qualifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, cells_),
  };
  Column_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Column_descriptor_,
      Column::internal_default_instance(),
      Column_offsets_,
      -1,
      -1,
      -1,
      sizeof(Column),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, _internal_metadata_));
  Cell_descriptor_ = file->message_type(3);
  static const int Cell_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, timestamp_micros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, labels_),
  };
  Cell_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Cell_descriptor_,
      Cell::internal_default_instance(),
      Cell_offsets_,
      -1,
      -1,
      -1,
      sizeof(Cell),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, _internal_metadata_));
  RowRange_descriptor_ = file->message_type(4);
  static const int RowRange_offsets_[6] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RowRange_default_oneof_instance_, start_key_closed_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RowRange_default_oneof_instance_, start_key_open_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RowRange_default_oneof_instance_, end_key_open_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RowRange_default_oneof_instance_, end_key_closed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowRange, start_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowRange, end_key_),
  };
  RowRange_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RowRange_descriptor_,
      RowRange::internal_default_instance(),
      RowRange_offsets_,
      -1,
      -1,
      -1,
      RowRange_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowRange, _oneof_case_[0]),
      sizeof(RowRange),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowRange, _internal_metadata_));
  RowSet_descriptor_ = file->message_type(5);
  static const int RowSet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowSet, row_keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowSet, row_ranges_),
  };
  RowSet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RowSet_descriptor_,
      RowSet::internal_default_instance(),
      RowSet_offsets_,
      -1,
      -1,
      -1,
      sizeof(RowSet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowSet, _internal_metadata_));
  ColumnRange_descriptor_ = file->message_type(6);
  static const int ColumnRange_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnRange, family_name_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ColumnRange_default_oneof_instance_, start_qualifier_closed_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ColumnRange_default_oneof_instance_, start_qualifier_open_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ColumnRange_default_oneof_instance_, end_qualifier_closed_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ColumnRange_default_oneof_instance_, end_qualifier_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnRange, start_qualifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnRange, end_qualifier_),
  };
  ColumnRange_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ColumnRange_descriptor_,
      ColumnRange::internal_default_instance(),
      ColumnRange_offsets_,
      -1,
      -1,
      -1,
      ColumnRange_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnRange, _oneof_case_[0]),
      sizeof(ColumnRange),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnRange, _internal_metadata_));
  TimestampRange_descriptor_ = file->message_type(7);
  static const int TimestampRange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimestampRange, start_timestamp_micros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimestampRange, end_timestamp_micros_),
  };
  TimestampRange_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TimestampRange_descriptor_,
      TimestampRange::internal_default_instance(),
      TimestampRange_offsets_,
      -1,
      -1,
      -1,
      sizeof(TimestampRange),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimestampRange, _internal_metadata_));
  ValueRange_descriptor_ = file->message_type(8);
  static const int ValueRange_offsets_[6] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ValueRange_default_oneof_instance_, start_value_closed_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ValueRange_default_oneof_instance_, start_value_open_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ValueRange_default_oneof_instance_, end_value_closed_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ValueRange_default_oneof_instance_, end_value_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueRange, start_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueRange, end_value_),
  };
  ValueRange_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ValueRange_descriptor_,
      ValueRange::internal_default_instance(),
      ValueRange_offsets_,
      -1,
      -1,
      -1,
      ValueRange_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueRange, _oneof_case_[0]),
      sizeof(ValueRange),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueRange, _internal_metadata_));
  RowFilter_descriptor_ = file->message_type(9);
  static const int RowFilter_offsets_[20] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RowFilter_default_oneof_instance_, chain_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RowFilter_default_oneof_instance_, interleave_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RowFilter_default_oneof_instance_, condition_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RowFilter_default_oneof_instance_, sink_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RowFilter_default_oneof_instance_, pass_all_filter_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RowFilter_default_oneof_instance_, block_all_filter_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RowFilter_default_oneof_instance_, row_key_regex_filter_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RowFilter_default_oneof_instance_, row_sample_filter_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RowFilter_default_oneof_instance_, family_name_regex_filter_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RowFilter_default_oneof_instance_, column_qualifier_regex_filter_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RowFilter_default_oneof_instance_, column_range_filter_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RowFilter_default_oneof_instance_, timestamp_range_filter_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RowFilter_default_oneof_instance_, value_regex_filter_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RowFilter_default_oneof_instance_, value_range_filter_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RowFilter_default_oneof_instance_, cells_per_row_offset_filter_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RowFilter_default_oneof_instance_, cells_per_row_limit_filter_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RowFilter_default_oneof_instance_, cells_per_column_limit_filter_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RowFilter_default_oneof_instance_, strip_value_transformer_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RowFilter_default_oneof_instance_, apply_label_transformer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowFilter, filter_),
  };
  RowFilter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RowFilter_descriptor_,
      RowFilter::internal_default_instance(),
      RowFilter_offsets_,
      -1,
      -1,
      -1,
      RowFilter_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowFilter, _oneof_case_[0]),
      sizeof(RowFilter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowFilter, _internal_metadata_));
  RowFilter_Chain_descriptor_ = RowFilter_descriptor_->nested_type(0);
  static const int RowFilter_Chain_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowFilter_Chain, filters_),
  };
  RowFilter_Chain_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RowFilter_Chain_descriptor_,
      RowFilter_Chain::internal_default_instance(),
      RowFilter_Chain_offsets_,
      -1,
      -1,
      -1,
      sizeof(RowFilter_Chain),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowFilter_Chain, _internal_metadata_));
  RowFilter_Interleave_descriptor_ = RowFilter_descriptor_->nested_type(1);
  static const int RowFilter_Interleave_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowFilter_Interleave, filters_),
  };
  RowFilter_Interleave_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RowFilter_Interleave_descriptor_,
      RowFilter_Interleave::internal_default_instance(),
      RowFilter_Interleave_offsets_,
      -1,
      -1,
      -1,
      sizeof(RowFilter_Interleave),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowFilter_Interleave, _internal_metadata_));
  RowFilter_Condition_descriptor_ = RowFilter_descriptor_->nested_type(2);
  static const int RowFilter_Condition_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowFilter_Condition, predicate_filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowFilter_Condition, true_filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowFilter_Condition, false_filter_),
  };
  RowFilter_Condition_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RowFilter_Condition_descriptor_,
      RowFilter_Condition::internal_default_instance(),
      RowFilter_Condition_offsets_,
      -1,
      -1,
      -1,
      sizeof(RowFilter_Condition),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowFilter_Condition, _internal_metadata_));
  Mutation_descriptor_ = file->message_type(10);
  static const int Mutation_offsets_[5] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Mutation_default_oneof_instance_, set_cell_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Mutation_default_oneof_instance_, delete_from_column_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Mutation_default_oneof_instance_, delete_from_family_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Mutation_default_oneof_instance_, delete_from_row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation, mutation_),
  };
  Mutation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Mutation_descriptor_,
      Mutation::internal_default_instance(),
      Mutation_offsets_,
      -1,
      -1,
      -1,
      Mutation_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation, _oneof_case_[0]),
      sizeof(Mutation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation, _internal_metadata_));
  Mutation_SetCell_descriptor_ = Mutation_descriptor_->nested_type(0);
  static const int Mutation_SetCell_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation_SetCell, family_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation_SetCell, column_qualifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation_SetCell, timestamp_micros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation_SetCell, value_),
  };
  Mutation_SetCell_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Mutation_SetCell_descriptor_,
      Mutation_SetCell::internal_default_instance(),
      Mutation_SetCell_offsets_,
      -1,
      -1,
      -1,
      sizeof(Mutation_SetCell),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation_SetCell, _internal_metadata_));
  Mutation_DeleteFromColumn_descriptor_ = Mutation_descriptor_->nested_type(1);
  static const int Mutation_DeleteFromColumn_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation_DeleteFromColumn, family_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation_DeleteFromColumn, column_qualifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation_DeleteFromColumn, time_range_),
  };
  Mutation_DeleteFromColumn_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Mutation_DeleteFromColumn_descriptor_,
      Mutation_DeleteFromColumn::internal_default_instance(),
      Mutation_DeleteFromColumn_offsets_,
      -1,
      -1,
      -1,
      sizeof(Mutation_DeleteFromColumn),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation_DeleteFromColumn, _internal_metadata_));
  Mutation_DeleteFromFamily_descriptor_ = Mutation_descriptor_->nested_type(2);
  static const int Mutation_DeleteFromFamily_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation_DeleteFromFamily, family_name_),
  };
  Mutation_DeleteFromFamily_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Mutation_DeleteFromFamily_descriptor_,
      Mutation_DeleteFromFamily::internal_default_instance(),
      Mutation_DeleteFromFamily_offsets_,
      -1,
      -1,
      -1,
      sizeof(Mutation_DeleteFromFamily),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation_DeleteFromFamily, _internal_metadata_));
  Mutation_DeleteFromRow_descriptor_ = Mutation_descriptor_->nested_type(3);
  static const int Mutation_DeleteFromRow_offsets_[1] = {
  };
  Mutation_DeleteFromRow_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Mutation_DeleteFromRow_descriptor_,
      Mutation_DeleteFromRow::internal_default_instance(),
      Mutation_DeleteFromRow_offsets_,
      -1,
      -1,
      -1,
      sizeof(Mutation_DeleteFromRow),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation_DeleteFromRow, _internal_metadata_));
  ReadModifyWriteRule_descriptor_ = file->message_type(11);
  static const int ReadModifyWriteRule_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadModifyWriteRule, family_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadModifyWriteRule, column_qualifier_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReadModifyWriteRule_default_oneof_instance_, append_value_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReadModifyWriteRule_default_oneof_instance_, increment_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadModifyWriteRule, rule_),
  };
  ReadModifyWriteRule_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReadModifyWriteRule_descriptor_,
      ReadModifyWriteRule::internal_default_instance(),
      ReadModifyWriteRule_offsets_,
      -1,
      -1,
      -1,
      ReadModifyWriteRule_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadModifyWriteRule, _oneof_case_[0]),
      sizeof(ReadModifyWriteRule),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadModifyWriteRule, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_google_2fbigtable_2fv2_2fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Row_descriptor_, Row::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Family_descriptor_, Family::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Column_descriptor_, Column::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Cell_descriptor_, Cell::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RowRange_descriptor_, RowRange::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RowSet_descriptor_, RowSet::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ColumnRange_descriptor_, ColumnRange::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TimestampRange_descriptor_, TimestampRange::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ValueRange_descriptor_, ValueRange::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RowFilter_descriptor_, RowFilter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RowFilter_Chain_descriptor_, RowFilter_Chain::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RowFilter_Interleave_descriptor_, RowFilter_Interleave::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RowFilter_Condition_descriptor_, RowFilter_Condition::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Mutation_descriptor_, Mutation::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Mutation_SetCell_descriptor_, Mutation_SetCell::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Mutation_DeleteFromColumn_descriptor_, Mutation_DeleteFromColumn::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Mutation_DeleteFromFamily_descriptor_, Mutation_DeleteFromFamily::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Mutation_DeleteFromRow_descriptor_, Mutation_DeleteFromRow::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReadModifyWriteRule_descriptor_, ReadModifyWriteRule::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_google_2fbigtable_2fv2_2fdata_2eproto() {
  Row_default_instance_.Shutdown();
  delete Row_reflection_;
  Family_default_instance_.Shutdown();
  delete Family_reflection_;
  Column_default_instance_.Shutdown();
  delete Column_reflection_;
  Cell_default_instance_.Shutdown();
  delete Cell_reflection_;
  RowRange_default_instance_.Shutdown();
  delete RowRange_default_oneof_instance_;
  delete RowRange_reflection_;
  RowSet_default_instance_.Shutdown();
  delete RowSet_reflection_;
  ColumnRange_default_instance_.Shutdown();
  delete ColumnRange_default_oneof_instance_;
  delete ColumnRange_reflection_;
  TimestampRange_default_instance_.Shutdown();
  delete TimestampRange_reflection_;
  ValueRange_default_instance_.Shutdown();
  delete ValueRange_default_oneof_instance_;
  delete ValueRange_reflection_;
  RowFilter_default_instance_.Shutdown();
  delete RowFilter_default_oneof_instance_;
  delete RowFilter_reflection_;
  RowFilter_Chain_default_instance_.Shutdown();
  delete RowFilter_Chain_reflection_;
  RowFilter_Interleave_default_instance_.Shutdown();
  delete RowFilter_Interleave_reflection_;
  RowFilter_Condition_default_instance_.Shutdown();
  delete RowFilter_Condition_reflection_;
  Mutation_default_instance_.Shutdown();
  delete Mutation_default_oneof_instance_;
  delete Mutation_reflection_;
  Mutation_SetCell_default_instance_.Shutdown();
  delete Mutation_SetCell_reflection_;
  Mutation_DeleteFromColumn_default_instance_.Shutdown();
  delete Mutation_DeleteFromColumn_reflection_;
  Mutation_DeleteFromFamily_default_instance_.Shutdown();
  delete Mutation_DeleteFromFamily_reflection_;
  Mutation_DeleteFromRow_default_instance_.Shutdown();
  delete Mutation_DeleteFromRow_reflection_;
  ReadModifyWriteRule_default_instance_.Shutdown();
  delete ReadModifyWriteRule_default_oneof_instance_;
  delete ReadModifyWriteRule_reflection_;
}

void protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  Row_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Family_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Column_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Cell_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  RowRange_default_instance_.DefaultConstruct();
  RowRange_default_oneof_instance_ = new RowRangeOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  RowSet_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ColumnRange_default_instance_.DefaultConstruct();
  ColumnRange_default_oneof_instance_ = new ColumnRangeOneofInstance();
  TimestampRange_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ValueRange_default_instance_.DefaultConstruct();
  ValueRange_default_oneof_instance_ = new ValueRangeOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  RowFilter_default_instance_.DefaultConstruct();
  RowFilter_default_oneof_instance_ = new RowFilterOneofInstance();
  RowFilter_Chain_default_instance_.DefaultConstruct();
  RowFilter_Interleave_default_instance_.DefaultConstruct();
  RowFilter_Condition_default_instance_.DefaultConstruct();
  Mutation_default_instance_.DefaultConstruct();
  Mutation_default_oneof_instance_ = new MutationOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  Mutation_SetCell_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Mutation_DeleteFromColumn_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Mutation_DeleteFromFamily_default_instance_.DefaultConstruct();
  Mutation_DeleteFromRow_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ReadModifyWriteRule_default_instance_.DefaultConstruct();
  ReadModifyWriteRule_default_oneof_instance_ = new ReadModifyWriteRuleOneofInstance();
  Row_default_instance_.get_mutable()->InitAsDefaultInstance();
  Family_default_instance_.get_mutable()->InitAsDefaultInstance();
  Column_default_instance_.get_mutable()->InitAsDefaultInstance();
  Cell_default_instance_.get_mutable()->InitAsDefaultInstance();
  RowRange_default_instance_.get_mutable()->InitAsDefaultInstance();
  RowSet_default_instance_.get_mutable()->InitAsDefaultInstance();
  ColumnRange_default_instance_.get_mutable()->InitAsDefaultInstance();
  TimestampRange_default_instance_.get_mutable()->InitAsDefaultInstance();
  ValueRange_default_instance_.get_mutable()->InitAsDefaultInstance();
  RowFilter_default_instance_.get_mutable()->InitAsDefaultInstance();
  RowFilter_Chain_default_instance_.get_mutable()->InitAsDefaultInstance();
  RowFilter_Interleave_default_instance_.get_mutable()->InitAsDefaultInstance();
  RowFilter_Condition_default_instance_.get_mutable()->InitAsDefaultInstance();
  Mutation_default_instance_.get_mutable()->InitAsDefaultInstance();
  Mutation_SetCell_default_instance_.get_mutable()->InitAsDefaultInstance();
  Mutation_DeleteFromColumn_default_instance_.get_mutable()->InitAsDefaultInstance();
  Mutation_DeleteFromFamily_default_instance_.get_mutable()->InitAsDefaultInstance();
  Mutation_DeleteFromRow_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReadModifyWriteRule_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto_once_);
void protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto_once_,
                 &protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto_impl);
}
void protobuf_AddDesc_google_2fbigtable_2fv2_2fdata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035google/bigtable/v2/data.proto\022\022google."
    "bigtable.v2\"@\n\003Row\022\013\n\003key\030\001 \001(\014\022,\n\010famil"
    "ies\030\002 \003(\0132\032.google.bigtable.v2.Family\"C\n"
    "\006Family\022\014\n\004name\030\001 \001(\t\022+\n\007columns\030\002 \003(\0132\032"
    ".google.bigtable.v2.Column\"D\n\006Column\022\021\n\t"
    "qualifier\030\001 \001(\014\022\'\n\005cells\030\002 \003(\0132\030.google."
    "bigtable.v2.Cell\"\?\n\004Cell\022\030\n\020timestamp_mi"
    "cros\030\001 \001(\003\022\r\n\005value\030\002 \001(\014\022\016\n\006labels\030\003 \003("
    "\t\"\212\001\n\010RowRange\022\032\n\020start_key_closed\030\001 \001(\014"
    "H\000\022\030\n\016start_key_open\030\002 \001(\014H\000\022\026\n\014end_key_"
    "open\030\003 \001(\014H\001\022\030\n\016end_key_closed\030\004 \001(\014H\001B\013"
    "\n\tstart_keyB\t\n\007end_key\"L\n\006RowSet\022\020\n\010row_"
    "keys\030\001 \003(\014\0220\n\nrow_ranges\030\002 \003(\0132\034.google."
    "bigtable.v2.RowRange\"\306\001\n\013ColumnRange\022\023\n\013"
    "family_name\030\001 \001(\t\022 \n\026start_qualifier_clo"
    "sed\030\002 \001(\014H\000\022\036\n\024start_qualifier_open\030\003 \001("
    "\014H\000\022\036\n\024end_qualifier_closed\030\004 \001(\014H\001\022\034\n\022e"
    "nd_qualifier_open\030\005 \001(\014H\001B\021\n\017start_quali"
    "fierB\017\n\rend_qualifier\"N\n\016TimestampRange\022"
    "\036\n\026start_timestamp_micros\030\001 \001(\003\022\034\n\024end_t"
    "imestamp_micros\030\002 \001(\003\"\230\001\n\nValueRange\022\034\n\022"
    "start_value_closed\030\001 \001(\014H\000\022\032\n\020start_valu"
    "e_open\030\002 \001(\014H\000\022\032\n\020end_value_closed\030\003 \001(\014"
    "H\001\022\030\n\016end_value_open\030\004 \001(\014H\001B\r\n\013start_va"
    "lueB\013\n\tend_value\"\337\010\n\tRowFilter\0224\n\005chain\030"
    "\001 \001(\0132#.google.bigtable.v2.RowFilter.Cha"
    "inH\000\022>\n\ninterleave\030\002 \001(\0132(.google.bigtab"
    "le.v2.RowFilter.InterleaveH\000\022<\n\tconditio"
    "n\030\003 \001(\0132\'.google.bigtable.v2.RowFilter.C"
    "onditionH\000\022\016\n\004sink\030\020 \001(\010H\000\022\031\n\017pass_all_f"
    "ilter\030\021 \001(\010H\000\022\032\n\020block_all_filter\030\022 \001(\010H"
    "\000\022\036\n\024row_key_regex_filter\030\004 \001(\014H\000\022\033\n\021row"
    "_sample_filter\030\016 \001(\001H\000\022\"\n\030family_name_re"
    "gex_filter\030\005 \001(\tH\000\022\'\n\035column_qualifier_r"
    "egex_filter\030\006 \001(\014H\000\022>\n\023column_range_filt"
    "er\030\007 \001(\0132\037.google.bigtable.v2.ColumnRang"
    "eH\000\022D\n\026timestamp_range_filter\030\010 \001(\0132\".go"
    "ogle.bigtable.v2.TimestampRangeH\000\022\034\n\022val"
    "ue_regex_filter\030\t \001(\014H\000\022<\n\022value_range_f"
    "ilter\030\017 \001(\0132\036.google.bigtable.v2.ValueRa"
    "ngeH\000\022%\n\033cells_per_row_offset_filter\030\n \001"
    "(\005H\000\022$\n\032cells_per_row_limit_filter\030\013 \001(\005"
    "H\000\022\'\n\035cells_per_column_limit_filter\030\014 \001("
    "\005H\000\022!\n\027strip_value_transformer\030\r \001(\010H\000\022!"
    "\n\027apply_label_transformer\030\023 \001(\tH\000\0327\n\005Cha"
    "in\022.\n\007filters\030\001 \003(\0132\035.google.bigtable.v2"
    ".RowFilter\032<\n\nInterleave\022.\n\007filters\030\001 \003("
    "\0132\035.google.bigtable.v2.RowFilter\032\255\001\n\tCon"
    "dition\0227\n\020predicate_filter\030\001 \001(\0132\035.googl"
    "e.bigtable.v2.RowFilter\0222\n\013true_filter\030\002"
    " \001(\0132\035.google.bigtable.v2.RowFilter\0223\n\014f"
    "alse_filter\030\003 \001(\0132\035.google.bigtable.v2.R"
    "owFilterB\010\n\006filter\"\311\004\n\010Mutation\0228\n\010set_c"
    "ell\030\001 \001(\0132$.google.bigtable.v2.Mutation."
    "SetCellH\000\022K\n\022delete_from_column\030\002 \001(\0132-."
    "google.bigtable.v2.Mutation.DeleteFromCo"
    "lumnH\000\022K\n\022delete_from_family\030\003 \001(\0132-.goo"
    "gle.bigtable.v2.Mutation.DeleteFromFamil"
    "yH\000\022E\n\017delete_from_row\030\004 \001(\0132*.google.bi"
    "gtable.v2.Mutation.DeleteFromRowH\000\032a\n\007Se"
    "tCell\022\023\n\013family_name\030\001 \001(\t\022\030\n\020column_qua"
    "lifier\030\002 \001(\014\022\030\n\020timestamp_micros\030\003 \001(\003\022\r"
    "\n\005value\030\004 \001(\014\032y\n\020DeleteFromColumn\022\023\n\013fam"
    "ily_name\030\001 \001(\t\022\030\n\020column_qualifier\030\002 \001(\014"
    "\0226\n\ntime_range\030\003 \001(\0132\".google.bigtable.v"
    "2.TimestampRange\032\'\n\020DeleteFromFamily\022\023\n\013"
    "family_name\030\001 \001(\t\032\017\n\rDeleteFromRowB\n\n\010mu"
    "tation\"\200\001\n\023ReadModifyWriteRule\022\023\n\013family"
    "_name\030\001 \001(\t\022\030\n\020column_qualifier\030\002 \001(\014\022\026\n"
    "\014append_value\030\003 \001(\014H\000\022\032\n\020increment_amoun"
    "t\030\004 \001(\003H\000B\006\n\004ruleBa\n\026com.google.bigtable"
    ".v2B\tDataProtoP\001Z:google.golang.org/genp"
    "roto/googleapis/bigtable/v2;bigtableb\006pr"
    "oto3", 2924);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/bigtable/v2/data.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_google_2fbigtable_2fv2_2fdata_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_google_2fbigtable_2fv2_2fdata_2eproto_once_);
void protobuf_AddDesc_google_2fbigtable_2fv2_2fdata_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_google_2fbigtable_2fv2_2fdata_2eproto_once_,
                 &protobuf_AddDesc_google_2fbigtable_2fv2_2fdata_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_google_2fbigtable_2fv2_2fdata_2eproto {
  StaticDescriptorInitializer_google_2fbigtable_2fv2_2fdata_2eproto() {
    protobuf_AddDesc_google_2fbigtable_2fv2_2fdata_2eproto();
  }
} static_descriptor_initializer_google_2fbigtable_2fv2_2fdata_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Row::kKeyFieldNumber;
const int Row::kFamiliesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Row::Row()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v2.Row)
}

void Row::InitAsDefaultInstance() {
}

Row::Row(const Row& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v2.Row)
}

void Row::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Row::~Row() {
  // @@protoc_insertion_point(destructor:google.bigtable.v2.Row)
  SharedDtor();
}

void Row::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Row::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Row::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Row_descriptor_;
}

const Row& Row::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Row> Row_default_instance_;

Row* Row::New(::google::protobuf::Arena* arena) const {
  Row* n = new Row;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Row::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v2.Row)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  families_.Clear();
}

bool Row::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v2.Row)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_families;
        break;
      }

      // repeated .google.bigtable.v2.Family families = 2;
      case 2: {
        if (tag == 18) {
         parse_families:
          DO_(input->IncrementRecursionDepth());
         parse_loop_families:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_families()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_families;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v2.Row)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v2.Row)
  return false;
#undef DO_
}

void Row::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v2.Row)
  // optional bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // repeated .google.bigtable.v2.Family families = 2;
  for (unsigned int i = 0, n = this->families_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->families(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v2.Row)
}

::google::protobuf::uint8* Row::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v2.Row)
  // optional bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // repeated .google.bigtable.v2.Family families = 2;
  for (unsigned int i = 0, n = this->families_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->families(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v2.Row)
  return target;
}

size_t Row::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v2.Row)
  size_t total_size = 0;

  // optional bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // repeated .google.bigtable.v2.Family families = 2;
  {
    unsigned int count = this->families_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->families(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Row::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v2.Row)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Row* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Row>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v2.Row)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v2.Row)
    UnsafeMergeFrom(*source);
  }
}

void Row::MergeFrom(const Row& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v2.Row)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Row::UnsafeMergeFrom(const Row& from) {
  GOOGLE_DCHECK(&from != this);
  families_.MergeFrom(from.families_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void Row::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v2.Row)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Row::CopyFrom(const Row& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v2.Row)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Row::IsInitialized() const {

  return true;
}

void Row::Swap(Row* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Row::InternalSwap(Row* other) {
  key_.Swap(&other->key_);
  families_.UnsafeArenaSwap(&other->families_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Row::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Row_descriptor_;
  metadata.reflection = Row_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Row

// optional bytes key = 1;
void Row::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Row::key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.Row.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Row::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.Row.key)
}
void Row::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.Row.key)
}
void Row::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.Row.key)
}
::std::string* Row::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.Row.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Row::release_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.Row.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Row::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.Row.key)
}

// repeated .google.bigtable.v2.Family families = 2;
int Row::families_size() const {
  return families_.size();
}
void Row::clear_families() {
  families_.Clear();
}
const ::google::bigtable::v2::Family& Row::families(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.Row.families)
  return families_.Get(index);
}
::google::bigtable::v2::Family* Row::mutable_families(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.Row.families)
  return families_.Mutable(index);
}
::google::bigtable::v2::Family* Row::add_families() {
  // @@protoc_insertion_point(field_add:google.bigtable.v2.Row.families)
  return families_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::Family >*
Row::mutable_families() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.Row.families)
  return &families_;
}
const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::Family >&
Row::families() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.Row.families)
  return families_;
}

inline const Row* Row::internal_default_instance() {
  return &Row_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Family::kNameFieldNumber;
const int Family::kColumnsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Family::Family()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v2.Family)
}

void Family::InitAsDefaultInstance() {
}

Family::Family(const Family& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v2.Family)
}

void Family::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Family::~Family() {
  // @@protoc_insertion_point(destructor:google.bigtable.v2.Family)
  SharedDtor();
}

void Family::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Family::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Family::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Family_descriptor_;
}

const Family& Family::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Family> Family_default_instance_;

Family* Family::New(::google::protobuf::Arena* arena) const {
  Family* n = new Family;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Family::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v2.Family)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  columns_.Clear();
}

bool Family::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v2.Family)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.v2.Family.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_columns;
        break;
      }

      // repeated .google.bigtable.v2.Column columns = 2;
      case 2: {
        if (tag == 18) {
         parse_columns:
          DO_(input->IncrementRecursionDepth());
         parse_loop_columns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_columns()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_columns;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v2.Family)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v2.Family)
  return false;
#undef DO_
}

void Family::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v2.Family)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v2.Family.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .google.bigtable.v2.Column columns = 2;
  for (unsigned int i = 0, n = this->columns_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->columns(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v2.Family)
}

::google::protobuf::uint8* Family::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v2.Family)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v2.Family.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .google.bigtable.v2.Column columns = 2;
  for (unsigned int i = 0, n = this->columns_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->columns(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v2.Family)
  return target;
}

size_t Family::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v2.Family)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // repeated .google.bigtable.v2.Column columns = 2;
  {
    unsigned int count = this->columns_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->columns(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Family::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v2.Family)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Family* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Family>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v2.Family)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v2.Family)
    UnsafeMergeFrom(*source);
  }
}

void Family::MergeFrom(const Family& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v2.Family)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Family::UnsafeMergeFrom(const Family& from) {
  GOOGLE_DCHECK(&from != this);
  columns_.MergeFrom(from.columns_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Family::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v2.Family)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Family::CopyFrom(const Family& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v2.Family)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Family::IsInitialized() const {

  return true;
}

void Family::Swap(Family* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Family::InternalSwap(Family* other) {
  name_.Swap(&other->name_);
  columns_.UnsafeArenaSwap(&other->columns_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Family::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Family_descriptor_;
  metadata.reflection = Family_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Family

// optional string name = 1;
void Family::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Family::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.Family.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Family::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.Family.name)
}
void Family::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.Family.name)
}
void Family::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.Family.name)
}
::std::string* Family::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.Family.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Family::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.Family.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Family::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.Family.name)
}

// repeated .google.bigtable.v2.Column columns = 2;
int Family::columns_size() const {
  return columns_.size();
}
void Family::clear_columns() {
  columns_.Clear();
}
const ::google::bigtable::v2::Column& Family::columns(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.Family.columns)
  return columns_.Get(index);
}
::google::bigtable::v2::Column* Family::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.Family.columns)
  return columns_.Mutable(index);
}
::google::bigtable::v2::Column* Family::add_columns() {
  // @@protoc_insertion_point(field_add:google.bigtable.v2.Family.columns)
  return columns_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::Column >*
Family::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.Family.columns)
  return &columns_;
}
const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::Column >&
Family::columns() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.Family.columns)
  return columns_;
}

inline const Family* Family::internal_default_instance() {
  return &Family_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Column::kQualifierFieldNumber;
const int Column::kCellsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Column::Column()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v2.Column)
}

void Column::InitAsDefaultInstance() {
}

Column::Column(const Column& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v2.Column)
}

void Column::SharedCtor() {
  qualifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Column::~Column() {
  // @@protoc_insertion_point(destructor:google.bigtable.v2.Column)
  SharedDtor();
}

void Column::SharedDtor() {
  qualifier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Column::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Column::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Column_descriptor_;
}

const Column& Column::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Column> Column_default_instance_;

Column* Column::New(::google::protobuf::Arena* arena) const {
  Column* n = new Column;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Column::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v2.Column)
  qualifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cells_.Clear();
}

bool Column::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v2.Column)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes qualifier = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_qualifier()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cells;
        break;
      }

      // repeated .google.bigtable.v2.Cell cells = 2;
      case 2: {
        if (tag == 18) {
         parse_cells:
          DO_(input->IncrementRecursionDepth());
         parse_loop_cells:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_cells()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_cells;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v2.Column)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v2.Column)
  return false;
#undef DO_
}

void Column::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v2.Column)
  // optional bytes qualifier = 1;
  if (this->qualifier().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->qualifier(), output);
  }

  // repeated .google.bigtable.v2.Cell cells = 2;
  for (unsigned int i = 0, n = this->cells_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cells(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v2.Column)
}

::google::protobuf::uint8* Column::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v2.Column)
  // optional bytes qualifier = 1;
  if (this->qualifier().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->qualifier(), target);
  }

  // repeated .google.bigtable.v2.Cell cells = 2;
  for (unsigned int i = 0, n = this->cells_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->cells(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v2.Column)
  return target;
}

size_t Column::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v2.Column)
  size_t total_size = 0;

  // optional bytes qualifier = 1;
  if (this->qualifier().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->qualifier());
  }

  // repeated .google.bigtable.v2.Cell cells = 2;
  {
    unsigned int count = this->cells_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cells(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Column::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v2.Column)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Column* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Column>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v2.Column)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v2.Column)
    UnsafeMergeFrom(*source);
  }
}

void Column::MergeFrom(const Column& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v2.Column)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Column::UnsafeMergeFrom(const Column& from) {
  GOOGLE_DCHECK(&from != this);
  cells_.MergeFrom(from.cells_);
  if (from.qualifier().size() > 0) {

    qualifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qualifier_);
  }
}

void Column::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v2.Column)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Column::CopyFrom(const Column& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v2.Column)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Column::IsInitialized() const {

  return true;
}

void Column::Swap(Column* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Column::InternalSwap(Column* other) {
  qualifier_.Swap(&other->qualifier_);
  cells_.UnsafeArenaSwap(&other->cells_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Column::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Column_descriptor_;
  metadata.reflection = Column_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Column

// optional bytes qualifier = 1;
void Column::clear_qualifier() {
  qualifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Column::qualifier() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.Column.qualifier)
  return qualifier_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Column::set_qualifier(const ::std::string& value) {
  
  qualifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.Column.qualifier)
}
void Column::set_qualifier(const char* value) {
  
  qualifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.Column.qualifier)
}
void Column::set_qualifier(const void* value, size_t size) {
  
  qualifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.Column.qualifier)
}
::std::string* Column::mutable_qualifier() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.Column.qualifier)
  return qualifier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Column::release_qualifier() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.Column.qualifier)
  
  return qualifier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Column::set_allocated_qualifier(::std::string* qualifier) {
  if (qualifier != NULL) {
    
  } else {
    
  }
  qualifier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qualifier);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.Column.qualifier)
}

// repeated .google.bigtable.v2.Cell cells = 2;
int Column::cells_size() const {
  return cells_.size();
}
void Column::clear_cells() {
  cells_.Clear();
}
const ::google::bigtable::v2::Cell& Column::cells(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.Column.cells)
  return cells_.Get(index);
}
::google::bigtable::v2::Cell* Column::mutable_cells(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.Column.cells)
  return cells_.Mutable(index);
}
::google::bigtable::v2::Cell* Column::add_cells() {
  // @@protoc_insertion_point(field_add:google.bigtable.v2.Column.cells)
  return cells_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::Cell >*
Column::mutable_cells() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.Column.cells)
  return &cells_;
}
const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::Cell >&
Column::cells() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.Column.cells)
  return cells_;
}

inline const Column* Column::internal_default_instance() {
  return &Column_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Cell::kTimestampMicrosFieldNumber;
const int Cell::kValueFieldNumber;
const int Cell::kLabelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Cell::Cell()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v2.Cell)
}

void Cell::InitAsDefaultInstance() {
}

Cell::Cell(const Cell& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v2.Cell)
}

void Cell::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_micros_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

Cell::~Cell() {
  // @@protoc_insertion_point(destructor:google.bigtable.v2.Cell)
  SharedDtor();
}

void Cell::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Cell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cell_descriptor_;
}

const Cell& Cell::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Cell> Cell_default_instance_;

Cell* Cell::New(::google::protobuf::Arena* arena) const {
  Cell* n = new Cell;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Cell::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v2.Cell)
  timestamp_micros_ = GOOGLE_LONGLONG(0);
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  labels_.Clear();
}

bool Cell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v2.Cell)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_micros = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_micros_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_labels;
        break;
      }

      // repeated string labels = 3;
      case 3: {
        if (tag == 26) {
         parse_labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_labels()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->labels(this->labels_size() - 1).data(),
            this->labels(this->labels_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.v2.Cell.labels"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_labels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v2.Cell)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v2.Cell)
  return false;
#undef DO_
}

void Cell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v2.Cell)
  // optional int64 timestamp_micros = 1;
  if (this->timestamp_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_micros(), output);
  }

  // optional bytes value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  // repeated string labels = 3;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->labels(i).data(), this->labels(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v2.Cell.labels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->labels(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v2.Cell)
}

::google::protobuf::uint8* Cell::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v2.Cell)
  // optional int64 timestamp_micros = 1;
  if (this->timestamp_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp_micros(), target);
  }

  // optional bytes value = 2;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  // repeated string labels = 3;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->labels(i).data(), this->labels(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v2.Cell.labels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->labels(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v2.Cell)
  return target;
}

size_t Cell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v2.Cell)
  size_t total_size = 0;

  // optional int64 timestamp_micros = 1;
  if (this->timestamp_micros() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp_micros());
  }

  // optional bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // repeated string labels = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  for (int i = 0; i < this->labels_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->labels(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cell::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v2.Cell)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Cell* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Cell>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v2.Cell)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v2.Cell)
    UnsafeMergeFrom(*source);
  }
}

void Cell::MergeFrom(const Cell& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v2.Cell)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Cell::UnsafeMergeFrom(const Cell& from) {
  GOOGLE_DCHECK(&from != this);
  labels_.UnsafeMergeFrom(from.labels_);
  if (from.timestamp_micros() != 0) {
    set_timestamp_micros(from.timestamp_micros());
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void Cell::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v2.Cell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cell::CopyFrom(const Cell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v2.Cell)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Cell::IsInitialized() const {

  return true;
}

void Cell::Swap(Cell* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Cell::InternalSwap(Cell* other) {
  std::swap(timestamp_micros_, other->timestamp_micros_);
  value_.Swap(&other->value_);
  labels_.UnsafeArenaSwap(&other->labels_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Cell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cell_descriptor_;
  metadata.reflection = Cell_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Cell

// optional int64 timestamp_micros = 1;
void Cell::clear_timestamp_micros() {
  timestamp_micros_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Cell::timestamp_micros() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.Cell.timestamp_micros)
  return timestamp_micros_;
}
void Cell::set_timestamp_micros(::google::protobuf::int64 value) {
  
  timestamp_micros_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v2.Cell.timestamp_micros)
}

// optional bytes value = 2;
void Cell::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Cell::value() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.Cell.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Cell::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.Cell.value)
}
void Cell::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.Cell.value)
}
void Cell::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.Cell.value)
}
::std::string* Cell::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.Cell.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Cell::release_value() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.Cell.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Cell::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.Cell.value)
}

// repeated string labels = 3;
int Cell::labels_size() const {
  return labels_.size();
}
void Cell::clear_labels() {
  labels_.Clear();
}
const ::std::string& Cell::labels(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.Cell.labels)
  return labels_.Get(index);
}
::std::string* Cell::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.Cell.labels)
  return labels_.Mutable(index);
}
void Cell::set_labels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.Cell.labels)
  labels_.Mutable(index)->assign(value);
}
void Cell::set_labels(int index, const char* value) {
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.Cell.labels)
}
void Cell::set_labels(int index, const char* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.Cell.labels)
}
::std::string* Cell::add_labels() {
  // @@protoc_insertion_point(field_add_mutable:google.bigtable.v2.Cell.labels)
  return labels_.Add();
}
void Cell::add_labels(const ::std::string& value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.bigtable.v2.Cell.labels)
}
void Cell::add_labels(const char* value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.bigtable.v2.Cell.labels)
}
void Cell::add_labels(const char* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.bigtable.v2.Cell.labels)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Cell::labels() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.Cell.labels)
  return labels_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Cell::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.Cell.labels)
  return &labels_;
}

inline const Cell* Cell::internal_default_instance() {
  return &Cell_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RowRange::kStartKeyClosedFieldNumber;
const int RowRange::kStartKeyOpenFieldNumber;
const int RowRange::kEndKeyOpenFieldNumber;
const int RowRange::kEndKeyClosedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RowRange::RowRange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v2.RowRange)
}

void RowRange::InitAsDefaultInstance() {
  RowRange_default_oneof_instance_->start_key_closed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  RowRange_default_oneof_instance_->start_key_open_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  RowRange_default_oneof_instance_->end_key_open_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  RowRange_default_oneof_instance_->end_key_closed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RowRange::RowRange(const RowRange& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v2.RowRange)
}

void RowRange::SharedCtor() {
  clear_has_start_key();
  clear_has_end_key();
  _cached_size_ = 0;
}

RowRange::~RowRange() {
  // @@protoc_insertion_point(destructor:google.bigtable.v2.RowRange)
  SharedDtor();
}

void RowRange::SharedDtor() {
  if (has_start_key()) {
    clear_start_key();
  }
  if (has_end_key()) {
    clear_end_key();
  }
}

void RowRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RowRange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RowRange_descriptor_;
}

const RowRange& RowRange::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RowRange> RowRange_default_instance_;

RowRange* RowRange::New(::google::protobuf::Arena* arena) const {
  RowRange* n = new RowRange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RowRange::clear_start_key() {
// @@protoc_insertion_point(one_of_clear_start:google.bigtable.v2.RowRange)
  switch (start_key_case()) {
    case kStartKeyClosed: {
      start_key_.start_key_closed_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kStartKeyOpen: {
      start_key_.start_key_open_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case START_KEY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = START_KEY_NOT_SET;
}

void RowRange::clear_end_key() {
// @@protoc_insertion_point(one_of_clear_start:google.bigtable.v2.RowRange)
  switch (end_key_case()) {
    case kEndKeyOpen: {
      end_key_.end_key_open_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kEndKeyClosed: {
      end_key_.end_key_closed_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case END_KEY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = END_KEY_NOT_SET;
}


void RowRange::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v2.RowRange)
  clear_start_key();
  clear_end_key();
}

bool RowRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v2.RowRange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_key_closed = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_key_closed()));
        } else {
          goto handle_unusual;
        }
        goto after_start_key_open;
        break;
      }

      // optional bytes start_key_open = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_key_open()));
        } else {
          goto handle_unusual;
        }
       after_start_key_open:
        if (input->ExpectTag(26)) goto parse_end_key_open;
        break;
      }

      // optional bytes end_key_open = 3;
      case 3: {
        if (tag == 26) {
         parse_end_key_open:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key_open()));
        } else {
          goto handle_unusual;
        }
        goto after_end_key_closed;
        break;
      }

      // optional bytes end_key_closed = 4;
      case 4: {
        if (tag == 34) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key_closed()));
        } else {
          goto handle_unusual;
        }
       after_end_key_closed:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v2.RowRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v2.RowRange)
  return false;
#undef DO_
}

void RowRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v2.RowRange)
  // optional bytes start_key_closed = 1;
  if (has_start_key_closed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_key_closed(), output);
  }

  // optional bytes start_key_open = 2;
  if (has_start_key_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->start_key_open(), output);
  }

  // optional bytes end_key_open = 3;
  if (has_end_key_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->end_key_open(), output);
  }

  // optional bytes end_key_closed = 4;
  if (has_end_key_closed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->end_key_closed(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v2.RowRange)
}

::google::protobuf::uint8* RowRange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v2.RowRange)
  // optional bytes start_key_closed = 1;
  if (has_start_key_closed()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_key_closed(), target);
  }

  // optional bytes start_key_open = 2;
  if (has_start_key_open()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->start_key_open(), target);
  }

  // optional bytes end_key_open = 3;
  if (has_end_key_open()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->end_key_open(), target);
  }

  // optional bytes end_key_closed = 4;
  if (has_end_key_closed()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->end_key_closed(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v2.RowRange)
  return target;
}

size_t RowRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v2.RowRange)
  size_t total_size = 0;

  switch (start_key_case()) {
    // optional bytes start_key_closed = 1;
    case kStartKeyClosed: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_key_closed());
      break;
    }
    // optional bytes start_key_open = 2;
    case kStartKeyOpen: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_key_open());
      break;
    }
    case START_KEY_NOT_SET: {
      break;
    }
  }
  switch (end_key_case()) {
    // optional bytes end_key_open = 3;
    case kEndKeyOpen: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_key_open());
      break;
    }
    // optional bytes end_key_closed = 4;
    case kEndKeyClosed: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_key_closed());
      break;
    }
    case END_KEY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RowRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v2.RowRange)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RowRange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RowRange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v2.RowRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v2.RowRange)
    UnsafeMergeFrom(*source);
  }
}

void RowRange::MergeFrom(const RowRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v2.RowRange)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RowRange::UnsafeMergeFrom(const RowRange& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.start_key_case()) {
    case kStartKeyClosed: {
      set_start_key_closed(from.start_key_closed());
      break;
    }
    case kStartKeyOpen: {
      set_start_key_open(from.start_key_open());
      break;
    }
    case START_KEY_NOT_SET: {
      break;
    }
  }
  switch (from.end_key_case()) {
    case kEndKeyOpen: {
      set_end_key_open(from.end_key_open());
      break;
    }
    case kEndKeyClosed: {
      set_end_key_closed(from.end_key_closed());
      break;
    }
    case END_KEY_NOT_SET: {
      break;
    }
  }
}

void RowRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v2.RowRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RowRange::CopyFrom(const RowRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v2.RowRange)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RowRange::IsInitialized() const {

  return true;
}

void RowRange::Swap(RowRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RowRange::InternalSwap(RowRange* other) {
  std::swap(start_key_, other->start_key_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(end_key_, other->end_key_);
  std::swap(_oneof_case_[1], other->_oneof_case_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RowRange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RowRange_descriptor_;
  metadata.reflection = RowRange_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RowRange

// optional bytes start_key_closed = 1;
bool RowRange::has_start_key_closed() const {
  return start_key_case() == kStartKeyClosed;
}
void RowRange::set_has_start_key_closed() {
  _oneof_case_[0] = kStartKeyClosed;
}
void RowRange::clear_start_key_closed() {
  if (has_start_key_closed()) {
    start_key_.start_key_closed_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_start_key();
  }
}
const ::std::string& RowRange::start_key_closed() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowRange.start_key_closed)
  if (has_start_key_closed()) {
    return start_key_.start_key_closed_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void RowRange::set_start_key_closed(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowRange.start_key_closed)
  if (!has_start_key_closed()) {
    clear_start_key();
    set_has_start_key_closed();
    start_key_.start_key_closed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  start_key_.start_key_closed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowRange.start_key_closed)
}
void RowRange::set_start_key_closed(const char* value) {
  if (!has_start_key_closed()) {
    clear_start_key();
    set_has_start_key_closed();
    start_key_.start_key_closed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  start_key_.start_key_closed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.RowRange.start_key_closed)
}
void RowRange::set_start_key_closed(const void* value, size_t size) {
  if (!has_start_key_closed()) {
    clear_start_key();
    set_has_start_key_closed();
    start_key_.start_key_closed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  start_key_.start_key_closed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.RowRange.start_key_closed)
}
::std::string* RowRange::mutable_start_key_closed() {
  if (!has_start_key_closed()) {
    clear_start_key();
    set_has_start_key_closed();
    start_key_.start_key_closed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowRange.start_key_closed)
  return start_key_.start_key_closed_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RowRange::release_start_key_closed() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.RowRange.start_key_closed)
  if (has_start_key_closed()) {
    clear_has_start_key();
    return start_key_.start_key_closed_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void RowRange::set_allocated_start_key_closed(::std::string* start_key_closed) {
  if (!has_start_key_closed()) {
    start_key_.start_key_closed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_start_key();
  if (start_key_closed != NULL) {
    set_has_start_key_closed();
    start_key_.start_key_closed_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        start_key_closed);
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.RowRange.start_key_closed)
}

// optional bytes start_key_open = 2;
bool RowRange::has_start_key_open() const {
  return start_key_case() == kStartKeyOpen;
}
void RowRange::set_has_start_key_open() {
  _oneof_case_[0] = kStartKeyOpen;
}
void RowRange::clear_start_key_open() {
  if (has_start_key_open()) {
    start_key_.start_key_open_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_start_key();
  }
}
const ::std::string& RowRange::start_key_open() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowRange.start_key_open)
  if (has_start_key_open()) {
    return start_key_.start_key_open_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void RowRange::set_start_key_open(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowRange.start_key_open)
  if (!has_start_key_open()) {
    clear_start_key();
    set_has_start_key_open();
    start_key_.start_key_open_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  start_key_.start_key_open_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowRange.start_key_open)
}
void RowRange::set_start_key_open(const char* value) {
  if (!has_start_key_open()) {
    clear_start_key();
    set_has_start_key_open();
    start_key_.start_key_open_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  start_key_.start_key_open_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.RowRange.start_key_open)
}
void RowRange::set_start_key_open(const void* value, size_t size) {
  if (!has_start_key_open()) {
    clear_start_key();
    set_has_start_key_open();
    start_key_.start_key_open_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  start_key_.start_key_open_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.RowRange.start_key_open)
}
::std::string* RowRange::mutable_start_key_open() {
  if (!has_start_key_open()) {
    clear_start_key();
    set_has_start_key_open();
    start_key_.start_key_open_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowRange.start_key_open)
  return start_key_.start_key_open_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RowRange::release_start_key_open() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.RowRange.start_key_open)
  if (has_start_key_open()) {
    clear_has_start_key();
    return start_key_.start_key_open_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void RowRange::set_allocated_start_key_open(::std::string* start_key_open) {
  if (!has_start_key_open()) {
    start_key_.start_key_open_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_start_key();
  if (start_key_open != NULL) {
    set_has_start_key_open();
    start_key_.start_key_open_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        start_key_open);
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.RowRange.start_key_open)
}

// optional bytes end_key_open = 3;
bool RowRange::has_end_key_open() const {
  return end_key_case() == kEndKeyOpen;
}
void RowRange::set_has_end_key_open() {
  _oneof_case_[1] = kEndKeyOpen;
}
void RowRange::clear_end_key_open() {
  if (has_end_key_open()) {
    end_key_.end_key_open_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_end_key();
  }
}
const ::std::string& RowRange::end_key_open() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowRange.end_key_open)
  if (has_end_key_open()) {
    return end_key_.end_key_open_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void RowRange::set_end_key_open(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowRange.end_key_open)
  if (!has_end_key_open()) {
    clear_end_key();
    set_has_end_key_open();
    end_key_.end_key_open_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  end_key_.end_key_open_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowRange.end_key_open)
}
void RowRange::set_end_key_open(const char* value) {
  if (!has_end_key_open()) {
    clear_end_key();
    set_has_end_key_open();
    end_key_.end_key_open_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  end_key_.end_key_open_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.RowRange.end_key_open)
}
void RowRange::set_end_key_open(const void* value, size_t size) {
  if (!has_end_key_open()) {
    clear_end_key();
    set_has_end_key_open();
    end_key_.end_key_open_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  end_key_.end_key_open_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.RowRange.end_key_open)
}
::std::string* RowRange::mutable_end_key_open() {
  if (!has_end_key_open()) {
    clear_end_key();
    set_has_end_key_open();
    end_key_.end_key_open_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowRange.end_key_open)
  return end_key_.end_key_open_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RowRange::release_end_key_open() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.RowRange.end_key_open)
  if (has_end_key_open()) {
    clear_has_end_key();
    return end_key_.end_key_open_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void RowRange::set_allocated_end_key_open(::std::string* end_key_open) {
  if (!has_end_key_open()) {
    end_key_.end_key_open_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_end_key();
  if (end_key_open != NULL) {
    set_has_end_key_open();
    end_key_.end_key_open_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        end_key_open);
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.RowRange.end_key_open)
}

// optional bytes end_key_closed = 4;
bool RowRange::has_end_key_closed() const {
  return end_key_case() == kEndKeyClosed;
}
void RowRange::set_has_end_key_closed() {
  _oneof_case_[1] = kEndKeyClosed;
}
void RowRange::clear_end_key_closed() {
  if (has_end_key_closed()) {
    end_key_.end_key_closed_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_end_key();
  }
}
const ::std::string& RowRange::end_key_closed() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowRange.end_key_closed)
  if (has_end_key_closed()) {
    return end_key_.end_key_closed_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void RowRange::set_end_key_closed(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowRange.end_key_closed)
  if (!has_end_key_closed()) {
    clear_end_key();
    set_has_end_key_closed();
    end_key_.end_key_closed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  end_key_.end_key_closed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowRange.end_key_closed)
}
void RowRange::set_end_key_closed(const char* value) {
  if (!has_end_key_closed()) {
    clear_end_key();
    set_has_end_key_closed();
    end_key_.end_key_closed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  end_key_.end_key_closed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.RowRange.end_key_closed)
}
void RowRange::set_end_key_closed(const void* value, size_t size) {
  if (!has_end_key_closed()) {
    clear_end_key();
    set_has_end_key_closed();
    end_key_.end_key_closed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  end_key_.end_key_closed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.RowRange.end_key_closed)
}
::std::string* RowRange::mutable_end_key_closed() {
  if (!has_end_key_closed()) {
    clear_end_key();
    set_has_end_key_closed();
    end_key_.end_key_closed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowRange.end_key_closed)
  return end_key_.end_key_closed_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RowRange::release_end_key_closed() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.RowRange.end_key_closed)
  if (has_end_key_closed()) {
    clear_has_end_key();
    return end_key_.end_key_closed_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void RowRange::set_allocated_end_key_closed(::std::string* end_key_closed) {
  if (!has_end_key_closed()) {
    end_key_.end_key_closed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_end_key();
  if (end_key_closed != NULL) {
    set_has_end_key_closed();
    end_key_.end_key_closed_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        end_key_closed);
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.RowRange.end_key_closed)
}

bool RowRange::has_start_key() const {
  return start_key_case() != START_KEY_NOT_SET;
}
void RowRange::clear_has_start_key() {
  _oneof_case_[0] = START_KEY_NOT_SET;
}
bool RowRange::has_end_key() const {
  return end_key_case() != END_KEY_NOT_SET;
}
void RowRange::clear_has_end_key() {
  _oneof_case_[1] = END_KEY_NOT_SET;
}
RowRange::StartKeyCase RowRange::start_key_case() const {
  return RowRange::StartKeyCase(_oneof_case_[0]);
}
RowRange::EndKeyCase RowRange::end_key_case() const {
  return RowRange::EndKeyCase(_oneof_case_[1]);
}
inline const RowRange* RowRange::internal_default_instance() {
  return &RowRange_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RowSet::kRowKeysFieldNumber;
const int RowSet::kRowRangesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RowSet::RowSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v2.RowSet)
}

void RowSet::InitAsDefaultInstance() {
}

RowSet::RowSet(const RowSet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v2.RowSet)
}

void RowSet::SharedCtor() {
  _cached_size_ = 0;
}

RowSet::~RowSet() {
  // @@protoc_insertion_point(destructor:google.bigtable.v2.RowSet)
  SharedDtor();
}

void RowSet::SharedDtor() {
}

void RowSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RowSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RowSet_descriptor_;
}

const RowSet& RowSet::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RowSet> RowSet_default_instance_;

RowSet* RowSet::New(::google::protobuf::Arena* arena) const {
  RowSet* n = new RowSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RowSet::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v2.RowSet)
  row_keys_.Clear();
  row_ranges_.Clear();
}

bool RowSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v2.RowSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes row_keys = 1;
      case 1: {
        if (tag == 10) {
         parse_row_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_row_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_row_keys;
        if (input->ExpectTag(18)) goto parse_row_ranges;
        break;
      }

      // repeated .google.bigtable.v2.RowRange row_ranges = 2;
      case 2: {
        if (tag == 18) {
         parse_row_ranges:
          DO_(input->IncrementRecursionDepth());
         parse_loop_row_ranges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_row_ranges()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_row_ranges;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v2.RowSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v2.RowSet)
  return false;
#undef DO_
}

void RowSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v2.RowSet)
  // repeated bytes row_keys = 1;
  for (int i = 0; i < this->row_keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->row_keys(i), output);
  }

  // repeated .google.bigtable.v2.RowRange row_ranges = 2;
  for (unsigned int i = 0, n = this->row_ranges_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->row_ranges(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v2.RowSet)
}

::google::protobuf::uint8* RowSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v2.RowSet)
  // repeated bytes row_keys = 1;
  for (int i = 0; i < this->row_keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->row_keys(i), target);
  }

  // repeated .google.bigtable.v2.RowRange row_ranges = 2;
  for (unsigned int i = 0, n = this->row_ranges_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->row_ranges(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v2.RowSet)
  return target;
}

size_t RowSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v2.RowSet)
  size_t total_size = 0;

  // repeated bytes row_keys = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->row_keys_size());
  for (int i = 0; i < this->row_keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->row_keys(i));
  }

  // repeated .google.bigtable.v2.RowRange row_ranges = 2;
  {
    unsigned int count = this->row_ranges_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->row_ranges(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RowSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v2.RowSet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RowSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RowSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v2.RowSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v2.RowSet)
    UnsafeMergeFrom(*source);
  }
}

void RowSet::MergeFrom(const RowSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v2.RowSet)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RowSet::UnsafeMergeFrom(const RowSet& from) {
  GOOGLE_DCHECK(&from != this);
  row_keys_.UnsafeMergeFrom(from.row_keys_);
  row_ranges_.MergeFrom(from.row_ranges_);
}

void RowSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v2.RowSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RowSet::CopyFrom(const RowSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v2.RowSet)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RowSet::IsInitialized() const {

  return true;
}

void RowSet::Swap(RowSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RowSet::InternalSwap(RowSet* other) {
  row_keys_.UnsafeArenaSwap(&other->row_keys_);
  row_ranges_.UnsafeArenaSwap(&other->row_ranges_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RowSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RowSet_descriptor_;
  metadata.reflection = RowSet_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RowSet

// repeated bytes row_keys = 1;
int RowSet::row_keys_size() const {
  return row_keys_.size();
}
void RowSet::clear_row_keys() {
  row_keys_.Clear();
}
const ::std::string& RowSet::row_keys(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowSet.row_keys)
  return row_keys_.Get(index);
}
::std::string* RowSet::mutable_row_keys(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowSet.row_keys)
  return row_keys_.Mutable(index);
}
void RowSet::set_row_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowSet.row_keys)
  row_keys_.Mutable(index)->assign(value);
}
void RowSet::set_row_keys(int index, const char* value) {
  row_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.RowSet.row_keys)
}
void RowSet::set_row_keys(int index, const void* value, size_t size) {
  row_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.RowSet.row_keys)
}
::std::string* RowSet::add_row_keys() {
  // @@protoc_insertion_point(field_add_mutable:google.bigtable.v2.RowSet.row_keys)
  return row_keys_.Add();
}
void RowSet::add_row_keys(const ::std::string& value) {
  row_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.bigtable.v2.RowSet.row_keys)
}
void RowSet::add_row_keys(const char* value) {
  row_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.bigtable.v2.RowSet.row_keys)
}
void RowSet::add_row_keys(const void* value, size_t size) {
  row_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.bigtable.v2.RowSet.row_keys)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
RowSet::row_keys() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.RowSet.row_keys)
  return row_keys_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
RowSet::mutable_row_keys() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.RowSet.row_keys)
  return &row_keys_;
}

// repeated .google.bigtable.v2.RowRange row_ranges = 2;
int RowSet::row_ranges_size() const {
  return row_ranges_.size();
}
void RowSet::clear_row_ranges() {
  row_ranges_.Clear();
}
const ::google::bigtable::v2::RowRange& RowSet::row_ranges(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowSet.row_ranges)
  return row_ranges_.Get(index);
}
::google::bigtable::v2::RowRange* RowSet::mutable_row_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowSet.row_ranges)
  return row_ranges_.Mutable(index);
}
::google::bigtable::v2::RowRange* RowSet::add_row_ranges() {
  // @@protoc_insertion_point(field_add:google.bigtable.v2.RowSet.row_ranges)
  return row_ranges_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::RowRange >*
RowSet::mutable_row_ranges() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.RowSet.row_ranges)
  return &row_ranges_;
}
const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::RowRange >&
RowSet::row_ranges() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.RowSet.row_ranges)
  return row_ranges_;
}

inline const RowSet* RowSet::internal_default_instance() {
  return &RowSet_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ColumnRange::kFamilyNameFieldNumber;
const int ColumnRange::kStartQualifierClosedFieldNumber;
const int ColumnRange::kStartQualifierOpenFieldNumber;
const int ColumnRange::kEndQualifierClosedFieldNumber;
const int ColumnRange::kEndQualifierOpenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ColumnRange::ColumnRange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v2.ColumnRange)
}

void ColumnRange::InitAsDefaultInstance() {
  ColumnRange_default_oneof_instance_->start_qualifier_closed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ColumnRange_default_oneof_instance_->start_qualifier_open_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ColumnRange_default_oneof_instance_->end_qualifier_closed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ColumnRange_default_oneof_instance_->end_qualifier_open_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ColumnRange::ColumnRange(const ColumnRange& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v2.ColumnRange)
}

void ColumnRange::SharedCtor() {
  family_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_start_qualifier();
  clear_has_end_qualifier();
  _cached_size_ = 0;
}

ColumnRange::~ColumnRange() {
  // @@protoc_insertion_point(destructor:google.bigtable.v2.ColumnRange)
  SharedDtor();
}

void ColumnRange::SharedDtor() {
  family_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_start_qualifier()) {
    clear_start_qualifier();
  }
  if (has_end_qualifier()) {
    clear_end_qualifier();
  }
}

void ColumnRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColumnRange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColumnRange_descriptor_;
}

const ColumnRange& ColumnRange::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ColumnRange> ColumnRange_default_instance_;

ColumnRange* ColumnRange::New(::google::protobuf::Arena* arena) const {
  ColumnRange* n = new ColumnRange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ColumnRange::clear_start_qualifier() {
// @@protoc_insertion_point(one_of_clear_start:google.bigtable.v2.ColumnRange)
  switch (start_qualifier_case()) {
    case kStartQualifierClosed: {
      start_qualifier_.start_qualifier_closed_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kStartQualifierOpen: {
      start_qualifier_.start_qualifier_open_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case START_QUALIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = START_QUALIFIER_NOT_SET;
}

void ColumnRange::clear_end_qualifier() {
// @@protoc_insertion_point(one_of_clear_start:google.bigtable.v2.ColumnRange)
  switch (end_qualifier_case()) {
    case kEndQualifierClosed: {
      end_qualifier_.end_qualifier_closed_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kEndQualifierOpen: {
      end_qualifier_.end_qualifier_open_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case END_QUALIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = END_QUALIFIER_NOT_SET;
}


void ColumnRange::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v2.ColumnRange)
  family_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_start_qualifier();
  clear_end_qualifier();
}

bool ColumnRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v2.ColumnRange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string family_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_family_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->family_name().data(), this->family_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.v2.ColumnRange.family_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_start_qualifier_closed;
        break;
      }

      // optional bytes start_qualifier_closed = 2;
      case 2: {
        if (tag == 18) {
         parse_start_qualifier_closed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_qualifier_closed()));
        } else {
          goto handle_unusual;
        }
        goto after_start_qualifier_open;
        break;
      }

      // optional bytes start_qualifier_open = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_qualifier_open()));
        } else {
          goto handle_unusual;
        }
       after_start_qualifier_open:
        if (input->ExpectTag(34)) goto parse_end_qualifier_closed;
        break;
      }

      // optional bytes end_qualifier_closed = 4;
      case 4: {
        if (tag == 34) {
         parse_end_qualifier_closed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_qualifier_closed()));
        } else {
          goto handle_unusual;
        }
        goto after_end_qualifier_open;
        break;
      }

      // optional bytes end_qualifier_open = 5;
      case 5: {
        if (tag == 42) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_qualifier_open()));
        } else {
          goto handle_unusual;
        }
       after_end_qualifier_open:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v2.ColumnRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v2.ColumnRange)
  return false;
#undef DO_
}

void ColumnRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v2.ColumnRange)
  // optional string family_name = 1;
  if (this->family_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v2.ColumnRange.family_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->family_name(), output);
  }

  // optional bytes start_qualifier_closed = 2;
  if (has_start_qualifier_closed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->start_qualifier_closed(), output);
  }

  // optional bytes start_qualifier_open = 3;
  if (has_start_qualifier_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->start_qualifier_open(), output);
  }

  // optional bytes end_qualifier_closed = 4;
  if (has_end_qualifier_closed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->end_qualifier_closed(), output);
  }

  // optional bytes end_qualifier_open = 5;
  if (has_end_qualifier_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->end_qualifier_open(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v2.ColumnRange)
}

::google::protobuf::uint8* ColumnRange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v2.ColumnRange)
  // optional string family_name = 1;
  if (this->family_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v2.ColumnRange.family_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->family_name(), target);
  }

  // optional bytes start_qualifier_closed = 2;
  if (has_start_qualifier_closed()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->start_qualifier_closed(), target);
  }

  // optional bytes start_qualifier_open = 3;
  if (has_start_qualifier_open()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->start_qualifier_open(), target);
  }

  // optional bytes end_qualifier_closed = 4;
  if (has_end_qualifier_closed()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->end_qualifier_closed(), target);
  }

  // optional bytes end_qualifier_open = 5;
  if (has_end_qualifier_open()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->end_qualifier_open(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v2.ColumnRange)
  return target;
}

size_t ColumnRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v2.ColumnRange)
  size_t total_size = 0;

  // optional string family_name = 1;
  if (this->family_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->family_name());
  }

  switch (start_qualifier_case()) {
    // optional bytes start_qualifier_closed = 2;
    case kStartQualifierClosed: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_qualifier_closed());
      break;
    }
    // optional bytes start_qualifier_open = 3;
    case kStartQualifierOpen: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_qualifier_open());
      break;
    }
    case START_QUALIFIER_NOT_SET: {
      break;
    }
  }
  switch (end_qualifier_case()) {
    // optional bytes end_qualifier_closed = 4;
    case kEndQualifierClosed: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_qualifier_closed());
      break;
    }
    // optional bytes end_qualifier_open = 5;
    case kEndQualifierOpen: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_qualifier_open());
      break;
    }
    case END_QUALIFIER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColumnRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v2.ColumnRange)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ColumnRange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ColumnRange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v2.ColumnRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v2.ColumnRange)
    UnsafeMergeFrom(*source);
  }
}

void ColumnRange::MergeFrom(const ColumnRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v2.ColumnRange)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ColumnRange::UnsafeMergeFrom(const ColumnRange& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.start_qualifier_case()) {
    case kStartQualifierClosed: {
      set_start_qualifier_closed(from.start_qualifier_closed());
      break;
    }
    case kStartQualifierOpen: {
      set_start_qualifier_open(from.start_qualifier_open());
      break;
    }
    case START_QUALIFIER_NOT_SET: {
      break;
    }
  }
  switch (from.end_qualifier_case()) {
    case kEndQualifierClosed: {
      set_end_qualifier_closed(from.end_qualifier_closed());
      break;
    }
    case kEndQualifierOpen: {
      set_end_qualifier_open(from.end_qualifier_open());
      break;
    }
    case END_QUALIFIER_NOT_SET: {
      break;
    }
  }
  if (from.family_name().size() > 0) {

    family_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.family_name_);
  }
}

void ColumnRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v2.ColumnRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnRange::CopyFrom(const ColumnRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v2.ColumnRange)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ColumnRange::IsInitialized() const {

  return true;
}

void ColumnRange::Swap(ColumnRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ColumnRange::InternalSwap(ColumnRange* other) {
  family_name_.Swap(&other->family_name_);
  std::swap(start_qualifier_, other->start_qualifier_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(end_qualifier_, other->end_qualifier_);
  std::swap(_oneof_case_[1], other->_oneof_case_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ColumnRange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColumnRange_descriptor_;
  metadata.reflection = ColumnRange_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ColumnRange

// optional string family_name = 1;
void ColumnRange::clear_family_name() {
  family_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ColumnRange::family_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ColumnRange.family_name)
  return family_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ColumnRange::set_family_name(const ::std::string& value) {
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ColumnRange.family_name)
}
void ColumnRange::set_family_name(const char* value) {
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ColumnRange.family_name)
}
void ColumnRange::set_family_name(const char* value, size_t size) {
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ColumnRange.family_name)
}
::std::string* ColumnRange::mutable_family_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ColumnRange.family_name)
  return family_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ColumnRange::release_family_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ColumnRange.family_name)
  
  return family_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ColumnRange::set_allocated_family_name(::std::string* family_name) {
  if (family_name != NULL) {
    
  } else {
    
  }
  family_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), family_name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ColumnRange.family_name)
}

// optional bytes start_qualifier_closed = 2;
bool ColumnRange::has_start_qualifier_closed() const {
  return start_qualifier_case() == kStartQualifierClosed;
}
void ColumnRange::set_has_start_qualifier_closed() {
  _oneof_case_[0] = kStartQualifierClosed;
}
void ColumnRange::clear_start_qualifier_closed() {
  if (has_start_qualifier_closed()) {
    start_qualifier_.start_qualifier_closed_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_start_qualifier();
  }
}
const ::std::string& ColumnRange::start_qualifier_closed() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ColumnRange.start_qualifier_closed)
  if (has_start_qualifier_closed()) {
    return start_qualifier_.start_qualifier_closed_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void ColumnRange::set_start_qualifier_closed(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ColumnRange.start_qualifier_closed)
  if (!has_start_qualifier_closed()) {
    clear_start_qualifier();
    set_has_start_qualifier_closed();
    start_qualifier_.start_qualifier_closed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  start_qualifier_.start_qualifier_closed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ColumnRange.start_qualifier_closed)
}
void ColumnRange::set_start_qualifier_closed(const char* value) {
  if (!has_start_qualifier_closed()) {
    clear_start_qualifier();
    set_has_start_qualifier_closed();
    start_qualifier_.start_qualifier_closed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  start_qualifier_.start_qualifier_closed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ColumnRange.start_qualifier_closed)
}
void ColumnRange::set_start_qualifier_closed(const void* value, size_t size) {
  if (!has_start_qualifier_closed()) {
    clear_start_qualifier();
    set_has_start_qualifier_closed();
    start_qualifier_.start_qualifier_closed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  start_qualifier_.start_qualifier_closed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ColumnRange.start_qualifier_closed)
}
::std::string* ColumnRange::mutable_start_qualifier_closed() {
  if (!has_start_qualifier_closed()) {
    clear_start_qualifier();
    set_has_start_qualifier_closed();
    start_qualifier_.start_qualifier_closed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ColumnRange.start_qualifier_closed)
  return start_qualifier_.start_qualifier_closed_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ColumnRange::release_start_qualifier_closed() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ColumnRange.start_qualifier_closed)
  if (has_start_qualifier_closed()) {
    clear_has_start_qualifier();
    return start_qualifier_.start_qualifier_closed_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void ColumnRange::set_allocated_start_qualifier_closed(::std::string* start_qualifier_closed) {
  if (!has_start_qualifier_closed()) {
    start_qualifier_.start_qualifier_closed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_start_qualifier();
  if (start_qualifier_closed != NULL) {
    set_has_start_qualifier_closed();
    start_qualifier_.start_qualifier_closed_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        start_qualifier_closed);
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ColumnRange.start_qualifier_closed)
}

// optional bytes start_qualifier_open = 3;
bool ColumnRange::has_start_qualifier_open() const {
  return start_qualifier_case() == kStartQualifierOpen;
}
void ColumnRange::set_has_start_qualifier_open() {
  _oneof_case_[0] = kStartQualifierOpen;
}
void ColumnRange::clear_start_qualifier_open() {
  if (has_start_qualifier_open()) {
    start_qualifier_.start_qualifier_open_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_start_qualifier();
  }
}
const ::std::string& ColumnRange::start_qualifier_open() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ColumnRange.start_qualifier_open)
  if (has_start_qualifier_open()) {
    return start_qualifier_.start_qualifier_open_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void ColumnRange::set_start_qualifier_open(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ColumnRange.start_qualifier_open)
  if (!has_start_qualifier_open()) {
    clear_start_qualifier();
    set_has_start_qualifier_open();
    start_qualifier_.start_qualifier_open_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  start_qualifier_.start_qualifier_open_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ColumnRange.start_qualifier_open)
}
void ColumnRange::set_start_qualifier_open(const char* value) {
  if (!has_start_qualifier_open()) {
    clear_start_qualifier();
    set_has_start_qualifier_open();
    start_qualifier_.start_qualifier_open_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  start_qualifier_.start_qualifier_open_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ColumnRange.start_qualifier_open)
}
void ColumnRange::set_start_qualifier_open(const void* value, size_t size) {
  if (!has_start_qualifier_open()) {
    clear_start_qualifier();
    set_has_start_qualifier_open();
    start_qualifier_.start_qualifier_open_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  start_qualifier_.start_qualifier_open_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ColumnRange.start_qualifier_open)
}
::std::string* ColumnRange::mutable_start_qualifier_open() {
  if (!has_start_qualifier_open()) {
    clear_start_qualifier();
    set_has_start_qualifier_open();
    start_qualifier_.start_qualifier_open_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ColumnRange.start_qualifier_open)
  return start_qualifier_.start_qualifier_open_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ColumnRange::release_start_qualifier_open() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ColumnRange.start_qualifier_open)
  if (has_start_qualifier_open()) {
    clear_has_start_qualifier();
    return start_qualifier_.start_qualifier_open_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void ColumnRange::set_allocated_start_qualifier_open(::std::string* start_qualifier_open) {
  if (!has_start_qualifier_open()) {
    start_qualifier_.start_qualifier_open_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_start_qualifier();
  if (start_qualifier_open != NULL) {
    set_has_start_qualifier_open();
    start_qualifier_.start_qualifier_open_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        start_qualifier_open);
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ColumnRange.start_qualifier_open)
}

// optional bytes end_qualifier_closed = 4;
bool ColumnRange::has_end_qualifier_closed() const {
  return end_qualifier_case() == kEndQualifierClosed;
}
void ColumnRange::set_has_end_qualifier_closed() {
  _oneof_case_[1] = kEndQualifierClosed;
}
void ColumnRange::clear_end_qualifier_closed() {
  if (has_end_qualifier_closed()) {
    end_qualifier_.end_qualifier_closed_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_end_qualifier();
  }
}
const ::std::string& ColumnRange::end_qualifier_closed() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ColumnRange.end_qualifier_closed)
  if (has_end_qualifier_closed()) {
    return end_qualifier_.end_qualifier_closed_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void ColumnRange::set_end_qualifier_closed(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ColumnRange.end_qualifier_closed)
  if (!has_end_qualifier_closed()) {
    clear_end_qualifier();
    set_has_end_qualifier_closed();
    end_qualifier_.end_qualifier_closed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  end_qualifier_.end_qualifier_closed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ColumnRange.end_qualifier_closed)
}
void ColumnRange::set_end_qualifier_closed(const char* value) {
  if (!has_end_qualifier_closed()) {
    clear_end_qualifier();
    set_has_end_qualifier_closed();
    end_qualifier_.end_qualifier_closed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  end_qualifier_.end_qualifier_closed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ColumnRange.end_qualifier_closed)
}
void ColumnRange::set_end_qualifier_closed(const void* value, size_t size) {
  if (!has_end_qualifier_closed()) {
    clear_end_qualifier();
    set_has_end_qualifier_closed();
    end_qualifier_.end_qualifier_closed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  end_qualifier_.end_qualifier_closed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ColumnRange.end_qualifier_closed)
}
::std::string* ColumnRange::mutable_end_qualifier_closed() {
  if (!has_end_qualifier_closed()) {
    clear_end_qualifier();
    set_has_end_qualifier_closed();
    end_qualifier_.end_qualifier_closed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ColumnRange.end_qualifier_closed)
  return end_qualifier_.end_qualifier_closed_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ColumnRange::release_end_qualifier_closed() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ColumnRange.end_qualifier_closed)
  if (has_end_qualifier_closed()) {
    clear_has_end_qualifier();
    return end_qualifier_.end_qualifier_closed_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void ColumnRange::set_allocated_end_qualifier_closed(::std::string* end_qualifier_closed) {
  if (!has_end_qualifier_closed()) {
    end_qualifier_.end_qualifier_closed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_end_qualifier();
  if (end_qualifier_closed != NULL) {
    set_has_end_qualifier_closed();
    end_qualifier_.end_qualifier_closed_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        end_qualifier_closed);
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ColumnRange.end_qualifier_closed)
}

// optional bytes end_qualifier_open = 5;
bool ColumnRange::has_end_qualifier_open() const {
  return end_qualifier_case() == kEndQualifierOpen;
}
void ColumnRange::set_has_end_qualifier_open() {
  _oneof_case_[1] = kEndQualifierOpen;
}
void ColumnRange::clear_end_qualifier_open() {
  if (has_end_qualifier_open()) {
    end_qualifier_.end_qualifier_open_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_end_qualifier();
  }
}
const ::std::string& ColumnRange::end_qualifier_open() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ColumnRange.end_qualifier_open)
  if (has_end_qualifier_open()) {
    return end_qualifier_.end_qualifier_open_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void ColumnRange::set_end_qualifier_open(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ColumnRange.end_qualifier_open)
  if (!has_end_qualifier_open()) {
    clear_end_qualifier();
    set_has_end_qualifier_open();
    end_qualifier_.end_qualifier_open_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  end_qualifier_.end_qualifier_open_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ColumnRange.end_qualifier_open)
}
void ColumnRange::set_end_qualifier_open(const char* value) {
  if (!has_end_qualifier_open()) {
    clear_end_qualifier();
    set_has_end_qualifier_open();
    end_qualifier_.end_qualifier_open_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  end_qualifier_.end_qualifier_open_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ColumnRange.end_qualifier_open)
}
void ColumnRange::set_end_qualifier_open(const void* value, size_t size) {
  if (!has_end_qualifier_open()) {
    clear_end_qualifier();
    set_has_end_qualifier_open();
    end_qualifier_.end_qualifier_open_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  end_qualifier_.end_qualifier_open_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ColumnRange.end_qualifier_open)
}
::std::string* ColumnRange::mutable_end_qualifier_open() {
  if (!has_end_qualifier_open()) {
    clear_end_qualifier();
    set_has_end_qualifier_open();
    end_qualifier_.end_qualifier_open_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ColumnRange.end_qualifier_open)
  return end_qualifier_.end_qualifier_open_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ColumnRange::release_end_qualifier_open() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ColumnRange.end_qualifier_open)
  if (has_end_qualifier_open()) {
    clear_has_end_qualifier();
    return end_qualifier_.end_qualifier_open_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void ColumnRange::set_allocated_end_qualifier_open(::std::string* end_qualifier_open) {
  if (!has_end_qualifier_open()) {
    end_qualifier_.end_qualifier_open_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_end_qualifier();
  if (end_qualifier_open != NULL) {
    set_has_end_qualifier_open();
    end_qualifier_.end_qualifier_open_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        end_qualifier_open);
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ColumnRange.end_qualifier_open)
}

bool ColumnRange::has_start_qualifier() const {
  return start_qualifier_case() != START_QUALIFIER_NOT_SET;
}
void ColumnRange::clear_has_start_qualifier() {
  _oneof_case_[0] = START_QUALIFIER_NOT_SET;
}
bool ColumnRange::has_end_qualifier() const {
  return end_qualifier_case() != END_QUALIFIER_NOT_SET;
}
void ColumnRange::clear_has_end_qualifier() {
  _oneof_case_[1] = END_QUALIFIER_NOT_SET;
}
ColumnRange::StartQualifierCase ColumnRange::start_qualifier_case() const {
  return ColumnRange::StartQualifierCase(_oneof_case_[0]);
}
ColumnRange::EndQualifierCase ColumnRange::end_qualifier_case() const {
  return ColumnRange::EndQualifierCase(_oneof_case_[1]);
}
inline const ColumnRange* ColumnRange::internal_default_instance() {
  return &ColumnRange_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimestampRange::kStartTimestampMicrosFieldNumber;
const int TimestampRange::kEndTimestampMicrosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimestampRange::TimestampRange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v2.TimestampRange)
}

void TimestampRange::InitAsDefaultInstance() {
}

TimestampRange::TimestampRange(const TimestampRange& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v2.TimestampRange)
}

void TimestampRange::SharedCtor() {
  ::memset(&start_timestamp_micros_, 0, reinterpret_cast<char*>(&end_timestamp_micros_) -
    reinterpret_cast<char*>(&start_timestamp_micros_) + sizeof(end_timestamp_micros_));
  _cached_size_ = 0;
}

TimestampRange::~TimestampRange() {
  // @@protoc_insertion_point(destructor:google.bigtable.v2.TimestampRange)
  SharedDtor();
}

void TimestampRange::SharedDtor() {
}

void TimestampRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimestampRange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimestampRange_descriptor_;
}

const TimestampRange& TimestampRange::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TimestampRange> TimestampRange_default_instance_;

TimestampRange* TimestampRange::New(::google::protobuf::Arena* arena) const {
  TimestampRange* n = new TimestampRange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimestampRange::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v2.TimestampRange)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TimestampRange, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TimestampRange*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(start_timestamp_micros_, end_timestamp_micros_);

#undef ZR_HELPER_
#undef ZR_

}

bool TimestampRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v2.TimestampRange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 start_timestamp_micros = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_timestamp_micros_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_end_timestamp_micros;
        break;
      }

      // optional int64 end_timestamp_micros = 2;
      case 2: {
        if (tag == 16) {
         parse_end_timestamp_micros:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_timestamp_micros_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v2.TimestampRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v2.TimestampRange)
  return false;
#undef DO_
}

void TimestampRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v2.TimestampRange)
  // optional int64 start_timestamp_micros = 1;
  if (this->start_timestamp_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->start_timestamp_micros(), output);
  }

  // optional int64 end_timestamp_micros = 2;
  if (this->end_timestamp_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->end_timestamp_micros(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v2.TimestampRange)
}

::google::protobuf::uint8* TimestampRange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v2.TimestampRange)
  // optional int64 start_timestamp_micros = 1;
  if (this->start_timestamp_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->start_timestamp_micros(), target);
  }

  // optional int64 end_timestamp_micros = 2;
  if (this->end_timestamp_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->end_timestamp_micros(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v2.TimestampRange)
  return target;
}

size_t TimestampRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v2.TimestampRange)
  size_t total_size = 0;

  // optional int64 start_timestamp_micros = 1;
  if (this->start_timestamp_micros() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start_timestamp_micros());
  }

  // optional int64 end_timestamp_micros = 2;
  if (this->end_timestamp_micros() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end_timestamp_micros());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimestampRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v2.TimestampRange)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TimestampRange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimestampRange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v2.TimestampRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v2.TimestampRange)
    UnsafeMergeFrom(*source);
  }
}

void TimestampRange::MergeFrom(const TimestampRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v2.TimestampRange)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TimestampRange::UnsafeMergeFrom(const TimestampRange& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.start_timestamp_micros() != 0) {
    set_start_timestamp_micros(from.start_timestamp_micros());
  }
  if (from.end_timestamp_micros() != 0) {
    set_end_timestamp_micros(from.end_timestamp_micros());
  }
}

void TimestampRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v2.TimestampRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimestampRange::CopyFrom(const TimestampRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v2.TimestampRange)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TimestampRange::IsInitialized() const {

  return true;
}

void TimestampRange::Swap(TimestampRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimestampRange::InternalSwap(TimestampRange* other) {
  std::swap(start_timestamp_micros_, other->start_timestamp_micros_);
  std::swap(end_timestamp_micros_, other->end_timestamp_micros_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimestampRange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimestampRange_descriptor_;
  metadata.reflection = TimestampRange_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimestampRange

// optional int64 start_timestamp_micros = 1;
void TimestampRange::clear_start_timestamp_micros() {
  start_timestamp_micros_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TimestampRange::start_timestamp_micros() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.TimestampRange.start_timestamp_micros)
  return start_timestamp_micros_;
}
void TimestampRange::set_start_timestamp_micros(::google::protobuf::int64 value) {
  
  start_timestamp_micros_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v2.TimestampRange.start_timestamp_micros)
}

// optional int64 end_timestamp_micros = 2;
void TimestampRange::clear_end_timestamp_micros() {
  end_timestamp_micros_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TimestampRange::end_timestamp_micros() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.TimestampRange.end_timestamp_micros)
  return end_timestamp_micros_;
}
void TimestampRange::set_end_timestamp_micros(::google::protobuf::int64 value) {
  
  end_timestamp_micros_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v2.TimestampRange.end_timestamp_micros)
}

inline const TimestampRange* TimestampRange::internal_default_instance() {
  return &TimestampRange_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ValueRange::kStartValueClosedFieldNumber;
const int ValueRange::kStartValueOpenFieldNumber;
const int ValueRange::kEndValueClosedFieldNumber;
const int ValueRange::kEndValueOpenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ValueRange::ValueRange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v2.ValueRange)
}

void ValueRange::InitAsDefaultInstance() {
  ValueRange_default_oneof_instance_->start_value_closed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ValueRange_default_oneof_instance_->start_value_open_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ValueRange_default_oneof_instance_->end_value_closed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ValueRange_default_oneof_instance_->end_value_open_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ValueRange::ValueRange(const ValueRange& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v2.ValueRange)
}

void ValueRange::SharedCtor() {
  clear_has_start_value();
  clear_has_end_value();
  _cached_size_ = 0;
}

ValueRange::~ValueRange() {
  // @@protoc_insertion_point(destructor:google.bigtable.v2.ValueRange)
  SharedDtor();
}

void ValueRange::SharedDtor() {
  if (has_start_value()) {
    clear_start_value();
  }
  if (has_end_value()) {
    clear_end_value();
  }
}

void ValueRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ValueRange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ValueRange_descriptor_;
}

const ValueRange& ValueRange::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ValueRange> ValueRange_default_instance_;

ValueRange* ValueRange::New(::google::protobuf::Arena* arena) const {
  ValueRange* n = new ValueRange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ValueRange::clear_start_value() {
// @@protoc_insertion_point(one_of_clear_start:google.bigtable.v2.ValueRange)
  switch (start_value_case()) {
    case kStartValueClosed: {
      start_value_.start_value_closed_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kStartValueOpen: {
      start_value_.start_value_open_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case START_VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = START_VALUE_NOT_SET;
}

void ValueRange::clear_end_value() {
// @@protoc_insertion_point(one_of_clear_start:google.bigtable.v2.ValueRange)
  switch (end_value_case()) {
    case kEndValueClosed: {
      end_value_.end_value_closed_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kEndValueOpen: {
      end_value_.end_value_open_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case END_VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = END_VALUE_NOT_SET;
}


void ValueRange::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v2.ValueRange)
  clear_start_value();
  clear_end_value();
}

bool ValueRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v2.ValueRange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_value_closed = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_value_closed()));
        } else {
          goto handle_unusual;
        }
        goto after_start_value_open;
        break;
      }

      // optional bytes start_value_open = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_value_open()));
        } else {
          goto handle_unusual;
        }
       after_start_value_open:
        if (input->ExpectTag(26)) goto parse_end_value_closed;
        break;
      }

      // optional bytes end_value_closed = 3;
      case 3: {
        if (tag == 26) {
         parse_end_value_closed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_value_closed()));
        } else {
          goto handle_unusual;
        }
        goto after_end_value_open;
        break;
      }

      // optional bytes end_value_open = 4;
      case 4: {
        if (tag == 34) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_value_open()));
        } else {
          goto handle_unusual;
        }
       after_end_value_open:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v2.ValueRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v2.ValueRange)
  return false;
#undef DO_
}

void ValueRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v2.ValueRange)
  // optional bytes start_value_closed = 1;
  if (has_start_value_closed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_value_closed(), output);
  }

  // optional bytes start_value_open = 2;
  if (has_start_value_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->start_value_open(), output);
  }

  // optional bytes end_value_closed = 3;
  if (has_end_value_closed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->end_value_closed(), output);
  }

  // optional bytes end_value_open = 4;
  if (has_end_value_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->end_value_open(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v2.ValueRange)
}

::google::protobuf::uint8* ValueRange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v2.ValueRange)
  // optional bytes start_value_closed = 1;
  if (has_start_value_closed()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_value_closed(), target);
  }

  // optional bytes start_value_open = 2;
  if (has_start_value_open()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->start_value_open(), target);
  }

  // optional bytes end_value_closed = 3;
  if (has_end_value_closed()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->end_value_closed(), target);
  }

  // optional bytes end_value_open = 4;
  if (has_end_value_open()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->end_value_open(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v2.ValueRange)
  return target;
}

size_t ValueRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v2.ValueRange)
  size_t total_size = 0;

  switch (start_value_case()) {
    // optional bytes start_value_closed = 1;
    case kStartValueClosed: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_value_closed());
      break;
    }
    // optional bytes start_value_open = 2;
    case kStartValueOpen: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_value_open());
      break;
    }
    case START_VALUE_NOT_SET: {
      break;
    }
  }
  switch (end_value_case()) {
    // optional bytes end_value_closed = 3;
    case kEndValueClosed: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_value_closed());
      break;
    }
    // optional bytes end_value_open = 4;
    case kEndValueOpen: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_value_open());
      break;
    }
    case END_VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ValueRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v2.ValueRange)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ValueRange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ValueRange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v2.ValueRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v2.ValueRange)
    UnsafeMergeFrom(*source);
  }
}

void ValueRange::MergeFrom(const ValueRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v2.ValueRange)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ValueRange::UnsafeMergeFrom(const ValueRange& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.start_value_case()) {
    case kStartValueClosed: {
      set_start_value_closed(from.start_value_closed());
      break;
    }
    case kStartValueOpen: {
      set_start_value_open(from.start_value_open());
      break;
    }
    case START_VALUE_NOT_SET: {
      break;
    }
  }
  switch (from.end_value_case()) {
    case kEndValueClosed: {
      set_end_value_closed(from.end_value_closed());
      break;
    }
    case kEndValueOpen: {
      set_end_value_open(from.end_value_open());
      break;
    }
    case END_VALUE_NOT_SET: {
      break;
    }
  }
}

void ValueRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v2.ValueRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValueRange::CopyFrom(const ValueRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v2.ValueRange)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ValueRange::IsInitialized() const {

  return true;
}

void ValueRange::Swap(ValueRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ValueRange::InternalSwap(ValueRange* other) {
  std::swap(start_value_, other->start_value_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(end_value_, other->end_value_);
  std::swap(_oneof_case_[1], other->_oneof_case_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ValueRange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ValueRange_descriptor_;
  metadata.reflection = ValueRange_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ValueRange

// optional bytes start_value_closed = 1;
bool ValueRange::has_start_value_closed() const {
  return start_value_case() == kStartValueClosed;
}
void ValueRange::set_has_start_value_closed() {
  _oneof_case_[0] = kStartValueClosed;
}
void ValueRange::clear_start_value_closed() {
  if (has_start_value_closed()) {
    start_value_.start_value_closed_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_start_value();
  }
}
const ::std::string& ValueRange::start_value_closed() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ValueRange.start_value_closed)
  if (has_start_value_closed()) {
    return start_value_.start_value_closed_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void ValueRange::set_start_value_closed(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ValueRange.start_value_closed)
  if (!has_start_value_closed()) {
    clear_start_value();
    set_has_start_value_closed();
    start_value_.start_value_closed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  start_value_.start_value_closed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ValueRange.start_value_closed)
}
void ValueRange::set_start_value_closed(const char* value) {
  if (!has_start_value_closed()) {
    clear_start_value();
    set_has_start_value_closed();
    start_value_.start_value_closed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  start_value_.start_value_closed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ValueRange.start_value_closed)
}
void ValueRange::set_start_value_closed(const void* value, size_t size) {
  if (!has_start_value_closed()) {
    clear_start_value();
    set_has_start_value_closed();
    start_value_.start_value_closed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  start_value_.start_value_closed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ValueRange.start_value_closed)
}
::std::string* ValueRange::mutable_start_value_closed() {
  if (!has_start_value_closed()) {
    clear_start_value();
    set_has_start_value_closed();
    start_value_.start_value_closed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ValueRange.start_value_closed)
  return start_value_.start_value_closed_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ValueRange::release_start_value_closed() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ValueRange.start_value_closed)
  if (has_start_value_closed()) {
    clear_has_start_value();
    return start_value_.start_value_closed_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void ValueRange::set_allocated_start_value_closed(::std::string* start_value_closed) {
  if (!has_start_value_closed()) {
    start_value_.start_value_closed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_start_value();
  if (start_value_closed != NULL) {
    set_has_start_value_closed();
    start_value_.start_value_closed_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        start_value_closed);
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ValueRange.start_value_closed)
}

// optional bytes start_value_open = 2;
bool ValueRange::has_start_value_open() const {
  return start_value_case() == kStartValueOpen;
}
void ValueRange::set_has_start_value_open() {
  _oneof_case_[0] = kStartValueOpen;
}
void ValueRange::clear_start_value_open() {
  if (has_start_value_open()) {
    start_value_.start_value_open_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_start_value();
  }
}
const ::std::string& ValueRange::start_value_open() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ValueRange.start_value_open)
  if (has_start_value_open()) {
    return start_value_.start_value_open_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void ValueRange::set_start_value_open(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ValueRange.start_value_open)
  if (!has_start_value_open()) {
    clear_start_value();
    set_has_start_value_open();
    start_value_.start_value_open_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  start_value_.start_value_open_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ValueRange.start_value_open)
}
void ValueRange::set_start_value_open(const char* value) {
  if (!has_start_value_open()) {
    clear_start_value();
    set_has_start_value_open();
    start_value_.start_value_open_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  start_value_.start_value_open_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ValueRange.start_value_open)
}
void ValueRange::set_start_value_open(const void* value, size_t size) {
  if (!has_start_value_open()) {
    clear_start_value();
    set_has_start_value_open();
    start_value_.start_value_open_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  start_value_.start_value_open_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ValueRange.start_value_open)
}
::std::string* ValueRange::mutable_start_value_open() {
  if (!has_start_value_open()) {
    clear_start_value();
    set_has_start_value_open();
    start_value_.start_value_open_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ValueRange.start_value_open)
  return start_value_.start_value_open_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ValueRange::release_start_value_open() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ValueRange.start_value_open)
  if (has_start_value_open()) {
    clear_has_start_value();
    return start_value_.start_value_open_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void ValueRange::set_allocated_start_value_open(::std::string* start_value_open) {
  if (!has_start_value_open()) {
    start_value_.start_value_open_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_start_value();
  if (start_value_open != NULL) {
    set_has_start_value_open();
    start_value_.start_value_open_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        start_value_open);
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ValueRange.start_value_open)
}

// optional bytes end_value_closed = 3;
bool ValueRange::has_end_value_closed() const {
  return end_value_case() == kEndValueClosed;
}
void ValueRange::set_has_end_value_closed() {
  _oneof_case_[1] = kEndValueClosed;
}
void ValueRange::clear_end_value_closed() {
  if (has_end_value_closed()) {
    end_value_.end_value_closed_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_end_value();
  }
}
const ::std::string& ValueRange::end_value_closed() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ValueRange.end_value_closed)
  if (has_end_value_closed()) {
    return end_value_.end_value_closed_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void ValueRange::set_end_value_closed(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ValueRange.end_value_closed)
  if (!has_end_value_closed()) {
    clear_end_value();
    set_has_end_value_closed();
    end_value_.end_value_closed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  end_value_.end_value_closed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ValueRange.end_value_closed)
}
void ValueRange::set_end_value_closed(const char* value) {
  if (!has_end_value_closed()) {
    clear_end_value();
    set_has_end_value_closed();
    end_value_.end_value_closed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  end_value_.end_value_closed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ValueRange.end_value_closed)
}
void ValueRange::set_end_value_closed(const void* value, size_t size) {
  if (!has_end_value_closed()) {
    clear_end_value();
    set_has_end_value_closed();
    end_value_.end_value_closed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  end_value_.end_value_closed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ValueRange.end_value_closed)
}
::std::string* ValueRange::mutable_end_value_closed() {
  if (!has_end_value_closed()) {
    clear_end_value();
    set_has_end_value_closed();
    end_value_.end_value_closed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ValueRange.end_value_closed)
  return end_value_.end_value_closed_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ValueRange::release_end_value_closed() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ValueRange.end_value_closed)
  if (has_end_value_closed()) {
    clear_has_end_value();
    return end_value_.end_value_closed_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void ValueRange::set_allocated_end_value_closed(::std::string* end_value_closed) {
  if (!has_end_value_closed()) {
    end_value_.end_value_closed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_end_value();
  if (end_value_closed != NULL) {
    set_has_end_value_closed();
    end_value_.end_value_closed_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        end_value_closed);
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ValueRange.end_value_closed)
}

// optional bytes end_value_open = 4;
bool ValueRange::has_end_value_open() const {
  return end_value_case() == kEndValueOpen;
}
void ValueRange::set_has_end_value_open() {
  _oneof_case_[1] = kEndValueOpen;
}
void ValueRange::clear_end_value_open() {
  if (has_end_value_open()) {
    end_value_.end_value_open_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_end_value();
  }
}
const ::std::string& ValueRange::end_value_open() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ValueRange.end_value_open)
  if (has_end_value_open()) {
    return end_value_.end_value_open_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void ValueRange::set_end_value_open(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ValueRange.end_value_open)
  if (!has_end_value_open()) {
    clear_end_value();
    set_has_end_value_open();
    end_value_.end_value_open_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  end_value_.end_value_open_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ValueRange.end_value_open)
}
void ValueRange::set_end_value_open(const char* value) {
  if (!has_end_value_open()) {
    clear_end_value();
    set_has_end_value_open();
    end_value_.end_value_open_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  end_value_.end_value_open_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ValueRange.end_value_open)
}
void ValueRange::set_end_value_open(const void* value, size_t size) {
  if (!has_end_value_open()) {
    clear_end_value();
    set_has_end_value_open();
    end_value_.end_value_open_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  end_value_.end_value_open_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ValueRange.end_value_open)
}
::std::string* ValueRange::mutable_end_value_open() {
  if (!has_end_value_open()) {
    clear_end_value();
    set_has_end_value_open();
    end_value_.end_value_open_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ValueRange.end_value_open)
  return end_value_.end_value_open_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ValueRange::release_end_value_open() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ValueRange.end_value_open)
  if (has_end_value_open()) {
    clear_has_end_value();
    return end_value_.end_value_open_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void ValueRange::set_allocated_end_value_open(::std::string* end_value_open) {
  if (!has_end_value_open()) {
    end_value_.end_value_open_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_end_value();
  if (end_value_open != NULL) {
    set_has_end_value_open();
    end_value_.end_value_open_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        end_value_open);
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ValueRange.end_value_open)
}

bool ValueRange::has_start_value() const {
  return start_value_case() != START_VALUE_NOT_SET;
}
void ValueRange::clear_has_start_value() {
  _oneof_case_[0] = START_VALUE_NOT_SET;
}
bool ValueRange::has_end_value() const {
  return end_value_case() != END_VALUE_NOT_SET;
}
void ValueRange::clear_has_end_value() {
  _oneof_case_[1] = END_VALUE_NOT_SET;
}
ValueRange::StartValueCase ValueRange::start_value_case() const {
  return ValueRange::StartValueCase(_oneof_case_[0]);
}
ValueRange::EndValueCase ValueRange::end_value_case() const {
  return ValueRange::EndValueCase(_oneof_case_[1]);
}
inline const ValueRange* ValueRange::internal_default_instance() {
  return &ValueRange_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RowFilter_Chain::kFiltersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RowFilter_Chain::RowFilter_Chain()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v2.RowFilter.Chain)
}

void RowFilter_Chain::InitAsDefaultInstance() {
}

RowFilter_Chain::RowFilter_Chain(const RowFilter_Chain& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v2.RowFilter.Chain)
}

void RowFilter_Chain::SharedCtor() {
  _cached_size_ = 0;
}

RowFilter_Chain::~RowFilter_Chain() {
  // @@protoc_insertion_point(destructor:google.bigtable.v2.RowFilter.Chain)
  SharedDtor();
}

void RowFilter_Chain::SharedDtor() {
}

void RowFilter_Chain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RowFilter_Chain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RowFilter_Chain_descriptor_;
}

const RowFilter_Chain& RowFilter_Chain::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RowFilter_Chain> RowFilter_Chain_default_instance_;

RowFilter_Chain* RowFilter_Chain::New(::google::protobuf::Arena* arena) const {
  RowFilter_Chain* n = new RowFilter_Chain;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RowFilter_Chain::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v2.RowFilter.Chain)
  filters_.Clear();
}

bool RowFilter_Chain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v2.RowFilter.Chain)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.bigtable.v2.RowFilter filters = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_filters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_filters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_filters;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v2.RowFilter.Chain)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v2.RowFilter.Chain)
  return false;
#undef DO_
}

void RowFilter_Chain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v2.RowFilter.Chain)
  // repeated .google.bigtable.v2.RowFilter filters = 1;
  for (unsigned int i = 0, n = this->filters_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->filters(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v2.RowFilter.Chain)
}

::google::protobuf::uint8* RowFilter_Chain::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v2.RowFilter.Chain)
  // repeated .google.bigtable.v2.RowFilter filters = 1;
  for (unsigned int i = 0, n = this->filters_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->filters(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v2.RowFilter.Chain)
  return target;
}

size_t RowFilter_Chain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v2.RowFilter.Chain)
  size_t total_size = 0;

  // repeated .google.bigtable.v2.RowFilter filters = 1;
  {
    unsigned int count = this->filters_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filters(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RowFilter_Chain::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v2.RowFilter.Chain)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RowFilter_Chain* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RowFilter_Chain>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v2.RowFilter.Chain)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v2.RowFilter.Chain)
    UnsafeMergeFrom(*source);
  }
}

void RowFilter_Chain::MergeFrom(const RowFilter_Chain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v2.RowFilter.Chain)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RowFilter_Chain::UnsafeMergeFrom(const RowFilter_Chain& from) {
  GOOGLE_DCHECK(&from != this);
  filters_.MergeFrom(from.filters_);
}

void RowFilter_Chain::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v2.RowFilter.Chain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RowFilter_Chain::CopyFrom(const RowFilter_Chain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v2.RowFilter.Chain)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RowFilter_Chain::IsInitialized() const {

  return true;
}

void RowFilter_Chain::Swap(RowFilter_Chain* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RowFilter_Chain::InternalSwap(RowFilter_Chain* other) {
  filters_.UnsafeArenaSwap(&other->filters_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RowFilter_Chain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RowFilter_Chain_descriptor_;
  metadata.reflection = RowFilter_Chain_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RowFilter_Interleave::kFiltersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RowFilter_Interleave::RowFilter_Interleave()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v2.RowFilter.Interleave)
}

void RowFilter_Interleave::InitAsDefaultInstance() {
}

RowFilter_Interleave::RowFilter_Interleave(const RowFilter_Interleave& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v2.RowFilter.Interleave)
}

void RowFilter_Interleave::SharedCtor() {
  _cached_size_ = 0;
}

RowFilter_Interleave::~RowFilter_Interleave() {
  // @@protoc_insertion_point(destructor:google.bigtable.v2.RowFilter.Interleave)
  SharedDtor();
}

void RowFilter_Interleave::SharedDtor() {
}

void RowFilter_Interleave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RowFilter_Interleave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RowFilter_Interleave_descriptor_;
}

const RowFilter_Interleave& RowFilter_Interleave::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RowFilter_Interleave> RowFilter_Interleave_default_instance_;

RowFilter_Interleave* RowFilter_Interleave::New(::google::protobuf::Arena* arena) const {
  RowFilter_Interleave* n = new RowFilter_Interleave;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RowFilter_Interleave::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v2.RowFilter.Interleave)
  filters_.Clear();
}

bool RowFilter_Interleave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v2.RowFilter.Interleave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.bigtable.v2.RowFilter filters = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_filters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_filters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_filters;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v2.RowFilter.Interleave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v2.RowFilter.Interleave)
  return false;
#undef DO_
}

void RowFilter_Interleave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v2.RowFilter.Interleave)
  // repeated .google.bigtable.v2.RowFilter filters = 1;
  for (unsigned int i = 0, n = this->filters_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->filters(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v2.RowFilter.Interleave)
}

::google::protobuf::uint8* RowFilter_Interleave::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v2.RowFilter.Interleave)
  // repeated .google.bigtable.v2.RowFilter filters = 1;
  for (unsigned int i = 0, n = this->filters_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->filters(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v2.RowFilter.Interleave)
  return target;
}

size_t RowFilter_Interleave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v2.RowFilter.Interleave)
  size_t total_size = 0;

  // repeated .google.bigtable.v2.RowFilter filters = 1;
  {
    unsigned int count = this->filters_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filters(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RowFilter_Interleave::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v2.RowFilter.Interleave)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RowFilter_Interleave* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RowFilter_Interleave>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v2.RowFilter.Interleave)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v2.RowFilter.Interleave)
    UnsafeMergeFrom(*source);
  }
}

void RowFilter_Interleave::MergeFrom(const RowFilter_Interleave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v2.RowFilter.Interleave)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RowFilter_Interleave::UnsafeMergeFrom(const RowFilter_Interleave& from) {
  GOOGLE_DCHECK(&from != this);
  filters_.MergeFrom(from.filters_);
}

void RowFilter_Interleave::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v2.RowFilter.Interleave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RowFilter_Interleave::CopyFrom(const RowFilter_Interleave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v2.RowFilter.Interleave)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RowFilter_Interleave::IsInitialized() const {

  return true;
}

void RowFilter_Interleave::Swap(RowFilter_Interleave* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RowFilter_Interleave::InternalSwap(RowFilter_Interleave* other) {
  filters_.UnsafeArenaSwap(&other->filters_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RowFilter_Interleave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RowFilter_Interleave_descriptor_;
  metadata.reflection = RowFilter_Interleave_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RowFilter_Condition::kPredicateFilterFieldNumber;
const int RowFilter_Condition::kTrueFilterFieldNumber;
const int RowFilter_Condition::kFalseFilterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RowFilter_Condition::RowFilter_Condition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v2.RowFilter.Condition)
}

void RowFilter_Condition::InitAsDefaultInstance() {
  predicate_filter_ = const_cast< ::google::bigtable::v2::RowFilter*>(
      ::google::bigtable::v2::RowFilter::internal_default_instance());
  true_filter_ = const_cast< ::google::bigtable::v2::RowFilter*>(
      ::google::bigtable::v2::RowFilter::internal_default_instance());
  false_filter_ = const_cast< ::google::bigtable::v2::RowFilter*>(
      ::google::bigtable::v2::RowFilter::internal_default_instance());
}

RowFilter_Condition::RowFilter_Condition(const RowFilter_Condition& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v2.RowFilter.Condition)
}

void RowFilter_Condition::SharedCtor() {
  predicate_filter_ = NULL;
  true_filter_ = NULL;
  false_filter_ = NULL;
  _cached_size_ = 0;
}

RowFilter_Condition::~RowFilter_Condition() {
  // @@protoc_insertion_point(destructor:google.bigtable.v2.RowFilter.Condition)
  SharedDtor();
}

void RowFilter_Condition::SharedDtor() {
  if (this != &RowFilter_Condition_default_instance_.get()) {
    delete predicate_filter_;
    delete true_filter_;
    delete false_filter_;
  }
}

void RowFilter_Condition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RowFilter_Condition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RowFilter_Condition_descriptor_;
}

const RowFilter_Condition& RowFilter_Condition::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RowFilter_Condition> RowFilter_Condition_default_instance_;

RowFilter_Condition* RowFilter_Condition::New(::google::protobuf::Arena* arena) const {
  RowFilter_Condition* n = new RowFilter_Condition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RowFilter_Condition::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v2.RowFilter.Condition)
  if (GetArenaNoVirtual() == NULL && predicate_filter_ != NULL) delete predicate_filter_;
  predicate_filter_ = NULL;
  if (GetArenaNoVirtual() == NULL && true_filter_ != NULL) delete true_filter_;
  true_filter_ = NULL;
  if (GetArenaNoVirtual() == NULL && false_filter_ != NULL) delete false_filter_;
  false_filter_ = NULL;
}

bool RowFilter_Condition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v2.RowFilter.Condition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.bigtable.v2.RowFilter predicate_filter = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_predicate_filter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_true_filter;
        break;
      }

      // optional .google.bigtable.v2.RowFilter true_filter = 2;
      case 2: {
        if (tag == 18) {
         parse_true_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_true_filter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_false_filter;
        break;
      }

      // optional .google.bigtable.v2.RowFilter false_filter = 3;
      case 3: {
        if (tag == 26) {
         parse_false_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_false_filter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v2.RowFilter.Condition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v2.RowFilter.Condition)
  return false;
#undef DO_
}

void RowFilter_Condition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v2.RowFilter.Condition)
  // optional .google.bigtable.v2.RowFilter predicate_filter = 1;
  if (this->has_predicate_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->predicate_filter_, output);
  }

  // optional .google.bigtable.v2.RowFilter true_filter = 2;
  if (this->has_true_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->true_filter_, output);
  }

  // optional .google.bigtable.v2.RowFilter false_filter = 3;
  if (this->has_false_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->false_filter_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v2.RowFilter.Condition)
}

::google::protobuf::uint8* RowFilter_Condition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v2.RowFilter.Condition)
  // optional .google.bigtable.v2.RowFilter predicate_filter = 1;
  if (this->has_predicate_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->predicate_filter_, false, target);
  }

  // optional .google.bigtable.v2.RowFilter true_filter = 2;
  if (this->has_true_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->true_filter_, false, target);
  }

  // optional .google.bigtable.v2.RowFilter false_filter = 3;
  if (this->has_false_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->false_filter_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v2.RowFilter.Condition)
  return target;
}

size_t RowFilter_Condition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v2.RowFilter.Condition)
  size_t total_size = 0;

  // optional .google.bigtable.v2.RowFilter predicate_filter = 1;
  if (this->has_predicate_filter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->predicate_filter_);
  }

  // optional .google.bigtable.v2.RowFilter true_filter = 2;
  if (this->has_true_filter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->true_filter_);
  }

  // optional .google.bigtable.v2.RowFilter false_filter = 3;
  if (this->has_false_filter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->false_filter_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RowFilter_Condition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v2.RowFilter.Condition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RowFilter_Condition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RowFilter_Condition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v2.RowFilter.Condition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v2.RowFilter.Condition)
    UnsafeMergeFrom(*source);
  }
}

void RowFilter_Condition::MergeFrom(const RowFilter_Condition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v2.RowFilter.Condition)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RowFilter_Condition::UnsafeMergeFrom(const RowFilter_Condition& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_predicate_filter()) {
    mutable_predicate_filter()->::google::bigtable::v2::RowFilter::MergeFrom(from.predicate_filter());
  }
  if (from.has_true_filter()) {
    mutable_true_filter()->::google::bigtable::v2::RowFilter::MergeFrom(from.true_filter());
  }
  if (from.has_false_filter()) {
    mutable_false_filter()->::google::bigtable::v2::RowFilter::MergeFrom(from.false_filter());
  }
}

void RowFilter_Condition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v2.RowFilter.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RowFilter_Condition::CopyFrom(const RowFilter_Condition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v2.RowFilter.Condition)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RowFilter_Condition::IsInitialized() const {

  return true;
}

void RowFilter_Condition::Swap(RowFilter_Condition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RowFilter_Condition::InternalSwap(RowFilter_Condition* other) {
  std::swap(predicate_filter_, other->predicate_filter_);
  std::swap(true_filter_, other->true_filter_);
  std::swap(false_filter_, other->false_filter_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RowFilter_Condition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RowFilter_Condition_descriptor_;
  metadata.reflection = RowFilter_Condition_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RowFilter::kChainFieldNumber;
const int RowFilter::kInterleaveFieldNumber;
const int RowFilter::kConditionFieldNumber;
const int RowFilter::kSinkFieldNumber;
const int RowFilter::kPassAllFilterFieldNumber;
const int RowFilter::kBlockAllFilterFieldNumber;
const int RowFilter::kRowKeyRegexFilterFieldNumber;
const int RowFilter::kRowSampleFilterFieldNumber;
const int RowFilter::kFamilyNameRegexFilterFieldNumber;
const int RowFilter::kColumnQualifierRegexFilterFieldNumber;
const int RowFilter::kColumnRangeFilterFieldNumber;
const int RowFilter::kTimestampRangeFilterFieldNumber;
const int RowFilter::kValueRegexFilterFieldNumber;
const int RowFilter::kValueRangeFilterFieldNumber;
const int RowFilter::kCellsPerRowOffsetFilterFieldNumber;
const int RowFilter::kCellsPerRowLimitFilterFieldNumber;
const int RowFilter::kCellsPerColumnLimitFilterFieldNumber;
const int RowFilter::kStripValueTransformerFieldNumber;
const int RowFilter::kApplyLabelTransformerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RowFilter::RowFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v2.RowFilter)
}

void RowFilter::InitAsDefaultInstance() {
  RowFilter_default_oneof_instance_->chain_ = const_cast< ::google::bigtable::v2::RowFilter_Chain*>(
      ::google::bigtable::v2::RowFilter_Chain::internal_default_instance());
  RowFilter_default_oneof_instance_->interleave_ = const_cast< ::google::bigtable::v2::RowFilter_Interleave*>(
      ::google::bigtable::v2::RowFilter_Interleave::internal_default_instance());
  RowFilter_default_oneof_instance_->condition_ = const_cast< ::google::bigtable::v2::RowFilter_Condition*>(
      ::google::bigtable::v2::RowFilter_Condition::internal_default_instance());
  RowFilter_default_oneof_instance_->sink_ = false;
  RowFilter_default_oneof_instance_->pass_all_filter_ = false;
  RowFilter_default_oneof_instance_->block_all_filter_ = false;
  RowFilter_default_oneof_instance_->row_key_regex_filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  RowFilter_default_oneof_instance_->row_sample_filter_ = 0;
  RowFilter_default_oneof_instance_->family_name_regex_filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  RowFilter_default_oneof_instance_->column_qualifier_regex_filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  RowFilter_default_oneof_instance_->column_range_filter_ = const_cast< ::google::bigtable::v2::ColumnRange*>(
      ::google::bigtable::v2::ColumnRange::internal_default_instance());
  RowFilter_default_oneof_instance_->timestamp_range_filter_ = const_cast< ::google::bigtable::v2::TimestampRange*>(
      ::google::bigtable::v2::TimestampRange::internal_default_instance());
  RowFilter_default_oneof_instance_->value_regex_filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  RowFilter_default_oneof_instance_->value_range_filter_ = const_cast< ::google::bigtable::v2::ValueRange*>(
      ::google::bigtable::v2::ValueRange::internal_default_instance());
  RowFilter_default_oneof_instance_->cells_per_row_offset_filter_ = 0;
  RowFilter_default_oneof_instance_->cells_per_row_limit_filter_ = 0;
  RowFilter_default_oneof_instance_->cells_per_column_limit_filter_ = 0;
  RowFilter_default_oneof_instance_->strip_value_transformer_ = false;
  RowFilter_default_oneof_instance_->apply_label_transformer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RowFilter::RowFilter(const RowFilter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v2.RowFilter)
}

void RowFilter::SharedCtor() {
  clear_has_filter();
  _cached_size_ = 0;
}

RowFilter::~RowFilter() {
  // @@protoc_insertion_point(destructor:google.bigtable.v2.RowFilter)
  SharedDtor();
}

void RowFilter::SharedDtor() {
  if (has_filter()) {
    clear_filter();
  }
}

void RowFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RowFilter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RowFilter_descriptor_;
}

const RowFilter& RowFilter::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RowFilter> RowFilter_default_instance_;

RowFilter* RowFilter::New(::google::protobuf::Arena* arena) const {
  RowFilter* n = new RowFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RowFilter::clear_filter() {
// @@protoc_insertion_point(one_of_clear_start:google.bigtable.v2.RowFilter)
  switch (filter_case()) {
    case kChain: {
      delete filter_.chain_;
      break;
    }
    case kInterleave: {
      delete filter_.interleave_;
      break;
    }
    case kCondition: {
      delete filter_.condition_;
      break;
    }
    case kSink: {
      // No need to clear
      break;
    }
    case kPassAllFilter: {
      // No need to clear
      break;
    }
    case kBlockAllFilter: {
      // No need to clear
      break;
    }
    case kRowKeyRegexFilter: {
      filter_.row_key_regex_filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kRowSampleFilter: {
      // No need to clear
      break;
    }
    case kFamilyNameRegexFilter: {
      filter_.family_name_regex_filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kColumnQualifierRegexFilter: {
      filter_.column_qualifier_regex_filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kColumnRangeFilter: {
      delete filter_.column_range_filter_;
      break;
    }
    case kTimestampRangeFilter: {
      delete filter_.timestamp_range_filter_;
      break;
    }
    case kValueRegexFilter: {
      filter_.value_regex_filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kValueRangeFilter: {
      delete filter_.value_range_filter_;
      break;
    }
    case kCellsPerRowOffsetFilter: {
      // No need to clear
      break;
    }
    case kCellsPerRowLimitFilter: {
      // No need to clear
      break;
    }
    case kCellsPerColumnLimitFilter: {
      // No need to clear
      break;
    }
    case kStripValueTransformer: {
      // No need to clear
      break;
    }
    case kApplyLabelTransformer: {
      filter_.apply_label_transformer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case FILTER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FILTER_NOT_SET;
}


void RowFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v2.RowFilter)
  clear_filter();
}

bool RowFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v2.RowFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.bigtable.v2.RowFilter.Chain chain = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chain()));
        } else {
          goto handle_unusual;
        }
        goto after_apply_label_transformer;
        break;
      }

      // optional .google.bigtable.v2.RowFilter.Interleave interleave = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_interleave()));
        } else {
          goto handle_unusual;
        }
        goto after_apply_label_transformer;
        break;
      }

      // optional .google.bigtable.v2.RowFilter.Condition condition = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_condition()));
        } else {
          goto handle_unusual;
        }
        goto after_apply_label_transformer;
        break;
      }

      // optional bytes row_key_regex_filter = 4;
      case 4: {
        if (tag == 34) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_row_key_regex_filter()));
        } else {
          goto handle_unusual;
        }
        goto after_apply_label_transformer;
        break;
      }

      // optional string family_name_regex_filter = 5;
      case 5: {
        if (tag == 42) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_family_name_regex_filter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->family_name_regex_filter().data(), this->family_name_regex_filter().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.v2.RowFilter.family_name_regex_filter"));
        } else {
          goto handle_unusual;
        }
        goto after_apply_label_transformer;
        break;
      }

      // optional bytes column_qualifier_regex_filter = 6;
      case 6: {
        if (tag == 50) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_column_qualifier_regex_filter()));
        } else {
          goto handle_unusual;
        }
        goto after_apply_label_transformer;
        break;
      }

      // optional .google.bigtable.v2.ColumnRange column_range_filter = 7;
      case 7: {
        if (tag == 58) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_column_range_filter()));
        } else {
          goto handle_unusual;
        }
        goto after_apply_label_transformer;
        break;
      }

      // optional .google.bigtable.v2.TimestampRange timestamp_range_filter = 8;
      case 8: {
        if (tag == 66) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp_range_filter()));
        } else {
          goto handle_unusual;
        }
        goto after_apply_label_transformer;
        break;
      }

      // optional bytes value_regex_filter = 9;
      case 9: {
        if (tag == 74) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value_regex_filter()));
        } else {
          goto handle_unusual;
        }
        goto after_apply_label_transformer;
        break;
      }

      // optional int32 cells_per_row_offset_filter = 10;
      case 10: {
        if (tag == 80) {
          clear_filter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &filter_.cells_per_row_offset_filter_)));
          set_has_cells_per_row_offset_filter();
        } else {
          goto handle_unusual;
        }
        goto after_apply_label_transformer;
        break;
      }

      // optional int32 cells_per_row_limit_filter = 11;
      case 11: {
        if (tag == 88) {
          clear_filter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &filter_.cells_per_row_limit_filter_)));
          set_has_cells_per_row_limit_filter();
        } else {
          goto handle_unusual;
        }
        goto after_apply_label_transformer;
        break;
      }

      // optional int32 cells_per_column_limit_filter = 12;
      case 12: {
        if (tag == 96) {
          clear_filter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &filter_.cells_per_column_limit_filter_)));
          set_has_cells_per_column_limit_filter();
        } else {
          goto handle_unusual;
        }
        goto after_apply_label_transformer;
        break;
      }

      // optional bool strip_value_transformer = 13;
      case 13: {
        if (tag == 104) {
          clear_filter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filter_.strip_value_transformer_)));
          set_has_strip_value_transformer();
        } else {
          goto handle_unusual;
        }
        goto after_apply_label_transformer;
        break;
      }

      // optional double row_sample_filter = 14;
      case 14: {
        if (tag == 113) {
          clear_filter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &filter_.row_sample_filter_)));
          set_has_row_sample_filter();
        } else {
          goto handle_unusual;
        }
        goto after_apply_label_transformer;
        break;
      }

      // optional .google.bigtable.v2.ValueRange value_range_filter = 15;
      case 15: {
        if (tag == 122) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value_range_filter()));
        } else {
          goto handle_unusual;
        }
        goto after_apply_label_transformer;
        break;
      }

      // optional bool sink = 16;
      case 16: {
        if (tag == 128) {
          clear_filter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filter_.sink_)));
          set_has_sink();
        } else {
          goto handle_unusual;
        }
        goto after_apply_label_transformer;
        break;
      }

      // optional bool pass_all_filter = 17;
      case 17: {
        if (tag == 136) {
          clear_filter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filter_.pass_all_filter_)));
          set_has_pass_all_filter();
        } else {
          goto handle_unusual;
        }
        goto after_apply_label_transformer;
        break;
      }

      // optional bool block_all_filter = 18;
      case 18: {
        if (tag == 144) {
          clear_filter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filter_.block_all_filter_)));
          set_has_block_all_filter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_apply_label_transformer;
        break;
      }

      // optional string apply_label_transformer = 19;
      case 19: {
        if (tag == 154) {
         parse_apply_label_transformer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_apply_label_transformer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->apply_label_transformer().data(), this->apply_label_transformer().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.v2.RowFilter.apply_label_transformer"));
        } else {
          goto handle_unusual;
        }
       after_apply_label_transformer:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v2.RowFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v2.RowFilter)
  return false;
#undef DO_
}

void RowFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v2.RowFilter)
  // optional .google.bigtable.v2.RowFilter.Chain chain = 1;
  if (has_chain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *filter_.chain_, output);
  }

  // optional .google.bigtable.v2.RowFilter.Interleave interleave = 2;
  if (has_interleave()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *filter_.interleave_, output);
  }

  // optional .google.bigtable.v2.RowFilter.Condition condition = 3;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *filter_.condition_, output);
  }

  // optional bytes row_key_regex_filter = 4;
  if (has_row_key_regex_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->row_key_regex_filter(), output);
  }

  // optional string family_name_regex_filter = 5;
  if (has_family_name_regex_filter()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->family_name_regex_filter().data(), this->family_name_regex_filter().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v2.RowFilter.family_name_regex_filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->family_name_regex_filter(), output);
  }

  // optional bytes column_qualifier_regex_filter = 6;
  if (has_column_qualifier_regex_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->column_qualifier_regex_filter(), output);
  }

  // optional .google.bigtable.v2.ColumnRange column_range_filter = 7;
  if (has_column_range_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *filter_.column_range_filter_, output);
  }

  // optional .google.bigtable.v2.TimestampRange timestamp_range_filter = 8;
  if (has_timestamp_range_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *filter_.timestamp_range_filter_, output);
  }

  // optional bytes value_regex_filter = 9;
  if (has_value_regex_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->value_regex_filter(), output);
  }

  // optional int32 cells_per_row_offset_filter = 10;
  if (has_cells_per_row_offset_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->cells_per_row_offset_filter(), output);
  }

  // optional int32 cells_per_row_limit_filter = 11;
  if (has_cells_per_row_limit_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->cells_per_row_limit_filter(), output);
  }

  // optional int32 cells_per_column_limit_filter = 12;
  if (has_cells_per_column_limit_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->cells_per_column_limit_filter(), output);
  }

  // optional bool strip_value_transformer = 13;
  if (has_strip_value_transformer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->strip_value_transformer(), output);
  }

  // optional double row_sample_filter = 14;
  if (has_row_sample_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->row_sample_filter(), output);
  }

  // optional .google.bigtable.v2.ValueRange value_range_filter = 15;
  if (has_value_range_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *filter_.value_range_filter_, output);
  }

  // optional bool sink = 16;
  if (has_sink()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->sink(), output);
  }

  // optional bool pass_all_filter = 17;
  if (has_pass_all_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->pass_all_filter(), output);
  }

  // optional bool block_all_filter = 18;
  if (has_block_all_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->block_all_filter(), output);
  }

  // optional string apply_label_transformer = 19;
  if (has_apply_label_transformer()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->apply_label_transformer().data(), this->apply_label_transformer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v2.RowFilter.apply_label_transformer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->apply_label_transformer(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v2.RowFilter)
}

::google::protobuf::uint8* RowFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v2.RowFilter)
  // optional .google.bigtable.v2.RowFilter.Chain chain = 1;
  if (has_chain()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *filter_.chain_, false, target);
  }

  // optional .google.bigtable.v2.RowFilter.Interleave interleave = 2;
  if (has_interleave()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *filter_.interleave_, false, target);
  }

  // optional .google.bigtable.v2.RowFilter.Condition condition = 3;
  if (has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *filter_.condition_, false, target);
  }

  // optional bytes row_key_regex_filter = 4;
  if (has_row_key_regex_filter()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->row_key_regex_filter(), target);
  }

  // optional string family_name_regex_filter = 5;
  if (has_family_name_regex_filter()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->family_name_regex_filter().data(), this->family_name_regex_filter().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v2.RowFilter.family_name_regex_filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->family_name_regex_filter(), target);
  }

  // optional bytes column_qualifier_regex_filter = 6;
  if (has_column_qualifier_regex_filter()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->column_qualifier_regex_filter(), target);
  }

  // optional .google.bigtable.v2.ColumnRange column_range_filter = 7;
  if (has_column_range_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *filter_.column_range_filter_, false, target);
  }

  // optional .google.bigtable.v2.TimestampRange timestamp_range_filter = 8;
  if (has_timestamp_range_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *filter_.timestamp_range_filter_, false, target);
  }

  // optional bytes value_regex_filter = 9;
  if (has_value_regex_filter()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->value_regex_filter(), target);
  }

  // optional int32 cells_per_row_offset_filter = 10;
  if (has_cells_per_row_offset_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->cells_per_row_offset_filter(), target);
  }

  // optional int32 cells_per_row_limit_filter = 11;
  if (has_cells_per_row_limit_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->cells_per_row_limit_filter(), target);
  }

  // optional int32 cells_per_column_limit_filter = 12;
  if (has_cells_per_column_limit_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->cells_per_column_limit_filter(), target);
  }

  // optional bool strip_value_transformer = 13;
  if (has_strip_value_transformer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->strip_value_transformer(), target);
  }

  // optional double row_sample_filter = 14;
  if (has_row_sample_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->row_sample_filter(), target);
  }

  // optional .google.bigtable.v2.ValueRange value_range_filter = 15;
  if (has_value_range_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *filter_.value_range_filter_, false, target);
  }

  // optional bool sink = 16;
  if (has_sink()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->sink(), target);
  }

  // optional bool pass_all_filter = 17;
  if (has_pass_all_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->pass_all_filter(), target);
  }

  // optional bool block_all_filter = 18;
  if (has_block_all_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->block_all_filter(), target);
  }

  // optional string apply_label_transformer = 19;
  if (has_apply_label_transformer()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->apply_label_transformer().data(), this->apply_label_transformer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v2.RowFilter.apply_label_transformer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->apply_label_transformer(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v2.RowFilter)
  return target;
}

size_t RowFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v2.RowFilter)
  size_t total_size = 0;

  switch (filter_case()) {
    // optional .google.bigtable.v2.RowFilter.Chain chain = 1;
    case kChain: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *filter_.chain_);
      break;
    }
    // optional .google.bigtable.v2.RowFilter.Interleave interleave = 2;
    case kInterleave: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *filter_.interleave_);
      break;
    }
    // optional .google.bigtable.v2.RowFilter.Condition condition = 3;
    case kCondition: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *filter_.condition_);
      break;
    }
    // optional bool sink = 16;
    case kSink: {
      total_size += 2 + 1;
      break;
    }
    // optional bool pass_all_filter = 17;
    case kPassAllFilter: {
      total_size += 2 + 1;
      break;
    }
    // optional bool block_all_filter = 18;
    case kBlockAllFilter: {
      total_size += 2 + 1;
      break;
    }
    // optional bytes row_key_regex_filter = 4;
    case kRowKeyRegexFilter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->row_key_regex_filter());
      break;
    }
    // optional double row_sample_filter = 14;
    case kRowSampleFilter: {
      total_size += 1 + 8;
      break;
    }
    // optional string family_name_regex_filter = 5;
    case kFamilyNameRegexFilter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->family_name_regex_filter());
      break;
    }
    // optional bytes column_qualifier_regex_filter = 6;
    case kColumnQualifierRegexFilter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->column_qualifier_regex_filter());
      break;
    }
    // optional .google.bigtable.v2.ColumnRange column_range_filter = 7;
    case kColumnRangeFilter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *filter_.column_range_filter_);
      break;
    }
    // optional .google.bigtable.v2.TimestampRange timestamp_range_filter = 8;
    case kTimestampRangeFilter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *filter_.timestamp_range_filter_);
      break;
    }
    // optional bytes value_regex_filter = 9;
    case kValueRegexFilter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value_regex_filter());
      break;
    }
    // optional .google.bigtable.v2.ValueRange value_range_filter = 15;
    case kValueRangeFilter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *filter_.value_range_filter_);
      break;
    }
    // optional int32 cells_per_row_offset_filter = 10;
    case kCellsPerRowOffsetFilter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cells_per_row_offset_filter());
      break;
    }
    // optional int32 cells_per_row_limit_filter = 11;
    case kCellsPerRowLimitFilter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cells_per_row_limit_filter());
      break;
    }
    // optional int32 cells_per_column_limit_filter = 12;
    case kCellsPerColumnLimitFilter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cells_per_column_limit_filter());
      break;
    }
    // optional bool strip_value_transformer = 13;
    case kStripValueTransformer: {
      total_size += 1 + 1;
      break;
    }
    // optional string apply_label_transformer = 19;
    case kApplyLabelTransformer: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->apply_label_transformer());
      break;
    }
    case FILTER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RowFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v2.RowFilter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RowFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RowFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v2.RowFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v2.RowFilter)
    UnsafeMergeFrom(*source);
  }
}

void RowFilter::MergeFrom(const RowFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v2.RowFilter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RowFilter::UnsafeMergeFrom(const RowFilter& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.filter_case()) {
    case kChain: {
      mutable_chain()->::google::bigtable::v2::RowFilter_Chain::MergeFrom(from.chain());
      break;
    }
    case kInterleave: {
      mutable_interleave()->::google::bigtable::v2::RowFilter_Interleave::MergeFrom(from.interleave());
      break;
    }
    case kCondition: {
      mutable_condition()->::google::bigtable::v2::RowFilter_Condition::MergeFrom(from.condition());
      break;
    }
    case kSink: {
      set_sink(from.sink());
      break;
    }
    case kPassAllFilter: {
      set_pass_all_filter(from.pass_all_filter());
      break;
    }
    case kBlockAllFilter: {
      set_block_all_filter(from.block_all_filter());
      break;
    }
    case kRowKeyRegexFilter: {
      set_row_key_regex_filter(from.row_key_regex_filter());
      break;
    }
    case kRowSampleFilter: {
      set_row_sample_filter(from.row_sample_filter());
      break;
    }
    case kFamilyNameRegexFilter: {
      set_family_name_regex_filter(from.family_name_regex_filter());
      break;
    }
    case kColumnQualifierRegexFilter: {
      set_column_qualifier_regex_filter(from.column_qualifier_regex_filter());
      break;
    }
    case kColumnRangeFilter: {
      mutable_column_range_filter()->::google::bigtable::v2::ColumnRange::MergeFrom(from.column_range_filter());
      break;
    }
    case kTimestampRangeFilter: {
      mutable_timestamp_range_filter()->::google::bigtable::v2::TimestampRange::MergeFrom(from.timestamp_range_filter());
      break;
    }
    case kValueRegexFilter: {
      set_value_regex_filter(from.value_regex_filter());
      break;
    }
    case kValueRangeFilter: {
      mutable_value_range_filter()->::google::bigtable::v2::ValueRange::MergeFrom(from.value_range_filter());
      break;
    }
    case kCellsPerRowOffsetFilter: {
      set_cells_per_row_offset_filter(from.cells_per_row_offset_filter());
      break;
    }
    case kCellsPerRowLimitFilter: {
      set_cells_per_row_limit_filter(from.cells_per_row_limit_filter());
      break;
    }
    case kCellsPerColumnLimitFilter: {
      set_cells_per_column_limit_filter(from.cells_per_column_limit_filter());
      break;
    }
    case kStripValueTransformer: {
      set_strip_value_transformer(from.strip_value_transformer());
      break;
    }
    case kApplyLabelTransformer: {
      set_apply_label_transformer(from.apply_label_transformer());
      break;
    }
    case FILTER_NOT_SET: {
      break;
    }
  }
}

void RowFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v2.RowFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RowFilter::CopyFrom(const RowFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v2.RowFilter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RowFilter::IsInitialized() const {

  return true;
}

void RowFilter::Swap(RowFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RowFilter::InternalSwap(RowFilter* other) {
  std::swap(filter_, other->filter_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RowFilter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RowFilter_descriptor_;
  metadata.reflection = RowFilter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RowFilter_Chain

// repeated .google.bigtable.v2.RowFilter filters = 1;
int RowFilter_Chain::filters_size() const {
  return filters_.size();
}
void RowFilter_Chain::clear_filters() {
  filters_.Clear();
}
const ::google::bigtable::v2::RowFilter& RowFilter_Chain::filters(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.Chain.filters)
  return filters_.Get(index);
}
::google::bigtable::v2::RowFilter* RowFilter_Chain::mutable_filters(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowFilter.Chain.filters)
  return filters_.Mutable(index);
}
::google::bigtable::v2::RowFilter* RowFilter_Chain::add_filters() {
  // @@protoc_insertion_point(field_add:google.bigtable.v2.RowFilter.Chain.filters)
  return filters_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::RowFilter >*
RowFilter_Chain::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.RowFilter.Chain.filters)
  return &filters_;
}
const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::RowFilter >&
RowFilter_Chain::filters() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.RowFilter.Chain.filters)
  return filters_;
}

inline const RowFilter_Chain* RowFilter_Chain::internal_default_instance() {
  return &RowFilter_Chain_default_instance_.get();
}
// -------------------------------------------------------------------

// RowFilter_Interleave

// repeated .google.bigtable.v2.RowFilter filters = 1;
int RowFilter_Interleave::filters_size() const {
  return filters_.size();
}
void RowFilter_Interleave::clear_filters() {
  filters_.Clear();
}
const ::google::bigtable::v2::RowFilter& RowFilter_Interleave::filters(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.Interleave.filters)
  return filters_.Get(index);
}
::google::bigtable::v2::RowFilter* RowFilter_Interleave::mutable_filters(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowFilter.Interleave.filters)
  return filters_.Mutable(index);
}
::google::bigtable::v2::RowFilter* RowFilter_Interleave::add_filters() {
  // @@protoc_insertion_point(field_add:google.bigtable.v2.RowFilter.Interleave.filters)
  return filters_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::RowFilter >*
RowFilter_Interleave::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.RowFilter.Interleave.filters)
  return &filters_;
}
const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::RowFilter >&
RowFilter_Interleave::filters() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.RowFilter.Interleave.filters)
  return filters_;
}

inline const RowFilter_Interleave* RowFilter_Interleave::internal_default_instance() {
  return &RowFilter_Interleave_default_instance_.get();
}
// -------------------------------------------------------------------

// RowFilter_Condition

// optional .google.bigtable.v2.RowFilter predicate_filter = 1;
bool RowFilter_Condition::has_predicate_filter() const {
  return this != internal_default_instance() && predicate_filter_ != NULL;
}
void RowFilter_Condition::clear_predicate_filter() {
  if (GetArenaNoVirtual() == NULL && predicate_filter_ != NULL) delete predicate_filter_;
  predicate_filter_ = NULL;
}
const ::google::bigtable::v2::RowFilter& RowFilter_Condition::predicate_filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.Condition.predicate_filter)
  return predicate_filter_ != NULL ? *predicate_filter_
                         : *::google::bigtable::v2::RowFilter::internal_default_instance();
}
::google::bigtable::v2::RowFilter* RowFilter_Condition::mutable_predicate_filter() {
  
  if (predicate_filter_ == NULL) {
    predicate_filter_ = new ::google::bigtable::v2::RowFilter;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowFilter.Condition.predicate_filter)
  return predicate_filter_;
}
::google::bigtable::v2::RowFilter* RowFilter_Condition::release_predicate_filter() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.RowFilter.Condition.predicate_filter)
  
  ::google::bigtable::v2::RowFilter* temp = predicate_filter_;
  predicate_filter_ = NULL;
  return temp;
}
void RowFilter_Condition::set_allocated_predicate_filter(::google::bigtable::v2::RowFilter* predicate_filter) {
  delete predicate_filter_;
  predicate_filter_ = predicate_filter;
  if (predicate_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.RowFilter.Condition.predicate_filter)
}

// optional .google.bigtable.v2.RowFilter true_filter = 2;
bool RowFilter_Condition::has_true_filter() const {
  return this != internal_default_instance() && true_filter_ != NULL;
}
void RowFilter_Condition::clear_true_filter() {
  if (GetArenaNoVirtual() == NULL && true_filter_ != NULL) delete true_filter_;
  true_filter_ = NULL;
}
const ::google::bigtable::v2::RowFilter& RowFilter_Condition::true_filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.Condition.true_filter)
  return true_filter_ != NULL ? *true_filter_
                         : *::google::bigtable::v2::RowFilter::internal_default_instance();
}
::google::bigtable::v2::RowFilter* RowFilter_Condition::mutable_true_filter() {
  
  if (true_filter_ == NULL) {
    true_filter_ = new ::google::bigtable::v2::RowFilter;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowFilter.Condition.true_filter)
  return true_filter_;
}
::google::bigtable::v2::RowFilter* RowFilter_Condition::release_true_filter() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.RowFilter.Condition.true_filter)
  
  ::google::bigtable::v2::RowFilter* temp = true_filter_;
  true_filter_ = NULL;
  return temp;
}
void RowFilter_Condition::set_allocated_true_filter(::google::bigtable::v2::RowFilter* true_filter) {
  delete true_filter_;
  true_filter_ = true_filter;
  if (true_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.RowFilter.Condition.true_filter)
}

// optional .google.bigtable.v2.RowFilter false_filter = 3;
bool RowFilter_Condition::has_false_filter() const {
  return this != internal_default_instance() && false_filter_ != NULL;
}
void RowFilter_Condition::clear_false_filter() {
  if (GetArenaNoVirtual() == NULL && false_filter_ != NULL) delete false_filter_;
  false_filter_ = NULL;
}
const ::google::bigtable::v2::RowFilter& RowFilter_Condition::false_filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.Condition.false_filter)
  return false_filter_ != NULL ? *false_filter_
                         : *::google::bigtable::v2::RowFilter::internal_default_instance();
}
::google::bigtable::v2::RowFilter* RowFilter_Condition::mutable_false_filter() {
  
  if (false_filter_ == NULL) {
    false_filter_ = new ::google::bigtable::v2::RowFilter;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowFilter.Condition.false_filter)
  return false_filter_;
}
::google::bigtable::v2::RowFilter* RowFilter_Condition::release_false_filter() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.RowFilter.Condition.false_filter)
  
  ::google::bigtable::v2::RowFilter* temp = false_filter_;
  false_filter_ = NULL;
  return temp;
}
void RowFilter_Condition::set_allocated_false_filter(::google::bigtable::v2::RowFilter* false_filter) {
  delete false_filter_;
  false_filter_ = false_filter;
  if (false_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.RowFilter.Condition.false_filter)
}

inline const RowFilter_Condition* RowFilter_Condition::internal_default_instance() {
  return &RowFilter_Condition_default_instance_.get();
}
// -------------------------------------------------------------------

// RowFilter

// optional .google.bigtable.v2.RowFilter.Chain chain = 1;
bool RowFilter::has_chain() const {
  return filter_case() == kChain;
}
void RowFilter::set_has_chain() {
  _oneof_case_[0] = kChain;
}
void RowFilter::clear_chain() {
  if (has_chain()) {
    delete filter_.chain_;
    clear_has_filter();
  }
}
 const ::google::bigtable::v2::RowFilter_Chain& RowFilter::chain() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.chain)
  return has_chain()
      ? *filter_.chain_
      : ::google::bigtable::v2::RowFilter_Chain::default_instance();
}
::google::bigtable::v2::RowFilter_Chain* RowFilter::mutable_chain() {
  if (!has_chain()) {
    clear_filter();
    set_has_chain();
    filter_.chain_ = new ::google::bigtable::v2::RowFilter_Chain;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowFilter.chain)
  return filter_.chain_;
}
::google::bigtable::v2::RowFilter_Chain* RowFilter::release_chain() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.RowFilter.chain)
  if (has_chain()) {
    clear_has_filter();
    ::google::bigtable::v2::RowFilter_Chain* temp = filter_.chain_;
    filter_.chain_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RowFilter::set_allocated_chain(::google::bigtable::v2::RowFilter_Chain* chain) {
  clear_filter();
  if (chain) {
    set_has_chain();
    filter_.chain_ = chain;
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.RowFilter.chain)
}

// optional .google.bigtable.v2.RowFilter.Interleave interleave = 2;
bool RowFilter::has_interleave() const {
  return filter_case() == kInterleave;
}
void RowFilter::set_has_interleave() {
  _oneof_case_[0] = kInterleave;
}
void RowFilter::clear_interleave() {
  if (has_interleave()) {
    delete filter_.interleave_;
    clear_has_filter();
  }
}
 const ::google::bigtable::v2::RowFilter_Interleave& RowFilter::interleave() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.interleave)
  return has_interleave()
      ? *filter_.interleave_
      : ::google::bigtable::v2::RowFilter_Interleave::default_instance();
}
::google::bigtable::v2::RowFilter_Interleave* RowFilter::mutable_interleave() {
  if (!has_interleave()) {
    clear_filter();
    set_has_interleave();
    filter_.interleave_ = new ::google::bigtable::v2::RowFilter_Interleave;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowFilter.interleave)
  return filter_.interleave_;
}
::google::bigtable::v2::RowFilter_Interleave* RowFilter::release_interleave() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.RowFilter.interleave)
  if (has_interleave()) {
    clear_has_filter();
    ::google::bigtable::v2::RowFilter_Interleave* temp = filter_.interleave_;
    filter_.interleave_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RowFilter::set_allocated_interleave(::google::bigtable::v2::RowFilter_Interleave* interleave) {
  clear_filter();
  if (interleave) {
    set_has_interleave();
    filter_.interleave_ = interleave;
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.RowFilter.interleave)
}

// optional .google.bigtable.v2.RowFilter.Condition condition = 3;
bool RowFilter::has_condition() const {
  return filter_case() == kCondition;
}
void RowFilter::set_has_condition() {
  _oneof_case_[0] = kCondition;
}
void RowFilter::clear_condition() {
  if (has_condition()) {
    delete filter_.condition_;
    clear_has_filter();
  }
}
 const ::google::bigtable::v2::RowFilter_Condition& RowFilter::condition() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.condition)
  return has_condition()
      ? *filter_.condition_
      : ::google::bigtable::v2::RowFilter_Condition::default_instance();
}
::google::bigtable::v2::RowFilter_Condition* RowFilter::mutable_condition() {
  if (!has_condition()) {
    clear_filter();
    set_has_condition();
    filter_.condition_ = new ::google::bigtable::v2::RowFilter_Condition;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowFilter.condition)
  return filter_.condition_;
}
::google::bigtable::v2::RowFilter_Condition* RowFilter::release_condition() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.RowFilter.condition)
  if (has_condition()) {
    clear_has_filter();
    ::google::bigtable::v2::RowFilter_Condition* temp = filter_.condition_;
    filter_.condition_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RowFilter::set_allocated_condition(::google::bigtable::v2::RowFilter_Condition* condition) {
  clear_filter();
  if (condition) {
    set_has_condition();
    filter_.condition_ = condition;
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.RowFilter.condition)
}

// optional bool sink = 16;
bool RowFilter::has_sink() const {
  return filter_case() == kSink;
}
void RowFilter::set_has_sink() {
  _oneof_case_[0] = kSink;
}
void RowFilter::clear_sink() {
  if (has_sink()) {
    filter_.sink_ = false;
    clear_has_filter();
  }
}
bool RowFilter::sink() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.sink)
  if (has_sink()) {
    return filter_.sink_;
  }
  return false;
}
void RowFilter::set_sink(bool value) {
  if (!has_sink()) {
    clear_filter();
    set_has_sink();
  }
  filter_.sink_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowFilter.sink)
}

// optional bool pass_all_filter = 17;
bool RowFilter::has_pass_all_filter() const {
  return filter_case() == kPassAllFilter;
}
void RowFilter::set_has_pass_all_filter() {
  _oneof_case_[0] = kPassAllFilter;
}
void RowFilter::clear_pass_all_filter() {
  if (has_pass_all_filter()) {
    filter_.pass_all_filter_ = false;
    clear_has_filter();
  }
}
bool RowFilter::pass_all_filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.pass_all_filter)
  if (has_pass_all_filter()) {
    return filter_.pass_all_filter_;
  }
  return false;
}
void RowFilter::set_pass_all_filter(bool value) {
  if (!has_pass_all_filter()) {
    clear_filter();
    set_has_pass_all_filter();
  }
  filter_.pass_all_filter_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowFilter.pass_all_filter)
}

// optional bool block_all_filter = 18;
bool RowFilter::has_block_all_filter() const {
  return filter_case() == kBlockAllFilter;
}
void RowFilter::set_has_block_all_filter() {
  _oneof_case_[0] = kBlockAllFilter;
}
void RowFilter::clear_block_all_filter() {
  if (has_block_all_filter()) {
    filter_.block_all_filter_ = false;
    clear_has_filter();
  }
}
bool RowFilter::block_all_filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.block_all_filter)
  if (has_block_all_filter()) {
    return filter_.block_all_filter_;
  }
  return false;
}
void RowFilter::set_block_all_filter(bool value) {
  if (!has_block_all_filter()) {
    clear_filter();
    set_has_block_all_filter();
  }
  filter_.block_all_filter_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowFilter.block_all_filter)
}

// optional bytes row_key_regex_filter = 4;
bool RowFilter::has_row_key_regex_filter() const {
  return filter_case() == kRowKeyRegexFilter;
}
void RowFilter::set_has_row_key_regex_filter() {
  _oneof_case_[0] = kRowKeyRegexFilter;
}
void RowFilter::clear_row_key_regex_filter() {
  if (has_row_key_regex_filter()) {
    filter_.row_key_regex_filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_filter();
  }
}
const ::std::string& RowFilter::row_key_regex_filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.row_key_regex_filter)
  if (has_row_key_regex_filter()) {
    return filter_.row_key_regex_filter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void RowFilter::set_row_key_regex_filter(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowFilter.row_key_regex_filter)
  if (!has_row_key_regex_filter()) {
    clear_filter();
    set_has_row_key_regex_filter();
    filter_.row_key_regex_filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.row_key_regex_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowFilter.row_key_regex_filter)
}
void RowFilter::set_row_key_regex_filter(const char* value) {
  if (!has_row_key_regex_filter()) {
    clear_filter();
    set_has_row_key_regex_filter();
    filter_.row_key_regex_filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.row_key_regex_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.RowFilter.row_key_regex_filter)
}
void RowFilter::set_row_key_regex_filter(const void* value, size_t size) {
  if (!has_row_key_regex_filter()) {
    clear_filter();
    set_has_row_key_regex_filter();
    filter_.row_key_regex_filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.row_key_regex_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.RowFilter.row_key_regex_filter)
}
::std::string* RowFilter::mutable_row_key_regex_filter() {
  if (!has_row_key_regex_filter()) {
    clear_filter();
    set_has_row_key_regex_filter();
    filter_.row_key_regex_filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowFilter.row_key_regex_filter)
  return filter_.row_key_regex_filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RowFilter::release_row_key_regex_filter() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.RowFilter.row_key_regex_filter)
  if (has_row_key_regex_filter()) {
    clear_has_filter();
    return filter_.row_key_regex_filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void RowFilter::set_allocated_row_key_regex_filter(::std::string* row_key_regex_filter) {
  if (!has_row_key_regex_filter()) {
    filter_.row_key_regex_filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_filter();
  if (row_key_regex_filter != NULL) {
    set_has_row_key_regex_filter();
    filter_.row_key_regex_filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        row_key_regex_filter);
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.RowFilter.row_key_regex_filter)
}

// optional double row_sample_filter = 14;
bool RowFilter::has_row_sample_filter() const {
  return filter_case() == kRowSampleFilter;
}
void RowFilter::set_has_row_sample_filter() {
  _oneof_case_[0] = kRowSampleFilter;
}
void RowFilter::clear_row_sample_filter() {
  if (has_row_sample_filter()) {
    filter_.row_sample_filter_ = 0;
    clear_has_filter();
  }
}
double RowFilter::row_sample_filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.row_sample_filter)
  if (has_row_sample_filter()) {
    return filter_.row_sample_filter_;
  }
  return 0;
}
void RowFilter::set_row_sample_filter(double value) {
  if (!has_row_sample_filter()) {
    clear_filter();
    set_has_row_sample_filter();
  }
  filter_.row_sample_filter_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowFilter.row_sample_filter)
}

// optional string family_name_regex_filter = 5;
bool RowFilter::has_family_name_regex_filter() const {
  return filter_case() == kFamilyNameRegexFilter;
}
void RowFilter::set_has_family_name_regex_filter() {
  _oneof_case_[0] = kFamilyNameRegexFilter;
}
void RowFilter::clear_family_name_regex_filter() {
  if (has_family_name_regex_filter()) {
    filter_.family_name_regex_filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_filter();
  }
}
const ::std::string& RowFilter::family_name_regex_filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.family_name_regex_filter)
  if (has_family_name_regex_filter()) {
    return filter_.family_name_regex_filter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void RowFilter::set_family_name_regex_filter(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowFilter.family_name_regex_filter)
  if (!has_family_name_regex_filter()) {
    clear_filter();
    set_has_family_name_regex_filter();
    filter_.family_name_regex_filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.family_name_regex_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowFilter.family_name_regex_filter)
}
void RowFilter::set_family_name_regex_filter(const char* value) {
  if (!has_family_name_regex_filter()) {
    clear_filter();
    set_has_family_name_regex_filter();
    filter_.family_name_regex_filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.family_name_regex_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.RowFilter.family_name_regex_filter)
}
void RowFilter::set_family_name_regex_filter(const char* value, size_t size) {
  if (!has_family_name_regex_filter()) {
    clear_filter();
    set_has_family_name_regex_filter();
    filter_.family_name_regex_filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.family_name_regex_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.RowFilter.family_name_regex_filter)
}
::std::string* RowFilter::mutable_family_name_regex_filter() {
  if (!has_family_name_regex_filter()) {
    clear_filter();
    set_has_family_name_regex_filter();
    filter_.family_name_regex_filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowFilter.family_name_regex_filter)
  return filter_.family_name_regex_filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RowFilter::release_family_name_regex_filter() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.RowFilter.family_name_regex_filter)
  if (has_family_name_regex_filter()) {
    clear_has_filter();
    return filter_.family_name_regex_filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void RowFilter::set_allocated_family_name_regex_filter(::std::string* family_name_regex_filter) {
  if (!has_family_name_regex_filter()) {
    filter_.family_name_regex_filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_filter();
  if (family_name_regex_filter != NULL) {
    set_has_family_name_regex_filter();
    filter_.family_name_regex_filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        family_name_regex_filter);
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.RowFilter.family_name_regex_filter)
}

// optional bytes column_qualifier_regex_filter = 6;
bool RowFilter::has_column_qualifier_regex_filter() const {
  return filter_case() == kColumnQualifierRegexFilter;
}
void RowFilter::set_has_column_qualifier_regex_filter() {
  _oneof_case_[0] = kColumnQualifierRegexFilter;
}
void RowFilter::clear_column_qualifier_regex_filter() {
  if (has_column_qualifier_regex_filter()) {
    filter_.column_qualifier_regex_filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_filter();
  }
}
const ::std::string& RowFilter::column_qualifier_regex_filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.column_qualifier_regex_filter)
  if (has_column_qualifier_regex_filter()) {
    return filter_.column_qualifier_regex_filter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void RowFilter::set_column_qualifier_regex_filter(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowFilter.column_qualifier_regex_filter)
  if (!has_column_qualifier_regex_filter()) {
    clear_filter();
    set_has_column_qualifier_regex_filter();
    filter_.column_qualifier_regex_filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.column_qualifier_regex_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowFilter.column_qualifier_regex_filter)
}
void RowFilter::set_column_qualifier_regex_filter(const char* value) {
  if (!has_column_qualifier_regex_filter()) {
    clear_filter();
    set_has_column_qualifier_regex_filter();
    filter_.column_qualifier_regex_filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.column_qualifier_regex_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.RowFilter.column_qualifier_regex_filter)
}
void RowFilter::set_column_qualifier_regex_filter(const void* value, size_t size) {
  if (!has_column_qualifier_regex_filter()) {
    clear_filter();
    set_has_column_qualifier_regex_filter();
    filter_.column_qualifier_regex_filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.column_qualifier_regex_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.RowFilter.column_qualifier_regex_filter)
}
::std::string* RowFilter::mutable_column_qualifier_regex_filter() {
  if (!has_column_qualifier_regex_filter()) {
    clear_filter();
    set_has_column_qualifier_regex_filter();
    filter_.column_qualifier_regex_filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowFilter.column_qualifier_regex_filter)
  return filter_.column_qualifier_regex_filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RowFilter::release_column_qualifier_regex_filter() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.RowFilter.column_qualifier_regex_filter)
  if (has_column_qualifier_regex_filter()) {
    clear_has_filter();
    return filter_.column_qualifier_regex_filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void RowFilter::set_allocated_column_qualifier_regex_filter(::std::string* column_qualifier_regex_filter) {
  if (!has_column_qualifier_regex_filter()) {
    filter_.column_qualifier_regex_filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_filter();
  if (column_qualifier_regex_filter != NULL) {
    set_has_column_qualifier_regex_filter();
    filter_.column_qualifier_regex_filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        column_qualifier_regex_filter);
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.RowFilter.column_qualifier_regex_filter)
}

// optional .google.bigtable.v2.ColumnRange column_range_filter = 7;
bool RowFilter::has_column_range_filter() const {
  return filter_case() == kColumnRangeFilter;
}
void RowFilter::set_has_column_range_filter() {
  _oneof_case_[0] = kColumnRangeFilter;
}
void RowFilter::clear_column_range_filter() {
  if (has_column_range_filter()) {
    delete filter_.column_range_filter_;
    clear_has_filter();
  }
}
 const ::google::bigtable::v2::ColumnRange& RowFilter::column_range_filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.column_range_filter)
  return has_column_range_filter()
      ? *filter_.column_range_filter_
      : ::google::bigtable::v2::ColumnRange::default_instance();
}
::google::bigtable::v2::ColumnRange* RowFilter::mutable_column_range_filter() {
  if (!has_column_range_filter()) {
    clear_filter();
    set_has_column_range_filter();
    filter_.column_range_filter_ = new ::google::bigtable::v2::ColumnRange;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowFilter.column_range_filter)
  return filter_.column_range_filter_;
}
::google::bigtable::v2::ColumnRange* RowFilter::release_column_range_filter() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.RowFilter.column_range_filter)
  if (has_column_range_filter()) {
    clear_has_filter();
    ::google::bigtable::v2::ColumnRange* temp = filter_.column_range_filter_;
    filter_.column_range_filter_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RowFilter::set_allocated_column_range_filter(::google::bigtable::v2::ColumnRange* column_range_filter) {
  clear_filter();
  if (column_range_filter) {
    set_has_column_range_filter();
    filter_.column_range_filter_ = column_range_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.RowFilter.column_range_filter)
}

// optional .google.bigtable.v2.TimestampRange timestamp_range_filter = 8;
bool RowFilter::has_timestamp_range_filter() const {
  return filter_case() == kTimestampRangeFilter;
}
void RowFilter::set_has_timestamp_range_filter() {
  _oneof_case_[0] = kTimestampRangeFilter;
}
void RowFilter::clear_timestamp_range_filter() {
  if (has_timestamp_range_filter()) {
    delete filter_.timestamp_range_filter_;
    clear_has_filter();
  }
}
 const ::google::bigtable::v2::TimestampRange& RowFilter::timestamp_range_filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.timestamp_range_filter)
  return has_timestamp_range_filter()
      ? *filter_.timestamp_range_filter_
      : ::google::bigtable::v2::TimestampRange::default_instance();
}
::google::bigtable::v2::TimestampRange* RowFilter::mutable_timestamp_range_filter() {
  if (!has_timestamp_range_filter()) {
    clear_filter();
    set_has_timestamp_range_filter();
    filter_.timestamp_range_filter_ = new ::google::bigtable::v2::TimestampRange;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowFilter.timestamp_range_filter)
  return filter_.timestamp_range_filter_;
}
::google::bigtable::v2::TimestampRange* RowFilter::release_timestamp_range_filter() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.RowFilter.timestamp_range_filter)
  if (has_timestamp_range_filter()) {
    clear_has_filter();
    ::google::bigtable::v2::TimestampRange* temp = filter_.timestamp_range_filter_;
    filter_.timestamp_range_filter_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RowFilter::set_allocated_timestamp_range_filter(::google::bigtable::v2::TimestampRange* timestamp_range_filter) {
  clear_filter();
  if (timestamp_range_filter) {
    set_has_timestamp_range_filter();
    filter_.timestamp_range_filter_ = timestamp_range_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.RowFilter.timestamp_range_filter)
}

// optional bytes value_regex_filter = 9;
bool RowFilter::has_value_regex_filter() const {
  return filter_case() == kValueRegexFilter;
}
void RowFilter::set_has_value_regex_filter() {
  _oneof_case_[0] = kValueRegexFilter;
}
void RowFilter::clear_value_regex_filter() {
  if (has_value_regex_filter()) {
    filter_.value_regex_filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_filter();
  }
}
const ::std::string& RowFilter::value_regex_filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.value_regex_filter)
  if (has_value_regex_filter()) {
    return filter_.value_regex_filter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void RowFilter::set_value_regex_filter(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowFilter.value_regex_filter)
  if (!has_value_regex_filter()) {
    clear_filter();
    set_has_value_regex_filter();
    filter_.value_regex_filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.value_regex_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowFilter.value_regex_filter)
}
void RowFilter::set_value_regex_filter(const char* value) {
  if (!has_value_regex_filter()) {
    clear_filter();
    set_has_value_regex_filter();
    filter_.value_regex_filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.value_regex_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.RowFilter.value_regex_filter)
}
void RowFilter::set_value_regex_filter(const void* value, size_t size) {
  if (!has_value_regex_filter()) {
    clear_filter();
    set_has_value_regex_filter();
    filter_.value_regex_filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.value_regex_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.RowFilter.value_regex_filter)
}
::std::string* RowFilter::mutable_value_regex_filter() {
  if (!has_value_regex_filter()) {
    clear_filter();
    set_has_value_regex_filter();
    filter_.value_regex_filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowFilter.value_regex_filter)
  return filter_.value_regex_filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RowFilter::release_value_regex_filter() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.RowFilter.value_regex_filter)
  if (has_value_regex_filter()) {
    clear_has_filter();
    return filter_.value_regex_filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void RowFilter::set_allocated_value_regex_filter(::std::string* value_regex_filter) {
  if (!has_value_regex_filter()) {
    filter_.value_regex_filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_filter();
  if (value_regex_filter != NULL) {
    set_has_value_regex_filter();
    filter_.value_regex_filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        value_regex_filter);
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.RowFilter.value_regex_filter)
}

// optional .google.bigtable.v2.ValueRange value_range_filter = 15;
bool RowFilter::has_value_range_filter() const {
  return filter_case() == kValueRangeFilter;
}
void RowFilter::set_has_value_range_filter() {
  _oneof_case_[0] = kValueRangeFilter;
}
void RowFilter::clear_value_range_filter() {
  if (has_value_range_filter()) {
    delete filter_.value_range_filter_;
    clear_has_filter();
  }
}
 const ::google::bigtable::v2::ValueRange& RowFilter::value_range_filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.value_range_filter)
  return has_value_range_filter()
      ? *filter_.value_range_filter_
      : ::google::bigtable::v2::ValueRange::default_instance();
}
::google::bigtable::v2::ValueRange* RowFilter::mutable_value_range_filter() {
  if (!has_value_range_filter()) {
    clear_filter();
    set_has_value_range_filter();
    filter_.value_range_filter_ = new ::google::bigtable::v2::ValueRange;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowFilter.value_range_filter)
  return filter_.value_range_filter_;
}
::google::bigtable::v2::ValueRange* RowFilter::release_value_range_filter() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.RowFilter.value_range_filter)
  if (has_value_range_filter()) {
    clear_has_filter();
    ::google::bigtable::v2::ValueRange* temp = filter_.value_range_filter_;
    filter_.value_range_filter_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RowFilter::set_allocated_value_range_filter(::google::bigtable::v2::ValueRange* value_range_filter) {
  clear_filter();
  if (value_range_filter) {
    set_has_value_range_filter();
    filter_.value_range_filter_ = value_range_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.RowFilter.value_range_filter)
}

// optional int32 cells_per_row_offset_filter = 10;
bool RowFilter::has_cells_per_row_offset_filter() const {
  return filter_case() == kCellsPerRowOffsetFilter;
}
void RowFilter::set_has_cells_per_row_offset_filter() {
  _oneof_case_[0] = kCellsPerRowOffsetFilter;
}
void RowFilter::clear_cells_per_row_offset_filter() {
  if (has_cells_per_row_offset_filter()) {
    filter_.cells_per_row_offset_filter_ = 0;
    clear_has_filter();
  }
}
::google::protobuf::int32 RowFilter::cells_per_row_offset_filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.cells_per_row_offset_filter)
  if (has_cells_per_row_offset_filter()) {
    return filter_.cells_per_row_offset_filter_;
  }
  return 0;
}
void RowFilter::set_cells_per_row_offset_filter(::google::protobuf::int32 value) {
  if (!has_cells_per_row_offset_filter()) {
    clear_filter();
    set_has_cells_per_row_offset_filter();
  }
  filter_.cells_per_row_offset_filter_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowFilter.cells_per_row_offset_filter)
}

// optional int32 cells_per_row_limit_filter = 11;
bool RowFilter::has_cells_per_row_limit_filter() const {
  return filter_case() == kCellsPerRowLimitFilter;
}
void RowFilter::set_has_cells_per_row_limit_filter() {
  _oneof_case_[0] = kCellsPerRowLimitFilter;
}
void RowFilter::clear_cells_per_row_limit_filter() {
  if (has_cells_per_row_limit_filter()) {
    filter_.cells_per_row_limit_filter_ = 0;
    clear_has_filter();
  }
}
::google::protobuf::int32 RowFilter::cells_per_row_limit_filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.cells_per_row_limit_filter)
  if (has_cells_per_row_limit_filter()) {
    return filter_.cells_per_row_limit_filter_;
  }
  return 0;
}
void RowFilter::set_cells_per_row_limit_filter(::google::protobuf::int32 value) {
  if (!has_cells_per_row_limit_filter()) {
    clear_filter();
    set_has_cells_per_row_limit_filter();
  }
  filter_.cells_per_row_limit_filter_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowFilter.cells_per_row_limit_filter)
}

// optional int32 cells_per_column_limit_filter = 12;
bool RowFilter::has_cells_per_column_limit_filter() const {
  return filter_case() == kCellsPerColumnLimitFilter;
}
void RowFilter::set_has_cells_per_column_limit_filter() {
  _oneof_case_[0] = kCellsPerColumnLimitFilter;
}
void RowFilter::clear_cells_per_column_limit_filter() {
  if (has_cells_per_column_limit_filter()) {
    filter_.cells_per_column_limit_filter_ = 0;
    clear_has_filter();
  }
}
::google::protobuf::int32 RowFilter::cells_per_column_limit_filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.cells_per_column_limit_filter)
  if (has_cells_per_column_limit_filter()) {
    return filter_.cells_per_column_limit_filter_;
  }
  return 0;
}
void RowFilter::set_cells_per_column_limit_filter(::google::protobuf::int32 value) {
  if (!has_cells_per_column_limit_filter()) {
    clear_filter();
    set_has_cells_per_column_limit_filter();
  }
  filter_.cells_per_column_limit_filter_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowFilter.cells_per_column_limit_filter)
}

// optional bool strip_value_transformer = 13;
bool RowFilter::has_strip_value_transformer() const {
  return filter_case() == kStripValueTransformer;
}
void RowFilter::set_has_strip_value_transformer() {
  _oneof_case_[0] = kStripValueTransformer;
}
void RowFilter::clear_strip_value_transformer() {
  if (has_strip_value_transformer()) {
    filter_.strip_value_transformer_ = false;
    clear_has_filter();
  }
}
bool RowFilter::strip_value_transformer() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.strip_value_transformer)
  if (has_strip_value_transformer()) {
    return filter_.strip_value_transformer_;
  }
  return false;
}
void RowFilter::set_strip_value_transformer(bool value) {
  if (!has_strip_value_transformer()) {
    clear_filter();
    set_has_strip_value_transformer();
  }
  filter_.strip_value_transformer_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowFilter.strip_value_transformer)
}

// optional string apply_label_transformer = 19;
bool RowFilter::has_apply_label_transformer() const {
  return filter_case() == kApplyLabelTransformer;
}
void RowFilter::set_has_apply_label_transformer() {
  _oneof_case_[0] = kApplyLabelTransformer;
}
void RowFilter::clear_apply_label_transformer() {
  if (has_apply_label_transformer()) {
    filter_.apply_label_transformer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_filter();
  }
}
const ::std::string& RowFilter::apply_label_transformer() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.RowFilter.apply_label_transformer)
  if (has_apply_label_transformer()) {
    return filter_.apply_label_transformer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void RowFilter::set_apply_label_transformer(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowFilter.apply_label_transformer)
  if (!has_apply_label_transformer()) {
    clear_filter();
    set_has_apply_label_transformer();
    filter_.apply_label_transformer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.apply_label_transformer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.RowFilter.apply_label_transformer)
}
void RowFilter::set_apply_label_transformer(const char* value) {
  if (!has_apply_label_transformer()) {
    clear_filter();
    set_has_apply_label_transformer();
    filter_.apply_label_transformer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.apply_label_transformer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.RowFilter.apply_label_transformer)
}
void RowFilter::set_apply_label_transformer(const char* value, size_t size) {
  if (!has_apply_label_transformer()) {
    clear_filter();
    set_has_apply_label_transformer();
    filter_.apply_label_transformer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.apply_label_transformer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.RowFilter.apply_label_transformer)
}
::std::string* RowFilter::mutable_apply_label_transformer() {
  if (!has_apply_label_transformer()) {
    clear_filter();
    set_has_apply_label_transformer();
    filter_.apply_label_transformer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.RowFilter.apply_label_transformer)
  return filter_.apply_label_transformer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RowFilter::release_apply_label_transformer() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.RowFilter.apply_label_transformer)
  if (has_apply_label_transformer()) {
    clear_has_filter();
    return filter_.apply_label_transformer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void RowFilter::set_allocated_apply_label_transformer(::std::string* apply_label_transformer) {
  if (!has_apply_label_transformer()) {
    filter_.apply_label_transformer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_filter();
  if (apply_label_transformer != NULL) {
    set_has_apply_label_transformer();
    filter_.apply_label_transformer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        apply_label_transformer);
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.RowFilter.apply_label_transformer)
}

bool RowFilter::has_filter() const {
  return filter_case() != FILTER_NOT_SET;
}
void RowFilter::clear_has_filter() {
  _oneof_case_[0] = FILTER_NOT_SET;
}
RowFilter::FilterCase RowFilter::filter_case() const {
  return RowFilter::FilterCase(_oneof_case_[0]);
}
inline const RowFilter* RowFilter::internal_default_instance() {
  return &RowFilter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mutation_SetCell::kFamilyNameFieldNumber;
const int Mutation_SetCell::kColumnQualifierFieldNumber;
const int Mutation_SetCell::kTimestampMicrosFieldNumber;
const int Mutation_SetCell::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mutation_SetCell::Mutation_SetCell()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v2.Mutation.SetCell)
}

void Mutation_SetCell::InitAsDefaultInstance() {
}

Mutation_SetCell::Mutation_SetCell(const Mutation_SetCell& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v2.Mutation.SetCell)
}

void Mutation_SetCell::SharedCtor() {
  family_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  column_qualifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_micros_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

Mutation_SetCell::~Mutation_SetCell() {
  // @@protoc_insertion_point(destructor:google.bigtable.v2.Mutation.SetCell)
  SharedDtor();
}

void Mutation_SetCell::SharedDtor() {
  family_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  column_qualifier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Mutation_SetCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mutation_SetCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mutation_SetCell_descriptor_;
}

const Mutation_SetCell& Mutation_SetCell::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Mutation_SetCell> Mutation_SetCell_default_instance_;

Mutation_SetCell* Mutation_SetCell::New(::google::protobuf::Arena* arena) const {
  Mutation_SetCell* n = new Mutation_SetCell;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mutation_SetCell::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v2.Mutation.SetCell)
  family_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  column_qualifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_micros_ = GOOGLE_LONGLONG(0);
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Mutation_SetCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v2.Mutation.SetCell)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string family_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_family_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->family_name().data(), this->family_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.v2.Mutation.SetCell.family_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_column_qualifier;
        break;
      }

      // optional bytes column_qualifier = 2;
      case 2: {
        if (tag == 18) {
         parse_column_qualifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_column_qualifier()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_timestamp_micros;
        break;
      }

      // optional int64 timestamp_micros = 3;
      case 3: {
        if (tag == 24) {
         parse_timestamp_micros:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_micros_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }

      // optional bytes value = 4;
      case 4: {
        if (tag == 34) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v2.Mutation.SetCell)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v2.Mutation.SetCell)
  return false;
#undef DO_
}

void Mutation_SetCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v2.Mutation.SetCell)
  // optional string family_name = 1;
  if (this->family_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v2.Mutation.SetCell.family_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->family_name(), output);
  }

  // optional bytes column_qualifier = 2;
  if (this->column_qualifier().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->column_qualifier(), output);
  }

  // optional int64 timestamp_micros = 3;
  if (this->timestamp_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp_micros(), output);
  }

  // optional bytes value = 4;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v2.Mutation.SetCell)
}

::google::protobuf::uint8* Mutation_SetCell::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v2.Mutation.SetCell)
  // optional string family_name = 1;
  if (this->family_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v2.Mutation.SetCell.family_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->family_name(), target);
  }

  // optional bytes column_qualifier = 2;
  if (this->column_qualifier().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->column_qualifier(), target);
  }

  // optional int64 timestamp_micros = 3;
  if (this->timestamp_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timestamp_micros(), target);
  }

  // optional bytes value = 4;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v2.Mutation.SetCell)
  return target;
}

size_t Mutation_SetCell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v2.Mutation.SetCell)
  size_t total_size = 0;

  // optional string family_name = 1;
  if (this->family_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->family_name());
  }

  // optional bytes column_qualifier = 2;
  if (this->column_qualifier().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->column_qualifier());
  }

  // optional int64 timestamp_micros = 3;
  if (this->timestamp_micros() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp_micros());
  }

  // optional bytes value = 4;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mutation_SetCell::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v2.Mutation.SetCell)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Mutation_SetCell* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mutation_SetCell>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v2.Mutation.SetCell)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v2.Mutation.SetCell)
    UnsafeMergeFrom(*source);
  }
}

void Mutation_SetCell::MergeFrom(const Mutation_SetCell& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v2.Mutation.SetCell)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Mutation_SetCell::UnsafeMergeFrom(const Mutation_SetCell& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.family_name().size() > 0) {

    family_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.family_name_);
  }
  if (from.column_qualifier().size() > 0) {

    column_qualifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.column_qualifier_);
  }
  if (from.timestamp_micros() != 0) {
    set_timestamp_micros(from.timestamp_micros());
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void Mutation_SetCell::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v2.Mutation.SetCell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mutation_SetCell::CopyFrom(const Mutation_SetCell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v2.Mutation.SetCell)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Mutation_SetCell::IsInitialized() const {

  return true;
}

void Mutation_SetCell::Swap(Mutation_SetCell* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mutation_SetCell::InternalSwap(Mutation_SetCell* other) {
  family_name_.Swap(&other->family_name_);
  column_qualifier_.Swap(&other->column_qualifier_);
  std::swap(timestamp_micros_, other->timestamp_micros_);
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mutation_SetCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mutation_SetCell_descriptor_;
  metadata.reflection = Mutation_SetCell_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mutation_DeleteFromColumn::kFamilyNameFieldNumber;
const int Mutation_DeleteFromColumn::kColumnQualifierFieldNumber;
const int Mutation_DeleteFromColumn::kTimeRangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mutation_DeleteFromColumn::Mutation_DeleteFromColumn()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v2.Mutation.DeleteFromColumn)
}

void Mutation_DeleteFromColumn::InitAsDefaultInstance() {
  time_range_ = const_cast< ::google::bigtable::v2::TimestampRange*>(
      ::google::bigtable::v2::TimestampRange::internal_default_instance());
}

Mutation_DeleteFromColumn::Mutation_DeleteFromColumn(const Mutation_DeleteFromColumn& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v2.Mutation.DeleteFromColumn)
}

void Mutation_DeleteFromColumn::SharedCtor() {
  family_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  column_qualifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_range_ = NULL;
  _cached_size_ = 0;
}

Mutation_DeleteFromColumn::~Mutation_DeleteFromColumn() {
  // @@protoc_insertion_point(destructor:google.bigtable.v2.Mutation.DeleteFromColumn)
  SharedDtor();
}

void Mutation_DeleteFromColumn::SharedDtor() {
  family_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  column_qualifier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &Mutation_DeleteFromColumn_default_instance_.get()) {
    delete time_range_;
  }
}

void Mutation_DeleteFromColumn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mutation_DeleteFromColumn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mutation_DeleteFromColumn_descriptor_;
}

const Mutation_DeleteFromColumn& Mutation_DeleteFromColumn::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Mutation_DeleteFromColumn> Mutation_DeleteFromColumn_default_instance_;

Mutation_DeleteFromColumn* Mutation_DeleteFromColumn::New(::google::protobuf::Arena* arena) const {
  Mutation_DeleteFromColumn* n = new Mutation_DeleteFromColumn;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mutation_DeleteFromColumn::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v2.Mutation.DeleteFromColumn)
  family_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  column_qualifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && time_range_ != NULL) delete time_range_;
  time_range_ = NULL;
}

bool Mutation_DeleteFromColumn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v2.Mutation.DeleteFromColumn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string family_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_family_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->family_name().data(), this->family_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.v2.Mutation.DeleteFromColumn.family_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_column_qualifier;
        break;
      }

      // optional bytes column_qualifier = 2;
      case 2: {
        if (tag == 18) {
         parse_column_qualifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_column_qualifier()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_time_range;
        break;
      }

      // optional .google.bigtable.v2.TimestampRange time_range = 3;
      case 3: {
        if (tag == 26) {
         parse_time_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v2.Mutation.DeleteFromColumn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v2.Mutation.DeleteFromColumn)
  return false;
#undef DO_
}

void Mutation_DeleteFromColumn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v2.Mutation.DeleteFromColumn)
  // optional string family_name = 1;
  if (this->family_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v2.Mutation.DeleteFromColumn.family_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->family_name(), output);
  }

  // optional bytes column_qualifier = 2;
  if (this->column_qualifier().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->column_qualifier(), output);
  }

  // optional .google.bigtable.v2.TimestampRange time_range = 3;
  if (this->has_time_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->time_range_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v2.Mutation.DeleteFromColumn)
}

::google::protobuf::uint8* Mutation_DeleteFromColumn::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v2.Mutation.DeleteFromColumn)
  // optional string family_name = 1;
  if (this->family_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v2.Mutation.DeleteFromColumn.family_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->family_name(), target);
  }

  // optional bytes column_qualifier = 2;
  if (this->column_qualifier().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->column_qualifier(), target);
  }

  // optional .google.bigtable.v2.TimestampRange time_range = 3;
  if (this->has_time_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->time_range_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v2.Mutation.DeleteFromColumn)
  return target;
}

size_t Mutation_DeleteFromColumn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v2.Mutation.DeleteFromColumn)
  size_t total_size = 0;

  // optional string family_name = 1;
  if (this->family_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->family_name());
  }

  // optional bytes column_qualifier = 2;
  if (this->column_qualifier().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->column_qualifier());
  }

  // optional .google.bigtable.v2.TimestampRange time_range = 3;
  if (this->has_time_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->time_range_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mutation_DeleteFromColumn::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v2.Mutation.DeleteFromColumn)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Mutation_DeleteFromColumn* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mutation_DeleteFromColumn>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v2.Mutation.DeleteFromColumn)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v2.Mutation.DeleteFromColumn)
    UnsafeMergeFrom(*source);
  }
}

void Mutation_DeleteFromColumn::MergeFrom(const Mutation_DeleteFromColumn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v2.Mutation.DeleteFromColumn)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Mutation_DeleteFromColumn::UnsafeMergeFrom(const Mutation_DeleteFromColumn& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.family_name().size() > 0) {

    family_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.family_name_);
  }
  if (from.column_qualifier().size() > 0) {

    column_qualifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.column_qualifier_);
  }
  if (from.has_time_range()) {
    mutable_time_range()->::google::bigtable::v2::TimestampRange::MergeFrom(from.time_range());
  }
}

void Mutation_DeleteFromColumn::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v2.Mutation.DeleteFromColumn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mutation_DeleteFromColumn::CopyFrom(const Mutation_DeleteFromColumn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v2.Mutation.DeleteFromColumn)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Mutation_DeleteFromColumn::IsInitialized() const {

  return true;
}

void Mutation_DeleteFromColumn::Swap(Mutation_DeleteFromColumn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mutation_DeleteFromColumn::InternalSwap(Mutation_DeleteFromColumn* other) {
  family_name_.Swap(&other->family_name_);
  column_qualifier_.Swap(&other->column_qualifier_);
  std::swap(time_range_, other->time_range_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mutation_DeleteFromColumn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mutation_DeleteFromColumn_descriptor_;
  metadata.reflection = Mutation_DeleteFromColumn_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mutation_DeleteFromFamily::kFamilyNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mutation_DeleteFromFamily::Mutation_DeleteFromFamily()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v2.Mutation.DeleteFromFamily)
}

void Mutation_DeleteFromFamily::InitAsDefaultInstance() {
}

Mutation_DeleteFromFamily::Mutation_DeleteFromFamily(const Mutation_DeleteFromFamily& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v2.Mutation.DeleteFromFamily)
}

void Mutation_DeleteFromFamily::SharedCtor() {
  family_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Mutation_DeleteFromFamily::~Mutation_DeleteFromFamily() {
  // @@protoc_insertion_point(destructor:google.bigtable.v2.Mutation.DeleteFromFamily)
  SharedDtor();
}

void Mutation_DeleteFromFamily::SharedDtor() {
  family_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Mutation_DeleteFromFamily::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mutation_DeleteFromFamily::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mutation_DeleteFromFamily_descriptor_;
}

const Mutation_DeleteFromFamily& Mutation_DeleteFromFamily::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Mutation_DeleteFromFamily> Mutation_DeleteFromFamily_default_instance_;

Mutation_DeleteFromFamily* Mutation_DeleteFromFamily::New(::google::protobuf::Arena* arena) const {
  Mutation_DeleteFromFamily* n = new Mutation_DeleteFromFamily;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mutation_DeleteFromFamily::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v2.Mutation.DeleteFromFamily)
  family_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Mutation_DeleteFromFamily::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v2.Mutation.DeleteFromFamily)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string family_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_family_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->family_name().data(), this->family_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.v2.Mutation.DeleteFromFamily.family_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v2.Mutation.DeleteFromFamily)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v2.Mutation.DeleteFromFamily)
  return false;
#undef DO_
}

void Mutation_DeleteFromFamily::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v2.Mutation.DeleteFromFamily)
  // optional string family_name = 1;
  if (this->family_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v2.Mutation.DeleteFromFamily.family_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->family_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v2.Mutation.DeleteFromFamily)
}

::google::protobuf::uint8* Mutation_DeleteFromFamily::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v2.Mutation.DeleteFromFamily)
  // optional string family_name = 1;
  if (this->family_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v2.Mutation.DeleteFromFamily.family_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->family_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v2.Mutation.DeleteFromFamily)
  return target;
}

size_t Mutation_DeleteFromFamily::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v2.Mutation.DeleteFromFamily)
  size_t total_size = 0;

  // optional string family_name = 1;
  if (this->family_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->family_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mutation_DeleteFromFamily::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v2.Mutation.DeleteFromFamily)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Mutation_DeleteFromFamily* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mutation_DeleteFromFamily>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v2.Mutation.DeleteFromFamily)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v2.Mutation.DeleteFromFamily)
    UnsafeMergeFrom(*source);
  }
}

void Mutation_DeleteFromFamily::MergeFrom(const Mutation_DeleteFromFamily& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v2.Mutation.DeleteFromFamily)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Mutation_DeleteFromFamily::UnsafeMergeFrom(const Mutation_DeleteFromFamily& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.family_name().size() > 0) {

    family_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.family_name_);
  }
}

void Mutation_DeleteFromFamily::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v2.Mutation.DeleteFromFamily)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mutation_DeleteFromFamily::CopyFrom(const Mutation_DeleteFromFamily& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v2.Mutation.DeleteFromFamily)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Mutation_DeleteFromFamily::IsInitialized() const {

  return true;
}

void Mutation_DeleteFromFamily::Swap(Mutation_DeleteFromFamily* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mutation_DeleteFromFamily::InternalSwap(Mutation_DeleteFromFamily* other) {
  family_name_.Swap(&other->family_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mutation_DeleteFromFamily::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mutation_DeleteFromFamily_descriptor_;
  metadata.reflection = Mutation_DeleteFromFamily_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mutation_DeleteFromRow::Mutation_DeleteFromRow()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v2.Mutation.DeleteFromRow)
}

void Mutation_DeleteFromRow::InitAsDefaultInstance() {
}

Mutation_DeleteFromRow::Mutation_DeleteFromRow(const Mutation_DeleteFromRow& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v2.Mutation.DeleteFromRow)
}

void Mutation_DeleteFromRow::SharedCtor() {
  _cached_size_ = 0;
}

Mutation_DeleteFromRow::~Mutation_DeleteFromRow() {
  // @@protoc_insertion_point(destructor:google.bigtable.v2.Mutation.DeleteFromRow)
  SharedDtor();
}

void Mutation_DeleteFromRow::SharedDtor() {
}

void Mutation_DeleteFromRow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mutation_DeleteFromRow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mutation_DeleteFromRow_descriptor_;
}

const Mutation_DeleteFromRow& Mutation_DeleteFromRow::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Mutation_DeleteFromRow> Mutation_DeleteFromRow_default_instance_;

Mutation_DeleteFromRow* Mutation_DeleteFromRow::New(::google::protobuf::Arena* arena) const {
  Mutation_DeleteFromRow* n = new Mutation_DeleteFromRow;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mutation_DeleteFromRow::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v2.Mutation.DeleteFromRow)
}

bool Mutation_DeleteFromRow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v2.Mutation.DeleteFromRow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v2.Mutation.DeleteFromRow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v2.Mutation.DeleteFromRow)
  return false;
#undef DO_
}

void Mutation_DeleteFromRow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v2.Mutation.DeleteFromRow)
  // @@protoc_insertion_point(serialize_end:google.bigtable.v2.Mutation.DeleteFromRow)
}

::google::protobuf::uint8* Mutation_DeleteFromRow::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v2.Mutation.DeleteFromRow)
  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v2.Mutation.DeleteFromRow)
  return target;
}

size_t Mutation_DeleteFromRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v2.Mutation.DeleteFromRow)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mutation_DeleteFromRow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v2.Mutation.DeleteFromRow)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Mutation_DeleteFromRow* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mutation_DeleteFromRow>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v2.Mutation.DeleteFromRow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v2.Mutation.DeleteFromRow)
    UnsafeMergeFrom(*source);
  }
}

void Mutation_DeleteFromRow::MergeFrom(const Mutation_DeleteFromRow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v2.Mutation.DeleteFromRow)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Mutation_DeleteFromRow::UnsafeMergeFrom(const Mutation_DeleteFromRow& from) {
  GOOGLE_DCHECK(&from != this);
}

void Mutation_DeleteFromRow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v2.Mutation.DeleteFromRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mutation_DeleteFromRow::CopyFrom(const Mutation_DeleteFromRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v2.Mutation.DeleteFromRow)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Mutation_DeleteFromRow::IsInitialized() const {

  return true;
}

void Mutation_DeleteFromRow::Swap(Mutation_DeleteFromRow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mutation_DeleteFromRow::InternalSwap(Mutation_DeleteFromRow* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mutation_DeleteFromRow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mutation_DeleteFromRow_descriptor_;
  metadata.reflection = Mutation_DeleteFromRow_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mutation::kSetCellFieldNumber;
const int Mutation::kDeleteFromColumnFieldNumber;
const int Mutation::kDeleteFromFamilyFieldNumber;
const int Mutation::kDeleteFromRowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mutation::Mutation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v2.Mutation)
}

void Mutation::InitAsDefaultInstance() {
  Mutation_default_oneof_instance_->set_cell_ = const_cast< ::google::bigtable::v2::Mutation_SetCell*>(
      ::google::bigtable::v2::Mutation_SetCell::internal_default_instance());
  Mutation_default_oneof_instance_->delete_from_column_ = const_cast< ::google::bigtable::v2::Mutation_DeleteFromColumn*>(
      ::google::bigtable::v2::Mutation_DeleteFromColumn::internal_default_instance());
  Mutation_default_oneof_instance_->delete_from_family_ = const_cast< ::google::bigtable::v2::Mutation_DeleteFromFamily*>(
      ::google::bigtable::v2::Mutation_DeleteFromFamily::internal_default_instance());
  Mutation_default_oneof_instance_->delete_from_row_ = const_cast< ::google::bigtable::v2::Mutation_DeleteFromRow*>(
      ::google::bigtable::v2::Mutation_DeleteFromRow::internal_default_instance());
}

Mutation::Mutation(const Mutation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v2.Mutation)
}

void Mutation::SharedCtor() {
  clear_has_mutation();
  _cached_size_ = 0;
}

Mutation::~Mutation() {
  // @@protoc_insertion_point(destructor:google.bigtable.v2.Mutation)
  SharedDtor();
}

void Mutation::SharedDtor() {
  if (has_mutation()) {
    clear_mutation();
  }
}

void Mutation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mutation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mutation_descriptor_;
}

const Mutation& Mutation::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Mutation> Mutation_default_instance_;

Mutation* Mutation::New(::google::protobuf::Arena* arena) const {
  Mutation* n = new Mutation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mutation::clear_mutation() {
// @@protoc_insertion_point(one_of_clear_start:google.bigtable.v2.Mutation)
  switch (mutation_case()) {
    case kSetCell: {
      delete mutation_.set_cell_;
      break;
    }
    case kDeleteFromColumn: {
      delete mutation_.delete_from_column_;
      break;
    }
    case kDeleteFromFamily: {
      delete mutation_.delete_from_family_;
      break;
    }
    case kDeleteFromRow: {
      delete mutation_.delete_from_row_;
      break;
    }
    case MUTATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MUTATION_NOT_SET;
}


void Mutation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v2.Mutation)
  clear_mutation();
}

bool Mutation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v2.Mutation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.bigtable.v2.Mutation.SetCell set_cell = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set_cell()));
        } else {
          goto handle_unusual;
        }
        goto after_delete_from_row;
        break;
      }

      // optional .google.bigtable.v2.Mutation.DeleteFromColumn delete_from_column = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_from_column()));
        } else {
          goto handle_unusual;
        }
        goto after_delete_from_row;
        break;
      }

      // optional .google.bigtable.v2.Mutation.DeleteFromFamily delete_from_family = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_from_family()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_delete_from_row;
        break;
      }

      // optional .google.bigtable.v2.Mutation.DeleteFromRow delete_from_row = 4;
      case 4: {
        if (tag == 34) {
         parse_delete_from_row:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_from_row()));
        } else {
          goto handle_unusual;
        }
       after_delete_from_row:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v2.Mutation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v2.Mutation)
  return false;
#undef DO_
}

void Mutation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v2.Mutation)
  // optional .google.bigtable.v2.Mutation.SetCell set_cell = 1;
  if (has_set_cell()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *mutation_.set_cell_, output);
  }

  // optional .google.bigtable.v2.Mutation.DeleteFromColumn delete_from_column = 2;
  if (has_delete_from_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *mutation_.delete_from_column_, output);
  }

  // optional .google.bigtable.v2.Mutation.DeleteFromFamily delete_from_family = 3;
  if (has_delete_from_family()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *mutation_.delete_from_family_, output);
  }

  // optional .google.bigtable.v2.Mutation.DeleteFromRow delete_from_row = 4;
  if (has_delete_from_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *mutation_.delete_from_row_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v2.Mutation)
}

::google::protobuf::uint8* Mutation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v2.Mutation)
  // optional .google.bigtable.v2.Mutation.SetCell set_cell = 1;
  if (has_set_cell()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *mutation_.set_cell_, false, target);
  }

  // optional .google.bigtable.v2.Mutation.DeleteFromColumn delete_from_column = 2;
  if (has_delete_from_column()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *mutation_.delete_from_column_, false, target);
  }

  // optional .google.bigtable.v2.Mutation.DeleteFromFamily delete_from_family = 3;
  if (has_delete_from_family()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *mutation_.delete_from_family_, false, target);
  }

  // optional .google.bigtable.v2.Mutation.DeleteFromRow delete_from_row = 4;
  if (has_delete_from_row()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *mutation_.delete_from_row_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v2.Mutation)
  return target;
}

size_t Mutation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v2.Mutation)
  size_t total_size = 0;

  switch (mutation_case()) {
    // optional .google.bigtable.v2.Mutation.SetCell set_cell = 1;
    case kSetCell: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *mutation_.set_cell_);
      break;
    }
    // optional .google.bigtable.v2.Mutation.DeleteFromColumn delete_from_column = 2;
    case kDeleteFromColumn: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *mutation_.delete_from_column_);
      break;
    }
    // optional .google.bigtable.v2.Mutation.DeleteFromFamily delete_from_family = 3;
    case kDeleteFromFamily: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *mutation_.delete_from_family_);
      break;
    }
    // optional .google.bigtable.v2.Mutation.DeleteFromRow delete_from_row = 4;
    case kDeleteFromRow: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *mutation_.delete_from_row_);
      break;
    }
    case MUTATION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mutation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v2.Mutation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Mutation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mutation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v2.Mutation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v2.Mutation)
    UnsafeMergeFrom(*source);
  }
}

void Mutation::MergeFrom(const Mutation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v2.Mutation)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Mutation::UnsafeMergeFrom(const Mutation& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.mutation_case()) {
    case kSetCell: {
      mutable_set_cell()->::google::bigtable::v2::Mutation_SetCell::MergeFrom(from.set_cell());
      break;
    }
    case kDeleteFromColumn: {
      mutable_delete_from_column()->::google::bigtable::v2::Mutation_DeleteFromColumn::MergeFrom(from.delete_from_column());
      break;
    }
    case kDeleteFromFamily: {
      mutable_delete_from_family()->::google::bigtable::v2::Mutation_DeleteFromFamily::MergeFrom(from.delete_from_family());
      break;
    }
    case kDeleteFromRow: {
      mutable_delete_from_row()->::google::bigtable::v2::Mutation_DeleteFromRow::MergeFrom(from.delete_from_row());
      break;
    }
    case MUTATION_NOT_SET: {
      break;
    }
  }
}

void Mutation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v2.Mutation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mutation::CopyFrom(const Mutation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v2.Mutation)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Mutation::IsInitialized() const {

  return true;
}

void Mutation::Swap(Mutation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mutation::InternalSwap(Mutation* other) {
  std::swap(mutation_, other->mutation_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mutation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mutation_descriptor_;
  metadata.reflection = Mutation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mutation_SetCell

// optional string family_name = 1;
void Mutation_SetCell::clear_family_name() {
  family_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Mutation_SetCell::family_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.Mutation.SetCell.family_name)
  return family_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mutation_SetCell::set_family_name(const ::std::string& value) {
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.Mutation.SetCell.family_name)
}
void Mutation_SetCell::set_family_name(const char* value) {
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.Mutation.SetCell.family_name)
}
void Mutation_SetCell::set_family_name(const char* value, size_t size) {
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.Mutation.SetCell.family_name)
}
::std::string* Mutation_SetCell::mutable_family_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.Mutation.SetCell.family_name)
  return family_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Mutation_SetCell::release_family_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.Mutation.SetCell.family_name)
  
  return family_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mutation_SetCell::set_allocated_family_name(::std::string* family_name) {
  if (family_name != NULL) {
    
  } else {
    
  }
  family_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), family_name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.Mutation.SetCell.family_name)
}

// optional bytes column_qualifier = 2;
void Mutation_SetCell::clear_column_qualifier() {
  column_qualifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Mutation_SetCell::column_qualifier() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.Mutation.SetCell.column_qualifier)
  return column_qualifier_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mutation_SetCell::set_column_qualifier(const ::std::string& value) {
  
  column_qualifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.Mutation.SetCell.column_qualifier)
}
void Mutation_SetCell::set_column_qualifier(const char* value) {
  
  column_qualifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.Mutation.SetCell.column_qualifier)
}
void Mutation_SetCell::set_column_qualifier(const void* value, size_t size) {
  
  column_qualifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.Mutation.SetCell.column_qualifier)
}
::std::string* Mutation_SetCell::mutable_column_qualifier() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.Mutation.SetCell.column_qualifier)
  return column_qualifier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Mutation_SetCell::release_column_qualifier() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.Mutation.SetCell.column_qualifier)
  
  return column_qualifier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mutation_SetCell::set_allocated_column_qualifier(::std::string* column_qualifier) {
  if (column_qualifier != NULL) {
    
  } else {
    
  }
  column_qualifier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), column_qualifier);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.Mutation.SetCell.column_qualifier)
}

// optional int64 timestamp_micros = 3;
void Mutation_SetCell::clear_timestamp_micros() {
  timestamp_micros_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Mutation_SetCell::timestamp_micros() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.Mutation.SetCell.timestamp_micros)
  return timestamp_micros_;
}
void Mutation_SetCell::set_timestamp_micros(::google::protobuf::int64 value) {
  
  timestamp_micros_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v2.Mutation.SetCell.timestamp_micros)
}

// optional bytes value = 4;
void Mutation_SetCell::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Mutation_SetCell::value() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.Mutation.SetCell.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mutation_SetCell::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.Mutation.SetCell.value)
}
void Mutation_SetCell::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.Mutation.SetCell.value)
}
void Mutation_SetCell::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.Mutation.SetCell.value)
}
::std::string* Mutation_SetCell::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.Mutation.SetCell.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Mutation_SetCell::release_value() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.Mutation.SetCell.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mutation_SetCell::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.Mutation.SetCell.value)
}

inline const Mutation_SetCell* Mutation_SetCell::internal_default_instance() {
  return &Mutation_SetCell_default_instance_.get();
}
// -------------------------------------------------------------------

// Mutation_DeleteFromColumn

// optional string family_name = 1;
void Mutation_DeleteFromColumn::clear_family_name() {
  family_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Mutation_DeleteFromColumn::family_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.Mutation.DeleteFromColumn.family_name)
  return family_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mutation_DeleteFromColumn::set_family_name(const ::std::string& value) {
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.Mutation.DeleteFromColumn.family_name)
}
void Mutation_DeleteFromColumn::set_family_name(const char* value) {
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.Mutation.DeleteFromColumn.family_name)
}
void Mutation_DeleteFromColumn::set_family_name(const char* value, size_t size) {
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.Mutation.DeleteFromColumn.family_name)
}
::std::string* Mutation_DeleteFromColumn::mutable_family_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.Mutation.DeleteFromColumn.family_name)
  return family_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Mutation_DeleteFromColumn::release_family_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.Mutation.DeleteFromColumn.family_name)
  
  return family_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mutation_DeleteFromColumn::set_allocated_family_name(::std::string* family_name) {
  if (family_name != NULL) {
    
  } else {
    
  }
  family_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), family_name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.Mutation.DeleteFromColumn.family_name)
}

// optional bytes column_qualifier = 2;
void Mutation_DeleteFromColumn::clear_column_qualifier() {
  column_qualifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Mutation_DeleteFromColumn::column_qualifier() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.Mutation.DeleteFromColumn.column_qualifier)
  return column_qualifier_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mutation_DeleteFromColumn::set_column_qualifier(const ::std::string& value) {
  
  column_qualifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.Mutation.DeleteFromColumn.column_qualifier)
}
void Mutation_DeleteFromColumn::set_column_qualifier(const char* value) {
  
  column_qualifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.Mutation.DeleteFromColumn.column_qualifier)
}
void Mutation_DeleteFromColumn::set_column_qualifier(const void* value, size_t size) {
  
  column_qualifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.Mutation.DeleteFromColumn.column_qualifier)
}
::std::string* Mutation_DeleteFromColumn::mutable_column_qualifier() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.Mutation.DeleteFromColumn.column_qualifier)
  return column_qualifier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Mutation_DeleteFromColumn::release_column_qualifier() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.Mutation.DeleteFromColumn.column_qualifier)
  
  return column_qualifier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mutation_DeleteFromColumn::set_allocated_column_qualifier(::std::string* column_qualifier) {
  if (column_qualifier != NULL) {
    
  } else {
    
  }
  column_qualifier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), column_qualifier);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.Mutation.DeleteFromColumn.column_qualifier)
}

// optional .google.bigtable.v2.TimestampRange time_range = 3;
bool Mutation_DeleteFromColumn::has_time_range() const {
  return this != internal_default_instance() && time_range_ != NULL;
}
void Mutation_DeleteFromColumn::clear_time_range() {
  if (GetArenaNoVirtual() == NULL && time_range_ != NULL) delete time_range_;
  time_range_ = NULL;
}
const ::google::bigtable::v2::TimestampRange& Mutation_DeleteFromColumn::time_range() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.Mutation.DeleteFromColumn.time_range)
  return time_range_ != NULL ? *time_range_
                         : *::google::bigtable::v2::TimestampRange::internal_default_instance();
}
::google::bigtable::v2::TimestampRange* Mutation_DeleteFromColumn::mutable_time_range() {
  
  if (time_range_ == NULL) {
    time_range_ = new ::google::bigtable::v2::TimestampRange;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.Mutation.DeleteFromColumn.time_range)
  return time_range_;
}
::google::bigtable::v2::TimestampRange* Mutation_DeleteFromColumn::release_time_range() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.Mutation.DeleteFromColumn.time_range)
  
  ::google::bigtable::v2::TimestampRange* temp = time_range_;
  time_range_ = NULL;
  return temp;
}
void Mutation_DeleteFromColumn::set_allocated_time_range(::google::bigtable::v2::TimestampRange* time_range) {
  delete time_range_;
  time_range_ = time_range;
  if (time_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.Mutation.DeleteFromColumn.time_range)
}

inline const Mutation_DeleteFromColumn* Mutation_DeleteFromColumn::internal_default_instance() {
  return &Mutation_DeleteFromColumn_default_instance_.get();
}
// -------------------------------------------------------------------

// Mutation_DeleteFromFamily

// optional string family_name = 1;
void Mutation_DeleteFromFamily::clear_family_name() {
  family_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Mutation_DeleteFromFamily::family_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.Mutation.DeleteFromFamily.family_name)
  return family_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mutation_DeleteFromFamily::set_family_name(const ::std::string& value) {
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.Mutation.DeleteFromFamily.family_name)
}
void Mutation_DeleteFromFamily::set_family_name(const char* value) {
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.Mutation.DeleteFromFamily.family_name)
}
void Mutation_DeleteFromFamily::set_family_name(const char* value, size_t size) {
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.Mutation.DeleteFromFamily.family_name)
}
::std::string* Mutation_DeleteFromFamily::mutable_family_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.Mutation.DeleteFromFamily.family_name)
  return family_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Mutation_DeleteFromFamily::release_family_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.Mutation.DeleteFromFamily.family_name)
  
  return family_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mutation_DeleteFromFamily::set_allocated_family_name(::std::string* family_name) {
  if (family_name != NULL) {
    
  } else {
    
  }
  family_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), family_name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.Mutation.DeleteFromFamily.family_name)
}

inline const Mutation_DeleteFromFamily* Mutation_DeleteFromFamily::internal_default_instance() {
  return &Mutation_DeleteFromFamily_default_instance_.get();
}
// -------------------------------------------------------------------

// Mutation_DeleteFromRow

inline const Mutation_DeleteFromRow* Mutation_DeleteFromRow::internal_default_instance() {
  return &Mutation_DeleteFromRow_default_instance_.get();
}
// -------------------------------------------------------------------

// Mutation

// optional .google.bigtable.v2.Mutation.SetCell set_cell = 1;
bool Mutation::has_set_cell() const {
  return mutation_case() == kSetCell;
}
void Mutation::set_has_set_cell() {
  _oneof_case_[0] = kSetCell;
}
void Mutation::clear_set_cell() {
  if (has_set_cell()) {
    delete mutation_.set_cell_;
    clear_has_mutation();
  }
}
 const ::google::bigtable::v2::Mutation_SetCell& Mutation::set_cell() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.Mutation.set_cell)
  return has_set_cell()
      ? *mutation_.set_cell_
      : ::google::bigtable::v2::Mutation_SetCell::default_instance();
}
::google::bigtable::v2::Mutation_SetCell* Mutation::mutable_set_cell() {
  if (!has_set_cell()) {
    clear_mutation();
    set_has_set_cell();
    mutation_.set_cell_ = new ::google::bigtable::v2::Mutation_SetCell;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.Mutation.set_cell)
  return mutation_.set_cell_;
}
::google::bigtable::v2::Mutation_SetCell* Mutation::release_set_cell() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.Mutation.set_cell)
  if (has_set_cell()) {
    clear_has_mutation();
    ::google::bigtable::v2::Mutation_SetCell* temp = mutation_.set_cell_;
    mutation_.set_cell_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Mutation::set_allocated_set_cell(::google::bigtable::v2::Mutation_SetCell* set_cell) {
  clear_mutation();
  if (set_cell) {
    set_has_set_cell();
    mutation_.set_cell_ = set_cell;
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.Mutation.set_cell)
}

// optional .google.bigtable.v2.Mutation.DeleteFromColumn delete_from_column = 2;
bool Mutation::has_delete_from_column() const {
  return mutation_case() == kDeleteFromColumn;
}
void Mutation::set_has_delete_from_column() {
  _oneof_case_[0] = kDeleteFromColumn;
}
void Mutation::clear_delete_from_column() {
  if (has_delete_from_column()) {
    delete mutation_.delete_from_column_;
    clear_has_mutation();
  }
}
 const ::google::bigtable::v2::Mutation_DeleteFromColumn& Mutation::delete_from_column() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.Mutation.delete_from_column)
  return has_delete_from_column()
      ? *mutation_.delete_from_column_
      : ::google::bigtable::v2::Mutation_DeleteFromColumn::default_instance();
}
::google::bigtable::v2::Mutation_DeleteFromColumn* Mutation::mutable_delete_from_column() {
  if (!has_delete_from_column()) {
    clear_mutation();
    set_has_delete_from_column();
    mutation_.delete_from_column_ = new ::google::bigtable::v2::Mutation_DeleteFromColumn;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.Mutation.delete_from_column)
  return mutation_.delete_from_column_;
}
::google::bigtable::v2::Mutation_DeleteFromColumn* Mutation::release_delete_from_column() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.Mutation.delete_from_column)
  if (has_delete_from_column()) {
    clear_has_mutation();
    ::google::bigtable::v2::Mutation_DeleteFromColumn* temp = mutation_.delete_from_column_;
    mutation_.delete_from_column_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Mutation::set_allocated_delete_from_column(::google::bigtable::v2::Mutation_DeleteFromColumn* delete_from_column) {
  clear_mutation();
  if (delete_from_column) {
    set_has_delete_from_column();
    mutation_.delete_from_column_ = delete_from_column;
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.Mutation.delete_from_column)
}

// optional .google.bigtable.v2.Mutation.DeleteFromFamily delete_from_family = 3;
bool Mutation::has_delete_from_family() const {
  return mutation_case() == kDeleteFromFamily;
}
void Mutation::set_has_delete_from_family() {
  _oneof_case_[0] = kDeleteFromFamily;
}
void Mutation::clear_delete_from_family() {
  if (has_delete_from_family()) {
    delete mutation_.delete_from_family_;
    clear_has_mutation();
  }
}
 const ::google::bigtable::v2::Mutation_DeleteFromFamily& Mutation::delete_from_family() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.Mutation.delete_from_family)
  return has_delete_from_family()
      ? *mutation_.delete_from_family_
      : ::google::bigtable::v2::Mutation_DeleteFromFamily::default_instance();
}
::google::bigtable::v2::Mutation_DeleteFromFamily* Mutation::mutable_delete_from_family() {
  if (!has_delete_from_family()) {
    clear_mutation();
    set_has_delete_from_family();
    mutation_.delete_from_family_ = new ::google::bigtable::v2::Mutation_DeleteFromFamily;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.Mutation.delete_from_family)
  return mutation_.delete_from_family_;
}
::google::bigtable::v2::Mutation_DeleteFromFamily* Mutation::release_delete_from_family() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.Mutation.delete_from_family)
  if (has_delete_from_family()) {
    clear_has_mutation();
    ::google::bigtable::v2::Mutation_DeleteFromFamily* temp = mutation_.delete_from_family_;
    mutation_.delete_from_family_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Mutation::set_allocated_delete_from_family(::google::bigtable::v2::Mutation_DeleteFromFamily* delete_from_family) {
  clear_mutation();
  if (delete_from_family) {
    set_has_delete_from_family();
    mutation_.delete_from_family_ = delete_from_family;
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.Mutation.delete_from_family)
}

// optional .google.bigtable.v2.Mutation.DeleteFromRow delete_from_row = 4;
bool Mutation::has_delete_from_row() const {
  return mutation_case() == kDeleteFromRow;
}
void Mutation::set_has_delete_from_row() {
  _oneof_case_[0] = kDeleteFromRow;
}
void Mutation::clear_delete_from_row() {
  if (has_delete_from_row()) {
    delete mutation_.delete_from_row_;
    clear_has_mutation();
  }
}
 const ::google::bigtable::v2::Mutation_DeleteFromRow& Mutation::delete_from_row() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.Mutation.delete_from_row)
  return has_delete_from_row()
      ? *mutation_.delete_from_row_
      : ::google::bigtable::v2::Mutation_DeleteFromRow::default_instance();
}
::google::bigtable::v2::Mutation_DeleteFromRow* Mutation::mutable_delete_from_row() {
  if (!has_delete_from_row()) {
    clear_mutation();
    set_has_delete_from_row();
    mutation_.delete_from_row_ = new ::google::bigtable::v2::Mutation_DeleteFromRow;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.Mutation.delete_from_row)
  return mutation_.delete_from_row_;
}
::google::bigtable::v2::Mutation_DeleteFromRow* Mutation::release_delete_from_row() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.Mutation.delete_from_row)
  if (has_delete_from_row()) {
    clear_has_mutation();
    ::google::bigtable::v2::Mutation_DeleteFromRow* temp = mutation_.delete_from_row_;
    mutation_.delete_from_row_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Mutation::set_allocated_delete_from_row(::google::bigtable::v2::Mutation_DeleteFromRow* delete_from_row) {
  clear_mutation();
  if (delete_from_row) {
    set_has_delete_from_row();
    mutation_.delete_from_row_ = delete_from_row;
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.Mutation.delete_from_row)
}

bool Mutation::has_mutation() const {
  return mutation_case() != MUTATION_NOT_SET;
}
void Mutation::clear_has_mutation() {
  _oneof_case_[0] = MUTATION_NOT_SET;
}
Mutation::MutationCase Mutation::mutation_case() const {
  return Mutation::MutationCase(_oneof_case_[0]);
}
inline const Mutation* Mutation::internal_default_instance() {
  return &Mutation_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadModifyWriteRule::kFamilyNameFieldNumber;
const int ReadModifyWriteRule::kColumnQualifierFieldNumber;
const int ReadModifyWriteRule::kAppendValueFieldNumber;
const int ReadModifyWriteRule::kIncrementAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadModifyWriteRule::ReadModifyWriteRule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v2.ReadModifyWriteRule)
}

void ReadModifyWriteRule::InitAsDefaultInstance() {
  ReadModifyWriteRule_default_oneof_instance_->append_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ReadModifyWriteRule_default_oneof_instance_->increment_amount_ = GOOGLE_LONGLONG(0);
}

ReadModifyWriteRule::ReadModifyWriteRule(const ReadModifyWriteRule& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v2.ReadModifyWriteRule)
}

void ReadModifyWriteRule::SharedCtor() {
  family_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  column_qualifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rule();
  _cached_size_ = 0;
}

ReadModifyWriteRule::~ReadModifyWriteRule() {
  // @@protoc_insertion_point(destructor:google.bigtable.v2.ReadModifyWriteRule)
  SharedDtor();
}

void ReadModifyWriteRule::SharedDtor() {
  family_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  column_qualifier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_rule()) {
    clear_rule();
  }
}

void ReadModifyWriteRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadModifyWriteRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadModifyWriteRule_descriptor_;
}

const ReadModifyWriteRule& ReadModifyWriteRule::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fv2_2fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReadModifyWriteRule> ReadModifyWriteRule_default_instance_;

ReadModifyWriteRule* ReadModifyWriteRule::New(::google::protobuf::Arena* arena) const {
  ReadModifyWriteRule* n = new ReadModifyWriteRule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadModifyWriteRule::clear_rule() {
// @@protoc_insertion_point(one_of_clear_start:google.bigtable.v2.ReadModifyWriteRule)
  switch (rule_case()) {
    case kAppendValue: {
      rule_.append_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kIncrementAmount: {
      // No need to clear
      break;
    }
    case RULE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RULE_NOT_SET;
}


void ReadModifyWriteRule::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v2.ReadModifyWriteRule)
  family_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  column_qualifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_rule();
}

bool ReadModifyWriteRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v2.ReadModifyWriteRule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string family_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_family_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->family_name().data(), this->family_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.v2.ReadModifyWriteRule.family_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_column_qualifier;
        break;
      }

      // optional bytes column_qualifier = 2;
      case 2: {
        if (tag == 18) {
         parse_column_qualifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_column_qualifier()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_append_value;
        break;
      }

      // optional bytes append_value = 3;
      case 3: {
        if (tag == 26) {
         parse_append_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_append_value()));
        } else {
          goto handle_unusual;
        }
        goto after_increment_amount;
        break;
      }

      // optional int64 increment_amount = 4;
      case 4: {
        if (tag == 32) {
          clear_rule();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rule_.increment_amount_)));
          set_has_increment_amount();
        } else {
          goto handle_unusual;
        }
       after_increment_amount:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v2.ReadModifyWriteRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v2.ReadModifyWriteRule)
  return false;
#undef DO_
}

void ReadModifyWriteRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v2.ReadModifyWriteRule)
  // optional string family_name = 1;
  if (this->family_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v2.ReadModifyWriteRule.family_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->family_name(), output);
  }

  // optional bytes column_qualifier = 2;
  if (this->column_qualifier().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->column_qualifier(), output);
  }

  // optional bytes append_value = 3;
  if (has_append_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->append_value(), output);
  }

  // optional int64 increment_amount = 4;
  if (has_increment_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->increment_amount(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v2.ReadModifyWriteRule)
}

::google::protobuf::uint8* ReadModifyWriteRule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v2.ReadModifyWriteRule)
  // optional string family_name = 1;
  if (this->family_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v2.ReadModifyWriteRule.family_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->family_name(), target);
  }

  // optional bytes column_qualifier = 2;
  if (this->column_qualifier().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->column_qualifier(), target);
  }

  // optional bytes append_value = 3;
  if (has_append_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->append_value(), target);
  }

  // optional int64 increment_amount = 4;
  if (has_increment_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->increment_amount(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v2.ReadModifyWriteRule)
  return target;
}

size_t ReadModifyWriteRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v2.ReadModifyWriteRule)
  size_t total_size = 0;

  // optional string family_name = 1;
  if (this->family_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->family_name());
  }

  // optional bytes column_qualifier = 2;
  if (this->column_qualifier().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->column_qualifier());
  }

  switch (rule_case()) {
    // optional bytes append_value = 3;
    case kAppendValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->append_value());
      break;
    }
    // optional int64 increment_amount = 4;
    case kIncrementAmount: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->increment_amount());
      break;
    }
    case RULE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadModifyWriteRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v2.ReadModifyWriteRule)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReadModifyWriteRule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadModifyWriteRule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v2.ReadModifyWriteRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v2.ReadModifyWriteRule)
    UnsafeMergeFrom(*source);
  }
}

void ReadModifyWriteRule::MergeFrom(const ReadModifyWriteRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v2.ReadModifyWriteRule)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReadModifyWriteRule::UnsafeMergeFrom(const ReadModifyWriteRule& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.rule_case()) {
    case kAppendValue: {
      set_append_value(from.append_value());
      break;
    }
    case kIncrementAmount: {
      set_increment_amount(from.increment_amount());
      break;
    }
    case RULE_NOT_SET: {
      break;
    }
  }
  if (from.family_name().size() > 0) {

    family_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.family_name_);
  }
  if (from.column_qualifier().size() > 0) {

    column_qualifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.column_qualifier_);
  }
}

void ReadModifyWriteRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v2.ReadModifyWriteRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadModifyWriteRule::CopyFrom(const ReadModifyWriteRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v2.ReadModifyWriteRule)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReadModifyWriteRule::IsInitialized() const {

  return true;
}

void ReadModifyWriteRule::Swap(ReadModifyWriteRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadModifyWriteRule::InternalSwap(ReadModifyWriteRule* other) {
  family_name_.Swap(&other->family_name_);
  column_qualifier_.Swap(&other->column_qualifier_);
  std::swap(rule_, other->rule_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadModifyWriteRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadModifyWriteRule_descriptor_;
  metadata.reflection = ReadModifyWriteRule_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadModifyWriteRule

// optional string family_name = 1;
void ReadModifyWriteRule::clear_family_name() {
  family_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReadModifyWriteRule::family_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadModifyWriteRule.family_name)
  return family_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReadModifyWriteRule::set_family_name(const ::std::string& value) {
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadModifyWriteRule.family_name)
}
void ReadModifyWriteRule::set_family_name(const char* value) {
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ReadModifyWriteRule.family_name)
}
void ReadModifyWriteRule::set_family_name(const char* value, size_t size) {
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ReadModifyWriteRule.family_name)
}
::std::string* ReadModifyWriteRule::mutable_family_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadModifyWriteRule.family_name)
  return family_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReadModifyWriteRule::release_family_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadModifyWriteRule.family_name)
  
  return family_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReadModifyWriteRule::set_allocated_family_name(::std::string* family_name) {
  if (family_name != NULL) {
    
  } else {
    
  }
  family_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), family_name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadModifyWriteRule.family_name)
}

// optional bytes column_qualifier = 2;
void ReadModifyWriteRule::clear_column_qualifier() {
  column_qualifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReadModifyWriteRule::column_qualifier() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadModifyWriteRule.column_qualifier)
  return column_qualifier_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReadModifyWriteRule::set_column_qualifier(const ::std::string& value) {
  
  column_qualifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadModifyWriteRule.column_qualifier)
}
void ReadModifyWriteRule::set_column_qualifier(const char* value) {
  
  column_qualifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ReadModifyWriteRule.column_qualifier)
}
void ReadModifyWriteRule::set_column_qualifier(const void* value, size_t size) {
  
  column_qualifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ReadModifyWriteRule.column_qualifier)
}
::std::string* ReadModifyWriteRule::mutable_column_qualifier() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadModifyWriteRule.column_qualifier)
  return column_qualifier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReadModifyWriteRule::release_column_qualifier() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadModifyWriteRule.column_qualifier)
  
  return column_qualifier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReadModifyWriteRule::set_allocated_column_qualifier(::std::string* column_qualifier) {
  if (column_qualifier != NULL) {
    
  } else {
    
  }
  column_qualifier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), column_qualifier);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadModifyWriteRule.column_qualifier)
}

// optional bytes append_value = 3;
bool ReadModifyWriteRule::has_append_value() const {
  return rule_case() == kAppendValue;
}
void ReadModifyWriteRule::set_has_append_value() {
  _oneof_case_[0] = kAppendValue;
}
void ReadModifyWriteRule::clear_append_value() {
  if (has_append_value()) {
    rule_.append_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_rule();
  }
}
const ::std::string& ReadModifyWriteRule::append_value() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadModifyWriteRule.append_value)
  if (has_append_value()) {
    return rule_.append_value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void ReadModifyWriteRule::set_append_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadModifyWriteRule.append_value)
  if (!has_append_value()) {
    clear_rule();
    set_has_append_value();
    rule_.append_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  rule_.append_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadModifyWriteRule.append_value)
}
void ReadModifyWriteRule::set_append_value(const char* value) {
  if (!has_append_value()) {
    clear_rule();
    set_has_append_value();
    rule_.append_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  rule_.append_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ReadModifyWriteRule.append_value)
}
void ReadModifyWriteRule::set_append_value(const void* value, size_t size) {
  if (!has_append_value()) {
    clear_rule();
    set_has_append_value();
    rule_.append_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  rule_.append_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ReadModifyWriteRule.append_value)
}
::std::string* ReadModifyWriteRule::mutable_append_value() {
  if (!has_append_value()) {
    clear_rule();
    set_has_append_value();
    rule_.append_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadModifyWriteRule.append_value)
  return rule_.append_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReadModifyWriteRule::release_append_value() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadModifyWriteRule.append_value)
  if (has_append_value()) {
    clear_has_rule();
    return rule_.append_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void ReadModifyWriteRule::set_allocated_append_value(::std::string* append_value) {
  if (!has_append_value()) {
    rule_.append_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_rule();
  if (append_value != NULL) {
    set_has_append_value();
    rule_.append_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        append_value);
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadModifyWriteRule.append_value)
}

// optional int64 increment_amount = 4;
bool ReadModifyWriteRule::has_increment_amount() const {
  return rule_case() == kIncrementAmount;
}
void ReadModifyWriteRule::set_has_increment_amount() {
  _oneof_case_[0] = kIncrementAmount;
}
void ReadModifyWriteRule::clear_increment_amount() {
  if (has_increment_amount()) {
    rule_.increment_amount_ = GOOGLE_LONGLONG(0);
    clear_has_rule();
  }
}
::google::protobuf::int64 ReadModifyWriteRule::increment_amount() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadModifyWriteRule.increment_amount)
  if (has_increment_amount()) {
    return rule_.increment_amount_;
  }
  return GOOGLE_LONGLONG(0);
}
void ReadModifyWriteRule::set_increment_amount(::google::protobuf::int64 value) {
  if (!has_increment_amount()) {
    clear_rule();
    set_has_increment_amount();
  }
  rule_.increment_amount_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadModifyWriteRule.increment_amount)
}

bool ReadModifyWriteRule::has_rule() const {
  return rule_case() != RULE_NOT_SET;
}
void ReadModifyWriteRule::clear_has_rule() {
  _oneof_case_[0] = RULE_NOT_SET;
}
ReadModifyWriteRule::RuleCase ReadModifyWriteRule::rule_case() const {
  return ReadModifyWriteRule::RuleCase(_oneof_case_[0]);
}
inline const ReadModifyWriteRule* ReadModifyWriteRule::internal_default_instance() {
  return &ReadModifyWriteRule_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace bigtable
}  // namespace google

// @@protoc_insertion_point(global_scope)
