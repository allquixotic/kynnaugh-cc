// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/genomics/v1/variants.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/genomics/v1/variants.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace genomics {
namespace v1 {

namespace {

const ::google::protobuf::Descriptor* VariantSetMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VariantSetMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* VariantSetMetadata_InfoEntry_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* VariantSetMetadata_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* VariantSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VariantSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* Variant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Variant_reflection_ = NULL;
const ::google::protobuf::Descriptor* Variant_InfoEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* VariantCall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VariantCall_reflection_ = NULL;
const ::google::protobuf::Descriptor* VariantCall_InfoEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CallSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CallSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* CallSet_InfoEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReferenceBound_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReferenceBound_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImportVariantsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImportVariantsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImportVariantsRequest_InfoMergeConfigEntry_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ImportVariantsRequest_Format_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ImportVariantsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImportVariantsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateVariantSetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateVariantSetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExportVariantSetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExportVariantSetRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ExportVariantSetRequest_Format_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GetVariantSetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetVariantSetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchVariantSetsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchVariantSetsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchVariantSetsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchVariantSetsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteVariantSetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteVariantSetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateVariantSetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateVariantSetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchVariantsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchVariantsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchVariantsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchVariantsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateVariantRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateVariantRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateVariantRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateVariantRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteVariantRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteVariantRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetVariantRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetVariantRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MergeVariantsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MergeVariantsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MergeVariantsRequest_InfoMergeConfigEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SearchCallSetsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchCallSetsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchCallSetsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchCallSetsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateCallSetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateCallSetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateCallSetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateCallSetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteCallSetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteCallSetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetCallSetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetCallSetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamVariantsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamVariantsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamVariantsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamVariantsResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* InfoMergeOperation_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_google_2fgenomics_2fv1_2fvariants_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_google_2fgenomics_2fv1_2fvariants_2eproto() {
  protobuf_AddDesc_google_2fgenomics_2fv1_2fvariants_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "google/genomics/v1/variants.proto");
  GOOGLE_CHECK(file != NULL);
  VariantSetMetadata_descriptor_ = file->message_type(0);
  static const int VariantSetMetadata_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantSetMetadata, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantSetMetadata, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantSetMetadata, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantSetMetadata, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantSetMetadata, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantSetMetadata, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantSetMetadata, info_),
  };
  VariantSetMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VariantSetMetadata_descriptor_,
      VariantSetMetadata::internal_default_instance(),
      VariantSetMetadata_offsets_,
      -1,
      -1,
      -1,
      sizeof(VariantSetMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantSetMetadata, _internal_metadata_));
  VariantSetMetadata_InfoEntry_descriptor_ = VariantSetMetadata_descriptor_->nested_type(0);
  VariantSetMetadata_Type_descriptor_ = VariantSetMetadata_descriptor_->enum_type(0);
  VariantSet_descriptor_ = file->message_type(1);
  static const int VariantSet_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantSet, dataset_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantSet, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantSet, reference_set_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantSet, reference_bounds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantSet, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantSet, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantSet, description_),
  };
  VariantSet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VariantSet_descriptor_,
      VariantSet::internal_default_instance(),
      VariantSet_offsets_,
      -1,
      -1,
      -1,
      sizeof(VariantSet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantSet, _internal_metadata_));
  Variant_descriptor_ = file->message_type(2);
  static const int Variant_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variant, variant_set_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variant, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variant, names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variant, created_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variant, reference_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variant, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variant, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variant, reference_bases_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variant, alternate_bases_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variant, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variant, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variant, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variant, calls_),
  };
  Variant_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Variant_descriptor_,
      Variant::internal_default_instance(),
      Variant_offsets_,
      -1,
      -1,
      -1,
      sizeof(Variant),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variant, _internal_metadata_));
  Variant_InfoEntry_descriptor_ = Variant_descriptor_->nested_type(0);
  VariantCall_descriptor_ = file->message_type(3);
  static const int VariantCall_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantCall, call_set_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantCall, call_set_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantCall, genotype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantCall, phaseset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantCall, genotype_likelihood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantCall, info_),
  };
  VariantCall_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VariantCall_descriptor_,
      VariantCall::internal_default_instance(),
      VariantCall_offsets_,
      -1,
      -1,
      -1,
      sizeof(VariantCall),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantCall, _internal_metadata_));
  VariantCall_InfoEntry_descriptor_ = VariantCall_descriptor_->nested_type(0);
  CallSet_descriptor_ = file->message_type(4);
  static const int CallSet_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallSet, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallSet, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallSet, sample_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallSet, variant_set_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallSet, created_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallSet, info_),
  };
  CallSet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CallSet_descriptor_,
      CallSet::internal_default_instance(),
      CallSet_offsets_,
      -1,
      -1,
      -1,
      sizeof(CallSet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallSet, _internal_metadata_));
  CallSet_InfoEntry_descriptor_ = CallSet_descriptor_->nested_type(0);
  ReferenceBound_descriptor_ = file->message_type(5);
  static const int ReferenceBound_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceBound, reference_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceBound, upper_bound_),
  };
  ReferenceBound_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReferenceBound_descriptor_,
      ReferenceBound::internal_default_instance(),
      ReferenceBound_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReferenceBound),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceBound, _internal_metadata_));
  ImportVariantsRequest_descriptor_ = file->message_type(6);
  static const int ImportVariantsRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportVariantsRequest, variant_set_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportVariantsRequest, source_uris_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportVariantsRequest, format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportVariantsRequest, normalize_reference_names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportVariantsRequest, info_merge_config_),
  };
  ImportVariantsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ImportVariantsRequest_descriptor_,
      ImportVariantsRequest::internal_default_instance(),
      ImportVariantsRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ImportVariantsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportVariantsRequest, _internal_metadata_));
  ImportVariantsRequest_InfoMergeConfigEntry_descriptor_ = ImportVariantsRequest_descriptor_->nested_type(0);
  ImportVariantsRequest_Format_descriptor_ = ImportVariantsRequest_descriptor_->enum_type(0);
  ImportVariantsResponse_descriptor_ = file->message_type(7);
  static const int ImportVariantsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportVariantsResponse, call_set_ids_),
  };
  ImportVariantsResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ImportVariantsResponse_descriptor_,
      ImportVariantsResponse::internal_default_instance(),
      ImportVariantsResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ImportVariantsResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportVariantsResponse, _internal_metadata_));
  CreateVariantSetRequest_descriptor_ = file->message_type(8);
  static const int CreateVariantSetRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateVariantSetRequest, variant_set_),
  };
  CreateVariantSetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateVariantSetRequest_descriptor_,
      CreateVariantSetRequest::internal_default_instance(),
      CreateVariantSetRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateVariantSetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateVariantSetRequest, _internal_metadata_));
  ExportVariantSetRequest_descriptor_ = file->message_type(9);
  static const int ExportVariantSetRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportVariantSetRequest, variant_set_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportVariantSetRequest, call_set_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportVariantSetRequest, project_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportVariantSetRequest, format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportVariantSetRequest, bigquery_dataset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportVariantSetRequest, bigquery_table_),
  };
  ExportVariantSetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExportVariantSetRequest_descriptor_,
      ExportVariantSetRequest::internal_default_instance(),
      ExportVariantSetRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ExportVariantSetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportVariantSetRequest, _internal_metadata_));
  ExportVariantSetRequest_Format_descriptor_ = ExportVariantSetRequest_descriptor_->enum_type(0);
  GetVariantSetRequest_descriptor_ = file->message_type(10);
  static const int GetVariantSetRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetVariantSetRequest, variant_set_id_),
  };
  GetVariantSetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetVariantSetRequest_descriptor_,
      GetVariantSetRequest::internal_default_instance(),
      GetVariantSetRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetVariantSetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetVariantSetRequest, _internal_metadata_));
  SearchVariantSetsRequest_descriptor_ = file->message_type(11);
  static const int SearchVariantSetsRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchVariantSetsRequest, dataset_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchVariantSetsRequest, page_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchVariantSetsRequest, page_size_),
  };
  SearchVariantSetsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SearchVariantSetsRequest_descriptor_,
      SearchVariantSetsRequest::internal_default_instance(),
      SearchVariantSetsRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SearchVariantSetsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchVariantSetsRequest, _internal_metadata_));
  SearchVariantSetsResponse_descriptor_ = file->message_type(12);
  static const int SearchVariantSetsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchVariantSetsResponse, variant_sets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchVariantSetsResponse, next_page_token_),
  };
  SearchVariantSetsResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SearchVariantSetsResponse_descriptor_,
      SearchVariantSetsResponse::internal_default_instance(),
      SearchVariantSetsResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SearchVariantSetsResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchVariantSetsResponse, _internal_metadata_));
  DeleteVariantSetRequest_descriptor_ = file->message_type(13);
  static const int DeleteVariantSetRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteVariantSetRequest, variant_set_id_),
  };
  DeleteVariantSetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeleteVariantSetRequest_descriptor_,
      DeleteVariantSetRequest::internal_default_instance(),
      DeleteVariantSetRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeleteVariantSetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteVariantSetRequest, _internal_metadata_));
  UpdateVariantSetRequest_descriptor_ = file->message_type(14);
  static const int UpdateVariantSetRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateVariantSetRequest, variant_set_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateVariantSetRequest, variant_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateVariantSetRequest, update_mask_),
  };
  UpdateVariantSetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UpdateVariantSetRequest_descriptor_,
      UpdateVariantSetRequest::internal_default_instance(),
      UpdateVariantSetRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(UpdateVariantSetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateVariantSetRequest, _internal_metadata_));
  SearchVariantsRequest_descriptor_ = file->message_type(15);
  static const int SearchVariantsRequest_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchVariantsRequest, variant_set_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchVariantsRequest, variant_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchVariantsRequest, call_set_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchVariantsRequest, reference_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchVariantsRequest, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchVariantsRequest, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchVariantsRequest, page_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchVariantsRequest, page_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchVariantsRequest, max_calls_),
  };
  SearchVariantsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SearchVariantsRequest_descriptor_,
      SearchVariantsRequest::internal_default_instance(),
      SearchVariantsRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SearchVariantsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchVariantsRequest, _internal_metadata_));
  SearchVariantsResponse_descriptor_ = file->message_type(16);
  static const int SearchVariantsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchVariantsResponse, variants_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchVariantsResponse, next_page_token_),
  };
  SearchVariantsResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SearchVariantsResponse_descriptor_,
      SearchVariantsResponse::internal_default_instance(),
      SearchVariantsResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SearchVariantsResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchVariantsResponse, _internal_metadata_));
  CreateVariantRequest_descriptor_ = file->message_type(17);
  static const int CreateVariantRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateVariantRequest, variant_),
  };
  CreateVariantRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateVariantRequest_descriptor_,
      CreateVariantRequest::internal_default_instance(),
      CreateVariantRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateVariantRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateVariantRequest, _internal_metadata_));
  UpdateVariantRequest_descriptor_ = file->message_type(18);
  static const int UpdateVariantRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateVariantRequest, variant_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateVariantRequest, variant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateVariantRequest, update_mask_),
  };
  UpdateVariantRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UpdateVariantRequest_descriptor_,
      UpdateVariantRequest::internal_default_instance(),
      UpdateVariantRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(UpdateVariantRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateVariantRequest, _internal_metadata_));
  DeleteVariantRequest_descriptor_ = file->message_type(19);
  static const int DeleteVariantRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteVariantRequest, variant_id_),
  };
  DeleteVariantRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeleteVariantRequest_descriptor_,
      DeleteVariantRequest::internal_default_instance(),
      DeleteVariantRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeleteVariantRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteVariantRequest, _internal_metadata_));
  GetVariantRequest_descriptor_ = file->message_type(20);
  static const int GetVariantRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetVariantRequest, variant_id_),
  };
  GetVariantRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetVariantRequest_descriptor_,
      GetVariantRequest::internal_default_instance(),
      GetVariantRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetVariantRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetVariantRequest, _internal_metadata_));
  MergeVariantsRequest_descriptor_ = file->message_type(21);
  static const int MergeVariantsRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeVariantsRequest, variant_set_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeVariantsRequest, variants_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeVariantsRequest, info_merge_config_),
  };
  MergeVariantsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MergeVariantsRequest_descriptor_,
      MergeVariantsRequest::internal_default_instance(),
      MergeVariantsRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(MergeVariantsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeVariantsRequest, _internal_metadata_));
  MergeVariantsRequest_InfoMergeConfigEntry_descriptor_ = MergeVariantsRequest_descriptor_->nested_type(0);
  SearchCallSetsRequest_descriptor_ = file->message_type(22);
  static const int SearchCallSetsRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchCallSetsRequest, variant_set_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchCallSetsRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchCallSetsRequest, page_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchCallSetsRequest, page_size_),
  };
  SearchCallSetsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SearchCallSetsRequest_descriptor_,
      SearchCallSetsRequest::internal_default_instance(),
      SearchCallSetsRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SearchCallSetsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchCallSetsRequest, _internal_metadata_));
  SearchCallSetsResponse_descriptor_ = file->message_type(23);
  static const int SearchCallSetsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchCallSetsResponse, call_sets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchCallSetsResponse, next_page_token_),
  };
  SearchCallSetsResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SearchCallSetsResponse_descriptor_,
      SearchCallSetsResponse::internal_default_instance(),
      SearchCallSetsResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SearchCallSetsResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchCallSetsResponse, _internal_metadata_));
  CreateCallSetRequest_descriptor_ = file->message_type(24);
  static const int CreateCallSetRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCallSetRequest, call_set_),
  };
  CreateCallSetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateCallSetRequest_descriptor_,
      CreateCallSetRequest::internal_default_instance(),
      CreateCallSetRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateCallSetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCallSetRequest, _internal_metadata_));
  UpdateCallSetRequest_descriptor_ = file->message_type(25);
  static const int UpdateCallSetRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateCallSetRequest, call_set_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateCallSetRequest, call_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateCallSetRequest, update_mask_),
  };
  UpdateCallSetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UpdateCallSetRequest_descriptor_,
      UpdateCallSetRequest::internal_default_instance(),
      UpdateCallSetRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(UpdateCallSetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateCallSetRequest, _internal_metadata_));
  DeleteCallSetRequest_descriptor_ = file->message_type(26);
  static const int DeleteCallSetRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCallSetRequest, call_set_id_),
  };
  DeleteCallSetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeleteCallSetRequest_descriptor_,
      DeleteCallSetRequest::internal_default_instance(),
      DeleteCallSetRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeleteCallSetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCallSetRequest, _internal_metadata_));
  GetCallSetRequest_descriptor_ = file->message_type(27);
  static const int GetCallSetRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCallSetRequest, call_set_id_),
  };
  GetCallSetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetCallSetRequest_descriptor_,
      GetCallSetRequest::internal_default_instance(),
      GetCallSetRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetCallSetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCallSetRequest, _internal_metadata_));
  StreamVariantsRequest_descriptor_ = file->message_type(28);
  static const int StreamVariantsRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamVariantsRequest, project_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamVariantsRequest, variant_set_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamVariantsRequest, call_set_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamVariantsRequest, reference_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamVariantsRequest, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamVariantsRequest, end_),
  };
  StreamVariantsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StreamVariantsRequest_descriptor_,
      StreamVariantsRequest::internal_default_instance(),
      StreamVariantsRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(StreamVariantsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamVariantsRequest, _internal_metadata_));
  StreamVariantsResponse_descriptor_ = file->message_type(29);
  static const int StreamVariantsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamVariantsResponse, variants_),
  };
  StreamVariantsResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StreamVariantsResponse_descriptor_,
      StreamVariantsResponse::internal_default_instance(),
      StreamVariantsResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(StreamVariantsResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamVariantsResponse, _internal_metadata_));
  InfoMergeOperation_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_google_2fgenomics_2fv1_2fvariants_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VariantSetMetadata_descriptor_, VariantSetMetadata::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        VariantSetMetadata_InfoEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::google::protobuf::ListValue,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                VariantSetMetadata_InfoEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VariantSet_descriptor_, VariantSet::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Variant_descriptor_, Variant::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Variant_InfoEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::google::protobuf::ListValue,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                Variant_InfoEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VariantCall_descriptor_, VariantCall::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        VariantCall_InfoEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::google::protobuf::ListValue,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                VariantCall_InfoEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CallSet_descriptor_, CallSet::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        CallSet_InfoEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::google::protobuf::ListValue,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                CallSet_InfoEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReferenceBound_descriptor_, ReferenceBound::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ImportVariantsRequest_descriptor_, ImportVariantsRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ImportVariantsRequest_InfoMergeConfigEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::google::genomics::v1::InfoMergeOperation,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_ENUM,
            0>::CreateDefaultInstance(
                ImportVariantsRequest_InfoMergeConfigEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ImportVariantsResponse_descriptor_, ImportVariantsResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateVariantSetRequest_descriptor_, CreateVariantSetRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExportVariantSetRequest_descriptor_, ExportVariantSetRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetVariantSetRequest_descriptor_, GetVariantSetRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SearchVariantSetsRequest_descriptor_, SearchVariantSetsRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SearchVariantSetsResponse_descriptor_, SearchVariantSetsResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeleteVariantSetRequest_descriptor_, DeleteVariantSetRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpdateVariantSetRequest_descriptor_, UpdateVariantSetRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SearchVariantsRequest_descriptor_, SearchVariantsRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SearchVariantsResponse_descriptor_, SearchVariantsResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateVariantRequest_descriptor_, CreateVariantRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpdateVariantRequest_descriptor_, UpdateVariantRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeleteVariantRequest_descriptor_, DeleteVariantRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetVariantRequest_descriptor_, GetVariantRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MergeVariantsRequest_descriptor_, MergeVariantsRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        MergeVariantsRequest_InfoMergeConfigEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::google::genomics::v1::InfoMergeOperation,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_ENUM,
            0>::CreateDefaultInstance(
                MergeVariantsRequest_InfoMergeConfigEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SearchCallSetsRequest_descriptor_, SearchCallSetsRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SearchCallSetsResponse_descriptor_, SearchCallSetsResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateCallSetRequest_descriptor_, CreateCallSetRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpdateCallSetRequest_descriptor_, UpdateCallSetRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeleteCallSetRequest_descriptor_, DeleteCallSetRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetCallSetRequest_descriptor_, GetCallSetRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StreamVariantsRequest_descriptor_, StreamVariantsRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StreamVariantsResponse_descriptor_, StreamVariantsResponse::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_google_2fgenomics_2fv1_2fvariants_2eproto() {
  VariantSetMetadata_default_instance_.Shutdown();
  delete VariantSetMetadata_reflection_;
  VariantSet_default_instance_.Shutdown();
  delete VariantSet_reflection_;
  Variant_default_instance_.Shutdown();
  delete Variant_reflection_;
  VariantCall_default_instance_.Shutdown();
  delete VariantCall_reflection_;
  CallSet_default_instance_.Shutdown();
  delete CallSet_reflection_;
  ReferenceBound_default_instance_.Shutdown();
  delete ReferenceBound_reflection_;
  ImportVariantsRequest_default_instance_.Shutdown();
  delete ImportVariantsRequest_reflection_;
  ImportVariantsResponse_default_instance_.Shutdown();
  delete ImportVariantsResponse_reflection_;
  CreateVariantSetRequest_default_instance_.Shutdown();
  delete CreateVariantSetRequest_reflection_;
  ExportVariantSetRequest_default_instance_.Shutdown();
  delete ExportVariantSetRequest_reflection_;
  GetVariantSetRequest_default_instance_.Shutdown();
  delete GetVariantSetRequest_reflection_;
  SearchVariantSetsRequest_default_instance_.Shutdown();
  delete SearchVariantSetsRequest_reflection_;
  SearchVariantSetsResponse_default_instance_.Shutdown();
  delete SearchVariantSetsResponse_reflection_;
  DeleteVariantSetRequest_default_instance_.Shutdown();
  delete DeleteVariantSetRequest_reflection_;
  UpdateVariantSetRequest_default_instance_.Shutdown();
  delete UpdateVariantSetRequest_reflection_;
  SearchVariantsRequest_default_instance_.Shutdown();
  delete SearchVariantsRequest_reflection_;
  SearchVariantsResponse_default_instance_.Shutdown();
  delete SearchVariantsResponse_reflection_;
  CreateVariantRequest_default_instance_.Shutdown();
  delete CreateVariantRequest_reflection_;
  UpdateVariantRequest_default_instance_.Shutdown();
  delete UpdateVariantRequest_reflection_;
  DeleteVariantRequest_default_instance_.Shutdown();
  delete DeleteVariantRequest_reflection_;
  GetVariantRequest_default_instance_.Shutdown();
  delete GetVariantRequest_reflection_;
  MergeVariantsRequest_default_instance_.Shutdown();
  delete MergeVariantsRequest_reflection_;
  SearchCallSetsRequest_default_instance_.Shutdown();
  delete SearchCallSetsRequest_reflection_;
  SearchCallSetsResponse_default_instance_.Shutdown();
  delete SearchCallSetsResponse_reflection_;
  CreateCallSetRequest_default_instance_.Shutdown();
  delete CreateCallSetRequest_reflection_;
  UpdateCallSetRequest_default_instance_.Shutdown();
  delete UpdateCallSetRequest_reflection_;
  DeleteCallSetRequest_default_instance_.Shutdown();
  delete DeleteCallSetRequest_reflection_;
  GetCallSetRequest_default_instance_.Shutdown();
  delete GetCallSetRequest_reflection_;
  StreamVariantsRequest_default_instance_.Shutdown();
  delete StreamVariantsRequest_reflection_;
  StreamVariantsResponse_default_instance_.Shutdown();
  delete StreamVariantsResponse_reflection_;
}

void protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::api::protobuf_InitDefaults_google_2fapi_2fannotations_2eproto();
  ::google::longrunning::protobuf_InitDefaults_google_2flongrunning_2foperations_2eproto();
  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2fempty_2eproto();
  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2ffield_5fmask_2eproto();
  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2fstruct_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  VariantSetMetadata_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ::google::protobuf::internal::GetEmptyString();
  VariantSet_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Variant_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  VariantCall_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CallSet_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ReferenceBound_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ImportVariantsRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ImportVariantsResponse_default_instance_.DefaultConstruct();
  CreateVariantSetRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ExportVariantSetRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  GetVariantSetRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SearchVariantSetsRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SearchVariantSetsResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  DeleteVariantSetRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  UpdateVariantSetRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SearchVariantsRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SearchVariantsResponse_default_instance_.DefaultConstruct();
  CreateVariantRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  UpdateVariantRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  DeleteVariantRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  GetVariantRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MergeVariantsRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SearchCallSetsRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SearchCallSetsResponse_default_instance_.DefaultConstruct();
  CreateCallSetRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  UpdateCallSetRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  DeleteCallSetRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  GetCallSetRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  StreamVariantsRequest_default_instance_.DefaultConstruct();
  StreamVariantsResponse_default_instance_.DefaultConstruct();
  VariantSetMetadata_default_instance_.get_mutable()->InitAsDefaultInstance();
  VariantSet_default_instance_.get_mutable()->InitAsDefaultInstance();
  Variant_default_instance_.get_mutable()->InitAsDefaultInstance();
  VariantCall_default_instance_.get_mutable()->InitAsDefaultInstance();
  CallSet_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReferenceBound_default_instance_.get_mutable()->InitAsDefaultInstance();
  ImportVariantsRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  ImportVariantsResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  CreateVariantSetRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  ExportVariantSetRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  GetVariantSetRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  SearchVariantSetsRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  SearchVariantSetsResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  DeleteVariantSetRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  UpdateVariantSetRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  SearchVariantsRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  SearchVariantsResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  CreateVariantRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  UpdateVariantRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  DeleteVariantRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  GetVariantRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  MergeVariantsRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  SearchCallSetsRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  SearchCallSetsResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  CreateCallSetRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  UpdateCallSetRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  DeleteCallSetRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  GetCallSetRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  StreamVariantsRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  StreamVariantsResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto_once_);
void protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto_once_,
                 &protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto_impl);
}
void protobuf_AddDesc_google_2fgenomics_2fv1_2fvariants_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!google/genomics/v1/variants.proto\022\022goo"
    "gle.genomics.v1\032\034google/api/annotations."
    "proto\032#google/longrunning/operations.pro"
    "to\032\033google/protobuf/empty.proto\032 google/"
    "protobuf/field_mask.proto\032\034google/protob"
    "uf/struct.proto\"\200\003\n\022VariantSetMetadata\022\013"
    "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\022\n\n\002id\030\004 \001(\t\0229"
    "\n\004type\030\005 \001(\0162+.google.genomics.v1.Varian"
    "tSetMetadata.Type\022\016\n\006number\030\010 \001(\t\022\023\n\013des"
    "cription\030\007 \001(\t\022>\n\004info\030\003 \003(\01320.google.ge"
    "nomics.v1.VariantSetMetadata.InfoEntry\032G"
    "\n\tInfoEntry\022\013\n\003key\030\001 \001(\t\022)\n\005value\030\002 \001(\0132"
    "\032.google.protobuf.ListValue:\0028\001\"Y\n\004Type\022"
    "\024\n\020TYPE_UNSPECIFIED\020\000\022\013\n\007INTEGER\020\001\022\t\n\005FL"
    "OAT\020\002\022\010\n\004FLAG\020\003\022\r\n\tCHARACTER\020\004\022\n\n\006STRING"
    "\020\005\"\341\001\n\nVariantSet\022\022\n\ndataset_id\030\001 \001(\t\022\n\n"
    "\002id\030\002 \001(\t\022\030\n\020reference_set_id\030\006 \001(\t\022<\n\020r"
    "eference_bounds\030\005 \003(\0132\".google.genomics."
    "v1.ReferenceBound\0228\n\010metadata\030\004 \003(\0132&.go"
    "ogle.genomics.v1.VariantSetMetadata\022\014\n\004n"
    "ame\030\007 \001(\t\022\023\n\013description\030\010 \001(\t\"\202\003\n\007Varia"
    "nt\022\026\n\016variant_set_id\030\017 \001(\t\022\n\n\002id\030\002 \001(\t\022\r"
    "\n\005names\030\003 \003(\t\022\017\n\007created\030\014 \001(\003\022\026\n\016refere"
    "nce_name\030\016 \001(\t\022\r\n\005start\030\020 \001(\003\022\013\n\003end\030\r \001"
    "(\003\022\027\n\017reference_bases\030\006 \001(\t\022\027\n\017alternate"
    "_bases\030\007 \003(\t\022\017\n\007quality\030\010 \001(\001\022\016\n\006filter\030"
    "\t \003(\t\0223\n\004info\030\n \003(\0132%.google.genomics.v1"
    ".Variant.InfoEntry\022.\n\005calls\030\013 \003(\0132\037.goog"
    "le.genomics.v1.VariantCall\032G\n\tInfoEntry\022"
    "\013\n\003key\030\001 \001(\t\022)\n\005value\030\002 \001(\0132\032.google.pro"
    "tobuf.ListValue:\0028\001\"\374\001\n\013VariantCall\022\023\n\013c"
    "all_set_id\030\010 \001(\t\022\025\n\rcall_set_name\030\t \001(\t\022"
    "\020\n\010genotype\030\007 \003(\005\022\020\n\010phaseset\030\005 \001(\t\022\033\n\023g"
    "enotype_likelihood\030\006 \003(\001\0227\n\004info\030\002 \003(\0132)"
    ".google.genomics.v1.VariantCall.InfoEntr"
    "y\032G\n\tInfoEntry\022\013\n\003key\030\001 \001(\t\022)\n\005value\030\002 \001"
    "(\0132\032.google.protobuf.ListValue:\0028\001\"\336\001\n\007C"
    "allSet\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\021\n\tsamp"
    "le_id\030\007 \001(\t\022\027\n\017variant_set_ids\030\006 \003(\t\022\017\n\007"
    "created\030\005 \001(\003\0223\n\004info\030\004 \003(\0132%.google.gen"
    "omics.v1.CallSet.InfoEntry\032G\n\tInfoEntry\022"
    "\013\n\003key\030\001 \001(\t\022)\n\005value\030\002 \001(\0132\032.google.pro"
    "tobuf.ListValue:\0028\001\"=\n\016ReferenceBound\022\026\n"
    "\016reference_name\030\001 \001(\t\022\023\n\013upper_bound\030\002 \001"
    "(\003\"\264\003\n\025ImportVariantsRequest\022\026\n\016variant_"
    "set_id\030\001 \001(\t\022\023\n\013source_uris\030\002 \003(\t\022@\n\006for"
    "mat\030\003 \001(\01620.google.genomics.v1.ImportVar"
    "iantsRequest.Format\022!\n\031normalize_referen"
    "ce_names\030\005 \001(\010\022Y\n\021info_merge_config\030\006 \003("
    "\0132>.google.genomics.v1.ImportVariantsReq"
    "uest.InfoMergeConfigEntry\032^\n\024InfoMergeCo"
    "nfigEntry\022\013\n\003key\030\001 \001(\t\0225\n\005value\030\002 \001(\0162&."
    "google.genomics.v1.InfoMergeOperation:\0028"
    "\001\"N\n\006Format\022\026\n\022FORMAT_UNSPECIFIED\020\000\022\016\n\nF"
    "ORMAT_VCF\020\001\022\034\n\030FORMAT_COMPLETE_GENOMICS\020"
    "\002\".\n\026ImportVariantsResponse\022\024\n\014call_set_"
    "ids\030\001 \003(\t\"N\n\027CreateVariantSetRequest\0223\n\013"
    "variant_set\030\001 \001(\0132\036.google.genomics.v1.V"
    "ariantSet\"\210\002\n\027ExportVariantSetRequest\022\026\n"
    "\016variant_set_id\030\001 \001(\t\022\024\n\014call_set_ids\030\002 "
    "\003(\t\022\022\n\nproject_id\030\003 \001(\t\022B\n\006format\030\004 \001(\0162"
    "2.google.genomics.v1.ExportVariantSetReq"
    "uest.Format\022\030\n\020bigquery_dataset\030\005 \001(\t\022\026\n"
    "\016bigquery_table\030\006 \001(\t\"5\n\006Format\022\026\n\022FORMA"
    "T_UNSPECIFIED\020\000\022\023\n\017FORMAT_BIGQUERY\020\001\".\n\024"
    "GetVariantSetRequest\022\026\n\016variant_set_id\030\001"
    " \001(\t\"V\n\030SearchVariantSetsRequest\022\023\n\013data"
    "set_ids\030\001 \003(\t\022\022\n\npage_token\030\002 \001(\t\022\021\n\tpag"
    "e_size\030\003 \001(\005\"j\n\031SearchVariantSetsRespons"
    "e\0224\n\014variant_sets\030\001 \003(\0132\036.google.genomic"
    "s.v1.VariantSet\022\027\n\017next_page_token\030\002 \001(\t"
    "\"1\n\027DeleteVariantSetRequest\022\026\n\016variant_s"
    "et_id\030\001 \001(\t\"\227\001\n\027UpdateVariantSetRequest\022"
    "\026\n\016variant_set_id\030\001 \001(\t\0223\n\013variant_set\030\002"
    " \001(\0132\036.google.genomics.v1.VariantSet\022/\n\013"
    "update_mask\030\005 \001(\0132\032.google.protobuf.Fiel"
    "dMask\"\312\001\n\025SearchVariantsRequest\022\027\n\017varia"
    "nt_set_ids\030\001 \003(\t\022\024\n\014variant_name\030\002 \001(\t\022\024"
    "\n\014call_set_ids\030\003 \003(\t\022\026\n\016reference_name\030\004"
    " \001(\t\022\r\n\005start\030\005 \001(\003\022\013\n\003end\030\006 \001(\003\022\022\n\npage"
    "_token\030\007 \001(\t\022\021\n\tpage_size\030\010 \001(\005\022\021\n\tmax_c"
    "alls\030\t \001(\005\"`\n\026SearchVariantsResponse\022-\n\010"
    "variants\030\001 \003(\0132\033.google.genomics.v1.Vari"
    "ant\022\027\n\017next_page_token\030\002 \001(\t\"D\n\024CreateVa"
    "riantRequest\022,\n\007variant\030\001 \001(\0132\033.google.g"
    "enomics.v1.Variant\"\211\001\n\024UpdateVariantRequ"
    "est\022\022\n\nvariant_id\030\001 \001(\t\022,\n\007variant\030\002 \001(\013"
    "2\033.google.genomics.v1.Variant\022/\n\013update_"
    "mask\030\003 \001(\0132\032.google.protobuf.FieldMask\"*"
    "\n\024DeleteVariantRequest\022\022\n\nvariant_id\030\001 \001"
    "(\t\"\'\n\021GetVariantRequest\022\022\n\nvariant_id\030\001 "
    "\001(\t\"\227\002\n\024MergeVariantsRequest\022\026\n\016variant_"
    "set_id\030\001 \001(\t\022-\n\010variants\030\002 \003(\0132\033.google."
    "genomics.v1.Variant\022X\n\021info_merge_config"
    "\030\003 \003(\0132=.google.genomics.v1.MergeVariant"
    "sRequest.InfoMergeConfigEntry\032^\n\024InfoMer"
    "geConfigEntry\022\013\n\003key\030\001 \001(\t\0225\n\005value\030\002 \001("
    "\0162&.google.genomics.v1.InfoMergeOperatio"
    "n:\0028\001\"e\n\025SearchCallSetsRequest\022\027\n\017varian"
    "t_set_ids\030\001 \003(\t\022\014\n\004name\030\002 \001(\t\022\022\n\npage_to"
    "ken\030\003 \001(\t\022\021\n\tpage_size\030\004 \001(\005\"a\n\026SearchCa"
    "llSetsResponse\022.\n\tcall_sets\030\001 \003(\0132\033.goog"
    "le.genomics.v1.CallSet\022\027\n\017next_page_toke"
    "n\030\002 \001(\t\"E\n\024CreateCallSetRequest\022-\n\010call_"
    "set\030\001 \001(\0132\033.google.genomics.v1.CallSet\"\213"
    "\001\n\024UpdateCallSetRequest\022\023\n\013call_set_id\030\001"
    " \001(\t\022-\n\010call_set\030\002 \001(\0132\033.google.genomics"
    ".v1.CallSet\022/\n\013update_mask\030\003 \001(\0132\032.googl"
    "e.protobuf.FieldMask\"+\n\024DeleteCallSetReq"
    "uest\022\023\n\013call_set_id\030\001 \001(\t\"(\n\021GetCallSetR"
    "equest\022\023\n\013call_set_id\030\001 \001(\t\"\215\001\n\025StreamVa"
    "riantsRequest\022\022\n\nproject_id\030\001 \001(\t\022\026\n\016var"
    "iant_set_id\030\002 \001(\t\022\024\n\014call_set_ids\030\003 \003(\t\022"
    "\026\n\016reference_name\030\004 \001(\t\022\r\n\005start\030\005 \001(\003\022\013"
    "\n\003end\030\006 \001(\003\"G\n\026StreamVariantsResponse\022-\n"
    "\010variants\030\001 \003(\0132\033.google.genomics.v1.Var"
    "iant*]\n\022InfoMergeOperation\022$\n INFO_MERGE"
    "_OPERATION_UNSPECIFIED\020\000\022\016\n\nIGNORE_NEW\020\001"
    "\022\021\n\rMOVE_TO_CALLS\020\0022\245\001\n\027StreamingVariant"
    "Service\022\211\001\n\016StreamVariants\022).google.geno"
    "mics.v1.StreamVariantsRequest\032*.google.g"
    "enomics.v1.StreamVariantsResponse\"\036\202\323\344\223\002"
    "\030\"\023/v1/variants:stream:\001*0\0012\275\022\n\020VariantS"
    "erviceV1\022z\n\016ImportVariants\022).google.geno"
    "mics.v1.ImportVariantsRequest\032\035.google.l"
    "ongrunning.Operation\"\036\202\323\344\223\002\030\"\023/v1/varian"
    "ts:import:\001*\022\205\001\n\020CreateVariantSet\022+.goog"
    "le.genomics.v1.CreateVariantSetRequest\032\036"
    ".google.genomics.v1.VariantSet\"$\202\323\344\223\002\036\"\017"
    "/v1/variantsets:\013variant_set\022\222\001\n\020ExportV"
    "ariantSet\022+.google.genomics.v1.ExportVar"
    "iantSetRequest\032\035.google.longrunning.Oper"
    "ation\"2\202\323\344\223\002,\"\'/v1/variantsets/{variant_"
    "set_id}:export:\001*\022\203\001\n\rGetVariantSet\022(.go"
    "ogle.genomics.v1.GetVariantSetRequest\032\036."
    "google.genomics.v1.VariantSet\"(\202\323\344\223\002\"\022 /"
    "v1/variantsets/{variant_set_id}\022\223\001\n\021Sear"
    "chVariantSets\022,.google.genomics.v1.Searc"
    "hVariantSetsRequest\032-.google.genomics.v1"
    ".SearchVariantSetsResponse\"!\202\323\344\223\002\033\"\026/v1/"
    "variantsets/search:\001*\022\201\001\n\020DeleteVariantS"
    "et\022+.google.genomics.v1.DeleteVariantSet"
    "Request\032\026.google.protobuf.Empty\"(\202\323\344\223\002\"*"
    " /v1/variantsets/{variant_set_id}\022\226\001\n\020Up"
    "dateVariantSet\022+.google.genomics.v1.Upda"
    "teVariantSetRequest\032\036.google.genomics.v1"
    ".VariantSet\"5\202\323\344\223\002/2 /v1/variantsets/{va"
    "riant_set_id}:\013variant_set\022\207\001\n\016SearchVar"
    "iants\022).google.genomics.v1.SearchVariant"
    "sRequest\032*.google.genomics.v1.SearchVari"
    "antsResponse\"\036\202\323\344\223\002\030\"\023/v1/variants/searc"
    "h:\001*\022u\n\rCreateVariant\022(.google.genomics."
    "v1.CreateVariantRequest\032\033.google.genomic"
    "s.v1.Variant\"\035\202\323\344\223\002\027\"\014/v1/variants:\007vari"
    "ant\022\202\001\n\rUpdateVariant\022(.google.genomics."
    "v1.UpdateVariantRequest\032\033.google.genomic"
    "s.v1.Variant\"*\202\323\344\223\002$2\031/v1/variants/{vari"
    "ant_id}:\007variant\022t\n\rDeleteVariant\022(.goog"
    "le.genomics.v1.DeleteVariantRequest\032\026.go"
    "ogle.protobuf.Empty\"!\202\323\344\223\002\033*\031/v1/variant"
    "s/{variant_id}\022s\n\nGetVariant\022%.google.ge"
    "nomics.v1.GetVariantRequest\032\033.google.gen"
    "omics.v1.Variant\"!\202\323\344\223\002\033\022\031/v1/variants/{"
    "variant_id}\022p\n\rMergeVariants\022(.google.ge"
    "nomics.v1.MergeVariantsRequest\032\026.google."
    "protobuf.Empty\"\035\202\323\344\223\002\027\"\022/v1/variants:mer"
    "ge:\001*\022\207\001\n\016SearchCallSets\022).google.genomi"
    "cs.v1.SearchCallSetsRequest\032*.google.gen"
    "omics.v1.SearchCallSetsResponse\"\036\202\323\344\223\002\030\""
    "\023/v1/callsets/search:\001*\022v\n\rCreateCallSet"
    "\022(.google.genomics.v1.CreateCallSetReque"
    "st\032\033.google.genomics.v1.CallSet\"\036\202\323\344\223\002\030\""
    "\014/v1/callsets:\010call_set\022\204\001\n\rUpdateCallSe"
    "t\022(.google.genomics.v1.UpdateCallSetRequ"
    "est\032\033.google.genomics.v1.CallSet\",\202\323\344\223\002&"
    "2\032/v1/callsets/{call_set_id}:\010call_set\022u"
    "\n\rDeleteCallSet\022(.google.genomics.v1.Del"
    "eteCallSetRequest\032\026.google.protobuf.Empt"
    "y\"\"\202\323\344\223\002\034*\032/v1/callsets/{call_set_id}\022t\n"
    "\nGetCallSet\022%.google.genomics.v1.GetCall"
    "SetRequest\032\033.google.genomics.v1.CallSet\""
    "\"\202\323\344\223\002\034\022\032/v1/callsets/{call_set_id}Bh\n\026c"
    "om.google.genomics.v1B\rVariantsProtoP\001Z:"
    "google.golang.org/genproto/googleapis/ge"
    "nomics/v1;genomics\370\001\001b\006proto3", 7389);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/genomics/v1/variants.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_AddDesc_google_2fapi_2fannotations_2eproto();
  ::google::longrunning::protobuf_AddDesc_google_2flongrunning_2foperations_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fempty_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2ffield_5fmask_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fstruct_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_google_2fgenomics_2fv1_2fvariants_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_google_2fgenomics_2fv1_2fvariants_2eproto_once_);
void protobuf_AddDesc_google_2fgenomics_2fv1_2fvariants_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_google_2fgenomics_2fv1_2fvariants_2eproto_once_,
                 &protobuf_AddDesc_google_2fgenomics_2fv1_2fvariants_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_google_2fgenomics_2fv1_2fvariants_2eproto {
  StaticDescriptorInitializer_google_2fgenomics_2fv1_2fvariants_2eproto() {
    protobuf_AddDesc_google_2fgenomics_2fv1_2fvariants_2eproto();
  }
} static_descriptor_initializer_google_2fgenomics_2fv1_2fvariants_2eproto_;
const ::google::protobuf::EnumDescriptor* InfoMergeOperation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InfoMergeOperation_descriptor_;
}
bool InfoMergeOperation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* VariantSetMetadata_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VariantSetMetadata_Type_descriptor_;
}
bool VariantSetMetadata_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VariantSetMetadata_Type VariantSetMetadata::TYPE_UNSPECIFIED;
const VariantSetMetadata_Type VariantSetMetadata::INTEGER;
const VariantSetMetadata_Type VariantSetMetadata::FLOAT;
const VariantSetMetadata_Type VariantSetMetadata::FLAG;
const VariantSetMetadata_Type VariantSetMetadata::CHARACTER;
const VariantSetMetadata_Type VariantSetMetadata::STRING;
const VariantSetMetadata_Type VariantSetMetadata::Type_MIN;
const VariantSetMetadata_Type VariantSetMetadata::Type_MAX;
const int VariantSetMetadata::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VariantSetMetadata::kKeyFieldNumber;
const int VariantSetMetadata::kValueFieldNumber;
const int VariantSetMetadata::kIdFieldNumber;
const int VariantSetMetadata::kTypeFieldNumber;
const int VariantSetMetadata::kNumberFieldNumber;
const int VariantSetMetadata::kDescriptionFieldNumber;
const int VariantSetMetadata::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VariantSetMetadata::VariantSetMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.VariantSetMetadata)
}
VariantSetMetadata::VariantSetMetadata(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  info_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.VariantSetMetadata)
}

void VariantSetMetadata::InitAsDefaultInstance() {
}

VariantSetMetadata::VariantSetMetadata(const VariantSetMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.VariantSetMetadata)
}

void VariantSetMetadata::SharedCtor() {
  info_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  info_.SetEntryDescriptor(
      &::google::genomics::v1::VariantSetMetadata_InfoEntry_descriptor_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

VariantSetMetadata::~VariantSetMetadata() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.VariantSetMetadata)
  SharedDtor();
}

void VariantSetMetadata::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  key_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  value_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  number_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  description_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void VariantSetMetadata::ArenaDtor(void* object) {
  VariantSetMetadata* _this = reinterpret_cast< VariantSetMetadata* >(object);
  (void)_this;
}
void VariantSetMetadata::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void VariantSetMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VariantSetMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VariantSetMetadata_descriptor_;
}

const VariantSetMetadata& VariantSetMetadata::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<VariantSetMetadata> VariantSetMetadata_default_instance_;

VariantSetMetadata* VariantSetMetadata::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<VariantSetMetadata>(arena);
}

void VariantSetMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.VariantSetMetadata)
  key_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  value_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  type_ = 0;
  number_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  info_.Clear();
}

bool VariantSetMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.VariantSetMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.VariantSetMetadata.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.VariantSetMetadata.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // map<string, .google.protobuf.ListValue> info = 3;
      case 3: {
        if (tag == 26) {
         parse_info:
          DO_(input->IncrementRecursionDepth());
         parse_loop_info:
          VariantSetMetadata_InfoEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::google::protobuf::ListValue,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue > > parser(&info_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.VariantSetMetadata.InfoEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_info;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_id;
        break;
      }

      // optional string id = 4;
      case 4: {
        if (tag == 34) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.VariantSetMetadata.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional .google.genomics.v1.VariantSetMetadata.Type type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::google::genomics::v1::VariantSetMetadata_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_description;
        break;
      }

      // optional string description = 7;
      case 7: {
        if (tag == 58) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.VariantSetMetadata.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_number;
        break;
      }

      // optional string number = 8;
      case 8: {
        if (tag == 66) {
         parse_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->number().data(), this->number().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.VariantSetMetadata.number"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.VariantSetMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.VariantSetMetadata)
  return false;
#undef DO_
}

void VariantSetMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.VariantSetMetadata)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantSetMetadata.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantSetMetadata.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // map<string, .google.protobuf.ListValue> info = 3;
  if (!this->info().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1.VariantSetMetadata.InfoEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->info().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->info().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<VariantSetMetadata_InfoEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(info_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<VariantSetMetadata_InfoEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it) {
        entry.reset(info_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional string id = 4;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantSetMetadata.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->id(), output);
  }

  // optional .google.genomics.v1.VariantSetMetadata.Type type = 5;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // optional string description = 7;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantSetMetadata.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->description(), output);
  }

  // optional string number = 8;
  if (this->number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantSetMetadata.number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->number(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.VariantSetMetadata)
}

::google::protobuf::uint8* VariantSetMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.VariantSetMetadata)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantSetMetadata.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantSetMetadata.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // map<string, .google.protobuf.ListValue> info = 3;
  if (!this->info().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1.VariantSetMetadata.InfoEntry.key");
      }
    };

    if (deterministic &&
        this->info().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->info().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<VariantSetMetadata_InfoEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(info_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<VariantSetMetadata_InfoEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it) {
        entry.reset(info_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional string id = 4;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantSetMetadata.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->id(), target);
  }

  // optional .google.genomics.v1.VariantSetMetadata.Type type = 5;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // optional string description = 7;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantSetMetadata.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->description(), target);
  }

  // optional string number = 8;
  if (this->number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantSetMetadata.number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->number(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.VariantSetMetadata)
  return target;
}

size_t VariantSetMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.VariantSetMetadata)
  size_t total_size = 0;

  // optional string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  // optional string id = 4;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional .google.genomics.v1.VariantSetMetadata.Type type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional string number = 8;
  if (this->number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->number());
  }

  // optional string description = 7;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // map<string, .google.protobuf.ListValue> info = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->info_size());
  {
    ::google::protobuf::scoped_ptr<VariantSetMetadata_InfoEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
        it = this->info().begin();
        it != this->info().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(info_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VariantSetMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.VariantSetMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VariantSetMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VariantSetMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.VariantSetMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.VariantSetMetadata)
    UnsafeMergeFrom(*source);
  }
}

void VariantSetMetadata::MergeFrom(const VariantSetMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.VariantSetMetadata)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void VariantSetMetadata::UnsafeMergeFrom(const VariantSetMetadata& from) {
  GOOGLE_DCHECK(&from != this);
  info_.MergeFrom(from.info_);
  if (from.key().size() > 0) {
    set_key(from.key());
  }
  if (from.value().size() > 0) {
    set_value(from.value());
  }
  if (from.id().size() > 0) {
    set_id(from.id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.number().size() > 0) {
    set_number(from.number());
  }
  if (from.description().size() > 0) {
    set_description(from.description());
  }
}

void VariantSetMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.VariantSetMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VariantSetMetadata::CopyFrom(const VariantSetMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.VariantSetMetadata)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool VariantSetMetadata::IsInitialized() const {

  return true;
}

void VariantSetMetadata::Swap(VariantSetMetadata* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    VariantSetMetadata temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void VariantSetMetadata::UnsafeArenaSwap(VariantSetMetadata* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void VariantSetMetadata::InternalSwap(VariantSetMetadata* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  id_.Swap(&other->id_);
  std::swap(type_, other->type_);
  number_.Swap(&other->number_);
  description_.Swap(&other->description_);
  info_.Swap(&other->info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VariantSetMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VariantSetMetadata_descriptor_;
  metadata.reflection = VariantSetMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VariantSetMetadata

// optional string key = 1;
void VariantSetMetadata::clear_key() {
  key_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& VariantSetMetadata::key() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.VariantSetMetadata.key)
  return key_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VariantSetMetadata::set_key(const ::std::string& value) {
  
  key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.VariantSetMetadata.key)
}
void VariantSetMetadata::set_key(const char* value) {
  
  key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.VariantSetMetadata.key)
}
void VariantSetMetadata::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.VariantSetMetadata.key)
}
::std::string* VariantSetMetadata::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.VariantSetMetadata.key)
  return key_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VariantSetMetadata::release_key() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.VariantSetMetadata.key)
  
  return key_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VariantSetMetadata::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.VariantSetMetadata.key)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return key_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void VariantSetMetadata::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.VariantSetMetadata.key)
}
void VariantSetMetadata::unsafe_arena_set_allocated_key(
    ::std::string* key) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (key != NULL) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      key, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.VariantSetMetadata.key)
}

// optional string value = 2;
void VariantSetMetadata::clear_value() {
  value_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& VariantSetMetadata::value() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.VariantSetMetadata.value)
  return value_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VariantSetMetadata::set_value(const ::std::string& value) {
  
  value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.VariantSetMetadata.value)
}
void VariantSetMetadata::set_value(const char* value) {
  
  value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.VariantSetMetadata.value)
}
void VariantSetMetadata::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.VariantSetMetadata.value)
}
::std::string* VariantSetMetadata::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.VariantSetMetadata.value)
  return value_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VariantSetMetadata::release_value() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.VariantSetMetadata.value)
  
  return value_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VariantSetMetadata::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.VariantSetMetadata.value)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return value_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void VariantSetMetadata::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.VariantSetMetadata.value)
}
void VariantSetMetadata::unsafe_arena_set_allocated_value(
    ::std::string* value) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (value != NULL) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.VariantSetMetadata.value)
}

// optional string id = 4;
void VariantSetMetadata::clear_id() {
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& VariantSetMetadata::id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.VariantSetMetadata.id)
  return id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VariantSetMetadata::set_id(const ::std::string& value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.VariantSetMetadata.id)
}
void VariantSetMetadata::set_id(const char* value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.VariantSetMetadata.id)
}
void VariantSetMetadata::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.VariantSetMetadata.id)
}
::std::string* VariantSetMetadata::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.VariantSetMetadata.id)
  return id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VariantSetMetadata::release_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.VariantSetMetadata.id)
  
  return id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VariantSetMetadata::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.VariantSetMetadata.id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void VariantSetMetadata::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.VariantSetMetadata.id)
}
void VariantSetMetadata::unsafe_arena_set_allocated_id(
    ::std::string* id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (id != NULL) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.VariantSetMetadata.id)
}

// optional .google.genomics.v1.VariantSetMetadata.Type type = 5;
void VariantSetMetadata::clear_type() {
  type_ = 0;
}
::google::genomics::v1::VariantSetMetadata_Type VariantSetMetadata::type() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.VariantSetMetadata.type)
  return static_cast< ::google::genomics::v1::VariantSetMetadata_Type >(type_);
}
void VariantSetMetadata::set_type(::google::genomics::v1::VariantSetMetadata_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.VariantSetMetadata.type)
}

// optional string number = 8;
void VariantSetMetadata::clear_number() {
  number_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& VariantSetMetadata::number() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.VariantSetMetadata.number)
  return number_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VariantSetMetadata::set_number(const ::std::string& value) {
  
  number_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.VariantSetMetadata.number)
}
void VariantSetMetadata::set_number(const char* value) {
  
  number_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.VariantSetMetadata.number)
}
void VariantSetMetadata::set_number(const char* value,
    size_t size) {
  
  number_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.VariantSetMetadata.number)
}
::std::string* VariantSetMetadata::mutable_number() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.VariantSetMetadata.number)
  return number_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VariantSetMetadata::release_number() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.VariantSetMetadata.number)
  
  return number_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VariantSetMetadata::unsafe_arena_release_number() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.VariantSetMetadata.number)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return number_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void VariantSetMetadata::set_allocated_number(::std::string* number) {
  if (number != NULL) {
    
  } else {
    
  }
  number_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), number,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.VariantSetMetadata.number)
}
void VariantSetMetadata::unsafe_arena_set_allocated_number(
    ::std::string* number) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (number != NULL) {
    
  } else {
    
  }
  number_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      number, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.VariantSetMetadata.number)
}

// optional string description = 7;
void VariantSetMetadata::clear_description() {
  description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& VariantSetMetadata::description() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.VariantSetMetadata.description)
  return description_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VariantSetMetadata::set_description(const ::std::string& value) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.VariantSetMetadata.description)
}
void VariantSetMetadata::set_description(const char* value) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.VariantSetMetadata.description)
}
void VariantSetMetadata::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.VariantSetMetadata.description)
}
::std::string* VariantSetMetadata::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.VariantSetMetadata.description)
  return description_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VariantSetMetadata::release_description() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.VariantSetMetadata.description)
  
  return description_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VariantSetMetadata::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.VariantSetMetadata.description)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return description_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void VariantSetMetadata::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.VariantSetMetadata.description)
}
void VariantSetMetadata::unsafe_arena_set_allocated_description(
    ::std::string* description) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (description != NULL) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      description, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.VariantSetMetadata.description)
}

// map<string, .google.protobuf.ListValue> info = 3;
int VariantSetMetadata::info_size() const {
  return info_.size();
}
void VariantSetMetadata::clear_info() {
  info_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >&
VariantSetMetadata::info() const {
  // @@protoc_insertion_point(field_map:google.genomics.v1.VariantSetMetadata.info)
  return info_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >*
VariantSetMetadata::mutable_info() {
  // @@protoc_insertion_point(field_mutable_map:google.genomics.v1.VariantSetMetadata.info)
  return info_.MutableMap();
}

inline const VariantSetMetadata* VariantSetMetadata::internal_default_instance() {
  return &VariantSetMetadata_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VariantSet::kDatasetIdFieldNumber;
const int VariantSet::kIdFieldNumber;
const int VariantSet::kReferenceSetIdFieldNumber;
const int VariantSet::kReferenceBoundsFieldNumber;
const int VariantSet::kMetadataFieldNumber;
const int VariantSet::kNameFieldNumber;
const int VariantSet::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VariantSet::VariantSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.VariantSet)
}
VariantSet::VariantSet(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  reference_bounds_(arena),
  metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.VariantSet)
}

void VariantSet::InitAsDefaultInstance() {
}

VariantSet::VariantSet(const VariantSet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.VariantSet)
}

void VariantSet::SharedCtor() {
  dataset_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

VariantSet::~VariantSet() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.VariantSet)
  SharedDtor();
}

void VariantSet::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  dataset_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  reference_set_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  description_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void VariantSet::ArenaDtor(void* object) {
  VariantSet* _this = reinterpret_cast< VariantSet* >(object);
  (void)_this;
}
void VariantSet::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void VariantSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VariantSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VariantSet_descriptor_;
}

const VariantSet& VariantSet::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<VariantSet> VariantSet_default_instance_;

VariantSet* VariantSet::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<VariantSet>(arena);
}

void VariantSet::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.VariantSet)
  dataset_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  reference_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  reference_bounds_.Clear();
  metadata_.Clear();
}

bool VariantSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.VariantSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string dataset_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataset_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dataset_id().data(), this->dataset_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.VariantSet.dataset_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // optional string id = 2;
      case 2: {
        if (tag == 18) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.VariantSet.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_metadata;
        break;
      }

      // repeated .google.genomics.v1.VariantSetMetadata metadata = 4;
      case 4: {
        if (tag == 34) {
         parse_metadata:
          DO_(input->IncrementRecursionDepth());
         parse_loop_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_metadata;
        if (input->ExpectTag(42)) goto parse_loop_reference_bounds;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .google.genomics.v1.ReferenceBound reference_bounds = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_reference_bounds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_reference_bounds()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_reference_bounds;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(50)) goto parse_reference_set_id;
        break;
      }

      // optional string reference_set_id = 6;
      case 6: {
        if (tag == 50) {
         parse_reference_set_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_set_id().data(), this->reference_set_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.VariantSet.reference_set_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // optional string name = 7;
      case 7: {
        if (tag == 58) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.VariantSet.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_description;
        break;
      }

      // optional string description = 8;
      case 8: {
        if (tag == 66) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.VariantSet.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.VariantSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.VariantSet)
  return false;
#undef DO_
}

void VariantSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.VariantSet)
  // optional string dataset_id = 1;
  if (this->dataset_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dataset_id().data(), this->dataset_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantSet.dataset_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dataset_id(), output);
  }

  // optional string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantSet.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // repeated .google.genomics.v1.VariantSetMetadata metadata = 4;
  for (unsigned int i = 0, n = this->metadata_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->metadata(i), output);
  }

  // repeated .google.genomics.v1.ReferenceBound reference_bounds = 5;
  for (unsigned int i = 0, n = this->reference_bounds_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->reference_bounds(i), output);
  }

  // optional string reference_set_id = 6;
  if (this->reference_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_set_id().data(), this->reference_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantSet.reference_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->reference_set_id(), output);
  }

  // optional string name = 7;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantSet.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->name(), output);
  }

  // optional string description = 8;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantSet.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->description(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.VariantSet)
}

::google::protobuf::uint8* VariantSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.VariantSet)
  // optional string dataset_id = 1;
  if (this->dataset_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dataset_id().data(), this->dataset_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantSet.dataset_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dataset_id(), target);
  }

  // optional string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantSet.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // repeated .google.genomics.v1.VariantSetMetadata metadata = 4;
  for (unsigned int i = 0, n = this->metadata_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->metadata(i), false, target);
  }

  // repeated .google.genomics.v1.ReferenceBound reference_bounds = 5;
  for (unsigned int i = 0, n = this->reference_bounds_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->reference_bounds(i), false, target);
  }

  // optional string reference_set_id = 6;
  if (this->reference_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_set_id().data(), this->reference_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantSet.reference_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->reference_set_id(), target);
  }

  // optional string name = 7;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantSet.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  // optional string description = 8;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantSet.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->description(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.VariantSet)
  return target;
}

size_t VariantSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.VariantSet)
  size_t total_size = 0;

  // optional string dataset_id = 1;
  if (this->dataset_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dataset_id());
  }

  // optional string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional string reference_set_id = 6;
  if (this->reference_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference_set_id());
  }

  // optional string name = 7;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string description = 8;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // repeated .google.genomics.v1.ReferenceBound reference_bounds = 5;
  {
    unsigned int count = this->reference_bounds_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reference_bounds(i));
    }
  }

  // repeated .google.genomics.v1.VariantSetMetadata metadata = 4;
  {
    unsigned int count = this->metadata_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->metadata(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VariantSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.VariantSet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VariantSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VariantSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.VariantSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.VariantSet)
    UnsafeMergeFrom(*source);
  }
}

void VariantSet::MergeFrom(const VariantSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.VariantSet)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void VariantSet::UnsafeMergeFrom(const VariantSet& from) {
  GOOGLE_DCHECK(&from != this);
  reference_bounds_.MergeFrom(from.reference_bounds_);
  metadata_.MergeFrom(from.metadata_);
  if (from.dataset_id().size() > 0) {
    set_dataset_id(from.dataset_id());
  }
  if (from.id().size() > 0) {
    set_id(from.id());
  }
  if (from.reference_set_id().size() > 0) {
    set_reference_set_id(from.reference_set_id());
  }
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.description().size() > 0) {
    set_description(from.description());
  }
}

void VariantSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.VariantSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VariantSet::CopyFrom(const VariantSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.VariantSet)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool VariantSet::IsInitialized() const {

  return true;
}

void VariantSet::Swap(VariantSet* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    VariantSet temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void VariantSet::UnsafeArenaSwap(VariantSet* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void VariantSet::InternalSwap(VariantSet* other) {
  dataset_id_.Swap(&other->dataset_id_);
  id_.Swap(&other->id_);
  reference_set_id_.Swap(&other->reference_set_id_);
  reference_bounds_.UnsafeArenaSwap(&other->reference_bounds_);
  metadata_.UnsafeArenaSwap(&other->metadata_);
  name_.Swap(&other->name_);
  description_.Swap(&other->description_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VariantSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VariantSet_descriptor_;
  metadata.reflection = VariantSet_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VariantSet

// optional string dataset_id = 1;
void VariantSet::clear_dataset_id() {
  dataset_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& VariantSet::dataset_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.VariantSet.dataset_id)
  return dataset_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VariantSet::set_dataset_id(const ::std::string& value) {
  
  dataset_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.VariantSet.dataset_id)
}
void VariantSet::set_dataset_id(const char* value) {
  
  dataset_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.VariantSet.dataset_id)
}
void VariantSet::set_dataset_id(const char* value,
    size_t size) {
  
  dataset_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.VariantSet.dataset_id)
}
::std::string* VariantSet::mutable_dataset_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.VariantSet.dataset_id)
  return dataset_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VariantSet::release_dataset_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.VariantSet.dataset_id)
  
  return dataset_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VariantSet::unsafe_arena_release_dataset_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.VariantSet.dataset_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return dataset_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void VariantSet::set_allocated_dataset_id(::std::string* dataset_id) {
  if (dataset_id != NULL) {
    
  } else {
    
  }
  dataset_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dataset_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.VariantSet.dataset_id)
}
void VariantSet::unsafe_arena_set_allocated_dataset_id(
    ::std::string* dataset_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (dataset_id != NULL) {
    
  } else {
    
  }
  dataset_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      dataset_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.VariantSet.dataset_id)
}

// optional string id = 2;
void VariantSet::clear_id() {
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& VariantSet::id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.VariantSet.id)
  return id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VariantSet::set_id(const ::std::string& value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.VariantSet.id)
}
void VariantSet::set_id(const char* value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.VariantSet.id)
}
void VariantSet::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.VariantSet.id)
}
::std::string* VariantSet::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.VariantSet.id)
  return id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VariantSet::release_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.VariantSet.id)
  
  return id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VariantSet::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.VariantSet.id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void VariantSet::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.VariantSet.id)
}
void VariantSet::unsafe_arena_set_allocated_id(
    ::std::string* id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (id != NULL) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.VariantSet.id)
}

// optional string reference_set_id = 6;
void VariantSet::clear_reference_set_id() {
  reference_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& VariantSet::reference_set_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.VariantSet.reference_set_id)
  return reference_set_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VariantSet::set_reference_set_id(const ::std::string& value) {
  
  reference_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.VariantSet.reference_set_id)
}
void VariantSet::set_reference_set_id(const char* value) {
  
  reference_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.VariantSet.reference_set_id)
}
void VariantSet::set_reference_set_id(const char* value,
    size_t size) {
  
  reference_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.VariantSet.reference_set_id)
}
::std::string* VariantSet::mutable_reference_set_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.VariantSet.reference_set_id)
  return reference_set_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VariantSet::release_reference_set_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.VariantSet.reference_set_id)
  
  return reference_set_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VariantSet::unsafe_arena_release_reference_set_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.VariantSet.reference_set_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return reference_set_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void VariantSet::set_allocated_reference_set_id(::std::string* reference_set_id) {
  if (reference_set_id != NULL) {
    
  } else {
    
  }
  reference_set_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference_set_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.VariantSet.reference_set_id)
}
void VariantSet::unsafe_arena_set_allocated_reference_set_id(
    ::std::string* reference_set_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reference_set_id != NULL) {
    
  } else {
    
  }
  reference_set_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reference_set_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.VariantSet.reference_set_id)
}

// repeated .google.genomics.v1.ReferenceBound reference_bounds = 5;
int VariantSet::reference_bounds_size() const {
  return reference_bounds_.size();
}
void VariantSet::clear_reference_bounds() {
  reference_bounds_.Clear();
}
const ::google::genomics::v1::ReferenceBound& VariantSet::reference_bounds(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.VariantSet.reference_bounds)
  return reference_bounds_.Get(index);
}
::google::genomics::v1::ReferenceBound* VariantSet::mutable_reference_bounds(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.VariantSet.reference_bounds)
  return reference_bounds_.Mutable(index);
}
::google::genomics::v1::ReferenceBound* VariantSet::add_reference_bounds() {
  // @@protoc_insertion_point(field_add:google.genomics.v1.VariantSet.reference_bounds)
  return reference_bounds_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::genomics::v1::ReferenceBound >*
VariantSet::mutable_reference_bounds() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.VariantSet.reference_bounds)
  return &reference_bounds_;
}
const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1::ReferenceBound >&
VariantSet::reference_bounds() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.VariantSet.reference_bounds)
  return reference_bounds_;
}

// repeated .google.genomics.v1.VariantSetMetadata metadata = 4;
int VariantSet::metadata_size() const {
  return metadata_.size();
}
void VariantSet::clear_metadata() {
  metadata_.Clear();
}
const ::google::genomics::v1::VariantSetMetadata& VariantSet::metadata(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.VariantSet.metadata)
  return metadata_.Get(index);
}
::google::genomics::v1::VariantSetMetadata* VariantSet::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.VariantSet.metadata)
  return metadata_.Mutable(index);
}
::google::genomics::v1::VariantSetMetadata* VariantSet::add_metadata() {
  // @@protoc_insertion_point(field_add:google.genomics.v1.VariantSet.metadata)
  return metadata_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::genomics::v1::VariantSetMetadata >*
VariantSet::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.VariantSet.metadata)
  return &metadata_;
}
const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1::VariantSetMetadata >&
VariantSet::metadata() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.VariantSet.metadata)
  return metadata_;
}

// optional string name = 7;
void VariantSet::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& VariantSet::name() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.VariantSet.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VariantSet::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.VariantSet.name)
}
void VariantSet::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.VariantSet.name)
}
void VariantSet::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.VariantSet.name)
}
::std::string* VariantSet::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.VariantSet.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VariantSet::release_name() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.VariantSet.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VariantSet::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.VariantSet.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void VariantSet::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.VariantSet.name)
}
void VariantSet::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.VariantSet.name)
}

// optional string description = 8;
void VariantSet::clear_description() {
  description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& VariantSet::description() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.VariantSet.description)
  return description_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VariantSet::set_description(const ::std::string& value) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.VariantSet.description)
}
void VariantSet::set_description(const char* value) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.VariantSet.description)
}
void VariantSet::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.VariantSet.description)
}
::std::string* VariantSet::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.VariantSet.description)
  return description_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VariantSet::release_description() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.VariantSet.description)
  
  return description_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VariantSet::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.VariantSet.description)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return description_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void VariantSet::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.VariantSet.description)
}
void VariantSet::unsafe_arena_set_allocated_description(
    ::std::string* description) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (description != NULL) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      description, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.VariantSet.description)
}

inline const VariantSet* VariantSet::internal_default_instance() {
  return &VariantSet_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Variant::kVariantSetIdFieldNumber;
const int Variant::kIdFieldNumber;
const int Variant::kNamesFieldNumber;
const int Variant::kCreatedFieldNumber;
const int Variant::kReferenceNameFieldNumber;
const int Variant::kStartFieldNumber;
const int Variant::kEndFieldNumber;
const int Variant::kReferenceBasesFieldNumber;
const int Variant::kAlternateBasesFieldNumber;
const int Variant::kQualityFieldNumber;
const int Variant::kFilterFieldNumber;
const int Variant::kInfoFieldNumber;
const int Variant::kCallsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Variant::Variant()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.Variant)
}
Variant::Variant(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  names_(arena),
  alternate_bases_(arena),
  filter_(arena),
  info_(arena),
  calls_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.Variant)
}

void Variant::InitAsDefaultInstance() {
}

Variant::Variant(const Variant& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.Variant)
}

void Variant::SharedCtor() {
  info_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  info_.SetEntryDescriptor(
      &::google::genomics::v1::Variant_InfoEntry_descriptor_);
  variant_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_bases_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&created_, 0, reinterpret_cast<char*>(&quality_) -
    reinterpret_cast<char*>(&created_) + sizeof(quality_));
  _cached_size_ = 0;
}

Variant::~Variant() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.Variant)
  SharedDtor();
}

void Variant::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  variant_set_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  reference_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  reference_bases_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void Variant::ArenaDtor(void* object) {
  Variant* _this = reinterpret_cast< Variant* >(object);
  (void)_this;
}
void Variant::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Variant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Variant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Variant_descriptor_;
}

const Variant& Variant::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Variant> Variant_default_instance_;

Variant* Variant::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Variant>(arena);
}

void Variant::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.Variant)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Variant, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Variant*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(created_, end_);
  variant_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  reference_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  reference_bases_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  quality_ = 0;

#undef ZR_HELPER_
#undef ZR_

  names_.Clear();
  alternate_bases_.Clear();
  filter_.Clear();
  info_.Clear();
  calls_.Clear();
}

bool Variant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.Variant)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Variant.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_names;
        break;
      }

      // repeated string names = 3;
      case 3: {
        if (tag == 26) {
         parse_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->names(this->names_size() - 1).data(),
            this->names(this->names_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Variant.names"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_names;
        if (input->ExpectTag(50)) goto parse_reference_bases;
        break;
      }

      // optional string reference_bases = 6;
      case 6: {
        if (tag == 50) {
         parse_reference_bases:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_bases()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_bases().data(), this->reference_bases().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Variant.reference_bases"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_alternate_bases;
        break;
      }

      // repeated string alternate_bases = 7;
      case 7: {
        if (tag == 58) {
         parse_alternate_bases:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_alternate_bases()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alternate_bases(this->alternate_bases_size() - 1).data(),
            this->alternate_bases(this->alternate_bases_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Variant.alternate_bases"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_alternate_bases;
        if (input->ExpectTag(65)) goto parse_quality;
        break;
      }

      // optional double quality = 8;
      case 8: {
        if (tag == 65) {
         parse_quality:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_filter;
        break;
      }

      // repeated string filter = 9;
      case 9: {
        if (tag == 74) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_filter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filter(this->filter_size() - 1).data(),
            this->filter(this->filter_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Variant.filter"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_filter;
        if (input->ExpectTag(82)) goto parse_info;
        break;
      }

      // map<string, .google.protobuf.ListValue> info = 10;
      case 10: {
        if (tag == 82) {
         parse_info:
          DO_(input->IncrementRecursionDepth());
         parse_loop_info:
          Variant_InfoEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::google::protobuf::ListValue,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue > > parser(&info_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Variant.InfoEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_info;
        if (input->ExpectTag(90)) goto parse_loop_calls;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .google.genomics.v1.VariantCall calls = 11;
      case 11: {
        if (tag == 90) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_calls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_calls()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_loop_calls;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(96)) goto parse_created;
        break;
      }

      // optional int64 created = 12;
      case 12: {
        if (tag == 96) {
         parse_created:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &created_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_end;
        break;
      }

      // optional int64 end = 13;
      case 13: {
        if (tag == 104) {
         parse_end:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_reference_name;
        break;
      }

      // optional string reference_name = 14;
      case 14: {
        if (tag == 114) {
         parse_reference_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_name().data(), this->reference_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Variant.reference_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_variant_set_id;
        break;
      }

      // optional string variant_set_id = 15;
      case 15: {
        if (tag == 122) {
         parse_variant_set_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_variant_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->variant_set_id().data(), this->variant_set_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Variant.variant_set_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_start;
        break;
      }

      // optional int64 start = 16;
      case 16: {
        if (tag == 128) {
         parse_start:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.Variant)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.Variant)
  return false;
#undef DO_
}

void Variant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.Variant)
  // optional string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Variant.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // repeated string names = 3;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Variant.names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->names(i), output);
  }

  // optional string reference_bases = 6;
  if (this->reference_bases().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_bases().data(), this->reference_bases().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Variant.reference_bases");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->reference_bases(), output);
  }

  // repeated string alternate_bases = 7;
  for (int i = 0; i < this->alternate_bases_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alternate_bases(i).data(), this->alternate_bases(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Variant.alternate_bases");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->alternate_bases(i), output);
  }

  // optional double quality = 8;
  if (this->quality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->quality(), output);
  }

  // repeated string filter = 9;
  for (int i = 0; i < this->filter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter(i).data(), this->filter(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Variant.filter");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->filter(i), output);
  }

  // map<string, .google.protobuf.ListValue> info = 10;
  if (!this->info().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1.Variant.InfoEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->info().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->info().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Variant_InfoEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(info_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Variant_InfoEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it) {
        entry.reset(info_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated .google.genomics.v1.VariantCall calls = 11;
  for (unsigned int i = 0, n = this->calls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->calls(i), output);
  }

  // optional int64 created = 12;
  if (this->created() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->created(), output);
  }

  // optional int64 end = 13;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->end(), output);
  }

  // optional string reference_name = 14;
  if (this->reference_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_name().data(), this->reference_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Variant.reference_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->reference_name(), output);
  }

  // optional string variant_set_id = 15;
  if (this->variant_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_id().data(), this->variant_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Variant.variant_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->variant_set_id(), output);
  }

  // optional int64 start = 16;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->start(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.Variant)
}

::google::protobuf::uint8* Variant::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.Variant)
  // optional string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Variant.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // repeated string names = 3;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Variant.names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->names(i), target);
  }

  // optional string reference_bases = 6;
  if (this->reference_bases().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_bases().data(), this->reference_bases().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Variant.reference_bases");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->reference_bases(), target);
  }

  // repeated string alternate_bases = 7;
  for (int i = 0; i < this->alternate_bases_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alternate_bases(i).data(), this->alternate_bases(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Variant.alternate_bases");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->alternate_bases(i), target);
  }

  // optional double quality = 8;
  if (this->quality() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->quality(), target);
  }

  // repeated string filter = 9;
  for (int i = 0; i < this->filter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter(i).data(), this->filter(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Variant.filter");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->filter(i), target);
  }

  // map<string, .google.protobuf.ListValue> info = 10;
  if (!this->info().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1.Variant.InfoEntry.key");
      }
    };

    if (deterministic &&
        this->info().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->info().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Variant_InfoEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(info_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Variant_InfoEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it) {
        entry.reset(info_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated .google.genomics.v1.VariantCall calls = 11;
  for (unsigned int i = 0, n = this->calls_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->calls(i), false, target);
  }

  // optional int64 created = 12;
  if (this->created() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->created(), target);
  }

  // optional int64 end = 13;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->end(), target);
  }

  // optional string reference_name = 14;
  if (this->reference_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_name().data(), this->reference_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Variant.reference_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->reference_name(), target);
  }

  // optional string variant_set_id = 15;
  if (this->variant_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_id().data(), this->variant_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Variant.variant_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->variant_set_id(), target);
  }

  // optional int64 start = 16;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->start(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.Variant)
  return target;
}

size_t Variant::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.Variant)
  size_t total_size = 0;

  // optional string variant_set_id = 15;
  if (this->variant_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->variant_set_id());
  }

  // optional string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional int64 created = 12;
  if (this->created() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->created());
  }

  // optional string reference_name = 14;
  if (this->reference_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference_name());
  }

  // optional int64 start = 16;
  if (this->start() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start());
  }

  // optional int64 end = 13;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end());
  }

  // optional string reference_bases = 6;
  if (this->reference_bases().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference_bases());
  }

  // optional double quality = 8;
  if (this->quality() != 0) {
    total_size += 1 + 8;
  }

  // repeated string names = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->names_size());
  for (int i = 0; i < this->names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }

  // repeated string alternate_bases = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->alternate_bases_size());
  for (int i = 0; i < this->alternate_bases_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->alternate_bases(i));
  }

  // repeated string filter = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->filter_size());
  for (int i = 0; i < this->filter_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->filter(i));
  }

  // map<string, .google.protobuf.ListValue> info = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->info_size());
  {
    ::google::protobuf::scoped_ptr<Variant_InfoEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
        it = this->info().begin();
        it != this->info().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(info_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // repeated .google.genomics.v1.VariantCall calls = 11;
  {
    unsigned int count = this->calls_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->calls(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Variant::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.Variant)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Variant* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Variant>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.Variant)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.Variant)
    UnsafeMergeFrom(*source);
  }
}

void Variant::MergeFrom(const Variant& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.Variant)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Variant::UnsafeMergeFrom(const Variant& from) {
  GOOGLE_DCHECK(&from != this);
  names_.UnsafeMergeFrom(from.names_);
  alternate_bases_.UnsafeMergeFrom(from.alternate_bases_);
  filter_.UnsafeMergeFrom(from.filter_);
  info_.MergeFrom(from.info_);
  calls_.MergeFrom(from.calls_);
  if (from.variant_set_id().size() > 0) {
    set_variant_set_id(from.variant_set_id());
  }
  if (from.id().size() > 0) {
    set_id(from.id());
  }
  if (from.created() != 0) {
    set_created(from.created());
  }
  if (from.reference_name().size() > 0) {
    set_reference_name(from.reference_name());
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
  if (from.reference_bases().size() > 0) {
    set_reference_bases(from.reference_bases());
  }
  if (from.quality() != 0) {
    set_quality(from.quality());
  }
}

void Variant::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.Variant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Variant::CopyFrom(const Variant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.Variant)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Variant::IsInitialized() const {

  return true;
}

void Variant::Swap(Variant* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Variant temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void Variant::UnsafeArenaSwap(Variant* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Variant::InternalSwap(Variant* other) {
  variant_set_id_.Swap(&other->variant_set_id_);
  id_.Swap(&other->id_);
  names_.UnsafeArenaSwap(&other->names_);
  std::swap(created_, other->created_);
  reference_name_.Swap(&other->reference_name_);
  std::swap(start_, other->start_);
  std::swap(end_, other->end_);
  reference_bases_.Swap(&other->reference_bases_);
  alternate_bases_.UnsafeArenaSwap(&other->alternate_bases_);
  std::swap(quality_, other->quality_);
  filter_.UnsafeArenaSwap(&other->filter_);
  info_.Swap(&other->info_);
  calls_.UnsafeArenaSwap(&other->calls_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Variant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Variant_descriptor_;
  metadata.reflection = Variant_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Variant

// optional string variant_set_id = 15;
void Variant::clear_variant_set_id() {
  variant_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Variant::variant_set_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Variant.variant_set_id)
  return variant_set_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Variant::set_variant_set_id(const ::std::string& value) {
  
  variant_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.Variant.variant_set_id)
}
void Variant::set_variant_set_id(const char* value) {
  
  variant_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.Variant.variant_set_id)
}
void Variant::set_variant_set_id(const char* value,
    size_t size) {
  
  variant_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.Variant.variant_set_id)
}
::std::string* Variant::mutable_variant_set_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Variant.variant_set_id)
  return variant_set_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Variant::release_variant_set_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.Variant.variant_set_id)
  
  return variant_set_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Variant::unsafe_arena_release_variant_set_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.Variant.variant_set_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return variant_set_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Variant::set_allocated_variant_set_id(::std::string* variant_set_id) {
  if (variant_set_id != NULL) {
    
  } else {
    
  }
  variant_set_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), variant_set_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.Variant.variant_set_id)
}
void Variant::unsafe_arena_set_allocated_variant_set_id(
    ::std::string* variant_set_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (variant_set_id != NULL) {
    
  } else {
    
  }
  variant_set_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      variant_set_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.Variant.variant_set_id)
}

// optional string id = 2;
void Variant::clear_id() {
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Variant::id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Variant.id)
  return id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Variant::set_id(const ::std::string& value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.Variant.id)
}
void Variant::set_id(const char* value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.Variant.id)
}
void Variant::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.Variant.id)
}
::std::string* Variant::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Variant.id)
  return id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Variant::release_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.Variant.id)
  
  return id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Variant::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.Variant.id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Variant::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.Variant.id)
}
void Variant::unsafe_arena_set_allocated_id(
    ::std::string* id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (id != NULL) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.Variant.id)
}

// repeated string names = 3;
int Variant::names_size() const {
  return names_.size();
}
void Variant::clear_names() {
  names_.Clear();
}
const ::std::string& Variant::names(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Variant.names)
  return names_.Get(index);
}
::std::string* Variant::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Variant.names)
  return names_.Mutable(index);
}
void Variant::set_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.Variant.names)
  names_.Mutable(index)->assign(value);
}
void Variant::set_names(int index, const char* value) {
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.Variant.names)
}
void Variant::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.Variant.names)
}
::std::string* Variant::add_names() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.Variant.names)
  return names_.Add();
}
void Variant::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.Variant.names)
}
void Variant::add_names(const char* value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.Variant.names)
}
void Variant::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.Variant.names)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Variant::names() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.Variant.names)
  return names_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Variant::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.Variant.names)
  return &names_;
}

// optional int64 created = 12;
void Variant::clear_created() {
  created_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Variant::created() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Variant.created)
  return created_;
}
void Variant::set_created(::google::protobuf::int64 value) {
  
  created_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.Variant.created)
}

// optional string reference_name = 14;
void Variant::clear_reference_name() {
  reference_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Variant::reference_name() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Variant.reference_name)
  return reference_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Variant::set_reference_name(const ::std::string& value) {
  
  reference_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.Variant.reference_name)
}
void Variant::set_reference_name(const char* value) {
  
  reference_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.Variant.reference_name)
}
void Variant::set_reference_name(const char* value,
    size_t size) {
  
  reference_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.Variant.reference_name)
}
::std::string* Variant::mutable_reference_name() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Variant.reference_name)
  return reference_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Variant::release_reference_name() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.Variant.reference_name)
  
  return reference_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Variant::unsafe_arena_release_reference_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.Variant.reference_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return reference_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Variant::set_allocated_reference_name(::std::string* reference_name) {
  if (reference_name != NULL) {
    
  } else {
    
  }
  reference_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.Variant.reference_name)
}
void Variant::unsafe_arena_set_allocated_reference_name(
    ::std::string* reference_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reference_name != NULL) {
    
  } else {
    
  }
  reference_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reference_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.Variant.reference_name)
}

// optional int64 start = 16;
void Variant::clear_start() {
  start_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Variant::start() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Variant.start)
  return start_;
}
void Variant::set_start(::google::protobuf::int64 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.Variant.start)
}

// optional int64 end = 13;
void Variant::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Variant::end() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Variant.end)
  return end_;
}
void Variant::set_end(::google::protobuf::int64 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.Variant.end)
}

// optional string reference_bases = 6;
void Variant::clear_reference_bases() {
  reference_bases_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Variant::reference_bases() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Variant.reference_bases)
  return reference_bases_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Variant::set_reference_bases(const ::std::string& value) {
  
  reference_bases_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.Variant.reference_bases)
}
void Variant::set_reference_bases(const char* value) {
  
  reference_bases_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.Variant.reference_bases)
}
void Variant::set_reference_bases(const char* value,
    size_t size) {
  
  reference_bases_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.Variant.reference_bases)
}
::std::string* Variant::mutable_reference_bases() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Variant.reference_bases)
  return reference_bases_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Variant::release_reference_bases() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.Variant.reference_bases)
  
  return reference_bases_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Variant::unsafe_arena_release_reference_bases() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.Variant.reference_bases)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return reference_bases_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Variant::set_allocated_reference_bases(::std::string* reference_bases) {
  if (reference_bases != NULL) {
    
  } else {
    
  }
  reference_bases_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference_bases,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.Variant.reference_bases)
}
void Variant::unsafe_arena_set_allocated_reference_bases(
    ::std::string* reference_bases) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reference_bases != NULL) {
    
  } else {
    
  }
  reference_bases_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reference_bases, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.Variant.reference_bases)
}

// repeated string alternate_bases = 7;
int Variant::alternate_bases_size() const {
  return alternate_bases_.size();
}
void Variant::clear_alternate_bases() {
  alternate_bases_.Clear();
}
const ::std::string& Variant::alternate_bases(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Variant.alternate_bases)
  return alternate_bases_.Get(index);
}
::std::string* Variant::mutable_alternate_bases(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Variant.alternate_bases)
  return alternate_bases_.Mutable(index);
}
void Variant::set_alternate_bases(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.Variant.alternate_bases)
  alternate_bases_.Mutable(index)->assign(value);
}
void Variant::set_alternate_bases(int index, const char* value) {
  alternate_bases_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.Variant.alternate_bases)
}
void Variant::set_alternate_bases(int index, const char* value, size_t size) {
  alternate_bases_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.Variant.alternate_bases)
}
::std::string* Variant::add_alternate_bases() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.Variant.alternate_bases)
  return alternate_bases_.Add();
}
void Variant::add_alternate_bases(const ::std::string& value) {
  alternate_bases_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.Variant.alternate_bases)
}
void Variant::add_alternate_bases(const char* value) {
  alternate_bases_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.Variant.alternate_bases)
}
void Variant::add_alternate_bases(const char* value, size_t size) {
  alternate_bases_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.Variant.alternate_bases)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Variant::alternate_bases() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.Variant.alternate_bases)
  return alternate_bases_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Variant::mutable_alternate_bases() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.Variant.alternate_bases)
  return &alternate_bases_;
}

// optional double quality = 8;
void Variant::clear_quality() {
  quality_ = 0;
}
double Variant::quality() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Variant.quality)
  return quality_;
}
void Variant::set_quality(double value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.Variant.quality)
}

// repeated string filter = 9;
int Variant::filter_size() const {
  return filter_.size();
}
void Variant::clear_filter() {
  filter_.Clear();
}
const ::std::string& Variant::filter(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Variant.filter)
  return filter_.Get(index);
}
::std::string* Variant::mutable_filter(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Variant.filter)
  return filter_.Mutable(index);
}
void Variant::set_filter(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.Variant.filter)
  filter_.Mutable(index)->assign(value);
}
void Variant::set_filter(int index, const char* value) {
  filter_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.Variant.filter)
}
void Variant::set_filter(int index, const char* value, size_t size) {
  filter_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.Variant.filter)
}
::std::string* Variant::add_filter() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.Variant.filter)
  return filter_.Add();
}
void Variant::add_filter(const ::std::string& value) {
  filter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.Variant.filter)
}
void Variant::add_filter(const char* value) {
  filter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.Variant.filter)
}
void Variant::add_filter(const char* value, size_t size) {
  filter_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.Variant.filter)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Variant::filter() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.Variant.filter)
  return filter_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Variant::mutable_filter() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.Variant.filter)
  return &filter_;
}

// map<string, .google.protobuf.ListValue> info = 10;
int Variant::info_size() const {
  return info_.size();
}
void Variant::clear_info() {
  info_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >&
Variant::info() const {
  // @@protoc_insertion_point(field_map:google.genomics.v1.Variant.info)
  return info_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >*
Variant::mutable_info() {
  // @@protoc_insertion_point(field_mutable_map:google.genomics.v1.Variant.info)
  return info_.MutableMap();
}

// repeated .google.genomics.v1.VariantCall calls = 11;
int Variant::calls_size() const {
  return calls_.size();
}
void Variant::clear_calls() {
  calls_.Clear();
}
const ::google::genomics::v1::VariantCall& Variant::calls(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Variant.calls)
  return calls_.Get(index);
}
::google::genomics::v1::VariantCall* Variant::mutable_calls(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Variant.calls)
  return calls_.Mutable(index);
}
::google::genomics::v1::VariantCall* Variant::add_calls() {
  // @@protoc_insertion_point(field_add:google.genomics.v1.Variant.calls)
  return calls_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::genomics::v1::VariantCall >*
Variant::mutable_calls() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.Variant.calls)
  return &calls_;
}
const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1::VariantCall >&
Variant::calls() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.Variant.calls)
  return calls_;
}

inline const Variant* Variant::internal_default_instance() {
  return &Variant_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VariantCall::kCallSetIdFieldNumber;
const int VariantCall::kCallSetNameFieldNumber;
const int VariantCall::kGenotypeFieldNumber;
const int VariantCall::kPhasesetFieldNumber;
const int VariantCall::kGenotypeLikelihoodFieldNumber;
const int VariantCall::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VariantCall::VariantCall()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.VariantCall)
}
VariantCall::VariantCall(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  genotype_(arena),
  genotype_likelihood_(arena),
  info_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.VariantCall)
}

void VariantCall::InitAsDefaultInstance() {
}

VariantCall::VariantCall(const VariantCall& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.VariantCall)
}

void VariantCall::SharedCtor() {
  info_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  info_.SetEntryDescriptor(
      &::google::genomics::v1::VariantCall_InfoEntry_descriptor_);
  call_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  call_set_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phaseset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

VariantCall::~VariantCall() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.VariantCall)
  SharedDtor();
}

void VariantCall::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  call_set_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  call_set_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  phaseset_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void VariantCall::ArenaDtor(void* object) {
  VariantCall* _this = reinterpret_cast< VariantCall* >(object);
  (void)_this;
}
void VariantCall::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void VariantCall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VariantCall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VariantCall_descriptor_;
}

const VariantCall& VariantCall::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<VariantCall> VariantCall_default_instance_;

VariantCall* VariantCall::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<VariantCall>(arena);
}

void VariantCall::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.VariantCall)
  call_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  call_set_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  phaseset_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  genotype_.Clear();
  genotype_likelihood_.Clear();
  info_.Clear();
}

bool VariantCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.VariantCall)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .google.protobuf.ListValue> info = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_info:
          VariantCall_InfoEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::google::protobuf::ListValue,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue > > parser(&info_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.VariantCall.InfoEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_info;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_phaseset;
        break;
      }

      // optional string phaseset = 5;
      case 5: {
        if (tag == 42) {
         parse_phaseset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phaseset()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->phaseset().data(), this->phaseset().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.VariantCall.phaseset"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_genotype_likelihood;
        break;
      }

      // repeated double genotype_likelihood = 6;
      case 6: {
        if (tag == 50) {
         parse_genotype_likelihood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_genotype_likelihood())));
        } else if (tag == 49) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 50, input, this->mutable_genotype_likelihood())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_genotype;
        break;
      }

      // repeated int32 genotype = 7;
      case 7: {
        if (tag == 58) {
         parse_genotype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_genotype())));
        } else if (tag == 56) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 58, input, this->mutable_genotype())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_call_set_id;
        break;
      }

      // optional string call_set_id = 8;
      case 8: {
        if (tag == 66) {
         parse_call_set_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_call_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->call_set_id().data(), this->call_set_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.VariantCall.call_set_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_call_set_name;
        break;
      }

      // optional string call_set_name = 9;
      case 9: {
        if (tag == 74) {
         parse_call_set_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_call_set_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->call_set_name().data(), this->call_set_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.VariantCall.call_set_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.VariantCall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.VariantCall)
  return false;
#undef DO_
}

void VariantCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.VariantCall)
  // map<string, .google.protobuf.ListValue> info = 2;
  if (!this->info().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1.VariantCall.InfoEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->info().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->info().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<VariantCall_InfoEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(info_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<VariantCall_InfoEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it) {
        entry.reset(info_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional string phaseset = 5;
  if (this->phaseset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phaseset().data(), this->phaseset().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantCall.phaseset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->phaseset(), output);
  }

  // repeated double genotype_likelihood = 6;
  if (this->genotype_likelihood_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_genotype_likelihood_cached_byte_size_);
  }
  for (int i = 0; i < this->genotype_likelihood_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->genotype_likelihood(i), output);
  }

  // repeated int32 genotype = 7;
  if (this->genotype_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_genotype_cached_byte_size_);
  }
  for (int i = 0; i < this->genotype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->genotype(i), output);
  }

  // optional string call_set_id = 8;
  if (this->call_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_set_id().data(), this->call_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantCall.call_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->call_set_id(), output);
  }

  // optional string call_set_name = 9;
  if (this->call_set_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_set_name().data(), this->call_set_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantCall.call_set_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->call_set_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.VariantCall)
}

::google::protobuf::uint8* VariantCall::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.VariantCall)
  // map<string, .google.protobuf.ListValue> info = 2;
  if (!this->info().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1.VariantCall.InfoEntry.key");
      }
    };

    if (deterministic &&
        this->info().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->info().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<VariantCall_InfoEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(info_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<VariantCall_InfoEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it) {
        entry.reset(info_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional string phaseset = 5;
  if (this->phaseset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phaseset().data(), this->phaseset().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantCall.phaseset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->phaseset(), target);
  }

  // repeated double genotype_likelihood = 6;
  if (this->genotype_likelihood_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _genotype_likelihood_cached_byte_size_, target);
  }
  for (int i = 0; i < this->genotype_likelihood_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->genotype_likelihood(i), target);
  }

  // repeated int32 genotype = 7;
  if (this->genotype_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _genotype_cached_byte_size_, target);
  }
  for (int i = 0; i < this->genotype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->genotype(i), target);
  }

  // optional string call_set_id = 8;
  if (this->call_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_set_id().data(), this->call_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantCall.call_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->call_set_id(), target);
  }

  // optional string call_set_name = 9;
  if (this->call_set_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_set_name().data(), this->call_set_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantCall.call_set_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->call_set_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.VariantCall)
  return target;
}

size_t VariantCall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.VariantCall)
  size_t total_size = 0;

  // optional string call_set_id = 8;
  if (this->call_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->call_set_id());
  }

  // optional string call_set_name = 9;
  if (this->call_set_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->call_set_name());
  }

  // optional string phaseset = 5;
  if (this->phaseset().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->phaseset());
  }

  // repeated int32 genotype = 7;
  {
    size_t data_size = 0;
    unsigned int count = this->genotype_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->genotype(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _genotype_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double genotype_likelihood = 6;
  {
    size_t data_size = 0;
    unsigned int count = this->genotype_likelihood_size();
    data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _genotype_likelihood_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // map<string, .google.protobuf.ListValue> info = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->info_size());
  {
    ::google::protobuf::scoped_ptr<VariantCall_InfoEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
        it = this->info().begin();
        it != this->info().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(info_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VariantCall::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.VariantCall)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VariantCall* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VariantCall>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.VariantCall)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.VariantCall)
    UnsafeMergeFrom(*source);
  }
}

void VariantCall::MergeFrom(const VariantCall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.VariantCall)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void VariantCall::UnsafeMergeFrom(const VariantCall& from) {
  GOOGLE_DCHECK(&from != this);
  genotype_.UnsafeMergeFrom(from.genotype_);
  genotype_likelihood_.UnsafeMergeFrom(from.genotype_likelihood_);
  info_.MergeFrom(from.info_);
  if (from.call_set_id().size() > 0) {
    set_call_set_id(from.call_set_id());
  }
  if (from.call_set_name().size() > 0) {
    set_call_set_name(from.call_set_name());
  }
  if (from.phaseset().size() > 0) {
    set_phaseset(from.phaseset());
  }
}

void VariantCall::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.VariantCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VariantCall::CopyFrom(const VariantCall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.VariantCall)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool VariantCall::IsInitialized() const {

  return true;
}

void VariantCall::Swap(VariantCall* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    VariantCall temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void VariantCall::UnsafeArenaSwap(VariantCall* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void VariantCall::InternalSwap(VariantCall* other) {
  call_set_id_.Swap(&other->call_set_id_);
  call_set_name_.Swap(&other->call_set_name_);
  genotype_.UnsafeArenaSwap(&other->genotype_);
  phaseset_.Swap(&other->phaseset_);
  genotype_likelihood_.UnsafeArenaSwap(&other->genotype_likelihood_);
  info_.Swap(&other->info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VariantCall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VariantCall_descriptor_;
  metadata.reflection = VariantCall_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VariantCall

// optional string call_set_id = 8;
void VariantCall::clear_call_set_id() {
  call_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& VariantCall::call_set_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.VariantCall.call_set_id)
  return call_set_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VariantCall::set_call_set_id(const ::std::string& value) {
  
  call_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.VariantCall.call_set_id)
}
void VariantCall::set_call_set_id(const char* value) {
  
  call_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.VariantCall.call_set_id)
}
void VariantCall::set_call_set_id(const char* value,
    size_t size) {
  
  call_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.VariantCall.call_set_id)
}
::std::string* VariantCall::mutable_call_set_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.VariantCall.call_set_id)
  return call_set_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VariantCall::release_call_set_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.VariantCall.call_set_id)
  
  return call_set_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VariantCall::unsafe_arena_release_call_set_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.VariantCall.call_set_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return call_set_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void VariantCall::set_allocated_call_set_id(::std::string* call_set_id) {
  if (call_set_id != NULL) {
    
  } else {
    
  }
  call_set_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), call_set_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.VariantCall.call_set_id)
}
void VariantCall::unsafe_arena_set_allocated_call_set_id(
    ::std::string* call_set_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (call_set_id != NULL) {
    
  } else {
    
  }
  call_set_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      call_set_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.VariantCall.call_set_id)
}

// optional string call_set_name = 9;
void VariantCall::clear_call_set_name() {
  call_set_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& VariantCall::call_set_name() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.VariantCall.call_set_name)
  return call_set_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VariantCall::set_call_set_name(const ::std::string& value) {
  
  call_set_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.VariantCall.call_set_name)
}
void VariantCall::set_call_set_name(const char* value) {
  
  call_set_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.VariantCall.call_set_name)
}
void VariantCall::set_call_set_name(const char* value,
    size_t size) {
  
  call_set_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.VariantCall.call_set_name)
}
::std::string* VariantCall::mutable_call_set_name() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.VariantCall.call_set_name)
  return call_set_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VariantCall::release_call_set_name() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.VariantCall.call_set_name)
  
  return call_set_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VariantCall::unsafe_arena_release_call_set_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.VariantCall.call_set_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return call_set_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void VariantCall::set_allocated_call_set_name(::std::string* call_set_name) {
  if (call_set_name != NULL) {
    
  } else {
    
  }
  call_set_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), call_set_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.VariantCall.call_set_name)
}
void VariantCall::unsafe_arena_set_allocated_call_set_name(
    ::std::string* call_set_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (call_set_name != NULL) {
    
  } else {
    
  }
  call_set_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      call_set_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.VariantCall.call_set_name)
}

// repeated int32 genotype = 7;
int VariantCall::genotype_size() const {
  return genotype_.size();
}
void VariantCall::clear_genotype() {
  genotype_.Clear();
}
::google::protobuf::int32 VariantCall::genotype(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.VariantCall.genotype)
  return genotype_.Get(index);
}
void VariantCall::set_genotype(int index, ::google::protobuf::int32 value) {
  genotype_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.genomics.v1.VariantCall.genotype)
}
void VariantCall::add_genotype(::google::protobuf::int32 value) {
  genotype_.Add(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.VariantCall.genotype)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
VariantCall::genotype() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.VariantCall.genotype)
  return genotype_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
VariantCall::mutable_genotype() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.VariantCall.genotype)
  return &genotype_;
}

// optional string phaseset = 5;
void VariantCall::clear_phaseset() {
  phaseset_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& VariantCall::phaseset() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.VariantCall.phaseset)
  return phaseset_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VariantCall::set_phaseset(const ::std::string& value) {
  
  phaseset_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.VariantCall.phaseset)
}
void VariantCall::set_phaseset(const char* value) {
  
  phaseset_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.VariantCall.phaseset)
}
void VariantCall::set_phaseset(const char* value,
    size_t size) {
  
  phaseset_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.VariantCall.phaseset)
}
::std::string* VariantCall::mutable_phaseset() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.VariantCall.phaseset)
  return phaseset_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VariantCall::release_phaseset() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.VariantCall.phaseset)
  
  return phaseset_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VariantCall::unsafe_arena_release_phaseset() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.VariantCall.phaseset)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return phaseset_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void VariantCall::set_allocated_phaseset(::std::string* phaseset) {
  if (phaseset != NULL) {
    
  } else {
    
  }
  phaseset_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phaseset,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.VariantCall.phaseset)
}
void VariantCall::unsafe_arena_set_allocated_phaseset(
    ::std::string* phaseset) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (phaseset != NULL) {
    
  } else {
    
  }
  phaseset_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      phaseset, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.VariantCall.phaseset)
}

// repeated double genotype_likelihood = 6;
int VariantCall::genotype_likelihood_size() const {
  return genotype_likelihood_.size();
}
void VariantCall::clear_genotype_likelihood() {
  genotype_likelihood_.Clear();
}
double VariantCall::genotype_likelihood(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.VariantCall.genotype_likelihood)
  return genotype_likelihood_.Get(index);
}
void VariantCall::set_genotype_likelihood(int index, double value) {
  genotype_likelihood_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.genomics.v1.VariantCall.genotype_likelihood)
}
void VariantCall::add_genotype_likelihood(double value) {
  genotype_likelihood_.Add(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.VariantCall.genotype_likelihood)
}
const ::google::protobuf::RepeatedField< double >&
VariantCall::genotype_likelihood() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.VariantCall.genotype_likelihood)
  return genotype_likelihood_;
}
::google::protobuf::RepeatedField< double >*
VariantCall::mutable_genotype_likelihood() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.VariantCall.genotype_likelihood)
  return &genotype_likelihood_;
}

// map<string, .google.protobuf.ListValue> info = 2;
int VariantCall::info_size() const {
  return info_.size();
}
void VariantCall::clear_info() {
  info_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >&
VariantCall::info() const {
  // @@protoc_insertion_point(field_map:google.genomics.v1.VariantCall.info)
  return info_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >*
VariantCall::mutable_info() {
  // @@protoc_insertion_point(field_mutable_map:google.genomics.v1.VariantCall.info)
  return info_.MutableMap();
}

inline const VariantCall* VariantCall::internal_default_instance() {
  return &VariantCall_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CallSet::kIdFieldNumber;
const int CallSet::kNameFieldNumber;
const int CallSet::kSampleIdFieldNumber;
const int CallSet::kVariantSetIdsFieldNumber;
const int CallSet::kCreatedFieldNumber;
const int CallSet::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CallSet::CallSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.CallSet)
}
CallSet::CallSet(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  variant_set_ids_(arena),
  info_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.CallSet)
}

void CallSet::InitAsDefaultInstance() {
}

CallSet::CallSet(const CallSet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.CallSet)
}

void CallSet::SharedCtor() {
  info_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  info_.SetEntryDescriptor(
      &::google::genomics::v1::CallSet_InfoEntry_descriptor_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sample_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  created_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

CallSet::~CallSet() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.CallSet)
  SharedDtor();
}

void CallSet::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  sample_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void CallSet::ArenaDtor(void* object) {
  CallSet* _this = reinterpret_cast< CallSet* >(object);
  (void)_this;
}
void CallSet::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CallSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CallSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CallSet_descriptor_;
}

const CallSet& CallSet::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CallSet> CallSet_default_instance_;

CallSet* CallSet::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CallSet>(arena);
}

void CallSet::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.CallSet)
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  sample_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  created_ = GOOGLE_LONGLONG(0);
  variant_set_ids_.Clear();
  info_.Clear();
}

bool CallSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.CallSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.CallSet.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.CallSet.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // map<string, .google.protobuf.ListValue> info = 4;
      case 4: {
        if (tag == 34) {
         parse_info:
          DO_(input->IncrementRecursionDepth());
         parse_loop_info:
          CallSet_InfoEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::google::protobuf::ListValue,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue > > parser(&info_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.CallSet.InfoEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_info;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(40)) goto parse_created;
        break;
      }

      // optional int64 created = 5;
      case 5: {
        if (tag == 40) {
         parse_created:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &created_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_variant_set_ids;
        break;
      }

      // repeated string variant_set_ids = 6;
      case 6: {
        if (tag == 50) {
         parse_variant_set_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_variant_set_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->variant_set_ids(this->variant_set_ids_size() - 1).data(),
            this->variant_set_ids(this->variant_set_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.CallSet.variant_set_ids"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_variant_set_ids;
        if (input->ExpectTag(58)) goto parse_sample_id;
        break;
      }

      // optional string sample_id = 7;
      case 7: {
        if (tag == 58) {
         parse_sample_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sample_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sample_id().data(), this->sample_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.CallSet.sample_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.CallSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.CallSet)
  return false;
#undef DO_
}

void CallSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.CallSet)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.CallSet.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.CallSet.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // map<string, .google.protobuf.ListValue> info = 4;
  if (!this->info().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1.CallSet.InfoEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->info().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->info().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<CallSet_InfoEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(info_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<CallSet_InfoEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it) {
        entry.reset(info_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional int64 created = 5;
  if (this->created() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->created(), output);
  }

  // repeated string variant_set_ids = 6;
  for (int i = 0; i < this->variant_set_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_ids(i).data(), this->variant_set_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.CallSet.variant_set_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->variant_set_ids(i), output);
  }

  // optional string sample_id = 7;
  if (this->sample_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sample_id().data(), this->sample_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.CallSet.sample_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->sample_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.CallSet)
}

::google::protobuf::uint8* CallSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.CallSet)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.CallSet.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.CallSet.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // map<string, .google.protobuf.ListValue> info = 4;
  if (!this->info().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1.CallSet.InfoEntry.key");
      }
    };

    if (deterministic &&
        this->info().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->info().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<CallSet_InfoEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(info_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<CallSet_InfoEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it) {
        entry.reset(info_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional int64 created = 5;
  if (this->created() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->created(), target);
  }

  // repeated string variant_set_ids = 6;
  for (int i = 0; i < this->variant_set_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_ids(i).data(), this->variant_set_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.CallSet.variant_set_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->variant_set_ids(i), target);
  }

  // optional string sample_id = 7;
  if (this->sample_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sample_id().data(), this->sample_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.CallSet.sample_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sample_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.CallSet)
  return target;
}

size_t CallSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.CallSet)
  size_t total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string sample_id = 7;
  if (this->sample_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sample_id());
  }

  // optional int64 created = 5;
  if (this->created() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->created());
  }

  // repeated string variant_set_ids = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->variant_set_ids_size());
  for (int i = 0; i < this->variant_set_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->variant_set_ids(i));
  }

  // map<string, .google.protobuf.ListValue> info = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->info_size());
  {
    ::google::protobuf::scoped_ptr<CallSet_InfoEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
        it = this->info().begin();
        it != this->info().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(info_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CallSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.CallSet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CallSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CallSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.CallSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.CallSet)
    UnsafeMergeFrom(*source);
  }
}

void CallSet::MergeFrom(const CallSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.CallSet)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CallSet::UnsafeMergeFrom(const CallSet& from) {
  GOOGLE_DCHECK(&from != this);
  variant_set_ids_.UnsafeMergeFrom(from.variant_set_ids_);
  info_.MergeFrom(from.info_);
  if (from.id().size() > 0) {
    set_id(from.id());
  }
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.sample_id().size() > 0) {
    set_sample_id(from.sample_id());
  }
  if (from.created() != 0) {
    set_created(from.created());
  }
}

void CallSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.CallSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallSet::CopyFrom(const CallSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.CallSet)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CallSet::IsInitialized() const {

  return true;
}

void CallSet::Swap(CallSet* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CallSet temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void CallSet::UnsafeArenaSwap(CallSet* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CallSet::InternalSwap(CallSet* other) {
  id_.Swap(&other->id_);
  name_.Swap(&other->name_);
  sample_id_.Swap(&other->sample_id_);
  variant_set_ids_.UnsafeArenaSwap(&other->variant_set_ids_);
  std::swap(created_, other->created_);
  info_.Swap(&other->info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CallSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CallSet_descriptor_;
  metadata.reflection = CallSet_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CallSet

// optional string id = 1;
void CallSet::clear_id() {
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& CallSet::id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.CallSet.id)
  return id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CallSet::set_id(const ::std::string& value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.CallSet.id)
}
void CallSet::set_id(const char* value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.CallSet.id)
}
void CallSet::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.CallSet.id)
}
::std::string* CallSet::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.CallSet.id)
  return id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CallSet::release_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.CallSet.id)
  
  return id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CallSet::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.CallSet.id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void CallSet::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.CallSet.id)
}
void CallSet::unsafe_arena_set_allocated_id(
    ::std::string* id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (id != NULL) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.CallSet.id)
}

// optional string name = 2;
void CallSet::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& CallSet::name() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.CallSet.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CallSet::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.CallSet.name)
}
void CallSet::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.CallSet.name)
}
void CallSet::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.CallSet.name)
}
::std::string* CallSet::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.CallSet.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CallSet::release_name() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.CallSet.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CallSet::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.CallSet.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void CallSet::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.CallSet.name)
}
void CallSet::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.CallSet.name)
}

// optional string sample_id = 7;
void CallSet::clear_sample_id() {
  sample_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& CallSet::sample_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.CallSet.sample_id)
  return sample_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CallSet::set_sample_id(const ::std::string& value) {
  
  sample_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.CallSet.sample_id)
}
void CallSet::set_sample_id(const char* value) {
  
  sample_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.CallSet.sample_id)
}
void CallSet::set_sample_id(const char* value,
    size_t size) {
  
  sample_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.CallSet.sample_id)
}
::std::string* CallSet::mutable_sample_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.CallSet.sample_id)
  return sample_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CallSet::release_sample_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.CallSet.sample_id)
  
  return sample_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CallSet::unsafe_arena_release_sample_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.CallSet.sample_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return sample_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void CallSet::set_allocated_sample_id(::std::string* sample_id) {
  if (sample_id != NULL) {
    
  } else {
    
  }
  sample_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sample_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.CallSet.sample_id)
}
void CallSet::unsafe_arena_set_allocated_sample_id(
    ::std::string* sample_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (sample_id != NULL) {
    
  } else {
    
  }
  sample_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      sample_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.CallSet.sample_id)
}

// repeated string variant_set_ids = 6;
int CallSet::variant_set_ids_size() const {
  return variant_set_ids_.size();
}
void CallSet::clear_variant_set_ids() {
  variant_set_ids_.Clear();
}
const ::std::string& CallSet::variant_set_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.CallSet.variant_set_ids)
  return variant_set_ids_.Get(index);
}
::std::string* CallSet::mutable_variant_set_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.CallSet.variant_set_ids)
  return variant_set_ids_.Mutable(index);
}
void CallSet::set_variant_set_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.CallSet.variant_set_ids)
  variant_set_ids_.Mutable(index)->assign(value);
}
void CallSet::set_variant_set_ids(int index, const char* value) {
  variant_set_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.CallSet.variant_set_ids)
}
void CallSet::set_variant_set_ids(int index, const char* value, size_t size) {
  variant_set_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.CallSet.variant_set_ids)
}
::std::string* CallSet::add_variant_set_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.CallSet.variant_set_ids)
  return variant_set_ids_.Add();
}
void CallSet::add_variant_set_ids(const ::std::string& value) {
  variant_set_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.CallSet.variant_set_ids)
}
void CallSet::add_variant_set_ids(const char* value) {
  variant_set_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.CallSet.variant_set_ids)
}
void CallSet::add_variant_set_ids(const char* value, size_t size) {
  variant_set_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.CallSet.variant_set_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CallSet::variant_set_ids() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.CallSet.variant_set_ids)
  return variant_set_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CallSet::mutable_variant_set_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.CallSet.variant_set_ids)
  return &variant_set_ids_;
}

// optional int64 created = 5;
void CallSet::clear_created() {
  created_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 CallSet::created() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.CallSet.created)
  return created_;
}
void CallSet::set_created(::google::protobuf::int64 value) {
  
  created_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.CallSet.created)
}

// map<string, .google.protobuf.ListValue> info = 4;
int CallSet::info_size() const {
  return info_.size();
}
void CallSet::clear_info() {
  info_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >&
CallSet::info() const {
  // @@protoc_insertion_point(field_map:google.genomics.v1.CallSet.info)
  return info_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >*
CallSet::mutable_info() {
  // @@protoc_insertion_point(field_mutable_map:google.genomics.v1.CallSet.info)
  return info_.MutableMap();
}

inline const CallSet* CallSet::internal_default_instance() {
  return &CallSet_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReferenceBound::kReferenceNameFieldNumber;
const int ReferenceBound::kUpperBoundFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReferenceBound::ReferenceBound()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.ReferenceBound)
}
ReferenceBound::ReferenceBound(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.ReferenceBound)
}

void ReferenceBound::InitAsDefaultInstance() {
}

ReferenceBound::ReferenceBound(const ReferenceBound& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.ReferenceBound)
}

void ReferenceBound::SharedCtor() {
  reference_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  upper_bound_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

ReferenceBound::~ReferenceBound() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.ReferenceBound)
  SharedDtor();
}

void ReferenceBound::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  reference_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void ReferenceBound::ArenaDtor(void* object) {
  ReferenceBound* _this = reinterpret_cast< ReferenceBound* >(object);
  (void)_this;
}
void ReferenceBound::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ReferenceBound::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReferenceBound::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReferenceBound_descriptor_;
}

const ReferenceBound& ReferenceBound::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReferenceBound> ReferenceBound_default_instance_;

ReferenceBound* ReferenceBound::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ReferenceBound>(arena);
}

void ReferenceBound::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.ReferenceBound)
  reference_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  upper_bound_ = GOOGLE_LONGLONG(0);
}

bool ReferenceBound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.ReferenceBound)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string reference_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_name().data(), this->reference_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ReferenceBound.reference_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_upper_bound;
        break;
      }

      // optional int64 upper_bound = 2;
      case 2: {
        if (tag == 16) {
         parse_upper_bound:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &upper_bound_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.ReferenceBound)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.ReferenceBound)
  return false;
#undef DO_
}

void ReferenceBound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.ReferenceBound)
  // optional string reference_name = 1;
  if (this->reference_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_name().data(), this->reference_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceBound.reference_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reference_name(), output);
  }

  // optional int64 upper_bound = 2;
  if (this->upper_bound() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->upper_bound(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.ReferenceBound)
}

::google::protobuf::uint8* ReferenceBound::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.ReferenceBound)
  // optional string reference_name = 1;
  if (this->reference_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_name().data(), this->reference_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceBound.reference_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reference_name(), target);
  }

  // optional int64 upper_bound = 2;
  if (this->upper_bound() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->upper_bound(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.ReferenceBound)
  return target;
}

size_t ReferenceBound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.ReferenceBound)
  size_t total_size = 0;

  // optional string reference_name = 1;
  if (this->reference_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference_name());
  }

  // optional int64 upper_bound = 2;
  if (this->upper_bound() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->upper_bound());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReferenceBound::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.ReferenceBound)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReferenceBound* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReferenceBound>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.ReferenceBound)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.ReferenceBound)
    UnsafeMergeFrom(*source);
  }
}

void ReferenceBound::MergeFrom(const ReferenceBound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.ReferenceBound)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReferenceBound::UnsafeMergeFrom(const ReferenceBound& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.reference_name().size() > 0) {
    set_reference_name(from.reference_name());
  }
  if (from.upper_bound() != 0) {
    set_upper_bound(from.upper_bound());
  }
}

void ReferenceBound::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.ReferenceBound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceBound::CopyFrom(const ReferenceBound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.ReferenceBound)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReferenceBound::IsInitialized() const {

  return true;
}

void ReferenceBound::Swap(ReferenceBound* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ReferenceBound temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ReferenceBound::UnsafeArenaSwap(ReferenceBound* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ReferenceBound::InternalSwap(ReferenceBound* other) {
  reference_name_.Swap(&other->reference_name_);
  std::swap(upper_bound_, other->upper_bound_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReferenceBound::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReferenceBound_descriptor_;
  metadata.reflection = ReferenceBound_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReferenceBound

// optional string reference_name = 1;
void ReferenceBound::clear_reference_name() {
  reference_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ReferenceBound::reference_name() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ReferenceBound.reference_name)
  return reference_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReferenceBound::set_reference_name(const ::std::string& value) {
  
  reference_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ReferenceBound.reference_name)
}
void ReferenceBound::set_reference_name(const char* value) {
  
  reference_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ReferenceBound.reference_name)
}
void ReferenceBound::set_reference_name(const char* value,
    size_t size) {
  
  reference_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ReferenceBound.reference_name)
}
::std::string* ReferenceBound::mutable_reference_name() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ReferenceBound.reference_name)
  return reference_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ReferenceBound::release_reference_name() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ReferenceBound.reference_name)
  
  return reference_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ReferenceBound::unsafe_arena_release_reference_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ReferenceBound.reference_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return reference_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ReferenceBound::set_allocated_reference_name(::std::string* reference_name) {
  if (reference_name != NULL) {
    
  } else {
    
  }
  reference_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ReferenceBound.reference_name)
}
void ReferenceBound::unsafe_arena_set_allocated_reference_name(
    ::std::string* reference_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reference_name != NULL) {
    
  } else {
    
  }
  reference_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reference_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ReferenceBound.reference_name)
}

// optional int64 upper_bound = 2;
void ReferenceBound::clear_upper_bound() {
  upper_bound_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ReferenceBound::upper_bound() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ReferenceBound.upper_bound)
  return upper_bound_;
}
void ReferenceBound::set_upper_bound(::google::protobuf::int64 value) {
  
  upper_bound_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.ReferenceBound.upper_bound)
}

inline const ReferenceBound* ReferenceBound::internal_default_instance() {
  return &ReferenceBound_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ImportVariantsRequest_Format_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImportVariantsRequest_Format_descriptor_;
}
bool ImportVariantsRequest_Format_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ImportVariantsRequest_Format ImportVariantsRequest::FORMAT_UNSPECIFIED;
const ImportVariantsRequest_Format ImportVariantsRequest::FORMAT_VCF;
const ImportVariantsRequest_Format ImportVariantsRequest::FORMAT_COMPLETE_GENOMICS;
const ImportVariantsRequest_Format ImportVariantsRequest::Format_MIN;
const ImportVariantsRequest_Format ImportVariantsRequest::Format_MAX;
const int ImportVariantsRequest::Format_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImportVariantsRequest::kVariantSetIdFieldNumber;
const int ImportVariantsRequest::kSourceUrisFieldNumber;
const int ImportVariantsRequest::kFormatFieldNumber;
const int ImportVariantsRequest::kNormalizeReferenceNamesFieldNumber;
const int ImportVariantsRequest::kInfoMergeConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImportVariantsRequest::ImportVariantsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.ImportVariantsRequest)
}
ImportVariantsRequest::ImportVariantsRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  source_uris_(arena),
  info_merge_config_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.ImportVariantsRequest)
}

void ImportVariantsRequest::InitAsDefaultInstance() {
}

ImportVariantsRequest::ImportVariantsRequest(const ImportVariantsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.ImportVariantsRequest)
}

void ImportVariantsRequest::SharedCtor() {
  info_merge_config_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  info_merge_config_.SetEntryDescriptor(
      &::google::genomics::v1::ImportVariantsRequest_InfoMergeConfigEntry_descriptor_);
  variant_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&format_, 0, reinterpret_cast<char*>(&normalize_reference_names_) -
    reinterpret_cast<char*>(&format_) + sizeof(normalize_reference_names_));
  _cached_size_ = 0;
}

ImportVariantsRequest::~ImportVariantsRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.ImportVariantsRequest)
  SharedDtor();
}

void ImportVariantsRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  variant_set_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void ImportVariantsRequest::ArenaDtor(void* object) {
  ImportVariantsRequest* _this = reinterpret_cast< ImportVariantsRequest* >(object);
  (void)_this;
}
void ImportVariantsRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ImportVariantsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImportVariantsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImportVariantsRequest_descriptor_;
}

const ImportVariantsRequest& ImportVariantsRequest::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ImportVariantsRequest> ImportVariantsRequest_default_instance_;

ImportVariantsRequest* ImportVariantsRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ImportVariantsRequest>(arena);
}

void ImportVariantsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.ImportVariantsRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ImportVariantsRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ImportVariantsRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(format_, normalize_reference_names_);
  variant_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef ZR_HELPER_
#undef ZR_

  source_uris_.Clear();
  info_merge_config_.Clear();
}

bool ImportVariantsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.ImportVariantsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string variant_set_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_variant_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->variant_set_id().data(), this->variant_set_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ImportVariantsRequest.variant_set_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_source_uris;
        break;
      }

      // repeated string source_uris = 2;
      case 2: {
        if (tag == 18) {
         parse_source_uris:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_source_uris()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_uris(this->source_uris_size() - 1).data(),
            this->source_uris(this->source_uris_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ImportVariantsRequest.source_uris"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_source_uris;
        if (input->ExpectTag(24)) goto parse_format;
        break;
      }

      // optional .google.genomics.v1.ImportVariantsRequest.Format format = 3;
      case 3: {
        if (tag == 24) {
         parse_format:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_format(static_cast< ::google::genomics::v1::ImportVariantsRequest_Format >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_normalize_reference_names;
        break;
      }

      // optional bool normalize_reference_names = 5;
      case 5: {
        if (tag == 40) {
         parse_normalize_reference_names:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &normalize_reference_names_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_info_merge_config;
        break;
      }

      // map<string, .google.genomics.v1.InfoMergeOperation> info_merge_config = 6;
      case 6: {
        if (tag == 50) {
         parse_info_merge_config:
          DO_(input->IncrementRecursionDepth());
         parse_loop_info_merge_config:
          ImportVariantsRequest_InfoMergeConfigEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::google::genomics::v1::InfoMergeOperation,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_ENUM,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation > > parser(&info_merge_config_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ImportVariantsRequest.InfoMergeConfigEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_info_merge_config;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.ImportVariantsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.ImportVariantsRequest)
  return false;
#undef DO_
}

void ImportVariantsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.ImportVariantsRequest)
  // optional string variant_set_id = 1;
  if (this->variant_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_id().data(), this->variant_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ImportVariantsRequest.variant_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->variant_set_id(), output);
  }

  // repeated string source_uris = 2;
  for (int i = 0; i < this->source_uris_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_uris(i).data(), this->source_uris(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ImportVariantsRequest.source_uris");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->source_uris(i), output);
  }

  // optional .google.genomics.v1.ImportVariantsRequest.Format format = 3;
  if (this->format() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->format(), output);
  }

  // optional bool normalize_reference_names = 5;
  if (this->normalize_reference_names() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->normalize_reference_names(), output);
  }

  // map<string, .google.genomics.v1.InfoMergeOperation> info_merge_config = 6;
  if (!this->info_merge_config().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1.ImportVariantsRequest.InfoMergeConfigEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->info_merge_config().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->info_merge_config().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation >::const_iterator
          it = this->info_merge_config().begin();
          it != this->info_merge_config().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ImportVariantsRequest_InfoMergeConfigEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(info_merge_config_.NewEnumEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ImportVariantsRequest_InfoMergeConfigEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation >::const_iterator
          it = this->info_merge_config().begin();
          it != this->info_merge_config().end(); ++it) {
        entry.reset(info_merge_config_.NewEnumEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.ImportVariantsRequest)
}

::google::protobuf::uint8* ImportVariantsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.ImportVariantsRequest)
  // optional string variant_set_id = 1;
  if (this->variant_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_id().data(), this->variant_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ImportVariantsRequest.variant_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->variant_set_id(), target);
  }

  // repeated string source_uris = 2;
  for (int i = 0; i < this->source_uris_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_uris(i).data(), this->source_uris(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ImportVariantsRequest.source_uris");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->source_uris(i), target);
  }

  // optional .google.genomics.v1.ImportVariantsRequest.Format format = 3;
  if (this->format() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->format(), target);
  }

  // optional bool normalize_reference_names = 5;
  if (this->normalize_reference_names() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->normalize_reference_names(), target);
  }

  // map<string, .google.genomics.v1.InfoMergeOperation> info_merge_config = 6;
  if (!this->info_merge_config().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1.ImportVariantsRequest.InfoMergeConfigEntry.key");
      }
    };

    if (deterministic &&
        this->info_merge_config().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->info_merge_config().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation >::const_iterator
          it = this->info_merge_config().begin();
          it != this->info_merge_config().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ImportVariantsRequest_InfoMergeConfigEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(info_merge_config_.NewEnumEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ImportVariantsRequest_InfoMergeConfigEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation >::const_iterator
          it = this->info_merge_config().begin();
          it != this->info_merge_config().end(); ++it) {
        entry.reset(info_merge_config_.NewEnumEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.ImportVariantsRequest)
  return target;
}

size_t ImportVariantsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.ImportVariantsRequest)
  size_t total_size = 0;

  // optional string variant_set_id = 1;
  if (this->variant_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->variant_set_id());
  }

  // optional .google.genomics.v1.ImportVariantsRequest.Format format = 3;
  if (this->format() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
  }

  // optional bool normalize_reference_names = 5;
  if (this->normalize_reference_names() != 0) {
    total_size += 1 + 1;
  }

  // repeated string source_uris = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->source_uris_size());
  for (int i = 0; i < this->source_uris_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->source_uris(i));
  }

  // map<string, .google.genomics.v1.InfoMergeOperation> info_merge_config = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->info_merge_config_size());
  {
    ::google::protobuf::scoped_ptr<ImportVariantsRequest_InfoMergeConfigEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation >::const_iterator
        it = this->info_merge_config().begin();
        it != this->info_merge_config().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(info_merge_config_.NewEnumEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImportVariantsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.ImportVariantsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ImportVariantsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImportVariantsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.ImportVariantsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.ImportVariantsRequest)
    UnsafeMergeFrom(*source);
  }
}

void ImportVariantsRequest::MergeFrom(const ImportVariantsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.ImportVariantsRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ImportVariantsRequest::UnsafeMergeFrom(const ImportVariantsRequest& from) {
  GOOGLE_DCHECK(&from != this);
  source_uris_.UnsafeMergeFrom(from.source_uris_);
  info_merge_config_.MergeFrom(from.info_merge_config_);
  if (from.variant_set_id().size() > 0) {
    set_variant_set_id(from.variant_set_id());
  }
  if (from.format() != 0) {
    set_format(from.format());
  }
  if (from.normalize_reference_names() != 0) {
    set_normalize_reference_names(from.normalize_reference_names());
  }
}

void ImportVariantsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.ImportVariantsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImportVariantsRequest::CopyFrom(const ImportVariantsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.ImportVariantsRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ImportVariantsRequest::IsInitialized() const {

  return true;
}

void ImportVariantsRequest::Swap(ImportVariantsRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ImportVariantsRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ImportVariantsRequest::UnsafeArenaSwap(ImportVariantsRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ImportVariantsRequest::InternalSwap(ImportVariantsRequest* other) {
  variant_set_id_.Swap(&other->variant_set_id_);
  source_uris_.UnsafeArenaSwap(&other->source_uris_);
  std::swap(format_, other->format_);
  std::swap(normalize_reference_names_, other->normalize_reference_names_);
  info_merge_config_.Swap(&other->info_merge_config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImportVariantsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImportVariantsRequest_descriptor_;
  metadata.reflection = ImportVariantsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImportVariantsRequest

// optional string variant_set_id = 1;
void ImportVariantsRequest::clear_variant_set_id() {
  variant_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ImportVariantsRequest::variant_set_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ImportVariantsRequest.variant_set_id)
  return variant_set_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImportVariantsRequest::set_variant_set_id(const ::std::string& value) {
  
  variant_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ImportVariantsRequest.variant_set_id)
}
void ImportVariantsRequest::set_variant_set_id(const char* value) {
  
  variant_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ImportVariantsRequest.variant_set_id)
}
void ImportVariantsRequest::set_variant_set_id(const char* value,
    size_t size) {
  
  variant_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ImportVariantsRequest.variant_set_id)
}
::std::string* ImportVariantsRequest::mutable_variant_set_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ImportVariantsRequest.variant_set_id)
  return variant_set_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ImportVariantsRequest::release_variant_set_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ImportVariantsRequest.variant_set_id)
  
  return variant_set_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ImportVariantsRequest::unsafe_arena_release_variant_set_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ImportVariantsRequest.variant_set_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return variant_set_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ImportVariantsRequest::set_allocated_variant_set_id(::std::string* variant_set_id) {
  if (variant_set_id != NULL) {
    
  } else {
    
  }
  variant_set_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), variant_set_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ImportVariantsRequest.variant_set_id)
}
void ImportVariantsRequest::unsafe_arena_set_allocated_variant_set_id(
    ::std::string* variant_set_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (variant_set_id != NULL) {
    
  } else {
    
  }
  variant_set_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      variant_set_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ImportVariantsRequest.variant_set_id)
}

// repeated string source_uris = 2;
int ImportVariantsRequest::source_uris_size() const {
  return source_uris_.size();
}
void ImportVariantsRequest::clear_source_uris() {
  source_uris_.Clear();
}
const ::std::string& ImportVariantsRequest::source_uris(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ImportVariantsRequest.source_uris)
  return source_uris_.Get(index);
}
::std::string* ImportVariantsRequest::mutable_source_uris(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ImportVariantsRequest.source_uris)
  return source_uris_.Mutable(index);
}
void ImportVariantsRequest::set_source_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.ImportVariantsRequest.source_uris)
  source_uris_.Mutable(index)->assign(value);
}
void ImportVariantsRequest::set_source_uris(int index, const char* value) {
  source_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ImportVariantsRequest.source_uris)
}
void ImportVariantsRequest::set_source_uris(int index, const char* value, size_t size) {
  source_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ImportVariantsRequest.source_uris)
}
::std::string* ImportVariantsRequest::add_source_uris() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.ImportVariantsRequest.source_uris)
  return source_uris_.Add();
}
void ImportVariantsRequest::add_source_uris(const ::std::string& value) {
  source_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.ImportVariantsRequest.source_uris)
}
void ImportVariantsRequest::add_source_uris(const char* value) {
  source_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.ImportVariantsRequest.source_uris)
}
void ImportVariantsRequest::add_source_uris(const char* value, size_t size) {
  source_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.ImportVariantsRequest.source_uris)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ImportVariantsRequest::source_uris() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.ImportVariantsRequest.source_uris)
  return source_uris_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ImportVariantsRequest::mutable_source_uris() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.ImportVariantsRequest.source_uris)
  return &source_uris_;
}

// optional .google.genomics.v1.ImportVariantsRequest.Format format = 3;
void ImportVariantsRequest::clear_format() {
  format_ = 0;
}
::google::genomics::v1::ImportVariantsRequest_Format ImportVariantsRequest::format() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ImportVariantsRequest.format)
  return static_cast< ::google::genomics::v1::ImportVariantsRequest_Format >(format_);
}
void ImportVariantsRequest::set_format(::google::genomics::v1::ImportVariantsRequest_Format value) {
  
  format_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.ImportVariantsRequest.format)
}

// optional bool normalize_reference_names = 5;
void ImportVariantsRequest::clear_normalize_reference_names() {
  normalize_reference_names_ = false;
}
bool ImportVariantsRequest::normalize_reference_names() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ImportVariantsRequest.normalize_reference_names)
  return normalize_reference_names_;
}
void ImportVariantsRequest::set_normalize_reference_names(bool value) {
  
  normalize_reference_names_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.ImportVariantsRequest.normalize_reference_names)
}

// map<string, .google.genomics.v1.InfoMergeOperation> info_merge_config = 6;
int ImportVariantsRequest::info_merge_config_size() const {
  return info_merge_config_.size();
}
void ImportVariantsRequest::clear_info_merge_config() {
  info_merge_config_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation >&
ImportVariantsRequest::info_merge_config() const {
  // @@protoc_insertion_point(field_map:google.genomics.v1.ImportVariantsRequest.info_merge_config)
  return info_merge_config_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation >*
ImportVariantsRequest::mutable_info_merge_config() {
  // @@protoc_insertion_point(field_mutable_map:google.genomics.v1.ImportVariantsRequest.info_merge_config)
  return info_merge_config_.MutableMap();
}

inline const ImportVariantsRequest* ImportVariantsRequest::internal_default_instance() {
  return &ImportVariantsRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImportVariantsResponse::kCallSetIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImportVariantsResponse::ImportVariantsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.ImportVariantsResponse)
}
ImportVariantsResponse::ImportVariantsResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  call_set_ids_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.ImportVariantsResponse)
}

void ImportVariantsResponse::InitAsDefaultInstance() {
}

ImportVariantsResponse::ImportVariantsResponse(const ImportVariantsResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.ImportVariantsResponse)
}

void ImportVariantsResponse::SharedCtor() {
  _cached_size_ = 0;
}

ImportVariantsResponse::~ImportVariantsResponse() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.ImportVariantsResponse)
  SharedDtor();
}

void ImportVariantsResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void ImportVariantsResponse::ArenaDtor(void* object) {
  ImportVariantsResponse* _this = reinterpret_cast< ImportVariantsResponse* >(object);
  (void)_this;
}
void ImportVariantsResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ImportVariantsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImportVariantsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImportVariantsResponse_descriptor_;
}

const ImportVariantsResponse& ImportVariantsResponse::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ImportVariantsResponse> ImportVariantsResponse_default_instance_;

ImportVariantsResponse* ImportVariantsResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ImportVariantsResponse>(arena);
}

void ImportVariantsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.ImportVariantsResponse)
  call_set_ids_.Clear();
}

bool ImportVariantsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.ImportVariantsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string call_set_ids = 1;
      case 1: {
        if (tag == 10) {
         parse_call_set_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_call_set_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->call_set_ids(this->call_set_ids_size() - 1).data(),
            this->call_set_ids(this->call_set_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ImportVariantsResponse.call_set_ids"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_call_set_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.ImportVariantsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.ImportVariantsResponse)
  return false;
#undef DO_
}

void ImportVariantsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.ImportVariantsResponse)
  // repeated string call_set_ids = 1;
  for (int i = 0; i < this->call_set_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_set_ids(i).data(), this->call_set_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ImportVariantsResponse.call_set_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->call_set_ids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.ImportVariantsResponse)
}

::google::protobuf::uint8* ImportVariantsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.ImportVariantsResponse)
  // repeated string call_set_ids = 1;
  for (int i = 0; i < this->call_set_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_set_ids(i).data(), this->call_set_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ImportVariantsResponse.call_set_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->call_set_ids(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.ImportVariantsResponse)
  return target;
}

size_t ImportVariantsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.ImportVariantsResponse)
  size_t total_size = 0;

  // repeated string call_set_ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->call_set_ids_size());
  for (int i = 0; i < this->call_set_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->call_set_ids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImportVariantsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.ImportVariantsResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ImportVariantsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImportVariantsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.ImportVariantsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.ImportVariantsResponse)
    UnsafeMergeFrom(*source);
  }
}

void ImportVariantsResponse::MergeFrom(const ImportVariantsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.ImportVariantsResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ImportVariantsResponse::UnsafeMergeFrom(const ImportVariantsResponse& from) {
  GOOGLE_DCHECK(&from != this);
  call_set_ids_.UnsafeMergeFrom(from.call_set_ids_);
}

void ImportVariantsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.ImportVariantsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImportVariantsResponse::CopyFrom(const ImportVariantsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.ImportVariantsResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ImportVariantsResponse::IsInitialized() const {

  return true;
}

void ImportVariantsResponse::Swap(ImportVariantsResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ImportVariantsResponse temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ImportVariantsResponse::UnsafeArenaSwap(ImportVariantsResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ImportVariantsResponse::InternalSwap(ImportVariantsResponse* other) {
  call_set_ids_.UnsafeArenaSwap(&other->call_set_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImportVariantsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImportVariantsResponse_descriptor_;
  metadata.reflection = ImportVariantsResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImportVariantsResponse

// repeated string call_set_ids = 1;
int ImportVariantsResponse::call_set_ids_size() const {
  return call_set_ids_.size();
}
void ImportVariantsResponse::clear_call_set_ids() {
  call_set_ids_.Clear();
}
const ::std::string& ImportVariantsResponse::call_set_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ImportVariantsResponse.call_set_ids)
  return call_set_ids_.Get(index);
}
::std::string* ImportVariantsResponse::mutable_call_set_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ImportVariantsResponse.call_set_ids)
  return call_set_ids_.Mutable(index);
}
void ImportVariantsResponse::set_call_set_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.ImportVariantsResponse.call_set_ids)
  call_set_ids_.Mutable(index)->assign(value);
}
void ImportVariantsResponse::set_call_set_ids(int index, const char* value) {
  call_set_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ImportVariantsResponse.call_set_ids)
}
void ImportVariantsResponse::set_call_set_ids(int index, const char* value, size_t size) {
  call_set_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ImportVariantsResponse.call_set_ids)
}
::std::string* ImportVariantsResponse::add_call_set_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.ImportVariantsResponse.call_set_ids)
  return call_set_ids_.Add();
}
void ImportVariantsResponse::add_call_set_ids(const ::std::string& value) {
  call_set_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.ImportVariantsResponse.call_set_ids)
}
void ImportVariantsResponse::add_call_set_ids(const char* value) {
  call_set_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.ImportVariantsResponse.call_set_ids)
}
void ImportVariantsResponse::add_call_set_ids(const char* value, size_t size) {
  call_set_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.ImportVariantsResponse.call_set_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ImportVariantsResponse::call_set_ids() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.ImportVariantsResponse.call_set_ids)
  return call_set_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ImportVariantsResponse::mutable_call_set_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.ImportVariantsResponse.call_set_ids)
  return &call_set_ids_;
}

inline const ImportVariantsResponse* ImportVariantsResponse::internal_default_instance() {
  return &ImportVariantsResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void CreateVariantSetRequest::_slow_mutable_variant_set() {
  variant_set_ = ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::VariantSet >(
      GetArenaNoVirtual());
}
::google::genomics::v1::VariantSet* CreateVariantSetRequest::_slow_release_variant_set() {
  if (variant_set_ == NULL) {
    return NULL;
  } else {
    ::google::genomics::v1::VariantSet* temp = new ::google::genomics::v1::VariantSet(*variant_set_);
    variant_set_ = NULL;
    return temp;
  }
}
::google::genomics::v1::VariantSet* CreateVariantSetRequest::unsafe_arena_release_variant_set() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.CreateVariantSetRequest.variant_set)
  
  ::google::genomics::v1::VariantSet* temp = variant_set_;
  variant_set_ = NULL;
  return temp;
}
void CreateVariantSetRequest::_slow_set_allocated_variant_set(
    ::google::protobuf::Arena* message_arena, ::google::genomics::v1::VariantSet** variant_set) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*variant_set) == NULL) {
      message_arena->Own(*variant_set);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*variant_set)) {
      ::google::genomics::v1::VariantSet* new_variant_set = 
            ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::VariantSet >(
            message_arena);
      new_variant_set->CopyFrom(**variant_set);
      *variant_set = new_variant_set;
    }
}
void CreateVariantSetRequest::unsafe_arena_set_allocated_variant_set(
    ::google::genomics::v1::VariantSet* variant_set) {
  if (GetArenaNoVirtual() == NULL) {
    delete variant_set_;
  }
  variant_set_ = variant_set;
  if (variant_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.CreateVariantSetRequest.variant_set)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateVariantSetRequest::kVariantSetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateVariantSetRequest::CreateVariantSetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.CreateVariantSetRequest)
}
CreateVariantSetRequest::CreateVariantSetRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.CreateVariantSetRequest)
}

void CreateVariantSetRequest::InitAsDefaultInstance() {
  variant_set_ = const_cast< ::google::genomics::v1::VariantSet*>(
      ::google::genomics::v1::VariantSet::internal_default_instance());
}

CreateVariantSetRequest::CreateVariantSetRequest(const CreateVariantSetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.CreateVariantSetRequest)
}

void CreateVariantSetRequest::SharedCtor() {
  variant_set_ = NULL;
  _cached_size_ = 0;
}

CreateVariantSetRequest::~CreateVariantSetRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.CreateVariantSetRequest)
  SharedDtor();
}

void CreateVariantSetRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != &CreateVariantSetRequest_default_instance_.get()) {
    delete variant_set_;
  }
}

void CreateVariantSetRequest::ArenaDtor(void* object) {
  CreateVariantSetRequest* _this = reinterpret_cast< CreateVariantSetRequest* >(object);
  (void)_this;
}
void CreateVariantSetRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CreateVariantSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateVariantSetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateVariantSetRequest_descriptor_;
}

const CreateVariantSetRequest& CreateVariantSetRequest::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CreateVariantSetRequest> CreateVariantSetRequest_default_instance_;

CreateVariantSetRequest* CreateVariantSetRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CreateVariantSetRequest>(arena);
}

void CreateVariantSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.CreateVariantSetRequest)
  if (GetArenaNoVirtual() == NULL && variant_set_ != NULL) delete variant_set_;
  variant_set_ = NULL;
}

bool CreateVariantSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.CreateVariantSetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.genomics.v1.VariantSet variant_set = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_variant_set()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.CreateVariantSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.CreateVariantSetRequest)
  return false;
#undef DO_
}

void CreateVariantSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.CreateVariantSetRequest)
  // optional .google.genomics.v1.VariantSet variant_set = 1;
  if (this->has_variant_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->variant_set_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.CreateVariantSetRequest)
}

::google::protobuf::uint8* CreateVariantSetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.CreateVariantSetRequest)
  // optional .google.genomics.v1.VariantSet variant_set = 1;
  if (this->has_variant_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->variant_set_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.CreateVariantSetRequest)
  return target;
}

size_t CreateVariantSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.CreateVariantSetRequest)
  size_t total_size = 0;

  // optional .google.genomics.v1.VariantSet variant_set = 1;
  if (this->has_variant_set()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->variant_set_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateVariantSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.CreateVariantSetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CreateVariantSetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateVariantSetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.CreateVariantSetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.CreateVariantSetRequest)
    UnsafeMergeFrom(*source);
  }
}

void CreateVariantSetRequest::MergeFrom(const CreateVariantSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.CreateVariantSetRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CreateVariantSetRequest::UnsafeMergeFrom(const CreateVariantSetRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_variant_set()) {
    mutable_variant_set()->::google::genomics::v1::VariantSet::MergeFrom(from.variant_set());
  }
}

void CreateVariantSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.CreateVariantSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateVariantSetRequest::CopyFrom(const CreateVariantSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.CreateVariantSetRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CreateVariantSetRequest::IsInitialized() const {

  return true;
}

void CreateVariantSetRequest::Swap(CreateVariantSetRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CreateVariantSetRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void CreateVariantSetRequest::UnsafeArenaSwap(CreateVariantSetRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CreateVariantSetRequest::InternalSwap(CreateVariantSetRequest* other) {
  std::swap(variant_set_, other->variant_set_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateVariantSetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateVariantSetRequest_descriptor_;
  metadata.reflection = CreateVariantSetRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateVariantSetRequest

// optional .google.genomics.v1.VariantSet variant_set = 1;
bool CreateVariantSetRequest::has_variant_set() const {
  return this != internal_default_instance() && variant_set_ != NULL;
}
void CreateVariantSetRequest::clear_variant_set() {
  if (GetArenaNoVirtual() == NULL && variant_set_ != NULL) delete variant_set_;
  variant_set_ = NULL;
}
const ::google::genomics::v1::VariantSet& CreateVariantSetRequest::variant_set() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.CreateVariantSetRequest.variant_set)
  return variant_set_ != NULL ? *variant_set_
                         : *::google::genomics::v1::VariantSet::internal_default_instance();
}
::google::genomics::v1::VariantSet* CreateVariantSetRequest::mutable_variant_set() {
  
  if (variant_set_ == NULL) {
    _slow_mutable_variant_set();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.CreateVariantSetRequest.variant_set)
  return variant_set_;
}
::google::genomics::v1::VariantSet* CreateVariantSetRequest::release_variant_set() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.CreateVariantSetRequest.variant_set)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_variant_set();
  } else {
    ::google::genomics::v1::VariantSet* temp = variant_set_;
    variant_set_ = NULL;
    return temp;
  }
}
 void CreateVariantSetRequest::set_allocated_variant_set(::google::genomics::v1::VariantSet* variant_set) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete variant_set_;
  }
  if (variant_set != NULL) {
    _slow_set_allocated_variant_set(message_arena, &variant_set);
  }
  variant_set_ = variant_set;
  if (variant_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.CreateVariantSetRequest.variant_set)
}

inline const CreateVariantSetRequest* CreateVariantSetRequest::internal_default_instance() {
  return &CreateVariantSetRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ExportVariantSetRequest_Format_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExportVariantSetRequest_Format_descriptor_;
}
bool ExportVariantSetRequest_Format_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ExportVariantSetRequest_Format ExportVariantSetRequest::FORMAT_UNSPECIFIED;
const ExportVariantSetRequest_Format ExportVariantSetRequest::FORMAT_BIGQUERY;
const ExportVariantSetRequest_Format ExportVariantSetRequest::Format_MIN;
const ExportVariantSetRequest_Format ExportVariantSetRequest::Format_MAX;
const int ExportVariantSetRequest::Format_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExportVariantSetRequest::kVariantSetIdFieldNumber;
const int ExportVariantSetRequest::kCallSetIdsFieldNumber;
const int ExportVariantSetRequest::kProjectIdFieldNumber;
const int ExportVariantSetRequest::kFormatFieldNumber;
const int ExportVariantSetRequest::kBigqueryDatasetFieldNumber;
const int ExportVariantSetRequest::kBigqueryTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExportVariantSetRequest::ExportVariantSetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.ExportVariantSetRequest)
}
ExportVariantSetRequest::ExportVariantSetRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  call_set_ids_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.ExportVariantSetRequest)
}

void ExportVariantSetRequest::InitAsDefaultInstance() {
}

ExportVariantSetRequest::ExportVariantSetRequest(const ExportVariantSetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.ExportVariantSetRequest)
}

void ExportVariantSetRequest::SharedCtor() {
  variant_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bigquery_dataset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bigquery_table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_ = 0;
  _cached_size_ = 0;
}

ExportVariantSetRequest::~ExportVariantSetRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.ExportVariantSetRequest)
  SharedDtor();
}

void ExportVariantSetRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  variant_set_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  project_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  bigquery_dataset_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  bigquery_table_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void ExportVariantSetRequest::ArenaDtor(void* object) {
  ExportVariantSetRequest* _this = reinterpret_cast< ExportVariantSetRequest* >(object);
  (void)_this;
}
void ExportVariantSetRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ExportVariantSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExportVariantSetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExportVariantSetRequest_descriptor_;
}

const ExportVariantSetRequest& ExportVariantSetRequest::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ExportVariantSetRequest> ExportVariantSetRequest_default_instance_;

ExportVariantSetRequest* ExportVariantSetRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ExportVariantSetRequest>(arena);
}

void ExportVariantSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.ExportVariantSetRequest)
  variant_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  project_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  format_ = 0;
  bigquery_dataset_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  bigquery_table_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  call_set_ids_.Clear();
}

bool ExportVariantSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.ExportVariantSetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string variant_set_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_variant_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->variant_set_id().data(), this->variant_set_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ExportVariantSetRequest.variant_set_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_call_set_ids;
        break;
      }

      // repeated string call_set_ids = 2;
      case 2: {
        if (tag == 18) {
         parse_call_set_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_call_set_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->call_set_ids(this->call_set_ids_size() - 1).data(),
            this->call_set_ids(this->call_set_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ExportVariantSetRequest.call_set_ids"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_call_set_ids;
        if (input->ExpectTag(26)) goto parse_project_id;
        break;
      }

      // optional string project_id = 3;
      case 3: {
        if (tag == 26) {
         parse_project_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ExportVariantSetRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_format;
        break;
      }

      // optional .google.genomics.v1.ExportVariantSetRequest.Format format = 4;
      case 4: {
        if (tag == 32) {
         parse_format:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_format(static_cast< ::google::genomics::v1::ExportVariantSetRequest_Format >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_bigquery_dataset;
        break;
      }

      // optional string bigquery_dataset = 5;
      case 5: {
        if (tag == 42) {
         parse_bigquery_dataset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bigquery_dataset()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bigquery_dataset().data(), this->bigquery_dataset().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ExportVariantSetRequest.bigquery_dataset"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_bigquery_table;
        break;
      }

      // optional string bigquery_table = 6;
      case 6: {
        if (tag == 50) {
         parse_bigquery_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bigquery_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bigquery_table().data(), this->bigquery_table().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ExportVariantSetRequest.bigquery_table"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.ExportVariantSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.ExportVariantSetRequest)
  return false;
#undef DO_
}

void ExportVariantSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.ExportVariantSetRequest)
  // optional string variant_set_id = 1;
  if (this->variant_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_id().data(), this->variant_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ExportVariantSetRequest.variant_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->variant_set_id(), output);
  }

  // repeated string call_set_ids = 2;
  for (int i = 0; i < this->call_set_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_set_ids(i).data(), this->call_set_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ExportVariantSetRequest.call_set_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->call_set_ids(i), output);
  }

  // optional string project_id = 3;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ExportVariantSetRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->project_id(), output);
  }

  // optional .google.genomics.v1.ExportVariantSetRequest.Format format = 4;
  if (this->format() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->format(), output);
  }

  // optional string bigquery_dataset = 5;
  if (this->bigquery_dataset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bigquery_dataset().data(), this->bigquery_dataset().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ExportVariantSetRequest.bigquery_dataset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->bigquery_dataset(), output);
  }

  // optional string bigquery_table = 6;
  if (this->bigquery_table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bigquery_table().data(), this->bigquery_table().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ExportVariantSetRequest.bigquery_table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->bigquery_table(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.ExportVariantSetRequest)
}

::google::protobuf::uint8* ExportVariantSetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.ExportVariantSetRequest)
  // optional string variant_set_id = 1;
  if (this->variant_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_id().data(), this->variant_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ExportVariantSetRequest.variant_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->variant_set_id(), target);
  }

  // repeated string call_set_ids = 2;
  for (int i = 0; i < this->call_set_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_set_ids(i).data(), this->call_set_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ExportVariantSetRequest.call_set_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->call_set_ids(i), target);
  }

  // optional string project_id = 3;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ExportVariantSetRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->project_id(), target);
  }

  // optional .google.genomics.v1.ExportVariantSetRequest.Format format = 4;
  if (this->format() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->format(), target);
  }

  // optional string bigquery_dataset = 5;
  if (this->bigquery_dataset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bigquery_dataset().data(), this->bigquery_dataset().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ExportVariantSetRequest.bigquery_dataset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->bigquery_dataset(), target);
  }

  // optional string bigquery_table = 6;
  if (this->bigquery_table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bigquery_table().data(), this->bigquery_table().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ExportVariantSetRequest.bigquery_table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->bigquery_table(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.ExportVariantSetRequest)
  return target;
}

size_t ExportVariantSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.ExportVariantSetRequest)
  size_t total_size = 0;

  // optional string variant_set_id = 1;
  if (this->variant_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->variant_set_id());
  }

  // optional string project_id = 3;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // optional .google.genomics.v1.ExportVariantSetRequest.Format format = 4;
  if (this->format() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
  }

  // optional string bigquery_dataset = 5;
  if (this->bigquery_dataset().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bigquery_dataset());
  }

  // optional string bigquery_table = 6;
  if (this->bigquery_table().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bigquery_table());
  }

  // repeated string call_set_ids = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->call_set_ids_size());
  for (int i = 0; i < this->call_set_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->call_set_ids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExportVariantSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.ExportVariantSetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ExportVariantSetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExportVariantSetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.ExportVariantSetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.ExportVariantSetRequest)
    UnsafeMergeFrom(*source);
  }
}

void ExportVariantSetRequest::MergeFrom(const ExportVariantSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.ExportVariantSetRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ExportVariantSetRequest::UnsafeMergeFrom(const ExportVariantSetRequest& from) {
  GOOGLE_DCHECK(&from != this);
  call_set_ids_.UnsafeMergeFrom(from.call_set_ids_);
  if (from.variant_set_id().size() > 0) {
    set_variant_set_id(from.variant_set_id());
  }
  if (from.project_id().size() > 0) {
    set_project_id(from.project_id());
  }
  if (from.format() != 0) {
    set_format(from.format());
  }
  if (from.bigquery_dataset().size() > 0) {
    set_bigquery_dataset(from.bigquery_dataset());
  }
  if (from.bigquery_table().size() > 0) {
    set_bigquery_table(from.bigquery_table());
  }
}

void ExportVariantSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.ExportVariantSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExportVariantSetRequest::CopyFrom(const ExportVariantSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.ExportVariantSetRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ExportVariantSetRequest::IsInitialized() const {

  return true;
}

void ExportVariantSetRequest::Swap(ExportVariantSetRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ExportVariantSetRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ExportVariantSetRequest::UnsafeArenaSwap(ExportVariantSetRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ExportVariantSetRequest::InternalSwap(ExportVariantSetRequest* other) {
  variant_set_id_.Swap(&other->variant_set_id_);
  call_set_ids_.UnsafeArenaSwap(&other->call_set_ids_);
  project_id_.Swap(&other->project_id_);
  std::swap(format_, other->format_);
  bigquery_dataset_.Swap(&other->bigquery_dataset_);
  bigquery_table_.Swap(&other->bigquery_table_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExportVariantSetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExportVariantSetRequest_descriptor_;
  metadata.reflection = ExportVariantSetRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExportVariantSetRequest

// optional string variant_set_id = 1;
void ExportVariantSetRequest::clear_variant_set_id() {
  variant_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ExportVariantSetRequest::variant_set_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ExportVariantSetRequest.variant_set_id)
  return variant_set_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExportVariantSetRequest::set_variant_set_id(const ::std::string& value) {
  
  variant_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ExportVariantSetRequest.variant_set_id)
}
void ExportVariantSetRequest::set_variant_set_id(const char* value) {
  
  variant_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ExportVariantSetRequest.variant_set_id)
}
void ExportVariantSetRequest::set_variant_set_id(const char* value,
    size_t size) {
  
  variant_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ExportVariantSetRequest.variant_set_id)
}
::std::string* ExportVariantSetRequest::mutable_variant_set_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ExportVariantSetRequest.variant_set_id)
  return variant_set_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ExportVariantSetRequest::release_variant_set_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ExportVariantSetRequest.variant_set_id)
  
  return variant_set_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ExportVariantSetRequest::unsafe_arena_release_variant_set_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ExportVariantSetRequest.variant_set_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return variant_set_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ExportVariantSetRequest::set_allocated_variant_set_id(::std::string* variant_set_id) {
  if (variant_set_id != NULL) {
    
  } else {
    
  }
  variant_set_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), variant_set_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ExportVariantSetRequest.variant_set_id)
}
void ExportVariantSetRequest::unsafe_arena_set_allocated_variant_set_id(
    ::std::string* variant_set_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (variant_set_id != NULL) {
    
  } else {
    
  }
  variant_set_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      variant_set_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ExportVariantSetRequest.variant_set_id)
}

// repeated string call_set_ids = 2;
int ExportVariantSetRequest::call_set_ids_size() const {
  return call_set_ids_.size();
}
void ExportVariantSetRequest::clear_call_set_ids() {
  call_set_ids_.Clear();
}
const ::std::string& ExportVariantSetRequest::call_set_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ExportVariantSetRequest.call_set_ids)
  return call_set_ids_.Get(index);
}
::std::string* ExportVariantSetRequest::mutable_call_set_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ExportVariantSetRequest.call_set_ids)
  return call_set_ids_.Mutable(index);
}
void ExportVariantSetRequest::set_call_set_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.ExportVariantSetRequest.call_set_ids)
  call_set_ids_.Mutable(index)->assign(value);
}
void ExportVariantSetRequest::set_call_set_ids(int index, const char* value) {
  call_set_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ExportVariantSetRequest.call_set_ids)
}
void ExportVariantSetRequest::set_call_set_ids(int index, const char* value, size_t size) {
  call_set_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ExportVariantSetRequest.call_set_ids)
}
::std::string* ExportVariantSetRequest::add_call_set_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.ExportVariantSetRequest.call_set_ids)
  return call_set_ids_.Add();
}
void ExportVariantSetRequest::add_call_set_ids(const ::std::string& value) {
  call_set_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.ExportVariantSetRequest.call_set_ids)
}
void ExportVariantSetRequest::add_call_set_ids(const char* value) {
  call_set_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.ExportVariantSetRequest.call_set_ids)
}
void ExportVariantSetRequest::add_call_set_ids(const char* value, size_t size) {
  call_set_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.ExportVariantSetRequest.call_set_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ExportVariantSetRequest::call_set_ids() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.ExportVariantSetRequest.call_set_ids)
  return call_set_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ExportVariantSetRequest::mutable_call_set_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.ExportVariantSetRequest.call_set_ids)
  return &call_set_ids_;
}

// optional string project_id = 3;
void ExportVariantSetRequest::clear_project_id() {
  project_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ExportVariantSetRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ExportVariantSetRequest.project_id)
  return project_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExportVariantSetRequest::set_project_id(const ::std::string& value) {
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ExportVariantSetRequest.project_id)
}
void ExportVariantSetRequest::set_project_id(const char* value) {
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ExportVariantSetRequest.project_id)
}
void ExportVariantSetRequest::set_project_id(const char* value,
    size_t size) {
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ExportVariantSetRequest.project_id)
}
::std::string* ExportVariantSetRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ExportVariantSetRequest.project_id)
  return project_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ExportVariantSetRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ExportVariantSetRequest.project_id)
  
  return project_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ExportVariantSetRequest::unsafe_arena_release_project_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ExportVariantSetRequest.project_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return project_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ExportVariantSetRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ExportVariantSetRequest.project_id)
}
void ExportVariantSetRequest::unsafe_arena_set_allocated_project_id(
    ::std::string* project_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      project_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ExportVariantSetRequest.project_id)
}

// optional .google.genomics.v1.ExportVariantSetRequest.Format format = 4;
void ExportVariantSetRequest::clear_format() {
  format_ = 0;
}
::google::genomics::v1::ExportVariantSetRequest_Format ExportVariantSetRequest::format() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ExportVariantSetRequest.format)
  return static_cast< ::google::genomics::v1::ExportVariantSetRequest_Format >(format_);
}
void ExportVariantSetRequest::set_format(::google::genomics::v1::ExportVariantSetRequest_Format value) {
  
  format_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.ExportVariantSetRequest.format)
}

// optional string bigquery_dataset = 5;
void ExportVariantSetRequest::clear_bigquery_dataset() {
  bigquery_dataset_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ExportVariantSetRequest::bigquery_dataset() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ExportVariantSetRequest.bigquery_dataset)
  return bigquery_dataset_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExportVariantSetRequest::set_bigquery_dataset(const ::std::string& value) {
  
  bigquery_dataset_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ExportVariantSetRequest.bigquery_dataset)
}
void ExportVariantSetRequest::set_bigquery_dataset(const char* value) {
  
  bigquery_dataset_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ExportVariantSetRequest.bigquery_dataset)
}
void ExportVariantSetRequest::set_bigquery_dataset(const char* value,
    size_t size) {
  
  bigquery_dataset_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ExportVariantSetRequest.bigquery_dataset)
}
::std::string* ExportVariantSetRequest::mutable_bigquery_dataset() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ExportVariantSetRequest.bigquery_dataset)
  return bigquery_dataset_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ExportVariantSetRequest::release_bigquery_dataset() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ExportVariantSetRequest.bigquery_dataset)
  
  return bigquery_dataset_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ExportVariantSetRequest::unsafe_arena_release_bigquery_dataset() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ExportVariantSetRequest.bigquery_dataset)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return bigquery_dataset_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ExportVariantSetRequest::set_allocated_bigquery_dataset(::std::string* bigquery_dataset) {
  if (bigquery_dataset != NULL) {
    
  } else {
    
  }
  bigquery_dataset_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bigquery_dataset,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ExportVariantSetRequest.bigquery_dataset)
}
void ExportVariantSetRequest::unsafe_arena_set_allocated_bigquery_dataset(
    ::std::string* bigquery_dataset) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (bigquery_dataset != NULL) {
    
  } else {
    
  }
  bigquery_dataset_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      bigquery_dataset, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ExportVariantSetRequest.bigquery_dataset)
}

// optional string bigquery_table = 6;
void ExportVariantSetRequest::clear_bigquery_table() {
  bigquery_table_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ExportVariantSetRequest::bigquery_table() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ExportVariantSetRequest.bigquery_table)
  return bigquery_table_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExportVariantSetRequest::set_bigquery_table(const ::std::string& value) {
  
  bigquery_table_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ExportVariantSetRequest.bigquery_table)
}
void ExportVariantSetRequest::set_bigquery_table(const char* value) {
  
  bigquery_table_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ExportVariantSetRequest.bigquery_table)
}
void ExportVariantSetRequest::set_bigquery_table(const char* value,
    size_t size) {
  
  bigquery_table_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ExportVariantSetRequest.bigquery_table)
}
::std::string* ExportVariantSetRequest::mutable_bigquery_table() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ExportVariantSetRequest.bigquery_table)
  return bigquery_table_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ExportVariantSetRequest::release_bigquery_table() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ExportVariantSetRequest.bigquery_table)
  
  return bigquery_table_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ExportVariantSetRequest::unsafe_arena_release_bigquery_table() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ExportVariantSetRequest.bigquery_table)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return bigquery_table_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ExportVariantSetRequest::set_allocated_bigquery_table(::std::string* bigquery_table) {
  if (bigquery_table != NULL) {
    
  } else {
    
  }
  bigquery_table_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bigquery_table,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ExportVariantSetRequest.bigquery_table)
}
void ExportVariantSetRequest::unsafe_arena_set_allocated_bigquery_table(
    ::std::string* bigquery_table) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (bigquery_table != NULL) {
    
  } else {
    
  }
  bigquery_table_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      bigquery_table, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ExportVariantSetRequest.bigquery_table)
}

inline const ExportVariantSetRequest* ExportVariantSetRequest::internal_default_instance() {
  return &ExportVariantSetRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetVariantSetRequest::kVariantSetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetVariantSetRequest::GetVariantSetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.GetVariantSetRequest)
}
GetVariantSetRequest::GetVariantSetRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.GetVariantSetRequest)
}

void GetVariantSetRequest::InitAsDefaultInstance() {
}

GetVariantSetRequest::GetVariantSetRequest(const GetVariantSetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.GetVariantSetRequest)
}

void GetVariantSetRequest::SharedCtor() {
  variant_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetVariantSetRequest::~GetVariantSetRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.GetVariantSetRequest)
  SharedDtor();
}

void GetVariantSetRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  variant_set_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void GetVariantSetRequest::ArenaDtor(void* object) {
  GetVariantSetRequest* _this = reinterpret_cast< GetVariantSetRequest* >(object);
  (void)_this;
}
void GetVariantSetRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetVariantSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetVariantSetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetVariantSetRequest_descriptor_;
}

const GetVariantSetRequest& GetVariantSetRequest::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetVariantSetRequest> GetVariantSetRequest_default_instance_;

GetVariantSetRequest* GetVariantSetRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetVariantSetRequest>(arena);
}

void GetVariantSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.GetVariantSetRequest)
  variant_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool GetVariantSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.GetVariantSetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string variant_set_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_variant_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->variant_set_id().data(), this->variant_set_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.GetVariantSetRequest.variant_set_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.GetVariantSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.GetVariantSetRequest)
  return false;
#undef DO_
}

void GetVariantSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.GetVariantSetRequest)
  // optional string variant_set_id = 1;
  if (this->variant_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_id().data(), this->variant_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.GetVariantSetRequest.variant_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->variant_set_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.GetVariantSetRequest)
}

::google::protobuf::uint8* GetVariantSetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.GetVariantSetRequest)
  // optional string variant_set_id = 1;
  if (this->variant_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_id().data(), this->variant_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.GetVariantSetRequest.variant_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->variant_set_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.GetVariantSetRequest)
  return target;
}

size_t GetVariantSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.GetVariantSetRequest)
  size_t total_size = 0;

  // optional string variant_set_id = 1;
  if (this->variant_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->variant_set_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetVariantSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.GetVariantSetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetVariantSetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetVariantSetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.GetVariantSetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.GetVariantSetRequest)
    UnsafeMergeFrom(*source);
  }
}

void GetVariantSetRequest::MergeFrom(const GetVariantSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.GetVariantSetRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetVariantSetRequest::UnsafeMergeFrom(const GetVariantSetRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.variant_set_id().size() > 0) {
    set_variant_set_id(from.variant_set_id());
  }
}

void GetVariantSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.GetVariantSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVariantSetRequest::CopyFrom(const GetVariantSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.GetVariantSetRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetVariantSetRequest::IsInitialized() const {

  return true;
}

void GetVariantSetRequest::Swap(GetVariantSetRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetVariantSetRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void GetVariantSetRequest::UnsafeArenaSwap(GetVariantSetRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetVariantSetRequest::InternalSwap(GetVariantSetRequest* other) {
  variant_set_id_.Swap(&other->variant_set_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetVariantSetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetVariantSetRequest_descriptor_;
  metadata.reflection = GetVariantSetRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetVariantSetRequest

// optional string variant_set_id = 1;
void GetVariantSetRequest::clear_variant_set_id() {
  variant_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetVariantSetRequest::variant_set_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.GetVariantSetRequest.variant_set_id)
  return variant_set_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetVariantSetRequest::set_variant_set_id(const ::std::string& value) {
  
  variant_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.GetVariantSetRequest.variant_set_id)
}
void GetVariantSetRequest::set_variant_set_id(const char* value) {
  
  variant_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.GetVariantSetRequest.variant_set_id)
}
void GetVariantSetRequest::set_variant_set_id(const char* value,
    size_t size) {
  
  variant_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.GetVariantSetRequest.variant_set_id)
}
::std::string* GetVariantSetRequest::mutable_variant_set_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.GetVariantSetRequest.variant_set_id)
  return variant_set_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetVariantSetRequest::release_variant_set_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.GetVariantSetRequest.variant_set_id)
  
  return variant_set_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetVariantSetRequest::unsafe_arena_release_variant_set_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.GetVariantSetRequest.variant_set_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return variant_set_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetVariantSetRequest::set_allocated_variant_set_id(::std::string* variant_set_id) {
  if (variant_set_id != NULL) {
    
  } else {
    
  }
  variant_set_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), variant_set_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.GetVariantSetRequest.variant_set_id)
}
void GetVariantSetRequest::unsafe_arena_set_allocated_variant_set_id(
    ::std::string* variant_set_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (variant_set_id != NULL) {
    
  } else {
    
  }
  variant_set_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      variant_set_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.GetVariantSetRequest.variant_set_id)
}

inline const GetVariantSetRequest* GetVariantSetRequest::internal_default_instance() {
  return &GetVariantSetRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchVariantSetsRequest::kDatasetIdsFieldNumber;
const int SearchVariantSetsRequest::kPageTokenFieldNumber;
const int SearchVariantSetsRequest::kPageSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchVariantSetsRequest::SearchVariantSetsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.SearchVariantSetsRequest)
}
SearchVariantSetsRequest::SearchVariantSetsRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  dataset_ids_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.SearchVariantSetsRequest)
}

void SearchVariantSetsRequest::InitAsDefaultInstance() {
}

SearchVariantSetsRequest::SearchVariantSetsRequest(const SearchVariantSetsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.SearchVariantSetsRequest)
}

void SearchVariantSetsRequest::SharedCtor() {
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
  _cached_size_ = 0;
}

SearchVariantSetsRequest::~SearchVariantSetsRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.SearchVariantSetsRequest)
  SharedDtor();
}

void SearchVariantSetsRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  page_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void SearchVariantSetsRequest::ArenaDtor(void* object) {
  SearchVariantSetsRequest* _this = reinterpret_cast< SearchVariantSetsRequest* >(object);
  (void)_this;
}
void SearchVariantSetsRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SearchVariantSetsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchVariantSetsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchVariantSetsRequest_descriptor_;
}

const SearchVariantSetsRequest& SearchVariantSetsRequest::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SearchVariantSetsRequest> SearchVariantSetsRequest_default_instance_;

SearchVariantSetsRequest* SearchVariantSetsRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SearchVariantSetsRequest>(arena);
}

void SearchVariantSetsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.SearchVariantSetsRequest)
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_size_ = 0;
  dataset_ids_.Clear();
}

bool SearchVariantSetsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.SearchVariantSetsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string dataset_ids = 1;
      case 1: {
        if (tag == 10) {
         parse_dataset_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_dataset_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dataset_ids(this->dataset_ids_size() - 1).data(),
            this->dataset_ids(this->dataset_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchVariantSetsRequest.dataset_ids"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_dataset_ids;
        if (input->ExpectTag(18)) goto parse_page_token;
        break;
      }

      // optional string page_token = 2;
      case 2: {
        if (tag == 18) {
         parse_page_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), this->page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchVariantSetsRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_page_size;
        break;
      }

      // optional int32 page_size = 3;
      case 3: {
        if (tag == 24) {
         parse_page_size:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.SearchVariantSetsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.SearchVariantSetsRequest)
  return false;
#undef DO_
}

void SearchVariantSetsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.SearchVariantSetsRequest)
  // repeated string dataset_ids = 1;
  for (int i = 0; i < this->dataset_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dataset_ids(i).data(), this->dataset_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchVariantSetsRequest.dataset_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dataset_ids(i), output);
  }

  // optional string page_token = 2;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchVariantSetsRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->page_token(), output);
  }

  // optional int32 page_size = 3;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->page_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.SearchVariantSetsRequest)
}

::google::protobuf::uint8* SearchVariantSetsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.SearchVariantSetsRequest)
  // repeated string dataset_ids = 1;
  for (int i = 0; i < this->dataset_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dataset_ids(i).data(), this->dataset_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchVariantSetsRequest.dataset_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->dataset_ids(i), target);
  }

  // optional string page_token = 2;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchVariantSetsRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->page_token(), target);
  }

  // optional int32 page_size = 3;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->page_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.SearchVariantSetsRequest)
  return target;
}

size_t SearchVariantSetsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.SearchVariantSetsRequest)
  size_t total_size = 0;

  // optional string page_token = 2;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // optional int32 page_size = 3;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  // repeated string dataset_ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->dataset_ids_size());
  for (int i = 0; i < this->dataset_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->dataset_ids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchVariantSetsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.SearchVariantSetsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SearchVariantSetsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchVariantSetsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.SearchVariantSetsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.SearchVariantSetsRequest)
    UnsafeMergeFrom(*source);
  }
}

void SearchVariantSetsRequest::MergeFrom(const SearchVariantSetsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.SearchVariantSetsRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SearchVariantSetsRequest::UnsafeMergeFrom(const SearchVariantSetsRequest& from) {
  GOOGLE_DCHECK(&from != this);
  dataset_ids_.UnsafeMergeFrom(from.dataset_ids_);
  if (from.page_token().size() > 0) {
    set_page_token(from.page_token());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void SearchVariantSetsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.SearchVariantSetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchVariantSetsRequest::CopyFrom(const SearchVariantSetsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.SearchVariantSetsRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SearchVariantSetsRequest::IsInitialized() const {

  return true;
}

void SearchVariantSetsRequest::Swap(SearchVariantSetsRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SearchVariantSetsRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void SearchVariantSetsRequest::UnsafeArenaSwap(SearchVariantSetsRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SearchVariantSetsRequest::InternalSwap(SearchVariantSetsRequest* other) {
  dataset_ids_.UnsafeArenaSwap(&other->dataset_ids_);
  page_token_.Swap(&other->page_token_);
  std::swap(page_size_, other->page_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchVariantSetsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchVariantSetsRequest_descriptor_;
  metadata.reflection = SearchVariantSetsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchVariantSetsRequest

// repeated string dataset_ids = 1;
int SearchVariantSetsRequest::dataset_ids_size() const {
  return dataset_ids_.size();
}
void SearchVariantSetsRequest::clear_dataset_ids() {
  dataset_ids_.Clear();
}
const ::std::string& SearchVariantSetsRequest::dataset_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchVariantSetsRequest.dataset_ids)
  return dataset_ids_.Get(index);
}
::std::string* SearchVariantSetsRequest::mutable_dataset_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchVariantSetsRequest.dataset_ids)
  return dataset_ids_.Mutable(index);
}
void SearchVariantSetsRequest::set_dataset_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchVariantSetsRequest.dataset_ids)
  dataset_ids_.Mutable(index)->assign(value);
}
void SearchVariantSetsRequest::set_dataset_ids(int index, const char* value) {
  dataset_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchVariantSetsRequest.dataset_ids)
}
void SearchVariantSetsRequest::set_dataset_ids(int index, const char* value, size_t size) {
  dataset_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchVariantSetsRequest.dataset_ids)
}
::std::string* SearchVariantSetsRequest::add_dataset_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.SearchVariantSetsRequest.dataset_ids)
  return dataset_ids_.Add();
}
void SearchVariantSetsRequest::add_dataset_ids(const ::std::string& value) {
  dataset_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchVariantSetsRequest.dataset_ids)
}
void SearchVariantSetsRequest::add_dataset_ids(const char* value) {
  dataset_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.SearchVariantSetsRequest.dataset_ids)
}
void SearchVariantSetsRequest::add_dataset_ids(const char* value, size_t size) {
  dataset_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.SearchVariantSetsRequest.dataset_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SearchVariantSetsRequest::dataset_ids() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.SearchVariantSetsRequest.dataset_ids)
  return dataset_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SearchVariantSetsRequest::mutable_dataset_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.SearchVariantSetsRequest.dataset_ids)
  return &dataset_ids_;
}

// optional string page_token = 2;
void SearchVariantSetsRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SearchVariantSetsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchVariantSetsRequest.page_token)
  return page_token_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchVariantSetsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchVariantSetsRequest.page_token)
}
void SearchVariantSetsRequest::set_page_token(const char* value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchVariantSetsRequest.page_token)
}
void SearchVariantSetsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchVariantSetsRequest.page_token)
}
::std::string* SearchVariantSetsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchVariantSetsRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchVariantSetsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.SearchVariantSetsRequest.page_token)
  
  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchVariantSetsRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.SearchVariantSetsRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SearchVariantSetsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.SearchVariantSetsRequest.page_token)
}
void SearchVariantSetsRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.SearchVariantSetsRequest.page_token)
}

// optional int32 page_size = 3;
void SearchVariantSetsRequest::clear_page_size() {
  page_size_ = 0;
}
::google::protobuf::int32 SearchVariantSetsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchVariantSetsRequest.page_size)
  return page_size_;
}
void SearchVariantSetsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchVariantSetsRequest.page_size)
}

inline const SearchVariantSetsRequest* SearchVariantSetsRequest::internal_default_instance() {
  return &SearchVariantSetsRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchVariantSetsResponse::kVariantSetsFieldNumber;
const int SearchVariantSetsResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchVariantSetsResponse::SearchVariantSetsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.SearchVariantSetsResponse)
}
SearchVariantSetsResponse::SearchVariantSetsResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  variant_sets_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.SearchVariantSetsResponse)
}

void SearchVariantSetsResponse::InitAsDefaultInstance() {
}

SearchVariantSetsResponse::SearchVariantSetsResponse(const SearchVariantSetsResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.SearchVariantSetsResponse)
}

void SearchVariantSetsResponse::SharedCtor() {
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SearchVariantSetsResponse::~SearchVariantSetsResponse() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.SearchVariantSetsResponse)
  SharedDtor();
}

void SearchVariantSetsResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  next_page_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void SearchVariantSetsResponse::ArenaDtor(void* object) {
  SearchVariantSetsResponse* _this = reinterpret_cast< SearchVariantSetsResponse* >(object);
  (void)_this;
}
void SearchVariantSetsResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SearchVariantSetsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchVariantSetsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchVariantSetsResponse_descriptor_;
}

const SearchVariantSetsResponse& SearchVariantSetsResponse::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SearchVariantSetsResponse> SearchVariantSetsResponse_default_instance_;

SearchVariantSetsResponse* SearchVariantSetsResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SearchVariantSetsResponse>(arena);
}

void SearchVariantSetsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.SearchVariantSetsResponse)
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  variant_sets_.Clear();
}

bool SearchVariantSetsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.SearchVariantSetsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.genomics.v1.VariantSet variant_sets = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_variant_sets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_variant_sets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_variant_sets;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_next_page_token;
        break;
      }

      // optional string next_page_token = 2;
      case 2: {
        if (tag == 18) {
         parse_next_page_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), this->next_page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchVariantSetsResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.SearchVariantSetsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.SearchVariantSetsResponse)
  return false;
#undef DO_
}

void SearchVariantSetsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.SearchVariantSetsResponse)
  // repeated .google.genomics.v1.VariantSet variant_sets = 1;
  for (unsigned int i = 0, n = this->variant_sets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->variant_sets(i), output);
  }

  // optional string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchVariantSetsResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.SearchVariantSetsResponse)
}

::google::protobuf::uint8* SearchVariantSetsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.SearchVariantSetsResponse)
  // repeated .google.genomics.v1.VariantSet variant_sets = 1;
  for (unsigned int i = 0, n = this->variant_sets_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->variant_sets(i), false, target);
  }

  // optional string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchVariantSetsResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.SearchVariantSetsResponse)
  return target;
}

size_t SearchVariantSetsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.SearchVariantSetsResponse)
  size_t total_size = 0;

  // optional string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  // repeated .google.genomics.v1.VariantSet variant_sets = 1;
  {
    unsigned int count = this->variant_sets_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->variant_sets(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchVariantSetsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.SearchVariantSetsResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SearchVariantSetsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchVariantSetsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.SearchVariantSetsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.SearchVariantSetsResponse)
    UnsafeMergeFrom(*source);
  }
}

void SearchVariantSetsResponse::MergeFrom(const SearchVariantSetsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.SearchVariantSetsResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SearchVariantSetsResponse::UnsafeMergeFrom(const SearchVariantSetsResponse& from) {
  GOOGLE_DCHECK(&from != this);
  variant_sets_.MergeFrom(from.variant_sets_);
  if (from.next_page_token().size() > 0) {
    set_next_page_token(from.next_page_token());
  }
}

void SearchVariantSetsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.SearchVariantSetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchVariantSetsResponse::CopyFrom(const SearchVariantSetsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.SearchVariantSetsResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SearchVariantSetsResponse::IsInitialized() const {

  return true;
}

void SearchVariantSetsResponse::Swap(SearchVariantSetsResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SearchVariantSetsResponse temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void SearchVariantSetsResponse::UnsafeArenaSwap(SearchVariantSetsResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SearchVariantSetsResponse::InternalSwap(SearchVariantSetsResponse* other) {
  variant_sets_.UnsafeArenaSwap(&other->variant_sets_);
  next_page_token_.Swap(&other->next_page_token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchVariantSetsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchVariantSetsResponse_descriptor_;
  metadata.reflection = SearchVariantSetsResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchVariantSetsResponse

// repeated .google.genomics.v1.VariantSet variant_sets = 1;
int SearchVariantSetsResponse::variant_sets_size() const {
  return variant_sets_.size();
}
void SearchVariantSetsResponse::clear_variant_sets() {
  variant_sets_.Clear();
}
const ::google::genomics::v1::VariantSet& SearchVariantSetsResponse::variant_sets(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchVariantSetsResponse.variant_sets)
  return variant_sets_.Get(index);
}
::google::genomics::v1::VariantSet* SearchVariantSetsResponse::mutable_variant_sets(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchVariantSetsResponse.variant_sets)
  return variant_sets_.Mutable(index);
}
::google::genomics::v1::VariantSet* SearchVariantSetsResponse::add_variant_sets() {
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchVariantSetsResponse.variant_sets)
  return variant_sets_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::genomics::v1::VariantSet >*
SearchVariantSetsResponse::mutable_variant_sets() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.SearchVariantSetsResponse.variant_sets)
  return &variant_sets_;
}
const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1::VariantSet >&
SearchVariantSetsResponse::variant_sets() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.SearchVariantSetsResponse.variant_sets)
  return variant_sets_;
}

// optional string next_page_token = 2;
void SearchVariantSetsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SearchVariantSetsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchVariantSetsResponse.next_page_token)
  return next_page_token_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchVariantSetsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchVariantSetsResponse.next_page_token)
}
void SearchVariantSetsResponse::set_next_page_token(const char* value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchVariantSetsResponse.next_page_token)
}
void SearchVariantSetsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchVariantSetsResponse.next_page_token)
}
::std::string* SearchVariantSetsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchVariantSetsResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchVariantSetsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.SearchVariantSetsResponse.next_page_token)
  
  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchVariantSetsResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.SearchVariantSetsResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SearchVariantSetsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.SearchVariantSetsResponse.next_page_token)
}
void SearchVariantSetsResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.SearchVariantSetsResponse.next_page_token)
}

inline const SearchVariantSetsResponse* SearchVariantSetsResponse::internal_default_instance() {
  return &SearchVariantSetsResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteVariantSetRequest::kVariantSetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteVariantSetRequest::DeleteVariantSetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.DeleteVariantSetRequest)
}
DeleteVariantSetRequest::DeleteVariantSetRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.DeleteVariantSetRequest)
}

void DeleteVariantSetRequest::InitAsDefaultInstance() {
}

DeleteVariantSetRequest::DeleteVariantSetRequest(const DeleteVariantSetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.DeleteVariantSetRequest)
}

void DeleteVariantSetRequest::SharedCtor() {
  variant_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DeleteVariantSetRequest::~DeleteVariantSetRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.DeleteVariantSetRequest)
  SharedDtor();
}

void DeleteVariantSetRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  variant_set_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void DeleteVariantSetRequest::ArenaDtor(void* object) {
  DeleteVariantSetRequest* _this = reinterpret_cast< DeleteVariantSetRequest* >(object);
  (void)_this;
}
void DeleteVariantSetRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DeleteVariantSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteVariantSetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteVariantSetRequest_descriptor_;
}

const DeleteVariantSetRequest& DeleteVariantSetRequest::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DeleteVariantSetRequest> DeleteVariantSetRequest_default_instance_;

DeleteVariantSetRequest* DeleteVariantSetRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DeleteVariantSetRequest>(arena);
}

void DeleteVariantSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.DeleteVariantSetRequest)
  variant_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool DeleteVariantSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.DeleteVariantSetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string variant_set_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_variant_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->variant_set_id().data(), this->variant_set_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.DeleteVariantSetRequest.variant_set_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.DeleteVariantSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.DeleteVariantSetRequest)
  return false;
#undef DO_
}

void DeleteVariantSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.DeleteVariantSetRequest)
  // optional string variant_set_id = 1;
  if (this->variant_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_id().data(), this->variant_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.DeleteVariantSetRequest.variant_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->variant_set_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.DeleteVariantSetRequest)
}

::google::protobuf::uint8* DeleteVariantSetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.DeleteVariantSetRequest)
  // optional string variant_set_id = 1;
  if (this->variant_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_id().data(), this->variant_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.DeleteVariantSetRequest.variant_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->variant_set_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.DeleteVariantSetRequest)
  return target;
}

size_t DeleteVariantSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.DeleteVariantSetRequest)
  size_t total_size = 0;

  // optional string variant_set_id = 1;
  if (this->variant_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->variant_set_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteVariantSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.DeleteVariantSetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DeleteVariantSetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteVariantSetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.DeleteVariantSetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.DeleteVariantSetRequest)
    UnsafeMergeFrom(*source);
  }
}

void DeleteVariantSetRequest::MergeFrom(const DeleteVariantSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.DeleteVariantSetRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DeleteVariantSetRequest::UnsafeMergeFrom(const DeleteVariantSetRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.variant_set_id().size() > 0) {
    set_variant_set_id(from.variant_set_id());
  }
}

void DeleteVariantSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.DeleteVariantSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteVariantSetRequest::CopyFrom(const DeleteVariantSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.DeleteVariantSetRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DeleteVariantSetRequest::IsInitialized() const {

  return true;
}

void DeleteVariantSetRequest::Swap(DeleteVariantSetRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeleteVariantSetRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void DeleteVariantSetRequest::UnsafeArenaSwap(DeleteVariantSetRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeleteVariantSetRequest::InternalSwap(DeleteVariantSetRequest* other) {
  variant_set_id_.Swap(&other->variant_set_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteVariantSetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteVariantSetRequest_descriptor_;
  metadata.reflection = DeleteVariantSetRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteVariantSetRequest

// optional string variant_set_id = 1;
void DeleteVariantSetRequest::clear_variant_set_id() {
  variant_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& DeleteVariantSetRequest::variant_set_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.DeleteVariantSetRequest.variant_set_id)
  return variant_set_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteVariantSetRequest::set_variant_set_id(const ::std::string& value) {
  
  variant_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.DeleteVariantSetRequest.variant_set_id)
}
void DeleteVariantSetRequest::set_variant_set_id(const char* value) {
  
  variant_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.DeleteVariantSetRequest.variant_set_id)
}
void DeleteVariantSetRequest::set_variant_set_id(const char* value,
    size_t size) {
  
  variant_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.DeleteVariantSetRequest.variant_set_id)
}
::std::string* DeleteVariantSetRequest::mutable_variant_set_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.DeleteVariantSetRequest.variant_set_id)
  return variant_set_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeleteVariantSetRequest::release_variant_set_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.DeleteVariantSetRequest.variant_set_id)
  
  return variant_set_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeleteVariantSetRequest::unsafe_arena_release_variant_set_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.DeleteVariantSetRequest.variant_set_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return variant_set_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void DeleteVariantSetRequest::set_allocated_variant_set_id(::std::string* variant_set_id) {
  if (variant_set_id != NULL) {
    
  } else {
    
  }
  variant_set_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), variant_set_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.DeleteVariantSetRequest.variant_set_id)
}
void DeleteVariantSetRequest::unsafe_arena_set_allocated_variant_set_id(
    ::std::string* variant_set_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (variant_set_id != NULL) {
    
  } else {
    
  }
  variant_set_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      variant_set_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.DeleteVariantSetRequest.variant_set_id)
}

inline const DeleteVariantSetRequest* DeleteVariantSetRequest::internal_default_instance() {
  return &DeleteVariantSetRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void UpdateVariantSetRequest::_slow_mutable_variant_set() {
  variant_set_ = ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::VariantSet >(
      GetArenaNoVirtual());
}
::google::genomics::v1::VariantSet* UpdateVariantSetRequest::_slow_release_variant_set() {
  if (variant_set_ == NULL) {
    return NULL;
  } else {
    ::google::genomics::v1::VariantSet* temp = new ::google::genomics::v1::VariantSet(*variant_set_);
    variant_set_ = NULL;
    return temp;
  }
}
::google::genomics::v1::VariantSet* UpdateVariantSetRequest::unsafe_arena_release_variant_set() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.UpdateVariantSetRequest.variant_set)
  
  ::google::genomics::v1::VariantSet* temp = variant_set_;
  variant_set_ = NULL;
  return temp;
}
void UpdateVariantSetRequest::_slow_set_allocated_variant_set(
    ::google::protobuf::Arena* message_arena, ::google::genomics::v1::VariantSet** variant_set) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*variant_set) == NULL) {
      message_arena->Own(*variant_set);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*variant_set)) {
      ::google::genomics::v1::VariantSet* new_variant_set = 
            ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::VariantSet >(
            message_arena);
      new_variant_set->CopyFrom(**variant_set);
      *variant_set = new_variant_set;
    }
}
void UpdateVariantSetRequest::unsafe_arena_set_allocated_variant_set(
    ::google::genomics::v1::VariantSet* variant_set) {
  if (GetArenaNoVirtual() == NULL) {
    delete variant_set_;
  }
  variant_set_ = variant_set;
  if (variant_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.UpdateVariantSetRequest.variant_set)
}
void UpdateVariantSetRequest::_slow_mutable_update_mask() {
  update_mask_ = ::google::protobuf::Arena::Create< ::google::protobuf::FieldMask >(
      GetArenaNoVirtual());
}
::google::protobuf::FieldMask* UpdateVariantSetRequest::_slow_release_update_mask() {
  if (update_mask_ == NULL) {
    return NULL;
  } else {
    ::google::protobuf::FieldMask* temp = new ::google::protobuf::FieldMask(*update_mask_);
    update_mask_ = NULL;
    return temp;
  }
}
::google::protobuf::FieldMask* UpdateVariantSetRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.UpdateVariantSetRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  update_mask_ = NULL;
  return temp;
}
void UpdateVariantSetRequest::unsafe_arena_set_allocated_update_mask(
    ::google::protobuf::FieldMask* update_mask) {
  if (GetArenaNoVirtual() == NULL) {
    delete update_mask_;
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.UpdateVariantSetRequest.update_mask)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateVariantSetRequest::kVariantSetIdFieldNumber;
const int UpdateVariantSetRequest::kVariantSetFieldNumber;
const int UpdateVariantSetRequest::kUpdateMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateVariantSetRequest::UpdateVariantSetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.UpdateVariantSetRequest)
}
UpdateVariantSetRequest::UpdateVariantSetRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.UpdateVariantSetRequest)
}

void UpdateVariantSetRequest::InitAsDefaultInstance() {
  variant_set_ = const_cast< ::google::genomics::v1::VariantSet*>(
      ::google::genomics::v1::VariantSet::internal_default_instance());
  update_mask_ = const_cast< ::google::protobuf::FieldMask*>(
      ::google::protobuf::FieldMask::internal_default_instance());
}

UpdateVariantSetRequest::UpdateVariantSetRequest(const UpdateVariantSetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.UpdateVariantSetRequest)
}

void UpdateVariantSetRequest::SharedCtor() {
  variant_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  variant_set_ = NULL;
  update_mask_ = NULL;
  _cached_size_ = 0;
}

UpdateVariantSetRequest::~UpdateVariantSetRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.UpdateVariantSetRequest)
  SharedDtor();
}

void UpdateVariantSetRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  variant_set_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != &UpdateVariantSetRequest_default_instance_.get()) {
    delete variant_set_;
    delete update_mask_;
  }
}

void UpdateVariantSetRequest::ArenaDtor(void* object) {
  UpdateVariantSetRequest* _this = reinterpret_cast< UpdateVariantSetRequest* >(object);
  (void)_this;
}
void UpdateVariantSetRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UpdateVariantSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateVariantSetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateVariantSetRequest_descriptor_;
}

const UpdateVariantSetRequest& UpdateVariantSetRequest::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UpdateVariantSetRequest> UpdateVariantSetRequest_default_instance_;

UpdateVariantSetRequest* UpdateVariantSetRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UpdateVariantSetRequest>(arena);
}

void UpdateVariantSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.UpdateVariantSetRequest)
  variant_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && variant_set_ != NULL) delete variant_set_;
  variant_set_ = NULL;
  if (GetArenaNoVirtual() == NULL && update_mask_ != NULL) delete update_mask_;
  update_mask_ = NULL;
}

bool UpdateVariantSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.UpdateVariantSetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string variant_set_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_variant_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->variant_set_id().data(), this->variant_set_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.UpdateVariantSetRequest.variant_set_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_variant_set;
        break;
      }

      // optional .google.genomics.v1.VariantSet variant_set = 2;
      case 2: {
        if (tag == 18) {
         parse_variant_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_variant_set()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_update_mask;
        break;
      }

      // optional .google.protobuf.FieldMask update_mask = 5;
      case 5: {
        if (tag == 42) {
         parse_update_mask:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_mask()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.UpdateVariantSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.UpdateVariantSetRequest)
  return false;
#undef DO_
}

void UpdateVariantSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.UpdateVariantSetRequest)
  // optional string variant_set_id = 1;
  if (this->variant_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_id().data(), this->variant_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.UpdateVariantSetRequest.variant_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->variant_set_id(), output);
  }

  // optional .google.genomics.v1.VariantSet variant_set = 2;
  if (this->has_variant_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->variant_set_, output);
  }

  // optional .google.protobuf.FieldMask update_mask = 5;
  if (this->has_update_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->update_mask_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.UpdateVariantSetRequest)
}

::google::protobuf::uint8* UpdateVariantSetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.UpdateVariantSetRequest)
  // optional string variant_set_id = 1;
  if (this->variant_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_id().data(), this->variant_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.UpdateVariantSetRequest.variant_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->variant_set_id(), target);
  }

  // optional .google.genomics.v1.VariantSet variant_set = 2;
  if (this->has_variant_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->variant_set_, false, target);
  }

  // optional .google.protobuf.FieldMask update_mask = 5;
  if (this->has_update_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->update_mask_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.UpdateVariantSetRequest)
  return target;
}

size_t UpdateVariantSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.UpdateVariantSetRequest)
  size_t total_size = 0;

  // optional string variant_set_id = 1;
  if (this->variant_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->variant_set_id());
  }

  // optional .google.genomics.v1.VariantSet variant_set = 2;
  if (this->has_variant_set()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->variant_set_);
  }

  // optional .google.protobuf.FieldMask update_mask = 5;
  if (this->has_update_mask()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->update_mask_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateVariantSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.UpdateVariantSetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UpdateVariantSetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateVariantSetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.UpdateVariantSetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.UpdateVariantSetRequest)
    UnsafeMergeFrom(*source);
  }
}

void UpdateVariantSetRequest::MergeFrom(const UpdateVariantSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.UpdateVariantSetRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UpdateVariantSetRequest::UnsafeMergeFrom(const UpdateVariantSetRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.variant_set_id().size() > 0) {
    set_variant_set_id(from.variant_set_id());
  }
  if (from.has_variant_set()) {
    mutable_variant_set()->::google::genomics::v1::VariantSet::MergeFrom(from.variant_set());
  }
  if (from.has_update_mask()) {
    mutable_update_mask()->::google::protobuf::FieldMask::MergeFrom(from.update_mask());
  }
}

void UpdateVariantSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.UpdateVariantSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateVariantSetRequest::CopyFrom(const UpdateVariantSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.UpdateVariantSetRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UpdateVariantSetRequest::IsInitialized() const {

  return true;
}

void UpdateVariantSetRequest::Swap(UpdateVariantSetRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UpdateVariantSetRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void UpdateVariantSetRequest::UnsafeArenaSwap(UpdateVariantSetRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UpdateVariantSetRequest::InternalSwap(UpdateVariantSetRequest* other) {
  variant_set_id_.Swap(&other->variant_set_id_);
  std::swap(variant_set_, other->variant_set_);
  std::swap(update_mask_, other->update_mask_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateVariantSetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateVariantSetRequest_descriptor_;
  metadata.reflection = UpdateVariantSetRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateVariantSetRequest

// optional string variant_set_id = 1;
void UpdateVariantSetRequest::clear_variant_set_id() {
  variant_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& UpdateVariantSetRequest::variant_set_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.UpdateVariantSetRequest.variant_set_id)
  return variant_set_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateVariantSetRequest::set_variant_set_id(const ::std::string& value) {
  
  variant_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.UpdateVariantSetRequest.variant_set_id)
}
void UpdateVariantSetRequest::set_variant_set_id(const char* value) {
  
  variant_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.UpdateVariantSetRequest.variant_set_id)
}
void UpdateVariantSetRequest::set_variant_set_id(const char* value,
    size_t size) {
  
  variant_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.UpdateVariantSetRequest.variant_set_id)
}
::std::string* UpdateVariantSetRequest::mutable_variant_set_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.UpdateVariantSetRequest.variant_set_id)
  return variant_set_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* UpdateVariantSetRequest::release_variant_set_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.UpdateVariantSetRequest.variant_set_id)
  
  return variant_set_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* UpdateVariantSetRequest::unsafe_arena_release_variant_set_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.UpdateVariantSetRequest.variant_set_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return variant_set_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void UpdateVariantSetRequest::set_allocated_variant_set_id(::std::string* variant_set_id) {
  if (variant_set_id != NULL) {
    
  } else {
    
  }
  variant_set_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), variant_set_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.UpdateVariantSetRequest.variant_set_id)
}
void UpdateVariantSetRequest::unsafe_arena_set_allocated_variant_set_id(
    ::std::string* variant_set_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (variant_set_id != NULL) {
    
  } else {
    
  }
  variant_set_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      variant_set_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.UpdateVariantSetRequest.variant_set_id)
}

// optional .google.genomics.v1.VariantSet variant_set = 2;
bool UpdateVariantSetRequest::has_variant_set() const {
  return this != internal_default_instance() && variant_set_ != NULL;
}
void UpdateVariantSetRequest::clear_variant_set() {
  if (GetArenaNoVirtual() == NULL && variant_set_ != NULL) delete variant_set_;
  variant_set_ = NULL;
}
const ::google::genomics::v1::VariantSet& UpdateVariantSetRequest::variant_set() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.UpdateVariantSetRequest.variant_set)
  return variant_set_ != NULL ? *variant_set_
                         : *::google::genomics::v1::VariantSet::internal_default_instance();
}
::google::genomics::v1::VariantSet* UpdateVariantSetRequest::mutable_variant_set() {
  
  if (variant_set_ == NULL) {
    _slow_mutable_variant_set();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.UpdateVariantSetRequest.variant_set)
  return variant_set_;
}
::google::genomics::v1::VariantSet* UpdateVariantSetRequest::release_variant_set() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.UpdateVariantSetRequest.variant_set)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_variant_set();
  } else {
    ::google::genomics::v1::VariantSet* temp = variant_set_;
    variant_set_ = NULL;
    return temp;
  }
}
 void UpdateVariantSetRequest::set_allocated_variant_set(::google::genomics::v1::VariantSet* variant_set) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete variant_set_;
  }
  if (variant_set != NULL) {
    _slow_set_allocated_variant_set(message_arena, &variant_set);
  }
  variant_set_ = variant_set;
  if (variant_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.UpdateVariantSetRequest.variant_set)
}

// optional .google.protobuf.FieldMask update_mask = 5;
bool UpdateVariantSetRequest::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != NULL;
}
void UpdateVariantSetRequest::clear_update_mask() {
  if (GetArenaNoVirtual() == NULL && update_mask_ != NULL) delete update_mask_;
  update_mask_ = NULL;
}
const ::google::protobuf::FieldMask& UpdateVariantSetRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.UpdateVariantSetRequest.update_mask)
  return update_mask_ != NULL ? *update_mask_
                         : *::google::protobuf::FieldMask::internal_default_instance();
}
::google::protobuf::FieldMask* UpdateVariantSetRequest::mutable_update_mask() {
  
  if (update_mask_ == NULL) {
    _slow_mutable_update_mask();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.UpdateVariantSetRequest.update_mask)
  return update_mask_;
}
::google::protobuf::FieldMask* UpdateVariantSetRequest::release_update_mask() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.UpdateVariantSetRequest.update_mask)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_update_mask();
  } else {
    ::google::protobuf::FieldMask* temp = update_mask_;
    update_mask_ = NULL;
    return temp;
  }
}
 void UpdateVariantSetRequest::set_allocated_update_mask(::google::protobuf::FieldMask* update_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete update_mask_;
  }
  if (update_mask != NULL) {
    if (message_arena != NULL) {
      message_arena->Own(update_mask);
    }
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.UpdateVariantSetRequest.update_mask)
}

inline const UpdateVariantSetRequest* UpdateVariantSetRequest::internal_default_instance() {
  return &UpdateVariantSetRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchVariantsRequest::kVariantSetIdsFieldNumber;
const int SearchVariantsRequest::kVariantNameFieldNumber;
const int SearchVariantsRequest::kCallSetIdsFieldNumber;
const int SearchVariantsRequest::kReferenceNameFieldNumber;
const int SearchVariantsRequest::kStartFieldNumber;
const int SearchVariantsRequest::kEndFieldNumber;
const int SearchVariantsRequest::kPageTokenFieldNumber;
const int SearchVariantsRequest::kPageSizeFieldNumber;
const int SearchVariantsRequest::kMaxCallsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchVariantsRequest::SearchVariantsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.SearchVariantsRequest)
}
SearchVariantsRequest::SearchVariantsRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  variant_set_ids_(arena),
  call_set_ids_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.SearchVariantsRequest)
}

void SearchVariantsRequest::InitAsDefaultInstance() {
}

SearchVariantsRequest::SearchVariantsRequest(const SearchVariantsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.SearchVariantsRequest)
}

void SearchVariantsRequest::SharedCtor() {
  variant_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, reinterpret_cast<char*>(&max_calls_) -
    reinterpret_cast<char*>(&start_) + sizeof(max_calls_));
  _cached_size_ = 0;
}

SearchVariantsRequest::~SearchVariantsRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.SearchVariantsRequest)
  SharedDtor();
}

void SearchVariantsRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  variant_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  reference_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  page_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void SearchVariantsRequest::ArenaDtor(void* object) {
  SearchVariantsRequest* _this = reinterpret_cast< SearchVariantsRequest* >(object);
  (void)_this;
}
void SearchVariantsRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SearchVariantsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchVariantsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchVariantsRequest_descriptor_;
}

const SearchVariantsRequest& SearchVariantsRequest::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SearchVariantsRequest> SearchVariantsRequest_default_instance_;

SearchVariantsRequest* SearchVariantsRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SearchVariantsRequest>(arena);
}

void SearchVariantsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.SearchVariantsRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SearchVariantsRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SearchVariantsRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(start_, page_size_);
  variant_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  reference_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  max_calls_ = 0;

#undef ZR_HELPER_
#undef ZR_

  variant_set_ids_.Clear();
  call_set_ids_.Clear();
}

bool SearchVariantsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.SearchVariantsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string variant_set_ids = 1;
      case 1: {
        if (tag == 10) {
         parse_variant_set_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_variant_set_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->variant_set_ids(this->variant_set_ids_size() - 1).data(),
            this->variant_set_ids(this->variant_set_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchVariantsRequest.variant_set_ids"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_variant_set_ids;
        if (input->ExpectTag(18)) goto parse_variant_name;
        break;
      }

      // optional string variant_name = 2;
      case 2: {
        if (tag == 18) {
         parse_variant_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_variant_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->variant_name().data(), this->variant_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchVariantsRequest.variant_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_call_set_ids;
        break;
      }

      // repeated string call_set_ids = 3;
      case 3: {
        if (tag == 26) {
         parse_call_set_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_call_set_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->call_set_ids(this->call_set_ids_size() - 1).data(),
            this->call_set_ids(this->call_set_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchVariantsRequest.call_set_ids"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_call_set_ids;
        if (input->ExpectTag(34)) goto parse_reference_name;
        break;
      }

      // optional string reference_name = 4;
      case 4: {
        if (tag == 34) {
         parse_reference_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_name().data(), this->reference_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchVariantsRequest.reference_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_start;
        break;
      }

      // optional int64 start = 5;
      case 5: {
        if (tag == 40) {
         parse_start:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_end;
        break;
      }

      // optional int64 end = 6;
      case 6: {
        if (tag == 48) {
         parse_end:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_page_token;
        break;
      }

      // optional string page_token = 7;
      case 7: {
        if (tag == 58) {
         parse_page_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), this->page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchVariantsRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_page_size;
        break;
      }

      // optional int32 page_size = 8;
      case 8: {
        if (tag == 64) {
         parse_page_size:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_max_calls;
        break;
      }

      // optional int32 max_calls = 9;
      case 9: {
        if (tag == 72) {
         parse_max_calls:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_calls_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.SearchVariantsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.SearchVariantsRequest)
  return false;
#undef DO_
}

void SearchVariantsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.SearchVariantsRequest)
  // repeated string variant_set_ids = 1;
  for (int i = 0; i < this->variant_set_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_ids(i).data(), this->variant_set_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchVariantsRequest.variant_set_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->variant_set_ids(i), output);
  }

  // optional string variant_name = 2;
  if (this->variant_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_name().data(), this->variant_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchVariantsRequest.variant_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->variant_name(), output);
  }

  // repeated string call_set_ids = 3;
  for (int i = 0; i < this->call_set_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_set_ids(i).data(), this->call_set_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchVariantsRequest.call_set_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->call_set_ids(i), output);
  }

  // optional string reference_name = 4;
  if (this->reference_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_name().data(), this->reference_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchVariantsRequest.reference_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->reference_name(), output);
  }

  // optional int64 start = 5;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->start(), output);
  }

  // optional int64 end = 6;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->end(), output);
  }

  // optional string page_token = 7;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchVariantsRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->page_token(), output);
  }

  // optional int32 page_size = 8;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->page_size(), output);
  }

  // optional int32 max_calls = 9;
  if (this->max_calls() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->max_calls(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.SearchVariantsRequest)
}

::google::protobuf::uint8* SearchVariantsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.SearchVariantsRequest)
  // repeated string variant_set_ids = 1;
  for (int i = 0; i < this->variant_set_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_ids(i).data(), this->variant_set_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchVariantsRequest.variant_set_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->variant_set_ids(i), target);
  }

  // optional string variant_name = 2;
  if (this->variant_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_name().data(), this->variant_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchVariantsRequest.variant_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->variant_name(), target);
  }

  // repeated string call_set_ids = 3;
  for (int i = 0; i < this->call_set_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_set_ids(i).data(), this->call_set_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchVariantsRequest.call_set_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->call_set_ids(i), target);
  }

  // optional string reference_name = 4;
  if (this->reference_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_name().data(), this->reference_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchVariantsRequest.reference_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->reference_name(), target);
  }

  // optional int64 start = 5;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->start(), target);
  }

  // optional int64 end = 6;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->end(), target);
  }

  // optional string page_token = 7;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchVariantsRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->page_token(), target);
  }

  // optional int32 page_size = 8;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->page_size(), target);
  }

  // optional int32 max_calls = 9;
  if (this->max_calls() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->max_calls(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.SearchVariantsRequest)
  return target;
}

size_t SearchVariantsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.SearchVariantsRequest)
  size_t total_size = 0;

  // optional string variant_name = 2;
  if (this->variant_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->variant_name());
  }

  // optional string reference_name = 4;
  if (this->reference_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference_name());
  }

  // optional int64 start = 5;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start());
  }

  // optional int64 end = 6;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end());
  }

  // optional string page_token = 7;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // optional int32 page_size = 8;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  // optional int32 max_calls = 9;
  if (this->max_calls() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_calls());
  }

  // repeated string variant_set_ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->variant_set_ids_size());
  for (int i = 0; i < this->variant_set_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->variant_set_ids(i));
  }

  // repeated string call_set_ids = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->call_set_ids_size());
  for (int i = 0; i < this->call_set_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->call_set_ids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchVariantsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.SearchVariantsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SearchVariantsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchVariantsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.SearchVariantsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.SearchVariantsRequest)
    UnsafeMergeFrom(*source);
  }
}

void SearchVariantsRequest::MergeFrom(const SearchVariantsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.SearchVariantsRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SearchVariantsRequest::UnsafeMergeFrom(const SearchVariantsRequest& from) {
  GOOGLE_DCHECK(&from != this);
  variant_set_ids_.UnsafeMergeFrom(from.variant_set_ids_);
  call_set_ids_.UnsafeMergeFrom(from.call_set_ids_);
  if (from.variant_name().size() > 0) {
    set_variant_name(from.variant_name());
  }
  if (from.reference_name().size() > 0) {
    set_reference_name(from.reference_name());
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
  if (from.page_token().size() > 0) {
    set_page_token(from.page_token());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
  if (from.max_calls() != 0) {
    set_max_calls(from.max_calls());
  }
}

void SearchVariantsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.SearchVariantsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchVariantsRequest::CopyFrom(const SearchVariantsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.SearchVariantsRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SearchVariantsRequest::IsInitialized() const {

  return true;
}

void SearchVariantsRequest::Swap(SearchVariantsRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SearchVariantsRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void SearchVariantsRequest::UnsafeArenaSwap(SearchVariantsRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SearchVariantsRequest::InternalSwap(SearchVariantsRequest* other) {
  variant_set_ids_.UnsafeArenaSwap(&other->variant_set_ids_);
  variant_name_.Swap(&other->variant_name_);
  call_set_ids_.UnsafeArenaSwap(&other->call_set_ids_);
  reference_name_.Swap(&other->reference_name_);
  std::swap(start_, other->start_);
  std::swap(end_, other->end_);
  page_token_.Swap(&other->page_token_);
  std::swap(page_size_, other->page_size_);
  std::swap(max_calls_, other->max_calls_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchVariantsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchVariantsRequest_descriptor_;
  metadata.reflection = SearchVariantsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchVariantsRequest

// repeated string variant_set_ids = 1;
int SearchVariantsRequest::variant_set_ids_size() const {
  return variant_set_ids_.size();
}
void SearchVariantsRequest::clear_variant_set_ids() {
  variant_set_ids_.Clear();
}
const ::std::string& SearchVariantsRequest::variant_set_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchVariantsRequest.variant_set_ids)
  return variant_set_ids_.Get(index);
}
::std::string* SearchVariantsRequest::mutable_variant_set_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchVariantsRequest.variant_set_ids)
  return variant_set_ids_.Mutable(index);
}
void SearchVariantsRequest::set_variant_set_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchVariantsRequest.variant_set_ids)
  variant_set_ids_.Mutable(index)->assign(value);
}
void SearchVariantsRequest::set_variant_set_ids(int index, const char* value) {
  variant_set_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchVariantsRequest.variant_set_ids)
}
void SearchVariantsRequest::set_variant_set_ids(int index, const char* value, size_t size) {
  variant_set_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchVariantsRequest.variant_set_ids)
}
::std::string* SearchVariantsRequest::add_variant_set_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.SearchVariantsRequest.variant_set_ids)
  return variant_set_ids_.Add();
}
void SearchVariantsRequest::add_variant_set_ids(const ::std::string& value) {
  variant_set_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchVariantsRequest.variant_set_ids)
}
void SearchVariantsRequest::add_variant_set_ids(const char* value) {
  variant_set_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.SearchVariantsRequest.variant_set_ids)
}
void SearchVariantsRequest::add_variant_set_ids(const char* value, size_t size) {
  variant_set_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.SearchVariantsRequest.variant_set_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SearchVariantsRequest::variant_set_ids() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.SearchVariantsRequest.variant_set_ids)
  return variant_set_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SearchVariantsRequest::mutable_variant_set_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.SearchVariantsRequest.variant_set_ids)
  return &variant_set_ids_;
}

// optional string variant_name = 2;
void SearchVariantsRequest::clear_variant_name() {
  variant_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SearchVariantsRequest::variant_name() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchVariantsRequest.variant_name)
  return variant_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchVariantsRequest::set_variant_name(const ::std::string& value) {
  
  variant_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchVariantsRequest.variant_name)
}
void SearchVariantsRequest::set_variant_name(const char* value) {
  
  variant_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchVariantsRequest.variant_name)
}
void SearchVariantsRequest::set_variant_name(const char* value,
    size_t size) {
  
  variant_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchVariantsRequest.variant_name)
}
::std::string* SearchVariantsRequest::mutable_variant_name() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchVariantsRequest.variant_name)
  return variant_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchVariantsRequest::release_variant_name() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.SearchVariantsRequest.variant_name)
  
  return variant_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchVariantsRequest::unsafe_arena_release_variant_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.SearchVariantsRequest.variant_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return variant_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SearchVariantsRequest::set_allocated_variant_name(::std::string* variant_name) {
  if (variant_name != NULL) {
    
  } else {
    
  }
  variant_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), variant_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.SearchVariantsRequest.variant_name)
}
void SearchVariantsRequest::unsafe_arena_set_allocated_variant_name(
    ::std::string* variant_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (variant_name != NULL) {
    
  } else {
    
  }
  variant_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      variant_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.SearchVariantsRequest.variant_name)
}

// repeated string call_set_ids = 3;
int SearchVariantsRequest::call_set_ids_size() const {
  return call_set_ids_.size();
}
void SearchVariantsRequest::clear_call_set_ids() {
  call_set_ids_.Clear();
}
const ::std::string& SearchVariantsRequest::call_set_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchVariantsRequest.call_set_ids)
  return call_set_ids_.Get(index);
}
::std::string* SearchVariantsRequest::mutable_call_set_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchVariantsRequest.call_set_ids)
  return call_set_ids_.Mutable(index);
}
void SearchVariantsRequest::set_call_set_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchVariantsRequest.call_set_ids)
  call_set_ids_.Mutable(index)->assign(value);
}
void SearchVariantsRequest::set_call_set_ids(int index, const char* value) {
  call_set_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchVariantsRequest.call_set_ids)
}
void SearchVariantsRequest::set_call_set_ids(int index, const char* value, size_t size) {
  call_set_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchVariantsRequest.call_set_ids)
}
::std::string* SearchVariantsRequest::add_call_set_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.SearchVariantsRequest.call_set_ids)
  return call_set_ids_.Add();
}
void SearchVariantsRequest::add_call_set_ids(const ::std::string& value) {
  call_set_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchVariantsRequest.call_set_ids)
}
void SearchVariantsRequest::add_call_set_ids(const char* value) {
  call_set_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.SearchVariantsRequest.call_set_ids)
}
void SearchVariantsRequest::add_call_set_ids(const char* value, size_t size) {
  call_set_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.SearchVariantsRequest.call_set_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SearchVariantsRequest::call_set_ids() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.SearchVariantsRequest.call_set_ids)
  return call_set_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SearchVariantsRequest::mutable_call_set_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.SearchVariantsRequest.call_set_ids)
  return &call_set_ids_;
}

// optional string reference_name = 4;
void SearchVariantsRequest::clear_reference_name() {
  reference_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SearchVariantsRequest::reference_name() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchVariantsRequest.reference_name)
  return reference_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchVariantsRequest::set_reference_name(const ::std::string& value) {
  
  reference_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchVariantsRequest.reference_name)
}
void SearchVariantsRequest::set_reference_name(const char* value) {
  
  reference_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchVariantsRequest.reference_name)
}
void SearchVariantsRequest::set_reference_name(const char* value,
    size_t size) {
  
  reference_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchVariantsRequest.reference_name)
}
::std::string* SearchVariantsRequest::mutable_reference_name() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchVariantsRequest.reference_name)
  return reference_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchVariantsRequest::release_reference_name() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.SearchVariantsRequest.reference_name)
  
  return reference_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchVariantsRequest::unsafe_arena_release_reference_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.SearchVariantsRequest.reference_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return reference_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SearchVariantsRequest::set_allocated_reference_name(::std::string* reference_name) {
  if (reference_name != NULL) {
    
  } else {
    
  }
  reference_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.SearchVariantsRequest.reference_name)
}
void SearchVariantsRequest::unsafe_arena_set_allocated_reference_name(
    ::std::string* reference_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reference_name != NULL) {
    
  } else {
    
  }
  reference_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reference_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.SearchVariantsRequest.reference_name)
}

// optional int64 start = 5;
void SearchVariantsRequest::clear_start() {
  start_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SearchVariantsRequest::start() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchVariantsRequest.start)
  return start_;
}
void SearchVariantsRequest::set_start(::google::protobuf::int64 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchVariantsRequest.start)
}

// optional int64 end = 6;
void SearchVariantsRequest::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SearchVariantsRequest::end() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchVariantsRequest.end)
  return end_;
}
void SearchVariantsRequest::set_end(::google::protobuf::int64 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchVariantsRequest.end)
}

// optional string page_token = 7;
void SearchVariantsRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SearchVariantsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchVariantsRequest.page_token)
  return page_token_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchVariantsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchVariantsRequest.page_token)
}
void SearchVariantsRequest::set_page_token(const char* value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchVariantsRequest.page_token)
}
void SearchVariantsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchVariantsRequest.page_token)
}
::std::string* SearchVariantsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchVariantsRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchVariantsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.SearchVariantsRequest.page_token)
  
  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchVariantsRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.SearchVariantsRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SearchVariantsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.SearchVariantsRequest.page_token)
}
void SearchVariantsRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.SearchVariantsRequest.page_token)
}

// optional int32 page_size = 8;
void SearchVariantsRequest::clear_page_size() {
  page_size_ = 0;
}
::google::protobuf::int32 SearchVariantsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchVariantsRequest.page_size)
  return page_size_;
}
void SearchVariantsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchVariantsRequest.page_size)
}

// optional int32 max_calls = 9;
void SearchVariantsRequest::clear_max_calls() {
  max_calls_ = 0;
}
::google::protobuf::int32 SearchVariantsRequest::max_calls() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchVariantsRequest.max_calls)
  return max_calls_;
}
void SearchVariantsRequest::set_max_calls(::google::protobuf::int32 value) {
  
  max_calls_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchVariantsRequest.max_calls)
}

inline const SearchVariantsRequest* SearchVariantsRequest::internal_default_instance() {
  return &SearchVariantsRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchVariantsResponse::kVariantsFieldNumber;
const int SearchVariantsResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchVariantsResponse::SearchVariantsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.SearchVariantsResponse)
}
SearchVariantsResponse::SearchVariantsResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  variants_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.SearchVariantsResponse)
}

void SearchVariantsResponse::InitAsDefaultInstance() {
}

SearchVariantsResponse::SearchVariantsResponse(const SearchVariantsResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.SearchVariantsResponse)
}

void SearchVariantsResponse::SharedCtor() {
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SearchVariantsResponse::~SearchVariantsResponse() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.SearchVariantsResponse)
  SharedDtor();
}

void SearchVariantsResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  next_page_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void SearchVariantsResponse::ArenaDtor(void* object) {
  SearchVariantsResponse* _this = reinterpret_cast< SearchVariantsResponse* >(object);
  (void)_this;
}
void SearchVariantsResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SearchVariantsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchVariantsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchVariantsResponse_descriptor_;
}

const SearchVariantsResponse& SearchVariantsResponse::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SearchVariantsResponse> SearchVariantsResponse_default_instance_;

SearchVariantsResponse* SearchVariantsResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SearchVariantsResponse>(arena);
}

void SearchVariantsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.SearchVariantsResponse)
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  variants_.Clear();
}

bool SearchVariantsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.SearchVariantsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.genomics.v1.Variant variants = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_variants:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_variants()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_variants;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_next_page_token;
        break;
      }

      // optional string next_page_token = 2;
      case 2: {
        if (tag == 18) {
         parse_next_page_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), this->next_page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchVariantsResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.SearchVariantsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.SearchVariantsResponse)
  return false;
#undef DO_
}

void SearchVariantsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.SearchVariantsResponse)
  // repeated .google.genomics.v1.Variant variants = 1;
  for (unsigned int i = 0, n = this->variants_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->variants(i), output);
  }

  // optional string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchVariantsResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.SearchVariantsResponse)
}

::google::protobuf::uint8* SearchVariantsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.SearchVariantsResponse)
  // repeated .google.genomics.v1.Variant variants = 1;
  for (unsigned int i = 0, n = this->variants_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->variants(i), false, target);
  }

  // optional string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchVariantsResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.SearchVariantsResponse)
  return target;
}

size_t SearchVariantsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.SearchVariantsResponse)
  size_t total_size = 0;

  // optional string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  // repeated .google.genomics.v1.Variant variants = 1;
  {
    unsigned int count = this->variants_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->variants(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchVariantsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.SearchVariantsResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SearchVariantsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchVariantsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.SearchVariantsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.SearchVariantsResponse)
    UnsafeMergeFrom(*source);
  }
}

void SearchVariantsResponse::MergeFrom(const SearchVariantsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.SearchVariantsResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SearchVariantsResponse::UnsafeMergeFrom(const SearchVariantsResponse& from) {
  GOOGLE_DCHECK(&from != this);
  variants_.MergeFrom(from.variants_);
  if (from.next_page_token().size() > 0) {
    set_next_page_token(from.next_page_token());
  }
}

void SearchVariantsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.SearchVariantsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchVariantsResponse::CopyFrom(const SearchVariantsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.SearchVariantsResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SearchVariantsResponse::IsInitialized() const {

  return true;
}

void SearchVariantsResponse::Swap(SearchVariantsResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SearchVariantsResponse temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void SearchVariantsResponse::UnsafeArenaSwap(SearchVariantsResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SearchVariantsResponse::InternalSwap(SearchVariantsResponse* other) {
  variants_.UnsafeArenaSwap(&other->variants_);
  next_page_token_.Swap(&other->next_page_token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchVariantsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchVariantsResponse_descriptor_;
  metadata.reflection = SearchVariantsResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchVariantsResponse

// repeated .google.genomics.v1.Variant variants = 1;
int SearchVariantsResponse::variants_size() const {
  return variants_.size();
}
void SearchVariantsResponse::clear_variants() {
  variants_.Clear();
}
const ::google::genomics::v1::Variant& SearchVariantsResponse::variants(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchVariantsResponse.variants)
  return variants_.Get(index);
}
::google::genomics::v1::Variant* SearchVariantsResponse::mutable_variants(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchVariantsResponse.variants)
  return variants_.Mutable(index);
}
::google::genomics::v1::Variant* SearchVariantsResponse::add_variants() {
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchVariantsResponse.variants)
  return variants_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::genomics::v1::Variant >*
SearchVariantsResponse::mutable_variants() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.SearchVariantsResponse.variants)
  return &variants_;
}
const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1::Variant >&
SearchVariantsResponse::variants() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.SearchVariantsResponse.variants)
  return variants_;
}

// optional string next_page_token = 2;
void SearchVariantsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SearchVariantsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchVariantsResponse.next_page_token)
  return next_page_token_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchVariantsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchVariantsResponse.next_page_token)
}
void SearchVariantsResponse::set_next_page_token(const char* value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchVariantsResponse.next_page_token)
}
void SearchVariantsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchVariantsResponse.next_page_token)
}
::std::string* SearchVariantsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchVariantsResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchVariantsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.SearchVariantsResponse.next_page_token)
  
  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchVariantsResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.SearchVariantsResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SearchVariantsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.SearchVariantsResponse.next_page_token)
}
void SearchVariantsResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.SearchVariantsResponse.next_page_token)
}

inline const SearchVariantsResponse* SearchVariantsResponse::internal_default_instance() {
  return &SearchVariantsResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void CreateVariantRequest::_slow_mutable_variant() {
  variant_ = ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::Variant >(
      GetArenaNoVirtual());
}
::google::genomics::v1::Variant* CreateVariantRequest::_slow_release_variant() {
  if (variant_ == NULL) {
    return NULL;
  } else {
    ::google::genomics::v1::Variant* temp = new ::google::genomics::v1::Variant(*variant_);
    variant_ = NULL;
    return temp;
  }
}
::google::genomics::v1::Variant* CreateVariantRequest::unsafe_arena_release_variant() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.CreateVariantRequest.variant)
  
  ::google::genomics::v1::Variant* temp = variant_;
  variant_ = NULL;
  return temp;
}
void CreateVariantRequest::_slow_set_allocated_variant(
    ::google::protobuf::Arena* message_arena, ::google::genomics::v1::Variant** variant) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*variant) == NULL) {
      message_arena->Own(*variant);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*variant)) {
      ::google::genomics::v1::Variant* new_variant = 
            ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::Variant >(
            message_arena);
      new_variant->CopyFrom(**variant);
      *variant = new_variant;
    }
}
void CreateVariantRequest::unsafe_arena_set_allocated_variant(
    ::google::genomics::v1::Variant* variant) {
  if (GetArenaNoVirtual() == NULL) {
    delete variant_;
  }
  variant_ = variant;
  if (variant) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.CreateVariantRequest.variant)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateVariantRequest::kVariantFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateVariantRequest::CreateVariantRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.CreateVariantRequest)
}
CreateVariantRequest::CreateVariantRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.CreateVariantRequest)
}

void CreateVariantRequest::InitAsDefaultInstance() {
  variant_ = const_cast< ::google::genomics::v1::Variant*>(
      ::google::genomics::v1::Variant::internal_default_instance());
}

CreateVariantRequest::CreateVariantRequest(const CreateVariantRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.CreateVariantRequest)
}

void CreateVariantRequest::SharedCtor() {
  variant_ = NULL;
  _cached_size_ = 0;
}

CreateVariantRequest::~CreateVariantRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.CreateVariantRequest)
  SharedDtor();
}

void CreateVariantRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != &CreateVariantRequest_default_instance_.get()) {
    delete variant_;
  }
}

void CreateVariantRequest::ArenaDtor(void* object) {
  CreateVariantRequest* _this = reinterpret_cast< CreateVariantRequest* >(object);
  (void)_this;
}
void CreateVariantRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CreateVariantRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateVariantRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateVariantRequest_descriptor_;
}

const CreateVariantRequest& CreateVariantRequest::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CreateVariantRequest> CreateVariantRequest_default_instance_;

CreateVariantRequest* CreateVariantRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CreateVariantRequest>(arena);
}

void CreateVariantRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.CreateVariantRequest)
  if (GetArenaNoVirtual() == NULL && variant_ != NULL) delete variant_;
  variant_ = NULL;
}

bool CreateVariantRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.CreateVariantRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.genomics.v1.Variant variant = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_variant()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.CreateVariantRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.CreateVariantRequest)
  return false;
#undef DO_
}

void CreateVariantRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.CreateVariantRequest)
  // optional .google.genomics.v1.Variant variant = 1;
  if (this->has_variant()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->variant_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.CreateVariantRequest)
}

::google::protobuf::uint8* CreateVariantRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.CreateVariantRequest)
  // optional .google.genomics.v1.Variant variant = 1;
  if (this->has_variant()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->variant_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.CreateVariantRequest)
  return target;
}

size_t CreateVariantRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.CreateVariantRequest)
  size_t total_size = 0;

  // optional .google.genomics.v1.Variant variant = 1;
  if (this->has_variant()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->variant_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateVariantRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.CreateVariantRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CreateVariantRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateVariantRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.CreateVariantRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.CreateVariantRequest)
    UnsafeMergeFrom(*source);
  }
}

void CreateVariantRequest::MergeFrom(const CreateVariantRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.CreateVariantRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CreateVariantRequest::UnsafeMergeFrom(const CreateVariantRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_variant()) {
    mutable_variant()->::google::genomics::v1::Variant::MergeFrom(from.variant());
  }
}

void CreateVariantRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.CreateVariantRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateVariantRequest::CopyFrom(const CreateVariantRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.CreateVariantRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CreateVariantRequest::IsInitialized() const {

  return true;
}

void CreateVariantRequest::Swap(CreateVariantRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CreateVariantRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void CreateVariantRequest::UnsafeArenaSwap(CreateVariantRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CreateVariantRequest::InternalSwap(CreateVariantRequest* other) {
  std::swap(variant_, other->variant_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateVariantRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateVariantRequest_descriptor_;
  metadata.reflection = CreateVariantRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateVariantRequest

// optional .google.genomics.v1.Variant variant = 1;
bool CreateVariantRequest::has_variant() const {
  return this != internal_default_instance() && variant_ != NULL;
}
void CreateVariantRequest::clear_variant() {
  if (GetArenaNoVirtual() == NULL && variant_ != NULL) delete variant_;
  variant_ = NULL;
}
const ::google::genomics::v1::Variant& CreateVariantRequest::variant() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.CreateVariantRequest.variant)
  return variant_ != NULL ? *variant_
                         : *::google::genomics::v1::Variant::internal_default_instance();
}
::google::genomics::v1::Variant* CreateVariantRequest::mutable_variant() {
  
  if (variant_ == NULL) {
    _slow_mutable_variant();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.CreateVariantRequest.variant)
  return variant_;
}
::google::genomics::v1::Variant* CreateVariantRequest::release_variant() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.CreateVariantRequest.variant)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_variant();
  } else {
    ::google::genomics::v1::Variant* temp = variant_;
    variant_ = NULL;
    return temp;
  }
}
 void CreateVariantRequest::set_allocated_variant(::google::genomics::v1::Variant* variant) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete variant_;
  }
  if (variant != NULL) {
    _slow_set_allocated_variant(message_arena, &variant);
  }
  variant_ = variant;
  if (variant) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.CreateVariantRequest.variant)
}

inline const CreateVariantRequest* CreateVariantRequest::internal_default_instance() {
  return &CreateVariantRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void UpdateVariantRequest::_slow_mutable_variant() {
  variant_ = ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::Variant >(
      GetArenaNoVirtual());
}
::google::genomics::v1::Variant* UpdateVariantRequest::_slow_release_variant() {
  if (variant_ == NULL) {
    return NULL;
  } else {
    ::google::genomics::v1::Variant* temp = new ::google::genomics::v1::Variant(*variant_);
    variant_ = NULL;
    return temp;
  }
}
::google::genomics::v1::Variant* UpdateVariantRequest::unsafe_arena_release_variant() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.UpdateVariantRequest.variant)
  
  ::google::genomics::v1::Variant* temp = variant_;
  variant_ = NULL;
  return temp;
}
void UpdateVariantRequest::_slow_set_allocated_variant(
    ::google::protobuf::Arena* message_arena, ::google::genomics::v1::Variant** variant) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*variant) == NULL) {
      message_arena->Own(*variant);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*variant)) {
      ::google::genomics::v1::Variant* new_variant = 
            ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::Variant >(
            message_arena);
      new_variant->CopyFrom(**variant);
      *variant = new_variant;
    }
}
void UpdateVariantRequest::unsafe_arena_set_allocated_variant(
    ::google::genomics::v1::Variant* variant) {
  if (GetArenaNoVirtual() == NULL) {
    delete variant_;
  }
  variant_ = variant;
  if (variant) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.UpdateVariantRequest.variant)
}
void UpdateVariantRequest::_slow_mutable_update_mask() {
  update_mask_ = ::google::protobuf::Arena::Create< ::google::protobuf::FieldMask >(
      GetArenaNoVirtual());
}
::google::protobuf::FieldMask* UpdateVariantRequest::_slow_release_update_mask() {
  if (update_mask_ == NULL) {
    return NULL;
  } else {
    ::google::protobuf::FieldMask* temp = new ::google::protobuf::FieldMask(*update_mask_);
    update_mask_ = NULL;
    return temp;
  }
}
::google::protobuf::FieldMask* UpdateVariantRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.UpdateVariantRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  update_mask_ = NULL;
  return temp;
}
void UpdateVariantRequest::unsafe_arena_set_allocated_update_mask(
    ::google::protobuf::FieldMask* update_mask) {
  if (GetArenaNoVirtual() == NULL) {
    delete update_mask_;
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.UpdateVariantRequest.update_mask)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateVariantRequest::kVariantIdFieldNumber;
const int UpdateVariantRequest::kVariantFieldNumber;
const int UpdateVariantRequest::kUpdateMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateVariantRequest::UpdateVariantRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.UpdateVariantRequest)
}
UpdateVariantRequest::UpdateVariantRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.UpdateVariantRequest)
}

void UpdateVariantRequest::InitAsDefaultInstance() {
  variant_ = const_cast< ::google::genomics::v1::Variant*>(
      ::google::genomics::v1::Variant::internal_default_instance());
  update_mask_ = const_cast< ::google::protobuf::FieldMask*>(
      ::google::protobuf::FieldMask::internal_default_instance());
}

UpdateVariantRequest::UpdateVariantRequest(const UpdateVariantRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.UpdateVariantRequest)
}

void UpdateVariantRequest::SharedCtor() {
  variant_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  variant_ = NULL;
  update_mask_ = NULL;
  _cached_size_ = 0;
}

UpdateVariantRequest::~UpdateVariantRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.UpdateVariantRequest)
  SharedDtor();
}

void UpdateVariantRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  variant_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != &UpdateVariantRequest_default_instance_.get()) {
    delete variant_;
    delete update_mask_;
  }
}

void UpdateVariantRequest::ArenaDtor(void* object) {
  UpdateVariantRequest* _this = reinterpret_cast< UpdateVariantRequest* >(object);
  (void)_this;
}
void UpdateVariantRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UpdateVariantRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateVariantRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateVariantRequest_descriptor_;
}

const UpdateVariantRequest& UpdateVariantRequest::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UpdateVariantRequest> UpdateVariantRequest_default_instance_;

UpdateVariantRequest* UpdateVariantRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UpdateVariantRequest>(arena);
}

void UpdateVariantRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.UpdateVariantRequest)
  variant_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && variant_ != NULL) delete variant_;
  variant_ = NULL;
  if (GetArenaNoVirtual() == NULL && update_mask_ != NULL) delete update_mask_;
  update_mask_ = NULL;
}

bool UpdateVariantRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.UpdateVariantRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string variant_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_variant_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->variant_id().data(), this->variant_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.UpdateVariantRequest.variant_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_variant;
        break;
      }

      // optional .google.genomics.v1.Variant variant = 2;
      case 2: {
        if (tag == 18) {
         parse_variant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_variant()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_update_mask;
        break;
      }

      // optional .google.protobuf.FieldMask update_mask = 3;
      case 3: {
        if (tag == 26) {
         parse_update_mask:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_mask()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.UpdateVariantRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.UpdateVariantRequest)
  return false;
#undef DO_
}

void UpdateVariantRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.UpdateVariantRequest)
  // optional string variant_id = 1;
  if (this->variant_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_id().data(), this->variant_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.UpdateVariantRequest.variant_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->variant_id(), output);
  }

  // optional .google.genomics.v1.Variant variant = 2;
  if (this->has_variant()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->variant_, output);
  }

  // optional .google.protobuf.FieldMask update_mask = 3;
  if (this->has_update_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->update_mask_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.UpdateVariantRequest)
}

::google::protobuf::uint8* UpdateVariantRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.UpdateVariantRequest)
  // optional string variant_id = 1;
  if (this->variant_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_id().data(), this->variant_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.UpdateVariantRequest.variant_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->variant_id(), target);
  }

  // optional .google.genomics.v1.Variant variant = 2;
  if (this->has_variant()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->variant_, false, target);
  }

  // optional .google.protobuf.FieldMask update_mask = 3;
  if (this->has_update_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->update_mask_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.UpdateVariantRequest)
  return target;
}

size_t UpdateVariantRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.UpdateVariantRequest)
  size_t total_size = 0;

  // optional string variant_id = 1;
  if (this->variant_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->variant_id());
  }

  // optional .google.genomics.v1.Variant variant = 2;
  if (this->has_variant()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->variant_);
  }

  // optional .google.protobuf.FieldMask update_mask = 3;
  if (this->has_update_mask()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->update_mask_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateVariantRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.UpdateVariantRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UpdateVariantRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateVariantRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.UpdateVariantRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.UpdateVariantRequest)
    UnsafeMergeFrom(*source);
  }
}

void UpdateVariantRequest::MergeFrom(const UpdateVariantRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.UpdateVariantRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UpdateVariantRequest::UnsafeMergeFrom(const UpdateVariantRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.variant_id().size() > 0) {
    set_variant_id(from.variant_id());
  }
  if (from.has_variant()) {
    mutable_variant()->::google::genomics::v1::Variant::MergeFrom(from.variant());
  }
  if (from.has_update_mask()) {
    mutable_update_mask()->::google::protobuf::FieldMask::MergeFrom(from.update_mask());
  }
}

void UpdateVariantRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.UpdateVariantRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateVariantRequest::CopyFrom(const UpdateVariantRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.UpdateVariantRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UpdateVariantRequest::IsInitialized() const {

  return true;
}

void UpdateVariantRequest::Swap(UpdateVariantRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UpdateVariantRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void UpdateVariantRequest::UnsafeArenaSwap(UpdateVariantRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UpdateVariantRequest::InternalSwap(UpdateVariantRequest* other) {
  variant_id_.Swap(&other->variant_id_);
  std::swap(variant_, other->variant_);
  std::swap(update_mask_, other->update_mask_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateVariantRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateVariantRequest_descriptor_;
  metadata.reflection = UpdateVariantRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateVariantRequest

// optional string variant_id = 1;
void UpdateVariantRequest::clear_variant_id() {
  variant_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& UpdateVariantRequest::variant_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.UpdateVariantRequest.variant_id)
  return variant_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateVariantRequest::set_variant_id(const ::std::string& value) {
  
  variant_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.UpdateVariantRequest.variant_id)
}
void UpdateVariantRequest::set_variant_id(const char* value) {
  
  variant_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.UpdateVariantRequest.variant_id)
}
void UpdateVariantRequest::set_variant_id(const char* value,
    size_t size) {
  
  variant_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.UpdateVariantRequest.variant_id)
}
::std::string* UpdateVariantRequest::mutable_variant_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.UpdateVariantRequest.variant_id)
  return variant_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* UpdateVariantRequest::release_variant_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.UpdateVariantRequest.variant_id)
  
  return variant_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* UpdateVariantRequest::unsafe_arena_release_variant_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.UpdateVariantRequest.variant_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return variant_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void UpdateVariantRequest::set_allocated_variant_id(::std::string* variant_id) {
  if (variant_id != NULL) {
    
  } else {
    
  }
  variant_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), variant_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.UpdateVariantRequest.variant_id)
}
void UpdateVariantRequest::unsafe_arena_set_allocated_variant_id(
    ::std::string* variant_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (variant_id != NULL) {
    
  } else {
    
  }
  variant_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      variant_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.UpdateVariantRequest.variant_id)
}

// optional .google.genomics.v1.Variant variant = 2;
bool UpdateVariantRequest::has_variant() const {
  return this != internal_default_instance() && variant_ != NULL;
}
void UpdateVariantRequest::clear_variant() {
  if (GetArenaNoVirtual() == NULL && variant_ != NULL) delete variant_;
  variant_ = NULL;
}
const ::google::genomics::v1::Variant& UpdateVariantRequest::variant() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.UpdateVariantRequest.variant)
  return variant_ != NULL ? *variant_
                         : *::google::genomics::v1::Variant::internal_default_instance();
}
::google::genomics::v1::Variant* UpdateVariantRequest::mutable_variant() {
  
  if (variant_ == NULL) {
    _slow_mutable_variant();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.UpdateVariantRequest.variant)
  return variant_;
}
::google::genomics::v1::Variant* UpdateVariantRequest::release_variant() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.UpdateVariantRequest.variant)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_variant();
  } else {
    ::google::genomics::v1::Variant* temp = variant_;
    variant_ = NULL;
    return temp;
  }
}
 void UpdateVariantRequest::set_allocated_variant(::google::genomics::v1::Variant* variant) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete variant_;
  }
  if (variant != NULL) {
    _slow_set_allocated_variant(message_arena, &variant);
  }
  variant_ = variant;
  if (variant) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.UpdateVariantRequest.variant)
}

// optional .google.protobuf.FieldMask update_mask = 3;
bool UpdateVariantRequest::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != NULL;
}
void UpdateVariantRequest::clear_update_mask() {
  if (GetArenaNoVirtual() == NULL && update_mask_ != NULL) delete update_mask_;
  update_mask_ = NULL;
}
const ::google::protobuf::FieldMask& UpdateVariantRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.UpdateVariantRequest.update_mask)
  return update_mask_ != NULL ? *update_mask_
                         : *::google::protobuf::FieldMask::internal_default_instance();
}
::google::protobuf::FieldMask* UpdateVariantRequest::mutable_update_mask() {
  
  if (update_mask_ == NULL) {
    _slow_mutable_update_mask();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.UpdateVariantRequest.update_mask)
  return update_mask_;
}
::google::protobuf::FieldMask* UpdateVariantRequest::release_update_mask() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.UpdateVariantRequest.update_mask)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_update_mask();
  } else {
    ::google::protobuf::FieldMask* temp = update_mask_;
    update_mask_ = NULL;
    return temp;
  }
}
 void UpdateVariantRequest::set_allocated_update_mask(::google::protobuf::FieldMask* update_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete update_mask_;
  }
  if (update_mask != NULL) {
    if (message_arena != NULL) {
      message_arena->Own(update_mask);
    }
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.UpdateVariantRequest.update_mask)
}

inline const UpdateVariantRequest* UpdateVariantRequest::internal_default_instance() {
  return &UpdateVariantRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteVariantRequest::kVariantIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteVariantRequest::DeleteVariantRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.DeleteVariantRequest)
}
DeleteVariantRequest::DeleteVariantRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.DeleteVariantRequest)
}

void DeleteVariantRequest::InitAsDefaultInstance() {
}

DeleteVariantRequest::DeleteVariantRequest(const DeleteVariantRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.DeleteVariantRequest)
}

void DeleteVariantRequest::SharedCtor() {
  variant_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DeleteVariantRequest::~DeleteVariantRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.DeleteVariantRequest)
  SharedDtor();
}

void DeleteVariantRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  variant_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void DeleteVariantRequest::ArenaDtor(void* object) {
  DeleteVariantRequest* _this = reinterpret_cast< DeleteVariantRequest* >(object);
  (void)_this;
}
void DeleteVariantRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DeleteVariantRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteVariantRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteVariantRequest_descriptor_;
}

const DeleteVariantRequest& DeleteVariantRequest::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DeleteVariantRequest> DeleteVariantRequest_default_instance_;

DeleteVariantRequest* DeleteVariantRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DeleteVariantRequest>(arena);
}

void DeleteVariantRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.DeleteVariantRequest)
  variant_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool DeleteVariantRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.DeleteVariantRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string variant_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_variant_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->variant_id().data(), this->variant_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.DeleteVariantRequest.variant_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.DeleteVariantRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.DeleteVariantRequest)
  return false;
#undef DO_
}

void DeleteVariantRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.DeleteVariantRequest)
  // optional string variant_id = 1;
  if (this->variant_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_id().data(), this->variant_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.DeleteVariantRequest.variant_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->variant_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.DeleteVariantRequest)
}

::google::protobuf::uint8* DeleteVariantRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.DeleteVariantRequest)
  // optional string variant_id = 1;
  if (this->variant_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_id().data(), this->variant_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.DeleteVariantRequest.variant_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->variant_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.DeleteVariantRequest)
  return target;
}

size_t DeleteVariantRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.DeleteVariantRequest)
  size_t total_size = 0;

  // optional string variant_id = 1;
  if (this->variant_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->variant_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteVariantRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.DeleteVariantRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DeleteVariantRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteVariantRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.DeleteVariantRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.DeleteVariantRequest)
    UnsafeMergeFrom(*source);
  }
}

void DeleteVariantRequest::MergeFrom(const DeleteVariantRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.DeleteVariantRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DeleteVariantRequest::UnsafeMergeFrom(const DeleteVariantRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.variant_id().size() > 0) {
    set_variant_id(from.variant_id());
  }
}

void DeleteVariantRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.DeleteVariantRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteVariantRequest::CopyFrom(const DeleteVariantRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.DeleteVariantRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DeleteVariantRequest::IsInitialized() const {

  return true;
}

void DeleteVariantRequest::Swap(DeleteVariantRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeleteVariantRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void DeleteVariantRequest::UnsafeArenaSwap(DeleteVariantRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeleteVariantRequest::InternalSwap(DeleteVariantRequest* other) {
  variant_id_.Swap(&other->variant_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteVariantRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteVariantRequest_descriptor_;
  metadata.reflection = DeleteVariantRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteVariantRequest

// optional string variant_id = 1;
void DeleteVariantRequest::clear_variant_id() {
  variant_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& DeleteVariantRequest::variant_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.DeleteVariantRequest.variant_id)
  return variant_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteVariantRequest::set_variant_id(const ::std::string& value) {
  
  variant_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.DeleteVariantRequest.variant_id)
}
void DeleteVariantRequest::set_variant_id(const char* value) {
  
  variant_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.DeleteVariantRequest.variant_id)
}
void DeleteVariantRequest::set_variant_id(const char* value,
    size_t size) {
  
  variant_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.DeleteVariantRequest.variant_id)
}
::std::string* DeleteVariantRequest::mutable_variant_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.DeleteVariantRequest.variant_id)
  return variant_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeleteVariantRequest::release_variant_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.DeleteVariantRequest.variant_id)
  
  return variant_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeleteVariantRequest::unsafe_arena_release_variant_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.DeleteVariantRequest.variant_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return variant_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void DeleteVariantRequest::set_allocated_variant_id(::std::string* variant_id) {
  if (variant_id != NULL) {
    
  } else {
    
  }
  variant_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), variant_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.DeleteVariantRequest.variant_id)
}
void DeleteVariantRequest::unsafe_arena_set_allocated_variant_id(
    ::std::string* variant_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (variant_id != NULL) {
    
  } else {
    
  }
  variant_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      variant_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.DeleteVariantRequest.variant_id)
}

inline const DeleteVariantRequest* DeleteVariantRequest::internal_default_instance() {
  return &DeleteVariantRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetVariantRequest::kVariantIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetVariantRequest::GetVariantRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.GetVariantRequest)
}
GetVariantRequest::GetVariantRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.GetVariantRequest)
}

void GetVariantRequest::InitAsDefaultInstance() {
}

GetVariantRequest::GetVariantRequest(const GetVariantRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.GetVariantRequest)
}

void GetVariantRequest::SharedCtor() {
  variant_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetVariantRequest::~GetVariantRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.GetVariantRequest)
  SharedDtor();
}

void GetVariantRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  variant_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void GetVariantRequest::ArenaDtor(void* object) {
  GetVariantRequest* _this = reinterpret_cast< GetVariantRequest* >(object);
  (void)_this;
}
void GetVariantRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetVariantRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetVariantRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetVariantRequest_descriptor_;
}

const GetVariantRequest& GetVariantRequest::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetVariantRequest> GetVariantRequest_default_instance_;

GetVariantRequest* GetVariantRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetVariantRequest>(arena);
}

void GetVariantRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.GetVariantRequest)
  variant_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool GetVariantRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.GetVariantRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string variant_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_variant_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->variant_id().data(), this->variant_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.GetVariantRequest.variant_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.GetVariantRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.GetVariantRequest)
  return false;
#undef DO_
}

void GetVariantRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.GetVariantRequest)
  // optional string variant_id = 1;
  if (this->variant_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_id().data(), this->variant_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.GetVariantRequest.variant_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->variant_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.GetVariantRequest)
}

::google::protobuf::uint8* GetVariantRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.GetVariantRequest)
  // optional string variant_id = 1;
  if (this->variant_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_id().data(), this->variant_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.GetVariantRequest.variant_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->variant_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.GetVariantRequest)
  return target;
}

size_t GetVariantRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.GetVariantRequest)
  size_t total_size = 0;

  // optional string variant_id = 1;
  if (this->variant_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->variant_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetVariantRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.GetVariantRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetVariantRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetVariantRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.GetVariantRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.GetVariantRequest)
    UnsafeMergeFrom(*source);
  }
}

void GetVariantRequest::MergeFrom(const GetVariantRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.GetVariantRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetVariantRequest::UnsafeMergeFrom(const GetVariantRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.variant_id().size() > 0) {
    set_variant_id(from.variant_id());
  }
}

void GetVariantRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.GetVariantRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVariantRequest::CopyFrom(const GetVariantRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.GetVariantRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetVariantRequest::IsInitialized() const {

  return true;
}

void GetVariantRequest::Swap(GetVariantRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetVariantRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void GetVariantRequest::UnsafeArenaSwap(GetVariantRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetVariantRequest::InternalSwap(GetVariantRequest* other) {
  variant_id_.Swap(&other->variant_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetVariantRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetVariantRequest_descriptor_;
  metadata.reflection = GetVariantRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetVariantRequest

// optional string variant_id = 1;
void GetVariantRequest::clear_variant_id() {
  variant_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetVariantRequest::variant_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.GetVariantRequest.variant_id)
  return variant_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetVariantRequest::set_variant_id(const ::std::string& value) {
  
  variant_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.GetVariantRequest.variant_id)
}
void GetVariantRequest::set_variant_id(const char* value) {
  
  variant_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.GetVariantRequest.variant_id)
}
void GetVariantRequest::set_variant_id(const char* value,
    size_t size) {
  
  variant_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.GetVariantRequest.variant_id)
}
::std::string* GetVariantRequest::mutable_variant_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.GetVariantRequest.variant_id)
  return variant_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetVariantRequest::release_variant_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.GetVariantRequest.variant_id)
  
  return variant_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetVariantRequest::unsafe_arena_release_variant_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.GetVariantRequest.variant_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return variant_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetVariantRequest::set_allocated_variant_id(::std::string* variant_id) {
  if (variant_id != NULL) {
    
  } else {
    
  }
  variant_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), variant_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.GetVariantRequest.variant_id)
}
void GetVariantRequest::unsafe_arena_set_allocated_variant_id(
    ::std::string* variant_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (variant_id != NULL) {
    
  } else {
    
  }
  variant_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      variant_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.GetVariantRequest.variant_id)
}

inline const GetVariantRequest* GetVariantRequest::internal_default_instance() {
  return &GetVariantRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MergeVariantsRequest::kVariantSetIdFieldNumber;
const int MergeVariantsRequest::kVariantsFieldNumber;
const int MergeVariantsRequest::kInfoMergeConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MergeVariantsRequest::MergeVariantsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.MergeVariantsRequest)
}
MergeVariantsRequest::MergeVariantsRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  variants_(arena),
  info_merge_config_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.MergeVariantsRequest)
}

void MergeVariantsRequest::InitAsDefaultInstance() {
}

MergeVariantsRequest::MergeVariantsRequest(const MergeVariantsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.MergeVariantsRequest)
}

void MergeVariantsRequest::SharedCtor() {
  info_merge_config_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  info_merge_config_.SetEntryDescriptor(
      &::google::genomics::v1::MergeVariantsRequest_InfoMergeConfigEntry_descriptor_);
  variant_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

MergeVariantsRequest::~MergeVariantsRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.MergeVariantsRequest)
  SharedDtor();
}

void MergeVariantsRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  variant_set_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void MergeVariantsRequest::ArenaDtor(void* object) {
  MergeVariantsRequest* _this = reinterpret_cast< MergeVariantsRequest* >(object);
  (void)_this;
}
void MergeVariantsRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MergeVariantsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MergeVariantsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MergeVariantsRequest_descriptor_;
}

const MergeVariantsRequest& MergeVariantsRequest::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MergeVariantsRequest> MergeVariantsRequest_default_instance_;

MergeVariantsRequest* MergeVariantsRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<MergeVariantsRequest>(arena);
}

void MergeVariantsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.MergeVariantsRequest)
  variant_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  variants_.Clear();
  info_merge_config_.Clear();
}

bool MergeVariantsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.MergeVariantsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string variant_set_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_variant_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->variant_set_id().data(), this->variant_set_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.MergeVariantsRequest.variant_set_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_variants;
        break;
      }

      // repeated .google.genomics.v1.Variant variants = 2;
      case 2: {
        if (tag == 18) {
         parse_variants:
          DO_(input->IncrementRecursionDepth());
         parse_loop_variants:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_variants()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_variants;
        if (input->ExpectTag(26)) goto parse_loop_info_merge_config;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, .google.genomics.v1.InfoMergeOperation> info_merge_config = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_info_merge_config:
          MergeVariantsRequest_InfoMergeConfigEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::google::genomics::v1::InfoMergeOperation,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_ENUM,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation > > parser(&info_merge_config_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.MergeVariantsRequest.InfoMergeConfigEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_info_merge_config;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.MergeVariantsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.MergeVariantsRequest)
  return false;
#undef DO_
}

void MergeVariantsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.MergeVariantsRequest)
  // optional string variant_set_id = 1;
  if (this->variant_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_id().data(), this->variant_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.MergeVariantsRequest.variant_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->variant_set_id(), output);
  }

  // repeated .google.genomics.v1.Variant variants = 2;
  for (unsigned int i = 0, n = this->variants_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->variants(i), output);
  }

  // map<string, .google.genomics.v1.InfoMergeOperation> info_merge_config = 3;
  if (!this->info_merge_config().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1.MergeVariantsRequest.InfoMergeConfigEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->info_merge_config().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->info_merge_config().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation >::const_iterator
          it = this->info_merge_config().begin();
          it != this->info_merge_config().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<MergeVariantsRequest_InfoMergeConfigEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(info_merge_config_.NewEnumEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MergeVariantsRequest_InfoMergeConfigEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation >::const_iterator
          it = this->info_merge_config().begin();
          it != this->info_merge_config().end(); ++it) {
        entry.reset(info_merge_config_.NewEnumEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.MergeVariantsRequest)
}

::google::protobuf::uint8* MergeVariantsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.MergeVariantsRequest)
  // optional string variant_set_id = 1;
  if (this->variant_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_id().data(), this->variant_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.MergeVariantsRequest.variant_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->variant_set_id(), target);
  }

  // repeated .google.genomics.v1.Variant variants = 2;
  for (unsigned int i = 0, n = this->variants_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->variants(i), false, target);
  }

  // map<string, .google.genomics.v1.InfoMergeOperation> info_merge_config = 3;
  if (!this->info_merge_config().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1.MergeVariantsRequest.InfoMergeConfigEntry.key");
      }
    };

    if (deterministic &&
        this->info_merge_config().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->info_merge_config().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation >::const_iterator
          it = this->info_merge_config().begin();
          it != this->info_merge_config().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<MergeVariantsRequest_InfoMergeConfigEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(info_merge_config_.NewEnumEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MergeVariantsRequest_InfoMergeConfigEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation >::const_iterator
          it = this->info_merge_config().begin();
          it != this->info_merge_config().end(); ++it) {
        entry.reset(info_merge_config_.NewEnumEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.MergeVariantsRequest)
  return target;
}

size_t MergeVariantsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.MergeVariantsRequest)
  size_t total_size = 0;

  // optional string variant_set_id = 1;
  if (this->variant_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->variant_set_id());
  }

  // repeated .google.genomics.v1.Variant variants = 2;
  {
    unsigned int count = this->variants_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->variants(i));
    }
  }

  // map<string, .google.genomics.v1.InfoMergeOperation> info_merge_config = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->info_merge_config_size());
  {
    ::google::protobuf::scoped_ptr<MergeVariantsRequest_InfoMergeConfigEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation >::const_iterator
        it = this->info_merge_config().begin();
        it != this->info_merge_config().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(info_merge_config_.NewEnumEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MergeVariantsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.MergeVariantsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MergeVariantsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MergeVariantsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.MergeVariantsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.MergeVariantsRequest)
    UnsafeMergeFrom(*source);
  }
}

void MergeVariantsRequest::MergeFrom(const MergeVariantsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.MergeVariantsRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MergeVariantsRequest::UnsafeMergeFrom(const MergeVariantsRequest& from) {
  GOOGLE_DCHECK(&from != this);
  variants_.MergeFrom(from.variants_);
  info_merge_config_.MergeFrom(from.info_merge_config_);
  if (from.variant_set_id().size() > 0) {
    set_variant_set_id(from.variant_set_id());
  }
}

void MergeVariantsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.MergeVariantsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MergeVariantsRequest::CopyFrom(const MergeVariantsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.MergeVariantsRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MergeVariantsRequest::IsInitialized() const {

  return true;
}

void MergeVariantsRequest::Swap(MergeVariantsRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MergeVariantsRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void MergeVariantsRequest::UnsafeArenaSwap(MergeVariantsRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MergeVariantsRequest::InternalSwap(MergeVariantsRequest* other) {
  variant_set_id_.Swap(&other->variant_set_id_);
  variants_.UnsafeArenaSwap(&other->variants_);
  info_merge_config_.Swap(&other->info_merge_config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MergeVariantsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MergeVariantsRequest_descriptor_;
  metadata.reflection = MergeVariantsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MergeVariantsRequest

// optional string variant_set_id = 1;
void MergeVariantsRequest::clear_variant_set_id() {
  variant_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& MergeVariantsRequest::variant_set_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.MergeVariantsRequest.variant_set_id)
  return variant_set_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MergeVariantsRequest::set_variant_set_id(const ::std::string& value) {
  
  variant_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.MergeVariantsRequest.variant_set_id)
}
void MergeVariantsRequest::set_variant_set_id(const char* value) {
  
  variant_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.MergeVariantsRequest.variant_set_id)
}
void MergeVariantsRequest::set_variant_set_id(const char* value,
    size_t size) {
  
  variant_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.MergeVariantsRequest.variant_set_id)
}
::std::string* MergeVariantsRequest::mutable_variant_set_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.MergeVariantsRequest.variant_set_id)
  return variant_set_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MergeVariantsRequest::release_variant_set_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.MergeVariantsRequest.variant_set_id)
  
  return variant_set_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MergeVariantsRequest::unsafe_arena_release_variant_set_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.MergeVariantsRequest.variant_set_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return variant_set_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void MergeVariantsRequest::set_allocated_variant_set_id(::std::string* variant_set_id) {
  if (variant_set_id != NULL) {
    
  } else {
    
  }
  variant_set_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), variant_set_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.MergeVariantsRequest.variant_set_id)
}
void MergeVariantsRequest::unsafe_arena_set_allocated_variant_set_id(
    ::std::string* variant_set_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (variant_set_id != NULL) {
    
  } else {
    
  }
  variant_set_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      variant_set_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.MergeVariantsRequest.variant_set_id)
}

// repeated .google.genomics.v1.Variant variants = 2;
int MergeVariantsRequest::variants_size() const {
  return variants_.size();
}
void MergeVariantsRequest::clear_variants() {
  variants_.Clear();
}
const ::google::genomics::v1::Variant& MergeVariantsRequest::variants(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.MergeVariantsRequest.variants)
  return variants_.Get(index);
}
::google::genomics::v1::Variant* MergeVariantsRequest::mutable_variants(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.MergeVariantsRequest.variants)
  return variants_.Mutable(index);
}
::google::genomics::v1::Variant* MergeVariantsRequest::add_variants() {
  // @@protoc_insertion_point(field_add:google.genomics.v1.MergeVariantsRequest.variants)
  return variants_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::genomics::v1::Variant >*
MergeVariantsRequest::mutable_variants() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.MergeVariantsRequest.variants)
  return &variants_;
}
const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1::Variant >&
MergeVariantsRequest::variants() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.MergeVariantsRequest.variants)
  return variants_;
}

// map<string, .google.genomics.v1.InfoMergeOperation> info_merge_config = 3;
int MergeVariantsRequest::info_merge_config_size() const {
  return info_merge_config_.size();
}
void MergeVariantsRequest::clear_info_merge_config() {
  info_merge_config_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation >&
MergeVariantsRequest::info_merge_config() const {
  // @@protoc_insertion_point(field_map:google.genomics.v1.MergeVariantsRequest.info_merge_config)
  return info_merge_config_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation >*
MergeVariantsRequest::mutable_info_merge_config() {
  // @@protoc_insertion_point(field_mutable_map:google.genomics.v1.MergeVariantsRequest.info_merge_config)
  return info_merge_config_.MutableMap();
}

inline const MergeVariantsRequest* MergeVariantsRequest::internal_default_instance() {
  return &MergeVariantsRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchCallSetsRequest::kVariantSetIdsFieldNumber;
const int SearchCallSetsRequest::kNameFieldNumber;
const int SearchCallSetsRequest::kPageTokenFieldNumber;
const int SearchCallSetsRequest::kPageSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchCallSetsRequest::SearchCallSetsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.SearchCallSetsRequest)
}
SearchCallSetsRequest::SearchCallSetsRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  variant_set_ids_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.SearchCallSetsRequest)
}

void SearchCallSetsRequest::InitAsDefaultInstance() {
}

SearchCallSetsRequest::SearchCallSetsRequest(const SearchCallSetsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.SearchCallSetsRequest)
}

void SearchCallSetsRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
  _cached_size_ = 0;
}

SearchCallSetsRequest::~SearchCallSetsRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.SearchCallSetsRequest)
  SharedDtor();
}

void SearchCallSetsRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  page_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void SearchCallSetsRequest::ArenaDtor(void* object) {
  SearchCallSetsRequest* _this = reinterpret_cast< SearchCallSetsRequest* >(object);
  (void)_this;
}
void SearchCallSetsRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SearchCallSetsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchCallSetsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchCallSetsRequest_descriptor_;
}

const SearchCallSetsRequest& SearchCallSetsRequest::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SearchCallSetsRequest> SearchCallSetsRequest_default_instance_;

SearchCallSetsRequest* SearchCallSetsRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SearchCallSetsRequest>(arena);
}

void SearchCallSetsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.SearchCallSetsRequest)
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_size_ = 0;
  variant_set_ids_.Clear();
}

bool SearchCallSetsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.SearchCallSetsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string variant_set_ids = 1;
      case 1: {
        if (tag == 10) {
         parse_variant_set_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_variant_set_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->variant_set_ids(this->variant_set_ids_size() - 1).data(),
            this->variant_set_ids(this->variant_set_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchCallSetsRequest.variant_set_ids"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_variant_set_ids;
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchCallSetsRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_page_token;
        break;
      }

      // optional string page_token = 3;
      case 3: {
        if (tag == 26) {
         parse_page_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), this->page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchCallSetsRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_page_size;
        break;
      }

      // optional int32 page_size = 4;
      case 4: {
        if (tag == 32) {
         parse_page_size:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.SearchCallSetsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.SearchCallSetsRequest)
  return false;
#undef DO_
}

void SearchCallSetsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.SearchCallSetsRequest)
  // repeated string variant_set_ids = 1;
  for (int i = 0; i < this->variant_set_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_ids(i).data(), this->variant_set_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchCallSetsRequest.variant_set_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->variant_set_ids(i), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchCallSetsRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchCallSetsRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->page_token(), output);
  }

  // optional int32 page_size = 4;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->page_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.SearchCallSetsRequest)
}

::google::protobuf::uint8* SearchCallSetsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.SearchCallSetsRequest)
  // repeated string variant_set_ids = 1;
  for (int i = 0; i < this->variant_set_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_ids(i).data(), this->variant_set_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchCallSetsRequest.variant_set_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->variant_set_ids(i), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchCallSetsRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchCallSetsRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->page_token(), target);
  }

  // optional int32 page_size = 4;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->page_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.SearchCallSetsRequest)
  return target;
}

size_t SearchCallSetsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.SearchCallSetsRequest)
  size_t total_size = 0;

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string page_token = 3;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // optional int32 page_size = 4;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  // repeated string variant_set_ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->variant_set_ids_size());
  for (int i = 0; i < this->variant_set_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->variant_set_ids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchCallSetsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.SearchCallSetsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SearchCallSetsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchCallSetsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.SearchCallSetsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.SearchCallSetsRequest)
    UnsafeMergeFrom(*source);
  }
}

void SearchCallSetsRequest::MergeFrom(const SearchCallSetsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.SearchCallSetsRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SearchCallSetsRequest::UnsafeMergeFrom(const SearchCallSetsRequest& from) {
  GOOGLE_DCHECK(&from != this);
  variant_set_ids_.UnsafeMergeFrom(from.variant_set_ids_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.page_token().size() > 0) {
    set_page_token(from.page_token());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void SearchCallSetsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.SearchCallSetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchCallSetsRequest::CopyFrom(const SearchCallSetsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.SearchCallSetsRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SearchCallSetsRequest::IsInitialized() const {

  return true;
}

void SearchCallSetsRequest::Swap(SearchCallSetsRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SearchCallSetsRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void SearchCallSetsRequest::UnsafeArenaSwap(SearchCallSetsRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SearchCallSetsRequest::InternalSwap(SearchCallSetsRequest* other) {
  variant_set_ids_.UnsafeArenaSwap(&other->variant_set_ids_);
  name_.Swap(&other->name_);
  page_token_.Swap(&other->page_token_);
  std::swap(page_size_, other->page_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchCallSetsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchCallSetsRequest_descriptor_;
  metadata.reflection = SearchCallSetsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchCallSetsRequest

// repeated string variant_set_ids = 1;
int SearchCallSetsRequest::variant_set_ids_size() const {
  return variant_set_ids_.size();
}
void SearchCallSetsRequest::clear_variant_set_ids() {
  variant_set_ids_.Clear();
}
const ::std::string& SearchCallSetsRequest::variant_set_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchCallSetsRequest.variant_set_ids)
  return variant_set_ids_.Get(index);
}
::std::string* SearchCallSetsRequest::mutable_variant_set_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchCallSetsRequest.variant_set_ids)
  return variant_set_ids_.Mutable(index);
}
void SearchCallSetsRequest::set_variant_set_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchCallSetsRequest.variant_set_ids)
  variant_set_ids_.Mutable(index)->assign(value);
}
void SearchCallSetsRequest::set_variant_set_ids(int index, const char* value) {
  variant_set_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchCallSetsRequest.variant_set_ids)
}
void SearchCallSetsRequest::set_variant_set_ids(int index, const char* value, size_t size) {
  variant_set_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchCallSetsRequest.variant_set_ids)
}
::std::string* SearchCallSetsRequest::add_variant_set_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.SearchCallSetsRequest.variant_set_ids)
  return variant_set_ids_.Add();
}
void SearchCallSetsRequest::add_variant_set_ids(const ::std::string& value) {
  variant_set_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchCallSetsRequest.variant_set_ids)
}
void SearchCallSetsRequest::add_variant_set_ids(const char* value) {
  variant_set_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.SearchCallSetsRequest.variant_set_ids)
}
void SearchCallSetsRequest::add_variant_set_ids(const char* value, size_t size) {
  variant_set_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.SearchCallSetsRequest.variant_set_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SearchCallSetsRequest::variant_set_ids() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.SearchCallSetsRequest.variant_set_ids)
  return variant_set_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SearchCallSetsRequest::mutable_variant_set_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.SearchCallSetsRequest.variant_set_ids)
  return &variant_set_ids_;
}

// optional string name = 2;
void SearchCallSetsRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SearchCallSetsRequest::name() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchCallSetsRequest.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchCallSetsRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchCallSetsRequest.name)
}
void SearchCallSetsRequest::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchCallSetsRequest.name)
}
void SearchCallSetsRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchCallSetsRequest.name)
}
::std::string* SearchCallSetsRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchCallSetsRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchCallSetsRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.SearchCallSetsRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchCallSetsRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.SearchCallSetsRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SearchCallSetsRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.SearchCallSetsRequest.name)
}
void SearchCallSetsRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.SearchCallSetsRequest.name)
}

// optional string page_token = 3;
void SearchCallSetsRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SearchCallSetsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchCallSetsRequest.page_token)
  return page_token_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchCallSetsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchCallSetsRequest.page_token)
}
void SearchCallSetsRequest::set_page_token(const char* value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchCallSetsRequest.page_token)
}
void SearchCallSetsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchCallSetsRequest.page_token)
}
::std::string* SearchCallSetsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchCallSetsRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchCallSetsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.SearchCallSetsRequest.page_token)
  
  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchCallSetsRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.SearchCallSetsRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SearchCallSetsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.SearchCallSetsRequest.page_token)
}
void SearchCallSetsRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.SearchCallSetsRequest.page_token)
}

// optional int32 page_size = 4;
void SearchCallSetsRequest::clear_page_size() {
  page_size_ = 0;
}
::google::protobuf::int32 SearchCallSetsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchCallSetsRequest.page_size)
  return page_size_;
}
void SearchCallSetsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchCallSetsRequest.page_size)
}

inline const SearchCallSetsRequest* SearchCallSetsRequest::internal_default_instance() {
  return &SearchCallSetsRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchCallSetsResponse::kCallSetsFieldNumber;
const int SearchCallSetsResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchCallSetsResponse::SearchCallSetsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.SearchCallSetsResponse)
}
SearchCallSetsResponse::SearchCallSetsResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  call_sets_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.SearchCallSetsResponse)
}

void SearchCallSetsResponse::InitAsDefaultInstance() {
}

SearchCallSetsResponse::SearchCallSetsResponse(const SearchCallSetsResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.SearchCallSetsResponse)
}

void SearchCallSetsResponse::SharedCtor() {
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SearchCallSetsResponse::~SearchCallSetsResponse() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.SearchCallSetsResponse)
  SharedDtor();
}

void SearchCallSetsResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  next_page_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void SearchCallSetsResponse::ArenaDtor(void* object) {
  SearchCallSetsResponse* _this = reinterpret_cast< SearchCallSetsResponse* >(object);
  (void)_this;
}
void SearchCallSetsResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SearchCallSetsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchCallSetsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchCallSetsResponse_descriptor_;
}

const SearchCallSetsResponse& SearchCallSetsResponse::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SearchCallSetsResponse> SearchCallSetsResponse_default_instance_;

SearchCallSetsResponse* SearchCallSetsResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SearchCallSetsResponse>(arena);
}

void SearchCallSetsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.SearchCallSetsResponse)
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  call_sets_.Clear();
}

bool SearchCallSetsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.SearchCallSetsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.genomics.v1.CallSet call_sets = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_call_sets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_call_sets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_call_sets;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_next_page_token;
        break;
      }

      // optional string next_page_token = 2;
      case 2: {
        if (tag == 18) {
         parse_next_page_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), this->next_page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchCallSetsResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.SearchCallSetsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.SearchCallSetsResponse)
  return false;
#undef DO_
}

void SearchCallSetsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.SearchCallSetsResponse)
  // repeated .google.genomics.v1.CallSet call_sets = 1;
  for (unsigned int i = 0, n = this->call_sets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->call_sets(i), output);
  }

  // optional string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchCallSetsResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.SearchCallSetsResponse)
}

::google::protobuf::uint8* SearchCallSetsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.SearchCallSetsResponse)
  // repeated .google.genomics.v1.CallSet call_sets = 1;
  for (unsigned int i = 0, n = this->call_sets_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->call_sets(i), false, target);
  }

  // optional string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchCallSetsResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.SearchCallSetsResponse)
  return target;
}

size_t SearchCallSetsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.SearchCallSetsResponse)
  size_t total_size = 0;

  // optional string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  // repeated .google.genomics.v1.CallSet call_sets = 1;
  {
    unsigned int count = this->call_sets_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->call_sets(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchCallSetsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.SearchCallSetsResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SearchCallSetsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchCallSetsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.SearchCallSetsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.SearchCallSetsResponse)
    UnsafeMergeFrom(*source);
  }
}

void SearchCallSetsResponse::MergeFrom(const SearchCallSetsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.SearchCallSetsResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SearchCallSetsResponse::UnsafeMergeFrom(const SearchCallSetsResponse& from) {
  GOOGLE_DCHECK(&from != this);
  call_sets_.MergeFrom(from.call_sets_);
  if (from.next_page_token().size() > 0) {
    set_next_page_token(from.next_page_token());
  }
}

void SearchCallSetsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.SearchCallSetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchCallSetsResponse::CopyFrom(const SearchCallSetsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.SearchCallSetsResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SearchCallSetsResponse::IsInitialized() const {

  return true;
}

void SearchCallSetsResponse::Swap(SearchCallSetsResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SearchCallSetsResponse temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void SearchCallSetsResponse::UnsafeArenaSwap(SearchCallSetsResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SearchCallSetsResponse::InternalSwap(SearchCallSetsResponse* other) {
  call_sets_.UnsafeArenaSwap(&other->call_sets_);
  next_page_token_.Swap(&other->next_page_token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchCallSetsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchCallSetsResponse_descriptor_;
  metadata.reflection = SearchCallSetsResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchCallSetsResponse

// repeated .google.genomics.v1.CallSet call_sets = 1;
int SearchCallSetsResponse::call_sets_size() const {
  return call_sets_.size();
}
void SearchCallSetsResponse::clear_call_sets() {
  call_sets_.Clear();
}
const ::google::genomics::v1::CallSet& SearchCallSetsResponse::call_sets(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchCallSetsResponse.call_sets)
  return call_sets_.Get(index);
}
::google::genomics::v1::CallSet* SearchCallSetsResponse::mutable_call_sets(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchCallSetsResponse.call_sets)
  return call_sets_.Mutable(index);
}
::google::genomics::v1::CallSet* SearchCallSetsResponse::add_call_sets() {
  // @@protoc_insertion_point(field_add:google.genomics.v1.SearchCallSetsResponse.call_sets)
  return call_sets_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::genomics::v1::CallSet >*
SearchCallSetsResponse::mutable_call_sets() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.SearchCallSetsResponse.call_sets)
  return &call_sets_;
}
const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1::CallSet >&
SearchCallSetsResponse::call_sets() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.SearchCallSetsResponse.call_sets)
  return call_sets_;
}

// optional string next_page_token = 2;
void SearchCallSetsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SearchCallSetsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.SearchCallSetsResponse.next_page_token)
  return next_page_token_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchCallSetsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.SearchCallSetsResponse.next_page_token)
}
void SearchCallSetsResponse::set_next_page_token(const char* value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.SearchCallSetsResponse.next_page_token)
}
void SearchCallSetsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.SearchCallSetsResponse.next_page_token)
}
::std::string* SearchCallSetsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.SearchCallSetsResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchCallSetsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.SearchCallSetsResponse.next_page_token)
  
  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SearchCallSetsResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.SearchCallSetsResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SearchCallSetsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.SearchCallSetsResponse.next_page_token)
}
void SearchCallSetsResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.SearchCallSetsResponse.next_page_token)
}

inline const SearchCallSetsResponse* SearchCallSetsResponse::internal_default_instance() {
  return &SearchCallSetsResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void CreateCallSetRequest::_slow_mutable_call_set() {
  call_set_ = ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::CallSet >(
      GetArenaNoVirtual());
}
::google::genomics::v1::CallSet* CreateCallSetRequest::_slow_release_call_set() {
  if (call_set_ == NULL) {
    return NULL;
  } else {
    ::google::genomics::v1::CallSet* temp = new ::google::genomics::v1::CallSet(*call_set_);
    call_set_ = NULL;
    return temp;
  }
}
::google::genomics::v1::CallSet* CreateCallSetRequest::unsafe_arena_release_call_set() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.CreateCallSetRequest.call_set)
  
  ::google::genomics::v1::CallSet* temp = call_set_;
  call_set_ = NULL;
  return temp;
}
void CreateCallSetRequest::_slow_set_allocated_call_set(
    ::google::protobuf::Arena* message_arena, ::google::genomics::v1::CallSet** call_set) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*call_set) == NULL) {
      message_arena->Own(*call_set);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*call_set)) {
      ::google::genomics::v1::CallSet* new_call_set = 
            ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::CallSet >(
            message_arena);
      new_call_set->CopyFrom(**call_set);
      *call_set = new_call_set;
    }
}
void CreateCallSetRequest::unsafe_arena_set_allocated_call_set(
    ::google::genomics::v1::CallSet* call_set) {
  if (GetArenaNoVirtual() == NULL) {
    delete call_set_;
  }
  call_set_ = call_set;
  if (call_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.CreateCallSetRequest.call_set)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateCallSetRequest::kCallSetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateCallSetRequest::CreateCallSetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.CreateCallSetRequest)
}
CreateCallSetRequest::CreateCallSetRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.CreateCallSetRequest)
}

void CreateCallSetRequest::InitAsDefaultInstance() {
  call_set_ = const_cast< ::google::genomics::v1::CallSet*>(
      ::google::genomics::v1::CallSet::internal_default_instance());
}

CreateCallSetRequest::CreateCallSetRequest(const CreateCallSetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.CreateCallSetRequest)
}

void CreateCallSetRequest::SharedCtor() {
  call_set_ = NULL;
  _cached_size_ = 0;
}

CreateCallSetRequest::~CreateCallSetRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.CreateCallSetRequest)
  SharedDtor();
}

void CreateCallSetRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != &CreateCallSetRequest_default_instance_.get()) {
    delete call_set_;
  }
}

void CreateCallSetRequest::ArenaDtor(void* object) {
  CreateCallSetRequest* _this = reinterpret_cast< CreateCallSetRequest* >(object);
  (void)_this;
}
void CreateCallSetRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CreateCallSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateCallSetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateCallSetRequest_descriptor_;
}

const CreateCallSetRequest& CreateCallSetRequest::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CreateCallSetRequest> CreateCallSetRequest_default_instance_;

CreateCallSetRequest* CreateCallSetRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CreateCallSetRequest>(arena);
}

void CreateCallSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.CreateCallSetRequest)
  if (GetArenaNoVirtual() == NULL && call_set_ != NULL) delete call_set_;
  call_set_ = NULL;
}

bool CreateCallSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.CreateCallSetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.genomics.v1.CallSet call_set = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_call_set()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.CreateCallSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.CreateCallSetRequest)
  return false;
#undef DO_
}

void CreateCallSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.CreateCallSetRequest)
  // optional .google.genomics.v1.CallSet call_set = 1;
  if (this->has_call_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->call_set_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.CreateCallSetRequest)
}

::google::protobuf::uint8* CreateCallSetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.CreateCallSetRequest)
  // optional .google.genomics.v1.CallSet call_set = 1;
  if (this->has_call_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->call_set_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.CreateCallSetRequest)
  return target;
}

size_t CreateCallSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.CreateCallSetRequest)
  size_t total_size = 0;

  // optional .google.genomics.v1.CallSet call_set = 1;
  if (this->has_call_set()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->call_set_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateCallSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.CreateCallSetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CreateCallSetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateCallSetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.CreateCallSetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.CreateCallSetRequest)
    UnsafeMergeFrom(*source);
  }
}

void CreateCallSetRequest::MergeFrom(const CreateCallSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.CreateCallSetRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CreateCallSetRequest::UnsafeMergeFrom(const CreateCallSetRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_call_set()) {
    mutable_call_set()->::google::genomics::v1::CallSet::MergeFrom(from.call_set());
  }
}

void CreateCallSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.CreateCallSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateCallSetRequest::CopyFrom(const CreateCallSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.CreateCallSetRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CreateCallSetRequest::IsInitialized() const {

  return true;
}

void CreateCallSetRequest::Swap(CreateCallSetRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CreateCallSetRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void CreateCallSetRequest::UnsafeArenaSwap(CreateCallSetRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CreateCallSetRequest::InternalSwap(CreateCallSetRequest* other) {
  std::swap(call_set_, other->call_set_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateCallSetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateCallSetRequest_descriptor_;
  metadata.reflection = CreateCallSetRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateCallSetRequest

// optional .google.genomics.v1.CallSet call_set = 1;
bool CreateCallSetRequest::has_call_set() const {
  return this != internal_default_instance() && call_set_ != NULL;
}
void CreateCallSetRequest::clear_call_set() {
  if (GetArenaNoVirtual() == NULL && call_set_ != NULL) delete call_set_;
  call_set_ = NULL;
}
const ::google::genomics::v1::CallSet& CreateCallSetRequest::call_set() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.CreateCallSetRequest.call_set)
  return call_set_ != NULL ? *call_set_
                         : *::google::genomics::v1::CallSet::internal_default_instance();
}
::google::genomics::v1::CallSet* CreateCallSetRequest::mutable_call_set() {
  
  if (call_set_ == NULL) {
    _slow_mutable_call_set();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.CreateCallSetRequest.call_set)
  return call_set_;
}
::google::genomics::v1::CallSet* CreateCallSetRequest::release_call_set() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.CreateCallSetRequest.call_set)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_call_set();
  } else {
    ::google::genomics::v1::CallSet* temp = call_set_;
    call_set_ = NULL;
    return temp;
  }
}
 void CreateCallSetRequest::set_allocated_call_set(::google::genomics::v1::CallSet* call_set) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete call_set_;
  }
  if (call_set != NULL) {
    _slow_set_allocated_call_set(message_arena, &call_set);
  }
  call_set_ = call_set;
  if (call_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.CreateCallSetRequest.call_set)
}

inline const CreateCallSetRequest* CreateCallSetRequest::internal_default_instance() {
  return &CreateCallSetRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void UpdateCallSetRequest::_slow_mutable_call_set() {
  call_set_ = ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::CallSet >(
      GetArenaNoVirtual());
}
::google::genomics::v1::CallSet* UpdateCallSetRequest::_slow_release_call_set() {
  if (call_set_ == NULL) {
    return NULL;
  } else {
    ::google::genomics::v1::CallSet* temp = new ::google::genomics::v1::CallSet(*call_set_);
    call_set_ = NULL;
    return temp;
  }
}
::google::genomics::v1::CallSet* UpdateCallSetRequest::unsafe_arena_release_call_set() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.UpdateCallSetRequest.call_set)
  
  ::google::genomics::v1::CallSet* temp = call_set_;
  call_set_ = NULL;
  return temp;
}
void UpdateCallSetRequest::_slow_set_allocated_call_set(
    ::google::protobuf::Arena* message_arena, ::google::genomics::v1::CallSet** call_set) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*call_set) == NULL) {
      message_arena->Own(*call_set);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*call_set)) {
      ::google::genomics::v1::CallSet* new_call_set = 
            ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::CallSet >(
            message_arena);
      new_call_set->CopyFrom(**call_set);
      *call_set = new_call_set;
    }
}
void UpdateCallSetRequest::unsafe_arena_set_allocated_call_set(
    ::google::genomics::v1::CallSet* call_set) {
  if (GetArenaNoVirtual() == NULL) {
    delete call_set_;
  }
  call_set_ = call_set;
  if (call_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.UpdateCallSetRequest.call_set)
}
void UpdateCallSetRequest::_slow_mutable_update_mask() {
  update_mask_ = ::google::protobuf::Arena::Create< ::google::protobuf::FieldMask >(
      GetArenaNoVirtual());
}
::google::protobuf::FieldMask* UpdateCallSetRequest::_slow_release_update_mask() {
  if (update_mask_ == NULL) {
    return NULL;
  } else {
    ::google::protobuf::FieldMask* temp = new ::google::protobuf::FieldMask(*update_mask_);
    update_mask_ = NULL;
    return temp;
  }
}
::google::protobuf::FieldMask* UpdateCallSetRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.UpdateCallSetRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  update_mask_ = NULL;
  return temp;
}
void UpdateCallSetRequest::unsafe_arena_set_allocated_update_mask(
    ::google::protobuf::FieldMask* update_mask) {
  if (GetArenaNoVirtual() == NULL) {
    delete update_mask_;
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.UpdateCallSetRequest.update_mask)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateCallSetRequest::kCallSetIdFieldNumber;
const int UpdateCallSetRequest::kCallSetFieldNumber;
const int UpdateCallSetRequest::kUpdateMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateCallSetRequest::UpdateCallSetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.UpdateCallSetRequest)
}
UpdateCallSetRequest::UpdateCallSetRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.UpdateCallSetRequest)
}

void UpdateCallSetRequest::InitAsDefaultInstance() {
  call_set_ = const_cast< ::google::genomics::v1::CallSet*>(
      ::google::genomics::v1::CallSet::internal_default_instance());
  update_mask_ = const_cast< ::google::protobuf::FieldMask*>(
      ::google::protobuf::FieldMask::internal_default_instance());
}

UpdateCallSetRequest::UpdateCallSetRequest(const UpdateCallSetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.UpdateCallSetRequest)
}

void UpdateCallSetRequest::SharedCtor() {
  call_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  call_set_ = NULL;
  update_mask_ = NULL;
  _cached_size_ = 0;
}

UpdateCallSetRequest::~UpdateCallSetRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.UpdateCallSetRequest)
  SharedDtor();
}

void UpdateCallSetRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  call_set_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != &UpdateCallSetRequest_default_instance_.get()) {
    delete call_set_;
    delete update_mask_;
  }
}

void UpdateCallSetRequest::ArenaDtor(void* object) {
  UpdateCallSetRequest* _this = reinterpret_cast< UpdateCallSetRequest* >(object);
  (void)_this;
}
void UpdateCallSetRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UpdateCallSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateCallSetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateCallSetRequest_descriptor_;
}

const UpdateCallSetRequest& UpdateCallSetRequest::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UpdateCallSetRequest> UpdateCallSetRequest_default_instance_;

UpdateCallSetRequest* UpdateCallSetRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UpdateCallSetRequest>(arena);
}

void UpdateCallSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.UpdateCallSetRequest)
  call_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && call_set_ != NULL) delete call_set_;
  call_set_ = NULL;
  if (GetArenaNoVirtual() == NULL && update_mask_ != NULL) delete update_mask_;
  update_mask_ = NULL;
}

bool UpdateCallSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.UpdateCallSetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string call_set_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_call_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->call_set_id().data(), this->call_set_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.UpdateCallSetRequest.call_set_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_call_set;
        break;
      }

      // optional .google.genomics.v1.CallSet call_set = 2;
      case 2: {
        if (tag == 18) {
         parse_call_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_call_set()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_update_mask;
        break;
      }

      // optional .google.protobuf.FieldMask update_mask = 3;
      case 3: {
        if (tag == 26) {
         parse_update_mask:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_mask()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.UpdateCallSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.UpdateCallSetRequest)
  return false;
#undef DO_
}

void UpdateCallSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.UpdateCallSetRequest)
  // optional string call_set_id = 1;
  if (this->call_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_set_id().data(), this->call_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.UpdateCallSetRequest.call_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->call_set_id(), output);
  }

  // optional .google.genomics.v1.CallSet call_set = 2;
  if (this->has_call_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->call_set_, output);
  }

  // optional .google.protobuf.FieldMask update_mask = 3;
  if (this->has_update_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->update_mask_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.UpdateCallSetRequest)
}

::google::protobuf::uint8* UpdateCallSetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.UpdateCallSetRequest)
  // optional string call_set_id = 1;
  if (this->call_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_set_id().data(), this->call_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.UpdateCallSetRequest.call_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->call_set_id(), target);
  }

  // optional .google.genomics.v1.CallSet call_set = 2;
  if (this->has_call_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->call_set_, false, target);
  }

  // optional .google.protobuf.FieldMask update_mask = 3;
  if (this->has_update_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->update_mask_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.UpdateCallSetRequest)
  return target;
}

size_t UpdateCallSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.UpdateCallSetRequest)
  size_t total_size = 0;

  // optional string call_set_id = 1;
  if (this->call_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->call_set_id());
  }

  // optional .google.genomics.v1.CallSet call_set = 2;
  if (this->has_call_set()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->call_set_);
  }

  // optional .google.protobuf.FieldMask update_mask = 3;
  if (this->has_update_mask()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->update_mask_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateCallSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.UpdateCallSetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UpdateCallSetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateCallSetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.UpdateCallSetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.UpdateCallSetRequest)
    UnsafeMergeFrom(*source);
  }
}

void UpdateCallSetRequest::MergeFrom(const UpdateCallSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.UpdateCallSetRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UpdateCallSetRequest::UnsafeMergeFrom(const UpdateCallSetRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.call_set_id().size() > 0) {
    set_call_set_id(from.call_set_id());
  }
  if (from.has_call_set()) {
    mutable_call_set()->::google::genomics::v1::CallSet::MergeFrom(from.call_set());
  }
  if (from.has_update_mask()) {
    mutable_update_mask()->::google::protobuf::FieldMask::MergeFrom(from.update_mask());
  }
}

void UpdateCallSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.UpdateCallSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateCallSetRequest::CopyFrom(const UpdateCallSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.UpdateCallSetRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UpdateCallSetRequest::IsInitialized() const {

  return true;
}

void UpdateCallSetRequest::Swap(UpdateCallSetRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UpdateCallSetRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void UpdateCallSetRequest::UnsafeArenaSwap(UpdateCallSetRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UpdateCallSetRequest::InternalSwap(UpdateCallSetRequest* other) {
  call_set_id_.Swap(&other->call_set_id_);
  std::swap(call_set_, other->call_set_);
  std::swap(update_mask_, other->update_mask_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateCallSetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateCallSetRequest_descriptor_;
  metadata.reflection = UpdateCallSetRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateCallSetRequest

// optional string call_set_id = 1;
void UpdateCallSetRequest::clear_call_set_id() {
  call_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& UpdateCallSetRequest::call_set_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.UpdateCallSetRequest.call_set_id)
  return call_set_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateCallSetRequest::set_call_set_id(const ::std::string& value) {
  
  call_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.UpdateCallSetRequest.call_set_id)
}
void UpdateCallSetRequest::set_call_set_id(const char* value) {
  
  call_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.UpdateCallSetRequest.call_set_id)
}
void UpdateCallSetRequest::set_call_set_id(const char* value,
    size_t size) {
  
  call_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.UpdateCallSetRequest.call_set_id)
}
::std::string* UpdateCallSetRequest::mutable_call_set_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.UpdateCallSetRequest.call_set_id)
  return call_set_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* UpdateCallSetRequest::release_call_set_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.UpdateCallSetRequest.call_set_id)
  
  return call_set_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* UpdateCallSetRequest::unsafe_arena_release_call_set_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.UpdateCallSetRequest.call_set_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return call_set_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void UpdateCallSetRequest::set_allocated_call_set_id(::std::string* call_set_id) {
  if (call_set_id != NULL) {
    
  } else {
    
  }
  call_set_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), call_set_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.UpdateCallSetRequest.call_set_id)
}
void UpdateCallSetRequest::unsafe_arena_set_allocated_call_set_id(
    ::std::string* call_set_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (call_set_id != NULL) {
    
  } else {
    
  }
  call_set_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      call_set_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.UpdateCallSetRequest.call_set_id)
}

// optional .google.genomics.v1.CallSet call_set = 2;
bool UpdateCallSetRequest::has_call_set() const {
  return this != internal_default_instance() && call_set_ != NULL;
}
void UpdateCallSetRequest::clear_call_set() {
  if (GetArenaNoVirtual() == NULL && call_set_ != NULL) delete call_set_;
  call_set_ = NULL;
}
const ::google::genomics::v1::CallSet& UpdateCallSetRequest::call_set() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.UpdateCallSetRequest.call_set)
  return call_set_ != NULL ? *call_set_
                         : *::google::genomics::v1::CallSet::internal_default_instance();
}
::google::genomics::v1::CallSet* UpdateCallSetRequest::mutable_call_set() {
  
  if (call_set_ == NULL) {
    _slow_mutable_call_set();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.UpdateCallSetRequest.call_set)
  return call_set_;
}
::google::genomics::v1::CallSet* UpdateCallSetRequest::release_call_set() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.UpdateCallSetRequest.call_set)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_call_set();
  } else {
    ::google::genomics::v1::CallSet* temp = call_set_;
    call_set_ = NULL;
    return temp;
  }
}
 void UpdateCallSetRequest::set_allocated_call_set(::google::genomics::v1::CallSet* call_set) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete call_set_;
  }
  if (call_set != NULL) {
    _slow_set_allocated_call_set(message_arena, &call_set);
  }
  call_set_ = call_set;
  if (call_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.UpdateCallSetRequest.call_set)
}

// optional .google.protobuf.FieldMask update_mask = 3;
bool UpdateCallSetRequest::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != NULL;
}
void UpdateCallSetRequest::clear_update_mask() {
  if (GetArenaNoVirtual() == NULL && update_mask_ != NULL) delete update_mask_;
  update_mask_ = NULL;
}
const ::google::protobuf::FieldMask& UpdateCallSetRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.UpdateCallSetRequest.update_mask)
  return update_mask_ != NULL ? *update_mask_
                         : *::google::protobuf::FieldMask::internal_default_instance();
}
::google::protobuf::FieldMask* UpdateCallSetRequest::mutable_update_mask() {
  
  if (update_mask_ == NULL) {
    _slow_mutable_update_mask();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.UpdateCallSetRequest.update_mask)
  return update_mask_;
}
::google::protobuf::FieldMask* UpdateCallSetRequest::release_update_mask() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.UpdateCallSetRequest.update_mask)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_update_mask();
  } else {
    ::google::protobuf::FieldMask* temp = update_mask_;
    update_mask_ = NULL;
    return temp;
  }
}
 void UpdateCallSetRequest::set_allocated_update_mask(::google::protobuf::FieldMask* update_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete update_mask_;
  }
  if (update_mask != NULL) {
    if (message_arena != NULL) {
      message_arena->Own(update_mask);
    }
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.UpdateCallSetRequest.update_mask)
}

inline const UpdateCallSetRequest* UpdateCallSetRequest::internal_default_instance() {
  return &UpdateCallSetRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteCallSetRequest::kCallSetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteCallSetRequest::DeleteCallSetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.DeleteCallSetRequest)
}
DeleteCallSetRequest::DeleteCallSetRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.DeleteCallSetRequest)
}

void DeleteCallSetRequest::InitAsDefaultInstance() {
}

DeleteCallSetRequest::DeleteCallSetRequest(const DeleteCallSetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.DeleteCallSetRequest)
}

void DeleteCallSetRequest::SharedCtor() {
  call_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DeleteCallSetRequest::~DeleteCallSetRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.DeleteCallSetRequest)
  SharedDtor();
}

void DeleteCallSetRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  call_set_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void DeleteCallSetRequest::ArenaDtor(void* object) {
  DeleteCallSetRequest* _this = reinterpret_cast< DeleteCallSetRequest* >(object);
  (void)_this;
}
void DeleteCallSetRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DeleteCallSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteCallSetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteCallSetRequest_descriptor_;
}

const DeleteCallSetRequest& DeleteCallSetRequest::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DeleteCallSetRequest> DeleteCallSetRequest_default_instance_;

DeleteCallSetRequest* DeleteCallSetRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DeleteCallSetRequest>(arena);
}

void DeleteCallSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.DeleteCallSetRequest)
  call_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool DeleteCallSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.DeleteCallSetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string call_set_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_call_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->call_set_id().data(), this->call_set_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.DeleteCallSetRequest.call_set_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.DeleteCallSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.DeleteCallSetRequest)
  return false;
#undef DO_
}

void DeleteCallSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.DeleteCallSetRequest)
  // optional string call_set_id = 1;
  if (this->call_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_set_id().data(), this->call_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.DeleteCallSetRequest.call_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->call_set_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.DeleteCallSetRequest)
}

::google::protobuf::uint8* DeleteCallSetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.DeleteCallSetRequest)
  // optional string call_set_id = 1;
  if (this->call_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_set_id().data(), this->call_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.DeleteCallSetRequest.call_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->call_set_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.DeleteCallSetRequest)
  return target;
}

size_t DeleteCallSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.DeleteCallSetRequest)
  size_t total_size = 0;

  // optional string call_set_id = 1;
  if (this->call_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->call_set_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteCallSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.DeleteCallSetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DeleteCallSetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteCallSetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.DeleteCallSetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.DeleteCallSetRequest)
    UnsafeMergeFrom(*source);
  }
}

void DeleteCallSetRequest::MergeFrom(const DeleteCallSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.DeleteCallSetRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DeleteCallSetRequest::UnsafeMergeFrom(const DeleteCallSetRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.call_set_id().size() > 0) {
    set_call_set_id(from.call_set_id());
  }
}

void DeleteCallSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.DeleteCallSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteCallSetRequest::CopyFrom(const DeleteCallSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.DeleteCallSetRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DeleteCallSetRequest::IsInitialized() const {

  return true;
}

void DeleteCallSetRequest::Swap(DeleteCallSetRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeleteCallSetRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void DeleteCallSetRequest::UnsafeArenaSwap(DeleteCallSetRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeleteCallSetRequest::InternalSwap(DeleteCallSetRequest* other) {
  call_set_id_.Swap(&other->call_set_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteCallSetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteCallSetRequest_descriptor_;
  metadata.reflection = DeleteCallSetRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteCallSetRequest

// optional string call_set_id = 1;
void DeleteCallSetRequest::clear_call_set_id() {
  call_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& DeleteCallSetRequest::call_set_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.DeleteCallSetRequest.call_set_id)
  return call_set_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteCallSetRequest::set_call_set_id(const ::std::string& value) {
  
  call_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.DeleteCallSetRequest.call_set_id)
}
void DeleteCallSetRequest::set_call_set_id(const char* value) {
  
  call_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.DeleteCallSetRequest.call_set_id)
}
void DeleteCallSetRequest::set_call_set_id(const char* value,
    size_t size) {
  
  call_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.DeleteCallSetRequest.call_set_id)
}
::std::string* DeleteCallSetRequest::mutable_call_set_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.DeleteCallSetRequest.call_set_id)
  return call_set_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeleteCallSetRequest::release_call_set_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.DeleteCallSetRequest.call_set_id)
  
  return call_set_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeleteCallSetRequest::unsafe_arena_release_call_set_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.DeleteCallSetRequest.call_set_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return call_set_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void DeleteCallSetRequest::set_allocated_call_set_id(::std::string* call_set_id) {
  if (call_set_id != NULL) {
    
  } else {
    
  }
  call_set_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), call_set_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.DeleteCallSetRequest.call_set_id)
}
void DeleteCallSetRequest::unsafe_arena_set_allocated_call_set_id(
    ::std::string* call_set_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (call_set_id != NULL) {
    
  } else {
    
  }
  call_set_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      call_set_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.DeleteCallSetRequest.call_set_id)
}

inline const DeleteCallSetRequest* DeleteCallSetRequest::internal_default_instance() {
  return &DeleteCallSetRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCallSetRequest::kCallSetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCallSetRequest::GetCallSetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.GetCallSetRequest)
}
GetCallSetRequest::GetCallSetRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.GetCallSetRequest)
}

void GetCallSetRequest::InitAsDefaultInstance() {
}

GetCallSetRequest::GetCallSetRequest(const GetCallSetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.GetCallSetRequest)
}

void GetCallSetRequest::SharedCtor() {
  call_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetCallSetRequest::~GetCallSetRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.GetCallSetRequest)
  SharedDtor();
}

void GetCallSetRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  call_set_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void GetCallSetRequest::ArenaDtor(void* object) {
  GetCallSetRequest* _this = reinterpret_cast< GetCallSetRequest* >(object);
  (void)_this;
}
void GetCallSetRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetCallSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCallSetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCallSetRequest_descriptor_;
}

const GetCallSetRequest& GetCallSetRequest::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetCallSetRequest> GetCallSetRequest_default_instance_;

GetCallSetRequest* GetCallSetRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetCallSetRequest>(arena);
}

void GetCallSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.GetCallSetRequest)
  call_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool GetCallSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.GetCallSetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string call_set_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_call_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->call_set_id().data(), this->call_set_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.GetCallSetRequest.call_set_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.GetCallSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.GetCallSetRequest)
  return false;
#undef DO_
}

void GetCallSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.GetCallSetRequest)
  // optional string call_set_id = 1;
  if (this->call_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_set_id().data(), this->call_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.GetCallSetRequest.call_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->call_set_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.GetCallSetRequest)
}

::google::protobuf::uint8* GetCallSetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.GetCallSetRequest)
  // optional string call_set_id = 1;
  if (this->call_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_set_id().data(), this->call_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.GetCallSetRequest.call_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->call_set_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.GetCallSetRequest)
  return target;
}

size_t GetCallSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.GetCallSetRequest)
  size_t total_size = 0;

  // optional string call_set_id = 1;
  if (this->call_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->call_set_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCallSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.GetCallSetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetCallSetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetCallSetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.GetCallSetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.GetCallSetRequest)
    UnsafeMergeFrom(*source);
  }
}

void GetCallSetRequest::MergeFrom(const GetCallSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.GetCallSetRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetCallSetRequest::UnsafeMergeFrom(const GetCallSetRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.call_set_id().size() > 0) {
    set_call_set_id(from.call_set_id());
  }
}

void GetCallSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.GetCallSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCallSetRequest::CopyFrom(const GetCallSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.GetCallSetRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetCallSetRequest::IsInitialized() const {

  return true;
}

void GetCallSetRequest::Swap(GetCallSetRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetCallSetRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void GetCallSetRequest::UnsafeArenaSwap(GetCallSetRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetCallSetRequest::InternalSwap(GetCallSetRequest* other) {
  call_set_id_.Swap(&other->call_set_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetCallSetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetCallSetRequest_descriptor_;
  metadata.reflection = GetCallSetRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetCallSetRequest

// optional string call_set_id = 1;
void GetCallSetRequest::clear_call_set_id() {
  call_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetCallSetRequest::call_set_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.GetCallSetRequest.call_set_id)
  return call_set_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetCallSetRequest::set_call_set_id(const ::std::string& value) {
  
  call_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.GetCallSetRequest.call_set_id)
}
void GetCallSetRequest::set_call_set_id(const char* value) {
  
  call_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.GetCallSetRequest.call_set_id)
}
void GetCallSetRequest::set_call_set_id(const char* value,
    size_t size) {
  
  call_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.GetCallSetRequest.call_set_id)
}
::std::string* GetCallSetRequest::mutable_call_set_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.GetCallSetRequest.call_set_id)
  return call_set_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetCallSetRequest::release_call_set_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.GetCallSetRequest.call_set_id)
  
  return call_set_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetCallSetRequest::unsafe_arena_release_call_set_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.GetCallSetRequest.call_set_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return call_set_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetCallSetRequest::set_allocated_call_set_id(::std::string* call_set_id) {
  if (call_set_id != NULL) {
    
  } else {
    
  }
  call_set_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), call_set_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.GetCallSetRequest.call_set_id)
}
void GetCallSetRequest::unsafe_arena_set_allocated_call_set_id(
    ::std::string* call_set_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (call_set_id != NULL) {
    
  } else {
    
  }
  call_set_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      call_set_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.GetCallSetRequest.call_set_id)
}

inline const GetCallSetRequest* GetCallSetRequest::internal_default_instance() {
  return &GetCallSetRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamVariantsRequest::kProjectIdFieldNumber;
const int StreamVariantsRequest::kVariantSetIdFieldNumber;
const int StreamVariantsRequest::kCallSetIdsFieldNumber;
const int StreamVariantsRequest::kReferenceNameFieldNumber;
const int StreamVariantsRequest::kStartFieldNumber;
const int StreamVariantsRequest::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamVariantsRequest::StreamVariantsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.StreamVariantsRequest)
}
StreamVariantsRequest::StreamVariantsRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  call_set_ids_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.StreamVariantsRequest)
}

void StreamVariantsRequest::InitAsDefaultInstance() {
}

StreamVariantsRequest::StreamVariantsRequest(const StreamVariantsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.StreamVariantsRequest)
}

void StreamVariantsRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  variant_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_) + sizeof(end_));
  _cached_size_ = 0;
}

StreamVariantsRequest::~StreamVariantsRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.StreamVariantsRequest)
  SharedDtor();
}

void StreamVariantsRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  project_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  variant_set_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  reference_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void StreamVariantsRequest::ArenaDtor(void* object) {
  StreamVariantsRequest* _this = reinterpret_cast< StreamVariantsRequest* >(object);
  (void)_this;
}
void StreamVariantsRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StreamVariantsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamVariantsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamVariantsRequest_descriptor_;
}

const StreamVariantsRequest& StreamVariantsRequest::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<StreamVariantsRequest> StreamVariantsRequest_default_instance_;

StreamVariantsRequest* StreamVariantsRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<StreamVariantsRequest>(arena);
}

void StreamVariantsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.StreamVariantsRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StreamVariantsRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StreamVariantsRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(start_, end_);
  project_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  variant_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  reference_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef ZR_HELPER_
#undef ZR_

  call_set_ids_.Clear();
}

bool StreamVariantsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.StreamVariantsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string project_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.StreamVariantsRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_variant_set_id;
        break;
      }

      // optional string variant_set_id = 2;
      case 2: {
        if (tag == 18) {
         parse_variant_set_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_variant_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->variant_set_id().data(), this->variant_set_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.StreamVariantsRequest.variant_set_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_call_set_ids;
        break;
      }

      // repeated string call_set_ids = 3;
      case 3: {
        if (tag == 26) {
         parse_call_set_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_call_set_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->call_set_ids(this->call_set_ids_size() - 1).data(),
            this->call_set_ids(this->call_set_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.StreamVariantsRequest.call_set_ids"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_call_set_ids;
        if (input->ExpectTag(34)) goto parse_reference_name;
        break;
      }

      // optional string reference_name = 4;
      case 4: {
        if (tag == 34) {
         parse_reference_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_name().data(), this->reference_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.StreamVariantsRequest.reference_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_start;
        break;
      }

      // optional int64 start = 5;
      case 5: {
        if (tag == 40) {
         parse_start:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_end;
        break;
      }

      // optional int64 end = 6;
      case 6: {
        if (tag == 48) {
         parse_end:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.StreamVariantsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.StreamVariantsRequest)
  return false;
#undef DO_
}

void StreamVariantsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.StreamVariantsRequest)
  // optional string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.StreamVariantsRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // optional string variant_set_id = 2;
  if (this->variant_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_id().data(), this->variant_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.StreamVariantsRequest.variant_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->variant_set_id(), output);
  }

  // repeated string call_set_ids = 3;
  for (int i = 0; i < this->call_set_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_set_ids(i).data(), this->call_set_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.StreamVariantsRequest.call_set_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->call_set_ids(i), output);
  }

  // optional string reference_name = 4;
  if (this->reference_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_name().data(), this->reference_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.StreamVariantsRequest.reference_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->reference_name(), output);
  }

  // optional int64 start = 5;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->start(), output);
  }

  // optional int64 end = 6;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->end(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.StreamVariantsRequest)
}

::google::protobuf::uint8* StreamVariantsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.StreamVariantsRequest)
  // optional string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.StreamVariantsRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // optional string variant_set_id = 2;
  if (this->variant_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_id().data(), this->variant_set_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.StreamVariantsRequest.variant_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->variant_set_id(), target);
  }

  // repeated string call_set_ids = 3;
  for (int i = 0; i < this->call_set_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_set_ids(i).data(), this->call_set_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.StreamVariantsRequest.call_set_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->call_set_ids(i), target);
  }

  // optional string reference_name = 4;
  if (this->reference_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_name().data(), this->reference_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.StreamVariantsRequest.reference_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->reference_name(), target);
  }

  // optional int64 start = 5;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->start(), target);
  }

  // optional int64 end = 6;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->end(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.StreamVariantsRequest)
  return target;
}

size_t StreamVariantsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.StreamVariantsRequest)
  size_t total_size = 0;

  // optional string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // optional string variant_set_id = 2;
  if (this->variant_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->variant_set_id());
  }

  // optional string reference_name = 4;
  if (this->reference_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference_name());
  }

  // optional int64 start = 5;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start());
  }

  // optional int64 end = 6;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end());
  }

  // repeated string call_set_ids = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->call_set_ids_size());
  for (int i = 0; i < this->call_set_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->call_set_ids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamVariantsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.StreamVariantsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StreamVariantsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamVariantsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.StreamVariantsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.StreamVariantsRequest)
    UnsafeMergeFrom(*source);
  }
}

void StreamVariantsRequest::MergeFrom(const StreamVariantsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.StreamVariantsRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void StreamVariantsRequest::UnsafeMergeFrom(const StreamVariantsRequest& from) {
  GOOGLE_DCHECK(&from != this);
  call_set_ids_.UnsafeMergeFrom(from.call_set_ids_);
  if (from.project_id().size() > 0) {
    set_project_id(from.project_id());
  }
  if (from.variant_set_id().size() > 0) {
    set_variant_set_id(from.variant_set_id());
  }
  if (from.reference_name().size() > 0) {
    set_reference_name(from.reference_name());
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
}

void StreamVariantsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.StreamVariantsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamVariantsRequest::CopyFrom(const StreamVariantsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.StreamVariantsRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool StreamVariantsRequest::IsInitialized() const {

  return true;
}

void StreamVariantsRequest::Swap(StreamVariantsRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamVariantsRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void StreamVariantsRequest::UnsafeArenaSwap(StreamVariantsRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamVariantsRequest::InternalSwap(StreamVariantsRequest* other) {
  project_id_.Swap(&other->project_id_);
  variant_set_id_.Swap(&other->variant_set_id_);
  call_set_ids_.UnsafeArenaSwap(&other->call_set_ids_);
  reference_name_.Swap(&other->reference_name_);
  std::swap(start_, other->start_);
  std::swap(end_, other->end_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamVariantsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamVariantsRequest_descriptor_;
  metadata.reflection = StreamVariantsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamVariantsRequest

// optional string project_id = 1;
void StreamVariantsRequest::clear_project_id() {
  project_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& StreamVariantsRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.StreamVariantsRequest.project_id)
  return project_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StreamVariantsRequest::set_project_id(const ::std::string& value) {
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.StreamVariantsRequest.project_id)
}
void StreamVariantsRequest::set_project_id(const char* value) {
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.StreamVariantsRequest.project_id)
}
void StreamVariantsRequest::set_project_id(const char* value,
    size_t size) {
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.StreamVariantsRequest.project_id)
}
::std::string* StreamVariantsRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.StreamVariantsRequest.project_id)
  return project_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamVariantsRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.StreamVariantsRequest.project_id)
  
  return project_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamVariantsRequest::unsafe_arena_release_project_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.StreamVariantsRequest.project_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return project_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void StreamVariantsRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.StreamVariantsRequest.project_id)
}
void StreamVariantsRequest::unsafe_arena_set_allocated_project_id(
    ::std::string* project_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      project_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.StreamVariantsRequest.project_id)
}

// optional string variant_set_id = 2;
void StreamVariantsRequest::clear_variant_set_id() {
  variant_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& StreamVariantsRequest::variant_set_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.StreamVariantsRequest.variant_set_id)
  return variant_set_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StreamVariantsRequest::set_variant_set_id(const ::std::string& value) {
  
  variant_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.StreamVariantsRequest.variant_set_id)
}
void StreamVariantsRequest::set_variant_set_id(const char* value) {
  
  variant_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.StreamVariantsRequest.variant_set_id)
}
void StreamVariantsRequest::set_variant_set_id(const char* value,
    size_t size) {
  
  variant_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.StreamVariantsRequest.variant_set_id)
}
::std::string* StreamVariantsRequest::mutable_variant_set_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.StreamVariantsRequest.variant_set_id)
  return variant_set_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamVariantsRequest::release_variant_set_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.StreamVariantsRequest.variant_set_id)
  
  return variant_set_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamVariantsRequest::unsafe_arena_release_variant_set_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.StreamVariantsRequest.variant_set_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return variant_set_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void StreamVariantsRequest::set_allocated_variant_set_id(::std::string* variant_set_id) {
  if (variant_set_id != NULL) {
    
  } else {
    
  }
  variant_set_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), variant_set_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.StreamVariantsRequest.variant_set_id)
}
void StreamVariantsRequest::unsafe_arena_set_allocated_variant_set_id(
    ::std::string* variant_set_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (variant_set_id != NULL) {
    
  } else {
    
  }
  variant_set_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      variant_set_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.StreamVariantsRequest.variant_set_id)
}

// repeated string call_set_ids = 3;
int StreamVariantsRequest::call_set_ids_size() const {
  return call_set_ids_.size();
}
void StreamVariantsRequest::clear_call_set_ids() {
  call_set_ids_.Clear();
}
const ::std::string& StreamVariantsRequest::call_set_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.StreamVariantsRequest.call_set_ids)
  return call_set_ids_.Get(index);
}
::std::string* StreamVariantsRequest::mutable_call_set_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.StreamVariantsRequest.call_set_ids)
  return call_set_ids_.Mutable(index);
}
void StreamVariantsRequest::set_call_set_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1.StreamVariantsRequest.call_set_ids)
  call_set_ids_.Mutable(index)->assign(value);
}
void StreamVariantsRequest::set_call_set_ids(int index, const char* value) {
  call_set_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.StreamVariantsRequest.call_set_ids)
}
void StreamVariantsRequest::set_call_set_ids(int index, const char* value, size_t size) {
  call_set_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.StreamVariantsRequest.call_set_ids)
}
::std::string* StreamVariantsRequest::add_call_set_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1.StreamVariantsRequest.call_set_ids)
  return call_set_ids_.Add();
}
void StreamVariantsRequest::add_call_set_ids(const ::std::string& value) {
  call_set_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1.StreamVariantsRequest.call_set_ids)
}
void StreamVariantsRequest::add_call_set_ids(const char* value) {
  call_set_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1.StreamVariantsRequest.call_set_ids)
}
void StreamVariantsRequest::add_call_set_ids(const char* value, size_t size) {
  call_set_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1.StreamVariantsRequest.call_set_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
StreamVariantsRequest::call_set_ids() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.StreamVariantsRequest.call_set_ids)
  return call_set_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
StreamVariantsRequest::mutable_call_set_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.StreamVariantsRequest.call_set_ids)
  return &call_set_ids_;
}

// optional string reference_name = 4;
void StreamVariantsRequest::clear_reference_name() {
  reference_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& StreamVariantsRequest::reference_name() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.StreamVariantsRequest.reference_name)
  return reference_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StreamVariantsRequest::set_reference_name(const ::std::string& value) {
  
  reference_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.StreamVariantsRequest.reference_name)
}
void StreamVariantsRequest::set_reference_name(const char* value) {
  
  reference_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.StreamVariantsRequest.reference_name)
}
void StreamVariantsRequest::set_reference_name(const char* value,
    size_t size) {
  
  reference_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.StreamVariantsRequest.reference_name)
}
::std::string* StreamVariantsRequest::mutable_reference_name() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.StreamVariantsRequest.reference_name)
  return reference_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamVariantsRequest::release_reference_name() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.StreamVariantsRequest.reference_name)
  
  return reference_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamVariantsRequest::unsafe_arena_release_reference_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.StreamVariantsRequest.reference_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return reference_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void StreamVariantsRequest::set_allocated_reference_name(::std::string* reference_name) {
  if (reference_name != NULL) {
    
  } else {
    
  }
  reference_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.StreamVariantsRequest.reference_name)
}
void StreamVariantsRequest::unsafe_arena_set_allocated_reference_name(
    ::std::string* reference_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reference_name != NULL) {
    
  } else {
    
  }
  reference_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reference_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.StreamVariantsRequest.reference_name)
}

// optional int64 start = 5;
void StreamVariantsRequest::clear_start() {
  start_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 StreamVariantsRequest::start() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.StreamVariantsRequest.start)
  return start_;
}
void StreamVariantsRequest::set_start(::google::protobuf::int64 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.StreamVariantsRequest.start)
}

// optional int64 end = 6;
void StreamVariantsRequest::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 StreamVariantsRequest::end() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.StreamVariantsRequest.end)
  return end_;
}
void StreamVariantsRequest::set_end(::google::protobuf::int64 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.StreamVariantsRequest.end)
}

inline const StreamVariantsRequest* StreamVariantsRequest::internal_default_instance() {
  return &StreamVariantsRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamVariantsResponse::kVariantsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamVariantsResponse::StreamVariantsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.StreamVariantsResponse)
}
StreamVariantsResponse::StreamVariantsResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  variants_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.StreamVariantsResponse)
}

void StreamVariantsResponse::InitAsDefaultInstance() {
}

StreamVariantsResponse::StreamVariantsResponse(const StreamVariantsResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.StreamVariantsResponse)
}

void StreamVariantsResponse::SharedCtor() {
  _cached_size_ = 0;
}

StreamVariantsResponse::~StreamVariantsResponse() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.StreamVariantsResponse)
  SharedDtor();
}

void StreamVariantsResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void StreamVariantsResponse::ArenaDtor(void* object) {
  StreamVariantsResponse* _this = reinterpret_cast< StreamVariantsResponse* >(object);
  (void)_this;
}
void StreamVariantsResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StreamVariantsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamVariantsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamVariantsResponse_descriptor_;
}

const StreamVariantsResponse& StreamVariantsResponse::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fvariants_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<StreamVariantsResponse> StreamVariantsResponse_default_instance_;

StreamVariantsResponse* StreamVariantsResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<StreamVariantsResponse>(arena);
}

void StreamVariantsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.StreamVariantsResponse)
  variants_.Clear();
}

bool StreamVariantsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.StreamVariantsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.genomics.v1.Variant variants = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_variants:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_variants()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_variants;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.StreamVariantsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.StreamVariantsResponse)
  return false;
#undef DO_
}

void StreamVariantsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.StreamVariantsResponse)
  // repeated .google.genomics.v1.Variant variants = 1;
  for (unsigned int i = 0, n = this->variants_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->variants(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.StreamVariantsResponse)
}

::google::protobuf::uint8* StreamVariantsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.StreamVariantsResponse)
  // repeated .google.genomics.v1.Variant variants = 1;
  for (unsigned int i = 0, n = this->variants_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->variants(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.StreamVariantsResponse)
  return target;
}

size_t StreamVariantsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.StreamVariantsResponse)
  size_t total_size = 0;

  // repeated .google.genomics.v1.Variant variants = 1;
  {
    unsigned int count = this->variants_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->variants(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamVariantsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.StreamVariantsResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StreamVariantsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamVariantsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.StreamVariantsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.StreamVariantsResponse)
    UnsafeMergeFrom(*source);
  }
}

void StreamVariantsResponse::MergeFrom(const StreamVariantsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.StreamVariantsResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void StreamVariantsResponse::UnsafeMergeFrom(const StreamVariantsResponse& from) {
  GOOGLE_DCHECK(&from != this);
  variants_.MergeFrom(from.variants_);
}

void StreamVariantsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.StreamVariantsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamVariantsResponse::CopyFrom(const StreamVariantsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.StreamVariantsResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool StreamVariantsResponse::IsInitialized() const {

  return true;
}

void StreamVariantsResponse::Swap(StreamVariantsResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamVariantsResponse temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void StreamVariantsResponse::UnsafeArenaSwap(StreamVariantsResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamVariantsResponse::InternalSwap(StreamVariantsResponse* other) {
  variants_.UnsafeArenaSwap(&other->variants_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamVariantsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamVariantsResponse_descriptor_;
  metadata.reflection = StreamVariantsResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamVariantsResponse

// repeated .google.genomics.v1.Variant variants = 1;
int StreamVariantsResponse::variants_size() const {
  return variants_.size();
}
void StreamVariantsResponse::clear_variants() {
  variants_.Clear();
}
const ::google::genomics::v1::Variant& StreamVariantsResponse::variants(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.StreamVariantsResponse.variants)
  return variants_.Get(index);
}
::google::genomics::v1::Variant* StreamVariantsResponse::mutable_variants(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.StreamVariantsResponse.variants)
  return variants_.Mutable(index);
}
::google::genomics::v1::Variant* StreamVariantsResponse::add_variants() {
  // @@protoc_insertion_point(field_add:google.genomics.v1.StreamVariantsResponse.variants)
  return variants_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::genomics::v1::Variant >*
StreamVariantsResponse::mutable_variants() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.StreamVariantsResponse.variants)
  return &variants_;
}
const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1::Variant >&
StreamVariantsResponse::variants() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.StreamVariantsResponse.variants)
  return variants_;
}

inline const StreamVariantsResponse* StreamVariantsResponse::internal_default_instance() {
  return &StreamVariantsResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace genomics
}  // namespace google

// @@protoc_insertion_point(global_scope)
