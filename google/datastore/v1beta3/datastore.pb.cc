// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/datastore/v1beta3/datastore.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/datastore/v1beta3/datastore.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace datastore {
namespace v1beta3 {

namespace {

const ::google::protobuf::Descriptor* LookupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LookupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LookupResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LookupResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RunQueryRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunQueryRequest_reflection_ = NULL;
struct RunQueryRequestOneofInstance {
  const ::google::datastore::v1beta3::Query* query_;
  const ::google::datastore::v1beta3::GqlQuery* gql_query_;
}* RunQueryRequest_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* RunQueryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunQueryResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BeginTransactionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BeginTransactionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BeginTransactionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BeginTransactionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RollbackRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RollbackRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RollbackResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RollbackResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommitRequest_reflection_ = NULL;
struct CommitRequestOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr transaction_;
}* CommitRequest_default_oneof_instance_ = NULL;
const ::google::protobuf::EnumDescriptor* CommitRequest_Mode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CommitResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommitResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllocateIdsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllocateIdsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllocateIdsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllocateIdsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mutation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mutation_reflection_ = NULL;
struct MutationOneofInstance {
  const ::google::datastore::v1beta3::Entity* insert_;
  const ::google::datastore::v1beta3::Entity* update_;
  const ::google::datastore::v1beta3::Entity* upsert_;
  const ::google::datastore::v1beta3::Key* delete__;
  ::google::protobuf::int64 base_version_;
}* Mutation_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* MutationResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MutationResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadOptions_reflection_ = NULL;
struct ReadOptionsOneofInstance {
  int read_consistency_;
  ::google::protobuf::internal::ArenaStringPtr transaction_;
}* ReadOptions_default_oneof_instance_ = NULL;
const ::google::protobuf::EnumDescriptor* ReadOptions_ReadConsistency_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_google_2fdatastore_2fv1beta3_2fdatastore_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_google_2fdatastore_2fv1beta3_2fdatastore_2eproto() {
  protobuf_AddDesc_google_2fdatastore_2fv1beta3_2fdatastore_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "google/datastore/v1beta3/datastore.proto");
  GOOGLE_CHECK(file != NULL);
  LookupRequest_descriptor_ = file->message_type(0);
  static const int LookupRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupRequest, project_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupRequest, read_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupRequest, keys_),
  };
  LookupRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LookupRequest_descriptor_,
      LookupRequest::internal_default_instance(),
      LookupRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(LookupRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupRequest, _internal_metadata_));
  LookupResponse_descriptor_ = file->message_type(1);
  static const int LookupResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupResponse, found_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupResponse, missing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupResponse, deferred_),
  };
  LookupResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LookupResponse_descriptor_,
      LookupResponse::internal_default_instance(),
      LookupResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(LookupResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupResponse, _internal_metadata_));
  RunQueryRequest_descriptor_ = file->message_type(2);
  static const int RunQueryRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunQueryRequest, project_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunQueryRequest, partition_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunQueryRequest, read_options_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RunQueryRequest_default_oneof_instance_, query_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RunQueryRequest_default_oneof_instance_, gql_query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunQueryRequest, query_type_),
  };
  RunQueryRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RunQueryRequest_descriptor_,
      RunQueryRequest::internal_default_instance(),
      RunQueryRequest_offsets_,
      -1,
      -1,
      -1,
      RunQueryRequest_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunQueryRequest, _oneof_case_[0]),
      sizeof(RunQueryRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunQueryRequest, _internal_metadata_));
  RunQueryResponse_descriptor_ = file->message_type(3);
  static const int RunQueryResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunQueryResponse, batch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunQueryResponse, query_),
  };
  RunQueryResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RunQueryResponse_descriptor_,
      RunQueryResponse::internal_default_instance(),
      RunQueryResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(RunQueryResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunQueryResponse, _internal_metadata_));
  BeginTransactionRequest_descriptor_ = file->message_type(4);
  static const int BeginTransactionRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginTransactionRequest, project_id_),
  };
  BeginTransactionRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BeginTransactionRequest_descriptor_,
      BeginTransactionRequest::internal_default_instance(),
      BeginTransactionRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(BeginTransactionRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginTransactionRequest, _internal_metadata_));
  BeginTransactionResponse_descriptor_ = file->message_type(5);
  static const int BeginTransactionResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginTransactionResponse, transaction_),
  };
  BeginTransactionResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BeginTransactionResponse_descriptor_,
      BeginTransactionResponse::internal_default_instance(),
      BeginTransactionResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(BeginTransactionResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginTransactionResponse, _internal_metadata_));
  RollbackRequest_descriptor_ = file->message_type(6);
  static const int RollbackRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollbackRequest, project_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollbackRequest, transaction_),
  };
  RollbackRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RollbackRequest_descriptor_,
      RollbackRequest::internal_default_instance(),
      RollbackRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(RollbackRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollbackRequest, _internal_metadata_));
  RollbackResponse_descriptor_ = file->message_type(7);
  static const int RollbackResponse_offsets_[1] = {
  };
  RollbackResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RollbackResponse_descriptor_,
      RollbackResponse::internal_default_instance(),
      RollbackResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(RollbackResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollbackResponse, _internal_metadata_));
  CommitRequest_descriptor_ = file->message_type(8);
  static const int CommitRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitRequest, project_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitRequest, mode_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CommitRequest_default_oneof_instance_, transaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitRequest, mutations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitRequest, transaction_selector_),
  };
  CommitRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CommitRequest_descriptor_,
      CommitRequest::internal_default_instance(),
      CommitRequest_offsets_,
      -1,
      -1,
      -1,
      CommitRequest_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitRequest, _oneof_case_[0]),
      sizeof(CommitRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitRequest, _internal_metadata_));
  CommitRequest_Mode_descriptor_ = CommitRequest_descriptor_->enum_type(0);
  CommitResponse_descriptor_ = file->message_type(9);
  static const int CommitResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitResponse, mutation_results_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitResponse, index_updates_),
  };
  CommitResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CommitResponse_descriptor_,
      CommitResponse::internal_default_instance(),
      CommitResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CommitResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitResponse, _internal_metadata_));
  AllocateIdsRequest_descriptor_ = file->message_type(10);
  static const int AllocateIdsRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocateIdsRequest, project_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocateIdsRequest, keys_),
  };
  AllocateIdsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AllocateIdsRequest_descriptor_,
      AllocateIdsRequest::internal_default_instance(),
      AllocateIdsRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(AllocateIdsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocateIdsRequest, _internal_metadata_));
  AllocateIdsResponse_descriptor_ = file->message_type(11);
  static const int AllocateIdsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocateIdsResponse, keys_),
  };
  AllocateIdsResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AllocateIdsResponse_descriptor_,
      AllocateIdsResponse::internal_default_instance(),
      AllocateIdsResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(AllocateIdsResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocateIdsResponse, _internal_metadata_));
  Mutation_descriptor_ = file->message_type(12);
  static const int Mutation_offsets_[7] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Mutation_default_oneof_instance_, insert_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Mutation_default_oneof_instance_, update_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Mutation_default_oneof_instance_, upsert_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Mutation_default_oneof_instance_, delete__),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Mutation_default_oneof_instance_, base_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation, conflict_detection_strategy_),
  };
  Mutation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Mutation_descriptor_,
      Mutation::internal_default_instance(),
      Mutation_offsets_,
      -1,
      -1,
      -1,
      Mutation_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation, _oneof_case_[0]),
      sizeof(Mutation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation, _internal_metadata_));
  MutationResult_descriptor_ = file->message_type(13);
  static const int MutationResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationResult, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationResult, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationResult, conflict_detected_),
  };
  MutationResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MutationResult_descriptor_,
      MutationResult::internal_default_instance(),
      MutationResult_offsets_,
      -1,
      -1,
      -1,
      sizeof(MutationResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationResult, _internal_metadata_));
  ReadOptions_descriptor_ = file->message_type(14);
  static const int ReadOptions_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReadOptions_default_oneof_instance_, read_consistency_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReadOptions_default_oneof_instance_, transaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOptions, consistency_type_),
  };
  ReadOptions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReadOptions_descriptor_,
      ReadOptions::internal_default_instance(),
      ReadOptions_offsets_,
      -1,
      -1,
      -1,
      ReadOptions_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOptions, _oneof_case_[0]),
      sizeof(ReadOptions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOptions, _internal_metadata_));
  ReadOptions_ReadConsistency_descriptor_ = ReadOptions_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_google_2fdatastore_2fv1beta3_2fdatastore_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LookupRequest_descriptor_, LookupRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LookupResponse_descriptor_, LookupResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RunQueryRequest_descriptor_, RunQueryRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RunQueryResponse_descriptor_, RunQueryResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BeginTransactionRequest_descriptor_, BeginTransactionRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BeginTransactionResponse_descriptor_, BeginTransactionResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RollbackRequest_descriptor_, RollbackRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RollbackResponse_descriptor_, RollbackResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CommitRequest_descriptor_, CommitRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CommitResponse_descriptor_, CommitResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AllocateIdsRequest_descriptor_, AllocateIdsRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AllocateIdsResponse_descriptor_, AllocateIdsResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Mutation_descriptor_, Mutation::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MutationResult_descriptor_, MutationResult::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReadOptions_descriptor_, ReadOptions::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_google_2fdatastore_2fv1beta3_2fdatastore_2eproto() {
  LookupRequest_default_instance_.Shutdown();
  delete LookupRequest_reflection_;
  LookupResponse_default_instance_.Shutdown();
  delete LookupResponse_reflection_;
  RunQueryRequest_default_instance_.Shutdown();
  delete RunQueryRequest_default_oneof_instance_;
  delete RunQueryRequest_reflection_;
  RunQueryResponse_default_instance_.Shutdown();
  delete RunQueryResponse_reflection_;
  BeginTransactionRequest_default_instance_.Shutdown();
  delete BeginTransactionRequest_reflection_;
  BeginTransactionResponse_default_instance_.Shutdown();
  delete BeginTransactionResponse_reflection_;
  RollbackRequest_default_instance_.Shutdown();
  delete RollbackRequest_reflection_;
  RollbackResponse_default_instance_.Shutdown();
  delete RollbackResponse_reflection_;
  CommitRequest_default_instance_.Shutdown();
  delete CommitRequest_default_oneof_instance_;
  delete CommitRequest_reflection_;
  CommitResponse_default_instance_.Shutdown();
  delete CommitResponse_reflection_;
  AllocateIdsRequest_default_instance_.Shutdown();
  delete AllocateIdsRequest_reflection_;
  AllocateIdsResponse_default_instance_.Shutdown();
  delete AllocateIdsResponse_reflection_;
  Mutation_default_instance_.Shutdown();
  delete Mutation_default_oneof_instance_;
  delete Mutation_reflection_;
  MutationResult_default_instance_.Shutdown();
  delete MutationResult_reflection_;
  ReadOptions_default_instance_.Shutdown();
  delete ReadOptions_default_oneof_instance_;
  delete ReadOptions_reflection_;
}

void protobuf_InitDefaults_google_2fdatastore_2fv1beta3_2fdatastore_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::api::protobuf_InitDefaults_google_2fapi_2fannotations_2eproto();
  ::google::datastore::v1beta3::protobuf_InitDefaults_google_2fdatastore_2fv1beta3_2fentity_2eproto();
  ::google::datastore::v1beta3::protobuf_InitDefaults_google_2fdatastore_2fv1beta3_2fquery_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  LookupRequest_default_instance_.DefaultConstruct();
  LookupResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  RunQueryRequest_default_instance_.DefaultConstruct();
  RunQueryRequest_default_oneof_instance_ = new RunQueryRequestOneofInstance();
  RunQueryResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  BeginTransactionRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  BeginTransactionResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  RollbackRequest_default_instance_.DefaultConstruct();
  RollbackResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CommitRequest_default_instance_.DefaultConstruct();
  CommitRequest_default_oneof_instance_ = new CommitRequestOneofInstance();
  CommitResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  AllocateIdsRequest_default_instance_.DefaultConstruct();
  AllocateIdsResponse_default_instance_.DefaultConstruct();
  Mutation_default_instance_.DefaultConstruct();
  Mutation_default_oneof_instance_ = new MutationOneofInstance();
  MutationResult_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ReadOptions_default_instance_.DefaultConstruct();
  ReadOptions_default_oneof_instance_ = new ReadOptionsOneofInstance();
  LookupRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  LookupResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  RunQueryRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  RunQueryResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  BeginTransactionRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  BeginTransactionResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  RollbackRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  RollbackResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  CommitRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  CommitResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  AllocateIdsRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  AllocateIdsResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  Mutation_default_instance_.get_mutable()->InitAsDefaultInstance();
  MutationResult_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReadOptions_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_google_2fdatastore_2fv1beta3_2fdatastore_2eproto_once_);
void protobuf_InitDefaults_google_2fdatastore_2fv1beta3_2fdatastore_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_google_2fdatastore_2fv1beta3_2fdatastore_2eproto_once_,
                 &protobuf_InitDefaults_google_2fdatastore_2fv1beta3_2fdatastore_2eproto_impl);
}
void protobuf_AddDesc_google_2fdatastore_2fv1beta3_2fdatastore_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_google_2fdatastore_2fv1beta3_2fdatastore_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n(google/datastore/v1beta3/datastore.pro"
    "to\022\030google.datastore.v1beta3\032\034google/api"
    "/annotations.proto\032%google/datastore/v1b"
    "eta3/entity.proto\032$google/datastore/v1be"
    "ta3/query.proto\"\215\001\n\rLookupRequest\022\022\n\npro"
    "ject_id\030\010 \001(\t\022;\n\014read_options\030\001 \001(\0132%.go"
    "ogle.datastore.v1beta3.ReadOptions\022+\n\004ke"
    "ys\030\003 \003(\0132\035.google.datastore.v1beta3.Key\""
    "\261\001\n\016LookupResponse\0225\n\005found\030\001 \003(\0132&.goog"
    "le.datastore.v1beta3.EntityResult\0227\n\007mis"
    "sing\030\002 \003(\0132&.google.datastore.v1beta3.En"
    "tityResult\022/\n\010deferred\030\003 \003(\0132\035.google.da"
    "tastore.v1beta3.Key\"\230\002\n\017RunQueryRequest\022"
    "\022\n\nproject_id\030\010 \001(\t\022;\n\014partition_id\030\002 \001("
    "\0132%.google.datastore.v1beta3.PartitionId"
    "\022;\n\014read_options\030\001 \001(\0132%.google.datastor"
    "e.v1beta3.ReadOptions\0220\n\005query\030\003 \001(\0132\037.g"
    "oogle.datastore.v1beta3.QueryH\000\0227\n\tgql_q"
    "uery\030\007 \001(\0132\".google.datastore.v1beta3.Gq"
    "lQueryH\000B\014\n\nquery_type\"}\n\020RunQueryRespon"
    "se\0229\n\005batch\030\001 \001(\0132*.google.datastore.v1b"
    "eta3.QueryResultBatch\022.\n\005query\030\002 \001(\0132\037.g"
    "oogle.datastore.v1beta3.Query\"-\n\027BeginTr"
    "ansactionRequest\022\022\n\nproject_id\030\010 \001(\t\"/\n\030"
    "BeginTransactionResponse\022\023\n\013transaction\030"
    "\001 \001(\014\":\n\017RollbackRequest\022\022\n\nproject_id\030\010"
    " \001(\t\022\023\n\013transaction\030\001 \001(\014\"\022\n\020RollbackRes"
    "ponse\"\215\002\n\rCommitRequest\022\022\n\nproject_id\030\010 "
    "\001(\t\022:\n\004mode\030\005 \001(\0162,.google.datastore.v1b"
    "eta3.CommitRequest.Mode\022\025\n\013transaction\030\001"
    " \001(\014H\000\0225\n\tmutations\030\006 \003(\0132\".google.datas"
    "tore.v1beta3.Mutation\"F\n\004Mode\022\024\n\020MODE_UN"
    "SPECIFIED\020\000\022\021\n\rTRANSACTIONAL\020\001\022\025\n\021NON_TR"
    "ANSACTIONAL\020\002B\026\n\024transaction_selector\"k\n"
    "\016CommitResponse\022B\n\020mutation_results\030\003 \003("
    "\0132(.google.datastore.v1beta3.MutationRes"
    "ult\022\025\n\rindex_updates\030\004 \001(\005\"U\n\022AllocateId"
    "sRequest\022\022\n\nproject_id\030\010 \001(\t\022+\n\004keys\030\001 \003"
    "(\0132\035.google.datastore.v1beta3.Key\"B\n\023All"
    "ocateIdsResponse\022+\n\004keys\030\001 \003(\0132\035.google."
    "datastore.v1beta3.Key\"\233\002\n\010Mutation\0222\n\006in"
    "sert\030\004 \001(\0132 .google.datastore.v1beta3.En"
    "tityH\000\0222\n\006update\030\005 \001(\0132 .google.datastor"
    "e.v1beta3.EntityH\000\0222\n\006upsert\030\006 \001(\0132 .goo"
    "gle.datastore.v1beta3.EntityH\000\022/\n\006delete"
    "\030\007 \001(\0132\035.google.datastore.v1beta3.KeyH\000\022"
    "\026\n\014base_version\030\010 \001(\003H\001B\013\n\toperationB\035\n\033"
    "conflict_detection_strategy\"h\n\016MutationR"
    "esult\022*\n\003key\030\003 \001(\0132\035.google.datastore.v1"
    "beta3.Key\022\017\n\007version\030\004 \001(\003\022\031\n\021conflict_d"
    "etected\030\005 \001(\010\"\332\001\n\013ReadOptions\022Q\n\020read_co"
    "nsistency\030\001 \001(\01625.google.datastore.v1bet"
    "a3.ReadOptions.ReadConsistencyH\000\022\025\n\013tran"
    "saction\030\002 \001(\014H\000\"M\n\017ReadConsistency\022 \n\034RE"
    "AD_CONSISTENCY_UNSPECIFIED\020\000\022\n\n\006STRONG\020\001"
    "\022\014\n\010EVENTUAL\020\002B\022\n\020consistency_type2\267\007\n\tD"
    "atastore\022\215\001\n\006Lookup\022\'.google.datastore.v"
    "1beta3.LookupRequest\032(.google.datastore."
    "v1beta3.LookupResponse\"0\202\323\344\223\002*\"%/v1beta3"
    "/projects/{project_id}:lookup:\001*\022\225\001\n\010Run"
    "Query\022).google.datastore.v1beta3.RunQuer"
    "yRequest\032*.google.datastore.v1beta3.RunQ"
    "ueryResponse\"2\202\323\344\223\002,\"\'/v1beta3/projects/"
    "{project_id}:runQuery:\001*\022\265\001\n\020BeginTransa"
    "ction\0221.google.datastore.v1beta3.BeginTr"
    "ansactionRequest\0322.google.datastore.v1be"
    "ta3.BeginTransactionResponse\":\202\323\344\223\0024\"//v"
    "1beta3/projects/{project_id}:beginTransa"
    "ction:\001*\022\215\001\n\006Commit\022\'.google.datastore.v"
    "1beta3.CommitRequest\032(.google.datastore."
    "v1beta3.CommitResponse\"0\202\323\344\223\002*\"%/v1beta3"
    "/projects/{project_id}:commit:\001*\022\225\001\n\010Rol"
    "lback\022).google.datastore.v1beta3.Rollbac"
    "kRequest\032*.google.datastore.v1beta3.Roll"
    "backResponse\"2\202\323\344\223\002,\"\'/v1beta3/projects/"
    "{project_id}:rollback:\001*\022\241\001\n\013AllocateIds"
    "\022,.google.datastore.v1beta3.AllocateIdsR"
    "equest\032-.google.datastore.v1beta3.Alloca"
    "teIdsResponse\"5\202\323\344\223\002/\"*/v1beta3/projects"
    "/{project_id}:allocateIds:\001*B\224\001\n\034com.goo"
    "gle.datastore.v1beta3B\016DatastoreProtoP\001Z"
    "Agoogle.golang.org/genproto/googleapis/d"
    "atastore/v1beta3;datastore\252\002\036Google.Clou"
    "d.Datastore.V1Beta3b\006proto3", 3347);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/datastore/v1beta3/datastore.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_AddDesc_google_2fapi_2fannotations_2eproto();
  ::google::datastore::v1beta3::protobuf_AddDesc_google_2fdatastore_2fv1beta3_2fentity_2eproto();
  ::google::datastore::v1beta3::protobuf_AddDesc_google_2fdatastore_2fv1beta3_2fquery_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_google_2fdatastore_2fv1beta3_2fdatastore_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_google_2fdatastore_2fv1beta3_2fdatastore_2eproto_once_);
void protobuf_AddDesc_google_2fdatastore_2fv1beta3_2fdatastore_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_google_2fdatastore_2fv1beta3_2fdatastore_2eproto_once_,
                 &protobuf_AddDesc_google_2fdatastore_2fv1beta3_2fdatastore_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_google_2fdatastore_2fv1beta3_2fdatastore_2eproto {
  StaticDescriptorInitializer_google_2fdatastore_2fv1beta3_2fdatastore_2eproto() {
    protobuf_AddDesc_google_2fdatastore_2fv1beta3_2fdatastore_2eproto();
  }
} static_descriptor_initializer_google_2fdatastore_2fv1beta3_2fdatastore_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LookupRequest::kProjectIdFieldNumber;
const int LookupRequest::kReadOptionsFieldNumber;
const int LookupRequest::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LookupRequest::LookupRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fdatastore_2fv1beta3_2fdatastore_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.datastore.v1beta3.LookupRequest)
}

void LookupRequest::InitAsDefaultInstance() {
  read_options_ = const_cast< ::google::datastore::v1beta3::ReadOptions*>(
      ::google::datastore::v1beta3::ReadOptions::internal_default_instance());
}

LookupRequest::LookupRequest(const LookupRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.datastore.v1beta3.LookupRequest)
}

void LookupRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  read_options_ = NULL;
  _cached_size_ = 0;
}

LookupRequest::~LookupRequest() {
  // @@protoc_insertion_point(destructor:google.datastore.v1beta3.LookupRequest)
  SharedDtor();
}

void LookupRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &LookupRequest_default_instance_.get()) {
    delete read_options_;
  }
}

void LookupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LookupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LookupRequest_descriptor_;
}

const LookupRequest& LookupRequest::default_instance() {
  protobuf_InitDefaults_google_2fdatastore_2fv1beta3_2fdatastore_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LookupRequest> LookupRequest_default_instance_;

LookupRequest* LookupRequest::New(::google::protobuf::Arena* arena) const {
  LookupRequest* n = new LookupRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LookupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.datastore.v1beta3.LookupRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && read_options_ != NULL) delete read_options_;
  read_options_ = NULL;
  keys_.Clear();
}

bool LookupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.datastore.v1beta3.LookupRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.datastore.v1beta3.ReadOptions read_options = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_read_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_keys;
        break;
      }

      // repeated .google.datastore.v1beta3.Key keys = 3;
      case 3: {
        if (tag == 26) {
         parse_keys:
          DO_(input->IncrementRecursionDepth());
         parse_loop_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_keys;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(66)) goto parse_project_id;
        break;
      }

      // optional string project_id = 8;
      case 8: {
        if (tag == 66) {
         parse_project_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.datastore.v1beta3.LookupRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.datastore.v1beta3.LookupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.datastore.v1beta3.LookupRequest)
  return false;
#undef DO_
}

void LookupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.datastore.v1beta3.LookupRequest)
  // optional .google.datastore.v1beta3.ReadOptions read_options = 1;
  if (this->has_read_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->read_options_, output);
  }

  // repeated .google.datastore.v1beta3.Key keys = 3;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->keys(i), output);
  }

  // optional string project_id = 8;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.datastore.v1beta3.LookupRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->project_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.datastore.v1beta3.LookupRequest)
}

::google::protobuf::uint8* LookupRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.datastore.v1beta3.LookupRequest)
  // optional .google.datastore.v1beta3.ReadOptions read_options = 1;
  if (this->has_read_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->read_options_, false, target);
  }

  // repeated .google.datastore.v1beta3.Key keys = 3;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->keys(i), false, target);
  }

  // optional string project_id = 8;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.datastore.v1beta3.LookupRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->project_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.datastore.v1beta3.LookupRequest)
  return target;
}

size_t LookupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.datastore.v1beta3.LookupRequest)
  size_t total_size = 0;

  // optional string project_id = 8;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // optional .google.datastore.v1beta3.ReadOptions read_options = 1;
  if (this->has_read_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->read_options_);
  }

  // repeated .google.datastore.v1beta3.Key keys = 3;
  {
    unsigned int count = this->keys_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keys(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LookupRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.datastore.v1beta3.LookupRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LookupRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LookupRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.datastore.v1beta3.LookupRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.datastore.v1beta3.LookupRequest)
    UnsafeMergeFrom(*source);
  }
}

void LookupRequest::MergeFrom(const LookupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.datastore.v1beta3.LookupRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LookupRequest::UnsafeMergeFrom(const LookupRequest& from) {
  GOOGLE_DCHECK(&from != this);
  keys_.MergeFrom(from.keys_);
  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.has_read_options()) {
    mutable_read_options()->::google::datastore::v1beta3::ReadOptions::MergeFrom(from.read_options());
  }
}

void LookupRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.datastore.v1beta3.LookupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LookupRequest::CopyFrom(const LookupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.datastore.v1beta3.LookupRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LookupRequest::IsInitialized() const {

  return true;
}

void LookupRequest::Swap(LookupRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LookupRequest::InternalSwap(LookupRequest* other) {
  project_id_.Swap(&other->project_id_);
  std::swap(read_options_, other->read_options_);
  keys_.UnsafeArenaSwap(&other->keys_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LookupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LookupRequest_descriptor_;
  metadata.reflection = LookupRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LookupRequest

// optional string project_id = 8;
void LookupRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LookupRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.LookupRequest.project_id)
  return project_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LookupRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.LookupRequest.project_id)
}
void LookupRequest::set_project_id(const char* value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1beta3.LookupRequest.project_id)
}
void LookupRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1beta3.LookupRequest.project_id)
}
::std::string* LookupRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.LookupRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LookupRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.LookupRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LookupRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.LookupRequest.project_id)
}

// optional .google.datastore.v1beta3.ReadOptions read_options = 1;
bool LookupRequest::has_read_options() const {
  return this != internal_default_instance() && read_options_ != NULL;
}
void LookupRequest::clear_read_options() {
  if (GetArenaNoVirtual() == NULL && read_options_ != NULL) delete read_options_;
  read_options_ = NULL;
}
const ::google::datastore::v1beta3::ReadOptions& LookupRequest::read_options() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.LookupRequest.read_options)
  return read_options_ != NULL ? *read_options_
                         : *::google::datastore::v1beta3::ReadOptions::internal_default_instance();
}
::google::datastore::v1beta3::ReadOptions* LookupRequest::mutable_read_options() {
  
  if (read_options_ == NULL) {
    read_options_ = new ::google::datastore::v1beta3::ReadOptions;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.LookupRequest.read_options)
  return read_options_;
}
::google::datastore::v1beta3::ReadOptions* LookupRequest::release_read_options() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.LookupRequest.read_options)
  
  ::google::datastore::v1beta3::ReadOptions* temp = read_options_;
  read_options_ = NULL;
  return temp;
}
void LookupRequest::set_allocated_read_options(::google::datastore::v1beta3::ReadOptions* read_options) {
  delete read_options_;
  read_options_ = read_options;
  if (read_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.LookupRequest.read_options)
}

// repeated .google.datastore.v1beta3.Key keys = 3;
int LookupRequest::keys_size() const {
  return keys_.size();
}
void LookupRequest::clear_keys() {
  keys_.Clear();
}
const ::google::datastore::v1beta3::Key& LookupRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.LookupRequest.keys)
  return keys_.Get(index);
}
::google::datastore::v1beta3::Key* LookupRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.LookupRequest.keys)
  return keys_.Mutable(index);
}
::google::datastore::v1beta3::Key* LookupRequest::add_keys() {
  // @@protoc_insertion_point(field_add:google.datastore.v1beta3.LookupRequest.keys)
  return keys_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Key >*
LookupRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.v1beta3.LookupRequest.keys)
  return &keys_;
}
const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Key >&
LookupRequest::keys() const {
  // @@protoc_insertion_point(field_list:google.datastore.v1beta3.LookupRequest.keys)
  return keys_;
}

inline const LookupRequest* LookupRequest::internal_default_instance() {
  return &LookupRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LookupResponse::kFoundFieldNumber;
const int LookupResponse::kMissingFieldNumber;
const int LookupResponse::kDeferredFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LookupResponse::LookupResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fdatastore_2fv1beta3_2fdatastore_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.datastore.v1beta3.LookupResponse)
}

void LookupResponse::InitAsDefaultInstance() {
}

LookupResponse::LookupResponse(const LookupResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.datastore.v1beta3.LookupResponse)
}

void LookupResponse::SharedCtor() {
  _cached_size_ = 0;
}

LookupResponse::~LookupResponse() {
  // @@protoc_insertion_point(destructor:google.datastore.v1beta3.LookupResponse)
  SharedDtor();
}

void LookupResponse::SharedDtor() {
}

void LookupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LookupResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LookupResponse_descriptor_;
}

const LookupResponse& LookupResponse::default_instance() {
  protobuf_InitDefaults_google_2fdatastore_2fv1beta3_2fdatastore_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LookupResponse> LookupResponse_default_instance_;

LookupResponse* LookupResponse::New(::google::protobuf::Arena* arena) const {
  LookupResponse* n = new LookupResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LookupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.datastore.v1beta3.LookupResponse)
  found_.Clear();
  missing_.Clear();
  deferred_.Clear();
}

bool LookupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.datastore.v1beta3.LookupResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.datastore.v1beta3.EntityResult found = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_found:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_found()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_found;
        if (input->ExpectTag(18)) goto parse_loop_missing;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .google.datastore.v1beta3.EntityResult missing = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_missing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_missing()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_missing;
        if (input->ExpectTag(26)) goto parse_loop_deferred;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .google.datastore.v1beta3.Key deferred = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_deferred:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_deferred()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_deferred;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.datastore.v1beta3.LookupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.datastore.v1beta3.LookupResponse)
  return false;
#undef DO_
}

void LookupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.datastore.v1beta3.LookupResponse)
  // repeated .google.datastore.v1beta3.EntityResult found = 1;
  for (unsigned int i = 0, n = this->found_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->found(i), output);
  }

  // repeated .google.datastore.v1beta3.EntityResult missing = 2;
  for (unsigned int i = 0, n = this->missing_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->missing(i), output);
  }

  // repeated .google.datastore.v1beta3.Key deferred = 3;
  for (unsigned int i = 0, n = this->deferred_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->deferred(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.datastore.v1beta3.LookupResponse)
}

::google::protobuf::uint8* LookupResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.datastore.v1beta3.LookupResponse)
  // repeated .google.datastore.v1beta3.EntityResult found = 1;
  for (unsigned int i = 0, n = this->found_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->found(i), false, target);
  }

  // repeated .google.datastore.v1beta3.EntityResult missing = 2;
  for (unsigned int i = 0, n = this->missing_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->missing(i), false, target);
  }

  // repeated .google.datastore.v1beta3.Key deferred = 3;
  for (unsigned int i = 0, n = this->deferred_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->deferred(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.datastore.v1beta3.LookupResponse)
  return target;
}

size_t LookupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.datastore.v1beta3.LookupResponse)
  size_t total_size = 0;

  // repeated .google.datastore.v1beta3.EntityResult found = 1;
  {
    unsigned int count = this->found_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->found(i));
    }
  }

  // repeated .google.datastore.v1beta3.EntityResult missing = 2;
  {
    unsigned int count = this->missing_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->missing(i));
    }
  }

  // repeated .google.datastore.v1beta3.Key deferred = 3;
  {
    unsigned int count = this->deferred_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deferred(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LookupResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.datastore.v1beta3.LookupResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LookupResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LookupResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.datastore.v1beta3.LookupResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.datastore.v1beta3.LookupResponse)
    UnsafeMergeFrom(*source);
  }
}

void LookupResponse::MergeFrom(const LookupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.datastore.v1beta3.LookupResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LookupResponse::UnsafeMergeFrom(const LookupResponse& from) {
  GOOGLE_DCHECK(&from != this);
  found_.MergeFrom(from.found_);
  missing_.MergeFrom(from.missing_);
  deferred_.MergeFrom(from.deferred_);
}

void LookupResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.datastore.v1beta3.LookupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LookupResponse::CopyFrom(const LookupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.datastore.v1beta3.LookupResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LookupResponse::IsInitialized() const {

  return true;
}

void LookupResponse::Swap(LookupResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LookupResponse::InternalSwap(LookupResponse* other) {
  found_.UnsafeArenaSwap(&other->found_);
  missing_.UnsafeArenaSwap(&other->missing_);
  deferred_.UnsafeArenaSwap(&other->deferred_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LookupResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LookupResponse_descriptor_;
  metadata.reflection = LookupResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LookupResponse

// repeated .google.datastore.v1beta3.EntityResult found = 1;
int LookupResponse::found_size() const {
  return found_.size();
}
void LookupResponse::clear_found() {
  found_.Clear();
}
const ::google::datastore::v1beta3::EntityResult& LookupResponse::found(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.LookupResponse.found)
  return found_.Get(index);
}
::google::datastore::v1beta3::EntityResult* LookupResponse::mutable_found(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.LookupResponse.found)
  return found_.Mutable(index);
}
::google::datastore::v1beta3::EntityResult* LookupResponse::add_found() {
  // @@protoc_insertion_point(field_add:google.datastore.v1beta3.LookupResponse.found)
  return found_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::EntityResult >*
LookupResponse::mutable_found() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.v1beta3.LookupResponse.found)
  return &found_;
}
const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::EntityResult >&
LookupResponse::found() const {
  // @@protoc_insertion_point(field_list:google.datastore.v1beta3.LookupResponse.found)
  return found_;
}

// repeated .google.datastore.v1beta3.EntityResult missing = 2;
int LookupResponse::missing_size() const {
  return missing_.size();
}
void LookupResponse::clear_missing() {
  missing_.Clear();
}
const ::google::datastore::v1beta3::EntityResult& LookupResponse::missing(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.LookupResponse.missing)
  return missing_.Get(index);
}
::google::datastore::v1beta3::EntityResult* LookupResponse::mutable_missing(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.LookupResponse.missing)
  return missing_.Mutable(index);
}
::google::datastore::v1beta3::EntityResult* LookupResponse::add_missing() {
  // @@protoc_insertion_point(field_add:google.datastore.v1beta3.LookupResponse.missing)
  return missing_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::EntityResult >*
LookupResponse::mutable_missing() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.v1beta3.LookupResponse.missing)
  return &missing_;
}
const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::EntityResult >&
LookupResponse::missing() const {
  // @@protoc_insertion_point(field_list:google.datastore.v1beta3.LookupResponse.missing)
  return missing_;
}

// repeated .google.datastore.v1beta3.Key deferred = 3;
int LookupResponse::deferred_size() const {
  return deferred_.size();
}
void LookupResponse::clear_deferred() {
  deferred_.Clear();
}
const ::google::datastore::v1beta3::Key& LookupResponse::deferred(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.LookupResponse.deferred)
  return deferred_.Get(index);
}
::google::datastore::v1beta3::Key* LookupResponse::mutable_deferred(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.LookupResponse.deferred)
  return deferred_.Mutable(index);
}
::google::datastore::v1beta3::Key* LookupResponse::add_deferred() {
  // @@protoc_insertion_point(field_add:google.datastore.v1beta3.LookupResponse.deferred)
  return deferred_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Key >*
LookupResponse::mutable_deferred() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.v1beta3.LookupResponse.deferred)
  return &deferred_;
}
const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Key >&
LookupResponse::deferred() const {
  // @@protoc_insertion_point(field_list:google.datastore.v1beta3.LookupResponse.deferred)
  return deferred_;
}

inline const LookupResponse* LookupResponse::internal_default_instance() {
  return &LookupResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunQueryRequest::kProjectIdFieldNumber;
const int RunQueryRequest::kPartitionIdFieldNumber;
const int RunQueryRequest::kReadOptionsFieldNumber;
const int RunQueryRequest::kQueryFieldNumber;
const int RunQueryRequest::kGqlQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunQueryRequest::RunQueryRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fdatastore_2fv1beta3_2fdatastore_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.datastore.v1beta3.RunQueryRequest)
}

void RunQueryRequest::InitAsDefaultInstance() {
  partition_id_ = const_cast< ::google::datastore::v1beta3::PartitionId*>(
      ::google::datastore::v1beta3::PartitionId::internal_default_instance());
  read_options_ = const_cast< ::google::datastore::v1beta3::ReadOptions*>(
      ::google::datastore::v1beta3::ReadOptions::internal_default_instance());
  RunQueryRequest_default_oneof_instance_->query_ = const_cast< ::google::datastore::v1beta3::Query*>(
      ::google::datastore::v1beta3::Query::internal_default_instance());
  RunQueryRequest_default_oneof_instance_->gql_query_ = const_cast< ::google::datastore::v1beta3::GqlQuery*>(
      ::google::datastore::v1beta3::GqlQuery::internal_default_instance());
}

RunQueryRequest::RunQueryRequest(const RunQueryRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.datastore.v1beta3.RunQueryRequest)
}

void RunQueryRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partition_id_ = NULL;
  read_options_ = NULL;
  clear_has_query_type();
  _cached_size_ = 0;
}

RunQueryRequest::~RunQueryRequest() {
  // @@protoc_insertion_point(destructor:google.datastore.v1beta3.RunQueryRequest)
  SharedDtor();
}

void RunQueryRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_query_type()) {
    clear_query_type();
  }
  if (this != &RunQueryRequest_default_instance_.get()) {
    delete partition_id_;
    delete read_options_;
  }
}

void RunQueryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunQueryRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunQueryRequest_descriptor_;
}

const RunQueryRequest& RunQueryRequest::default_instance() {
  protobuf_InitDefaults_google_2fdatastore_2fv1beta3_2fdatastore_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RunQueryRequest> RunQueryRequest_default_instance_;

RunQueryRequest* RunQueryRequest::New(::google::protobuf::Arena* arena) const {
  RunQueryRequest* n = new RunQueryRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RunQueryRequest::clear_query_type() {
// @@protoc_insertion_point(one_of_clear_start:google.datastore.v1beta3.RunQueryRequest)
  switch (query_type_case()) {
    case kQuery: {
      delete query_type_.query_;
      break;
    }
    case kGqlQuery: {
      delete query_type_.gql_query_;
      break;
    }
    case QUERY_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = QUERY_TYPE_NOT_SET;
}


void RunQueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.datastore.v1beta3.RunQueryRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && partition_id_ != NULL) delete partition_id_;
  partition_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && read_options_ != NULL) delete read_options_;
  read_options_ = NULL;
  clear_query_type();
}

bool RunQueryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.datastore.v1beta3.RunQueryRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.datastore.v1beta3.ReadOptions read_options = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_read_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_partition_id;
        break;
      }

      // optional .google.datastore.v1beta3.PartitionId partition_id = 2;
      case 2: {
        if (tag == 18) {
         parse_partition_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_partition_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_query;
        break;
      }

      // optional .google.datastore.v1beta3.Query query = 3;
      case 3: {
        if (tag == 26) {
         parse_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        goto after_gql_query;
        break;
      }

      // optional .google.datastore.v1beta3.GqlQuery gql_query = 7;
      case 7: {
        if (tag == 58) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gql_query()));
        } else {
          goto handle_unusual;
        }
       after_gql_query:
        if (input->ExpectTag(66)) goto parse_project_id;
        break;
      }

      // optional string project_id = 8;
      case 8: {
        if (tag == 66) {
         parse_project_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.datastore.v1beta3.RunQueryRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.datastore.v1beta3.RunQueryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.datastore.v1beta3.RunQueryRequest)
  return false;
#undef DO_
}

void RunQueryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.datastore.v1beta3.RunQueryRequest)
  // optional .google.datastore.v1beta3.ReadOptions read_options = 1;
  if (this->has_read_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->read_options_, output);
  }

  // optional .google.datastore.v1beta3.PartitionId partition_id = 2;
  if (this->has_partition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->partition_id_, output);
  }

  // optional .google.datastore.v1beta3.Query query = 3;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *query_type_.query_, output);
  }

  // optional .google.datastore.v1beta3.GqlQuery gql_query = 7;
  if (has_gql_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *query_type_.gql_query_, output);
  }

  // optional string project_id = 8;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.datastore.v1beta3.RunQueryRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->project_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.datastore.v1beta3.RunQueryRequest)
}

::google::protobuf::uint8* RunQueryRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.datastore.v1beta3.RunQueryRequest)
  // optional .google.datastore.v1beta3.ReadOptions read_options = 1;
  if (this->has_read_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->read_options_, false, target);
  }

  // optional .google.datastore.v1beta3.PartitionId partition_id = 2;
  if (this->has_partition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->partition_id_, false, target);
  }

  // optional .google.datastore.v1beta3.Query query = 3;
  if (has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *query_type_.query_, false, target);
  }

  // optional .google.datastore.v1beta3.GqlQuery gql_query = 7;
  if (has_gql_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *query_type_.gql_query_, false, target);
  }

  // optional string project_id = 8;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.datastore.v1beta3.RunQueryRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->project_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.datastore.v1beta3.RunQueryRequest)
  return target;
}

size_t RunQueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.datastore.v1beta3.RunQueryRequest)
  size_t total_size = 0;

  // optional string project_id = 8;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // optional .google.datastore.v1beta3.PartitionId partition_id = 2;
  if (this->has_partition_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->partition_id_);
  }

  // optional .google.datastore.v1beta3.ReadOptions read_options = 1;
  if (this->has_read_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->read_options_);
  }

  switch (query_type_case()) {
    // optional .google.datastore.v1beta3.Query query = 3;
    case kQuery: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *query_type_.query_);
      break;
    }
    // optional .google.datastore.v1beta3.GqlQuery gql_query = 7;
    case kGqlQuery: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *query_type_.gql_query_);
      break;
    }
    case QUERY_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunQueryRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.datastore.v1beta3.RunQueryRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RunQueryRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RunQueryRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.datastore.v1beta3.RunQueryRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.datastore.v1beta3.RunQueryRequest)
    UnsafeMergeFrom(*source);
  }
}

void RunQueryRequest::MergeFrom(const RunQueryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.datastore.v1beta3.RunQueryRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RunQueryRequest::UnsafeMergeFrom(const RunQueryRequest& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.query_type_case()) {
    case kQuery: {
      mutable_query()->::google::datastore::v1beta3::Query::MergeFrom(from.query());
      break;
    }
    case kGqlQuery: {
      mutable_gql_query()->::google::datastore::v1beta3::GqlQuery::MergeFrom(from.gql_query());
      break;
    }
    case QUERY_TYPE_NOT_SET: {
      break;
    }
  }
  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.has_partition_id()) {
    mutable_partition_id()->::google::datastore::v1beta3::PartitionId::MergeFrom(from.partition_id());
  }
  if (from.has_read_options()) {
    mutable_read_options()->::google::datastore::v1beta3::ReadOptions::MergeFrom(from.read_options());
  }
}

void RunQueryRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.datastore.v1beta3.RunQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunQueryRequest::CopyFrom(const RunQueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.datastore.v1beta3.RunQueryRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RunQueryRequest::IsInitialized() const {

  return true;
}

void RunQueryRequest::Swap(RunQueryRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RunQueryRequest::InternalSwap(RunQueryRequest* other) {
  project_id_.Swap(&other->project_id_);
  std::swap(partition_id_, other->partition_id_);
  std::swap(read_options_, other->read_options_);
  std::swap(query_type_, other->query_type_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RunQueryRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunQueryRequest_descriptor_;
  metadata.reflection = RunQueryRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RunQueryRequest

// optional string project_id = 8;
void RunQueryRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RunQueryRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.RunQueryRequest.project_id)
  return project_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RunQueryRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.RunQueryRequest.project_id)
}
void RunQueryRequest::set_project_id(const char* value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1beta3.RunQueryRequest.project_id)
}
void RunQueryRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1beta3.RunQueryRequest.project_id)
}
::std::string* RunQueryRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.RunQueryRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RunQueryRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.RunQueryRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RunQueryRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.RunQueryRequest.project_id)
}

// optional .google.datastore.v1beta3.PartitionId partition_id = 2;
bool RunQueryRequest::has_partition_id() const {
  return this != internal_default_instance() && partition_id_ != NULL;
}
void RunQueryRequest::clear_partition_id() {
  if (GetArenaNoVirtual() == NULL && partition_id_ != NULL) delete partition_id_;
  partition_id_ = NULL;
}
const ::google::datastore::v1beta3::PartitionId& RunQueryRequest::partition_id() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.RunQueryRequest.partition_id)
  return partition_id_ != NULL ? *partition_id_
                         : *::google::datastore::v1beta3::PartitionId::internal_default_instance();
}
::google::datastore::v1beta3::PartitionId* RunQueryRequest::mutable_partition_id() {
  
  if (partition_id_ == NULL) {
    partition_id_ = new ::google::datastore::v1beta3::PartitionId;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.RunQueryRequest.partition_id)
  return partition_id_;
}
::google::datastore::v1beta3::PartitionId* RunQueryRequest::release_partition_id() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.RunQueryRequest.partition_id)
  
  ::google::datastore::v1beta3::PartitionId* temp = partition_id_;
  partition_id_ = NULL;
  return temp;
}
void RunQueryRequest::set_allocated_partition_id(::google::datastore::v1beta3::PartitionId* partition_id) {
  delete partition_id_;
  partition_id_ = partition_id;
  if (partition_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.RunQueryRequest.partition_id)
}

// optional .google.datastore.v1beta3.ReadOptions read_options = 1;
bool RunQueryRequest::has_read_options() const {
  return this != internal_default_instance() && read_options_ != NULL;
}
void RunQueryRequest::clear_read_options() {
  if (GetArenaNoVirtual() == NULL && read_options_ != NULL) delete read_options_;
  read_options_ = NULL;
}
const ::google::datastore::v1beta3::ReadOptions& RunQueryRequest::read_options() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.RunQueryRequest.read_options)
  return read_options_ != NULL ? *read_options_
                         : *::google::datastore::v1beta3::ReadOptions::internal_default_instance();
}
::google::datastore::v1beta3::ReadOptions* RunQueryRequest::mutable_read_options() {
  
  if (read_options_ == NULL) {
    read_options_ = new ::google::datastore::v1beta3::ReadOptions;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.RunQueryRequest.read_options)
  return read_options_;
}
::google::datastore::v1beta3::ReadOptions* RunQueryRequest::release_read_options() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.RunQueryRequest.read_options)
  
  ::google::datastore::v1beta3::ReadOptions* temp = read_options_;
  read_options_ = NULL;
  return temp;
}
void RunQueryRequest::set_allocated_read_options(::google::datastore::v1beta3::ReadOptions* read_options) {
  delete read_options_;
  read_options_ = read_options;
  if (read_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.RunQueryRequest.read_options)
}

// optional .google.datastore.v1beta3.Query query = 3;
bool RunQueryRequest::has_query() const {
  return query_type_case() == kQuery;
}
void RunQueryRequest::set_has_query() {
  _oneof_case_[0] = kQuery;
}
void RunQueryRequest::clear_query() {
  if (has_query()) {
    delete query_type_.query_;
    clear_has_query_type();
  }
}
 const ::google::datastore::v1beta3::Query& RunQueryRequest::query() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.RunQueryRequest.query)
  return has_query()
      ? *query_type_.query_
      : ::google::datastore::v1beta3::Query::default_instance();
}
::google::datastore::v1beta3::Query* RunQueryRequest::mutable_query() {
  if (!has_query()) {
    clear_query_type();
    set_has_query();
    query_type_.query_ = new ::google::datastore::v1beta3::Query;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.RunQueryRequest.query)
  return query_type_.query_;
}
::google::datastore::v1beta3::Query* RunQueryRequest::release_query() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.RunQueryRequest.query)
  if (has_query()) {
    clear_has_query_type();
    ::google::datastore::v1beta3::Query* temp = query_type_.query_;
    query_type_.query_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RunQueryRequest::set_allocated_query(::google::datastore::v1beta3::Query* query) {
  clear_query_type();
  if (query) {
    set_has_query();
    query_type_.query_ = query;
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.RunQueryRequest.query)
}

// optional .google.datastore.v1beta3.GqlQuery gql_query = 7;
bool RunQueryRequest::has_gql_query() const {
  return query_type_case() == kGqlQuery;
}
void RunQueryRequest::set_has_gql_query() {
  _oneof_case_[0] = kGqlQuery;
}
void RunQueryRequest::clear_gql_query() {
  if (has_gql_query()) {
    delete query_type_.gql_query_;
    clear_has_query_type();
  }
}
 const ::google::datastore::v1beta3::GqlQuery& RunQueryRequest::gql_query() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.RunQueryRequest.gql_query)
  return has_gql_query()
      ? *query_type_.gql_query_
      : ::google::datastore::v1beta3::GqlQuery::default_instance();
}
::google::datastore::v1beta3::GqlQuery* RunQueryRequest::mutable_gql_query() {
  if (!has_gql_query()) {
    clear_query_type();
    set_has_gql_query();
    query_type_.gql_query_ = new ::google::datastore::v1beta3::GqlQuery;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.RunQueryRequest.gql_query)
  return query_type_.gql_query_;
}
::google::datastore::v1beta3::GqlQuery* RunQueryRequest::release_gql_query() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.RunQueryRequest.gql_query)
  if (has_gql_query()) {
    clear_has_query_type();
    ::google::datastore::v1beta3::GqlQuery* temp = query_type_.gql_query_;
    query_type_.gql_query_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RunQueryRequest::set_allocated_gql_query(::google::datastore::v1beta3::GqlQuery* gql_query) {
  clear_query_type();
  if (gql_query) {
    set_has_gql_query();
    query_type_.gql_query_ = gql_query;
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.RunQueryRequest.gql_query)
}

bool RunQueryRequest::has_query_type() const {
  return query_type_case() != QUERY_TYPE_NOT_SET;
}
void RunQueryRequest::clear_has_query_type() {
  _oneof_case_[0] = QUERY_TYPE_NOT_SET;
}
RunQueryRequest::QueryTypeCase RunQueryRequest::query_type_case() const {
  return RunQueryRequest::QueryTypeCase(_oneof_case_[0]);
}
inline const RunQueryRequest* RunQueryRequest::internal_default_instance() {
  return &RunQueryRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunQueryResponse::kBatchFieldNumber;
const int RunQueryResponse::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunQueryResponse::RunQueryResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fdatastore_2fv1beta3_2fdatastore_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.datastore.v1beta3.RunQueryResponse)
}

void RunQueryResponse::InitAsDefaultInstance() {
  batch_ = const_cast< ::google::datastore::v1beta3::QueryResultBatch*>(
      ::google::datastore::v1beta3::QueryResultBatch::internal_default_instance());
  query_ = const_cast< ::google::datastore::v1beta3::Query*>(
      ::google::datastore::v1beta3::Query::internal_default_instance());
}

RunQueryResponse::RunQueryResponse(const RunQueryResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.datastore.v1beta3.RunQueryResponse)
}

void RunQueryResponse::SharedCtor() {
  batch_ = NULL;
  query_ = NULL;
  _cached_size_ = 0;
}

RunQueryResponse::~RunQueryResponse() {
  // @@protoc_insertion_point(destructor:google.datastore.v1beta3.RunQueryResponse)
  SharedDtor();
}

void RunQueryResponse::SharedDtor() {
  if (this != &RunQueryResponse_default_instance_.get()) {
    delete batch_;
    delete query_;
  }
}

void RunQueryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunQueryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunQueryResponse_descriptor_;
}

const RunQueryResponse& RunQueryResponse::default_instance() {
  protobuf_InitDefaults_google_2fdatastore_2fv1beta3_2fdatastore_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RunQueryResponse> RunQueryResponse_default_instance_;

RunQueryResponse* RunQueryResponse::New(::google::protobuf::Arena* arena) const {
  RunQueryResponse* n = new RunQueryResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RunQueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.datastore.v1beta3.RunQueryResponse)
  if (GetArenaNoVirtual() == NULL && batch_ != NULL) delete batch_;
  batch_ = NULL;
  if (GetArenaNoVirtual() == NULL && query_ != NULL) delete query_;
  query_ = NULL;
}

bool RunQueryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.datastore.v1beta3.RunQueryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.datastore.v1beta3.QueryResultBatch batch = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_batch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_query;
        break;
      }

      // optional .google.datastore.v1beta3.Query query = 2;
      case 2: {
        if (tag == 18) {
         parse_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.datastore.v1beta3.RunQueryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.datastore.v1beta3.RunQueryResponse)
  return false;
#undef DO_
}

void RunQueryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.datastore.v1beta3.RunQueryResponse)
  // optional .google.datastore.v1beta3.QueryResultBatch batch = 1;
  if (this->has_batch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->batch_, output);
  }

  // optional .google.datastore.v1beta3.Query query = 2;
  if (this->has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->query_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.datastore.v1beta3.RunQueryResponse)
}

::google::protobuf::uint8* RunQueryResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.datastore.v1beta3.RunQueryResponse)
  // optional .google.datastore.v1beta3.QueryResultBatch batch = 1;
  if (this->has_batch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->batch_, false, target);
  }

  // optional .google.datastore.v1beta3.Query query = 2;
  if (this->has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->query_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.datastore.v1beta3.RunQueryResponse)
  return target;
}

size_t RunQueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.datastore.v1beta3.RunQueryResponse)
  size_t total_size = 0;

  // optional .google.datastore.v1beta3.QueryResultBatch batch = 1;
  if (this->has_batch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->batch_);
  }

  // optional .google.datastore.v1beta3.Query query = 2;
  if (this->has_query()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->query_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunQueryResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.datastore.v1beta3.RunQueryResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RunQueryResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RunQueryResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.datastore.v1beta3.RunQueryResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.datastore.v1beta3.RunQueryResponse)
    UnsafeMergeFrom(*source);
  }
}

void RunQueryResponse::MergeFrom(const RunQueryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.datastore.v1beta3.RunQueryResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RunQueryResponse::UnsafeMergeFrom(const RunQueryResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_batch()) {
    mutable_batch()->::google::datastore::v1beta3::QueryResultBatch::MergeFrom(from.batch());
  }
  if (from.has_query()) {
    mutable_query()->::google::datastore::v1beta3::Query::MergeFrom(from.query());
  }
}

void RunQueryResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.datastore.v1beta3.RunQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunQueryResponse::CopyFrom(const RunQueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.datastore.v1beta3.RunQueryResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RunQueryResponse::IsInitialized() const {

  return true;
}

void RunQueryResponse::Swap(RunQueryResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RunQueryResponse::InternalSwap(RunQueryResponse* other) {
  std::swap(batch_, other->batch_);
  std::swap(query_, other->query_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RunQueryResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunQueryResponse_descriptor_;
  metadata.reflection = RunQueryResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RunQueryResponse

// optional .google.datastore.v1beta3.QueryResultBatch batch = 1;
bool RunQueryResponse::has_batch() const {
  return this != internal_default_instance() && batch_ != NULL;
}
void RunQueryResponse::clear_batch() {
  if (GetArenaNoVirtual() == NULL && batch_ != NULL) delete batch_;
  batch_ = NULL;
}
const ::google::datastore::v1beta3::QueryResultBatch& RunQueryResponse::batch() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.RunQueryResponse.batch)
  return batch_ != NULL ? *batch_
                         : *::google::datastore::v1beta3::QueryResultBatch::internal_default_instance();
}
::google::datastore::v1beta3::QueryResultBatch* RunQueryResponse::mutable_batch() {
  
  if (batch_ == NULL) {
    batch_ = new ::google::datastore::v1beta3::QueryResultBatch;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.RunQueryResponse.batch)
  return batch_;
}
::google::datastore::v1beta3::QueryResultBatch* RunQueryResponse::release_batch() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.RunQueryResponse.batch)
  
  ::google::datastore::v1beta3::QueryResultBatch* temp = batch_;
  batch_ = NULL;
  return temp;
}
void RunQueryResponse::set_allocated_batch(::google::datastore::v1beta3::QueryResultBatch* batch) {
  delete batch_;
  batch_ = batch;
  if (batch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.RunQueryResponse.batch)
}

// optional .google.datastore.v1beta3.Query query = 2;
bool RunQueryResponse::has_query() const {
  return this != internal_default_instance() && query_ != NULL;
}
void RunQueryResponse::clear_query() {
  if (GetArenaNoVirtual() == NULL && query_ != NULL) delete query_;
  query_ = NULL;
}
const ::google::datastore::v1beta3::Query& RunQueryResponse::query() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.RunQueryResponse.query)
  return query_ != NULL ? *query_
                         : *::google::datastore::v1beta3::Query::internal_default_instance();
}
::google::datastore::v1beta3::Query* RunQueryResponse::mutable_query() {
  
  if (query_ == NULL) {
    query_ = new ::google::datastore::v1beta3::Query;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.RunQueryResponse.query)
  return query_;
}
::google::datastore::v1beta3::Query* RunQueryResponse::release_query() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.RunQueryResponse.query)
  
  ::google::datastore::v1beta3::Query* temp = query_;
  query_ = NULL;
  return temp;
}
void RunQueryResponse::set_allocated_query(::google::datastore::v1beta3::Query* query) {
  delete query_;
  query_ = query;
  if (query) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.RunQueryResponse.query)
}

inline const RunQueryResponse* RunQueryResponse::internal_default_instance() {
  return &RunQueryResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BeginTransactionRequest::kProjectIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BeginTransactionRequest::BeginTransactionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fdatastore_2fv1beta3_2fdatastore_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.datastore.v1beta3.BeginTransactionRequest)
}

void BeginTransactionRequest::InitAsDefaultInstance() {
}

BeginTransactionRequest::BeginTransactionRequest(const BeginTransactionRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.datastore.v1beta3.BeginTransactionRequest)
}

void BeginTransactionRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

BeginTransactionRequest::~BeginTransactionRequest() {
  // @@protoc_insertion_point(destructor:google.datastore.v1beta3.BeginTransactionRequest)
  SharedDtor();
}

void BeginTransactionRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BeginTransactionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeginTransactionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeginTransactionRequest_descriptor_;
}

const BeginTransactionRequest& BeginTransactionRequest::default_instance() {
  protobuf_InitDefaults_google_2fdatastore_2fv1beta3_2fdatastore_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BeginTransactionRequest> BeginTransactionRequest_default_instance_;

BeginTransactionRequest* BeginTransactionRequest::New(::google::protobuf::Arena* arena) const {
  BeginTransactionRequest* n = new BeginTransactionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BeginTransactionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.datastore.v1beta3.BeginTransactionRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool BeginTransactionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.datastore.v1beta3.BeginTransactionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string project_id = 8;
      case 8: {
        if (tag == 66) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.datastore.v1beta3.BeginTransactionRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.datastore.v1beta3.BeginTransactionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.datastore.v1beta3.BeginTransactionRequest)
  return false;
#undef DO_
}

void BeginTransactionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.datastore.v1beta3.BeginTransactionRequest)
  // optional string project_id = 8;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.datastore.v1beta3.BeginTransactionRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->project_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.datastore.v1beta3.BeginTransactionRequest)
}

::google::protobuf::uint8* BeginTransactionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.datastore.v1beta3.BeginTransactionRequest)
  // optional string project_id = 8;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.datastore.v1beta3.BeginTransactionRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->project_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.datastore.v1beta3.BeginTransactionRequest)
  return target;
}

size_t BeginTransactionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.datastore.v1beta3.BeginTransactionRequest)
  size_t total_size = 0;

  // optional string project_id = 8;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeginTransactionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.datastore.v1beta3.BeginTransactionRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BeginTransactionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BeginTransactionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.datastore.v1beta3.BeginTransactionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.datastore.v1beta3.BeginTransactionRequest)
    UnsafeMergeFrom(*source);
  }
}

void BeginTransactionRequest::MergeFrom(const BeginTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.datastore.v1beta3.BeginTransactionRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BeginTransactionRequest::UnsafeMergeFrom(const BeginTransactionRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
}

void BeginTransactionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.datastore.v1beta3.BeginTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeginTransactionRequest::CopyFrom(const BeginTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.datastore.v1beta3.BeginTransactionRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BeginTransactionRequest::IsInitialized() const {

  return true;
}

void BeginTransactionRequest::Swap(BeginTransactionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeginTransactionRequest::InternalSwap(BeginTransactionRequest* other) {
  project_id_.Swap(&other->project_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BeginTransactionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BeginTransactionRequest_descriptor_;
  metadata.reflection = BeginTransactionRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BeginTransactionRequest

// optional string project_id = 8;
void BeginTransactionRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BeginTransactionRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.BeginTransactionRequest.project_id)
  return project_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BeginTransactionRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.BeginTransactionRequest.project_id)
}
void BeginTransactionRequest::set_project_id(const char* value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1beta3.BeginTransactionRequest.project_id)
}
void BeginTransactionRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1beta3.BeginTransactionRequest.project_id)
}
::std::string* BeginTransactionRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.BeginTransactionRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BeginTransactionRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.BeginTransactionRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BeginTransactionRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.BeginTransactionRequest.project_id)
}

inline const BeginTransactionRequest* BeginTransactionRequest::internal_default_instance() {
  return &BeginTransactionRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BeginTransactionResponse::kTransactionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BeginTransactionResponse::BeginTransactionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fdatastore_2fv1beta3_2fdatastore_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.datastore.v1beta3.BeginTransactionResponse)
}

void BeginTransactionResponse::InitAsDefaultInstance() {
}

BeginTransactionResponse::BeginTransactionResponse(const BeginTransactionResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.datastore.v1beta3.BeginTransactionResponse)
}

void BeginTransactionResponse::SharedCtor() {
  transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

BeginTransactionResponse::~BeginTransactionResponse() {
  // @@protoc_insertion_point(destructor:google.datastore.v1beta3.BeginTransactionResponse)
  SharedDtor();
}

void BeginTransactionResponse::SharedDtor() {
  transaction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BeginTransactionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeginTransactionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeginTransactionResponse_descriptor_;
}

const BeginTransactionResponse& BeginTransactionResponse::default_instance() {
  protobuf_InitDefaults_google_2fdatastore_2fv1beta3_2fdatastore_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BeginTransactionResponse> BeginTransactionResponse_default_instance_;

BeginTransactionResponse* BeginTransactionResponse::New(::google::protobuf::Arena* arena) const {
  BeginTransactionResponse* n = new BeginTransactionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BeginTransactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.datastore.v1beta3.BeginTransactionResponse)
  transaction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool BeginTransactionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.datastore.v1beta3.BeginTransactionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes transaction = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transaction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.datastore.v1beta3.BeginTransactionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.datastore.v1beta3.BeginTransactionResponse)
  return false;
#undef DO_
}

void BeginTransactionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.datastore.v1beta3.BeginTransactionResponse)
  // optional bytes transaction = 1;
  if (this->transaction().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->transaction(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.datastore.v1beta3.BeginTransactionResponse)
}

::google::protobuf::uint8* BeginTransactionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.datastore.v1beta3.BeginTransactionResponse)
  // optional bytes transaction = 1;
  if (this->transaction().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->transaction(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.datastore.v1beta3.BeginTransactionResponse)
  return target;
}

size_t BeginTransactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.datastore.v1beta3.BeginTransactionResponse)
  size_t total_size = 0;

  // optional bytes transaction = 1;
  if (this->transaction().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->transaction());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeginTransactionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.datastore.v1beta3.BeginTransactionResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BeginTransactionResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BeginTransactionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.datastore.v1beta3.BeginTransactionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.datastore.v1beta3.BeginTransactionResponse)
    UnsafeMergeFrom(*source);
  }
}

void BeginTransactionResponse::MergeFrom(const BeginTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.datastore.v1beta3.BeginTransactionResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BeginTransactionResponse::UnsafeMergeFrom(const BeginTransactionResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.transaction().size() > 0) {

    transaction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_);
  }
}

void BeginTransactionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.datastore.v1beta3.BeginTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeginTransactionResponse::CopyFrom(const BeginTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.datastore.v1beta3.BeginTransactionResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BeginTransactionResponse::IsInitialized() const {

  return true;
}

void BeginTransactionResponse::Swap(BeginTransactionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeginTransactionResponse::InternalSwap(BeginTransactionResponse* other) {
  transaction_.Swap(&other->transaction_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BeginTransactionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BeginTransactionResponse_descriptor_;
  metadata.reflection = BeginTransactionResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BeginTransactionResponse

// optional bytes transaction = 1;
void BeginTransactionResponse::clear_transaction() {
  transaction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BeginTransactionResponse::transaction() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.BeginTransactionResponse.transaction)
  return transaction_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BeginTransactionResponse::set_transaction(const ::std::string& value) {
  
  transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.BeginTransactionResponse.transaction)
}
void BeginTransactionResponse::set_transaction(const char* value) {
  
  transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1beta3.BeginTransactionResponse.transaction)
}
void BeginTransactionResponse::set_transaction(const void* value, size_t size) {
  
  transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1beta3.BeginTransactionResponse.transaction)
}
::std::string* BeginTransactionResponse::mutable_transaction() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.BeginTransactionResponse.transaction)
  return transaction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BeginTransactionResponse::release_transaction() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.BeginTransactionResponse.transaction)
  
  return transaction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BeginTransactionResponse::set_allocated_transaction(::std::string* transaction) {
  if (transaction != NULL) {
    
  } else {
    
  }
  transaction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transaction);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.BeginTransactionResponse.transaction)
}

inline const BeginTransactionResponse* BeginTransactionResponse::internal_default_instance() {
  return &BeginTransactionResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RollbackRequest::kProjectIdFieldNumber;
const int RollbackRequest::kTransactionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RollbackRequest::RollbackRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fdatastore_2fv1beta3_2fdatastore_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.datastore.v1beta3.RollbackRequest)
}

void RollbackRequest::InitAsDefaultInstance() {
}

RollbackRequest::RollbackRequest(const RollbackRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.datastore.v1beta3.RollbackRequest)
}

void RollbackRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RollbackRequest::~RollbackRequest() {
  // @@protoc_insertion_point(destructor:google.datastore.v1beta3.RollbackRequest)
  SharedDtor();
}

void RollbackRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transaction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RollbackRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RollbackRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RollbackRequest_descriptor_;
}

const RollbackRequest& RollbackRequest::default_instance() {
  protobuf_InitDefaults_google_2fdatastore_2fv1beta3_2fdatastore_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RollbackRequest> RollbackRequest_default_instance_;

RollbackRequest* RollbackRequest::New(::google::protobuf::Arena* arena) const {
  RollbackRequest* n = new RollbackRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RollbackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.datastore.v1beta3.RollbackRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transaction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RollbackRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.datastore.v1beta3.RollbackRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes transaction = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transaction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_project_id;
        break;
      }

      // optional string project_id = 8;
      case 8: {
        if (tag == 66) {
         parse_project_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.datastore.v1beta3.RollbackRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.datastore.v1beta3.RollbackRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.datastore.v1beta3.RollbackRequest)
  return false;
#undef DO_
}

void RollbackRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.datastore.v1beta3.RollbackRequest)
  // optional bytes transaction = 1;
  if (this->transaction().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->transaction(), output);
  }

  // optional string project_id = 8;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.datastore.v1beta3.RollbackRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->project_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.datastore.v1beta3.RollbackRequest)
}

::google::protobuf::uint8* RollbackRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.datastore.v1beta3.RollbackRequest)
  // optional bytes transaction = 1;
  if (this->transaction().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->transaction(), target);
  }

  // optional string project_id = 8;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.datastore.v1beta3.RollbackRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->project_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.datastore.v1beta3.RollbackRequest)
  return target;
}

size_t RollbackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.datastore.v1beta3.RollbackRequest)
  size_t total_size = 0;

  // optional string project_id = 8;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // optional bytes transaction = 1;
  if (this->transaction().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->transaction());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RollbackRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.datastore.v1beta3.RollbackRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RollbackRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RollbackRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.datastore.v1beta3.RollbackRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.datastore.v1beta3.RollbackRequest)
    UnsafeMergeFrom(*source);
  }
}

void RollbackRequest::MergeFrom(const RollbackRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.datastore.v1beta3.RollbackRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RollbackRequest::UnsafeMergeFrom(const RollbackRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.transaction().size() > 0) {

    transaction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_);
  }
}

void RollbackRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.datastore.v1beta3.RollbackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RollbackRequest::CopyFrom(const RollbackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.datastore.v1beta3.RollbackRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RollbackRequest::IsInitialized() const {

  return true;
}

void RollbackRequest::Swap(RollbackRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RollbackRequest::InternalSwap(RollbackRequest* other) {
  project_id_.Swap(&other->project_id_);
  transaction_.Swap(&other->transaction_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RollbackRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RollbackRequest_descriptor_;
  metadata.reflection = RollbackRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RollbackRequest

// optional string project_id = 8;
void RollbackRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RollbackRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.RollbackRequest.project_id)
  return project_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RollbackRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.RollbackRequest.project_id)
}
void RollbackRequest::set_project_id(const char* value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1beta3.RollbackRequest.project_id)
}
void RollbackRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1beta3.RollbackRequest.project_id)
}
::std::string* RollbackRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.RollbackRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RollbackRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.RollbackRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RollbackRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.RollbackRequest.project_id)
}

// optional bytes transaction = 1;
void RollbackRequest::clear_transaction() {
  transaction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RollbackRequest::transaction() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.RollbackRequest.transaction)
  return transaction_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RollbackRequest::set_transaction(const ::std::string& value) {
  
  transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.RollbackRequest.transaction)
}
void RollbackRequest::set_transaction(const char* value) {
  
  transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1beta3.RollbackRequest.transaction)
}
void RollbackRequest::set_transaction(const void* value, size_t size) {
  
  transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1beta3.RollbackRequest.transaction)
}
::std::string* RollbackRequest::mutable_transaction() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.RollbackRequest.transaction)
  return transaction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RollbackRequest::release_transaction() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.RollbackRequest.transaction)
  
  return transaction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RollbackRequest::set_allocated_transaction(::std::string* transaction) {
  if (transaction != NULL) {
    
  } else {
    
  }
  transaction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transaction);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.RollbackRequest.transaction)
}

inline const RollbackRequest* RollbackRequest::internal_default_instance() {
  return &RollbackRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RollbackResponse::RollbackResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fdatastore_2fv1beta3_2fdatastore_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.datastore.v1beta3.RollbackResponse)
}

void RollbackResponse::InitAsDefaultInstance() {
}

RollbackResponse::RollbackResponse(const RollbackResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.datastore.v1beta3.RollbackResponse)
}

void RollbackResponse::SharedCtor() {
  _cached_size_ = 0;
}

RollbackResponse::~RollbackResponse() {
  // @@protoc_insertion_point(destructor:google.datastore.v1beta3.RollbackResponse)
  SharedDtor();
}

void RollbackResponse::SharedDtor() {
}

void RollbackResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RollbackResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RollbackResponse_descriptor_;
}

const RollbackResponse& RollbackResponse::default_instance() {
  protobuf_InitDefaults_google_2fdatastore_2fv1beta3_2fdatastore_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RollbackResponse> RollbackResponse_default_instance_;

RollbackResponse* RollbackResponse::New(::google::protobuf::Arena* arena) const {
  RollbackResponse* n = new RollbackResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RollbackResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.datastore.v1beta3.RollbackResponse)
}

bool RollbackResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.datastore.v1beta3.RollbackResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:google.datastore.v1beta3.RollbackResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.datastore.v1beta3.RollbackResponse)
  return false;
#undef DO_
}

void RollbackResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.datastore.v1beta3.RollbackResponse)
  // @@protoc_insertion_point(serialize_end:google.datastore.v1beta3.RollbackResponse)
}

::google::protobuf::uint8* RollbackResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.datastore.v1beta3.RollbackResponse)
  // @@protoc_insertion_point(serialize_to_array_end:google.datastore.v1beta3.RollbackResponse)
  return target;
}

size_t RollbackResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.datastore.v1beta3.RollbackResponse)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RollbackResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.datastore.v1beta3.RollbackResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RollbackResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RollbackResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.datastore.v1beta3.RollbackResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.datastore.v1beta3.RollbackResponse)
    UnsafeMergeFrom(*source);
  }
}

void RollbackResponse::MergeFrom(const RollbackResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.datastore.v1beta3.RollbackResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RollbackResponse::UnsafeMergeFrom(const RollbackResponse& from) {
  GOOGLE_DCHECK(&from != this);
}

void RollbackResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.datastore.v1beta3.RollbackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RollbackResponse::CopyFrom(const RollbackResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.datastore.v1beta3.RollbackResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RollbackResponse::IsInitialized() const {

  return true;
}

void RollbackResponse::Swap(RollbackResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RollbackResponse::InternalSwap(RollbackResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RollbackResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RollbackResponse_descriptor_;
  metadata.reflection = RollbackResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RollbackResponse

inline const RollbackResponse* RollbackResponse::internal_default_instance() {
  return &RollbackResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CommitRequest_Mode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommitRequest_Mode_descriptor_;
}
bool CommitRequest_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CommitRequest_Mode CommitRequest::MODE_UNSPECIFIED;
const CommitRequest_Mode CommitRequest::TRANSACTIONAL;
const CommitRequest_Mode CommitRequest::NON_TRANSACTIONAL;
const CommitRequest_Mode CommitRequest::Mode_MIN;
const CommitRequest_Mode CommitRequest::Mode_MAX;
const int CommitRequest::Mode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommitRequest::kProjectIdFieldNumber;
const int CommitRequest::kModeFieldNumber;
const int CommitRequest::kTransactionFieldNumber;
const int CommitRequest::kMutationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommitRequest::CommitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fdatastore_2fv1beta3_2fdatastore_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.datastore.v1beta3.CommitRequest)
}

void CommitRequest::InitAsDefaultInstance() {
  CommitRequest_default_oneof_instance_->transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CommitRequest::CommitRequest(const CommitRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.datastore.v1beta3.CommitRequest)
}

void CommitRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mode_ = 0;
  clear_has_transaction_selector();
  _cached_size_ = 0;
}

CommitRequest::~CommitRequest() {
  // @@protoc_insertion_point(destructor:google.datastore.v1beta3.CommitRequest)
  SharedDtor();
}

void CommitRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_transaction_selector()) {
    clear_transaction_selector();
  }
}

void CommitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommitRequest_descriptor_;
}

const CommitRequest& CommitRequest::default_instance() {
  protobuf_InitDefaults_google_2fdatastore_2fv1beta3_2fdatastore_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CommitRequest> CommitRequest_default_instance_;

CommitRequest* CommitRequest::New(::google::protobuf::Arena* arena) const {
  CommitRequest* n = new CommitRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommitRequest::clear_transaction_selector() {
// @@protoc_insertion_point(one_of_clear_start:google.datastore.v1beta3.CommitRequest)
  switch (transaction_selector_case()) {
    case kTransaction: {
      transaction_selector_.transaction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case TRANSACTION_SELECTOR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TRANSACTION_SELECTOR_NOT_SET;
}


void CommitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.datastore.v1beta3.CommitRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mode_ = 0;
  mutations_.Clear();
  clear_transaction_selector();
}

bool CommitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.datastore.v1beta3.CommitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes transaction = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transaction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mode;
        break;
      }

      // optional .google.datastore.v1beta3.CommitRequest.Mode mode = 5;
      case 5: {
        if (tag == 40) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::google::datastore::v1beta3::CommitRequest_Mode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_mutations;
        break;
      }

      // repeated .google.datastore.v1beta3.Mutation mutations = 6;
      case 6: {
        if (tag == 50) {
         parse_mutations:
          DO_(input->IncrementRecursionDepth());
         parse_loop_mutations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mutations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_mutations;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(66)) goto parse_project_id;
        break;
      }

      // optional string project_id = 8;
      case 8: {
        if (tag == 66) {
         parse_project_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.datastore.v1beta3.CommitRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.datastore.v1beta3.CommitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.datastore.v1beta3.CommitRequest)
  return false;
#undef DO_
}

void CommitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.datastore.v1beta3.CommitRequest)
  // optional bytes transaction = 1;
  if (has_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->transaction(), output);
  }

  // optional .google.datastore.v1beta3.CommitRequest.Mode mode = 5;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->mode(), output);
  }

  // repeated .google.datastore.v1beta3.Mutation mutations = 6;
  for (unsigned int i = 0, n = this->mutations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->mutations(i), output);
  }

  // optional string project_id = 8;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.datastore.v1beta3.CommitRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->project_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.datastore.v1beta3.CommitRequest)
}

::google::protobuf::uint8* CommitRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.datastore.v1beta3.CommitRequest)
  // optional bytes transaction = 1;
  if (has_transaction()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->transaction(), target);
  }

  // optional .google.datastore.v1beta3.CommitRequest.Mode mode = 5;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->mode(), target);
  }

  // repeated .google.datastore.v1beta3.Mutation mutations = 6;
  for (unsigned int i = 0, n = this->mutations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->mutations(i), false, target);
  }

  // optional string project_id = 8;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.datastore.v1beta3.CommitRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->project_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.datastore.v1beta3.CommitRequest)
  return target;
}

size_t CommitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.datastore.v1beta3.CommitRequest)
  size_t total_size = 0;

  // optional string project_id = 8;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // optional .google.datastore.v1beta3.CommitRequest.Mode mode = 5;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  // repeated .google.datastore.v1beta3.Mutation mutations = 6;
  {
    unsigned int count = this->mutations_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mutations(i));
    }
  }

  switch (transaction_selector_case()) {
    // optional bytes transaction = 1;
    case kTransaction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->transaction());
      break;
    }
    case TRANSACTION_SELECTOR_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.datastore.v1beta3.CommitRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CommitRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommitRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.datastore.v1beta3.CommitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.datastore.v1beta3.CommitRequest)
    UnsafeMergeFrom(*source);
  }
}

void CommitRequest::MergeFrom(const CommitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.datastore.v1beta3.CommitRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CommitRequest::UnsafeMergeFrom(const CommitRequest& from) {
  GOOGLE_DCHECK(&from != this);
  mutations_.MergeFrom(from.mutations_);
  switch (from.transaction_selector_case()) {
    case kTransaction: {
      set_transaction(from.transaction());
      break;
    }
    case TRANSACTION_SELECTOR_NOT_SET: {
      break;
    }
  }
  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
}

void CommitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.datastore.v1beta3.CommitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommitRequest::CopyFrom(const CommitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.datastore.v1beta3.CommitRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CommitRequest::IsInitialized() const {

  return true;
}

void CommitRequest::Swap(CommitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommitRequest::InternalSwap(CommitRequest* other) {
  project_id_.Swap(&other->project_id_);
  std::swap(mode_, other->mode_);
  mutations_.UnsafeArenaSwap(&other->mutations_);
  std::swap(transaction_selector_, other->transaction_selector_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommitRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommitRequest_descriptor_;
  metadata.reflection = CommitRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommitRequest

// optional string project_id = 8;
void CommitRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CommitRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.CommitRequest.project_id)
  return project_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CommitRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.CommitRequest.project_id)
}
void CommitRequest::set_project_id(const char* value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1beta3.CommitRequest.project_id)
}
void CommitRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1beta3.CommitRequest.project_id)
}
::std::string* CommitRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.CommitRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CommitRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.CommitRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CommitRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.CommitRequest.project_id)
}

// optional .google.datastore.v1beta3.CommitRequest.Mode mode = 5;
void CommitRequest::clear_mode() {
  mode_ = 0;
}
::google::datastore::v1beta3::CommitRequest_Mode CommitRequest::mode() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.CommitRequest.mode)
  return static_cast< ::google::datastore::v1beta3::CommitRequest_Mode >(mode_);
}
void CommitRequest::set_mode(::google::datastore::v1beta3::CommitRequest_Mode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.CommitRequest.mode)
}

// optional bytes transaction = 1;
bool CommitRequest::has_transaction() const {
  return transaction_selector_case() == kTransaction;
}
void CommitRequest::set_has_transaction() {
  _oneof_case_[0] = kTransaction;
}
void CommitRequest::clear_transaction() {
  if (has_transaction()) {
    transaction_selector_.transaction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_transaction_selector();
  }
}
const ::std::string& CommitRequest::transaction() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.CommitRequest.transaction)
  if (has_transaction()) {
    return transaction_selector_.transaction_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void CommitRequest::set_transaction(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.CommitRequest.transaction)
  if (!has_transaction()) {
    clear_transaction_selector();
    set_has_transaction();
    transaction_selector_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  transaction_selector_.transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.CommitRequest.transaction)
}
void CommitRequest::set_transaction(const char* value) {
  if (!has_transaction()) {
    clear_transaction_selector();
    set_has_transaction();
    transaction_selector_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  transaction_selector_.transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1beta3.CommitRequest.transaction)
}
void CommitRequest::set_transaction(const void* value, size_t size) {
  if (!has_transaction()) {
    clear_transaction_selector();
    set_has_transaction();
    transaction_selector_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  transaction_selector_.transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1beta3.CommitRequest.transaction)
}
::std::string* CommitRequest::mutable_transaction() {
  if (!has_transaction()) {
    clear_transaction_selector();
    set_has_transaction();
    transaction_selector_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.CommitRequest.transaction)
  return transaction_selector_.transaction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CommitRequest::release_transaction() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.CommitRequest.transaction)
  if (has_transaction()) {
    clear_has_transaction_selector();
    return transaction_selector_.transaction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void CommitRequest::set_allocated_transaction(::std::string* transaction) {
  if (!has_transaction()) {
    transaction_selector_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_transaction_selector();
  if (transaction != NULL) {
    set_has_transaction();
    transaction_selector_.transaction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        transaction);
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.CommitRequest.transaction)
}

// repeated .google.datastore.v1beta3.Mutation mutations = 6;
int CommitRequest::mutations_size() const {
  return mutations_.size();
}
void CommitRequest::clear_mutations() {
  mutations_.Clear();
}
const ::google::datastore::v1beta3::Mutation& CommitRequest::mutations(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.CommitRequest.mutations)
  return mutations_.Get(index);
}
::google::datastore::v1beta3::Mutation* CommitRequest::mutable_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.CommitRequest.mutations)
  return mutations_.Mutable(index);
}
::google::datastore::v1beta3::Mutation* CommitRequest::add_mutations() {
  // @@protoc_insertion_point(field_add:google.datastore.v1beta3.CommitRequest.mutations)
  return mutations_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Mutation >*
CommitRequest::mutable_mutations() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.v1beta3.CommitRequest.mutations)
  return &mutations_;
}
const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Mutation >&
CommitRequest::mutations() const {
  // @@protoc_insertion_point(field_list:google.datastore.v1beta3.CommitRequest.mutations)
  return mutations_;
}

bool CommitRequest::has_transaction_selector() const {
  return transaction_selector_case() != TRANSACTION_SELECTOR_NOT_SET;
}
void CommitRequest::clear_has_transaction_selector() {
  _oneof_case_[0] = TRANSACTION_SELECTOR_NOT_SET;
}
CommitRequest::TransactionSelectorCase CommitRequest::transaction_selector_case() const {
  return CommitRequest::TransactionSelectorCase(_oneof_case_[0]);
}
inline const CommitRequest* CommitRequest::internal_default_instance() {
  return &CommitRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommitResponse::kMutationResultsFieldNumber;
const int CommitResponse::kIndexUpdatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommitResponse::CommitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fdatastore_2fv1beta3_2fdatastore_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.datastore.v1beta3.CommitResponse)
}

void CommitResponse::InitAsDefaultInstance() {
}

CommitResponse::CommitResponse(const CommitResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.datastore.v1beta3.CommitResponse)
}

void CommitResponse::SharedCtor() {
  index_updates_ = 0;
  _cached_size_ = 0;
}

CommitResponse::~CommitResponse() {
  // @@protoc_insertion_point(destructor:google.datastore.v1beta3.CommitResponse)
  SharedDtor();
}

void CommitResponse::SharedDtor() {
}

void CommitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommitResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommitResponse_descriptor_;
}

const CommitResponse& CommitResponse::default_instance() {
  protobuf_InitDefaults_google_2fdatastore_2fv1beta3_2fdatastore_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CommitResponse> CommitResponse_default_instance_;

CommitResponse* CommitResponse::New(::google::protobuf::Arena* arena) const {
  CommitResponse* n = new CommitResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.datastore.v1beta3.CommitResponse)
  index_updates_ = 0;
  mutation_results_.Clear();
}

bool CommitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.datastore.v1beta3.CommitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.datastore.v1beta3.MutationResult mutation_results = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_mutation_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mutation_results()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_mutation_results;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(32)) goto parse_index_updates;
        break;
      }

      // optional int32 index_updates = 4;
      case 4: {
        if (tag == 32) {
         parse_index_updates:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_updates_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.datastore.v1beta3.CommitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.datastore.v1beta3.CommitResponse)
  return false;
#undef DO_
}

void CommitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.datastore.v1beta3.CommitResponse)
  // repeated .google.datastore.v1beta3.MutationResult mutation_results = 3;
  for (unsigned int i = 0, n = this->mutation_results_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mutation_results(i), output);
  }

  // optional int32 index_updates = 4;
  if (this->index_updates() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->index_updates(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.datastore.v1beta3.CommitResponse)
}

::google::protobuf::uint8* CommitResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.datastore.v1beta3.CommitResponse)
  // repeated .google.datastore.v1beta3.MutationResult mutation_results = 3;
  for (unsigned int i = 0, n = this->mutation_results_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->mutation_results(i), false, target);
  }

  // optional int32 index_updates = 4;
  if (this->index_updates() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->index_updates(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.datastore.v1beta3.CommitResponse)
  return target;
}

size_t CommitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.datastore.v1beta3.CommitResponse)
  size_t total_size = 0;

  // optional int32 index_updates = 4;
  if (this->index_updates() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index_updates());
  }

  // repeated .google.datastore.v1beta3.MutationResult mutation_results = 3;
  {
    unsigned int count = this->mutation_results_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mutation_results(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.datastore.v1beta3.CommitResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CommitResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommitResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.datastore.v1beta3.CommitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.datastore.v1beta3.CommitResponse)
    UnsafeMergeFrom(*source);
  }
}

void CommitResponse::MergeFrom(const CommitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.datastore.v1beta3.CommitResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CommitResponse::UnsafeMergeFrom(const CommitResponse& from) {
  GOOGLE_DCHECK(&from != this);
  mutation_results_.MergeFrom(from.mutation_results_);
  if (from.index_updates() != 0) {
    set_index_updates(from.index_updates());
  }
}

void CommitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.datastore.v1beta3.CommitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommitResponse::CopyFrom(const CommitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.datastore.v1beta3.CommitResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CommitResponse::IsInitialized() const {

  return true;
}

void CommitResponse::Swap(CommitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommitResponse::InternalSwap(CommitResponse* other) {
  mutation_results_.UnsafeArenaSwap(&other->mutation_results_);
  std::swap(index_updates_, other->index_updates_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommitResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommitResponse_descriptor_;
  metadata.reflection = CommitResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommitResponse

// repeated .google.datastore.v1beta3.MutationResult mutation_results = 3;
int CommitResponse::mutation_results_size() const {
  return mutation_results_.size();
}
void CommitResponse::clear_mutation_results() {
  mutation_results_.Clear();
}
const ::google::datastore::v1beta3::MutationResult& CommitResponse::mutation_results(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.CommitResponse.mutation_results)
  return mutation_results_.Get(index);
}
::google::datastore::v1beta3::MutationResult* CommitResponse::mutable_mutation_results(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.CommitResponse.mutation_results)
  return mutation_results_.Mutable(index);
}
::google::datastore::v1beta3::MutationResult* CommitResponse::add_mutation_results() {
  // @@protoc_insertion_point(field_add:google.datastore.v1beta3.CommitResponse.mutation_results)
  return mutation_results_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::MutationResult >*
CommitResponse::mutable_mutation_results() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.v1beta3.CommitResponse.mutation_results)
  return &mutation_results_;
}
const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::MutationResult >&
CommitResponse::mutation_results() const {
  // @@protoc_insertion_point(field_list:google.datastore.v1beta3.CommitResponse.mutation_results)
  return mutation_results_;
}

// optional int32 index_updates = 4;
void CommitResponse::clear_index_updates() {
  index_updates_ = 0;
}
::google::protobuf::int32 CommitResponse::index_updates() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.CommitResponse.index_updates)
  return index_updates_;
}
void CommitResponse::set_index_updates(::google::protobuf::int32 value) {
  
  index_updates_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.CommitResponse.index_updates)
}

inline const CommitResponse* CommitResponse::internal_default_instance() {
  return &CommitResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllocateIdsRequest::kProjectIdFieldNumber;
const int AllocateIdsRequest::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllocateIdsRequest::AllocateIdsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fdatastore_2fv1beta3_2fdatastore_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.datastore.v1beta3.AllocateIdsRequest)
}

void AllocateIdsRequest::InitAsDefaultInstance() {
}

AllocateIdsRequest::AllocateIdsRequest(const AllocateIdsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.datastore.v1beta3.AllocateIdsRequest)
}

void AllocateIdsRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AllocateIdsRequest::~AllocateIdsRequest() {
  // @@protoc_insertion_point(destructor:google.datastore.v1beta3.AllocateIdsRequest)
  SharedDtor();
}

void AllocateIdsRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AllocateIdsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllocateIdsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllocateIdsRequest_descriptor_;
}

const AllocateIdsRequest& AllocateIdsRequest::default_instance() {
  protobuf_InitDefaults_google_2fdatastore_2fv1beta3_2fdatastore_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AllocateIdsRequest> AllocateIdsRequest_default_instance_;

AllocateIdsRequest* AllocateIdsRequest::New(::google::protobuf::Arena* arena) const {
  AllocateIdsRequest* n = new AllocateIdsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AllocateIdsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.datastore.v1beta3.AllocateIdsRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  keys_.Clear();
}

bool AllocateIdsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.datastore.v1beta3.AllocateIdsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.datastore.v1beta3.Key keys = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_keys;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(66)) goto parse_project_id;
        break;
      }

      // optional string project_id = 8;
      case 8: {
        if (tag == 66) {
         parse_project_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.datastore.v1beta3.AllocateIdsRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.datastore.v1beta3.AllocateIdsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.datastore.v1beta3.AllocateIdsRequest)
  return false;
#undef DO_
}

void AllocateIdsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.datastore.v1beta3.AllocateIdsRequest)
  // repeated .google.datastore.v1beta3.Key keys = 1;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->keys(i), output);
  }

  // optional string project_id = 8;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.datastore.v1beta3.AllocateIdsRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->project_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.datastore.v1beta3.AllocateIdsRequest)
}

::google::protobuf::uint8* AllocateIdsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.datastore.v1beta3.AllocateIdsRequest)
  // repeated .google.datastore.v1beta3.Key keys = 1;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->keys(i), false, target);
  }

  // optional string project_id = 8;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.datastore.v1beta3.AllocateIdsRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->project_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.datastore.v1beta3.AllocateIdsRequest)
  return target;
}

size_t AllocateIdsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.datastore.v1beta3.AllocateIdsRequest)
  size_t total_size = 0;

  // optional string project_id = 8;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // repeated .google.datastore.v1beta3.Key keys = 1;
  {
    unsigned int count = this->keys_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keys(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllocateIdsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.datastore.v1beta3.AllocateIdsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AllocateIdsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AllocateIdsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.datastore.v1beta3.AllocateIdsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.datastore.v1beta3.AllocateIdsRequest)
    UnsafeMergeFrom(*source);
  }
}

void AllocateIdsRequest::MergeFrom(const AllocateIdsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.datastore.v1beta3.AllocateIdsRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AllocateIdsRequest::UnsafeMergeFrom(const AllocateIdsRequest& from) {
  GOOGLE_DCHECK(&from != this);
  keys_.MergeFrom(from.keys_);
  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
}

void AllocateIdsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.datastore.v1beta3.AllocateIdsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocateIdsRequest::CopyFrom(const AllocateIdsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.datastore.v1beta3.AllocateIdsRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AllocateIdsRequest::IsInitialized() const {

  return true;
}

void AllocateIdsRequest::Swap(AllocateIdsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllocateIdsRequest::InternalSwap(AllocateIdsRequest* other) {
  project_id_.Swap(&other->project_id_);
  keys_.UnsafeArenaSwap(&other->keys_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AllocateIdsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllocateIdsRequest_descriptor_;
  metadata.reflection = AllocateIdsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AllocateIdsRequest

// optional string project_id = 8;
void AllocateIdsRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AllocateIdsRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.AllocateIdsRequest.project_id)
  return project_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AllocateIdsRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.AllocateIdsRequest.project_id)
}
void AllocateIdsRequest::set_project_id(const char* value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1beta3.AllocateIdsRequest.project_id)
}
void AllocateIdsRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1beta3.AllocateIdsRequest.project_id)
}
::std::string* AllocateIdsRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.AllocateIdsRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AllocateIdsRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.AllocateIdsRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AllocateIdsRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.AllocateIdsRequest.project_id)
}

// repeated .google.datastore.v1beta3.Key keys = 1;
int AllocateIdsRequest::keys_size() const {
  return keys_.size();
}
void AllocateIdsRequest::clear_keys() {
  keys_.Clear();
}
const ::google::datastore::v1beta3::Key& AllocateIdsRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.AllocateIdsRequest.keys)
  return keys_.Get(index);
}
::google::datastore::v1beta3::Key* AllocateIdsRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.AllocateIdsRequest.keys)
  return keys_.Mutable(index);
}
::google::datastore::v1beta3::Key* AllocateIdsRequest::add_keys() {
  // @@protoc_insertion_point(field_add:google.datastore.v1beta3.AllocateIdsRequest.keys)
  return keys_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Key >*
AllocateIdsRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.v1beta3.AllocateIdsRequest.keys)
  return &keys_;
}
const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Key >&
AllocateIdsRequest::keys() const {
  // @@protoc_insertion_point(field_list:google.datastore.v1beta3.AllocateIdsRequest.keys)
  return keys_;
}

inline const AllocateIdsRequest* AllocateIdsRequest::internal_default_instance() {
  return &AllocateIdsRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllocateIdsResponse::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllocateIdsResponse::AllocateIdsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fdatastore_2fv1beta3_2fdatastore_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.datastore.v1beta3.AllocateIdsResponse)
}

void AllocateIdsResponse::InitAsDefaultInstance() {
}

AllocateIdsResponse::AllocateIdsResponse(const AllocateIdsResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.datastore.v1beta3.AllocateIdsResponse)
}

void AllocateIdsResponse::SharedCtor() {
  _cached_size_ = 0;
}

AllocateIdsResponse::~AllocateIdsResponse() {
  // @@protoc_insertion_point(destructor:google.datastore.v1beta3.AllocateIdsResponse)
  SharedDtor();
}

void AllocateIdsResponse::SharedDtor() {
}

void AllocateIdsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllocateIdsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllocateIdsResponse_descriptor_;
}

const AllocateIdsResponse& AllocateIdsResponse::default_instance() {
  protobuf_InitDefaults_google_2fdatastore_2fv1beta3_2fdatastore_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AllocateIdsResponse> AllocateIdsResponse_default_instance_;

AllocateIdsResponse* AllocateIdsResponse::New(::google::protobuf::Arena* arena) const {
  AllocateIdsResponse* n = new AllocateIdsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AllocateIdsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.datastore.v1beta3.AllocateIdsResponse)
  keys_.Clear();
}

bool AllocateIdsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.datastore.v1beta3.AllocateIdsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.datastore.v1beta3.Key keys = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_keys;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.datastore.v1beta3.AllocateIdsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.datastore.v1beta3.AllocateIdsResponse)
  return false;
#undef DO_
}

void AllocateIdsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.datastore.v1beta3.AllocateIdsResponse)
  // repeated .google.datastore.v1beta3.Key keys = 1;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->keys(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.datastore.v1beta3.AllocateIdsResponse)
}

::google::protobuf::uint8* AllocateIdsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.datastore.v1beta3.AllocateIdsResponse)
  // repeated .google.datastore.v1beta3.Key keys = 1;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->keys(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.datastore.v1beta3.AllocateIdsResponse)
  return target;
}

size_t AllocateIdsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.datastore.v1beta3.AllocateIdsResponse)
  size_t total_size = 0;

  // repeated .google.datastore.v1beta3.Key keys = 1;
  {
    unsigned int count = this->keys_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keys(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllocateIdsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.datastore.v1beta3.AllocateIdsResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AllocateIdsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AllocateIdsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.datastore.v1beta3.AllocateIdsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.datastore.v1beta3.AllocateIdsResponse)
    UnsafeMergeFrom(*source);
  }
}

void AllocateIdsResponse::MergeFrom(const AllocateIdsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.datastore.v1beta3.AllocateIdsResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AllocateIdsResponse::UnsafeMergeFrom(const AllocateIdsResponse& from) {
  GOOGLE_DCHECK(&from != this);
  keys_.MergeFrom(from.keys_);
}

void AllocateIdsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.datastore.v1beta3.AllocateIdsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocateIdsResponse::CopyFrom(const AllocateIdsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.datastore.v1beta3.AllocateIdsResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AllocateIdsResponse::IsInitialized() const {

  return true;
}

void AllocateIdsResponse::Swap(AllocateIdsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllocateIdsResponse::InternalSwap(AllocateIdsResponse* other) {
  keys_.UnsafeArenaSwap(&other->keys_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AllocateIdsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllocateIdsResponse_descriptor_;
  metadata.reflection = AllocateIdsResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AllocateIdsResponse

// repeated .google.datastore.v1beta3.Key keys = 1;
int AllocateIdsResponse::keys_size() const {
  return keys_.size();
}
void AllocateIdsResponse::clear_keys() {
  keys_.Clear();
}
const ::google::datastore::v1beta3::Key& AllocateIdsResponse::keys(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.AllocateIdsResponse.keys)
  return keys_.Get(index);
}
::google::datastore::v1beta3::Key* AllocateIdsResponse::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.AllocateIdsResponse.keys)
  return keys_.Mutable(index);
}
::google::datastore::v1beta3::Key* AllocateIdsResponse::add_keys() {
  // @@protoc_insertion_point(field_add:google.datastore.v1beta3.AllocateIdsResponse.keys)
  return keys_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Key >*
AllocateIdsResponse::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.v1beta3.AllocateIdsResponse.keys)
  return &keys_;
}
const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Key >&
AllocateIdsResponse::keys() const {
  // @@protoc_insertion_point(field_list:google.datastore.v1beta3.AllocateIdsResponse.keys)
  return keys_;
}

inline const AllocateIdsResponse* AllocateIdsResponse::internal_default_instance() {
  return &AllocateIdsResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mutation::kInsertFieldNumber;
const int Mutation::kUpdateFieldNumber;
const int Mutation::kUpsertFieldNumber;
const int Mutation::kDeleteFieldNumber;
const int Mutation::kBaseVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mutation::Mutation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fdatastore_2fv1beta3_2fdatastore_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.datastore.v1beta3.Mutation)
}

void Mutation::InitAsDefaultInstance() {
  Mutation_default_oneof_instance_->insert_ = const_cast< ::google::datastore::v1beta3::Entity*>(
      ::google::datastore::v1beta3::Entity::internal_default_instance());
  Mutation_default_oneof_instance_->update_ = const_cast< ::google::datastore::v1beta3::Entity*>(
      ::google::datastore::v1beta3::Entity::internal_default_instance());
  Mutation_default_oneof_instance_->upsert_ = const_cast< ::google::datastore::v1beta3::Entity*>(
      ::google::datastore::v1beta3::Entity::internal_default_instance());
  Mutation_default_oneof_instance_->delete__ = const_cast< ::google::datastore::v1beta3::Key*>(
      ::google::datastore::v1beta3::Key::internal_default_instance());
  Mutation_default_oneof_instance_->base_version_ = GOOGLE_LONGLONG(0);
}

Mutation::Mutation(const Mutation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.datastore.v1beta3.Mutation)
}

void Mutation::SharedCtor() {
  clear_has_operation();
  clear_has_conflict_detection_strategy();
  _cached_size_ = 0;
}

Mutation::~Mutation() {
  // @@protoc_insertion_point(destructor:google.datastore.v1beta3.Mutation)
  SharedDtor();
}

void Mutation::SharedDtor() {
  if (has_operation()) {
    clear_operation();
  }
  if (has_conflict_detection_strategy()) {
    clear_conflict_detection_strategy();
  }
}

void Mutation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mutation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mutation_descriptor_;
}

const Mutation& Mutation::default_instance() {
  protobuf_InitDefaults_google_2fdatastore_2fv1beta3_2fdatastore_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Mutation> Mutation_default_instance_;

Mutation* Mutation::New(::google::protobuf::Arena* arena) const {
  Mutation* n = new Mutation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mutation::clear_operation() {
// @@protoc_insertion_point(one_of_clear_start:google.datastore.v1beta3.Mutation)
  switch (operation_case()) {
    case kInsert: {
      delete operation_.insert_;
      break;
    }
    case kUpdate: {
      delete operation_.update_;
      break;
    }
    case kUpsert: {
      delete operation_.upsert_;
      break;
    }
    case kDelete: {
      delete operation_.delete__;
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPERATION_NOT_SET;
}

void Mutation::clear_conflict_detection_strategy() {
// @@protoc_insertion_point(one_of_clear_start:google.datastore.v1beta3.Mutation)
  switch (conflict_detection_strategy_case()) {
    case kBaseVersion: {
      // No need to clear
      break;
    }
    case CONFLICT_DETECTION_STRATEGY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = CONFLICT_DETECTION_STRATEGY_NOT_SET;
}


void Mutation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.datastore.v1beta3.Mutation)
  clear_operation();
  clear_conflict_detection_strategy();
}

bool Mutation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.datastore.v1beta3.Mutation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.datastore.v1beta3.Entity insert = 4;
      case 4: {
        if (tag == 34) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_insert()));
        } else {
          goto handle_unusual;
        }
        goto after_delete_;
        break;
      }

      // optional .google.datastore.v1beta3.Entity update = 5;
      case 5: {
        if (tag == 42) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update()));
        } else {
          goto handle_unusual;
        }
        goto after_delete_;
        break;
      }

      // optional .google.datastore.v1beta3.Entity upsert = 6;
      case 6: {
        if (tag == 50) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upsert()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_delete;
        break;
      }

      // optional .google.datastore.v1beta3.Key delete = 7;
      case 7: {
        if (tag == 58) {
         parse_delete:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_()));
        } else {
          goto handle_unusual;
        }
       after_delete_:
        if (input->ExpectTag(64)) goto parse_base_version;
        break;
      }

      // optional int64 base_version = 8;
      case 8: {
        if (tag == 64) {
         parse_base_version:
          clear_conflict_detection_strategy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &conflict_detection_strategy_.base_version_)));
          set_has_base_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.datastore.v1beta3.Mutation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.datastore.v1beta3.Mutation)
  return false;
#undef DO_
}

void Mutation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.datastore.v1beta3.Mutation)
  // optional .google.datastore.v1beta3.Entity insert = 4;
  if (has_insert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *operation_.insert_, output);
  }

  // optional .google.datastore.v1beta3.Entity update = 5;
  if (has_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *operation_.update_, output);
  }

  // optional .google.datastore.v1beta3.Entity upsert = 6;
  if (has_upsert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *operation_.upsert_, output);
  }

  // optional .google.datastore.v1beta3.Key delete = 7;
  if (has_delete_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *operation_.delete__, output);
  }

  // optional int64 base_version = 8;
  if (has_base_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->base_version(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.datastore.v1beta3.Mutation)
}

::google::protobuf::uint8* Mutation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.datastore.v1beta3.Mutation)
  // optional .google.datastore.v1beta3.Entity insert = 4;
  if (has_insert()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *operation_.insert_, false, target);
  }

  // optional .google.datastore.v1beta3.Entity update = 5;
  if (has_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *operation_.update_, false, target);
  }

  // optional .google.datastore.v1beta3.Entity upsert = 6;
  if (has_upsert()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *operation_.upsert_, false, target);
  }

  // optional .google.datastore.v1beta3.Key delete = 7;
  if (has_delete_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *operation_.delete__, false, target);
  }

  // optional int64 base_version = 8;
  if (has_base_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->base_version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.datastore.v1beta3.Mutation)
  return target;
}

size_t Mutation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.datastore.v1beta3.Mutation)
  size_t total_size = 0;

  switch (operation_case()) {
    // optional .google.datastore.v1beta3.Entity insert = 4;
    case kInsert: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *operation_.insert_);
      break;
    }
    // optional .google.datastore.v1beta3.Entity update = 5;
    case kUpdate: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *operation_.update_);
      break;
    }
    // optional .google.datastore.v1beta3.Entity upsert = 6;
    case kUpsert: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *operation_.upsert_);
      break;
    }
    // optional .google.datastore.v1beta3.Key delete = 7;
    case kDelete: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *operation_.delete__);
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  switch (conflict_detection_strategy_case()) {
    // optional int64 base_version = 8;
    case kBaseVersion: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->base_version());
      break;
    }
    case CONFLICT_DETECTION_STRATEGY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mutation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.datastore.v1beta3.Mutation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Mutation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mutation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.datastore.v1beta3.Mutation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.datastore.v1beta3.Mutation)
    UnsafeMergeFrom(*source);
  }
}

void Mutation::MergeFrom(const Mutation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.datastore.v1beta3.Mutation)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Mutation::UnsafeMergeFrom(const Mutation& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.operation_case()) {
    case kInsert: {
      mutable_insert()->::google::datastore::v1beta3::Entity::MergeFrom(from.insert());
      break;
    }
    case kUpdate: {
      mutable_update()->::google::datastore::v1beta3::Entity::MergeFrom(from.update());
      break;
    }
    case kUpsert: {
      mutable_upsert()->::google::datastore::v1beta3::Entity::MergeFrom(from.upsert());
      break;
    }
    case kDelete: {
      mutable_delete_()->::google::datastore::v1beta3::Key::MergeFrom(from.delete_());
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  switch (from.conflict_detection_strategy_case()) {
    case kBaseVersion: {
      set_base_version(from.base_version());
      break;
    }
    case CONFLICT_DETECTION_STRATEGY_NOT_SET: {
      break;
    }
  }
}

void Mutation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.datastore.v1beta3.Mutation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mutation::CopyFrom(const Mutation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.datastore.v1beta3.Mutation)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Mutation::IsInitialized() const {

  return true;
}

void Mutation::Swap(Mutation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mutation::InternalSwap(Mutation* other) {
  std::swap(operation_, other->operation_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(conflict_detection_strategy_, other->conflict_detection_strategy_);
  std::swap(_oneof_case_[1], other->_oneof_case_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mutation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mutation_descriptor_;
  metadata.reflection = Mutation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mutation

// optional .google.datastore.v1beta3.Entity insert = 4;
bool Mutation::has_insert() const {
  return operation_case() == kInsert;
}
void Mutation::set_has_insert() {
  _oneof_case_[0] = kInsert;
}
void Mutation::clear_insert() {
  if (has_insert()) {
    delete operation_.insert_;
    clear_has_operation();
  }
}
 const ::google::datastore::v1beta3::Entity& Mutation::insert() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.Mutation.insert)
  return has_insert()
      ? *operation_.insert_
      : ::google::datastore::v1beta3::Entity::default_instance();
}
::google::datastore::v1beta3::Entity* Mutation::mutable_insert() {
  if (!has_insert()) {
    clear_operation();
    set_has_insert();
    operation_.insert_ = new ::google::datastore::v1beta3::Entity;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.Mutation.insert)
  return operation_.insert_;
}
::google::datastore::v1beta3::Entity* Mutation::release_insert() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.Mutation.insert)
  if (has_insert()) {
    clear_has_operation();
    ::google::datastore::v1beta3::Entity* temp = operation_.insert_;
    operation_.insert_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Mutation::set_allocated_insert(::google::datastore::v1beta3::Entity* insert) {
  clear_operation();
  if (insert) {
    set_has_insert();
    operation_.insert_ = insert;
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.Mutation.insert)
}

// optional .google.datastore.v1beta3.Entity update = 5;
bool Mutation::has_update() const {
  return operation_case() == kUpdate;
}
void Mutation::set_has_update() {
  _oneof_case_[0] = kUpdate;
}
void Mutation::clear_update() {
  if (has_update()) {
    delete operation_.update_;
    clear_has_operation();
  }
}
 const ::google::datastore::v1beta3::Entity& Mutation::update() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.Mutation.update)
  return has_update()
      ? *operation_.update_
      : ::google::datastore::v1beta3::Entity::default_instance();
}
::google::datastore::v1beta3::Entity* Mutation::mutable_update() {
  if (!has_update()) {
    clear_operation();
    set_has_update();
    operation_.update_ = new ::google::datastore::v1beta3::Entity;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.Mutation.update)
  return operation_.update_;
}
::google::datastore::v1beta3::Entity* Mutation::release_update() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.Mutation.update)
  if (has_update()) {
    clear_has_operation();
    ::google::datastore::v1beta3::Entity* temp = operation_.update_;
    operation_.update_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Mutation::set_allocated_update(::google::datastore::v1beta3::Entity* update) {
  clear_operation();
  if (update) {
    set_has_update();
    operation_.update_ = update;
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.Mutation.update)
}

// optional .google.datastore.v1beta3.Entity upsert = 6;
bool Mutation::has_upsert() const {
  return operation_case() == kUpsert;
}
void Mutation::set_has_upsert() {
  _oneof_case_[0] = kUpsert;
}
void Mutation::clear_upsert() {
  if (has_upsert()) {
    delete operation_.upsert_;
    clear_has_operation();
  }
}
 const ::google::datastore::v1beta3::Entity& Mutation::upsert() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.Mutation.upsert)
  return has_upsert()
      ? *operation_.upsert_
      : ::google::datastore::v1beta3::Entity::default_instance();
}
::google::datastore::v1beta3::Entity* Mutation::mutable_upsert() {
  if (!has_upsert()) {
    clear_operation();
    set_has_upsert();
    operation_.upsert_ = new ::google::datastore::v1beta3::Entity;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.Mutation.upsert)
  return operation_.upsert_;
}
::google::datastore::v1beta3::Entity* Mutation::release_upsert() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.Mutation.upsert)
  if (has_upsert()) {
    clear_has_operation();
    ::google::datastore::v1beta3::Entity* temp = operation_.upsert_;
    operation_.upsert_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Mutation::set_allocated_upsert(::google::datastore::v1beta3::Entity* upsert) {
  clear_operation();
  if (upsert) {
    set_has_upsert();
    operation_.upsert_ = upsert;
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.Mutation.upsert)
}

// optional .google.datastore.v1beta3.Key delete = 7;
bool Mutation::has_delete_() const {
  return operation_case() == kDelete;
}
void Mutation::set_has_delete_() {
  _oneof_case_[0] = kDelete;
}
void Mutation::clear_delete_() {
  if (has_delete_()) {
    delete operation_.delete__;
    clear_has_operation();
  }
}
 const ::google::datastore::v1beta3::Key& Mutation::delete_() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.Mutation.delete)
  return has_delete_()
      ? *operation_.delete__
      : ::google::datastore::v1beta3::Key::default_instance();
}
::google::datastore::v1beta3::Key* Mutation::mutable_delete_() {
  if (!has_delete_()) {
    clear_operation();
    set_has_delete_();
    operation_.delete__ = new ::google::datastore::v1beta3::Key;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.Mutation.delete)
  return operation_.delete__;
}
::google::datastore::v1beta3::Key* Mutation::release_delete_() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.Mutation.delete)
  if (has_delete_()) {
    clear_has_operation();
    ::google::datastore::v1beta3::Key* temp = operation_.delete__;
    operation_.delete__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Mutation::set_allocated_delete_(::google::datastore::v1beta3::Key* delete_) {
  clear_operation();
  if (delete_) {
    set_has_delete_();
    operation_.delete__ = delete_;
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.Mutation.delete)
}

// optional int64 base_version = 8;
bool Mutation::has_base_version() const {
  return conflict_detection_strategy_case() == kBaseVersion;
}
void Mutation::set_has_base_version() {
  _oneof_case_[1] = kBaseVersion;
}
void Mutation::clear_base_version() {
  if (has_base_version()) {
    conflict_detection_strategy_.base_version_ = GOOGLE_LONGLONG(0);
    clear_has_conflict_detection_strategy();
  }
}
::google::protobuf::int64 Mutation::base_version() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.Mutation.base_version)
  if (has_base_version()) {
    return conflict_detection_strategy_.base_version_;
  }
  return GOOGLE_LONGLONG(0);
}
void Mutation::set_base_version(::google::protobuf::int64 value) {
  if (!has_base_version()) {
    clear_conflict_detection_strategy();
    set_has_base_version();
  }
  conflict_detection_strategy_.base_version_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.Mutation.base_version)
}

bool Mutation::has_operation() const {
  return operation_case() != OPERATION_NOT_SET;
}
void Mutation::clear_has_operation() {
  _oneof_case_[0] = OPERATION_NOT_SET;
}
bool Mutation::has_conflict_detection_strategy() const {
  return conflict_detection_strategy_case() != CONFLICT_DETECTION_STRATEGY_NOT_SET;
}
void Mutation::clear_has_conflict_detection_strategy() {
  _oneof_case_[1] = CONFLICT_DETECTION_STRATEGY_NOT_SET;
}
Mutation::OperationCase Mutation::operation_case() const {
  return Mutation::OperationCase(_oneof_case_[0]);
}
Mutation::ConflictDetectionStrategyCase Mutation::conflict_detection_strategy_case() const {
  return Mutation::ConflictDetectionStrategyCase(_oneof_case_[1]);
}
inline const Mutation* Mutation::internal_default_instance() {
  return &Mutation_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MutationResult::kKeyFieldNumber;
const int MutationResult::kVersionFieldNumber;
const int MutationResult::kConflictDetectedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MutationResult::MutationResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fdatastore_2fv1beta3_2fdatastore_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.datastore.v1beta3.MutationResult)
}

void MutationResult::InitAsDefaultInstance() {
  key_ = const_cast< ::google::datastore::v1beta3::Key*>(
      ::google::datastore::v1beta3::Key::internal_default_instance());
}

MutationResult::MutationResult(const MutationResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.datastore.v1beta3.MutationResult)
}

void MutationResult::SharedCtor() {
  key_ = NULL;
  ::memset(&version_, 0, reinterpret_cast<char*>(&conflict_detected_) -
    reinterpret_cast<char*>(&version_) + sizeof(conflict_detected_));
  _cached_size_ = 0;
}

MutationResult::~MutationResult() {
  // @@protoc_insertion_point(destructor:google.datastore.v1beta3.MutationResult)
  SharedDtor();
}

void MutationResult::SharedDtor() {
  if (this != &MutationResult_default_instance_.get()) {
    delete key_;
  }
}

void MutationResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MutationResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MutationResult_descriptor_;
}

const MutationResult& MutationResult::default_instance() {
  protobuf_InitDefaults_google_2fdatastore_2fv1beta3_2fdatastore_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MutationResult> MutationResult_default_instance_;

MutationResult* MutationResult::New(::google::protobuf::Arena* arena) const {
  MutationResult* n = new MutationResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MutationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:google.datastore.v1beta3.MutationResult)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MutationResult, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MutationResult*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(version_, conflict_detected_);
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool MutationResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.datastore.v1beta3.MutationResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.datastore.v1beta3.Key key = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_version;
        break;
      }

      // optional int64 version = 4;
      case 4: {
        if (tag == 32) {
         parse_version:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_conflict_detected;
        break;
      }

      // optional bool conflict_detected = 5;
      case 5: {
        if (tag == 40) {
         parse_conflict_detected:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &conflict_detected_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.datastore.v1beta3.MutationResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.datastore.v1beta3.MutationResult)
  return false;
#undef DO_
}

void MutationResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.datastore.v1beta3.MutationResult)
  // optional .google.datastore.v1beta3.Key key = 3;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->key_, output);
  }

  // optional int64 version = 4;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->version(), output);
  }

  // optional bool conflict_detected = 5;
  if (this->conflict_detected() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->conflict_detected(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.datastore.v1beta3.MutationResult)
}

::google::protobuf::uint8* MutationResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.datastore.v1beta3.MutationResult)
  // optional .google.datastore.v1beta3.Key key = 3;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->key_, false, target);
  }

  // optional int64 version = 4;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->version(), target);
  }

  // optional bool conflict_detected = 5;
  if (this->conflict_detected() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->conflict_detected(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.datastore.v1beta3.MutationResult)
  return target;
}

size_t MutationResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.datastore.v1beta3.MutationResult)
  size_t total_size = 0;

  // optional .google.datastore.v1beta3.Key key = 3;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  // optional int64 version = 4;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());
  }

  // optional bool conflict_detected = 5;
  if (this->conflict_detected() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MutationResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.datastore.v1beta3.MutationResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MutationResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MutationResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.datastore.v1beta3.MutationResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.datastore.v1beta3.MutationResult)
    UnsafeMergeFrom(*source);
  }
}

void MutationResult::MergeFrom(const MutationResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.datastore.v1beta3.MutationResult)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MutationResult::UnsafeMergeFrom(const MutationResult& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_key()) {
    mutable_key()->::google::datastore::v1beta3::Key::MergeFrom(from.key());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.conflict_detected() != 0) {
    set_conflict_detected(from.conflict_detected());
  }
}

void MutationResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.datastore.v1beta3.MutationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutationResult::CopyFrom(const MutationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.datastore.v1beta3.MutationResult)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MutationResult::IsInitialized() const {

  return true;
}

void MutationResult::Swap(MutationResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MutationResult::InternalSwap(MutationResult* other) {
  std::swap(key_, other->key_);
  std::swap(version_, other->version_);
  std::swap(conflict_detected_, other->conflict_detected_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MutationResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MutationResult_descriptor_;
  metadata.reflection = MutationResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MutationResult

// optional .google.datastore.v1beta3.Key key = 3;
bool MutationResult::has_key() const {
  return this != internal_default_instance() && key_ != NULL;
}
void MutationResult::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::google::datastore::v1beta3::Key& MutationResult::key() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.MutationResult.key)
  return key_ != NULL ? *key_
                         : *::google::datastore::v1beta3::Key::internal_default_instance();
}
::google::datastore::v1beta3::Key* MutationResult::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::google::datastore::v1beta3::Key;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.MutationResult.key)
  return key_;
}
::google::datastore::v1beta3::Key* MutationResult::release_key() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.MutationResult.key)
  
  ::google::datastore::v1beta3::Key* temp = key_;
  key_ = NULL;
  return temp;
}
void MutationResult::set_allocated_key(::google::datastore::v1beta3::Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.MutationResult.key)
}

// optional int64 version = 4;
void MutationResult::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MutationResult::version() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.MutationResult.version)
  return version_;
}
void MutationResult::set_version(::google::protobuf::int64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.MutationResult.version)
}

// optional bool conflict_detected = 5;
void MutationResult::clear_conflict_detected() {
  conflict_detected_ = false;
}
bool MutationResult::conflict_detected() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.MutationResult.conflict_detected)
  return conflict_detected_;
}
void MutationResult::set_conflict_detected(bool value) {
  
  conflict_detected_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.MutationResult.conflict_detected)
}

inline const MutationResult* MutationResult::internal_default_instance() {
  return &MutationResult_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ReadOptions_ReadConsistency_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadOptions_ReadConsistency_descriptor_;
}
bool ReadOptions_ReadConsistency_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReadOptions_ReadConsistency ReadOptions::READ_CONSISTENCY_UNSPECIFIED;
const ReadOptions_ReadConsistency ReadOptions::STRONG;
const ReadOptions_ReadConsistency ReadOptions::EVENTUAL;
const ReadOptions_ReadConsistency ReadOptions::ReadConsistency_MIN;
const ReadOptions_ReadConsistency ReadOptions::ReadConsistency_MAX;
const int ReadOptions::ReadConsistency_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadOptions::kReadConsistencyFieldNumber;
const int ReadOptions::kTransactionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadOptions::ReadOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fdatastore_2fv1beta3_2fdatastore_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.datastore.v1beta3.ReadOptions)
}

void ReadOptions::InitAsDefaultInstance() {
  ReadOptions_default_oneof_instance_->read_consistency_ = 0;
  ReadOptions_default_oneof_instance_->transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ReadOptions::ReadOptions(const ReadOptions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.datastore.v1beta3.ReadOptions)
}

void ReadOptions::SharedCtor() {
  clear_has_consistency_type();
  _cached_size_ = 0;
}

ReadOptions::~ReadOptions() {
  // @@protoc_insertion_point(destructor:google.datastore.v1beta3.ReadOptions)
  SharedDtor();
}

void ReadOptions::SharedDtor() {
  if (has_consistency_type()) {
    clear_consistency_type();
  }
}

void ReadOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadOptions_descriptor_;
}

const ReadOptions& ReadOptions::default_instance() {
  protobuf_InitDefaults_google_2fdatastore_2fv1beta3_2fdatastore_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReadOptions> ReadOptions_default_instance_;

ReadOptions* ReadOptions::New(::google::protobuf::Arena* arena) const {
  ReadOptions* n = new ReadOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadOptions::clear_consistency_type() {
// @@protoc_insertion_point(one_of_clear_start:google.datastore.v1beta3.ReadOptions)
  switch (consistency_type_case()) {
    case kReadConsistency: {
      // No need to clear
      break;
    }
    case kTransaction: {
      consistency_type_.transaction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case CONSISTENCY_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONSISTENCY_TYPE_NOT_SET;
}


void ReadOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:google.datastore.v1beta3.ReadOptions)
  clear_consistency_type();
}

bool ReadOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.datastore.v1beta3.ReadOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.datastore.v1beta3.ReadOptions.ReadConsistency read_consistency = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_read_consistency(static_cast< ::google::datastore::v1beta3::ReadOptions_ReadConsistency >(value));
        } else {
          goto handle_unusual;
        }
        goto after_transaction;
        break;
      }

      // optional bytes transaction = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transaction()));
        } else {
          goto handle_unusual;
        }
       after_transaction:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.datastore.v1beta3.ReadOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.datastore.v1beta3.ReadOptions)
  return false;
#undef DO_
}

void ReadOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.datastore.v1beta3.ReadOptions)
  // optional .google.datastore.v1beta3.ReadOptions.ReadConsistency read_consistency = 1;
  if (has_read_consistency()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->read_consistency(), output);
  }

  // optional bytes transaction = 2;
  if (has_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->transaction(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.datastore.v1beta3.ReadOptions)
}

::google::protobuf::uint8* ReadOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.datastore.v1beta3.ReadOptions)
  // optional .google.datastore.v1beta3.ReadOptions.ReadConsistency read_consistency = 1;
  if (has_read_consistency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->read_consistency(), target);
  }

  // optional bytes transaction = 2;
  if (has_transaction()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->transaction(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.datastore.v1beta3.ReadOptions)
  return target;
}

size_t ReadOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.datastore.v1beta3.ReadOptions)
  size_t total_size = 0;

  switch (consistency_type_case()) {
    // optional .google.datastore.v1beta3.ReadOptions.ReadConsistency read_consistency = 1;
    case kReadConsistency: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->read_consistency());
      break;
    }
    // optional bytes transaction = 2;
    case kTransaction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->transaction());
      break;
    }
    case CONSISTENCY_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.datastore.v1beta3.ReadOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReadOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.datastore.v1beta3.ReadOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.datastore.v1beta3.ReadOptions)
    UnsafeMergeFrom(*source);
  }
}

void ReadOptions::MergeFrom(const ReadOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.datastore.v1beta3.ReadOptions)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReadOptions::UnsafeMergeFrom(const ReadOptions& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.consistency_type_case()) {
    case kReadConsistency: {
      set_read_consistency(from.read_consistency());
      break;
    }
    case kTransaction: {
      set_transaction(from.transaction());
      break;
    }
    case CONSISTENCY_TYPE_NOT_SET: {
      break;
    }
  }
}

void ReadOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.datastore.v1beta3.ReadOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadOptions::CopyFrom(const ReadOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.datastore.v1beta3.ReadOptions)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReadOptions::IsInitialized() const {

  return true;
}

void ReadOptions::Swap(ReadOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadOptions::InternalSwap(ReadOptions* other) {
  std::swap(consistency_type_, other->consistency_type_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadOptions_descriptor_;
  metadata.reflection = ReadOptions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadOptions

// optional .google.datastore.v1beta3.ReadOptions.ReadConsistency read_consistency = 1;
bool ReadOptions::has_read_consistency() const {
  return consistency_type_case() == kReadConsistency;
}
void ReadOptions::set_has_read_consistency() {
  _oneof_case_[0] = kReadConsistency;
}
void ReadOptions::clear_read_consistency() {
  if (has_read_consistency()) {
    consistency_type_.read_consistency_ = 0;
    clear_has_consistency_type();
  }
}
::google::datastore::v1beta3::ReadOptions_ReadConsistency ReadOptions::read_consistency() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.ReadOptions.read_consistency)
  if (has_read_consistency()) {
    return static_cast< ::google::datastore::v1beta3::ReadOptions_ReadConsistency >(consistency_type_.read_consistency_);
  }
  return static_cast< ::google::datastore::v1beta3::ReadOptions_ReadConsistency >(0);
}
void ReadOptions::set_read_consistency(::google::datastore::v1beta3::ReadOptions_ReadConsistency value) {
  if (!has_read_consistency()) {
    clear_consistency_type();
    set_has_read_consistency();
  }
  consistency_type_.read_consistency_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.ReadOptions.read_consistency)
}

// optional bytes transaction = 2;
bool ReadOptions::has_transaction() const {
  return consistency_type_case() == kTransaction;
}
void ReadOptions::set_has_transaction() {
  _oneof_case_[0] = kTransaction;
}
void ReadOptions::clear_transaction() {
  if (has_transaction()) {
    consistency_type_.transaction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_consistency_type();
  }
}
const ::std::string& ReadOptions::transaction() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.ReadOptions.transaction)
  if (has_transaction()) {
    return consistency_type_.transaction_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void ReadOptions::set_transaction(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.ReadOptions.transaction)
  if (!has_transaction()) {
    clear_consistency_type();
    set_has_transaction();
    consistency_type_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  consistency_type_.transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.ReadOptions.transaction)
}
void ReadOptions::set_transaction(const char* value) {
  if (!has_transaction()) {
    clear_consistency_type();
    set_has_transaction();
    consistency_type_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  consistency_type_.transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1beta3.ReadOptions.transaction)
}
void ReadOptions::set_transaction(const void* value, size_t size) {
  if (!has_transaction()) {
    clear_consistency_type();
    set_has_transaction();
    consistency_type_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  consistency_type_.transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1beta3.ReadOptions.transaction)
}
::std::string* ReadOptions::mutable_transaction() {
  if (!has_transaction()) {
    clear_consistency_type();
    set_has_transaction();
    consistency_type_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.ReadOptions.transaction)
  return consistency_type_.transaction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReadOptions::release_transaction() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.ReadOptions.transaction)
  if (has_transaction()) {
    clear_has_consistency_type();
    return consistency_type_.transaction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void ReadOptions::set_allocated_transaction(::std::string* transaction) {
  if (!has_transaction()) {
    consistency_type_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_consistency_type();
  if (transaction != NULL) {
    set_has_transaction();
    consistency_type_.transaction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        transaction);
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.ReadOptions.transaction)
}

bool ReadOptions::has_consistency_type() const {
  return consistency_type_case() != CONSISTENCY_TYPE_NOT_SET;
}
void ReadOptions::clear_has_consistency_type() {
  _oneof_case_[0] = CONSISTENCY_TYPE_NOT_SET;
}
ReadOptions::ConsistencyTypeCase ReadOptions::consistency_type_case() const {
  return ReadOptions::ConsistencyTypeCase(_oneof_case_[0]);
}
inline const ReadOptions* ReadOptions::internal_default_instance() {
  return &ReadOptions_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1beta3
}  // namespace datastore
}  // namespace google

// @@protoc_insertion_point(global_scope)
