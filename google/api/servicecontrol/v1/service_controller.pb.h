// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/servicecontrol/v1/service_controller.proto

#ifndef PROTOBUF_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto__INCLUDED
#define PROTOBUF_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/servicecontrol/v1/check_error.pb.h"
#include "google/api/servicecontrol/v1/operation.pb.h"
#include "google/rpc/status.pb.h"
// @@protoc_insertion_point(includes)

namespace google {
namespace api {
namespace servicecontrol {
namespace v1 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto();
void protobuf_InitDefaults_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto();
void protobuf_AssignDesc_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto();
void protobuf_ShutdownFile_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto();

class CheckRequest;
class CheckResponse;
class ReportRequest;
class ReportResponse;
class ReportResponse_ReportError;

// ===================================================================

class CheckRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.servicecontrol.v1.CheckRequest) */ {
 public:
  CheckRequest();
  virtual ~CheckRequest();

  CheckRequest(const CheckRequest& from);

  inline CheckRequest& operator=(const CheckRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckRequest& default_instance();

  static const CheckRequest* internal_default_instance();

  void UnsafeArenaSwap(CheckRequest* other);
  void Swap(CheckRequest* other);

  // implements Message ----------------------------------------------

  inline CheckRequest* New() const { return New(NULL); }

  CheckRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheckRequest& from);
  void MergeFrom(const CheckRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CheckRequest* other);
  void UnsafeMergeFrom(const CheckRequest& from);
  protected:
  explicit CheckRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string service_name = 1;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 1;
  const ::std::string& service_name() const;
  void set_service_name(const ::std::string& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  ::std::string* mutable_service_name();
  ::std::string* release_service_name();
  void set_allocated_service_name(::std::string* service_name);
  ::std::string* unsafe_arena_release_service_name();
  void unsafe_arena_set_allocated_service_name(
      ::std::string* service_name);

  // optional .google.api.servicecontrol.v1.Operation operation = 2;
  bool has_operation() const;
  void clear_operation();
  static const int kOperationFieldNumber = 2;
  private:
  void _slow_mutable_operation();
  void _slow_set_allocated_operation(
      ::google::protobuf::Arena* message_arena, ::google::api::servicecontrol::v1::Operation** operation);
  ::google::api::servicecontrol::v1::Operation* _slow_release_operation();
  public:
  const ::google::api::servicecontrol::v1::Operation& operation() const;
  ::google::api::servicecontrol::v1::Operation* mutable_operation();
  ::google::api::servicecontrol::v1::Operation* release_operation();
  void set_allocated_operation(::google::api::servicecontrol::v1::Operation* operation);
  ::google::api::servicecontrol::v1::Operation* unsafe_arena_release_operation();
  void unsafe_arena_set_allocated_operation(
      ::google::api::servicecontrol::v1::Operation* operation);

  // optional string service_config_id = 4;
  void clear_service_config_id();
  static const int kServiceConfigIdFieldNumber = 4;
  const ::std::string& service_config_id() const;
  void set_service_config_id(const ::std::string& value);
  void set_service_config_id(const char* value);
  void set_service_config_id(const char* value, size_t size);
  ::std::string* mutable_service_config_id();
  ::std::string* release_service_config_id();
  void set_allocated_service_config_id(::std::string* service_config_id);
  ::std::string* unsafe_arena_release_service_config_id();
  void unsafe_arena_set_allocated_service_config_id(
      ::std::string* service_config_id);

  // @@protoc_insertion_point(class_scope:google.api.servicecontrol.v1.CheckRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr service_name_;
  ::google::protobuf::internal::ArenaStringPtr service_config_id_;
  ::google::api::servicecontrol::v1::Operation* operation_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto();
  friend void protobuf_ShutdownFile_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<CheckRequest> CheckRequest_default_instance_;

// -------------------------------------------------------------------

class CheckResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.servicecontrol.v1.CheckResponse) */ {
 public:
  CheckResponse();
  virtual ~CheckResponse();

  CheckResponse(const CheckResponse& from);

  inline CheckResponse& operator=(const CheckResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckResponse& default_instance();

  static const CheckResponse* internal_default_instance();

  void UnsafeArenaSwap(CheckResponse* other);
  void Swap(CheckResponse* other);

  // implements Message ----------------------------------------------

  inline CheckResponse* New() const { return New(NULL); }

  CheckResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheckResponse& from);
  void MergeFrom(const CheckResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CheckResponse* other);
  void UnsafeMergeFrom(const CheckResponse& from);
  protected:
  explicit CheckResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string operation_id = 1;
  void clear_operation_id();
  static const int kOperationIdFieldNumber = 1;
  const ::std::string& operation_id() const;
  void set_operation_id(const ::std::string& value);
  void set_operation_id(const char* value);
  void set_operation_id(const char* value, size_t size);
  ::std::string* mutable_operation_id();
  ::std::string* release_operation_id();
  void set_allocated_operation_id(::std::string* operation_id);
  ::std::string* unsafe_arena_release_operation_id();
  void unsafe_arena_set_allocated_operation_id(
      ::std::string* operation_id);

  // repeated .google.api.servicecontrol.v1.CheckError check_errors = 2;
  int check_errors_size() const;
  void clear_check_errors();
  static const int kCheckErrorsFieldNumber = 2;
  const ::google::api::servicecontrol::v1::CheckError& check_errors(int index) const;
  ::google::api::servicecontrol::v1::CheckError* mutable_check_errors(int index);
  ::google::api::servicecontrol::v1::CheckError* add_check_errors();
  ::google::protobuf::RepeatedPtrField< ::google::api::servicecontrol::v1::CheckError >*
      mutable_check_errors();
  const ::google::protobuf::RepeatedPtrField< ::google::api::servicecontrol::v1::CheckError >&
      check_errors() const;

  // optional string service_config_id = 5;
  void clear_service_config_id();
  static const int kServiceConfigIdFieldNumber = 5;
  const ::std::string& service_config_id() const;
  void set_service_config_id(const ::std::string& value);
  void set_service_config_id(const char* value);
  void set_service_config_id(const char* value, size_t size);
  ::std::string* mutable_service_config_id();
  ::std::string* release_service_config_id();
  void set_allocated_service_config_id(::std::string* service_config_id);
  ::std::string* unsafe_arena_release_service_config_id();
  void unsafe_arena_set_allocated_service_config_id(
      ::std::string* service_config_id);

  // @@protoc_insertion_point(class_scope:google.api.servicecontrol.v1.CheckResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::api::servicecontrol::v1::CheckError > check_errors_;
  ::google::protobuf::internal::ArenaStringPtr operation_id_;
  ::google::protobuf::internal::ArenaStringPtr service_config_id_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto();
  friend void protobuf_ShutdownFile_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<CheckResponse> CheckResponse_default_instance_;

// -------------------------------------------------------------------

class ReportRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.servicecontrol.v1.ReportRequest) */ {
 public:
  ReportRequest();
  virtual ~ReportRequest();

  ReportRequest(const ReportRequest& from);

  inline ReportRequest& operator=(const ReportRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportRequest& default_instance();

  static const ReportRequest* internal_default_instance();

  void UnsafeArenaSwap(ReportRequest* other);
  void Swap(ReportRequest* other);

  // implements Message ----------------------------------------------

  inline ReportRequest* New() const { return New(NULL); }

  ReportRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportRequest& from);
  void MergeFrom(const ReportRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReportRequest* other);
  void UnsafeMergeFrom(const ReportRequest& from);
  protected:
  explicit ReportRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string service_name = 1;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 1;
  const ::std::string& service_name() const;
  void set_service_name(const ::std::string& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  ::std::string* mutable_service_name();
  ::std::string* release_service_name();
  void set_allocated_service_name(::std::string* service_name);
  ::std::string* unsafe_arena_release_service_name();
  void unsafe_arena_set_allocated_service_name(
      ::std::string* service_name);

  // repeated .google.api.servicecontrol.v1.Operation operations = 2;
  int operations_size() const;
  void clear_operations();
  static const int kOperationsFieldNumber = 2;
  const ::google::api::servicecontrol::v1::Operation& operations(int index) const;
  ::google::api::servicecontrol::v1::Operation* mutable_operations(int index);
  ::google::api::servicecontrol::v1::Operation* add_operations();
  ::google::protobuf::RepeatedPtrField< ::google::api::servicecontrol::v1::Operation >*
      mutable_operations();
  const ::google::protobuf::RepeatedPtrField< ::google::api::servicecontrol::v1::Operation >&
      operations() const;

  // optional string service_config_id = 3;
  void clear_service_config_id();
  static const int kServiceConfigIdFieldNumber = 3;
  const ::std::string& service_config_id() const;
  void set_service_config_id(const ::std::string& value);
  void set_service_config_id(const char* value);
  void set_service_config_id(const char* value, size_t size);
  ::std::string* mutable_service_config_id();
  ::std::string* release_service_config_id();
  void set_allocated_service_config_id(::std::string* service_config_id);
  ::std::string* unsafe_arena_release_service_config_id();
  void unsafe_arena_set_allocated_service_config_id(
      ::std::string* service_config_id);

  // @@protoc_insertion_point(class_scope:google.api.servicecontrol.v1.ReportRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::api::servicecontrol::v1::Operation > operations_;
  ::google::protobuf::internal::ArenaStringPtr service_name_;
  ::google::protobuf::internal::ArenaStringPtr service_config_id_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto();
  friend void protobuf_ShutdownFile_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ReportRequest> ReportRequest_default_instance_;

// -------------------------------------------------------------------

class ReportResponse_ReportError : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.servicecontrol.v1.ReportResponse.ReportError) */ {
 public:
  ReportResponse_ReportError();
  virtual ~ReportResponse_ReportError();

  ReportResponse_ReportError(const ReportResponse_ReportError& from);

  inline ReportResponse_ReportError& operator=(const ReportResponse_ReportError& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportResponse_ReportError& default_instance();

  static const ReportResponse_ReportError* internal_default_instance();

  void UnsafeArenaSwap(ReportResponse_ReportError* other);
  void Swap(ReportResponse_ReportError* other);

  // implements Message ----------------------------------------------

  inline ReportResponse_ReportError* New() const { return New(NULL); }

  ReportResponse_ReportError* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportResponse_ReportError& from);
  void MergeFrom(const ReportResponse_ReportError& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReportResponse_ReportError* other);
  void UnsafeMergeFrom(const ReportResponse_ReportError& from);
  protected:
  explicit ReportResponse_ReportError(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string operation_id = 1;
  void clear_operation_id();
  static const int kOperationIdFieldNumber = 1;
  const ::std::string& operation_id() const;
  void set_operation_id(const ::std::string& value);
  void set_operation_id(const char* value);
  void set_operation_id(const char* value, size_t size);
  ::std::string* mutable_operation_id();
  ::std::string* release_operation_id();
  void set_allocated_operation_id(::std::string* operation_id);
  ::std::string* unsafe_arena_release_operation_id();
  void unsafe_arena_set_allocated_operation_id(
      ::std::string* operation_id);

  // optional .google.rpc.Status status = 2;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  private:
  void _slow_mutable_status();
  ::google::rpc::Status* _slow_release_status();
  public:
  const ::google::rpc::Status& status() const;
  ::google::rpc::Status* mutable_status();
  ::google::rpc::Status* release_status();
  void set_allocated_status(::google::rpc::Status* status);
  ::google::rpc::Status* unsafe_arena_release_status();
  void unsafe_arena_set_allocated_status(
      ::google::rpc::Status* status);

  // @@protoc_insertion_point(class_scope:google.api.servicecontrol.v1.ReportResponse.ReportError)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr operation_id_;
  ::google::rpc::Status* status_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto();
  friend void protobuf_ShutdownFile_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ReportResponse_ReportError> ReportResponse_ReportError_default_instance_;

// -------------------------------------------------------------------

class ReportResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.servicecontrol.v1.ReportResponse) */ {
 public:
  ReportResponse();
  virtual ~ReportResponse();

  ReportResponse(const ReportResponse& from);

  inline ReportResponse& operator=(const ReportResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportResponse& default_instance();

  static const ReportResponse* internal_default_instance();

  void UnsafeArenaSwap(ReportResponse* other);
  void Swap(ReportResponse* other);

  // implements Message ----------------------------------------------

  inline ReportResponse* New() const { return New(NULL); }

  ReportResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportResponse& from);
  void MergeFrom(const ReportResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReportResponse* other);
  void UnsafeMergeFrom(const ReportResponse& from);
  protected:
  explicit ReportResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReportResponse_ReportError ReportError;

  // accessors -------------------------------------------------------

  // repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;
  int report_errors_size() const;
  void clear_report_errors();
  static const int kReportErrorsFieldNumber = 1;
  const ::google::api::servicecontrol::v1::ReportResponse_ReportError& report_errors(int index) const;
  ::google::api::servicecontrol::v1::ReportResponse_ReportError* mutable_report_errors(int index);
  ::google::api::servicecontrol::v1::ReportResponse_ReportError* add_report_errors();
  ::google::protobuf::RepeatedPtrField< ::google::api::servicecontrol::v1::ReportResponse_ReportError >*
      mutable_report_errors();
  const ::google::protobuf::RepeatedPtrField< ::google::api::servicecontrol::v1::ReportResponse_ReportError >&
      report_errors() const;

  // optional string service_config_id = 2;
  void clear_service_config_id();
  static const int kServiceConfigIdFieldNumber = 2;
  const ::std::string& service_config_id() const;
  void set_service_config_id(const ::std::string& value);
  void set_service_config_id(const char* value);
  void set_service_config_id(const char* value, size_t size);
  ::std::string* mutable_service_config_id();
  ::std::string* release_service_config_id();
  void set_allocated_service_config_id(::std::string* service_config_id);
  ::std::string* unsafe_arena_release_service_config_id();
  void unsafe_arena_set_allocated_service_config_id(
      ::std::string* service_config_id);

  // @@protoc_insertion_point(class_scope:google.api.servicecontrol.v1.ReportResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::api::servicecontrol::v1::ReportResponse_ReportError > report_errors_;
  ::google::protobuf::internal::ArenaStringPtr service_config_id_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto();
  friend void protobuf_ShutdownFile_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ReportResponse> ReportResponse_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckRequest

// optional string service_name = 1;
inline void CheckRequest::clear_service_name() {
  service_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CheckRequest::service_name() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.CheckRequest.service_name)
  return service_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckRequest::set_service_name(const ::std::string& value) {
  
  service_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.CheckRequest.service_name)
}
inline void CheckRequest::set_service_name(const char* value) {
  
  service_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.servicecontrol.v1.CheckRequest.service_name)
}
inline void CheckRequest::set_service_name(const char* value,
    size_t size) {
  
  service_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.servicecontrol.v1.CheckRequest.service_name)
}
inline ::std::string* CheckRequest::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.CheckRequest.service_name)
  return service_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CheckRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.CheckRequest.service_name)
  
  return service_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CheckRequest::unsafe_arena_release_service_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.servicecontrol.v1.CheckRequest.service_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return service_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CheckRequest::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.CheckRequest.service_name)
}
inline void CheckRequest::unsafe_arena_set_allocated_service_name(
    ::std::string* service_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      service_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v1.CheckRequest.service_name)
}

// optional .google.api.servicecontrol.v1.Operation operation = 2;
inline bool CheckRequest::has_operation() const {
  return this != internal_default_instance() && operation_ != NULL;
}
inline void CheckRequest::clear_operation() {
  if (GetArenaNoVirtual() == NULL && operation_ != NULL) delete operation_;
  operation_ = NULL;
}
inline const ::google::api::servicecontrol::v1::Operation& CheckRequest::operation() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.CheckRequest.operation)
  return operation_ != NULL ? *operation_
                         : *::google::api::servicecontrol::v1::Operation::internal_default_instance();
}
inline ::google::api::servicecontrol::v1::Operation* CheckRequest::mutable_operation() {
  
  if (operation_ == NULL) {
    _slow_mutable_operation();
  }
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.CheckRequest.operation)
  return operation_;
}
inline ::google::api::servicecontrol::v1::Operation* CheckRequest::release_operation() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.CheckRequest.operation)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_operation();
  } else {
    ::google::api::servicecontrol::v1::Operation* temp = operation_;
    operation_ = NULL;
    return temp;
  }
}
inline  void CheckRequest::set_allocated_operation(::google::api::servicecontrol::v1::Operation* operation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operation_;
  }
  if (operation != NULL) {
    _slow_set_allocated_operation(message_arena, &operation);
  }
  operation_ = operation;
  if (operation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.CheckRequest.operation)
}

// optional string service_config_id = 4;
inline void CheckRequest::clear_service_config_id() {
  service_config_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CheckRequest::service_config_id() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.CheckRequest.service_config_id)
  return service_config_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckRequest::set_service_config_id(const ::std::string& value) {
  
  service_config_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.CheckRequest.service_config_id)
}
inline void CheckRequest::set_service_config_id(const char* value) {
  
  service_config_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.servicecontrol.v1.CheckRequest.service_config_id)
}
inline void CheckRequest::set_service_config_id(const char* value,
    size_t size) {
  
  service_config_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.servicecontrol.v1.CheckRequest.service_config_id)
}
inline ::std::string* CheckRequest::mutable_service_config_id() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.CheckRequest.service_config_id)
  return service_config_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CheckRequest::release_service_config_id() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.CheckRequest.service_config_id)
  
  return service_config_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CheckRequest::unsafe_arena_release_service_config_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.servicecontrol.v1.CheckRequest.service_config_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return service_config_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CheckRequest::set_allocated_service_config_id(::std::string* service_config_id) {
  if (service_config_id != NULL) {
    
  } else {
    
  }
  service_config_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_config_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.CheckRequest.service_config_id)
}
inline void CheckRequest::unsafe_arena_set_allocated_service_config_id(
    ::std::string* service_config_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (service_config_id != NULL) {
    
  } else {
    
  }
  service_config_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      service_config_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v1.CheckRequest.service_config_id)
}

inline const CheckRequest* CheckRequest::internal_default_instance() {
  return &CheckRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// CheckResponse

// optional string operation_id = 1;
inline void CheckResponse::clear_operation_id() {
  operation_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CheckResponse::operation_id() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.CheckResponse.operation_id)
  return operation_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckResponse::set_operation_id(const ::std::string& value) {
  
  operation_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.CheckResponse.operation_id)
}
inline void CheckResponse::set_operation_id(const char* value) {
  
  operation_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.servicecontrol.v1.CheckResponse.operation_id)
}
inline void CheckResponse::set_operation_id(const char* value,
    size_t size) {
  
  operation_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.servicecontrol.v1.CheckResponse.operation_id)
}
inline ::std::string* CheckResponse::mutable_operation_id() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.CheckResponse.operation_id)
  return operation_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CheckResponse::release_operation_id() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.CheckResponse.operation_id)
  
  return operation_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CheckResponse::unsafe_arena_release_operation_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.servicecontrol.v1.CheckResponse.operation_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return operation_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CheckResponse::set_allocated_operation_id(::std::string* operation_id) {
  if (operation_id != NULL) {
    
  } else {
    
  }
  operation_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operation_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.CheckResponse.operation_id)
}
inline void CheckResponse::unsafe_arena_set_allocated_operation_id(
    ::std::string* operation_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (operation_id != NULL) {
    
  } else {
    
  }
  operation_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      operation_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v1.CheckResponse.operation_id)
}

// repeated .google.api.servicecontrol.v1.CheckError check_errors = 2;
inline int CheckResponse::check_errors_size() const {
  return check_errors_.size();
}
inline void CheckResponse::clear_check_errors() {
  check_errors_.Clear();
}
inline const ::google::api::servicecontrol::v1::CheckError& CheckResponse::check_errors(int index) const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.CheckResponse.check_errors)
  return check_errors_.Get(index);
}
inline ::google::api::servicecontrol::v1::CheckError* CheckResponse::mutable_check_errors(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.CheckResponse.check_errors)
  return check_errors_.Mutable(index);
}
inline ::google::api::servicecontrol::v1::CheckError* CheckResponse::add_check_errors() {
  // @@protoc_insertion_point(field_add:google.api.servicecontrol.v1.CheckResponse.check_errors)
  return check_errors_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::api::servicecontrol::v1::CheckError >*
CheckResponse::mutable_check_errors() {
  // @@protoc_insertion_point(field_mutable_list:google.api.servicecontrol.v1.CheckResponse.check_errors)
  return &check_errors_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::api::servicecontrol::v1::CheckError >&
CheckResponse::check_errors() const {
  // @@protoc_insertion_point(field_list:google.api.servicecontrol.v1.CheckResponse.check_errors)
  return check_errors_;
}

// optional string service_config_id = 5;
inline void CheckResponse::clear_service_config_id() {
  service_config_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CheckResponse::service_config_id() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.CheckResponse.service_config_id)
  return service_config_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckResponse::set_service_config_id(const ::std::string& value) {
  
  service_config_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.CheckResponse.service_config_id)
}
inline void CheckResponse::set_service_config_id(const char* value) {
  
  service_config_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.servicecontrol.v1.CheckResponse.service_config_id)
}
inline void CheckResponse::set_service_config_id(const char* value,
    size_t size) {
  
  service_config_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.servicecontrol.v1.CheckResponse.service_config_id)
}
inline ::std::string* CheckResponse::mutable_service_config_id() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.CheckResponse.service_config_id)
  return service_config_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CheckResponse::release_service_config_id() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.CheckResponse.service_config_id)
  
  return service_config_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CheckResponse::unsafe_arena_release_service_config_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.servicecontrol.v1.CheckResponse.service_config_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return service_config_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CheckResponse::set_allocated_service_config_id(::std::string* service_config_id) {
  if (service_config_id != NULL) {
    
  } else {
    
  }
  service_config_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_config_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.CheckResponse.service_config_id)
}
inline void CheckResponse::unsafe_arena_set_allocated_service_config_id(
    ::std::string* service_config_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (service_config_id != NULL) {
    
  } else {
    
  }
  service_config_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      service_config_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v1.CheckResponse.service_config_id)
}

inline const CheckResponse* CheckResponse::internal_default_instance() {
  return &CheckResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// ReportRequest

// optional string service_name = 1;
inline void ReportRequest::clear_service_name() {
  service_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ReportRequest::service_name() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.ReportRequest.service_name)
  return service_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportRequest::set_service_name(const ::std::string& value) {
  
  service_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.ReportRequest.service_name)
}
inline void ReportRequest::set_service_name(const char* value) {
  
  service_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.servicecontrol.v1.ReportRequest.service_name)
}
inline void ReportRequest::set_service_name(const char* value,
    size_t size) {
  
  service_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.servicecontrol.v1.ReportRequest.service_name)
}
inline ::std::string* ReportRequest::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.ReportRequest.service_name)
  return service_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ReportRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.ReportRequest.service_name)
  
  return service_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ReportRequest::unsafe_arena_release_service_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.servicecontrol.v1.ReportRequest.service_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return service_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ReportRequest::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.ReportRequest.service_name)
}
inline void ReportRequest::unsafe_arena_set_allocated_service_name(
    ::std::string* service_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      service_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v1.ReportRequest.service_name)
}

// repeated .google.api.servicecontrol.v1.Operation operations = 2;
inline int ReportRequest::operations_size() const {
  return operations_.size();
}
inline void ReportRequest::clear_operations() {
  operations_.Clear();
}
inline const ::google::api::servicecontrol::v1::Operation& ReportRequest::operations(int index) const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.ReportRequest.operations)
  return operations_.Get(index);
}
inline ::google::api::servicecontrol::v1::Operation* ReportRequest::mutable_operations(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.ReportRequest.operations)
  return operations_.Mutable(index);
}
inline ::google::api::servicecontrol::v1::Operation* ReportRequest::add_operations() {
  // @@protoc_insertion_point(field_add:google.api.servicecontrol.v1.ReportRequest.operations)
  return operations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::api::servicecontrol::v1::Operation >*
ReportRequest::mutable_operations() {
  // @@protoc_insertion_point(field_mutable_list:google.api.servicecontrol.v1.ReportRequest.operations)
  return &operations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::api::servicecontrol::v1::Operation >&
ReportRequest::operations() const {
  // @@protoc_insertion_point(field_list:google.api.servicecontrol.v1.ReportRequest.operations)
  return operations_;
}

// optional string service_config_id = 3;
inline void ReportRequest::clear_service_config_id() {
  service_config_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ReportRequest::service_config_id() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.ReportRequest.service_config_id)
  return service_config_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportRequest::set_service_config_id(const ::std::string& value) {
  
  service_config_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.ReportRequest.service_config_id)
}
inline void ReportRequest::set_service_config_id(const char* value) {
  
  service_config_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.servicecontrol.v1.ReportRequest.service_config_id)
}
inline void ReportRequest::set_service_config_id(const char* value,
    size_t size) {
  
  service_config_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.servicecontrol.v1.ReportRequest.service_config_id)
}
inline ::std::string* ReportRequest::mutable_service_config_id() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.ReportRequest.service_config_id)
  return service_config_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ReportRequest::release_service_config_id() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.ReportRequest.service_config_id)
  
  return service_config_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ReportRequest::unsafe_arena_release_service_config_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.servicecontrol.v1.ReportRequest.service_config_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return service_config_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ReportRequest::set_allocated_service_config_id(::std::string* service_config_id) {
  if (service_config_id != NULL) {
    
  } else {
    
  }
  service_config_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_config_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.ReportRequest.service_config_id)
}
inline void ReportRequest::unsafe_arena_set_allocated_service_config_id(
    ::std::string* service_config_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (service_config_id != NULL) {
    
  } else {
    
  }
  service_config_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      service_config_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v1.ReportRequest.service_config_id)
}

inline const ReportRequest* ReportRequest::internal_default_instance() {
  return &ReportRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// ReportResponse_ReportError

// optional string operation_id = 1;
inline void ReportResponse_ReportError::clear_operation_id() {
  operation_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ReportResponse_ReportError::operation_id() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.ReportResponse.ReportError.operation_id)
  return operation_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportResponse_ReportError::set_operation_id(const ::std::string& value) {
  
  operation_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.ReportResponse.ReportError.operation_id)
}
inline void ReportResponse_ReportError::set_operation_id(const char* value) {
  
  operation_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.servicecontrol.v1.ReportResponse.ReportError.operation_id)
}
inline void ReportResponse_ReportError::set_operation_id(const char* value,
    size_t size) {
  
  operation_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.servicecontrol.v1.ReportResponse.ReportError.operation_id)
}
inline ::std::string* ReportResponse_ReportError::mutable_operation_id() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.ReportResponse.ReportError.operation_id)
  return operation_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ReportResponse_ReportError::release_operation_id() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.ReportResponse.ReportError.operation_id)
  
  return operation_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ReportResponse_ReportError::unsafe_arena_release_operation_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.servicecontrol.v1.ReportResponse.ReportError.operation_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return operation_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ReportResponse_ReportError::set_allocated_operation_id(::std::string* operation_id) {
  if (operation_id != NULL) {
    
  } else {
    
  }
  operation_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operation_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.ReportResponse.ReportError.operation_id)
}
inline void ReportResponse_ReportError::unsafe_arena_set_allocated_operation_id(
    ::std::string* operation_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (operation_id != NULL) {
    
  } else {
    
  }
  operation_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      operation_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v1.ReportResponse.ReportError.operation_id)
}

// optional .google.rpc.Status status = 2;
inline bool ReportResponse_ReportError::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
inline void ReportResponse_ReportError::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::google::rpc::Status& ReportResponse_ReportError::status() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.ReportResponse.ReportError.status)
  return status_ != NULL ? *status_
                         : *::google::rpc::Status::internal_default_instance();
}
inline ::google::rpc::Status* ReportResponse_ReportError::mutable_status() {
  
  if (status_ == NULL) {
    _slow_mutable_status();
  }
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.ReportResponse.ReportError.status)
  return status_;
}
inline ::google::rpc::Status* ReportResponse_ReportError::release_status() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.ReportResponse.ReportError.status)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_status();
  } else {
    ::google::rpc::Status* temp = status_;
    status_ = NULL;
    return temp;
  }
}
inline  void ReportResponse_ReportError::set_allocated_status(::google::rpc::Status* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete status_;
  }
  if (status != NULL) {
    if (message_arena != NULL) {
      message_arena->Own(status);
    }
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.ReportResponse.ReportError.status)
}

inline const ReportResponse_ReportError* ReportResponse_ReportError::internal_default_instance() {
  return &ReportResponse_ReportError_default_instance_.get();
}
// -------------------------------------------------------------------

// ReportResponse

// repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;
inline int ReportResponse::report_errors_size() const {
  return report_errors_.size();
}
inline void ReportResponse::clear_report_errors() {
  report_errors_.Clear();
}
inline const ::google::api::servicecontrol::v1::ReportResponse_ReportError& ReportResponse::report_errors(int index) const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.ReportResponse.report_errors)
  return report_errors_.Get(index);
}
inline ::google::api::servicecontrol::v1::ReportResponse_ReportError* ReportResponse::mutable_report_errors(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.ReportResponse.report_errors)
  return report_errors_.Mutable(index);
}
inline ::google::api::servicecontrol::v1::ReportResponse_ReportError* ReportResponse::add_report_errors() {
  // @@protoc_insertion_point(field_add:google.api.servicecontrol.v1.ReportResponse.report_errors)
  return report_errors_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::api::servicecontrol::v1::ReportResponse_ReportError >*
ReportResponse::mutable_report_errors() {
  // @@protoc_insertion_point(field_mutable_list:google.api.servicecontrol.v1.ReportResponse.report_errors)
  return &report_errors_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::api::servicecontrol::v1::ReportResponse_ReportError >&
ReportResponse::report_errors() const {
  // @@protoc_insertion_point(field_list:google.api.servicecontrol.v1.ReportResponse.report_errors)
  return report_errors_;
}

// optional string service_config_id = 2;
inline void ReportResponse::clear_service_config_id() {
  service_config_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ReportResponse::service_config_id() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.ReportResponse.service_config_id)
  return service_config_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportResponse::set_service_config_id(const ::std::string& value) {
  
  service_config_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.ReportResponse.service_config_id)
}
inline void ReportResponse::set_service_config_id(const char* value) {
  
  service_config_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.servicecontrol.v1.ReportResponse.service_config_id)
}
inline void ReportResponse::set_service_config_id(const char* value,
    size_t size) {
  
  service_config_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.servicecontrol.v1.ReportResponse.service_config_id)
}
inline ::std::string* ReportResponse::mutable_service_config_id() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.ReportResponse.service_config_id)
  return service_config_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ReportResponse::release_service_config_id() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.ReportResponse.service_config_id)
  
  return service_config_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ReportResponse::unsafe_arena_release_service_config_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.servicecontrol.v1.ReportResponse.service_config_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return service_config_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ReportResponse::set_allocated_service_config_id(::std::string* service_config_id) {
  if (service_config_id != NULL) {
    
  } else {
    
  }
  service_config_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_config_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.ReportResponse.service_config_id)
}
inline void ReportResponse::unsafe_arena_set_allocated_service_config_id(
    ::std::string* service_config_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (service_config_id != NULL) {
    
  } else {
    
  }
  service_config_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      service_config_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v1.ReportResponse.service_config_id)
}

inline const ReportResponse* ReportResponse::internal_default_instance() {
  return &ReportResponse_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace servicecontrol
}  // namespace api
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto__INCLUDED
