// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: google/protobuf/util/internal/testdata/wrappers.proto

#include "google/protobuf/util/internal/testdata/wrappers.pb.h"
#include "google/protobuf/util/internal/testdata/wrappers.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace google {
namespace protobuf {
namespace testing {

static const char* WrappersTestService_method_names[] = {
  "/google.protobuf.testing.WrappersTestService/Call",
};

std::unique_ptr< WrappersTestService::Stub> WrappersTestService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< WrappersTestService::Stub> stub(new WrappersTestService::Stub(channel));
  return stub;
}

WrappersTestService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Call_(WrappersTestService_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status WrappersTestService::Stub::Call(::grpc::ClientContext* context, const ::google::protobuf::testing::WrappersTestCases& request, ::google::protobuf::testing::WrappersTestCases* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Call_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::testing::WrappersTestCases>* WrappersTestService::Stub::AsyncCallRaw(::grpc::ClientContext* context, const ::google::protobuf::testing::WrappersTestCases& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::google::protobuf::testing::WrappersTestCases>(channel_.get(), cq, rpcmethod_Call_, context, request);
}

WrappersTestService::Service::Service() {
  (void)WrappersTestService_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      WrappersTestService_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< WrappersTestService::Service, ::google::protobuf::testing::WrappersTestCases, ::google::protobuf::testing::WrappersTestCases>(
          std::mem_fn(&WrappersTestService::Service::Call), this)));
}

WrappersTestService::Service::~Service() {
}

::grpc::Status WrappersTestService::Service::Call(::grpc::ServerContext* context, const ::google::protobuf::testing::WrappersTestCases* request, ::google::protobuf::testing::WrappersTestCases* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace protobuf
}  // namespace testing

