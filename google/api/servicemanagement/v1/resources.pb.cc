// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/servicemanagement/v1/resources.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/api/servicemanagement/v1/resources.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace api {
namespace servicemanagement {
namespace v1 {

namespace {

const ::google::protobuf::Descriptor* ManagedService_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ManagedService_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperationMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperationMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperationMetadata_Step_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperationMetadata_Step_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OperationMetadata_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Diagnostic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Diagnostic_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Diagnostic_Kind_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ConfigSource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfigSource_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfigFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfigFile_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ConfigFile_FileType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ConfigRef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfigRef_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* Rollout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rollout_reflection_ = NULL;
struct RolloutOneofInstance {
  const ::google::api::servicemanagement::v1::Rollout_TrafficPercentStrategy* traffic_percent_strategy_;
  const ::google::api::servicemanagement::v1::Rollout_DeleteServiceStrategy* delete_service_strategy_;
}* Rollout_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Rollout_TrafficPercentStrategy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rollout_TrafficPercentStrategy_reflection_ = NULL;
const ::google::protobuf::Descriptor* Rollout_TrafficPercentStrategy_PercentagesEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Rollout_DeleteServiceStrategy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rollout_DeleteServiceStrategy_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Rollout_RolloutStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto() {
  protobuf_AddDesc_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "google/api/servicemanagement/v1/resources.proto");
  GOOGLE_CHECK(file != NULL);
  ManagedService_descriptor_ = file->message_type(0);
  static const int ManagedService_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagedService, service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagedService, producer_project_id_),
  };
  ManagedService_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ManagedService_descriptor_,
      ManagedService::internal_default_instance(),
      ManagedService_offsets_,
      -1,
      -1,
      -1,
      sizeof(ManagedService),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagedService, _internal_metadata_));
  OperationMetadata_descriptor_ = file->message_type(1);
  static const int OperationMetadata_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationMetadata, resource_names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationMetadata, steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationMetadata, progress_percentage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationMetadata, start_time_),
  };
  OperationMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OperationMetadata_descriptor_,
      OperationMetadata::internal_default_instance(),
      OperationMetadata_offsets_,
      -1,
      -1,
      -1,
      sizeof(OperationMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationMetadata, _internal_metadata_));
  OperationMetadata_Step_descriptor_ = OperationMetadata_descriptor_->nested_type(0);
  static const int OperationMetadata_Step_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationMetadata_Step, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationMetadata_Step, status_),
  };
  OperationMetadata_Step_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OperationMetadata_Step_descriptor_,
      OperationMetadata_Step::internal_default_instance(),
      OperationMetadata_Step_offsets_,
      -1,
      -1,
      -1,
      sizeof(OperationMetadata_Step),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationMetadata_Step, _internal_metadata_));
  OperationMetadata_Status_descriptor_ = OperationMetadata_descriptor_->enum_type(0);
  Diagnostic_descriptor_ = file->message_type(2);
  static const int Diagnostic_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diagnostic, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diagnostic, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diagnostic, message_),
  };
  Diagnostic_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Diagnostic_descriptor_,
      Diagnostic::internal_default_instance(),
      Diagnostic_offsets_,
      -1,
      -1,
      -1,
      sizeof(Diagnostic),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diagnostic, _internal_metadata_));
  Diagnostic_Kind_descriptor_ = Diagnostic_descriptor_->enum_type(0);
  ConfigSource_descriptor_ = file->message_type(3);
  static const int ConfigSource_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigSource, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigSource, files_),
  };
  ConfigSource_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConfigSource_descriptor_,
      ConfigSource::internal_default_instance(),
      ConfigSource_offsets_,
      -1,
      -1,
      -1,
      sizeof(ConfigSource),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigSource, _internal_metadata_));
  ConfigFile_descriptor_ = file->message_type(4);
  static const int ConfigFile_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigFile, file_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigFile, file_contents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigFile, file_type_),
  };
  ConfigFile_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConfigFile_descriptor_,
      ConfigFile::internal_default_instance(),
      ConfigFile_offsets_,
      -1,
      -1,
      -1,
      sizeof(ConfigFile),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigFile, _internal_metadata_));
  ConfigFile_FileType_descriptor_ = ConfigFile_descriptor_->enum_type(0);
  ConfigRef_descriptor_ = file->message_type(5);
  static const int ConfigRef_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigRef, name_),
  };
  ConfigRef_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConfigRef_descriptor_,
      ConfigRef::internal_default_instance(),
      ConfigRef_offsets_,
      -1,
      -1,
      -1,
      sizeof(ConfigRef),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigRef, _internal_metadata_));
  ChangeReport_descriptor_ = file->message_type(6);
  static const int ChangeReport_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeReport, config_changes_),
  };
  ChangeReport_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChangeReport_descriptor_,
      ChangeReport::internal_default_instance(),
      ChangeReport_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChangeReport),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeReport, _internal_metadata_));
  Rollout_descriptor_ = file->message_type(7);
  static const int Rollout_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rollout, rollout_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rollout, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rollout, created_by_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rollout, status_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Rollout_default_oneof_instance_, traffic_percent_strategy_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Rollout_default_oneof_instance_, delete_service_strategy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rollout, service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rollout, strategy_),
  };
  Rollout_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Rollout_descriptor_,
      Rollout::internal_default_instance(),
      Rollout_offsets_,
      -1,
      -1,
      -1,
      Rollout_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rollout, _oneof_case_[0]),
      sizeof(Rollout),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rollout, _internal_metadata_));
  Rollout_TrafficPercentStrategy_descriptor_ = Rollout_descriptor_->nested_type(0);
  static const int Rollout_TrafficPercentStrategy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rollout_TrafficPercentStrategy, percentages_),
  };
  Rollout_TrafficPercentStrategy_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Rollout_TrafficPercentStrategy_descriptor_,
      Rollout_TrafficPercentStrategy::internal_default_instance(),
      Rollout_TrafficPercentStrategy_offsets_,
      -1,
      -1,
      -1,
      sizeof(Rollout_TrafficPercentStrategy),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rollout_TrafficPercentStrategy, _internal_metadata_));
  Rollout_TrafficPercentStrategy_PercentagesEntry_descriptor_ = Rollout_TrafficPercentStrategy_descriptor_->nested_type(0);
  Rollout_DeleteServiceStrategy_descriptor_ = Rollout_descriptor_->nested_type(1);
  static const int Rollout_DeleteServiceStrategy_offsets_[1] = {
  };
  Rollout_DeleteServiceStrategy_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Rollout_DeleteServiceStrategy_descriptor_,
      Rollout_DeleteServiceStrategy::internal_default_instance(),
      Rollout_DeleteServiceStrategy_offsets_,
      -1,
      -1,
      -1,
      sizeof(Rollout_DeleteServiceStrategy),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rollout_DeleteServiceStrategy, _internal_metadata_));
  Rollout_RolloutStatus_descriptor_ = Rollout_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ManagedService_descriptor_, ManagedService::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OperationMetadata_descriptor_, OperationMetadata::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OperationMetadata_Step_descriptor_, OperationMetadata_Step::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Diagnostic_descriptor_, Diagnostic::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConfigSource_descriptor_, ConfigSource::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConfigFile_descriptor_, ConfigFile::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConfigRef_descriptor_, ConfigRef::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChangeReport_descriptor_, ChangeReport::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Rollout_descriptor_, Rollout::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Rollout_TrafficPercentStrategy_descriptor_, Rollout_TrafficPercentStrategy::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Rollout_TrafficPercentStrategy_PercentagesEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            double,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
            0>::CreateDefaultInstance(
                Rollout_TrafficPercentStrategy_PercentagesEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Rollout_DeleteServiceStrategy_descriptor_, Rollout_DeleteServiceStrategy::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto() {
  ManagedService_default_instance_.Shutdown();
  delete ManagedService_reflection_;
  OperationMetadata_default_instance_.Shutdown();
  delete OperationMetadata_reflection_;
  OperationMetadata_Step_default_instance_.Shutdown();
  delete OperationMetadata_Step_reflection_;
  Diagnostic_default_instance_.Shutdown();
  delete Diagnostic_reflection_;
  ConfigSource_default_instance_.Shutdown();
  delete ConfigSource_reflection_;
  ConfigFile_default_instance_.Shutdown();
  delete ConfigFile_reflection_;
  ConfigRef_default_instance_.Shutdown();
  delete ConfigRef_reflection_;
  ChangeReport_default_instance_.Shutdown();
  delete ChangeReport_reflection_;
  Rollout_default_instance_.Shutdown();
  delete Rollout_default_oneof_instance_;
  delete Rollout_reflection_;
  Rollout_TrafficPercentStrategy_default_instance_.Shutdown();
  delete Rollout_TrafficPercentStrategy_reflection_;
  Rollout_DeleteServiceStrategy_default_instance_.Shutdown();
  delete Rollout_DeleteServiceStrategy_reflection_;
}

void protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::api::protobuf_InitDefaults_google_2fapi_2fannotations_2eproto();
  ::google::api::protobuf_InitDefaults_google_2fapi_2fconfig_5fchange_2eproto();
  ::google::api::protobuf_InitDefaults_google_2fapi_2fservice_2eproto();
  ::google::longrunning::protobuf_InitDefaults_google_2flongrunning_2foperations_2eproto();
  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2fany_2eproto();
  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2ffield_5fmask_2eproto();
  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2fstruct_2eproto();
  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2ftimestamp_2eproto();
  ::google::rpc::protobuf_InitDefaults_google_2frpc_2fstatus_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  ManagedService_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  OperationMetadata_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  OperationMetadata_Step_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Diagnostic_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ConfigSource_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ConfigFile_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ConfigRef_default_instance_.DefaultConstruct();
  ChangeReport_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Rollout_default_instance_.DefaultConstruct();
  Rollout_default_oneof_instance_ = new RolloutOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  Rollout_TrafficPercentStrategy_default_instance_.DefaultConstruct();
  Rollout_DeleteServiceStrategy_default_instance_.DefaultConstruct();
  ManagedService_default_instance_.get_mutable()->InitAsDefaultInstance();
  OperationMetadata_default_instance_.get_mutable()->InitAsDefaultInstance();
  OperationMetadata_Step_default_instance_.get_mutable()->InitAsDefaultInstance();
  Diagnostic_default_instance_.get_mutable()->InitAsDefaultInstance();
  ConfigSource_default_instance_.get_mutable()->InitAsDefaultInstance();
  ConfigFile_default_instance_.get_mutable()->InitAsDefaultInstance();
  ConfigRef_default_instance_.get_mutable()->InitAsDefaultInstance();
  ChangeReport_default_instance_.get_mutable()->InitAsDefaultInstance();
  Rollout_default_instance_.get_mutable()->InitAsDefaultInstance();
  Rollout_TrafficPercentStrategy_default_instance_.get_mutable()->InitAsDefaultInstance();
  Rollout_DeleteServiceStrategy_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto_once_);
void protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto_once_,
                 &protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto_impl);
}
void protobuf_AddDesc_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n/google/api/servicemanagement/v1/resour"
    "ces.proto\022\037google.api.servicemanagement."
    "v1\032\034google/api/annotations.proto\032\036google"
    "/api/config_change.proto\032\030google/api/ser"
    "vice.proto\032#google/longrunning/operation"
    "s.proto\032\031google/protobuf/any.proto\032 goog"
    "le/protobuf/field_mask.proto\032\034google/pro"
    "tobuf/struct.proto\032\037google/protobuf/time"
    "stamp.proto\032\027google/rpc/status.proto\"C\n\016"
    "ManagedService\022\024\n\014service_name\030\002 \001(\t\022\033\n\023"
    "producer_project_id\030\003 \001(\t\"\221\003\n\021OperationM"
    "etadata\022\026\n\016resource_names\030\001 \003(\t\022F\n\005steps"
    "\030\002 \003(\01327.google.api.servicemanagement.v1"
    ".OperationMetadata.Step\022\033\n\023progress_perc"
    "entage\030\003 \001(\005\022.\n\nstart_time\030\004 \001(\0132\032.googl"
    "e.protobuf.Timestamp\032f\n\004Step\022\023\n\013descript"
    "ion\030\002 \001(\t\022I\n\006status\030\004 \001(\01629.google.api.s"
    "ervicemanagement.v1.OperationMetadata.St"
    "atus\"g\n\006Status\022\026\n\022STATUS_UNSPECIFIED\020\000\022\010"
    "\n\004DONE\020\001\022\017\n\013NOT_STARTED\020\002\022\017\n\013IN_PROGRESS"
    "\020\003\022\n\n\006FAILED\020\004\022\r\n\tCANCELLED\020\005\"\217\001\n\nDiagno"
    "stic\022\020\n\010location\030\001 \001(\t\022>\n\004kind\030\002 \001(\01620.g"
    "oogle.api.servicemanagement.v1.Diagnosti"
    "c.Kind\022\017\n\007message\030\003 \001(\t\"\036\n\004Kind\022\013\n\007WARNI"
    "NG\020\000\022\t\n\005ERROR\020\001\"V\n\014ConfigSource\022\n\n\002id\030\005 "
    "\001(\t\022:\n\005files\030\002 \003(\0132+.google.api.servicem"
    "anagement.v1.ConfigFile\"\205\002\n\nConfigFile\022\021"
    "\n\tfile_path\030\001 \001(\t\022\025\n\rfile_contents\030\003 \001(\014"
    "\022G\n\tfile_type\030\004 \001(\01624.google.api.service"
    "management.v1.ConfigFile.FileType\"\203\001\n\010Fi"
    "leType\022\031\n\025FILE_TYPE_UNSPECIFIED\020\000\022\027\n\023SER"
    "VICE_CONFIG_YAML\020\001\022\021\n\rOPEN_API_JSON\020\002\022\021\n"
    "\rOPEN_API_YAML\020\003\022\035\n\031FILE_DESCRIPTOR_SET_"
    "PROTO\020\004\"\031\n\tConfigRef\022\014\n\004name\030\001 \001(\t\"@\n\014Ch"
    "angeReport\0220\n\016config_changes\030\001 \003(\0132\030.goo"
    "gle.api.ConfigChange\"\333\005\n\007Rollout\022\022\n\nroll"
    "out_id\030\001 \001(\t\022/\n\013create_time\030\002 \001(\0132\032.goog"
    "le.protobuf.Timestamp\022\022\n\ncreated_by\030\003 \001("
    "\t\022F\n\006status\030\004 \001(\01626.google.api.servicema"
    "nagement.v1.Rollout.RolloutStatus\022c\n\030tra"
    "ffic_percent_strategy\030\005 \001(\0132\?.google.api"
    ".servicemanagement.v1.Rollout.TrafficPer"
    "centStrategyH\000\022b\n\027delete_service_strateg"
    "y\030\310\001 \001(\0132>.google.api.servicemanagement."
    "v1.Rollout.DeleteServiceStrategyH\000\022\024\n\014se"
    "rvice_name\030\010 \001(\t\032\263\001\n\026TrafficPercentStrat"
    "egy\022e\n\013percentages\030\001 \003(\0132P.google.api.se"
    "rvicemanagement.v1.Rollout.TrafficPercen"
    "tStrategy.PercentagesEntry\0322\n\020Percentage"
    "sEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\001:\0028\001\032\027"
    "\n\025DeleteServiceStrategy\"u\n\rRolloutStatus"
    "\022\036\n\032ROLLOUT_STATUS_UNSPECIFIED\020\000\022\017\n\013IN_P"
    "ROGRESS\020\001\022\013\n\007SUCCESS\020\002\022\r\n\tCANCELLED\020\003\022\n\n"
    "\006FAILED\020\004\022\013\n\007PENDING\020\005B\n\n\010strategyB\220\001\n#c"
    "om.google.api.servicemanagement.v1B\016Reso"
    "urcesProtoP\001ZPgoogle.golang.org/genproto"
    "/googleapis/api/servicemanagement/v1;ser"
    "vicemanagement\242\002\004GASMb\006proto3", 2309);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/api/servicemanagement/v1/resources.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_AddDesc_google_2fapi_2fannotations_2eproto();
  ::google::api::protobuf_AddDesc_google_2fapi_2fconfig_5fchange_2eproto();
  ::google::api::protobuf_AddDesc_google_2fapi_2fservice_2eproto();
  ::google::longrunning::protobuf_AddDesc_google_2flongrunning_2foperations_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fany_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2ffield_5fmask_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fstruct_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2ftimestamp_2eproto();
  ::google::rpc::protobuf_AddDesc_google_2frpc_2fstatus_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto_once_);
void protobuf_AddDesc_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto_once_,
                 &protobuf_AddDesc_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto {
  StaticDescriptorInitializer_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto() {
    protobuf_AddDesc_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto();
  }
} static_descriptor_initializer_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManagedService::kServiceNameFieldNumber;
const int ManagedService::kProducerProjectIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManagedService::ManagedService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicemanagement.v1.ManagedService)
}

void ManagedService::InitAsDefaultInstance() {
}

ManagedService::ManagedService(const ManagedService& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.api.servicemanagement.v1.ManagedService)
}

void ManagedService::SharedCtor() {
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  producer_project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ManagedService::~ManagedService() {
  // @@protoc_insertion_point(destructor:google.api.servicemanagement.v1.ManagedService)
  SharedDtor();
}

void ManagedService::SharedDtor() {
  service_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  producer_project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ManagedService::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManagedService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ManagedService_descriptor_;
}

const ManagedService& ManagedService::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ManagedService> ManagedService_default_instance_;

ManagedService* ManagedService::New(::google::protobuf::Arena* arena) const {
  ManagedService* n = new ManagedService;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ManagedService::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicemanagement.v1.ManagedService)
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  producer_project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ManagedService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.servicemanagement.v1.ManagedService)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string service_name = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicemanagement.v1.ManagedService.service_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_producer_project_id;
        break;
      }

      // optional string producer_project_id = 3;
      case 3: {
        if (tag == 26) {
         parse_producer_project_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_producer_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->producer_project_id().data(), this->producer_project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicemanagement.v1.ManagedService.producer_project_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.servicemanagement.v1.ManagedService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.servicemanagement.v1.ManagedService)
  return false;
#undef DO_
}

void ManagedService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.servicemanagement.v1.ManagedService)
  // optional string service_name = 2;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.ManagedService.service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->service_name(), output);
  }

  // optional string producer_project_id = 3;
  if (this->producer_project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->producer_project_id().data(), this->producer_project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.ManagedService.producer_project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->producer_project_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.servicemanagement.v1.ManagedService)
}

::google::protobuf::uint8* ManagedService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicemanagement.v1.ManagedService)
  // optional string service_name = 2;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.ManagedService.service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->service_name(), target);
  }

  // optional string producer_project_id = 3;
  if (this->producer_project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->producer_project_id().data(), this->producer_project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.ManagedService.producer_project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->producer_project_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicemanagement.v1.ManagedService)
  return target;
}

size_t ManagedService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicemanagement.v1.ManagedService)
  size_t total_size = 0;

  // optional string service_name = 2;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_name());
  }

  // optional string producer_project_id = 3;
  if (this->producer_project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->producer_project_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManagedService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicemanagement.v1.ManagedService)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ManagedService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ManagedService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicemanagement.v1.ManagedService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicemanagement.v1.ManagedService)
    UnsafeMergeFrom(*source);
  }
}

void ManagedService::MergeFrom(const ManagedService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicemanagement.v1.ManagedService)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ManagedService::UnsafeMergeFrom(const ManagedService& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.service_name().size() > 0) {

    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  if (from.producer_project_id().size() > 0) {

    producer_project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.producer_project_id_);
  }
}

void ManagedService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicemanagement.v1.ManagedService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManagedService::CopyFrom(const ManagedService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicemanagement.v1.ManagedService)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ManagedService::IsInitialized() const {

  return true;
}

void ManagedService::Swap(ManagedService* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManagedService::InternalSwap(ManagedService* other) {
  service_name_.Swap(&other->service_name_);
  producer_project_id_.Swap(&other->producer_project_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ManagedService::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ManagedService_descriptor_;
  metadata.reflection = ManagedService_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ManagedService

// optional string service_name = 2;
void ManagedService::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ManagedService::service_name() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.ManagedService.service_name)
  return service_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagedService::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.ManagedService.service_name)
}
void ManagedService::set_service_name(const char* value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicemanagement.v1.ManagedService.service_name)
}
void ManagedService::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicemanagement.v1.ManagedService.service_name)
}
::std::string* ManagedService::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.ManagedService.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManagedService::release_service_name() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.ManagedService.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagedService::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.ManagedService.service_name)
}

// optional string producer_project_id = 3;
void ManagedService::clear_producer_project_id() {
  producer_project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ManagedService::producer_project_id() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.ManagedService.producer_project_id)
  return producer_project_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagedService::set_producer_project_id(const ::std::string& value) {
  
  producer_project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.ManagedService.producer_project_id)
}
void ManagedService::set_producer_project_id(const char* value) {
  
  producer_project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicemanagement.v1.ManagedService.producer_project_id)
}
void ManagedService::set_producer_project_id(const char* value, size_t size) {
  
  producer_project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicemanagement.v1.ManagedService.producer_project_id)
}
::std::string* ManagedService::mutable_producer_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.ManagedService.producer_project_id)
  return producer_project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManagedService::release_producer_project_id() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.ManagedService.producer_project_id)
  
  return producer_project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagedService::set_allocated_producer_project_id(::std::string* producer_project_id) {
  if (producer_project_id != NULL) {
    
  } else {
    
  }
  producer_project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), producer_project_id);
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.ManagedService.producer_project_id)
}

inline const ManagedService* ManagedService::internal_default_instance() {
  return &ManagedService_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* OperationMetadata_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperationMetadata_Status_descriptor_;
}
bool OperationMetadata_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OperationMetadata_Status OperationMetadata::STATUS_UNSPECIFIED;
const OperationMetadata_Status OperationMetadata::DONE;
const OperationMetadata_Status OperationMetadata::NOT_STARTED;
const OperationMetadata_Status OperationMetadata::IN_PROGRESS;
const OperationMetadata_Status OperationMetadata::FAILED;
const OperationMetadata_Status OperationMetadata::CANCELLED;
const OperationMetadata_Status OperationMetadata::Status_MIN;
const OperationMetadata_Status OperationMetadata::Status_MAX;
const int OperationMetadata::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OperationMetadata_Step::kDescriptionFieldNumber;
const int OperationMetadata_Step::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OperationMetadata_Step::OperationMetadata_Step()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicemanagement.v1.OperationMetadata.Step)
}

void OperationMetadata_Step::InitAsDefaultInstance() {
}

OperationMetadata_Step::OperationMetadata_Step(const OperationMetadata_Step& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.api.servicemanagement.v1.OperationMetadata.Step)
}

void OperationMetadata_Step::SharedCtor() {
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  _cached_size_ = 0;
}

OperationMetadata_Step::~OperationMetadata_Step() {
  // @@protoc_insertion_point(destructor:google.api.servicemanagement.v1.OperationMetadata.Step)
  SharedDtor();
}

void OperationMetadata_Step::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OperationMetadata_Step::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperationMetadata_Step::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperationMetadata_Step_descriptor_;
}

const OperationMetadata_Step& OperationMetadata_Step::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<OperationMetadata_Step> OperationMetadata_Step_default_instance_;

OperationMetadata_Step* OperationMetadata_Step::New(::google::protobuf::Arena* arena) const {
  OperationMetadata_Step* n = new OperationMetadata_Step;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OperationMetadata_Step::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicemanagement.v1.OperationMetadata.Step)
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

bool OperationMetadata_Step::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.servicemanagement.v1.OperationMetadata.Step)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string description = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicemanagement.v1.OperationMetadata.Step.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional .google.api.servicemanagement.v1.OperationMetadata.Status status = 4;
      case 4: {
        if (tag == 32) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::google::api::servicemanagement::v1::OperationMetadata_Status >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.servicemanagement.v1.OperationMetadata.Step)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.servicemanagement.v1.OperationMetadata.Step)
  return false;
#undef DO_
}

void OperationMetadata_Step::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.servicemanagement.v1.OperationMetadata.Step)
  // optional string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.OperationMetadata.Step.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // optional .google.api.servicemanagement.v1.OperationMetadata.Status status = 4;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.servicemanagement.v1.OperationMetadata.Step)
}

::google::protobuf::uint8* OperationMetadata_Step::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicemanagement.v1.OperationMetadata.Step)
  // optional string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.OperationMetadata.Step.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // optional .google.api.servicemanagement.v1.OperationMetadata.Status status = 4;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicemanagement.v1.OperationMetadata.Step)
  return target;
}

size_t OperationMetadata_Step::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicemanagement.v1.OperationMetadata.Step)
  size_t total_size = 0;

  // optional string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // optional .google.api.servicemanagement.v1.OperationMetadata.Status status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperationMetadata_Step::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicemanagement.v1.OperationMetadata.Step)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OperationMetadata_Step* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OperationMetadata_Step>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicemanagement.v1.OperationMetadata.Step)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicemanagement.v1.OperationMetadata.Step)
    UnsafeMergeFrom(*source);
  }
}

void OperationMetadata_Step::MergeFrom(const OperationMetadata_Step& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicemanagement.v1.OperationMetadata.Step)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void OperationMetadata_Step::UnsafeMergeFrom(const OperationMetadata_Step& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void OperationMetadata_Step::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicemanagement.v1.OperationMetadata.Step)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationMetadata_Step::CopyFrom(const OperationMetadata_Step& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicemanagement.v1.OperationMetadata.Step)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool OperationMetadata_Step::IsInitialized() const {

  return true;
}

void OperationMetadata_Step::Swap(OperationMetadata_Step* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OperationMetadata_Step::InternalSwap(OperationMetadata_Step* other) {
  description_.Swap(&other->description_);
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OperationMetadata_Step::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperationMetadata_Step_descriptor_;
  metadata.reflection = OperationMetadata_Step_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OperationMetadata::kResourceNamesFieldNumber;
const int OperationMetadata::kStepsFieldNumber;
const int OperationMetadata::kProgressPercentageFieldNumber;
const int OperationMetadata::kStartTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OperationMetadata::OperationMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicemanagement.v1.OperationMetadata)
}

void OperationMetadata::InitAsDefaultInstance() {
  start_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}

OperationMetadata::OperationMetadata(const OperationMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.api.servicemanagement.v1.OperationMetadata)
}

void OperationMetadata::SharedCtor() {
  start_time_ = NULL;
  progress_percentage_ = 0;
  _cached_size_ = 0;
}

OperationMetadata::~OperationMetadata() {
  // @@protoc_insertion_point(destructor:google.api.servicemanagement.v1.OperationMetadata)
  SharedDtor();
}

void OperationMetadata::SharedDtor() {
  if (this != &OperationMetadata_default_instance_.get()) {
    delete start_time_;
  }
}

void OperationMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperationMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperationMetadata_descriptor_;
}

const OperationMetadata& OperationMetadata::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<OperationMetadata> OperationMetadata_default_instance_;

OperationMetadata* OperationMetadata::New(::google::protobuf::Arena* arena) const {
  OperationMetadata* n = new OperationMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OperationMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicemanagement.v1.OperationMetadata)
  progress_percentage_ = 0;
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) delete start_time_;
  start_time_ = NULL;
  resource_names_.Clear();
  steps_.Clear();
}

bool OperationMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.servicemanagement.v1.OperationMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string resource_names = 1;
      case 1: {
        if (tag == 10) {
         parse_resource_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_resource_names()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->resource_names(this->resource_names_size() - 1).data(),
            this->resource_names(this->resource_names_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicemanagement.v1.OperationMetadata.resource_names"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_resource_names;
        if (input->ExpectTag(18)) goto parse_steps;
        break;
      }

      // repeated .google.api.servicemanagement.v1.OperationMetadata.Step steps = 2;
      case 2: {
        if (tag == 18) {
         parse_steps:
          DO_(input->IncrementRecursionDepth());
         parse_loop_steps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_steps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_steps;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_progress_percentage;
        break;
      }

      // optional int32 progress_percentage = 3;
      case 3: {
        if (tag == 24) {
         parse_progress_percentage:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &progress_percentage_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_start_time;
        break;
      }

      // optional .google.protobuf.Timestamp start_time = 4;
      case 4: {
        if (tag == 34) {
         parse_start_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.servicemanagement.v1.OperationMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.servicemanagement.v1.OperationMetadata)
  return false;
#undef DO_
}

void OperationMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.servicemanagement.v1.OperationMetadata)
  // repeated string resource_names = 1;
  for (int i = 0; i < this->resource_names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resource_names(i).data(), this->resource_names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.OperationMetadata.resource_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->resource_names(i), output);
  }

  // repeated .google.api.servicemanagement.v1.OperationMetadata.Step steps = 2;
  for (unsigned int i = 0, n = this->steps_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->steps(i), output);
  }

  // optional int32 progress_percentage = 3;
  if (this->progress_percentage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->progress_percentage(), output);
  }

  // optional .google.protobuf.Timestamp start_time = 4;
  if (this->has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->start_time_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.servicemanagement.v1.OperationMetadata)
}

::google::protobuf::uint8* OperationMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicemanagement.v1.OperationMetadata)
  // repeated string resource_names = 1;
  for (int i = 0; i < this->resource_names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resource_names(i).data(), this->resource_names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.OperationMetadata.resource_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->resource_names(i), target);
  }

  // repeated .google.api.servicemanagement.v1.OperationMetadata.Step steps = 2;
  for (unsigned int i = 0, n = this->steps_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->steps(i), false, target);
  }

  // optional int32 progress_percentage = 3;
  if (this->progress_percentage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->progress_percentage(), target);
  }

  // optional .google.protobuf.Timestamp start_time = 4;
  if (this->has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->start_time_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicemanagement.v1.OperationMetadata)
  return target;
}

size_t OperationMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicemanagement.v1.OperationMetadata)
  size_t total_size = 0;

  // optional int32 progress_percentage = 3;
  if (this->progress_percentage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->progress_percentage());
  }

  // optional .google.protobuf.Timestamp start_time = 4;
  if (this->has_start_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->start_time_);
  }

  // repeated string resource_names = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->resource_names_size());
  for (int i = 0; i < this->resource_names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->resource_names(i));
  }

  // repeated .google.api.servicemanagement.v1.OperationMetadata.Step steps = 2;
  {
    unsigned int count = this->steps_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->steps(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperationMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicemanagement.v1.OperationMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OperationMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OperationMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicemanagement.v1.OperationMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicemanagement.v1.OperationMetadata)
    UnsafeMergeFrom(*source);
  }
}

void OperationMetadata::MergeFrom(const OperationMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicemanagement.v1.OperationMetadata)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void OperationMetadata::UnsafeMergeFrom(const OperationMetadata& from) {
  GOOGLE_DCHECK(&from != this);
  resource_names_.UnsafeMergeFrom(from.resource_names_);
  steps_.MergeFrom(from.steps_);
  if (from.progress_percentage() != 0) {
    set_progress_percentage(from.progress_percentage());
  }
  if (from.has_start_time()) {
    mutable_start_time()->::google::protobuf::Timestamp::MergeFrom(from.start_time());
  }
}

void OperationMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicemanagement.v1.OperationMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationMetadata::CopyFrom(const OperationMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicemanagement.v1.OperationMetadata)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool OperationMetadata::IsInitialized() const {

  return true;
}

void OperationMetadata::Swap(OperationMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OperationMetadata::InternalSwap(OperationMetadata* other) {
  resource_names_.UnsafeArenaSwap(&other->resource_names_);
  steps_.UnsafeArenaSwap(&other->steps_);
  std::swap(progress_percentage_, other->progress_percentage_);
  std::swap(start_time_, other->start_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OperationMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperationMetadata_descriptor_;
  metadata.reflection = OperationMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OperationMetadata_Step

// optional string description = 2;
void OperationMetadata_Step::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OperationMetadata_Step::description() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.OperationMetadata.Step.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OperationMetadata_Step::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.OperationMetadata.Step.description)
}
void OperationMetadata_Step::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicemanagement.v1.OperationMetadata.Step.description)
}
void OperationMetadata_Step::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicemanagement.v1.OperationMetadata.Step.description)
}
::std::string* OperationMetadata_Step::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.OperationMetadata.Step.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OperationMetadata_Step::release_description() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.OperationMetadata.Step.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OperationMetadata_Step::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.OperationMetadata.Step.description)
}

// optional .google.api.servicemanagement.v1.OperationMetadata.Status status = 4;
void OperationMetadata_Step::clear_status() {
  status_ = 0;
}
::google::api::servicemanagement::v1::OperationMetadata_Status OperationMetadata_Step::status() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.OperationMetadata.Step.status)
  return static_cast< ::google::api::servicemanagement::v1::OperationMetadata_Status >(status_);
}
void OperationMetadata_Step::set_status(::google::api::servicemanagement::v1::OperationMetadata_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.OperationMetadata.Step.status)
}

inline const OperationMetadata_Step* OperationMetadata_Step::internal_default_instance() {
  return &OperationMetadata_Step_default_instance_.get();
}
// -------------------------------------------------------------------

// OperationMetadata

// repeated string resource_names = 1;
int OperationMetadata::resource_names_size() const {
  return resource_names_.size();
}
void OperationMetadata::clear_resource_names() {
  resource_names_.Clear();
}
const ::std::string& OperationMetadata::resource_names(int index) const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.OperationMetadata.resource_names)
  return resource_names_.Get(index);
}
::std::string* OperationMetadata::mutable_resource_names(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.OperationMetadata.resource_names)
  return resource_names_.Mutable(index);
}
void OperationMetadata::set_resource_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.OperationMetadata.resource_names)
  resource_names_.Mutable(index)->assign(value);
}
void OperationMetadata::set_resource_names(int index, const char* value) {
  resource_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.api.servicemanagement.v1.OperationMetadata.resource_names)
}
void OperationMetadata::set_resource_names(int index, const char* value, size_t size) {
  resource_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.api.servicemanagement.v1.OperationMetadata.resource_names)
}
::std::string* OperationMetadata::add_resource_names() {
  // @@protoc_insertion_point(field_add_mutable:google.api.servicemanagement.v1.OperationMetadata.resource_names)
  return resource_names_.Add();
}
void OperationMetadata::add_resource_names(const ::std::string& value) {
  resource_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.api.servicemanagement.v1.OperationMetadata.resource_names)
}
void OperationMetadata::add_resource_names(const char* value) {
  resource_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.api.servicemanagement.v1.OperationMetadata.resource_names)
}
void OperationMetadata::add_resource_names(const char* value, size_t size) {
  resource_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.api.servicemanagement.v1.OperationMetadata.resource_names)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
OperationMetadata::resource_names() const {
  // @@protoc_insertion_point(field_list:google.api.servicemanagement.v1.OperationMetadata.resource_names)
  return resource_names_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
OperationMetadata::mutable_resource_names() {
  // @@protoc_insertion_point(field_mutable_list:google.api.servicemanagement.v1.OperationMetadata.resource_names)
  return &resource_names_;
}

// repeated .google.api.servicemanagement.v1.OperationMetadata.Step steps = 2;
int OperationMetadata::steps_size() const {
  return steps_.size();
}
void OperationMetadata::clear_steps() {
  steps_.Clear();
}
const ::google::api::servicemanagement::v1::OperationMetadata_Step& OperationMetadata::steps(int index) const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.OperationMetadata.steps)
  return steps_.Get(index);
}
::google::api::servicemanagement::v1::OperationMetadata_Step* OperationMetadata::mutable_steps(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.OperationMetadata.steps)
  return steps_.Mutable(index);
}
::google::api::servicemanagement::v1::OperationMetadata_Step* OperationMetadata::add_steps() {
  // @@protoc_insertion_point(field_add:google.api.servicemanagement.v1.OperationMetadata.steps)
  return steps_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::api::servicemanagement::v1::OperationMetadata_Step >*
OperationMetadata::mutable_steps() {
  // @@protoc_insertion_point(field_mutable_list:google.api.servicemanagement.v1.OperationMetadata.steps)
  return &steps_;
}
const ::google::protobuf::RepeatedPtrField< ::google::api::servicemanagement::v1::OperationMetadata_Step >&
OperationMetadata::steps() const {
  // @@protoc_insertion_point(field_list:google.api.servicemanagement.v1.OperationMetadata.steps)
  return steps_;
}

// optional int32 progress_percentage = 3;
void OperationMetadata::clear_progress_percentage() {
  progress_percentage_ = 0;
}
::google::protobuf::int32 OperationMetadata::progress_percentage() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.OperationMetadata.progress_percentage)
  return progress_percentage_;
}
void OperationMetadata::set_progress_percentage(::google::protobuf::int32 value) {
  
  progress_percentage_ = value;
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.OperationMetadata.progress_percentage)
}

// optional .google.protobuf.Timestamp start_time = 4;
bool OperationMetadata::has_start_time() const {
  return this != internal_default_instance() && start_time_ != NULL;
}
void OperationMetadata::clear_start_time() {
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) delete start_time_;
  start_time_ = NULL;
}
const ::google::protobuf::Timestamp& OperationMetadata::start_time() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.OperationMetadata.start_time)
  return start_time_ != NULL ? *start_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* OperationMetadata::mutable_start_time() {
  
  if (start_time_ == NULL) {
    start_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.OperationMetadata.start_time)
  return start_time_;
}
::google::protobuf::Timestamp* OperationMetadata::release_start_time() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.OperationMetadata.start_time)
  
  ::google::protobuf::Timestamp* temp = start_time_;
  start_time_ = NULL;
  return temp;
}
void OperationMetadata::set_allocated_start_time(::google::protobuf::Timestamp* start_time) {
  delete start_time_;
  if (start_time != NULL && start_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_start_time = new ::google::protobuf::Timestamp;
    new_start_time->CopyFrom(*start_time);
    start_time = new_start_time;
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.OperationMetadata.start_time)
}

inline const OperationMetadata* OperationMetadata::internal_default_instance() {
  return &OperationMetadata_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Diagnostic_Kind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Diagnostic_Kind_descriptor_;
}
bool Diagnostic_Kind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Diagnostic_Kind Diagnostic::WARNING;
const Diagnostic_Kind Diagnostic::ERROR;
const Diagnostic_Kind Diagnostic::Kind_MIN;
const Diagnostic_Kind Diagnostic::Kind_MAX;
const int Diagnostic::Kind_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Diagnostic::kLocationFieldNumber;
const int Diagnostic::kKindFieldNumber;
const int Diagnostic::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Diagnostic::Diagnostic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicemanagement.v1.Diagnostic)
}

void Diagnostic::InitAsDefaultInstance() {
}

Diagnostic::Diagnostic(const Diagnostic& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.api.servicemanagement.v1.Diagnostic)
}

void Diagnostic::SharedCtor() {
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kind_ = 0;
  _cached_size_ = 0;
}

Diagnostic::~Diagnostic() {
  // @@protoc_insertion_point(destructor:google.api.servicemanagement.v1.Diagnostic)
  SharedDtor();
}

void Diagnostic::SharedDtor() {
  location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Diagnostic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Diagnostic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Diagnostic_descriptor_;
}

const Diagnostic& Diagnostic::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Diagnostic> Diagnostic_default_instance_;

Diagnostic* Diagnostic::New(::google::protobuf::Arena* arena) const {
  Diagnostic* n = new Diagnostic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Diagnostic::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicemanagement.v1.Diagnostic)
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kind_ = 0;
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Diagnostic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.servicemanagement.v1.Diagnostic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string location = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicemanagement.v1.Diagnostic.location"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_kind;
        break;
      }

      // optional .google.api.servicemanagement.v1.Diagnostic.Kind kind = 2;
      case 2: {
        if (tag == 16) {
         parse_kind:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_kind(static_cast< ::google::api::servicemanagement::v1::Diagnostic_Kind >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_message;
        break;
      }

      // optional string message = 3;
      case 3: {
        if (tag == 26) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicemanagement.v1.Diagnostic.message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.servicemanagement.v1.Diagnostic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.servicemanagement.v1.Diagnostic)
  return false;
#undef DO_
}

void Diagnostic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.servicemanagement.v1.Diagnostic)
  // optional string location = 1;
  if (this->location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.Diagnostic.location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->location(), output);
  }

  // optional .google.api.servicemanagement.v1.Diagnostic.Kind kind = 2;
  if (this->kind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->kind(), output);
  }

  // optional string message = 3;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.Diagnostic.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.servicemanagement.v1.Diagnostic)
}

::google::protobuf::uint8* Diagnostic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicemanagement.v1.Diagnostic)
  // optional string location = 1;
  if (this->location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.Diagnostic.location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->location(), target);
  }

  // optional .google.api.servicemanagement.v1.Diagnostic.Kind kind = 2;
  if (this->kind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->kind(), target);
  }

  // optional string message = 3;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.Diagnostic.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicemanagement.v1.Diagnostic)
  return target;
}

size_t Diagnostic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicemanagement.v1.Diagnostic)
  size_t total_size = 0;

  // optional string location = 1;
  if (this->location().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location());
  }

  // optional .google.api.servicemanagement.v1.Diagnostic.Kind kind = 2;
  if (this->kind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
  }

  // optional string message = 3;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Diagnostic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicemanagement.v1.Diagnostic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Diagnostic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Diagnostic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicemanagement.v1.Diagnostic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicemanagement.v1.Diagnostic)
    UnsafeMergeFrom(*source);
  }
}

void Diagnostic::MergeFrom(const Diagnostic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicemanagement.v1.Diagnostic)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Diagnostic::UnsafeMergeFrom(const Diagnostic& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.location().size() > 0) {

    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  if (from.kind() != 0) {
    set_kind(from.kind());
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void Diagnostic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicemanagement.v1.Diagnostic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Diagnostic::CopyFrom(const Diagnostic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicemanagement.v1.Diagnostic)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Diagnostic::IsInitialized() const {

  return true;
}

void Diagnostic::Swap(Diagnostic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Diagnostic::InternalSwap(Diagnostic* other) {
  location_.Swap(&other->location_);
  std::swap(kind_, other->kind_);
  message_.Swap(&other->message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Diagnostic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Diagnostic_descriptor_;
  metadata.reflection = Diagnostic_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Diagnostic

// optional string location = 1;
void Diagnostic::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Diagnostic::location() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.Diagnostic.location)
  return location_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Diagnostic::set_location(const ::std::string& value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.Diagnostic.location)
}
void Diagnostic::set_location(const char* value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicemanagement.v1.Diagnostic.location)
}
void Diagnostic::set_location(const char* value, size_t size) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicemanagement.v1.Diagnostic.location)
}
::std::string* Diagnostic::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.Diagnostic.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Diagnostic::release_location() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.Diagnostic.location)
  
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Diagnostic::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.Diagnostic.location)
}

// optional .google.api.servicemanagement.v1.Diagnostic.Kind kind = 2;
void Diagnostic::clear_kind() {
  kind_ = 0;
}
::google::api::servicemanagement::v1::Diagnostic_Kind Diagnostic::kind() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.Diagnostic.kind)
  return static_cast< ::google::api::servicemanagement::v1::Diagnostic_Kind >(kind_);
}
void Diagnostic::set_kind(::google::api::servicemanagement::v1::Diagnostic_Kind value) {
  
  kind_ = value;
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.Diagnostic.kind)
}

// optional string message = 3;
void Diagnostic::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Diagnostic::message() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.Diagnostic.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Diagnostic::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.Diagnostic.message)
}
void Diagnostic::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicemanagement.v1.Diagnostic.message)
}
void Diagnostic::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicemanagement.v1.Diagnostic.message)
}
::std::string* Diagnostic::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.Diagnostic.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Diagnostic::release_message() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.Diagnostic.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Diagnostic::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.Diagnostic.message)
}

inline const Diagnostic* Diagnostic::internal_default_instance() {
  return &Diagnostic_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigSource::kIdFieldNumber;
const int ConfigSource::kFilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigSource::ConfigSource()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicemanagement.v1.ConfigSource)
}

void ConfigSource::InitAsDefaultInstance() {
}

ConfigSource::ConfigSource(const ConfigSource& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.api.servicemanagement.v1.ConfigSource)
}

void ConfigSource::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ConfigSource::~ConfigSource() {
  // @@protoc_insertion_point(destructor:google.api.servicemanagement.v1.ConfigSource)
  SharedDtor();
}

void ConfigSource::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigSource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigSource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigSource_descriptor_;
}

const ConfigSource& ConfigSource::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ConfigSource> ConfigSource_default_instance_;

ConfigSource* ConfigSource::New(::google::protobuf::Arena* arena) const {
  ConfigSource* n = new ConfigSource;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConfigSource::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicemanagement.v1.ConfigSource)
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  files_.Clear();
}

bool ConfigSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.servicemanagement.v1.ConfigSource)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.api.servicemanagement.v1.ConfigFile files = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_files()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_files;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_id;
        break;
      }

      // optional string id = 5;
      case 5: {
        if (tag == 42) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicemanagement.v1.ConfigSource.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.servicemanagement.v1.ConfigSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.servicemanagement.v1.ConfigSource)
  return false;
#undef DO_
}

void ConfigSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.servicemanagement.v1.ConfigSource)
  // repeated .google.api.servicemanagement.v1.ConfigFile files = 2;
  for (unsigned int i = 0, n = this->files_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->files(i), output);
  }

  // optional string id = 5;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.ConfigSource.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.servicemanagement.v1.ConfigSource)
}

::google::protobuf::uint8* ConfigSource::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicemanagement.v1.ConfigSource)
  // repeated .google.api.servicemanagement.v1.ConfigFile files = 2;
  for (unsigned int i = 0, n = this->files_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->files(i), false, target);
  }

  // optional string id = 5;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.ConfigSource.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicemanagement.v1.ConfigSource)
  return target;
}

size_t ConfigSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicemanagement.v1.ConfigSource)
  size_t total_size = 0;

  // optional string id = 5;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // repeated .google.api.servicemanagement.v1.ConfigFile files = 2;
  {
    unsigned int count = this->files_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->files(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigSource::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicemanagement.v1.ConfigSource)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ConfigSource* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigSource>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicemanagement.v1.ConfigSource)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicemanagement.v1.ConfigSource)
    UnsafeMergeFrom(*source);
  }
}

void ConfigSource::MergeFrom(const ConfigSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicemanagement.v1.ConfigSource)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ConfigSource::UnsafeMergeFrom(const ConfigSource& from) {
  GOOGLE_DCHECK(&from != this);
  files_.MergeFrom(from.files_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void ConfigSource::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicemanagement.v1.ConfigSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigSource::CopyFrom(const ConfigSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicemanagement.v1.ConfigSource)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ConfigSource::IsInitialized() const {

  return true;
}

void ConfigSource::Swap(ConfigSource* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfigSource::InternalSwap(ConfigSource* other) {
  id_.Swap(&other->id_);
  files_.UnsafeArenaSwap(&other->files_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConfigSource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfigSource_descriptor_;
  metadata.reflection = ConfigSource_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConfigSource

// optional string id = 5;
void ConfigSource::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ConfigSource::id() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.ConfigSource.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConfigSource::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.ConfigSource.id)
}
void ConfigSource::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicemanagement.v1.ConfigSource.id)
}
void ConfigSource::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicemanagement.v1.ConfigSource.id)
}
::std::string* ConfigSource::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.ConfigSource.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConfigSource::release_id() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.ConfigSource.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConfigSource::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.ConfigSource.id)
}

// repeated .google.api.servicemanagement.v1.ConfigFile files = 2;
int ConfigSource::files_size() const {
  return files_.size();
}
void ConfigSource::clear_files() {
  files_.Clear();
}
const ::google::api::servicemanagement::v1::ConfigFile& ConfigSource::files(int index) const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.ConfigSource.files)
  return files_.Get(index);
}
::google::api::servicemanagement::v1::ConfigFile* ConfigSource::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.ConfigSource.files)
  return files_.Mutable(index);
}
::google::api::servicemanagement::v1::ConfigFile* ConfigSource::add_files() {
  // @@protoc_insertion_point(field_add:google.api.servicemanagement.v1.ConfigSource.files)
  return files_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::api::servicemanagement::v1::ConfigFile >*
ConfigSource::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:google.api.servicemanagement.v1.ConfigSource.files)
  return &files_;
}
const ::google::protobuf::RepeatedPtrField< ::google::api::servicemanagement::v1::ConfigFile >&
ConfigSource::files() const {
  // @@protoc_insertion_point(field_list:google.api.servicemanagement.v1.ConfigSource.files)
  return files_;
}

inline const ConfigSource* ConfigSource::internal_default_instance() {
  return &ConfigSource_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ConfigFile_FileType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigFile_FileType_descriptor_;
}
bool ConfigFile_FileType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ConfigFile_FileType ConfigFile::FILE_TYPE_UNSPECIFIED;
const ConfigFile_FileType ConfigFile::SERVICE_CONFIG_YAML;
const ConfigFile_FileType ConfigFile::OPEN_API_JSON;
const ConfigFile_FileType ConfigFile::OPEN_API_YAML;
const ConfigFile_FileType ConfigFile::FILE_DESCRIPTOR_SET_PROTO;
const ConfigFile_FileType ConfigFile::FileType_MIN;
const ConfigFile_FileType ConfigFile::FileType_MAX;
const int ConfigFile::FileType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigFile::kFilePathFieldNumber;
const int ConfigFile::kFileContentsFieldNumber;
const int ConfigFile::kFileTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigFile::ConfigFile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicemanagement.v1.ConfigFile)
}

void ConfigFile::InitAsDefaultInstance() {
}

ConfigFile::ConfigFile(const ConfigFile& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.api.servicemanagement.v1.ConfigFile)
}

void ConfigFile::SharedCtor() {
  file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_contents_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_type_ = 0;
  _cached_size_ = 0;
}

ConfigFile::~ConfigFile() {
  // @@protoc_insertion_point(destructor:google.api.servicemanagement.v1.ConfigFile)
  SharedDtor();
}

void ConfigFile::SharedDtor() {
  file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_contents_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigFile_descriptor_;
}

const ConfigFile& ConfigFile::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ConfigFile> ConfigFile_default_instance_;

ConfigFile* ConfigFile::New(::google::protobuf::Arena* arena) const {
  ConfigFile* n = new ConfigFile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConfigFile::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicemanagement.v1.ConfigFile)
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_contents_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_type_ = 0;
}

bool ConfigFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.servicemanagement.v1.ConfigFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_path().data(), this->file_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicemanagement.v1.ConfigFile.file_path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_file_contents;
        break;
      }

      // optional bytes file_contents = 3;
      case 3: {
        if (tag == 26) {
         parse_file_contents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_contents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_file_type;
        break;
      }

      // optional .google.api.servicemanagement.v1.ConfigFile.FileType file_type = 4;
      case 4: {
        if (tag == 32) {
         parse_file_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_file_type(static_cast< ::google::api::servicemanagement::v1::ConfigFile_FileType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.servicemanagement.v1.ConfigFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.servicemanagement.v1.ConfigFile)
  return false;
#undef DO_
}

void ConfigFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.servicemanagement.v1.ConfigFile)
  // optional string file_path = 1;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.ConfigFile.file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_path(), output);
  }

  // optional bytes file_contents = 3;
  if (this->file_contents().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->file_contents(), output);
  }

  // optional .google.api.servicemanagement.v1.ConfigFile.FileType file_type = 4;
  if (this->file_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->file_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.servicemanagement.v1.ConfigFile)
}

::google::protobuf::uint8* ConfigFile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicemanagement.v1.ConfigFile)
  // optional string file_path = 1;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.ConfigFile.file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_path(), target);
  }

  // optional bytes file_contents = 3;
  if (this->file_contents().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->file_contents(), target);
  }

  // optional .google.api.servicemanagement.v1.ConfigFile.FileType file_type = 4;
  if (this->file_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->file_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicemanagement.v1.ConfigFile)
  return target;
}

size_t ConfigFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicemanagement.v1.ConfigFile)
  size_t total_size = 0;

  // optional string file_path = 1;
  if (this->file_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_path());
  }

  // optional bytes file_contents = 3;
  if (this->file_contents().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->file_contents());
  }

  // optional .google.api.servicemanagement.v1.ConfigFile.FileType file_type = 4;
  if (this->file_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->file_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicemanagement.v1.ConfigFile)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ConfigFile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigFile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicemanagement.v1.ConfigFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicemanagement.v1.ConfigFile)
    UnsafeMergeFrom(*source);
  }
}

void ConfigFile::MergeFrom(const ConfigFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicemanagement.v1.ConfigFile)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ConfigFile::UnsafeMergeFrom(const ConfigFile& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.file_path().size() > 0) {

    file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
  if (from.file_contents().size() > 0) {

    file_contents_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_contents_);
  }
  if (from.file_type() != 0) {
    set_file_type(from.file_type());
  }
}

void ConfigFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicemanagement.v1.ConfigFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigFile::CopyFrom(const ConfigFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicemanagement.v1.ConfigFile)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ConfigFile::IsInitialized() const {

  return true;
}

void ConfigFile::Swap(ConfigFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfigFile::InternalSwap(ConfigFile* other) {
  file_path_.Swap(&other->file_path_);
  file_contents_.Swap(&other->file_contents_);
  std::swap(file_type_, other->file_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConfigFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfigFile_descriptor_;
  metadata.reflection = ConfigFile_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConfigFile

// optional string file_path = 1;
void ConfigFile::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ConfigFile::file_path() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.ConfigFile.file_path)
  return file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConfigFile::set_file_path(const ::std::string& value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.ConfigFile.file_path)
}
void ConfigFile::set_file_path(const char* value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicemanagement.v1.ConfigFile.file_path)
}
void ConfigFile::set_file_path(const char* value, size_t size) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicemanagement.v1.ConfigFile.file_path)
}
::std::string* ConfigFile::mutable_file_path() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.ConfigFile.file_path)
  return file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConfigFile::release_file_path() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.ConfigFile.file_path)
  
  return file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConfigFile::set_allocated_file_path(::std::string* file_path) {
  if (file_path != NULL) {
    
  } else {
    
  }
  file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.ConfigFile.file_path)
}

// optional bytes file_contents = 3;
void ConfigFile::clear_file_contents() {
  file_contents_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ConfigFile::file_contents() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.ConfigFile.file_contents)
  return file_contents_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConfigFile::set_file_contents(const ::std::string& value) {
  
  file_contents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.ConfigFile.file_contents)
}
void ConfigFile::set_file_contents(const char* value) {
  
  file_contents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicemanagement.v1.ConfigFile.file_contents)
}
void ConfigFile::set_file_contents(const void* value, size_t size) {
  
  file_contents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicemanagement.v1.ConfigFile.file_contents)
}
::std::string* ConfigFile::mutable_file_contents() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.ConfigFile.file_contents)
  return file_contents_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConfigFile::release_file_contents() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.ConfigFile.file_contents)
  
  return file_contents_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConfigFile::set_allocated_file_contents(::std::string* file_contents) {
  if (file_contents != NULL) {
    
  } else {
    
  }
  file_contents_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_contents);
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.ConfigFile.file_contents)
}

// optional .google.api.servicemanagement.v1.ConfigFile.FileType file_type = 4;
void ConfigFile::clear_file_type() {
  file_type_ = 0;
}
::google::api::servicemanagement::v1::ConfigFile_FileType ConfigFile::file_type() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.ConfigFile.file_type)
  return static_cast< ::google::api::servicemanagement::v1::ConfigFile_FileType >(file_type_);
}
void ConfigFile::set_file_type(::google::api::servicemanagement::v1::ConfigFile_FileType value) {
  
  file_type_ = value;
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.ConfigFile.file_type)
}

inline const ConfigFile* ConfigFile::internal_default_instance() {
  return &ConfigFile_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigRef::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigRef::ConfigRef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicemanagement.v1.ConfigRef)
}

void ConfigRef::InitAsDefaultInstance() {
}

ConfigRef::ConfigRef(const ConfigRef& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.api.servicemanagement.v1.ConfigRef)
}

void ConfigRef::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ConfigRef::~ConfigRef() {
  // @@protoc_insertion_point(destructor:google.api.servicemanagement.v1.ConfigRef)
  SharedDtor();
}

void ConfigRef::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigRef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigRef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigRef_descriptor_;
}

const ConfigRef& ConfigRef::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ConfigRef> ConfigRef_default_instance_;

ConfigRef* ConfigRef::New(::google::protobuf::Arena* arena) const {
  ConfigRef* n = new ConfigRef;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConfigRef::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicemanagement.v1.ConfigRef)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ConfigRef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.servicemanagement.v1.ConfigRef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicemanagement.v1.ConfigRef.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.servicemanagement.v1.ConfigRef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.servicemanagement.v1.ConfigRef)
  return false;
#undef DO_
}

void ConfigRef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.servicemanagement.v1.ConfigRef)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.ConfigRef.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.servicemanagement.v1.ConfigRef)
}

::google::protobuf::uint8* ConfigRef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicemanagement.v1.ConfigRef)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.ConfigRef.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicemanagement.v1.ConfigRef)
  return target;
}

size_t ConfigRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicemanagement.v1.ConfigRef)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigRef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicemanagement.v1.ConfigRef)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ConfigRef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigRef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicemanagement.v1.ConfigRef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicemanagement.v1.ConfigRef)
    UnsafeMergeFrom(*source);
  }
}

void ConfigRef::MergeFrom(const ConfigRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicemanagement.v1.ConfigRef)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ConfigRef::UnsafeMergeFrom(const ConfigRef& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void ConfigRef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicemanagement.v1.ConfigRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigRef::CopyFrom(const ConfigRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicemanagement.v1.ConfigRef)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ConfigRef::IsInitialized() const {

  return true;
}

void ConfigRef::Swap(ConfigRef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfigRef::InternalSwap(ConfigRef* other) {
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConfigRef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfigRef_descriptor_;
  metadata.reflection = ConfigRef_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConfigRef

// optional string name = 1;
void ConfigRef::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ConfigRef::name() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.ConfigRef.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConfigRef::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.ConfigRef.name)
}
void ConfigRef::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicemanagement.v1.ConfigRef.name)
}
void ConfigRef::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicemanagement.v1.ConfigRef.name)
}
::std::string* ConfigRef::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.ConfigRef.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConfigRef::release_name() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.ConfigRef.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConfigRef::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.ConfigRef.name)
}

inline const ConfigRef* ConfigRef::internal_default_instance() {
  return &ConfigRef_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeReport::kConfigChangesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeReport::ChangeReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicemanagement.v1.ChangeReport)
}

void ChangeReport::InitAsDefaultInstance() {
}

ChangeReport::ChangeReport(const ChangeReport& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.api.servicemanagement.v1.ChangeReport)
}

void ChangeReport::SharedCtor() {
  _cached_size_ = 0;
}

ChangeReport::~ChangeReport() {
  // @@protoc_insertion_point(destructor:google.api.servicemanagement.v1.ChangeReport)
  SharedDtor();
}

void ChangeReport::SharedDtor() {
}

void ChangeReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeReport_descriptor_;
}

const ChangeReport& ChangeReport::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ChangeReport> ChangeReport_default_instance_;

ChangeReport* ChangeReport::New(::google::protobuf::Arena* arena) const {
  ChangeReport* n = new ChangeReport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChangeReport::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicemanagement.v1.ChangeReport)
  config_changes_.Clear();
}

bool ChangeReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.servicemanagement.v1.ChangeReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.api.ConfigChange config_changes = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_config_changes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_config_changes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_config_changes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.servicemanagement.v1.ChangeReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.servicemanagement.v1.ChangeReport)
  return false;
#undef DO_
}

void ChangeReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.servicemanagement.v1.ChangeReport)
  // repeated .google.api.ConfigChange config_changes = 1;
  for (unsigned int i = 0, n = this->config_changes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->config_changes(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.servicemanagement.v1.ChangeReport)
}

::google::protobuf::uint8* ChangeReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicemanagement.v1.ChangeReport)
  // repeated .google.api.ConfigChange config_changes = 1;
  for (unsigned int i = 0, n = this->config_changes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->config_changes(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicemanagement.v1.ChangeReport)
  return target;
}

size_t ChangeReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicemanagement.v1.ChangeReport)
  size_t total_size = 0;

  // repeated .google.api.ConfigChange config_changes = 1;
  {
    unsigned int count = this->config_changes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config_changes(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicemanagement.v1.ChangeReport)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ChangeReport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangeReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicemanagement.v1.ChangeReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicemanagement.v1.ChangeReport)
    UnsafeMergeFrom(*source);
  }
}

void ChangeReport::MergeFrom(const ChangeReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicemanagement.v1.ChangeReport)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ChangeReport::UnsafeMergeFrom(const ChangeReport& from) {
  GOOGLE_DCHECK(&from != this);
  config_changes_.MergeFrom(from.config_changes_);
}

void ChangeReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicemanagement.v1.ChangeReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeReport::CopyFrom(const ChangeReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicemanagement.v1.ChangeReport)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ChangeReport::IsInitialized() const {

  return true;
}

void ChangeReport::Swap(ChangeReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeReport::InternalSwap(ChangeReport* other) {
  config_changes_.UnsafeArenaSwap(&other->config_changes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChangeReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeReport_descriptor_;
  metadata.reflection = ChangeReport_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChangeReport

// repeated .google.api.ConfigChange config_changes = 1;
int ChangeReport::config_changes_size() const {
  return config_changes_.size();
}
void ChangeReport::clear_config_changes() {
  config_changes_.Clear();
}
const ::google::api::ConfigChange& ChangeReport::config_changes(int index) const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.ChangeReport.config_changes)
  return config_changes_.Get(index);
}
::google::api::ConfigChange* ChangeReport::mutable_config_changes(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.ChangeReport.config_changes)
  return config_changes_.Mutable(index);
}
::google::api::ConfigChange* ChangeReport::add_config_changes() {
  // @@protoc_insertion_point(field_add:google.api.servicemanagement.v1.ChangeReport.config_changes)
  return config_changes_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::api::ConfigChange >*
ChangeReport::mutable_config_changes() {
  // @@protoc_insertion_point(field_mutable_list:google.api.servicemanagement.v1.ChangeReport.config_changes)
  return &config_changes_;
}
const ::google::protobuf::RepeatedPtrField< ::google::api::ConfigChange >&
ChangeReport::config_changes() const {
  // @@protoc_insertion_point(field_list:google.api.servicemanagement.v1.ChangeReport.config_changes)
  return config_changes_;
}

inline const ChangeReport* ChangeReport::internal_default_instance() {
  return &ChangeReport_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Rollout_RolloutStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rollout_RolloutStatus_descriptor_;
}
bool Rollout_RolloutStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Rollout_RolloutStatus Rollout::ROLLOUT_STATUS_UNSPECIFIED;
const Rollout_RolloutStatus Rollout::IN_PROGRESS;
const Rollout_RolloutStatus Rollout::SUCCESS;
const Rollout_RolloutStatus Rollout::CANCELLED;
const Rollout_RolloutStatus Rollout::FAILED;
const Rollout_RolloutStatus Rollout::PENDING;
const Rollout_RolloutStatus Rollout::RolloutStatus_MIN;
const Rollout_RolloutStatus Rollout::RolloutStatus_MAX;
const int Rollout::RolloutStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rollout_TrafficPercentStrategy::kPercentagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rollout_TrafficPercentStrategy::Rollout_TrafficPercentStrategy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicemanagement.v1.Rollout.TrafficPercentStrategy)
}

void Rollout_TrafficPercentStrategy::InitAsDefaultInstance() {
}

Rollout_TrafficPercentStrategy::Rollout_TrafficPercentStrategy(const Rollout_TrafficPercentStrategy& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.api.servicemanagement.v1.Rollout.TrafficPercentStrategy)
}

void Rollout_TrafficPercentStrategy::SharedCtor() {
  percentages_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  percentages_.SetEntryDescriptor(
      &::google::api::servicemanagement::v1::Rollout_TrafficPercentStrategy_PercentagesEntry_descriptor_);
  _cached_size_ = 0;
}

Rollout_TrafficPercentStrategy::~Rollout_TrafficPercentStrategy() {
  // @@protoc_insertion_point(destructor:google.api.servicemanagement.v1.Rollout.TrafficPercentStrategy)
  SharedDtor();
}

void Rollout_TrafficPercentStrategy::SharedDtor() {
}

void Rollout_TrafficPercentStrategy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rollout_TrafficPercentStrategy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rollout_TrafficPercentStrategy_descriptor_;
}

const Rollout_TrafficPercentStrategy& Rollout_TrafficPercentStrategy::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Rollout_TrafficPercentStrategy> Rollout_TrafficPercentStrategy_default_instance_;

Rollout_TrafficPercentStrategy* Rollout_TrafficPercentStrategy::New(::google::protobuf::Arena* arena) const {
  Rollout_TrafficPercentStrategy* n = new Rollout_TrafficPercentStrategy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Rollout_TrafficPercentStrategy::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicemanagement.v1.Rollout.TrafficPercentStrategy)
  percentages_.Clear();
}

bool Rollout_TrafficPercentStrategy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.servicemanagement.v1.Rollout.TrafficPercentStrategy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, double> percentages = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_percentages:
          Rollout_TrafficPercentStrategy_PercentagesEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, double,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
              0 >,
            ::google::protobuf::Map< ::std::string, double > > parser(&percentages_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicemanagement.v1.Rollout.TrafficPercentStrategy.PercentagesEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_percentages;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.servicemanagement.v1.Rollout.TrafficPercentStrategy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.servicemanagement.v1.Rollout.TrafficPercentStrategy)
  return false;
#undef DO_
}

void Rollout_TrafficPercentStrategy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.servicemanagement.v1.Rollout.TrafficPercentStrategy)
  // map<string, double> percentages = 1;
  if (!this->percentages().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.api.servicemanagement.v1.Rollout.TrafficPercentStrategy.PercentagesEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->percentages().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->percentages().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->percentages().begin();
          it != this->percentages().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Rollout_TrafficPercentStrategy_PercentagesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(percentages_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Rollout_TrafficPercentStrategy_PercentagesEntry> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->percentages().begin();
          it != this->percentages().end(); ++it) {
        entry.reset(percentages_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:google.api.servicemanagement.v1.Rollout.TrafficPercentStrategy)
}

::google::protobuf::uint8* Rollout_TrafficPercentStrategy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicemanagement.v1.Rollout.TrafficPercentStrategy)
  // map<string, double> percentages = 1;
  if (!this->percentages().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.api.servicemanagement.v1.Rollout.TrafficPercentStrategy.PercentagesEntry.key");
      }
    };

    if (deterministic &&
        this->percentages().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->percentages().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->percentages().begin();
          it != this->percentages().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Rollout_TrafficPercentStrategy_PercentagesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(percentages_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Rollout_TrafficPercentStrategy_PercentagesEntry> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->percentages().begin();
          it != this->percentages().end(); ++it) {
        entry.reset(percentages_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicemanagement.v1.Rollout.TrafficPercentStrategy)
  return target;
}

size_t Rollout_TrafficPercentStrategy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicemanagement.v1.Rollout.TrafficPercentStrategy)
  size_t total_size = 0;

  // map<string, double> percentages = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->percentages_size());
  {
    ::google::protobuf::scoped_ptr<Rollout_TrafficPercentStrategy_PercentagesEntry> entry;
    for (::google::protobuf::Map< ::std::string, double >::const_iterator
        it = this->percentages().begin();
        it != this->percentages().end(); ++it) {
      entry.reset(percentages_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rollout_TrafficPercentStrategy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicemanagement.v1.Rollout.TrafficPercentStrategy)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Rollout_TrafficPercentStrategy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Rollout_TrafficPercentStrategy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicemanagement.v1.Rollout.TrafficPercentStrategy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicemanagement.v1.Rollout.TrafficPercentStrategy)
    UnsafeMergeFrom(*source);
  }
}

void Rollout_TrafficPercentStrategy::MergeFrom(const Rollout_TrafficPercentStrategy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicemanagement.v1.Rollout.TrafficPercentStrategy)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Rollout_TrafficPercentStrategy::UnsafeMergeFrom(const Rollout_TrafficPercentStrategy& from) {
  GOOGLE_DCHECK(&from != this);
  percentages_.MergeFrom(from.percentages_);
}

void Rollout_TrafficPercentStrategy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicemanagement.v1.Rollout.TrafficPercentStrategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rollout_TrafficPercentStrategy::CopyFrom(const Rollout_TrafficPercentStrategy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicemanagement.v1.Rollout.TrafficPercentStrategy)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Rollout_TrafficPercentStrategy::IsInitialized() const {

  return true;
}

void Rollout_TrafficPercentStrategy::Swap(Rollout_TrafficPercentStrategy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rollout_TrafficPercentStrategy::InternalSwap(Rollout_TrafficPercentStrategy* other) {
  percentages_.Swap(&other->percentages_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Rollout_TrafficPercentStrategy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rollout_TrafficPercentStrategy_descriptor_;
  metadata.reflection = Rollout_TrafficPercentStrategy_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rollout_DeleteServiceStrategy::Rollout_DeleteServiceStrategy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicemanagement.v1.Rollout.DeleteServiceStrategy)
}

void Rollout_DeleteServiceStrategy::InitAsDefaultInstance() {
}

Rollout_DeleteServiceStrategy::Rollout_DeleteServiceStrategy(const Rollout_DeleteServiceStrategy& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.api.servicemanagement.v1.Rollout.DeleteServiceStrategy)
}

void Rollout_DeleteServiceStrategy::SharedCtor() {
  _cached_size_ = 0;
}

Rollout_DeleteServiceStrategy::~Rollout_DeleteServiceStrategy() {
  // @@protoc_insertion_point(destructor:google.api.servicemanagement.v1.Rollout.DeleteServiceStrategy)
  SharedDtor();
}

void Rollout_DeleteServiceStrategy::SharedDtor() {
}

void Rollout_DeleteServiceStrategy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rollout_DeleteServiceStrategy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rollout_DeleteServiceStrategy_descriptor_;
}

const Rollout_DeleteServiceStrategy& Rollout_DeleteServiceStrategy::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Rollout_DeleteServiceStrategy> Rollout_DeleteServiceStrategy_default_instance_;

Rollout_DeleteServiceStrategy* Rollout_DeleteServiceStrategy::New(::google::protobuf::Arena* arena) const {
  Rollout_DeleteServiceStrategy* n = new Rollout_DeleteServiceStrategy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Rollout_DeleteServiceStrategy::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicemanagement.v1.Rollout.DeleteServiceStrategy)
}

bool Rollout_DeleteServiceStrategy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.servicemanagement.v1.Rollout.DeleteServiceStrategy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.servicemanagement.v1.Rollout.DeleteServiceStrategy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.servicemanagement.v1.Rollout.DeleteServiceStrategy)
  return false;
#undef DO_
}

void Rollout_DeleteServiceStrategy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.servicemanagement.v1.Rollout.DeleteServiceStrategy)
  // @@protoc_insertion_point(serialize_end:google.api.servicemanagement.v1.Rollout.DeleteServiceStrategy)
}

::google::protobuf::uint8* Rollout_DeleteServiceStrategy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicemanagement.v1.Rollout.DeleteServiceStrategy)
  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicemanagement.v1.Rollout.DeleteServiceStrategy)
  return target;
}

size_t Rollout_DeleteServiceStrategy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicemanagement.v1.Rollout.DeleteServiceStrategy)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rollout_DeleteServiceStrategy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicemanagement.v1.Rollout.DeleteServiceStrategy)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Rollout_DeleteServiceStrategy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Rollout_DeleteServiceStrategy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicemanagement.v1.Rollout.DeleteServiceStrategy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicemanagement.v1.Rollout.DeleteServiceStrategy)
    UnsafeMergeFrom(*source);
  }
}

void Rollout_DeleteServiceStrategy::MergeFrom(const Rollout_DeleteServiceStrategy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicemanagement.v1.Rollout.DeleteServiceStrategy)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Rollout_DeleteServiceStrategy::UnsafeMergeFrom(const Rollout_DeleteServiceStrategy& from) {
  GOOGLE_DCHECK(&from != this);
}

void Rollout_DeleteServiceStrategy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicemanagement.v1.Rollout.DeleteServiceStrategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rollout_DeleteServiceStrategy::CopyFrom(const Rollout_DeleteServiceStrategy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicemanagement.v1.Rollout.DeleteServiceStrategy)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Rollout_DeleteServiceStrategy::IsInitialized() const {

  return true;
}

void Rollout_DeleteServiceStrategy::Swap(Rollout_DeleteServiceStrategy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rollout_DeleteServiceStrategy::InternalSwap(Rollout_DeleteServiceStrategy* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Rollout_DeleteServiceStrategy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rollout_DeleteServiceStrategy_descriptor_;
  metadata.reflection = Rollout_DeleteServiceStrategy_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rollout::kRolloutIdFieldNumber;
const int Rollout::kCreateTimeFieldNumber;
const int Rollout::kCreatedByFieldNumber;
const int Rollout::kStatusFieldNumber;
const int Rollout::kTrafficPercentStrategyFieldNumber;
const int Rollout::kDeleteServiceStrategyFieldNumber;
const int Rollout::kServiceNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rollout::Rollout()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicemanagement.v1.Rollout)
}

void Rollout::InitAsDefaultInstance() {
  create_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  Rollout_default_oneof_instance_->traffic_percent_strategy_ = const_cast< ::google::api::servicemanagement::v1::Rollout_TrafficPercentStrategy*>(
      ::google::api::servicemanagement::v1::Rollout_TrafficPercentStrategy::internal_default_instance());
  Rollout_default_oneof_instance_->delete_service_strategy_ = const_cast< ::google::api::servicemanagement::v1::Rollout_DeleteServiceStrategy*>(
      ::google::api::servicemanagement::v1::Rollout_DeleteServiceStrategy::internal_default_instance());
}

Rollout::Rollout(const Rollout& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.api.servicemanagement.v1.Rollout)
}

void Rollout::SharedCtor() {
  rollout_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  created_by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  create_time_ = NULL;
  status_ = 0;
  clear_has_strategy();
  _cached_size_ = 0;
}

Rollout::~Rollout() {
  // @@protoc_insertion_point(destructor:google.api.servicemanagement.v1.Rollout)
  SharedDtor();
}

void Rollout::SharedDtor() {
  rollout_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  created_by_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_strategy()) {
    clear_strategy();
  }
  if (this != &Rollout_default_instance_.get()) {
    delete create_time_;
  }
}

void Rollout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rollout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rollout_descriptor_;
}

const Rollout& Rollout::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fservicemanagement_2fv1_2fresources_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Rollout> Rollout_default_instance_;

Rollout* Rollout::New(::google::protobuf::Arena* arena) const {
  Rollout* n = new Rollout;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Rollout::clear_strategy() {
// @@protoc_insertion_point(one_of_clear_start:google.api.servicemanagement.v1.Rollout)
  switch (strategy_case()) {
    case kTrafficPercentStrategy: {
      delete strategy_.traffic_percent_strategy_;
      break;
    }
    case kDeleteServiceStrategy: {
      delete strategy_.delete_service_strategy_;
      break;
    }
    case STRATEGY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STRATEGY_NOT_SET;
}


void Rollout::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicemanagement.v1.Rollout)
  rollout_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) delete create_time_;
  create_time_ = NULL;
  created_by_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_strategy();
}

bool Rollout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.servicemanagement.v1.Rollout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string rollout_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rollout_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rollout_id().data(), this->rollout_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicemanagement.v1.Rollout.rollout_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_create_time;
        break;
      }

      // optional .google.protobuf.Timestamp create_time = 2;
      case 2: {
        if (tag == 18) {
         parse_create_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_created_by;
        break;
      }

      // optional string created_by = 3;
      case 3: {
        if (tag == 26) {
         parse_created_by:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_created_by()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->created_by().data(), this->created_by().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicemanagement.v1.Rollout.created_by"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional .google.api.servicemanagement.v1.Rollout.RolloutStatus status = 4;
      case 4: {
        if (tag == 32) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::google::api::servicemanagement::v1::Rollout_RolloutStatus >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_traffic_percent_strategy;
        break;
      }

      // optional .google.api.servicemanagement.v1.Rollout.TrafficPercentStrategy traffic_percent_strategy = 5;
      case 5: {
        if (tag == 42) {
         parse_traffic_percent_strategy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_traffic_percent_strategy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_service_name;
        break;
      }

      // optional string service_name = 8;
      case 8: {
        if (tag == 66) {
         parse_service_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicemanagement.v1.Rollout.service_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1602)) goto parse_delete_service_strategy;
        break;
      }

      // optional .google.api.servicemanagement.v1.Rollout.DeleteServiceStrategy delete_service_strategy = 200;
      case 200: {
        if (tag == 1602) {
         parse_delete_service_strategy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_service_strategy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.servicemanagement.v1.Rollout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.servicemanagement.v1.Rollout)
  return false;
#undef DO_
}

void Rollout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.servicemanagement.v1.Rollout)
  // optional string rollout_id = 1;
  if (this->rollout_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rollout_id().data(), this->rollout_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.Rollout.rollout_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->rollout_id(), output);
  }

  // optional .google.protobuf.Timestamp create_time = 2;
  if (this->has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->create_time_, output);
  }

  // optional string created_by = 3;
  if (this->created_by().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->created_by().data(), this->created_by().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.Rollout.created_by");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->created_by(), output);
  }

  // optional .google.api.servicemanagement.v1.Rollout.RolloutStatus status = 4;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  // optional .google.api.servicemanagement.v1.Rollout.TrafficPercentStrategy traffic_percent_strategy = 5;
  if (has_traffic_percent_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *strategy_.traffic_percent_strategy_, output);
  }

  // optional string service_name = 8;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.Rollout.service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->service_name(), output);
  }

  // optional .google.api.servicemanagement.v1.Rollout.DeleteServiceStrategy delete_service_strategy = 200;
  if (has_delete_service_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      200, *strategy_.delete_service_strategy_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.servicemanagement.v1.Rollout)
}

::google::protobuf::uint8* Rollout::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicemanagement.v1.Rollout)
  // optional string rollout_id = 1;
  if (this->rollout_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rollout_id().data(), this->rollout_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.Rollout.rollout_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rollout_id(), target);
  }

  // optional .google.protobuf.Timestamp create_time = 2;
  if (this->has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->create_time_, false, target);
  }

  // optional string created_by = 3;
  if (this->created_by().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->created_by().data(), this->created_by().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.Rollout.created_by");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->created_by(), target);
  }

  // optional .google.api.servicemanagement.v1.Rollout.RolloutStatus status = 4;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  // optional .google.api.servicemanagement.v1.Rollout.TrafficPercentStrategy traffic_percent_strategy = 5;
  if (has_traffic_percent_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *strategy_.traffic_percent_strategy_, false, target);
  }

  // optional string service_name = 8;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicemanagement.v1.Rollout.service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->service_name(), target);
  }

  // optional .google.api.servicemanagement.v1.Rollout.DeleteServiceStrategy delete_service_strategy = 200;
  if (has_delete_service_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        200, *strategy_.delete_service_strategy_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicemanagement.v1.Rollout)
  return target;
}

size_t Rollout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicemanagement.v1.Rollout)
  size_t total_size = 0;

  // optional string rollout_id = 1;
  if (this->rollout_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rollout_id());
  }

  // optional .google.protobuf.Timestamp create_time = 2;
  if (this->has_create_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->create_time_);
  }

  // optional string created_by = 3;
  if (this->created_by().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->created_by());
  }

  // optional .google.api.servicemanagement.v1.Rollout.RolloutStatus status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // optional string service_name = 8;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_name());
  }

  switch (strategy_case()) {
    // optional .google.api.servicemanagement.v1.Rollout.TrafficPercentStrategy traffic_percent_strategy = 5;
    case kTrafficPercentStrategy: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *strategy_.traffic_percent_strategy_);
      break;
    }
    // optional .google.api.servicemanagement.v1.Rollout.DeleteServiceStrategy delete_service_strategy = 200;
    case kDeleteServiceStrategy: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *strategy_.delete_service_strategy_);
      break;
    }
    case STRATEGY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rollout::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicemanagement.v1.Rollout)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Rollout* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Rollout>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicemanagement.v1.Rollout)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicemanagement.v1.Rollout)
    UnsafeMergeFrom(*source);
  }
}

void Rollout::MergeFrom(const Rollout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicemanagement.v1.Rollout)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Rollout::UnsafeMergeFrom(const Rollout& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.strategy_case()) {
    case kTrafficPercentStrategy: {
      mutable_traffic_percent_strategy()->::google::api::servicemanagement::v1::Rollout_TrafficPercentStrategy::MergeFrom(from.traffic_percent_strategy());
      break;
    }
    case kDeleteServiceStrategy: {
      mutable_delete_service_strategy()->::google::api::servicemanagement::v1::Rollout_DeleteServiceStrategy::MergeFrom(from.delete_service_strategy());
      break;
    }
    case STRATEGY_NOT_SET: {
      break;
    }
  }
  if (from.rollout_id().size() > 0) {

    rollout_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rollout_id_);
  }
  if (from.has_create_time()) {
    mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(from.create_time());
  }
  if (from.created_by().size() > 0) {

    created_by_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.created_by_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.service_name().size() > 0) {

    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
}

void Rollout::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicemanagement.v1.Rollout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rollout::CopyFrom(const Rollout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicemanagement.v1.Rollout)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Rollout::IsInitialized() const {

  return true;
}

void Rollout::Swap(Rollout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rollout::InternalSwap(Rollout* other) {
  rollout_id_.Swap(&other->rollout_id_);
  std::swap(create_time_, other->create_time_);
  created_by_.Swap(&other->created_by_);
  std::swap(status_, other->status_);
  service_name_.Swap(&other->service_name_);
  std::swap(strategy_, other->strategy_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Rollout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rollout_descriptor_;
  metadata.reflection = Rollout_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Rollout_TrafficPercentStrategy

// map<string, double> percentages = 1;
int Rollout_TrafficPercentStrategy::percentages_size() const {
  return percentages_.size();
}
void Rollout_TrafficPercentStrategy::clear_percentages() {
  percentages_.Clear();
}
 const ::google::protobuf::Map< ::std::string, double >&
Rollout_TrafficPercentStrategy::percentages() const {
  // @@protoc_insertion_point(field_map:google.api.servicemanagement.v1.Rollout.TrafficPercentStrategy.percentages)
  return percentages_.GetMap();
}
 ::google::protobuf::Map< ::std::string, double >*
Rollout_TrafficPercentStrategy::mutable_percentages() {
  // @@protoc_insertion_point(field_mutable_map:google.api.servicemanagement.v1.Rollout.TrafficPercentStrategy.percentages)
  return percentages_.MutableMap();
}

inline const Rollout_TrafficPercentStrategy* Rollout_TrafficPercentStrategy::internal_default_instance() {
  return &Rollout_TrafficPercentStrategy_default_instance_.get();
}
// -------------------------------------------------------------------

// Rollout_DeleteServiceStrategy

inline const Rollout_DeleteServiceStrategy* Rollout_DeleteServiceStrategy::internal_default_instance() {
  return &Rollout_DeleteServiceStrategy_default_instance_.get();
}
// -------------------------------------------------------------------

// Rollout

// optional string rollout_id = 1;
void Rollout::clear_rollout_id() {
  rollout_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Rollout::rollout_id() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.Rollout.rollout_id)
  return rollout_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Rollout::set_rollout_id(const ::std::string& value) {
  
  rollout_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.Rollout.rollout_id)
}
void Rollout::set_rollout_id(const char* value) {
  
  rollout_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicemanagement.v1.Rollout.rollout_id)
}
void Rollout::set_rollout_id(const char* value, size_t size) {
  
  rollout_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicemanagement.v1.Rollout.rollout_id)
}
::std::string* Rollout::mutable_rollout_id() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.Rollout.rollout_id)
  return rollout_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Rollout::release_rollout_id() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.Rollout.rollout_id)
  
  return rollout_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Rollout::set_allocated_rollout_id(::std::string* rollout_id) {
  if (rollout_id != NULL) {
    
  } else {
    
  }
  rollout_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rollout_id);
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.Rollout.rollout_id)
}

// optional .google.protobuf.Timestamp create_time = 2;
bool Rollout::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
void Rollout::clear_create_time() {
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) delete create_time_;
  create_time_ = NULL;
}
const ::google::protobuf::Timestamp& Rollout::create_time() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.Rollout.create_time)
  return create_time_ != NULL ? *create_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* Rollout::mutable_create_time() {
  
  if (create_time_ == NULL) {
    create_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.Rollout.create_time)
  return create_time_;
}
::google::protobuf::Timestamp* Rollout::release_create_time() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.Rollout.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
void Rollout::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  delete create_time_;
  if (create_time != NULL && create_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_create_time = new ::google::protobuf::Timestamp;
    new_create_time->CopyFrom(*create_time);
    create_time = new_create_time;
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.Rollout.create_time)
}

// optional string created_by = 3;
void Rollout::clear_created_by() {
  created_by_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Rollout::created_by() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.Rollout.created_by)
  return created_by_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Rollout::set_created_by(const ::std::string& value) {
  
  created_by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.Rollout.created_by)
}
void Rollout::set_created_by(const char* value) {
  
  created_by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicemanagement.v1.Rollout.created_by)
}
void Rollout::set_created_by(const char* value, size_t size) {
  
  created_by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicemanagement.v1.Rollout.created_by)
}
::std::string* Rollout::mutable_created_by() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.Rollout.created_by)
  return created_by_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Rollout::release_created_by() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.Rollout.created_by)
  
  return created_by_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Rollout::set_allocated_created_by(::std::string* created_by) {
  if (created_by != NULL) {
    
  } else {
    
  }
  created_by_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), created_by);
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.Rollout.created_by)
}

// optional .google.api.servicemanagement.v1.Rollout.RolloutStatus status = 4;
void Rollout::clear_status() {
  status_ = 0;
}
::google::api::servicemanagement::v1::Rollout_RolloutStatus Rollout::status() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.Rollout.status)
  return static_cast< ::google::api::servicemanagement::v1::Rollout_RolloutStatus >(status_);
}
void Rollout::set_status(::google::api::servicemanagement::v1::Rollout_RolloutStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.Rollout.status)
}

// optional .google.api.servicemanagement.v1.Rollout.TrafficPercentStrategy traffic_percent_strategy = 5;
bool Rollout::has_traffic_percent_strategy() const {
  return strategy_case() == kTrafficPercentStrategy;
}
void Rollout::set_has_traffic_percent_strategy() {
  _oneof_case_[0] = kTrafficPercentStrategy;
}
void Rollout::clear_traffic_percent_strategy() {
  if (has_traffic_percent_strategy()) {
    delete strategy_.traffic_percent_strategy_;
    clear_has_strategy();
  }
}
 const ::google::api::servicemanagement::v1::Rollout_TrafficPercentStrategy& Rollout::traffic_percent_strategy() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.Rollout.traffic_percent_strategy)
  return has_traffic_percent_strategy()
      ? *strategy_.traffic_percent_strategy_
      : ::google::api::servicemanagement::v1::Rollout_TrafficPercentStrategy::default_instance();
}
::google::api::servicemanagement::v1::Rollout_TrafficPercentStrategy* Rollout::mutable_traffic_percent_strategy() {
  if (!has_traffic_percent_strategy()) {
    clear_strategy();
    set_has_traffic_percent_strategy();
    strategy_.traffic_percent_strategy_ = new ::google::api::servicemanagement::v1::Rollout_TrafficPercentStrategy;
  }
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.Rollout.traffic_percent_strategy)
  return strategy_.traffic_percent_strategy_;
}
::google::api::servicemanagement::v1::Rollout_TrafficPercentStrategy* Rollout::release_traffic_percent_strategy() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.Rollout.traffic_percent_strategy)
  if (has_traffic_percent_strategy()) {
    clear_has_strategy();
    ::google::api::servicemanagement::v1::Rollout_TrafficPercentStrategy* temp = strategy_.traffic_percent_strategy_;
    strategy_.traffic_percent_strategy_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Rollout::set_allocated_traffic_percent_strategy(::google::api::servicemanagement::v1::Rollout_TrafficPercentStrategy* traffic_percent_strategy) {
  clear_strategy();
  if (traffic_percent_strategy) {
    set_has_traffic_percent_strategy();
    strategy_.traffic_percent_strategy_ = traffic_percent_strategy;
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.Rollout.traffic_percent_strategy)
}

// optional .google.api.servicemanagement.v1.Rollout.DeleteServiceStrategy delete_service_strategy = 200;
bool Rollout::has_delete_service_strategy() const {
  return strategy_case() == kDeleteServiceStrategy;
}
void Rollout::set_has_delete_service_strategy() {
  _oneof_case_[0] = kDeleteServiceStrategy;
}
void Rollout::clear_delete_service_strategy() {
  if (has_delete_service_strategy()) {
    delete strategy_.delete_service_strategy_;
    clear_has_strategy();
  }
}
 const ::google::api::servicemanagement::v1::Rollout_DeleteServiceStrategy& Rollout::delete_service_strategy() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.Rollout.delete_service_strategy)
  return has_delete_service_strategy()
      ? *strategy_.delete_service_strategy_
      : ::google::api::servicemanagement::v1::Rollout_DeleteServiceStrategy::default_instance();
}
::google::api::servicemanagement::v1::Rollout_DeleteServiceStrategy* Rollout::mutable_delete_service_strategy() {
  if (!has_delete_service_strategy()) {
    clear_strategy();
    set_has_delete_service_strategy();
    strategy_.delete_service_strategy_ = new ::google::api::servicemanagement::v1::Rollout_DeleteServiceStrategy;
  }
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.Rollout.delete_service_strategy)
  return strategy_.delete_service_strategy_;
}
::google::api::servicemanagement::v1::Rollout_DeleteServiceStrategy* Rollout::release_delete_service_strategy() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.Rollout.delete_service_strategy)
  if (has_delete_service_strategy()) {
    clear_has_strategy();
    ::google::api::servicemanagement::v1::Rollout_DeleteServiceStrategy* temp = strategy_.delete_service_strategy_;
    strategy_.delete_service_strategy_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Rollout::set_allocated_delete_service_strategy(::google::api::servicemanagement::v1::Rollout_DeleteServiceStrategy* delete_service_strategy) {
  clear_strategy();
  if (delete_service_strategy) {
    set_has_delete_service_strategy();
    strategy_.delete_service_strategy_ = delete_service_strategy;
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.Rollout.delete_service_strategy)
}

// optional string service_name = 8;
void Rollout::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Rollout::service_name() const {
  // @@protoc_insertion_point(field_get:google.api.servicemanagement.v1.Rollout.service_name)
  return service_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Rollout::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.servicemanagement.v1.Rollout.service_name)
}
void Rollout::set_service_name(const char* value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicemanagement.v1.Rollout.service_name)
}
void Rollout::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicemanagement.v1.Rollout.service_name)
}
::std::string* Rollout::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicemanagement.v1.Rollout.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Rollout::release_service_name() {
  // @@protoc_insertion_point(field_release:google.api.servicemanagement.v1.Rollout.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Rollout::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:google.api.servicemanagement.v1.Rollout.service_name)
}

bool Rollout::has_strategy() const {
  return strategy_case() != STRATEGY_NOT_SET;
}
void Rollout::clear_has_strategy() {
  _oneof_case_[0] = STRATEGY_NOT_SET;
}
Rollout::StrategyCase Rollout::strategy_case() const {
  return Rollout::StrategyCase(_oneof_case_[0]);
}
inline const Rollout* Rollout::internal_default_instance() {
  return &Rollout_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace servicemanagement
}  // namespace api
}  // namespace google

// @@protoc_insertion_point(global_scope)
