// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/admin/v2/bigtable_instance_admin.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/bigtable/admin/v2/bigtable_instance_admin.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace bigtable {
namespace admin {
namespace v2 {

namespace {

const ::google::protobuf::Descriptor* CreateInstanceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateInstanceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateInstanceRequest_ClustersEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GetInstanceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetInstanceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListInstancesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListInstancesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListInstancesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListInstancesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteInstanceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteInstanceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateClusterRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateClusterRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetClusterRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetClusterRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListClustersRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListClustersRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListClustersResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListClustersResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteClusterRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteClusterRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateInstanceMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateInstanceMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateClusterMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateClusterMetadata_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto() {
  protobuf_AddDesc_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "google/bigtable/admin/v2/bigtable_instance_admin.proto");
  GOOGLE_CHECK(file != NULL);
  CreateInstanceRequest_descriptor_ = file->message_type(0);
  static const int CreateInstanceRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateInstanceRequest, parent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateInstanceRequest, instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateInstanceRequest, instance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateInstanceRequest, clusters_),
  };
  CreateInstanceRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateInstanceRequest_descriptor_,
      CreateInstanceRequest::default_instance_,
      CreateInstanceRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateInstanceRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateInstanceRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateInstanceRequest, _is_default_instance_));
  CreateInstanceRequest_ClustersEntry_descriptor_ = CreateInstanceRequest_descriptor_->nested_type(0);
  GetInstanceRequest_descriptor_ = file->message_type(1);
  static const int GetInstanceRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstanceRequest, name_),
  };
  GetInstanceRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetInstanceRequest_descriptor_,
      GetInstanceRequest::default_instance_,
      GetInstanceRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetInstanceRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstanceRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstanceRequest, _is_default_instance_));
  ListInstancesRequest_descriptor_ = file->message_type(2);
  static const int ListInstancesRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListInstancesRequest, parent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListInstancesRequest, page_token_),
  };
  ListInstancesRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListInstancesRequest_descriptor_,
      ListInstancesRequest::default_instance_,
      ListInstancesRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListInstancesRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListInstancesRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListInstancesRequest, _is_default_instance_));
  ListInstancesResponse_descriptor_ = file->message_type(3);
  static const int ListInstancesResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListInstancesResponse, instances_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListInstancesResponse, failed_locations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListInstancesResponse, next_page_token_),
  };
  ListInstancesResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListInstancesResponse_descriptor_,
      ListInstancesResponse::default_instance_,
      ListInstancesResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListInstancesResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListInstancesResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListInstancesResponse, _is_default_instance_));
  DeleteInstanceRequest_descriptor_ = file->message_type(4);
  static const int DeleteInstanceRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteInstanceRequest, name_),
  };
  DeleteInstanceRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeleteInstanceRequest_descriptor_,
      DeleteInstanceRequest::default_instance_,
      DeleteInstanceRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeleteInstanceRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteInstanceRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteInstanceRequest, _is_default_instance_));
  CreateClusterRequest_descriptor_ = file->message_type(5);
  static const int CreateClusterRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClusterRequest, parent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClusterRequest, cluster_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClusterRequest, cluster_),
  };
  CreateClusterRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateClusterRequest_descriptor_,
      CreateClusterRequest::default_instance_,
      CreateClusterRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateClusterRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClusterRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClusterRequest, _is_default_instance_));
  GetClusterRequest_descriptor_ = file->message_type(6);
  static const int GetClusterRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterRequest, name_),
  };
  GetClusterRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetClusterRequest_descriptor_,
      GetClusterRequest::default_instance_,
      GetClusterRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetClusterRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterRequest, _is_default_instance_));
  ListClustersRequest_descriptor_ = file->message_type(7);
  static const int ListClustersRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListClustersRequest, parent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListClustersRequest, page_token_),
  };
  ListClustersRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListClustersRequest_descriptor_,
      ListClustersRequest::default_instance_,
      ListClustersRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListClustersRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListClustersRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListClustersRequest, _is_default_instance_));
  ListClustersResponse_descriptor_ = file->message_type(8);
  static const int ListClustersResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListClustersResponse, clusters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListClustersResponse, failed_locations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListClustersResponse, next_page_token_),
  };
  ListClustersResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListClustersResponse_descriptor_,
      ListClustersResponse::default_instance_,
      ListClustersResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListClustersResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListClustersResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListClustersResponse, _is_default_instance_));
  DeleteClusterRequest_descriptor_ = file->message_type(9);
  static const int DeleteClusterRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteClusterRequest, name_),
  };
  DeleteClusterRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeleteClusterRequest_descriptor_,
      DeleteClusterRequest::default_instance_,
      DeleteClusterRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeleteClusterRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteClusterRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteClusterRequest, _is_default_instance_));
  CreateInstanceMetadata_descriptor_ = file->message_type(10);
  static const int CreateInstanceMetadata_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateInstanceMetadata, original_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateInstanceMetadata, request_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateInstanceMetadata, finish_time_),
  };
  CreateInstanceMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateInstanceMetadata_descriptor_,
      CreateInstanceMetadata::default_instance_,
      CreateInstanceMetadata_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateInstanceMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateInstanceMetadata, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateInstanceMetadata, _is_default_instance_));
  UpdateClusterMetadata_descriptor_ = file->message_type(11);
  static const int UpdateClusterMetadata_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateClusterMetadata, original_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateClusterMetadata, request_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateClusterMetadata, finish_time_),
  };
  UpdateClusterMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UpdateClusterMetadata_descriptor_,
      UpdateClusterMetadata::default_instance_,
      UpdateClusterMetadata_offsets_,
      -1,
      -1,
      -1,
      sizeof(UpdateClusterMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateClusterMetadata, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateClusterMetadata, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateInstanceRequest_descriptor_, &CreateInstanceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        CreateInstanceRequest_ClustersEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::google::bigtable::admin::v2::Cluster,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                CreateInstanceRequest_ClustersEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetInstanceRequest_descriptor_, &GetInstanceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListInstancesRequest_descriptor_, &ListInstancesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListInstancesResponse_descriptor_, &ListInstancesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeleteInstanceRequest_descriptor_, &DeleteInstanceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateClusterRequest_descriptor_, &CreateClusterRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetClusterRequest_descriptor_, &GetClusterRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListClustersRequest_descriptor_, &ListClustersRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListClustersResponse_descriptor_, &ListClustersResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeleteClusterRequest_descriptor_, &DeleteClusterRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateInstanceMetadata_descriptor_, &CreateInstanceMetadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpdateClusterMetadata_descriptor_, &UpdateClusterMetadata::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto() {
  delete CreateInstanceRequest::default_instance_;
  delete CreateInstanceRequest_reflection_;
  delete GetInstanceRequest::default_instance_;
  delete GetInstanceRequest_reflection_;
  delete ListInstancesRequest::default_instance_;
  delete ListInstancesRequest_reflection_;
  delete ListInstancesResponse::default_instance_;
  delete ListInstancesResponse_reflection_;
  delete DeleteInstanceRequest::default_instance_;
  delete DeleteInstanceRequest_reflection_;
  delete CreateClusterRequest::default_instance_;
  delete CreateClusterRequest_reflection_;
  delete GetClusterRequest::default_instance_;
  delete GetClusterRequest_reflection_;
  delete ListClustersRequest::default_instance_;
  delete ListClustersRequest_reflection_;
  delete ListClustersResponse::default_instance_;
  delete ListClustersResponse_reflection_;
  delete DeleteClusterRequest::default_instance_;
  delete DeleteClusterRequest_reflection_;
  delete CreateInstanceMetadata::default_instance_;
  delete CreateInstanceMetadata_reflection_;
  delete UpdateClusterMetadata::default_instance_;
  delete UpdateClusterMetadata_reflection_;
}

void protobuf_AddDesc_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::api::protobuf_AddDesc_google_2fapi_2fannotations_2eproto();
  ::google::bigtable::admin::v2::protobuf_AddDesc_google_2fbigtable_2fadmin_2fv2_2finstance_2eproto();
  ::google::longrunning::protobuf_AddDesc_google_2flongrunning_2foperations_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fempty_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2ftimestamp_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n6google/bigtable/admin/v2/bigtable_inst"
    "ance_admin.proto\022\030google.bigtable.admin."
    "v2\032\034google/api/annotations.proto\032\'google"
    "/bigtable/admin/v2/instance.proto\032#googl"
    "e/longrunning/operations.proto\032\033google/p"
    "rotobuf/empty.proto\032\037google/protobuf/tim"
    "estamp.proto\"\227\002\n\025CreateInstanceRequest\022\016"
    "\n\006parent\030\001 \001(\t\022\023\n\013instance_id\030\002 \001(\t\0224\n\010i"
    "nstance\030\003 \001(\0132\".google.bigtable.admin.v2"
    ".Instance\022O\n\010clusters\030\004 \003(\0132=.google.big"
    "table.admin.v2.CreateInstanceRequest.Clu"
    "stersEntry\032R\n\rClustersEntry\022\013\n\003key\030\001 \001(\t"
    "\0220\n\005value\030\002 \001(\0132!.google.bigtable.admin."
    "v2.Cluster:\0028\001\"\"\n\022GetInstanceRequest\022\014\n\004"
    "name\030\001 \001(\t\":\n\024ListInstancesRequest\022\016\n\006pa"
    "rent\030\001 \001(\t\022\022\n\npage_token\030\002 \001(\t\"\201\001\n\025ListI"
    "nstancesResponse\0225\n\tinstances\030\001 \003(\0132\".go"
    "ogle.bigtable.admin.v2.Instance\022\030\n\020faile"
    "d_locations\030\002 \003(\t\022\027\n\017next_page_token\030\003 \001"
    "(\t\"%\n\025DeleteInstanceRequest\022\014\n\004name\030\001 \001("
    "\t\"n\n\024CreateClusterRequest\022\016\n\006parent\030\001 \001("
    "\t\022\022\n\ncluster_id\030\002 \001(\t\0222\n\007cluster\030\003 \001(\0132!"
    ".google.bigtable.admin.v2.Cluster\"!\n\021Get"
    "ClusterRequest\022\014\n\004name\030\001 \001(\t\"9\n\023ListClus"
    "tersRequest\022\016\n\006parent\030\001 \001(\t\022\022\n\npage_toke"
    "n\030\002 \001(\t\"~\n\024ListClustersResponse\0223\n\010clust"
    "ers\030\001 \003(\0132!.google.bigtable.admin.v2.Clu"
    "ster\022\030\n\020failed_locations\030\002 \003(\t\022\027\n\017next_p"
    "age_token\030\003 \001(\t\"$\n\024DeleteClusterRequest\022"
    "\014\n\004name\030\001 \001(\t\"\306\001\n\026CreateInstanceMetadata"
    "\022I\n\020original_request\030\001 \001(\0132/.google.bigt"
    "able.admin.v2.CreateInstanceRequest\0220\n\014r"
    "equest_time\030\002 \001(\0132\032.google.protobuf.Time"
    "stamp\022/\n\013finish_time\030\003 \001(\0132\032.google.prot"
    "obuf.Timestamp\"\267\001\n\025UpdateClusterMetadata"
    "\022;\n\020original_request\030\001 \001(\0132!.google.bigt"
    "able.admin.v2.Cluster\0220\n\014request_time\030\002 "
    "\001(\0132\032.google.protobuf.Timestamp\022/\n\013finis"
    "h_time\030\003 \001(\0132\032.google.protobuf.Timestamp"
    "2\333\013\n\025BigtableInstanceAdmin\022\216\001\n\016CreateIns"
    "tance\022/.google.bigtable.admin.v2.CreateI"
    "nstanceRequest\032\035.google.longrunning.Oper"
    "ation\",\202\323\344\223\002&\"!/v2/{parent=projects/*}/i"
    "nstances:\001*\022\212\001\n\013GetInstance\022,.google.big"
    "table.admin.v2.GetInstanceRequest\032\".goog"
    "le.bigtable.admin.v2.Instance\")\202\323\344\223\002#\022!/"
    "v2/{name=projects/*/instances/*}\022\233\001\n\rLis"
    "tInstances\022..google.bigtable.admin.v2.Li"
    "stInstancesRequest\032/.google.bigtable.adm"
    "in.v2.ListInstancesResponse\")\202\323\344\223\002#\022!/v2"
    "/{parent=projects/*}/instances\022\206\001\n\016Updat"
    "eInstance\022\".google.bigtable.admin.v2.Ins"
    "tance\032\".google.bigtable.admin.v2.Instanc"
    "e\",\202\323\344\223\002&\032!/v2/{name=projects/*/instance"
    "s/*}:\001*\022\204\001\n\016DeleteInstance\022/.google.bigt"
    "able.admin.v2.DeleteInstanceRequest\032\026.go"
    "ogle.protobuf.Empty\")\202\323\344\223\002#*!/v2/{name=p"
    "rojects/*/instances/*}\022\235\001\n\rCreateCluster"
    "\022..google.bigtable.admin.v2.CreateCluste"
    "rRequest\032\035.google.longrunning.Operation\""
    "=\202\323\344\223\0027\",/v2/{parent=projects/*/instance"
    "s/*}/clusters:\007cluster\022\222\001\n\nGetCluster\022+."
    "google.bigtable.admin.v2.GetClusterReque"
    "st\032!.google.bigtable.admin.v2.Cluster\"4\202"
    "\323\344\223\002.\022,/v2/{name=projects/*/instances/*/"
    "clusters/*}\022\243\001\n\014ListClusters\022-.google.bi"
    "gtable.admin.v2.ListClustersRequest\032..go"
    "ogle.bigtable.admin.v2.ListClustersRespo"
    "nse\"4\202\323\344\223\002.\022,/v2/{parent=projects/*/inst"
    "ances/*}/clusters\022\212\001\n\rUpdateCluster\022!.go"
    "ogle.bigtable.admin.v2.Cluster\032\035.google."
    "longrunning.Operation\"7\202\323\344\223\0021\032,/v2/{name"
    "=projects/*/instances/*/clusters/*}:\001*\022\215"
    "\001\n\rDeleteCluster\022..google.bigtable.admin"
    ".v2.DeleteClusterRequest\032\026.google.protob"
    "uf.Empty\"4\202\323\344\223\002.*,/v2/{name=projects/*/i"
    "nstances/*/clusters/*}B<\n\034com.google.big"
    "table.admin.v2B\032BigtableInstanceAdminPro"
    "toP\001b\006proto3", 3132);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/bigtable/admin/v2/bigtable_instance_admin.proto", &protobuf_RegisterTypes);
  CreateInstanceRequest::default_instance_ = new CreateInstanceRequest();
  GetInstanceRequest::default_instance_ = new GetInstanceRequest();
  ListInstancesRequest::default_instance_ = new ListInstancesRequest();
  ListInstancesResponse::default_instance_ = new ListInstancesResponse();
  DeleteInstanceRequest::default_instance_ = new DeleteInstanceRequest();
  CreateClusterRequest::default_instance_ = new CreateClusterRequest();
  GetClusterRequest::default_instance_ = new GetClusterRequest();
  ListClustersRequest::default_instance_ = new ListClustersRequest();
  ListClustersResponse::default_instance_ = new ListClustersResponse();
  DeleteClusterRequest::default_instance_ = new DeleteClusterRequest();
  CreateInstanceMetadata::default_instance_ = new CreateInstanceMetadata();
  UpdateClusterMetadata::default_instance_ = new UpdateClusterMetadata();
  CreateInstanceRequest::default_instance_->InitAsDefaultInstance();
  GetInstanceRequest::default_instance_->InitAsDefaultInstance();
  ListInstancesRequest::default_instance_->InitAsDefaultInstance();
  ListInstancesResponse::default_instance_->InitAsDefaultInstance();
  DeleteInstanceRequest::default_instance_->InitAsDefaultInstance();
  CreateClusterRequest::default_instance_->InitAsDefaultInstance();
  GetClusterRequest::default_instance_->InitAsDefaultInstance();
  ListClustersRequest::default_instance_->InitAsDefaultInstance();
  ListClustersResponse::default_instance_->InitAsDefaultInstance();
  DeleteClusterRequest::default_instance_->InitAsDefaultInstance();
  CreateInstanceMetadata::default_instance_->InitAsDefaultInstance();
  UpdateClusterMetadata::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto {
  StaticDescriptorInitializer_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto() {
    protobuf_AddDesc_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto();
  }
} static_descriptor_initializer_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateInstanceRequest::kParentFieldNumber;
const int CreateInstanceRequest::kInstanceIdFieldNumber;
const int CreateInstanceRequest::kInstanceFieldNumber;
const int CreateInstanceRequest::kClustersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateInstanceRequest::CreateInstanceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.admin.v2.CreateInstanceRequest)
}

void CreateInstanceRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  instance_ = const_cast< ::google::bigtable::admin::v2::Instance*>(&::google::bigtable::admin::v2::Instance::default_instance());
}

CreateInstanceRequest::CreateInstanceRequest(const CreateInstanceRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.admin.v2.CreateInstanceRequest)
}

void CreateInstanceRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instance_ = NULL;
  clusters_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  clusters_.SetEntryDescriptor(
      &::google::bigtable::admin::v2::CreateInstanceRequest_ClustersEntry_descriptor_);
}

CreateInstanceRequest::~CreateInstanceRequest() {
  // @@protoc_insertion_point(destructor:google.bigtable.admin.v2.CreateInstanceRequest)
  SharedDtor();
}

void CreateInstanceRequest::SharedDtor() {
  parent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instance_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete instance_;
  }
}

void CreateInstanceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateInstanceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateInstanceRequest_descriptor_;
}

const CreateInstanceRequest& CreateInstanceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto();
  return *default_instance_;
}

CreateInstanceRequest* CreateInstanceRequest::default_instance_ = NULL;

CreateInstanceRequest* CreateInstanceRequest::New(::google::protobuf::Arena* arena) const {
  CreateInstanceRequest* n = new CreateInstanceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateInstanceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.admin.v2.CreateInstanceRequest)
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instance_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && instance_ != NULL) delete instance_;
  instance_ = NULL;
  clusters_.Clear();
}

bool CreateInstanceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.admin.v2.CreateInstanceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string parent = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parent().data(), this->parent().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.admin.v2.CreateInstanceRequest.parent"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_instance_id;
        break;
      }

      // optional string instance_id = 2;
      case 2: {
        if (tag == 18) {
         parse_instance_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instance_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instance_id().data(), this->instance_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.admin.v2.CreateInstanceRequest.instance_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_instance;
        break;
      }

      // optional .google.bigtable.admin.v2.Instance instance = 3;
      case 3: {
        if (tag == 26) {
         parse_instance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_clusters;
        break;
      }

      // map<string, .google.bigtable.admin.v2.Cluster> clusters = 4;
      case 4: {
        if (tag == 34) {
         parse_clusters:
          DO_(input->IncrementRecursionDepth());
         parse_loop_clusters:
          CreateInstanceRequest_ClustersEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::google::bigtable::admin::v2::Cluster,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::Cluster > > parser(&clusters_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.admin.v2.CreateInstanceRequest.ClustersEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_clusters;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.admin.v2.CreateInstanceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.admin.v2.CreateInstanceRequest)
  return false;
#undef DO_
}

void CreateInstanceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.admin.v2.CreateInstanceRequest)
  // optional string parent = 1;
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), this->parent().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.v2.CreateInstanceRequest.parent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parent(), output);
  }

  // optional string instance_id = 2;
  if (this->instance_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance_id().data(), this->instance_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.v2.CreateInstanceRequest.instance_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->instance_id(), output);
  }

  // optional .google.bigtable.admin.v2.Instance instance = 3;
  if (this->has_instance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->instance_, output);
  }

  // map<string, .google.bigtable.admin.v2.Cluster> clusters = 4;
  if (!this->clusters().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::Cluster >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.bigtable.admin.v2.CreateInstanceRequest.ClustersEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->clusters().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->clusters().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::Cluster >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::Cluster >::const_iterator
          it = this->clusters().begin();
          it != this->clusters().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<CreateInstanceRequest_ClustersEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(clusters_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<CreateInstanceRequest_ClustersEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::Cluster >::const_iterator
          it = this->clusters().begin();
          it != this->clusters().end(); ++it) {
        entry.reset(clusters_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.admin.v2.CreateInstanceRequest)
}

::google::protobuf::uint8* CreateInstanceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.admin.v2.CreateInstanceRequest)
  // optional string parent = 1;
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), this->parent().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.v2.CreateInstanceRequest.parent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parent(), target);
  }

  // optional string instance_id = 2;
  if (this->instance_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance_id().data(), this->instance_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.v2.CreateInstanceRequest.instance_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->instance_id(), target);
  }

  // optional .google.bigtable.admin.v2.Instance instance = 3;
  if (this->has_instance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->instance_, false, target);
  }

  // map<string, .google.bigtable.admin.v2.Cluster> clusters = 4;
  if (!this->clusters().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::Cluster >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.bigtable.admin.v2.CreateInstanceRequest.ClustersEntry.key");
      }
    };

    if (deterministic &&
        this->clusters().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->clusters().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::Cluster >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::Cluster >::const_iterator
          it = this->clusters().begin();
          it != this->clusters().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<CreateInstanceRequest_ClustersEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(clusters_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<CreateInstanceRequest_ClustersEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::Cluster >::const_iterator
          it = this->clusters().begin();
          it != this->clusters().end(); ++it) {
        entry.reset(clusters_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.admin.v2.CreateInstanceRequest)
  return target;
}

int CreateInstanceRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.admin.v2.CreateInstanceRequest)
  int total_size = 0;

  // optional string parent = 1;
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent());
  }

  // optional string instance_id = 2;
  if (this->instance_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instance_id());
  }

  // optional .google.bigtable.admin.v2.Instance instance = 3;
  if (this->has_instance()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->instance_);
  }

  // map<string, .google.bigtable.admin.v2.Cluster> clusters = 4;
  total_size += 1 * this->clusters_size();
  {
    ::google::protobuf::scoped_ptr<CreateInstanceRequest_ClustersEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::Cluster >::const_iterator
        it = this->clusters().begin();
        it != this->clusters().end(); ++it) {
      entry.reset(clusters_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateInstanceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.admin.v2.CreateInstanceRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CreateInstanceRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateInstanceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.admin.v2.CreateInstanceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.admin.v2.CreateInstanceRequest)
    MergeFrom(*source);
  }
}

void CreateInstanceRequest::MergeFrom(const CreateInstanceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.admin.v2.CreateInstanceRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  clusters_.MergeFrom(from.clusters_);
  if (from.parent().size() > 0) {

    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  if (from.instance_id().size() > 0) {

    instance_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instance_id_);
  }
  if (from.has_instance()) {
    mutable_instance()->::google::bigtable::admin::v2::Instance::MergeFrom(from.instance());
  }
}

void CreateInstanceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.admin.v2.CreateInstanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateInstanceRequest::CopyFrom(const CreateInstanceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.admin.v2.CreateInstanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateInstanceRequest::IsInitialized() const {

  return true;
}

void CreateInstanceRequest::Swap(CreateInstanceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateInstanceRequest::InternalSwap(CreateInstanceRequest* other) {
  parent_.Swap(&other->parent_);
  instance_id_.Swap(&other->instance_id_);
  std::swap(instance_, other->instance_);
  clusters_.Swap(&other->clusters_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateInstanceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateInstanceRequest_descriptor_;
  metadata.reflection = CreateInstanceRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateInstanceRequest

// optional string parent = 1;
void CreateInstanceRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CreateInstanceRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateInstanceRequest.parent)
  return parent_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateInstanceRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.CreateInstanceRequest.parent)
}
 void CreateInstanceRequest::set_parent(const char* value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.CreateInstanceRequest.parent)
}
 void CreateInstanceRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.CreateInstanceRequest.parent)
}
 ::std::string* CreateInstanceRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CreateInstanceRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CreateInstanceRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CreateInstanceRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateInstanceRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CreateInstanceRequest.parent)
}

// optional string instance_id = 2;
void CreateInstanceRequest::clear_instance_id() {
  instance_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CreateInstanceRequest::instance_id() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateInstanceRequest.instance_id)
  return instance_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateInstanceRequest::set_instance_id(const ::std::string& value) {
  
  instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.CreateInstanceRequest.instance_id)
}
 void CreateInstanceRequest::set_instance_id(const char* value) {
  
  instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.CreateInstanceRequest.instance_id)
}
 void CreateInstanceRequest::set_instance_id(const char* value, size_t size) {
  
  instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.CreateInstanceRequest.instance_id)
}
 ::std::string* CreateInstanceRequest::mutable_instance_id() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CreateInstanceRequest.instance_id)
  return instance_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CreateInstanceRequest::release_instance_id() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CreateInstanceRequest.instance_id)
  
  return instance_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateInstanceRequest::set_allocated_instance_id(::std::string* instance_id) {
  if (instance_id != NULL) {
    
  } else {
    
  }
  instance_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance_id);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CreateInstanceRequest.instance_id)
}

// optional .google.bigtable.admin.v2.Instance instance = 3;
bool CreateInstanceRequest::has_instance() const {
  return !_is_default_instance_ && instance_ != NULL;
}
void CreateInstanceRequest::clear_instance() {
  if (GetArenaNoVirtual() == NULL && instance_ != NULL) delete instance_;
  instance_ = NULL;
}
const ::google::bigtable::admin::v2::Instance& CreateInstanceRequest::instance() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateInstanceRequest.instance)
  return instance_ != NULL ? *instance_ : *default_instance_->instance_;
}
::google::bigtable::admin::v2::Instance* CreateInstanceRequest::mutable_instance() {
  
  if (instance_ == NULL) {
    instance_ = new ::google::bigtable::admin::v2::Instance;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CreateInstanceRequest.instance)
  return instance_;
}
::google::bigtable::admin::v2::Instance* CreateInstanceRequest::release_instance() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CreateInstanceRequest.instance)
  
  ::google::bigtable::admin::v2::Instance* temp = instance_;
  instance_ = NULL;
  return temp;
}
void CreateInstanceRequest::set_allocated_instance(::google::bigtable::admin::v2::Instance* instance) {
  delete instance_;
  instance_ = instance;
  if (instance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CreateInstanceRequest.instance)
}

// map<string, .google.bigtable.admin.v2.Cluster> clusters = 4;
int CreateInstanceRequest::clusters_size() const {
  return clusters_.size();
}
void CreateInstanceRequest::clear_clusters() {
  clusters_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::Cluster >&
CreateInstanceRequest::clusters() const {
  // @@protoc_insertion_point(field_map:google.bigtable.admin.v2.CreateInstanceRequest.clusters)
  return clusters_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::Cluster >*
CreateInstanceRequest::mutable_clusters() {
  // @@protoc_insertion_point(field_mutable_map:google.bigtable.admin.v2.CreateInstanceRequest.clusters)
  return clusters_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetInstanceRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetInstanceRequest::GetInstanceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.admin.v2.GetInstanceRequest)
}

void GetInstanceRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetInstanceRequest::GetInstanceRequest(const GetInstanceRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.admin.v2.GetInstanceRequest)
}

void GetInstanceRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetInstanceRequest::~GetInstanceRequest() {
  // @@protoc_insertion_point(destructor:google.bigtable.admin.v2.GetInstanceRequest)
  SharedDtor();
}

void GetInstanceRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GetInstanceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInstanceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetInstanceRequest_descriptor_;
}

const GetInstanceRequest& GetInstanceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto();
  return *default_instance_;
}

GetInstanceRequest* GetInstanceRequest::default_instance_ = NULL;

GetInstanceRequest* GetInstanceRequest::New(::google::protobuf::Arena* arena) const {
  GetInstanceRequest* n = new GetInstanceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetInstanceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.admin.v2.GetInstanceRequest)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetInstanceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.admin.v2.GetInstanceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.admin.v2.GetInstanceRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.admin.v2.GetInstanceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.admin.v2.GetInstanceRequest)
  return false;
#undef DO_
}

void GetInstanceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.admin.v2.GetInstanceRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.v2.GetInstanceRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.admin.v2.GetInstanceRequest)
}

::google::protobuf::uint8* GetInstanceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.admin.v2.GetInstanceRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.v2.GetInstanceRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.admin.v2.GetInstanceRequest)
  return target;
}

int GetInstanceRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.admin.v2.GetInstanceRequest)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInstanceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.admin.v2.GetInstanceRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetInstanceRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetInstanceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.admin.v2.GetInstanceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.admin.v2.GetInstanceRequest)
    MergeFrom(*source);
  }
}

void GetInstanceRequest::MergeFrom(const GetInstanceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.admin.v2.GetInstanceRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void GetInstanceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.admin.v2.GetInstanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInstanceRequest::CopyFrom(const GetInstanceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.admin.v2.GetInstanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInstanceRequest::IsInitialized() const {

  return true;
}

void GetInstanceRequest::Swap(GetInstanceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetInstanceRequest::InternalSwap(GetInstanceRequest* other) {
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetInstanceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetInstanceRequest_descriptor_;
  metadata.reflection = GetInstanceRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetInstanceRequest

// optional string name = 1;
void GetInstanceRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetInstanceRequest::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.GetInstanceRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetInstanceRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.GetInstanceRequest.name)
}
 void GetInstanceRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.GetInstanceRequest.name)
}
 void GetInstanceRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.GetInstanceRequest.name)
}
 ::std::string* GetInstanceRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.GetInstanceRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetInstanceRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.GetInstanceRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetInstanceRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.GetInstanceRequest.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListInstancesRequest::kParentFieldNumber;
const int ListInstancesRequest::kPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListInstancesRequest::ListInstancesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.admin.v2.ListInstancesRequest)
}

void ListInstancesRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ListInstancesRequest::ListInstancesRequest(const ListInstancesRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.admin.v2.ListInstancesRequest)
}

void ListInstancesRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ListInstancesRequest::~ListInstancesRequest() {
  // @@protoc_insertion_point(destructor:google.bigtable.admin.v2.ListInstancesRequest)
  SharedDtor();
}

void ListInstancesRequest::SharedDtor() {
  parent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ListInstancesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListInstancesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListInstancesRequest_descriptor_;
}

const ListInstancesRequest& ListInstancesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto();
  return *default_instance_;
}

ListInstancesRequest* ListInstancesRequest::default_instance_ = NULL;

ListInstancesRequest* ListInstancesRequest::New(::google::protobuf::Arena* arena) const {
  ListInstancesRequest* n = new ListInstancesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListInstancesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.admin.v2.ListInstancesRequest)
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ListInstancesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.admin.v2.ListInstancesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string parent = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parent().data(), this->parent().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.admin.v2.ListInstancesRequest.parent"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_page_token;
        break;
      }

      // optional string page_token = 2;
      case 2: {
        if (tag == 18) {
         parse_page_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), this->page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.admin.v2.ListInstancesRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.admin.v2.ListInstancesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.admin.v2.ListInstancesRequest)
  return false;
#undef DO_
}

void ListInstancesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.admin.v2.ListInstancesRequest)
  // optional string parent = 1;
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), this->parent().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.v2.ListInstancesRequest.parent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parent(), output);
  }

  // optional string page_token = 2;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.v2.ListInstancesRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.admin.v2.ListInstancesRequest)
}

::google::protobuf::uint8* ListInstancesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.admin.v2.ListInstancesRequest)
  // optional string parent = 1;
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), this->parent().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.v2.ListInstancesRequest.parent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parent(), target);
  }

  // optional string page_token = 2;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.v2.ListInstancesRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.admin.v2.ListInstancesRequest)
  return target;
}

int ListInstancesRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.admin.v2.ListInstancesRequest)
  int total_size = 0;

  // optional string parent = 1;
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent());
  }

  // optional string page_token = 2;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListInstancesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.admin.v2.ListInstancesRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ListInstancesRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ListInstancesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.admin.v2.ListInstancesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.admin.v2.ListInstancesRequest)
    MergeFrom(*source);
  }
}

void ListInstancesRequest::MergeFrom(const ListInstancesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.admin.v2.ListInstancesRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.parent().size() > 0) {

    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  if (from.page_token().size() > 0) {

    page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token_);
  }
}

void ListInstancesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.admin.v2.ListInstancesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListInstancesRequest::CopyFrom(const ListInstancesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.admin.v2.ListInstancesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListInstancesRequest::IsInitialized() const {

  return true;
}

void ListInstancesRequest::Swap(ListInstancesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListInstancesRequest::InternalSwap(ListInstancesRequest* other) {
  parent_.Swap(&other->parent_);
  page_token_.Swap(&other->page_token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListInstancesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListInstancesRequest_descriptor_;
  metadata.reflection = ListInstancesRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListInstancesRequest

// optional string parent = 1;
void ListInstancesRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ListInstancesRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListInstancesRequest.parent)
  return parent_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ListInstancesRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListInstancesRequest.parent)
}
 void ListInstancesRequest::set_parent(const char* value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.ListInstancesRequest.parent)
}
 void ListInstancesRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.ListInstancesRequest.parent)
}
 ::std::string* ListInstancesRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListInstancesRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ListInstancesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.ListInstancesRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ListInstancesRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.ListInstancesRequest.parent)
}

// optional string page_token = 2;
void ListInstancesRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ListInstancesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListInstancesRequest.page_token)
  return page_token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ListInstancesRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListInstancesRequest.page_token)
}
 void ListInstancesRequest::set_page_token(const char* value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.ListInstancesRequest.page_token)
}
 void ListInstancesRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.ListInstancesRequest.page_token)
}
 ::std::string* ListInstancesRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListInstancesRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ListInstancesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.ListInstancesRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ListInstancesRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.ListInstancesRequest.page_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListInstancesResponse::kInstancesFieldNumber;
const int ListInstancesResponse::kFailedLocationsFieldNumber;
const int ListInstancesResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListInstancesResponse::ListInstancesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.admin.v2.ListInstancesResponse)
}

void ListInstancesResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ListInstancesResponse::ListInstancesResponse(const ListInstancesResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.admin.v2.ListInstancesResponse)
}

void ListInstancesResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ListInstancesResponse::~ListInstancesResponse() {
  // @@protoc_insertion_point(destructor:google.bigtable.admin.v2.ListInstancesResponse)
  SharedDtor();
}

void ListInstancesResponse::SharedDtor() {
  next_page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ListInstancesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListInstancesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListInstancesResponse_descriptor_;
}

const ListInstancesResponse& ListInstancesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto();
  return *default_instance_;
}

ListInstancesResponse* ListInstancesResponse::default_instance_ = NULL;

ListInstancesResponse* ListInstancesResponse::New(::google::protobuf::Arena* arena) const {
  ListInstancesResponse* n = new ListInstancesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListInstancesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.admin.v2.ListInstancesResponse)
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instances_.Clear();
  failed_locations_.Clear();
}

bool ListInstancesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.admin.v2.ListInstancesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.bigtable.admin.v2.Instance instances = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_instances:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_instances()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_instances;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_failed_locations;
        break;
      }

      // repeated string failed_locations = 2;
      case 2: {
        if (tag == 18) {
         parse_failed_locations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_failed_locations()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->failed_locations(this->failed_locations_size() - 1).data(),
            this->failed_locations(this->failed_locations_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.admin.v2.ListInstancesResponse.failed_locations"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_failed_locations;
        if (input->ExpectTag(26)) goto parse_next_page_token;
        break;
      }

      // optional string next_page_token = 3;
      case 3: {
        if (tag == 26) {
         parse_next_page_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), this->next_page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.admin.v2.ListInstancesResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.admin.v2.ListInstancesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.admin.v2.ListInstancesResponse)
  return false;
#undef DO_
}

void ListInstancesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.admin.v2.ListInstancesResponse)
  // repeated .google.bigtable.admin.v2.Instance instances = 1;
  for (unsigned int i = 0, n = this->instances_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->instances(i), output);
  }

  // repeated string failed_locations = 2;
  for (int i = 0; i < this->failed_locations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->failed_locations(i).data(), this->failed_locations(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.v2.ListInstancesResponse.failed_locations");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->failed_locations(i), output);
  }

  // optional string next_page_token = 3;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.v2.ListInstancesResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->next_page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.admin.v2.ListInstancesResponse)
}

::google::protobuf::uint8* ListInstancesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.admin.v2.ListInstancesResponse)
  // repeated .google.bigtable.admin.v2.Instance instances = 1;
  for (unsigned int i = 0, n = this->instances_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->instances(i), false, target);
  }

  // repeated string failed_locations = 2;
  for (int i = 0; i < this->failed_locations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->failed_locations(i).data(), this->failed_locations(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.v2.ListInstancesResponse.failed_locations");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->failed_locations(i), target);
  }

  // optional string next_page_token = 3;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.v2.ListInstancesResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->next_page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.admin.v2.ListInstancesResponse)
  return target;
}

int ListInstancesResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.admin.v2.ListInstancesResponse)
  int total_size = 0;

  // optional string next_page_token = 3;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  // repeated .google.bigtable.admin.v2.Instance instances = 1;
  total_size += 1 * this->instances_size();
  for (int i = 0; i < this->instances_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instances(i));
  }

  // repeated string failed_locations = 2;
  total_size += 1 * this->failed_locations_size();
  for (int i = 0; i < this->failed_locations_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->failed_locations(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListInstancesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.admin.v2.ListInstancesResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ListInstancesResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ListInstancesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.admin.v2.ListInstancesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.admin.v2.ListInstancesResponse)
    MergeFrom(*source);
  }
}

void ListInstancesResponse::MergeFrom(const ListInstancesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.admin.v2.ListInstancesResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  instances_.MergeFrom(from.instances_);
  failed_locations_.MergeFrom(from.failed_locations_);
  if (from.next_page_token().size() > 0) {

    next_page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token_);
  }
}

void ListInstancesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.admin.v2.ListInstancesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListInstancesResponse::CopyFrom(const ListInstancesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.admin.v2.ListInstancesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListInstancesResponse::IsInitialized() const {

  return true;
}

void ListInstancesResponse::Swap(ListInstancesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListInstancesResponse::InternalSwap(ListInstancesResponse* other) {
  instances_.UnsafeArenaSwap(&other->instances_);
  failed_locations_.UnsafeArenaSwap(&other->failed_locations_);
  next_page_token_.Swap(&other->next_page_token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListInstancesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListInstancesResponse_descriptor_;
  metadata.reflection = ListInstancesResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListInstancesResponse

// repeated .google.bigtable.admin.v2.Instance instances = 1;
int ListInstancesResponse::instances_size() const {
  return instances_.size();
}
void ListInstancesResponse::clear_instances() {
  instances_.Clear();
}
const ::google::bigtable::admin::v2::Instance& ListInstancesResponse::instances(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListInstancesResponse.instances)
  return instances_.Get(index);
}
::google::bigtable::admin::v2::Instance* ListInstancesResponse::mutable_instances(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListInstancesResponse.instances)
  return instances_.Mutable(index);
}
::google::bigtable::admin::v2::Instance* ListInstancesResponse::add_instances() {
  // @@protoc_insertion_point(field_add:google.bigtable.admin.v2.ListInstancesResponse.instances)
  return instances_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::bigtable::admin::v2::Instance >*
ListInstancesResponse::mutable_instances() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.admin.v2.ListInstancesResponse.instances)
  return &instances_;
}
const ::google::protobuf::RepeatedPtrField< ::google::bigtable::admin::v2::Instance >&
ListInstancesResponse::instances() const {
  // @@protoc_insertion_point(field_list:google.bigtable.admin.v2.ListInstancesResponse.instances)
  return instances_;
}

// repeated string failed_locations = 2;
int ListInstancesResponse::failed_locations_size() const {
  return failed_locations_.size();
}
void ListInstancesResponse::clear_failed_locations() {
  failed_locations_.Clear();
}
 const ::std::string& ListInstancesResponse::failed_locations(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListInstancesResponse.failed_locations)
  return failed_locations_.Get(index);
}
 ::std::string* ListInstancesResponse::mutable_failed_locations(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListInstancesResponse.failed_locations)
  return failed_locations_.Mutable(index);
}
 void ListInstancesResponse::set_failed_locations(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListInstancesResponse.failed_locations)
  failed_locations_.Mutable(index)->assign(value);
}
 void ListInstancesResponse::set_failed_locations(int index, const char* value) {
  failed_locations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.ListInstancesResponse.failed_locations)
}
 void ListInstancesResponse::set_failed_locations(int index, const char* value, size_t size) {
  failed_locations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.ListInstancesResponse.failed_locations)
}
 ::std::string* ListInstancesResponse::add_failed_locations() {
  // @@protoc_insertion_point(field_add_mutable:google.bigtable.admin.v2.ListInstancesResponse.failed_locations)
  return failed_locations_.Add();
}
 void ListInstancesResponse::add_failed_locations(const ::std::string& value) {
  failed_locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.bigtable.admin.v2.ListInstancesResponse.failed_locations)
}
 void ListInstancesResponse::add_failed_locations(const char* value) {
  failed_locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.bigtable.admin.v2.ListInstancesResponse.failed_locations)
}
 void ListInstancesResponse::add_failed_locations(const char* value, size_t size) {
  failed_locations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.bigtable.admin.v2.ListInstancesResponse.failed_locations)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
ListInstancesResponse::failed_locations() const {
  // @@protoc_insertion_point(field_list:google.bigtable.admin.v2.ListInstancesResponse.failed_locations)
  return failed_locations_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
ListInstancesResponse::mutable_failed_locations() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.admin.v2.ListInstancesResponse.failed_locations)
  return &failed_locations_;
}

// optional string next_page_token = 3;
void ListInstancesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ListInstancesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListInstancesResponse.next_page_token)
  return next_page_token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ListInstancesResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListInstancesResponse.next_page_token)
}
 void ListInstancesResponse::set_next_page_token(const char* value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.ListInstancesResponse.next_page_token)
}
 void ListInstancesResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.ListInstancesResponse.next_page_token)
}
 ::std::string* ListInstancesResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListInstancesResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ListInstancesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.ListInstancesResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ListInstancesResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.ListInstancesResponse.next_page_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteInstanceRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteInstanceRequest::DeleteInstanceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.admin.v2.DeleteInstanceRequest)
}

void DeleteInstanceRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DeleteInstanceRequest::DeleteInstanceRequest(const DeleteInstanceRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.admin.v2.DeleteInstanceRequest)
}

void DeleteInstanceRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DeleteInstanceRequest::~DeleteInstanceRequest() {
  // @@protoc_insertion_point(destructor:google.bigtable.admin.v2.DeleteInstanceRequest)
  SharedDtor();
}

void DeleteInstanceRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DeleteInstanceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteInstanceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteInstanceRequest_descriptor_;
}

const DeleteInstanceRequest& DeleteInstanceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto();
  return *default_instance_;
}

DeleteInstanceRequest* DeleteInstanceRequest::default_instance_ = NULL;

DeleteInstanceRequest* DeleteInstanceRequest::New(::google::protobuf::Arena* arena) const {
  DeleteInstanceRequest* n = new DeleteInstanceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteInstanceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.admin.v2.DeleteInstanceRequest)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeleteInstanceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.admin.v2.DeleteInstanceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.admin.v2.DeleteInstanceRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.admin.v2.DeleteInstanceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.admin.v2.DeleteInstanceRequest)
  return false;
#undef DO_
}

void DeleteInstanceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.admin.v2.DeleteInstanceRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.v2.DeleteInstanceRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.admin.v2.DeleteInstanceRequest)
}

::google::protobuf::uint8* DeleteInstanceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.admin.v2.DeleteInstanceRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.v2.DeleteInstanceRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.admin.v2.DeleteInstanceRequest)
  return target;
}

int DeleteInstanceRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.admin.v2.DeleteInstanceRequest)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteInstanceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.admin.v2.DeleteInstanceRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DeleteInstanceRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteInstanceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.admin.v2.DeleteInstanceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.admin.v2.DeleteInstanceRequest)
    MergeFrom(*source);
  }
}

void DeleteInstanceRequest::MergeFrom(const DeleteInstanceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.admin.v2.DeleteInstanceRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void DeleteInstanceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.admin.v2.DeleteInstanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteInstanceRequest::CopyFrom(const DeleteInstanceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.admin.v2.DeleteInstanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteInstanceRequest::IsInitialized() const {

  return true;
}

void DeleteInstanceRequest::Swap(DeleteInstanceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteInstanceRequest::InternalSwap(DeleteInstanceRequest* other) {
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteInstanceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteInstanceRequest_descriptor_;
  metadata.reflection = DeleteInstanceRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteInstanceRequest

// optional string name = 1;
void DeleteInstanceRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DeleteInstanceRequest::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.DeleteInstanceRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeleteInstanceRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.DeleteInstanceRequest.name)
}
 void DeleteInstanceRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.DeleteInstanceRequest.name)
}
 void DeleteInstanceRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.DeleteInstanceRequest.name)
}
 ::std::string* DeleteInstanceRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.DeleteInstanceRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeleteInstanceRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.DeleteInstanceRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeleteInstanceRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.DeleteInstanceRequest.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateClusterRequest::kParentFieldNumber;
const int CreateClusterRequest::kClusterIdFieldNumber;
const int CreateClusterRequest::kClusterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateClusterRequest::CreateClusterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.admin.v2.CreateClusterRequest)
}

void CreateClusterRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  cluster_ = const_cast< ::google::bigtable::admin::v2::Cluster*>(&::google::bigtable::admin::v2::Cluster::default_instance());
}

CreateClusterRequest::CreateClusterRequest(const CreateClusterRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.admin.v2.CreateClusterRequest)
}

void CreateClusterRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_ = NULL;
}

CreateClusterRequest::~CreateClusterRequest() {
  // @@protoc_insertion_point(destructor:google.bigtable.admin.v2.CreateClusterRequest)
  SharedDtor();
}

void CreateClusterRequest::SharedDtor() {
  parent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete cluster_;
  }
}

void CreateClusterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateClusterRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateClusterRequest_descriptor_;
}

const CreateClusterRequest& CreateClusterRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto();
  return *default_instance_;
}

CreateClusterRequest* CreateClusterRequest::default_instance_ = NULL;

CreateClusterRequest* CreateClusterRequest::New(::google::protobuf::Arena* arena) const {
  CreateClusterRequest* n = new CreateClusterRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateClusterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.admin.v2.CreateClusterRequest)
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && cluster_ != NULL) delete cluster_;
  cluster_ = NULL;
}

bool CreateClusterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.admin.v2.CreateClusterRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string parent = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parent().data(), this->parent().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.admin.v2.CreateClusterRequest.parent"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cluster_id;
        break;
      }

      // optional string cluster_id = 2;
      case 2: {
        if (tag == 18) {
         parse_cluster_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.admin.v2.CreateClusterRequest.cluster_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cluster;
        break;
      }

      // optional .google.bigtable.admin.v2.Cluster cluster = 3;
      case 3: {
        if (tag == 26) {
         parse_cluster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cluster()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.admin.v2.CreateClusterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.admin.v2.CreateClusterRequest)
  return false;
#undef DO_
}

void CreateClusterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.admin.v2.CreateClusterRequest)
  // optional string parent = 1;
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), this->parent().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.v2.CreateClusterRequest.parent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parent(), output);
  }

  // optional string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.v2.CreateClusterRequest.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_id(), output);
  }

  // optional .google.bigtable.admin.v2.Cluster cluster = 3;
  if (this->has_cluster()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->cluster_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.admin.v2.CreateClusterRequest)
}

::google::protobuf::uint8* CreateClusterRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.admin.v2.CreateClusterRequest)
  // optional string parent = 1;
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), this->parent().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.v2.CreateClusterRequest.parent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parent(), target);
  }

  // optional string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.v2.CreateClusterRequest.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_id(), target);
  }

  // optional .google.bigtable.admin.v2.Cluster cluster = 3;
  if (this->has_cluster()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->cluster_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.admin.v2.CreateClusterRequest)
  return target;
}

int CreateClusterRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.admin.v2.CreateClusterRequest)
  int total_size = 0;

  // optional string parent = 1;
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent());
  }

  // optional string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // optional .google.bigtable.admin.v2.Cluster cluster = 3;
  if (this->has_cluster()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cluster_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateClusterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.admin.v2.CreateClusterRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CreateClusterRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateClusterRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.admin.v2.CreateClusterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.admin.v2.CreateClusterRequest)
    MergeFrom(*source);
  }
}

void CreateClusterRequest::MergeFrom(const CreateClusterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.admin.v2.CreateClusterRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.parent().size() > 0) {

    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_cluster()) {
    mutable_cluster()->::google::bigtable::admin::v2::Cluster::MergeFrom(from.cluster());
  }
}

void CreateClusterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.admin.v2.CreateClusterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateClusterRequest::CopyFrom(const CreateClusterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.admin.v2.CreateClusterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateClusterRequest::IsInitialized() const {

  return true;
}

void CreateClusterRequest::Swap(CreateClusterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateClusterRequest::InternalSwap(CreateClusterRequest* other) {
  parent_.Swap(&other->parent_);
  cluster_id_.Swap(&other->cluster_id_);
  std::swap(cluster_, other->cluster_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateClusterRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateClusterRequest_descriptor_;
  metadata.reflection = CreateClusterRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateClusterRequest

// optional string parent = 1;
void CreateClusterRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CreateClusterRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateClusterRequest.parent)
  return parent_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateClusterRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.CreateClusterRequest.parent)
}
 void CreateClusterRequest::set_parent(const char* value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.CreateClusterRequest.parent)
}
 void CreateClusterRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.CreateClusterRequest.parent)
}
 ::std::string* CreateClusterRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CreateClusterRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CreateClusterRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CreateClusterRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateClusterRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CreateClusterRequest.parent)
}

// optional string cluster_id = 2;
void CreateClusterRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CreateClusterRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateClusterRequest.cluster_id)
  return cluster_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateClusterRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.CreateClusterRequest.cluster_id)
}
 void CreateClusterRequest::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.CreateClusterRequest.cluster_id)
}
 void CreateClusterRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.CreateClusterRequest.cluster_id)
}
 ::std::string* CreateClusterRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CreateClusterRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CreateClusterRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CreateClusterRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateClusterRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CreateClusterRequest.cluster_id)
}

// optional .google.bigtable.admin.v2.Cluster cluster = 3;
bool CreateClusterRequest::has_cluster() const {
  return !_is_default_instance_ && cluster_ != NULL;
}
void CreateClusterRequest::clear_cluster() {
  if (GetArenaNoVirtual() == NULL && cluster_ != NULL) delete cluster_;
  cluster_ = NULL;
}
const ::google::bigtable::admin::v2::Cluster& CreateClusterRequest::cluster() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateClusterRequest.cluster)
  return cluster_ != NULL ? *cluster_ : *default_instance_->cluster_;
}
::google::bigtable::admin::v2::Cluster* CreateClusterRequest::mutable_cluster() {
  
  if (cluster_ == NULL) {
    cluster_ = new ::google::bigtable::admin::v2::Cluster;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CreateClusterRequest.cluster)
  return cluster_;
}
::google::bigtable::admin::v2::Cluster* CreateClusterRequest::release_cluster() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CreateClusterRequest.cluster)
  
  ::google::bigtable::admin::v2::Cluster* temp = cluster_;
  cluster_ = NULL;
  return temp;
}
void CreateClusterRequest::set_allocated_cluster(::google::bigtable::admin::v2::Cluster* cluster) {
  delete cluster_;
  cluster_ = cluster;
  if (cluster) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CreateClusterRequest.cluster)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetClusterRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetClusterRequest::GetClusterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.admin.v2.GetClusterRequest)
}

void GetClusterRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetClusterRequest::GetClusterRequest(const GetClusterRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.admin.v2.GetClusterRequest)
}

void GetClusterRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetClusterRequest::~GetClusterRequest() {
  // @@protoc_insertion_point(destructor:google.bigtable.admin.v2.GetClusterRequest)
  SharedDtor();
}

void GetClusterRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GetClusterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetClusterRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetClusterRequest_descriptor_;
}

const GetClusterRequest& GetClusterRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto();
  return *default_instance_;
}

GetClusterRequest* GetClusterRequest::default_instance_ = NULL;

GetClusterRequest* GetClusterRequest::New(::google::protobuf::Arena* arena) const {
  GetClusterRequest* n = new GetClusterRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetClusterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.admin.v2.GetClusterRequest)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetClusterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.admin.v2.GetClusterRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.admin.v2.GetClusterRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.admin.v2.GetClusterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.admin.v2.GetClusterRequest)
  return false;
#undef DO_
}

void GetClusterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.admin.v2.GetClusterRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.v2.GetClusterRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.admin.v2.GetClusterRequest)
}

::google::protobuf::uint8* GetClusterRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.admin.v2.GetClusterRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.v2.GetClusterRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.admin.v2.GetClusterRequest)
  return target;
}

int GetClusterRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.admin.v2.GetClusterRequest)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetClusterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.admin.v2.GetClusterRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetClusterRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetClusterRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.admin.v2.GetClusterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.admin.v2.GetClusterRequest)
    MergeFrom(*source);
  }
}

void GetClusterRequest::MergeFrom(const GetClusterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.admin.v2.GetClusterRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void GetClusterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.admin.v2.GetClusterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClusterRequest::CopyFrom(const GetClusterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.admin.v2.GetClusterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClusterRequest::IsInitialized() const {

  return true;
}

void GetClusterRequest::Swap(GetClusterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetClusterRequest::InternalSwap(GetClusterRequest* other) {
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetClusterRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetClusterRequest_descriptor_;
  metadata.reflection = GetClusterRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetClusterRequest

// optional string name = 1;
void GetClusterRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetClusterRequest::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.GetClusterRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetClusterRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.GetClusterRequest.name)
}
 void GetClusterRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.GetClusterRequest.name)
}
 void GetClusterRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.GetClusterRequest.name)
}
 ::std::string* GetClusterRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.GetClusterRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetClusterRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.GetClusterRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetClusterRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.GetClusterRequest.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListClustersRequest::kParentFieldNumber;
const int ListClustersRequest::kPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListClustersRequest::ListClustersRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.admin.v2.ListClustersRequest)
}

void ListClustersRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ListClustersRequest::ListClustersRequest(const ListClustersRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.admin.v2.ListClustersRequest)
}

void ListClustersRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ListClustersRequest::~ListClustersRequest() {
  // @@protoc_insertion_point(destructor:google.bigtable.admin.v2.ListClustersRequest)
  SharedDtor();
}

void ListClustersRequest::SharedDtor() {
  parent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ListClustersRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListClustersRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListClustersRequest_descriptor_;
}

const ListClustersRequest& ListClustersRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto();
  return *default_instance_;
}

ListClustersRequest* ListClustersRequest::default_instance_ = NULL;

ListClustersRequest* ListClustersRequest::New(::google::protobuf::Arena* arena) const {
  ListClustersRequest* n = new ListClustersRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListClustersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.admin.v2.ListClustersRequest)
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ListClustersRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.admin.v2.ListClustersRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string parent = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parent().data(), this->parent().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.admin.v2.ListClustersRequest.parent"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_page_token;
        break;
      }

      // optional string page_token = 2;
      case 2: {
        if (tag == 18) {
         parse_page_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), this->page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.admin.v2.ListClustersRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.admin.v2.ListClustersRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.admin.v2.ListClustersRequest)
  return false;
#undef DO_
}

void ListClustersRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.admin.v2.ListClustersRequest)
  // optional string parent = 1;
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), this->parent().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.v2.ListClustersRequest.parent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parent(), output);
  }

  // optional string page_token = 2;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.v2.ListClustersRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.admin.v2.ListClustersRequest)
}

::google::protobuf::uint8* ListClustersRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.admin.v2.ListClustersRequest)
  // optional string parent = 1;
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), this->parent().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.v2.ListClustersRequest.parent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parent(), target);
  }

  // optional string page_token = 2;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.v2.ListClustersRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.admin.v2.ListClustersRequest)
  return target;
}

int ListClustersRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.admin.v2.ListClustersRequest)
  int total_size = 0;

  // optional string parent = 1;
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent());
  }

  // optional string page_token = 2;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListClustersRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.admin.v2.ListClustersRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ListClustersRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ListClustersRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.admin.v2.ListClustersRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.admin.v2.ListClustersRequest)
    MergeFrom(*source);
  }
}

void ListClustersRequest::MergeFrom(const ListClustersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.admin.v2.ListClustersRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.parent().size() > 0) {

    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  if (from.page_token().size() > 0) {

    page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token_);
  }
}

void ListClustersRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.admin.v2.ListClustersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListClustersRequest::CopyFrom(const ListClustersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.admin.v2.ListClustersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListClustersRequest::IsInitialized() const {

  return true;
}

void ListClustersRequest::Swap(ListClustersRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListClustersRequest::InternalSwap(ListClustersRequest* other) {
  parent_.Swap(&other->parent_);
  page_token_.Swap(&other->page_token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListClustersRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListClustersRequest_descriptor_;
  metadata.reflection = ListClustersRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListClustersRequest

// optional string parent = 1;
void ListClustersRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ListClustersRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListClustersRequest.parent)
  return parent_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ListClustersRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListClustersRequest.parent)
}
 void ListClustersRequest::set_parent(const char* value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.ListClustersRequest.parent)
}
 void ListClustersRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.ListClustersRequest.parent)
}
 ::std::string* ListClustersRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListClustersRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ListClustersRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.ListClustersRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ListClustersRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.ListClustersRequest.parent)
}

// optional string page_token = 2;
void ListClustersRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ListClustersRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListClustersRequest.page_token)
  return page_token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ListClustersRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListClustersRequest.page_token)
}
 void ListClustersRequest::set_page_token(const char* value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.ListClustersRequest.page_token)
}
 void ListClustersRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.ListClustersRequest.page_token)
}
 ::std::string* ListClustersRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListClustersRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ListClustersRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.ListClustersRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ListClustersRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.ListClustersRequest.page_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListClustersResponse::kClustersFieldNumber;
const int ListClustersResponse::kFailedLocationsFieldNumber;
const int ListClustersResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListClustersResponse::ListClustersResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.admin.v2.ListClustersResponse)
}

void ListClustersResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ListClustersResponse::ListClustersResponse(const ListClustersResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.admin.v2.ListClustersResponse)
}

void ListClustersResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ListClustersResponse::~ListClustersResponse() {
  // @@protoc_insertion_point(destructor:google.bigtable.admin.v2.ListClustersResponse)
  SharedDtor();
}

void ListClustersResponse::SharedDtor() {
  next_page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ListClustersResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListClustersResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListClustersResponse_descriptor_;
}

const ListClustersResponse& ListClustersResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto();
  return *default_instance_;
}

ListClustersResponse* ListClustersResponse::default_instance_ = NULL;

ListClustersResponse* ListClustersResponse::New(::google::protobuf::Arena* arena) const {
  ListClustersResponse* n = new ListClustersResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListClustersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.admin.v2.ListClustersResponse)
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clusters_.Clear();
  failed_locations_.Clear();
}

bool ListClustersResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.admin.v2.ListClustersResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.bigtable.admin.v2.Cluster clusters = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_clusters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_clusters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_clusters;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_failed_locations;
        break;
      }

      // repeated string failed_locations = 2;
      case 2: {
        if (tag == 18) {
         parse_failed_locations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_failed_locations()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->failed_locations(this->failed_locations_size() - 1).data(),
            this->failed_locations(this->failed_locations_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.admin.v2.ListClustersResponse.failed_locations"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_failed_locations;
        if (input->ExpectTag(26)) goto parse_next_page_token;
        break;
      }

      // optional string next_page_token = 3;
      case 3: {
        if (tag == 26) {
         parse_next_page_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), this->next_page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.admin.v2.ListClustersResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.admin.v2.ListClustersResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.admin.v2.ListClustersResponse)
  return false;
#undef DO_
}

void ListClustersResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.admin.v2.ListClustersResponse)
  // repeated .google.bigtable.admin.v2.Cluster clusters = 1;
  for (unsigned int i = 0, n = this->clusters_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->clusters(i), output);
  }

  // repeated string failed_locations = 2;
  for (int i = 0; i < this->failed_locations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->failed_locations(i).data(), this->failed_locations(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.v2.ListClustersResponse.failed_locations");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->failed_locations(i), output);
  }

  // optional string next_page_token = 3;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.v2.ListClustersResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->next_page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.admin.v2.ListClustersResponse)
}

::google::protobuf::uint8* ListClustersResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.admin.v2.ListClustersResponse)
  // repeated .google.bigtable.admin.v2.Cluster clusters = 1;
  for (unsigned int i = 0, n = this->clusters_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->clusters(i), false, target);
  }

  // repeated string failed_locations = 2;
  for (int i = 0; i < this->failed_locations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->failed_locations(i).data(), this->failed_locations(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.v2.ListClustersResponse.failed_locations");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->failed_locations(i), target);
  }

  // optional string next_page_token = 3;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.v2.ListClustersResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->next_page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.admin.v2.ListClustersResponse)
  return target;
}

int ListClustersResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.admin.v2.ListClustersResponse)
  int total_size = 0;

  // optional string next_page_token = 3;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  // repeated .google.bigtable.admin.v2.Cluster clusters = 1;
  total_size += 1 * this->clusters_size();
  for (int i = 0; i < this->clusters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->clusters(i));
  }

  // repeated string failed_locations = 2;
  total_size += 1 * this->failed_locations_size();
  for (int i = 0; i < this->failed_locations_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->failed_locations(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListClustersResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.admin.v2.ListClustersResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ListClustersResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ListClustersResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.admin.v2.ListClustersResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.admin.v2.ListClustersResponse)
    MergeFrom(*source);
  }
}

void ListClustersResponse::MergeFrom(const ListClustersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.admin.v2.ListClustersResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  clusters_.MergeFrom(from.clusters_);
  failed_locations_.MergeFrom(from.failed_locations_);
  if (from.next_page_token().size() > 0) {

    next_page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token_);
  }
}

void ListClustersResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.admin.v2.ListClustersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListClustersResponse::CopyFrom(const ListClustersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.admin.v2.ListClustersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListClustersResponse::IsInitialized() const {

  return true;
}

void ListClustersResponse::Swap(ListClustersResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListClustersResponse::InternalSwap(ListClustersResponse* other) {
  clusters_.UnsafeArenaSwap(&other->clusters_);
  failed_locations_.UnsafeArenaSwap(&other->failed_locations_);
  next_page_token_.Swap(&other->next_page_token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListClustersResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListClustersResponse_descriptor_;
  metadata.reflection = ListClustersResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListClustersResponse

// repeated .google.bigtable.admin.v2.Cluster clusters = 1;
int ListClustersResponse::clusters_size() const {
  return clusters_.size();
}
void ListClustersResponse::clear_clusters() {
  clusters_.Clear();
}
const ::google::bigtable::admin::v2::Cluster& ListClustersResponse::clusters(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListClustersResponse.clusters)
  return clusters_.Get(index);
}
::google::bigtable::admin::v2::Cluster* ListClustersResponse::mutable_clusters(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListClustersResponse.clusters)
  return clusters_.Mutable(index);
}
::google::bigtable::admin::v2::Cluster* ListClustersResponse::add_clusters() {
  // @@protoc_insertion_point(field_add:google.bigtable.admin.v2.ListClustersResponse.clusters)
  return clusters_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::bigtable::admin::v2::Cluster >*
ListClustersResponse::mutable_clusters() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.admin.v2.ListClustersResponse.clusters)
  return &clusters_;
}
const ::google::protobuf::RepeatedPtrField< ::google::bigtable::admin::v2::Cluster >&
ListClustersResponse::clusters() const {
  // @@protoc_insertion_point(field_list:google.bigtable.admin.v2.ListClustersResponse.clusters)
  return clusters_;
}

// repeated string failed_locations = 2;
int ListClustersResponse::failed_locations_size() const {
  return failed_locations_.size();
}
void ListClustersResponse::clear_failed_locations() {
  failed_locations_.Clear();
}
 const ::std::string& ListClustersResponse::failed_locations(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListClustersResponse.failed_locations)
  return failed_locations_.Get(index);
}
 ::std::string* ListClustersResponse::mutable_failed_locations(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListClustersResponse.failed_locations)
  return failed_locations_.Mutable(index);
}
 void ListClustersResponse::set_failed_locations(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListClustersResponse.failed_locations)
  failed_locations_.Mutable(index)->assign(value);
}
 void ListClustersResponse::set_failed_locations(int index, const char* value) {
  failed_locations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.ListClustersResponse.failed_locations)
}
 void ListClustersResponse::set_failed_locations(int index, const char* value, size_t size) {
  failed_locations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.ListClustersResponse.failed_locations)
}
 ::std::string* ListClustersResponse::add_failed_locations() {
  // @@protoc_insertion_point(field_add_mutable:google.bigtable.admin.v2.ListClustersResponse.failed_locations)
  return failed_locations_.Add();
}
 void ListClustersResponse::add_failed_locations(const ::std::string& value) {
  failed_locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.bigtable.admin.v2.ListClustersResponse.failed_locations)
}
 void ListClustersResponse::add_failed_locations(const char* value) {
  failed_locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.bigtable.admin.v2.ListClustersResponse.failed_locations)
}
 void ListClustersResponse::add_failed_locations(const char* value, size_t size) {
  failed_locations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.bigtable.admin.v2.ListClustersResponse.failed_locations)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
ListClustersResponse::failed_locations() const {
  // @@protoc_insertion_point(field_list:google.bigtable.admin.v2.ListClustersResponse.failed_locations)
  return failed_locations_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
ListClustersResponse::mutable_failed_locations() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.admin.v2.ListClustersResponse.failed_locations)
  return &failed_locations_;
}

// optional string next_page_token = 3;
void ListClustersResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ListClustersResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ListClustersResponse.next_page_token)
  return next_page_token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ListClustersResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.ListClustersResponse.next_page_token)
}
 void ListClustersResponse::set_next_page_token(const char* value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.ListClustersResponse.next_page_token)
}
 void ListClustersResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.ListClustersResponse.next_page_token)
}
 ::std::string* ListClustersResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ListClustersResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ListClustersResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.ListClustersResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ListClustersResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.ListClustersResponse.next_page_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteClusterRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteClusterRequest::DeleteClusterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.admin.v2.DeleteClusterRequest)
}

void DeleteClusterRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DeleteClusterRequest::DeleteClusterRequest(const DeleteClusterRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.admin.v2.DeleteClusterRequest)
}

void DeleteClusterRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DeleteClusterRequest::~DeleteClusterRequest() {
  // @@protoc_insertion_point(destructor:google.bigtable.admin.v2.DeleteClusterRequest)
  SharedDtor();
}

void DeleteClusterRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DeleteClusterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteClusterRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteClusterRequest_descriptor_;
}

const DeleteClusterRequest& DeleteClusterRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto();
  return *default_instance_;
}

DeleteClusterRequest* DeleteClusterRequest::default_instance_ = NULL;

DeleteClusterRequest* DeleteClusterRequest::New(::google::protobuf::Arena* arena) const {
  DeleteClusterRequest* n = new DeleteClusterRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteClusterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.admin.v2.DeleteClusterRequest)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeleteClusterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.admin.v2.DeleteClusterRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.admin.v2.DeleteClusterRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.admin.v2.DeleteClusterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.admin.v2.DeleteClusterRequest)
  return false;
#undef DO_
}

void DeleteClusterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.admin.v2.DeleteClusterRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.v2.DeleteClusterRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.admin.v2.DeleteClusterRequest)
}

::google::protobuf::uint8* DeleteClusterRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.admin.v2.DeleteClusterRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.v2.DeleteClusterRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.admin.v2.DeleteClusterRequest)
  return target;
}

int DeleteClusterRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.admin.v2.DeleteClusterRequest)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteClusterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.admin.v2.DeleteClusterRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DeleteClusterRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteClusterRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.admin.v2.DeleteClusterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.admin.v2.DeleteClusterRequest)
    MergeFrom(*source);
  }
}

void DeleteClusterRequest::MergeFrom(const DeleteClusterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.admin.v2.DeleteClusterRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void DeleteClusterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.admin.v2.DeleteClusterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteClusterRequest::CopyFrom(const DeleteClusterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.admin.v2.DeleteClusterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteClusterRequest::IsInitialized() const {

  return true;
}

void DeleteClusterRequest::Swap(DeleteClusterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteClusterRequest::InternalSwap(DeleteClusterRequest* other) {
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteClusterRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteClusterRequest_descriptor_;
  metadata.reflection = DeleteClusterRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteClusterRequest

// optional string name = 1;
void DeleteClusterRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DeleteClusterRequest::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.DeleteClusterRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeleteClusterRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.DeleteClusterRequest.name)
}
 void DeleteClusterRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.DeleteClusterRequest.name)
}
 void DeleteClusterRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.DeleteClusterRequest.name)
}
 ::std::string* DeleteClusterRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.DeleteClusterRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeleteClusterRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.DeleteClusterRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeleteClusterRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.DeleteClusterRequest.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateInstanceMetadata::kOriginalRequestFieldNumber;
const int CreateInstanceMetadata::kRequestTimeFieldNumber;
const int CreateInstanceMetadata::kFinishTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateInstanceMetadata::CreateInstanceMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.admin.v2.CreateInstanceMetadata)
}

void CreateInstanceMetadata::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  original_request_ = const_cast< ::google::bigtable::admin::v2::CreateInstanceRequest*>(&::google::bigtable::admin::v2::CreateInstanceRequest::default_instance());
  request_time_ = const_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::Timestamp::default_instance());
  finish_time_ = const_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::Timestamp::default_instance());
}

CreateInstanceMetadata::CreateInstanceMetadata(const CreateInstanceMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.admin.v2.CreateInstanceMetadata)
}

void CreateInstanceMetadata::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  original_request_ = NULL;
  request_time_ = NULL;
  finish_time_ = NULL;
}

CreateInstanceMetadata::~CreateInstanceMetadata() {
  // @@protoc_insertion_point(destructor:google.bigtable.admin.v2.CreateInstanceMetadata)
  SharedDtor();
}

void CreateInstanceMetadata::SharedDtor() {
  if (this != default_instance_) {
    delete original_request_;
    delete request_time_;
    delete finish_time_;
  }
}

void CreateInstanceMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateInstanceMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateInstanceMetadata_descriptor_;
}

const CreateInstanceMetadata& CreateInstanceMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto();
  return *default_instance_;
}

CreateInstanceMetadata* CreateInstanceMetadata::default_instance_ = NULL;

CreateInstanceMetadata* CreateInstanceMetadata::New(::google::protobuf::Arena* arena) const {
  CreateInstanceMetadata* n = new CreateInstanceMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateInstanceMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.admin.v2.CreateInstanceMetadata)
  if (GetArenaNoVirtual() == NULL && original_request_ != NULL) delete original_request_;
  original_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && request_time_ != NULL) delete request_time_;
  request_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && finish_time_ != NULL) delete finish_time_;
  finish_time_ = NULL;
}

bool CreateInstanceMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.admin.v2.CreateInstanceMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.bigtable.admin.v2.CreateInstanceRequest original_request = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_original_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_request_time;
        break;
      }

      // optional .google.protobuf.Timestamp request_time = 2;
      case 2: {
        if (tag == 18) {
         parse_request_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_finish_time;
        break;
      }

      // optional .google.protobuf.Timestamp finish_time = 3;
      case 3: {
        if (tag == 26) {
         parse_finish_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_finish_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.admin.v2.CreateInstanceMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.admin.v2.CreateInstanceMetadata)
  return false;
#undef DO_
}

void CreateInstanceMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.admin.v2.CreateInstanceMetadata)
  // optional .google.bigtable.admin.v2.CreateInstanceRequest original_request = 1;
  if (this->has_original_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->original_request_, output);
  }

  // optional .google.protobuf.Timestamp request_time = 2;
  if (this->has_request_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->request_time_, output);
  }

  // optional .google.protobuf.Timestamp finish_time = 3;
  if (this->has_finish_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->finish_time_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.admin.v2.CreateInstanceMetadata)
}

::google::protobuf::uint8* CreateInstanceMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.admin.v2.CreateInstanceMetadata)
  // optional .google.bigtable.admin.v2.CreateInstanceRequest original_request = 1;
  if (this->has_original_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->original_request_, false, target);
  }

  // optional .google.protobuf.Timestamp request_time = 2;
  if (this->has_request_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->request_time_, false, target);
  }

  // optional .google.protobuf.Timestamp finish_time = 3;
  if (this->has_finish_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->finish_time_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.admin.v2.CreateInstanceMetadata)
  return target;
}

int CreateInstanceMetadata::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.admin.v2.CreateInstanceMetadata)
  int total_size = 0;

  // optional .google.bigtable.admin.v2.CreateInstanceRequest original_request = 1;
  if (this->has_original_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->original_request_);
  }

  // optional .google.protobuf.Timestamp request_time = 2;
  if (this->has_request_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->request_time_);
  }

  // optional .google.protobuf.Timestamp finish_time = 3;
  if (this->has_finish_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->finish_time_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateInstanceMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.admin.v2.CreateInstanceMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CreateInstanceMetadata* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateInstanceMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.admin.v2.CreateInstanceMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.admin.v2.CreateInstanceMetadata)
    MergeFrom(*source);
  }
}

void CreateInstanceMetadata::MergeFrom(const CreateInstanceMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.admin.v2.CreateInstanceMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_original_request()) {
    mutable_original_request()->::google::bigtable::admin::v2::CreateInstanceRequest::MergeFrom(from.original_request());
  }
  if (from.has_request_time()) {
    mutable_request_time()->::google::protobuf::Timestamp::MergeFrom(from.request_time());
  }
  if (from.has_finish_time()) {
    mutable_finish_time()->::google::protobuf::Timestamp::MergeFrom(from.finish_time());
  }
}

void CreateInstanceMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.admin.v2.CreateInstanceMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateInstanceMetadata::CopyFrom(const CreateInstanceMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.admin.v2.CreateInstanceMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateInstanceMetadata::IsInitialized() const {

  return true;
}

void CreateInstanceMetadata::Swap(CreateInstanceMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateInstanceMetadata::InternalSwap(CreateInstanceMetadata* other) {
  std::swap(original_request_, other->original_request_);
  std::swap(request_time_, other->request_time_);
  std::swap(finish_time_, other->finish_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateInstanceMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateInstanceMetadata_descriptor_;
  metadata.reflection = CreateInstanceMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateInstanceMetadata

// optional .google.bigtable.admin.v2.CreateInstanceRequest original_request = 1;
bool CreateInstanceMetadata::has_original_request() const {
  return !_is_default_instance_ && original_request_ != NULL;
}
void CreateInstanceMetadata::clear_original_request() {
  if (GetArenaNoVirtual() == NULL && original_request_ != NULL) delete original_request_;
  original_request_ = NULL;
}
const ::google::bigtable::admin::v2::CreateInstanceRequest& CreateInstanceMetadata::original_request() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateInstanceMetadata.original_request)
  return original_request_ != NULL ? *original_request_ : *default_instance_->original_request_;
}
::google::bigtable::admin::v2::CreateInstanceRequest* CreateInstanceMetadata::mutable_original_request() {
  
  if (original_request_ == NULL) {
    original_request_ = new ::google::bigtable::admin::v2::CreateInstanceRequest;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CreateInstanceMetadata.original_request)
  return original_request_;
}
::google::bigtable::admin::v2::CreateInstanceRequest* CreateInstanceMetadata::release_original_request() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CreateInstanceMetadata.original_request)
  
  ::google::bigtable::admin::v2::CreateInstanceRequest* temp = original_request_;
  original_request_ = NULL;
  return temp;
}
void CreateInstanceMetadata::set_allocated_original_request(::google::bigtable::admin::v2::CreateInstanceRequest* original_request) {
  delete original_request_;
  original_request_ = original_request;
  if (original_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CreateInstanceMetadata.original_request)
}

// optional .google.protobuf.Timestamp request_time = 2;
bool CreateInstanceMetadata::has_request_time() const {
  return !_is_default_instance_ && request_time_ != NULL;
}
void CreateInstanceMetadata::clear_request_time() {
  if (GetArenaNoVirtual() == NULL && request_time_ != NULL) delete request_time_;
  request_time_ = NULL;
}
const ::google::protobuf::Timestamp& CreateInstanceMetadata::request_time() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateInstanceMetadata.request_time)
  return request_time_ != NULL ? *request_time_ : *default_instance_->request_time_;
}
::google::protobuf::Timestamp* CreateInstanceMetadata::mutable_request_time() {
  
  if (request_time_ == NULL) {
    request_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CreateInstanceMetadata.request_time)
  return request_time_;
}
::google::protobuf::Timestamp* CreateInstanceMetadata::release_request_time() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CreateInstanceMetadata.request_time)
  
  ::google::protobuf::Timestamp* temp = request_time_;
  request_time_ = NULL;
  return temp;
}
void CreateInstanceMetadata::set_allocated_request_time(::google::protobuf::Timestamp* request_time) {
  delete request_time_;
  if (request_time != NULL && request_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_request_time = new ::google::protobuf::Timestamp;
    new_request_time->CopyFrom(*request_time);
    request_time = new_request_time;
  }
  request_time_ = request_time;
  if (request_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CreateInstanceMetadata.request_time)
}

// optional .google.protobuf.Timestamp finish_time = 3;
bool CreateInstanceMetadata::has_finish_time() const {
  return !_is_default_instance_ && finish_time_ != NULL;
}
void CreateInstanceMetadata::clear_finish_time() {
  if (GetArenaNoVirtual() == NULL && finish_time_ != NULL) delete finish_time_;
  finish_time_ = NULL;
}
const ::google::protobuf::Timestamp& CreateInstanceMetadata::finish_time() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.CreateInstanceMetadata.finish_time)
  return finish_time_ != NULL ? *finish_time_ : *default_instance_->finish_time_;
}
::google::protobuf::Timestamp* CreateInstanceMetadata::mutable_finish_time() {
  
  if (finish_time_ == NULL) {
    finish_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.CreateInstanceMetadata.finish_time)
  return finish_time_;
}
::google::protobuf::Timestamp* CreateInstanceMetadata::release_finish_time() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.CreateInstanceMetadata.finish_time)
  
  ::google::protobuf::Timestamp* temp = finish_time_;
  finish_time_ = NULL;
  return temp;
}
void CreateInstanceMetadata::set_allocated_finish_time(::google::protobuf::Timestamp* finish_time) {
  delete finish_time_;
  if (finish_time != NULL && finish_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_finish_time = new ::google::protobuf::Timestamp;
    new_finish_time->CopyFrom(*finish_time);
    finish_time = new_finish_time;
  }
  finish_time_ = finish_time;
  if (finish_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.CreateInstanceMetadata.finish_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateClusterMetadata::kOriginalRequestFieldNumber;
const int UpdateClusterMetadata::kRequestTimeFieldNumber;
const int UpdateClusterMetadata::kFinishTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateClusterMetadata::UpdateClusterMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.admin.v2.UpdateClusterMetadata)
}

void UpdateClusterMetadata::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  original_request_ = const_cast< ::google::bigtable::admin::v2::Cluster*>(&::google::bigtable::admin::v2::Cluster::default_instance());
  request_time_ = const_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::Timestamp::default_instance());
  finish_time_ = const_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::Timestamp::default_instance());
}

UpdateClusterMetadata::UpdateClusterMetadata(const UpdateClusterMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.admin.v2.UpdateClusterMetadata)
}

void UpdateClusterMetadata::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  original_request_ = NULL;
  request_time_ = NULL;
  finish_time_ = NULL;
}

UpdateClusterMetadata::~UpdateClusterMetadata() {
  // @@protoc_insertion_point(destructor:google.bigtable.admin.v2.UpdateClusterMetadata)
  SharedDtor();
}

void UpdateClusterMetadata::SharedDtor() {
  if (this != default_instance_) {
    delete original_request_;
    delete request_time_;
    delete finish_time_;
  }
}

void UpdateClusterMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateClusterMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateClusterMetadata_descriptor_;
}

const UpdateClusterMetadata& UpdateClusterMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fbigtable_2fadmin_2fv2_2fbigtable_5finstance_5fadmin_2eproto();
  return *default_instance_;
}

UpdateClusterMetadata* UpdateClusterMetadata::default_instance_ = NULL;

UpdateClusterMetadata* UpdateClusterMetadata::New(::google::protobuf::Arena* arena) const {
  UpdateClusterMetadata* n = new UpdateClusterMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateClusterMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.admin.v2.UpdateClusterMetadata)
  if (GetArenaNoVirtual() == NULL && original_request_ != NULL) delete original_request_;
  original_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && request_time_ != NULL) delete request_time_;
  request_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && finish_time_ != NULL) delete finish_time_;
  finish_time_ = NULL;
}

bool UpdateClusterMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.admin.v2.UpdateClusterMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.bigtable.admin.v2.Cluster original_request = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_original_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_request_time;
        break;
      }

      // optional .google.protobuf.Timestamp request_time = 2;
      case 2: {
        if (tag == 18) {
         parse_request_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_finish_time;
        break;
      }

      // optional .google.protobuf.Timestamp finish_time = 3;
      case 3: {
        if (tag == 26) {
         parse_finish_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_finish_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.admin.v2.UpdateClusterMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.admin.v2.UpdateClusterMetadata)
  return false;
#undef DO_
}

void UpdateClusterMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.admin.v2.UpdateClusterMetadata)
  // optional .google.bigtable.admin.v2.Cluster original_request = 1;
  if (this->has_original_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->original_request_, output);
  }

  // optional .google.protobuf.Timestamp request_time = 2;
  if (this->has_request_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->request_time_, output);
  }

  // optional .google.protobuf.Timestamp finish_time = 3;
  if (this->has_finish_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->finish_time_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.admin.v2.UpdateClusterMetadata)
}

::google::protobuf::uint8* UpdateClusterMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.admin.v2.UpdateClusterMetadata)
  // optional .google.bigtable.admin.v2.Cluster original_request = 1;
  if (this->has_original_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->original_request_, false, target);
  }

  // optional .google.protobuf.Timestamp request_time = 2;
  if (this->has_request_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->request_time_, false, target);
  }

  // optional .google.protobuf.Timestamp finish_time = 3;
  if (this->has_finish_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->finish_time_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.admin.v2.UpdateClusterMetadata)
  return target;
}

int UpdateClusterMetadata::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.admin.v2.UpdateClusterMetadata)
  int total_size = 0;

  // optional .google.bigtable.admin.v2.Cluster original_request = 1;
  if (this->has_original_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->original_request_);
  }

  // optional .google.protobuf.Timestamp request_time = 2;
  if (this->has_request_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->request_time_);
  }

  // optional .google.protobuf.Timestamp finish_time = 3;
  if (this->has_finish_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->finish_time_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateClusterMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.admin.v2.UpdateClusterMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UpdateClusterMetadata* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateClusterMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.admin.v2.UpdateClusterMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.admin.v2.UpdateClusterMetadata)
    MergeFrom(*source);
  }
}

void UpdateClusterMetadata::MergeFrom(const UpdateClusterMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.admin.v2.UpdateClusterMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_original_request()) {
    mutable_original_request()->::google::bigtable::admin::v2::Cluster::MergeFrom(from.original_request());
  }
  if (from.has_request_time()) {
    mutable_request_time()->::google::protobuf::Timestamp::MergeFrom(from.request_time());
  }
  if (from.has_finish_time()) {
    mutable_finish_time()->::google::protobuf::Timestamp::MergeFrom(from.finish_time());
  }
}

void UpdateClusterMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.admin.v2.UpdateClusterMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateClusterMetadata::CopyFrom(const UpdateClusterMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.admin.v2.UpdateClusterMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateClusterMetadata::IsInitialized() const {

  return true;
}

void UpdateClusterMetadata::Swap(UpdateClusterMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateClusterMetadata::InternalSwap(UpdateClusterMetadata* other) {
  std::swap(original_request_, other->original_request_);
  std::swap(request_time_, other->request_time_);
  std::swap(finish_time_, other->finish_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateClusterMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateClusterMetadata_descriptor_;
  metadata.reflection = UpdateClusterMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateClusterMetadata

// optional .google.bigtable.admin.v2.Cluster original_request = 1;
bool UpdateClusterMetadata::has_original_request() const {
  return !_is_default_instance_ && original_request_ != NULL;
}
void UpdateClusterMetadata::clear_original_request() {
  if (GetArenaNoVirtual() == NULL && original_request_ != NULL) delete original_request_;
  original_request_ = NULL;
}
const ::google::bigtable::admin::v2::Cluster& UpdateClusterMetadata::original_request() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.UpdateClusterMetadata.original_request)
  return original_request_ != NULL ? *original_request_ : *default_instance_->original_request_;
}
::google::bigtable::admin::v2::Cluster* UpdateClusterMetadata::mutable_original_request() {
  
  if (original_request_ == NULL) {
    original_request_ = new ::google::bigtable::admin::v2::Cluster;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.UpdateClusterMetadata.original_request)
  return original_request_;
}
::google::bigtable::admin::v2::Cluster* UpdateClusterMetadata::release_original_request() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.UpdateClusterMetadata.original_request)
  
  ::google::bigtable::admin::v2::Cluster* temp = original_request_;
  original_request_ = NULL;
  return temp;
}
void UpdateClusterMetadata::set_allocated_original_request(::google::bigtable::admin::v2::Cluster* original_request) {
  delete original_request_;
  original_request_ = original_request;
  if (original_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.UpdateClusterMetadata.original_request)
}

// optional .google.protobuf.Timestamp request_time = 2;
bool UpdateClusterMetadata::has_request_time() const {
  return !_is_default_instance_ && request_time_ != NULL;
}
void UpdateClusterMetadata::clear_request_time() {
  if (GetArenaNoVirtual() == NULL && request_time_ != NULL) delete request_time_;
  request_time_ = NULL;
}
const ::google::protobuf::Timestamp& UpdateClusterMetadata::request_time() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.UpdateClusterMetadata.request_time)
  return request_time_ != NULL ? *request_time_ : *default_instance_->request_time_;
}
::google::protobuf::Timestamp* UpdateClusterMetadata::mutable_request_time() {
  
  if (request_time_ == NULL) {
    request_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.UpdateClusterMetadata.request_time)
  return request_time_;
}
::google::protobuf::Timestamp* UpdateClusterMetadata::release_request_time() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.UpdateClusterMetadata.request_time)
  
  ::google::protobuf::Timestamp* temp = request_time_;
  request_time_ = NULL;
  return temp;
}
void UpdateClusterMetadata::set_allocated_request_time(::google::protobuf::Timestamp* request_time) {
  delete request_time_;
  if (request_time != NULL && request_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_request_time = new ::google::protobuf::Timestamp;
    new_request_time->CopyFrom(*request_time);
    request_time = new_request_time;
  }
  request_time_ = request_time;
  if (request_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.UpdateClusterMetadata.request_time)
}

// optional .google.protobuf.Timestamp finish_time = 3;
bool UpdateClusterMetadata::has_finish_time() const {
  return !_is_default_instance_ && finish_time_ != NULL;
}
void UpdateClusterMetadata::clear_finish_time() {
  if (GetArenaNoVirtual() == NULL && finish_time_ != NULL) delete finish_time_;
  finish_time_ = NULL;
}
const ::google::protobuf::Timestamp& UpdateClusterMetadata::finish_time() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.UpdateClusterMetadata.finish_time)
  return finish_time_ != NULL ? *finish_time_ : *default_instance_->finish_time_;
}
::google::protobuf::Timestamp* UpdateClusterMetadata::mutable_finish_time() {
  
  if (finish_time_ == NULL) {
    finish_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.UpdateClusterMetadata.finish_time)
  return finish_time_;
}
::google::protobuf::Timestamp* UpdateClusterMetadata::release_finish_time() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.UpdateClusterMetadata.finish_time)
  
  ::google::protobuf::Timestamp* temp = finish_time_;
  finish_time_ = NULL;
  return temp;
}
void UpdateClusterMetadata::set_allocated_finish_time(::google::protobuf::Timestamp* finish_time) {
  delete finish_time_;
  if (finish_time != NULL && finish_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_finish_time = new ::google::protobuf::Timestamp;
    new_finish_time->CopyFrom(*finish_time);
    finish_time = new_finish_time;
  }
  finish_time_ = finish_time;
  if (finish_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.UpdateClusterMetadata.finish_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace admin
}  // namespace bigtable
}  // namespace google

// @@protoc_insertion_point(global_scope)
