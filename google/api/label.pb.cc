// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/label.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/api/label.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace api {

namespace {

const ::google::protobuf::Descriptor* LabelDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LabelDescriptor_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LabelDescriptor_ValueType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_google_2fapi_2flabel_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_google_2fapi_2flabel_2eproto() {
  protobuf_AddDesc_google_2fapi_2flabel_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "google/api/label.proto");
  GOOGLE_CHECK(file != NULL);
  LabelDescriptor_descriptor_ = file->message_type(0);
  static const int LabelDescriptor_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelDescriptor, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelDescriptor, value_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelDescriptor, description_),
  };
  LabelDescriptor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LabelDescriptor_descriptor_,
      LabelDescriptor::internal_default_instance(),
      LabelDescriptor_offsets_,
      -1,
      -1,
      -1,
      sizeof(LabelDescriptor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelDescriptor, _internal_metadata_));
  LabelDescriptor_ValueType_descriptor_ = LabelDescriptor_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_google_2fapi_2flabel_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LabelDescriptor_descriptor_, LabelDescriptor::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_google_2fapi_2flabel_2eproto() {
  LabelDescriptor_default_instance_.Shutdown();
  delete LabelDescriptor_reflection_;
}

void protobuf_InitDefaults_google_2fapi_2flabel_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  LabelDescriptor_default_instance_.DefaultConstruct();
  LabelDescriptor_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_google_2fapi_2flabel_2eproto_once_);
void protobuf_InitDefaults_google_2fapi_2flabel_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_google_2fapi_2flabel_2eproto_once_,
                 &protobuf_InitDefaults_google_2fapi_2flabel_2eproto_impl);
}
void protobuf_AddDesc_google_2fapi_2flabel_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_google_2fapi_2flabel_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026google/api/label.proto\022\ngoogle.api\"\234\001\n"
    "\017LabelDescriptor\022\013\n\003key\030\001 \001(\t\0229\n\nvalue_t"
    "ype\030\002 \001(\0162%.google.api.LabelDescriptor.V"
    "alueType\022\023\n\013description\030\003 \001(\t\",\n\tValueTy"
    "pe\022\n\n\006STRING\020\000\022\010\n\004BOOL\020\001\022\t\n\005INT64\020\002B_\n\016c"
    "om.google.apiB\nLabelProtoP\001Z5google.gola"
    "ng.org/genproto/googleapis/api/label;lab"
    "el\370\001\001\242\002\004GAPIb\006proto3", 300);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/api/label.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_google_2fapi_2flabel_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_google_2fapi_2flabel_2eproto_once_);
void protobuf_AddDesc_google_2fapi_2flabel_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_google_2fapi_2flabel_2eproto_once_,
                 &protobuf_AddDesc_google_2fapi_2flabel_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_google_2fapi_2flabel_2eproto {
  StaticDescriptorInitializer_google_2fapi_2flabel_2eproto() {
    protobuf_AddDesc_google_2fapi_2flabel_2eproto();
  }
} static_descriptor_initializer_google_2fapi_2flabel_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* LabelDescriptor_ValueType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LabelDescriptor_ValueType_descriptor_;
}
bool LabelDescriptor_ValueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LabelDescriptor_ValueType LabelDescriptor::STRING;
const LabelDescriptor_ValueType LabelDescriptor::BOOL;
const LabelDescriptor_ValueType LabelDescriptor::INT64;
const LabelDescriptor_ValueType LabelDescriptor::ValueType_MIN;
const LabelDescriptor_ValueType LabelDescriptor::ValueType_MAX;
const int LabelDescriptor::ValueType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LabelDescriptor::kKeyFieldNumber;
const int LabelDescriptor::kValueTypeFieldNumber;
const int LabelDescriptor::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LabelDescriptor::LabelDescriptor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fapi_2flabel_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.LabelDescriptor)
}
LabelDescriptor::LabelDescriptor(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fapi_2flabel_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.api.LabelDescriptor)
}

void LabelDescriptor::InitAsDefaultInstance() {
}

LabelDescriptor::LabelDescriptor(const LabelDescriptor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.api.LabelDescriptor)
}

void LabelDescriptor::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_type_ = 0;
  _cached_size_ = 0;
}

LabelDescriptor::~LabelDescriptor() {
  // @@protoc_insertion_point(destructor:google.api.LabelDescriptor)
  SharedDtor();
}

void LabelDescriptor::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  key_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  description_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void LabelDescriptor::ArenaDtor(void* object) {
  LabelDescriptor* _this = reinterpret_cast< LabelDescriptor* >(object);
  (void)_this;
}
void LabelDescriptor::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LabelDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabelDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LabelDescriptor_descriptor_;
}

const LabelDescriptor& LabelDescriptor::default_instance() {
  protobuf_InitDefaults_google_2fapi_2flabel_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LabelDescriptor> LabelDescriptor_default_instance_;

LabelDescriptor* LabelDescriptor::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<LabelDescriptor>(arena);
}

void LabelDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.LabelDescriptor)
  key_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  value_type_ = 0;
  description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool LabelDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.LabelDescriptor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.LabelDescriptor.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value_type;
        break;
      }

      // optional .google.api.LabelDescriptor.ValueType value_type = 2;
      case 2: {
        if (tag == 16) {
         parse_value_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_value_type(static_cast< ::google::api::LabelDescriptor_ValueType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_description;
        break;
      }

      // optional string description = 3;
      case 3: {
        if (tag == 26) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.LabelDescriptor.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.LabelDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.LabelDescriptor)
  return false;
#undef DO_
}

void LabelDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.LabelDescriptor)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.LabelDescriptor.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional .google.api.LabelDescriptor.ValueType value_type = 2;
  if (this->value_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->value_type(), output);
  }

  // optional string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.LabelDescriptor.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.LabelDescriptor)
}

::google::protobuf::uint8* LabelDescriptor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.LabelDescriptor)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.LabelDescriptor.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional .google.api.LabelDescriptor.ValueType value_type = 2;
  if (this->value_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->value_type(), target);
  }

  // optional string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.LabelDescriptor.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.LabelDescriptor)
  return target;
}

size_t LabelDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.LabelDescriptor)
  size_t total_size = 0;

  // optional string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // optional .google.api.LabelDescriptor.ValueType value_type = 2;
  if (this->value_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->value_type());
  }

  // optional string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabelDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.LabelDescriptor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LabelDescriptor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LabelDescriptor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.LabelDescriptor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.LabelDescriptor)
    UnsafeMergeFrom(*source);
  }
}

void LabelDescriptor::MergeFrom(const LabelDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.LabelDescriptor)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LabelDescriptor::UnsafeMergeFrom(const LabelDescriptor& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.key().size() > 0) {
    set_key(from.key());
  }
  if (from.value_type() != 0) {
    set_value_type(from.value_type());
  }
  if (from.description().size() > 0) {
    set_description(from.description());
  }
}

void LabelDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.LabelDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelDescriptor::CopyFrom(const LabelDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.LabelDescriptor)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LabelDescriptor::IsInitialized() const {

  return true;
}

void LabelDescriptor::Swap(LabelDescriptor* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LabelDescriptor temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void LabelDescriptor::UnsafeArenaSwap(LabelDescriptor* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LabelDescriptor::InternalSwap(LabelDescriptor* other) {
  key_.Swap(&other->key_);
  std::swap(value_type_, other->value_type_);
  description_.Swap(&other->description_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LabelDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LabelDescriptor_descriptor_;
  metadata.reflection = LabelDescriptor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LabelDescriptor

// optional string key = 1;
void LabelDescriptor::clear_key() {
  key_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& LabelDescriptor::key() const {
  // @@protoc_insertion_point(field_get:google.api.LabelDescriptor.key)
  return key_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LabelDescriptor::set_key(const ::std::string& value) {
  
  key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.api.LabelDescriptor.key)
}
void LabelDescriptor::set_key(const char* value) {
  
  key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.LabelDescriptor.key)
}
void LabelDescriptor::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.LabelDescriptor.key)
}
::std::string* LabelDescriptor::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:google.api.LabelDescriptor.key)
  return key_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* LabelDescriptor::release_key() {
  // @@protoc_insertion_point(field_release:google.api.LabelDescriptor.key)
  
  return key_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* LabelDescriptor::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.LabelDescriptor.key)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return key_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void LabelDescriptor::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.LabelDescriptor.key)
}
void LabelDescriptor::unsafe_arena_set_allocated_key(
    ::std::string* key) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (key != NULL) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      key, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.LabelDescriptor.key)
}

// optional .google.api.LabelDescriptor.ValueType value_type = 2;
void LabelDescriptor::clear_value_type() {
  value_type_ = 0;
}
::google::api::LabelDescriptor_ValueType LabelDescriptor::value_type() const {
  // @@protoc_insertion_point(field_get:google.api.LabelDescriptor.value_type)
  return static_cast< ::google::api::LabelDescriptor_ValueType >(value_type_);
}
void LabelDescriptor::set_value_type(::google::api::LabelDescriptor_ValueType value) {
  
  value_type_ = value;
  // @@protoc_insertion_point(field_set:google.api.LabelDescriptor.value_type)
}

// optional string description = 3;
void LabelDescriptor::clear_description() {
  description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& LabelDescriptor::description() const {
  // @@protoc_insertion_point(field_get:google.api.LabelDescriptor.description)
  return description_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LabelDescriptor::set_description(const ::std::string& value) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.api.LabelDescriptor.description)
}
void LabelDescriptor::set_description(const char* value) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.LabelDescriptor.description)
}
void LabelDescriptor::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.LabelDescriptor.description)
}
::std::string* LabelDescriptor::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.api.LabelDescriptor.description)
  return description_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* LabelDescriptor::release_description() {
  // @@protoc_insertion_point(field_release:google.api.LabelDescriptor.description)
  
  return description_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* LabelDescriptor::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.LabelDescriptor.description)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return description_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void LabelDescriptor::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.LabelDescriptor.description)
}
void LabelDescriptor::unsafe_arena_set_allocated_description(
    ::std::string* description) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (description != NULL) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      description, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.LabelDescriptor.description)
}

inline const LabelDescriptor* LabelDescriptor::internal_default_instance() {
  return &LabelDescriptor_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace google

// @@protoc_insertion_point(global_scope)
