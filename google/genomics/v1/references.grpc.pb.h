// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: google/genomics/v1/references.proto
// Original file comments:
// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fgenomics_2fv1_2freferences_2eproto__INCLUDED
#define GRPC_google_2fgenomics_2fv1_2freferences_2eproto__INCLUDED

#include "google/genomics/v1/references.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace google {
namespace genomics {
namespace v1 {

class ReferenceServiceV1 GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Searches for reference sets which match the given criteria.
    //
    // For the definitions of references and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    //
    // Implements
    // [GlobalAllianceApi.searchReferenceSets](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/referencemethods.avdl#L71)
    virtual ::grpc::Status SearchReferenceSets(::grpc::ClientContext* context, const ::google::genomics::v1::SearchReferenceSetsRequest& request, ::google::genomics::v1::SearchReferenceSetsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::SearchReferenceSetsResponse>> AsyncSearchReferenceSets(::grpc::ClientContext* context, const ::google::genomics::v1::SearchReferenceSetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::SearchReferenceSetsResponse>>(AsyncSearchReferenceSetsRaw(context, request, cq));
    }
    // Gets a reference set.
    //
    // For the definitions of references and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    //
    // Implements
    // [GlobalAllianceApi.getReferenceSet](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/referencemethods.avdl#L83).
    virtual ::grpc::Status GetReferenceSet(::grpc::ClientContext* context, const ::google::genomics::v1::GetReferenceSetRequest& request, ::google::genomics::v1::ReferenceSet* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::ReferenceSet>> AsyncGetReferenceSet(::grpc::ClientContext* context, const ::google::genomics::v1::GetReferenceSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::ReferenceSet>>(AsyncGetReferenceSetRaw(context, request, cq));
    }
    // Searches for references which match the given criteria.
    //
    // For the definitions of references and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    //
    // Implements
    // [GlobalAllianceApi.searchReferences](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/referencemethods.avdl#L146).
    virtual ::grpc::Status SearchReferences(::grpc::ClientContext* context, const ::google::genomics::v1::SearchReferencesRequest& request, ::google::genomics::v1::SearchReferencesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::SearchReferencesResponse>> AsyncSearchReferences(::grpc::ClientContext* context, const ::google::genomics::v1::SearchReferencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::SearchReferencesResponse>>(AsyncSearchReferencesRaw(context, request, cq));
    }
    // Gets a reference.
    //
    // For the definitions of references and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    //
    // Implements
    // [GlobalAllianceApi.getReference](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/referencemethods.avdl#L158).
    virtual ::grpc::Status GetReference(::grpc::ClientContext* context, const ::google::genomics::v1::GetReferenceRequest& request, ::google::genomics::v1::Reference* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::Reference>> AsyncGetReference(::grpc::ClientContext* context, const ::google::genomics::v1::GetReferenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::Reference>>(AsyncGetReferenceRaw(context, request, cq));
    }
    // Lists the bases in a reference, optionally restricted to a range.
    //
    // For the definitions of references and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    //
    // Implements
    // [GlobalAllianceApi.getReferenceBases](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/referencemethods.avdl#L221).
    virtual ::grpc::Status ListBases(::grpc::ClientContext* context, const ::google::genomics::v1::ListBasesRequest& request, ::google::genomics::v1::ListBasesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::ListBasesResponse>> AsyncListBases(::grpc::ClientContext* context, const ::google::genomics::v1::ListBasesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::ListBasesResponse>>(AsyncListBasesRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::SearchReferenceSetsResponse>* AsyncSearchReferenceSetsRaw(::grpc::ClientContext* context, const ::google::genomics::v1::SearchReferenceSetsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::ReferenceSet>* AsyncGetReferenceSetRaw(::grpc::ClientContext* context, const ::google::genomics::v1::GetReferenceSetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::SearchReferencesResponse>* AsyncSearchReferencesRaw(::grpc::ClientContext* context, const ::google::genomics::v1::SearchReferencesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::Reference>* AsyncGetReferenceRaw(::grpc::ClientContext* context, const ::google::genomics::v1::GetReferenceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::genomics::v1::ListBasesResponse>* AsyncListBasesRaw(::grpc::ClientContext* context, const ::google::genomics::v1::ListBasesRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SearchReferenceSets(::grpc::ClientContext* context, const ::google::genomics::v1::SearchReferenceSetsRequest& request, ::google::genomics::v1::SearchReferenceSetsResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::SearchReferenceSetsResponse>> AsyncSearchReferenceSets(::grpc::ClientContext* context, const ::google::genomics::v1::SearchReferenceSetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::SearchReferenceSetsResponse>>(AsyncSearchReferenceSetsRaw(context, request, cq));
    }
    ::grpc::Status GetReferenceSet(::grpc::ClientContext* context, const ::google::genomics::v1::GetReferenceSetRequest& request, ::google::genomics::v1::ReferenceSet* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::ReferenceSet>> AsyncGetReferenceSet(::grpc::ClientContext* context, const ::google::genomics::v1::GetReferenceSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::ReferenceSet>>(AsyncGetReferenceSetRaw(context, request, cq));
    }
    ::grpc::Status SearchReferences(::grpc::ClientContext* context, const ::google::genomics::v1::SearchReferencesRequest& request, ::google::genomics::v1::SearchReferencesResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::SearchReferencesResponse>> AsyncSearchReferences(::grpc::ClientContext* context, const ::google::genomics::v1::SearchReferencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::SearchReferencesResponse>>(AsyncSearchReferencesRaw(context, request, cq));
    }
    ::grpc::Status GetReference(::grpc::ClientContext* context, const ::google::genomics::v1::GetReferenceRequest& request, ::google::genomics::v1::Reference* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::Reference>> AsyncGetReference(::grpc::ClientContext* context, const ::google::genomics::v1::GetReferenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::Reference>>(AsyncGetReferenceRaw(context, request, cq));
    }
    ::grpc::Status ListBases(::grpc::ClientContext* context, const ::google::genomics::v1::ListBasesRequest& request, ::google::genomics::v1::ListBasesResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::ListBasesResponse>> AsyncListBases(::grpc::ClientContext* context, const ::google::genomics::v1::ListBasesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::ListBasesResponse>>(AsyncListBasesRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::SearchReferenceSetsResponse>* AsyncSearchReferenceSetsRaw(::grpc::ClientContext* context, const ::google::genomics::v1::SearchReferenceSetsRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::ReferenceSet>* AsyncGetReferenceSetRaw(::grpc::ClientContext* context, const ::google::genomics::v1::GetReferenceSetRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::SearchReferencesResponse>* AsyncSearchReferencesRaw(::grpc::ClientContext* context, const ::google::genomics::v1::SearchReferencesRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::Reference>* AsyncGetReferenceRaw(::grpc::ClientContext* context, const ::google::genomics::v1::GetReferenceRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::genomics::v1::ListBasesResponse>* AsyncListBasesRaw(::grpc::ClientContext* context, const ::google::genomics::v1::ListBasesRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_SearchReferenceSets_;
    const ::grpc::RpcMethod rpcmethod_GetReferenceSet_;
    const ::grpc::RpcMethod rpcmethod_SearchReferences_;
    const ::grpc::RpcMethod rpcmethod_GetReference_;
    const ::grpc::RpcMethod rpcmethod_ListBases_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Searches for reference sets which match the given criteria.
    //
    // For the definitions of references and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    //
    // Implements
    // [GlobalAllianceApi.searchReferenceSets](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/referencemethods.avdl#L71)
    virtual ::grpc::Status SearchReferenceSets(::grpc::ServerContext* context, const ::google::genomics::v1::SearchReferenceSetsRequest* request, ::google::genomics::v1::SearchReferenceSetsResponse* response);
    // Gets a reference set.
    //
    // For the definitions of references and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    //
    // Implements
    // [GlobalAllianceApi.getReferenceSet](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/referencemethods.avdl#L83).
    virtual ::grpc::Status GetReferenceSet(::grpc::ServerContext* context, const ::google::genomics::v1::GetReferenceSetRequest* request, ::google::genomics::v1::ReferenceSet* response);
    // Searches for references which match the given criteria.
    //
    // For the definitions of references and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    //
    // Implements
    // [GlobalAllianceApi.searchReferences](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/referencemethods.avdl#L146).
    virtual ::grpc::Status SearchReferences(::grpc::ServerContext* context, const ::google::genomics::v1::SearchReferencesRequest* request, ::google::genomics::v1::SearchReferencesResponse* response);
    // Gets a reference.
    //
    // For the definitions of references and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    //
    // Implements
    // [GlobalAllianceApi.getReference](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/referencemethods.avdl#L158).
    virtual ::grpc::Status GetReference(::grpc::ServerContext* context, const ::google::genomics::v1::GetReferenceRequest* request, ::google::genomics::v1::Reference* response);
    // Lists the bases in a reference, optionally restricted to a range.
    //
    // For the definitions of references and other genomics resources, see
    // [Fundamentals of Google
    // Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    //
    // Implements
    // [GlobalAllianceApi.getReferenceBases](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/referencemethods.avdl#L221).
    virtual ::grpc::Status ListBases(::grpc::ServerContext* context, const ::google::genomics::v1::ListBasesRequest* request, ::google::genomics::v1::ListBasesResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SearchReferenceSets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SearchReferenceSets() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SearchReferenceSets() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchReferenceSets(::grpc::ServerContext* context, const ::google::genomics::v1::SearchReferenceSetsRequest* request, ::google::genomics::v1::SearchReferenceSetsResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchReferenceSets(::grpc::ServerContext* context, ::google::genomics::v1::SearchReferenceSetsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::genomics::v1::SearchReferenceSetsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetReferenceSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetReferenceSet() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetReferenceSet() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReferenceSet(::grpc::ServerContext* context, const ::google::genomics::v1::GetReferenceSetRequest* request, ::google::genomics::v1::ReferenceSet* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetReferenceSet(::grpc::ServerContext* context, ::google::genomics::v1::GetReferenceSetRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::genomics::v1::ReferenceSet>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SearchReferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SearchReferences() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SearchReferences() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchReferences(::grpc::ServerContext* context, const ::google::genomics::v1::SearchReferencesRequest* request, ::google::genomics::v1::SearchReferencesResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchReferences(::grpc::ServerContext* context, ::google::genomics::v1::SearchReferencesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::genomics::v1::SearchReferencesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetReference : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetReference() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetReference() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReference(::grpc::ServerContext* context, const ::google::genomics::v1::GetReferenceRequest* request, ::google::genomics::v1::Reference* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetReference(::grpc::ServerContext* context, ::google::genomics::v1::GetReferenceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::genomics::v1::Reference>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListBases : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListBases() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ListBases() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListBases(::grpc::ServerContext* context, const ::google::genomics::v1::ListBasesRequest* request, ::google::genomics::v1::ListBasesResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListBases(::grpc::ServerContext* context, ::google::genomics::v1::ListBasesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::genomics::v1::ListBasesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SearchReferenceSets<WithAsyncMethod_GetReferenceSet<WithAsyncMethod_SearchReferences<WithAsyncMethod_GetReference<WithAsyncMethod_ListBases<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_SearchReferenceSets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SearchReferenceSets() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SearchReferenceSets() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchReferenceSets(::grpc::ServerContext* context, const ::google::genomics::v1::SearchReferenceSetsRequest* request, ::google::genomics::v1::SearchReferenceSetsResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetReferenceSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetReferenceSet() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetReferenceSet() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReferenceSet(::grpc::ServerContext* context, const ::google::genomics::v1::GetReferenceSetRequest* request, ::google::genomics::v1::ReferenceSet* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SearchReferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SearchReferences() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SearchReferences() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchReferences(::grpc::ServerContext* context, const ::google::genomics::v1::SearchReferencesRequest* request, ::google::genomics::v1::SearchReferencesResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetReference : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetReference() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetReference() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReference(::grpc::ServerContext* context, const ::google::genomics::v1::GetReferenceRequest* request, ::google::genomics::v1::Reference* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListBases : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListBases() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ListBases() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListBases(::grpc::ServerContext* context, const ::google::genomics::v1::ListBasesRequest* request, ::google::genomics::v1::ListBasesResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

}  // namespace v1
}  // namespace genomics
}  // namespace google


#endif  // GRPC_google_2fgenomics_2fv1_2freferences_2eproto__INCLUDED
