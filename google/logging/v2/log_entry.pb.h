// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/logging/v2/log_entry.proto

#ifndef PROTOBUF_google_2flogging_2fv2_2flog_5fentry_2eproto__INCLUDED
#define PROTOBUF_google_2flogging_2fv2_2flog_5fentry_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/monitored_resource.pb.h"
#include "google/logging/type/http_request.pb.h"
#include "google/logging/type/log_severity.pb.h"
#include <google/protobuf/any.pb.h>
#include <google/protobuf/struct.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace logging {
namespace v2 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_google_2flogging_2fv2_2flog_5fentry_2eproto();
void protobuf_InitDefaults_google_2flogging_2fv2_2flog_5fentry_2eproto();
void protobuf_AssignDesc_google_2flogging_2fv2_2flog_5fentry_2eproto();
void protobuf_ShutdownFile_google_2flogging_2fv2_2flog_5fentry_2eproto();

class LogEntry;
class LogEntryOperation;
class LogEntrySourceLocation;

// ===================================================================

class LogEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.LogEntry) */ {
 public:
  LogEntry();
  virtual ~LogEntry();

  LogEntry(const LogEntry& from);

  inline LogEntry& operator=(const LogEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogEntry& default_instance();

  enum PayloadCase {
    kProtoPayload = 2,
    kTextPayload = 3,
    kJsonPayload = 6,
    PAYLOAD_NOT_SET = 0,
  };

  static const LogEntry* internal_default_instance();

  void UnsafeArenaSwap(LogEntry* other);
  void Swap(LogEntry* other);

  // implements Message ----------------------------------------------

  inline LogEntry* New() const { return New(NULL); }

  LogEntry* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogEntry& from);
  void MergeFrom(const LogEntry& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogEntry* other);
  void UnsafeMergeFrom(const LogEntry& from);
  protected:
  explicit LogEntry(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional string log_name = 12;
  void clear_log_name();
  static const int kLogNameFieldNumber = 12;
  const ::std::string& log_name() const;
  void set_log_name(const ::std::string& value);
  void set_log_name(const char* value);
  void set_log_name(const char* value, size_t size);
  ::std::string* mutable_log_name();
  ::std::string* release_log_name();
  void set_allocated_log_name(::std::string* log_name);
  ::std::string* unsafe_arena_release_log_name();
  void unsafe_arena_set_allocated_log_name(
      ::std::string* log_name);

  // optional .google.api.MonitoredResource resource = 8;
  bool has_resource() const;
  void clear_resource();
  static const int kResourceFieldNumber = 8;
  private:
  void _slow_mutable_resource();
  void _slow_set_allocated_resource(
      ::google::protobuf::Arena* message_arena, ::google::api::MonitoredResource** resource);
  ::google::api::MonitoredResource* _slow_release_resource();
  public:
  const ::google::api::MonitoredResource& resource() const;
  ::google::api::MonitoredResource* mutable_resource();
  ::google::api::MonitoredResource* release_resource();
  void set_allocated_resource(::google::api::MonitoredResource* resource);
  ::google::api::MonitoredResource* unsafe_arena_release_resource();
  void unsafe_arena_set_allocated_resource(
      ::google::api::MonitoredResource* resource);

  // optional .google.protobuf.Any proto_payload = 2;
  bool has_proto_payload() const;
  void clear_proto_payload();
  static const int kProtoPayloadFieldNumber = 2;
  private:
  void _slow_mutable_proto_payload();
  ::google::protobuf::Any* _slow_release_proto_payload();
  public:
  const ::google::protobuf::Any& proto_payload() const;
  ::google::protobuf::Any* mutable_proto_payload();
  ::google::protobuf::Any* release_proto_payload();
  void set_allocated_proto_payload(::google::protobuf::Any* proto_payload);
  ::google::protobuf::Any* unsafe_arena_release_proto_payload();
  void unsafe_arena_set_allocated_proto_payload(
      ::google::protobuf::Any* proto_payload);

  // optional string text_payload = 3;
  private:
  bool has_text_payload() const;
  public:
  void clear_text_payload();
  static const int kTextPayloadFieldNumber = 3;
  const ::std::string& text_payload() const;
  void set_text_payload(const ::std::string& value);
  void set_text_payload(const char* value);
  void set_text_payload(const char* value, size_t size);
  ::std::string* mutable_text_payload();
  ::std::string* release_text_payload();
  void set_allocated_text_payload(::std::string* text_payload);
  ::std::string* unsafe_arena_release_text_payload();
  void unsafe_arena_set_allocated_text_payload(
      ::std::string* text_payload);

  // optional .google.protobuf.Struct json_payload = 6;
  bool has_json_payload() const;
  void clear_json_payload();
  static const int kJsonPayloadFieldNumber = 6;
  private:
  void _slow_mutable_json_payload();
  void _slow_set_allocated_json_payload(
      ::google::protobuf::Arena* message_arena, ::google::protobuf::Struct** json_payload);
  ::google::protobuf::Struct* _slow_release_json_payload();
  public:
  const ::google::protobuf::Struct& json_payload() const;
  ::google::protobuf::Struct* mutable_json_payload();
  ::google::protobuf::Struct* release_json_payload();
  void set_allocated_json_payload(::google::protobuf::Struct* json_payload);
  ::google::protobuf::Struct* unsafe_arena_release_json_payload();
  void unsafe_arena_set_allocated_json_payload(
      ::google::protobuf::Struct* json_payload);

  // optional .google.protobuf.Timestamp timestamp = 9;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 9;
  private:
  void _slow_mutable_timestamp();
  void _slow_set_allocated_timestamp(
      ::google::protobuf::Arena* message_arena, ::google::protobuf::Timestamp** timestamp);
  ::google::protobuf::Timestamp* _slow_release_timestamp();
  public:
  const ::google::protobuf::Timestamp& timestamp() const;
  ::google::protobuf::Timestamp* mutable_timestamp();
  ::google::protobuf::Timestamp* release_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* timestamp);
  ::google::protobuf::Timestamp* unsafe_arena_release_timestamp();
  void unsafe_arena_set_allocated_timestamp(
      ::google::protobuf::Timestamp* timestamp);

  // optional .google.logging.type.LogSeverity severity = 10;
  void clear_severity();
  static const int kSeverityFieldNumber = 10;
  ::google::logging::type::LogSeverity severity() const;
  void set_severity(::google::logging::type::LogSeverity value);

  // optional string insert_id = 4;
  void clear_insert_id();
  static const int kInsertIdFieldNumber = 4;
  const ::std::string& insert_id() const;
  void set_insert_id(const ::std::string& value);
  void set_insert_id(const char* value);
  void set_insert_id(const char* value, size_t size);
  ::std::string* mutable_insert_id();
  ::std::string* release_insert_id();
  void set_allocated_insert_id(::std::string* insert_id);
  ::std::string* unsafe_arena_release_insert_id();
  void unsafe_arena_set_allocated_insert_id(
      ::std::string* insert_id);

  // optional .google.logging.type.HttpRequest http_request = 7;
  bool has_http_request() const;
  void clear_http_request();
  static const int kHttpRequestFieldNumber = 7;
  private:
  void _slow_mutable_http_request();
  ::google::logging::type::HttpRequest* _slow_release_http_request();
  public:
  const ::google::logging::type::HttpRequest& http_request() const;
  ::google::logging::type::HttpRequest* mutable_http_request();
  ::google::logging::type::HttpRequest* release_http_request();
  void set_allocated_http_request(::google::logging::type::HttpRequest* http_request);
  ::google::logging::type::HttpRequest* unsafe_arena_release_http_request();
  void unsafe_arena_set_allocated_http_request(
      ::google::logging::type::HttpRequest* http_request);

  // map<string, string> labels = 11;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 11;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      labels() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_labels();

  // optional .google.logging.v2.LogEntryOperation operation = 15;
  bool has_operation() const;
  void clear_operation();
  static const int kOperationFieldNumber = 15;
  private:
  void _slow_mutable_operation();
  void _slow_set_allocated_operation(
      ::google::protobuf::Arena* message_arena, ::google::logging::v2::LogEntryOperation** operation);
  ::google::logging::v2::LogEntryOperation* _slow_release_operation();
  public:
  const ::google::logging::v2::LogEntryOperation& operation() const;
  ::google::logging::v2::LogEntryOperation* mutable_operation();
  ::google::logging::v2::LogEntryOperation* release_operation();
  void set_allocated_operation(::google::logging::v2::LogEntryOperation* operation);
  ::google::logging::v2::LogEntryOperation* unsafe_arena_release_operation();
  void unsafe_arena_set_allocated_operation(
      ::google::logging::v2::LogEntryOperation* operation);

  // optional string trace = 22;
  void clear_trace();
  static const int kTraceFieldNumber = 22;
  const ::std::string& trace() const;
  void set_trace(const ::std::string& value);
  void set_trace(const char* value);
  void set_trace(const char* value, size_t size);
  ::std::string* mutable_trace();
  ::std::string* release_trace();
  void set_allocated_trace(::std::string* trace);
  ::std::string* unsafe_arena_release_trace();
  void unsafe_arena_set_allocated_trace(
      ::std::string* trace);

  // optional .google.logging.v2.LogEntrySourceLocation source_location = 23;
  bool has_source_location() const;
  void clear_source_location();
  static const int kSourceLocationFieldNumber = 23;
  private:
  void _slow_mutable_source_location();
  void _slow_set_allocated_source_location(
      ::google::protobuf::Arena* message_arena, ::google::logging::v2::LogEntrySourceLocation** source_location);
  ::google::logging::v2::LogEntrySourceLocation* _slow_release_source_location();
  public:
  const ::google::logging::v2::LogEntrySourceLocation& source_location() const;
  ::google::logging::v2::LogEntrySourceLocation* mutable_source_location();
  ::google::logging::v2::LogEntrySourceLocation* release_source_location();
  void set_allocated_source_location(::google::logging::v2::LogEntrySourceLocation* source_location);
  ::google::logging::v2::LogEntrySourceLocation* unsafe_arena_release_source_location();
  void unsafe_arena_set_allocated_source_location(
      ::google::logging::v2::LogEntrySourceLocation* source_location);

  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:google.logging.v2.LogEntry)
 private:
  inline void set_has_proto_payload();
  inline void set_has_text_payload();
  inline void set_has_json_payload();

  inline bool has_payload() const;
  void clear_payload();
  inline void clear_has_payload();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      LogEntry_LabelsEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  ::google::protobuf::internal::ArenaStringPtr log_name_;
  ::google::protobuf::internal::ArenaStringPtr insert_id_;
  ::google::protobuf::internal::ArenaStringPtr trace_;
  ::google::api::MonitoredResource* resource_;
  ::google::protobuf::Timestamp* timestamp_;
  ::google::logging::type::HttpRequest* http_request_;
  ::google::logging::v2::LogEntryOperation* operation_;
  ::google::logging::v2::LogEntrySourceLocation* source_location_;
  int severity_;
  union PayloadUnion {
    PayloadUnion() {}
    ::google::protobuf::Any* proto_payload_;
    ::google::protobuf::internal::ArenaStringPtr text_payload_;
    ::google::protobuf::Struct* json_payload_;
  } payload_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_InitDefaults_google_2flogging_2fv2_2flog_5fentry_2eproto_impl();
  friend void  protobuf_AddDesc_google_2flogging_2fv2_2flog_5fentry_2eproto_impl();
  friend void protobuf_AssignDesc_google_2flogging_2fv2_2flog_5fentry_2eproto();
  friend void protobuf_ShutdownFile_google_2flogging_2fv2_2flog_5fentry_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<LogEntry> LogEntry_default_instance_;

// -------------------------------------------------------------------

class LogEntryOperation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.LogEntryOperation) */ {
 public:
  LogEntryOperation();
  virtual ~LogEntryOperation();

  LogEntryOperation(const LogEntryOperation& from);

  inline LogEntryOperation& operator=(const LogEntryOperation& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogEntryOperation& default_instance();

  static const LogEntryOperation* internal_default_instance();

  void UnsafeArenaSwap(LogEntryOperation* other);
  void Swap(LogEntryOperation* other);

  // implements Message ----------------------------------------------

  inline LogEntryOperation* New() const { return New(NULL); }

  LogEntryOperation* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogEntryOperation& from);
  void MergeFrom(const LogEntryOperation& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogEntryOperation* other);
  void UnsafeMergeFrom(const LogEntryOperation& from);
  protected:
  explicit LogEntryOperation(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);
  ::std::string* unsafe_arena_release_id();
  void unsafe_arena_set_allocated_id(
      ::std::string* id);

  // optional string producer = 2;
  void clear_producer();
  static const int kProducerFieldNumber = 2;
  const ::std::string& producer() const;
  void set_producer(const ::std::string& value);
  void set_producer(const char* value);
  void set_producer(const char* value, size_t size);
  ::std::string* mutable_producer();
  ::std::string* release_producer();
  void set_allocated_producer(::std::string* producer);
  ::std::string* unsafe_arena_release_producer();
  void unsafe_arena_set_allocated_producer(
      ::std::string* producer);

  // optional bool first = 3;
  void clear_first();
  static const int kFirstFieldNumber = 3;
  bool first() const;
  void set_first(bool value);

  // optional bool last = 4;
  void clear_last();
  static const int kLastFieldNumber = 4;
  bool last() const;
  void set_last(bool value);

  // @@protoc_insertion_point(class_scope:google.logging.v2.LogEntryOperation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr producer_;
  bool first_;
  bool last_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2flogging_2fv2_2flog_5fentry_2eproto_impl();
  friend void  protobuf_AddDesc_google_2flogging_2fv2_2flog_5fentry_2eproto_impl();
  friend void protobuf_AssignDesc_google_2flogging_2fv2_2flog_5fentry_2eproto();
  friend void protobuf_ShutdownFile_google_2flogging_2fv2_2flog_5fentry_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<LogEntryOperation> LogEntryOperation_default_instance_;

// -------------------------------------------------------------------

class LogEntrySourceLocation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.LogEntrySourceLocation) */ {
 public:
  LogEntrySourceLocation();
  virtual ~LogEntrySourceLocation();

  LogEntrySourceLocation(const LogEntrySourceLocation& from);

  inline LogEntrySourceLocation& operator=(const LogEntrySourceLocation& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogEntrySourceLocation& default_instance();

  static const LogEntrySourceLocation* internal_default_instance();

  void UnsafeArenaSwap(LogEntrySourceLocation* other);
  void Swap(LogEntrySourceLocation* other);

  // implements Message ----------------------------------------------

  inline LogEntrySourceLocation* New() const { return New(NULL); }

  LogEntrySourceLocation* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogEntrySourceLocation& from);
  void MergeFrom(const LogEntrySourceLocation& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogEntrySourceLocation* other);
  void UnsafeMergeFrom(const LogEntrySourceLocation& from);
  protected:
  explicit LogEntrySourceLocation(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string file = 1;
  void clear_file();
  static const int kFileFieldNumber = 1;
  const ::std::string& file() const;
  void set_file(const ::std::string& value);
  void set_file(const char* value);
  void set_file(const char* value, size_t size);
  ::std::string* mutable_file();
  ::std::string* release_file();
  void set_allocated_file(::std::string* file);
  ::std::string* unsafe_arena_release_file();
  void unsafe_arena_set_allocated_file(
      ::std::string* file);

  // optional int64 line = 2;
  void clear_line();
  static const int kLineFieldNumber = 2;
  ::google::protobuf::int64 line() const;
  void set_line(::google::protobuf::int64 value);

  // optional string function = 3;
  void clear_function();
  static const int kFunctionFieldNumber = 3;
  const ::std::string& function() const;
  void set_function(const ::std::string& value);
  void set_function(const char* value);
  void set_function(const char* value, size_t size);
  ::std::string* mutable_function();
  ::std::string* release_function();
  void set_allocated_function(::std::string* function);
  ::std::string* unsafe_arena_release_function();
  void unsafe_arena_set_allocated_function(
      ::std::string* function);

  // @@protoc_insertion_point(class_scope:google.logging.v2.LogEntrySourceLocation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr file_;
  ::google::protobuf::internal::ArenaStringPtr function_;
  ::google::protobuf::int64 line_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2flogging_2fv2_2flog_5fentry_2eproto_impl();
  friend void  protobuf_AddDesc_google_2flogging_2fv2_2flog_5fentry_2eproto_impl();
  friend void protobuf_AssignDesc_google_2flogging_2fv2_2flog_5fentry_2eproto();
  friend void protobuf_ShutdownFile_google_2flogging_2fv2_2flog_5fentry_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<LogEntrySourceLocation> LogEntrySourceLocation_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LogEntry

// optional string log_name = 12;
inline void LogEntry::clear_log_name() {
  log_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& LogEntry::log_name() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntry.log_name)
  return log_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogEntry::set_log_name(const ::std::string& value) {
  
  log_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.LogEntry.log_name)
}
inline void LogEntry::set_log_name(const char* value) {
  
  log_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogEntry.log_name)
}
inline void LogEntry::set_log_name(const char* value,
    size_t size) {
  
  log_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogEntry.log_name)
}
inline ::std::string* LogEntry::mutable_log_name() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntry.log_name)
  return log_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LogEntry::release_log_name() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntry.log_name)
  
  return log_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LogEntry::unsafe_arena_release_log_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogEntry.log_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return log_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LogEntry::set_allocated_log_name(::std::string* log_name) {
  if (log_name != NULL) {
    
  } else {
    
  }
  log_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntry.log_name)
}
inline void LogEntry::unsafe_arena_set_allocated_log_name(
    ::std::string* log_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (log_name != NULL) {
    
  } else {
    
  }
  log_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      log_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntry.log_name)
}

// optional .google.api.MonitoredResource resource = 8;
inline bool LogEntry::has_resource() const {
  return this != internal_default_instance() && resource_ != NULL;
}
inline void LogEntry::clear_resource() {
  if (GetArenaNoVirtual() == NULL && resource_ != NULL) delete resource_;
  resource_ = NULL;
}
inline const ::google::api::MonitoredResource& LogEntry::resource() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntry.resource)
  return resource_ != NULL ? *resource_
                         : *::google::api::MonitoredResource::internal_default_instance();
}
inline ::google::api::MonitoredResource* LogEntry::mutable_resource() {
  
  if (resource_ == NULL) {
    _slow_mutable_resource();
  }
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntry.resource)
  return resource_;
}
inline ::google::api::MonitoredResource* LogEntry::release_resource() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntry.resource)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_resource();
  } else {
    ::google::api::MonitoredResource* temp = resource_;
    resource_ = NULL;
    return temp;
  }
}
inline  void LogEntry::set_allocated_resource(::google::api::MonitoredResource* resource) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resource_;
  }
  if (resource != NULL) {
    _slow_set_allocated_resource(message_arena, &resource);
  }
  resource_ = resource;
  if (resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntry.resource)
}

// optional .google.protobuf.Any proto_payload = 2;
inline bool LogEntry::has_proto_payload() const {
  return payload_case() == kProtoPayload;
}
inline void LogEntry::set_has_proto_payload() {
  _oneof_case_[0] = kProtoPayload;
}
inline void LogEntry::clear_proto_payload() {
  if (has_proto_payload()) {
    if (GetArenaNoVirtual() == NULL) {
      delete payload_.proto_payload_;
    }
    clear_has_payload();
  }
}
inline  const ::google::protobuf::Any& LogEntry::proto_payload() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntry.proto_payload)
  return has_proto_payload()
      ? *payload_.proto_payload_
      : ::google::protobuf::Any::default_instance();
}
inline ::google::protobuf::Any* LogEntry::mutable_proto_payload() {
  if (!has_proto_payload()) {
    clear_payload();
    set_has_proto_payload();
    payload_.proto_payload_ = 
      ::google::protobuf::Arena::Create< ::google::protobuf::Any >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntry.proto_payload)
  return payload_.proto_payload_;
}
inline ::google::protobuf::Any* LogEntry::release_proto_payload() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntry.proto_payload)
  if (has_proto_payload()) {
    clear_has_payload();
    if (GetArenaNoVirtual() != NULL) {
      ::google::protobuf::Any* temp = new ::google::protobuf::Any(*payload_.proto_payload_);
      payload_.proto_payload_ = NULL;
      return temp;
    } else {
      ::google::protobuf::Any* temp = payload_.proto_payload_;
      payload_.proto_payload_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void LogEntry::set_allocated_proto_payload(::google::protobuf::Any* proto_payload) {
  clear_payload();
  if (proto_payload) {
    if (GetArenaNoVirtual() != NULL) {
      GetArenaNoVirtual()->Own(proto_payload);
    }
    set_has_proto_payload();
    payload_.proto_payload_ = proto_payload;
  }
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntry.proto_payload)
}
inline  ::google::protobuf::Any* LogEntry::unsafe_arena_release_proto_payload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogEntry.proto_payload)
  if (has_proto_payload()) {
    clear_has_payload();
    ::google::protobuf::Any* temp = payload_.proto_payload_;
    payload_.proto_payload_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void LogEntry::unsafe_arena_set_allocated_proto_payload(::google::protobuf::Any* proto_payload) {
  clear_payload();
  if (proto_payload) {
    set_has_proto_payload();
    payload_.proto_payload_ = proto_payload;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntry.proto_payload)
}

// optional string text_payload = 3;
inline bool LogEntry::has_text_payload() const {
  return payload_case() == kTextPayload;
}
inline void LogEntry::set_has_text_payload() {
  _oneof_case_[0] = kTextPayload;
}
inline void LogEntry::clear_text_payload() {
  if (has_text_payload()) {
    payload_.text_payload_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_payload();
  }
}
inline const ::std::string& LogEntry::text_payload() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntry.text_payload)
  if (has_text_payload()) {
    return payload_.text_payload_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void LogEntry::set_text_payload(const ::std::string& value) {
  if (!has_text_payload()) {
    clear_payload();
    set_has_text_payload();
    payload_.text_payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.text_payload_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.LogEntry.text_payload)
}
inline void LogEntry::set_text_payload(const char* value) {
  if (!has_text_payload()) {
    clear_payload();
    set_has_text_payload();
    payload_.text_payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.text_payload_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogEntry.text_payload)
}
inline void LogEntry::set_text_payload(const char* value,
                             size_t size) {
  if (!has_text_payload()) {
    clear_payload();
    set_has_text_payload();
    payload_.text_payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.text_payload_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogEntry.text_payload)
}
inline ::std::string* LogEntry::mutable_text_payload() {
  if (!has_text_payload()) {
    clear_payload();
    set_has_text_payload();
    payload_.text_payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return payload_.text_payload_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntry.text_payload)
}
inline ::std::string* LogEntry::release_text_payload() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntry.text_payload)
  if (has_text_payload()) {
    clear_has_payload();
    return payload_.text_payload_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
inline ::std::string* LogEntry::unsafe_arena_release_text_payload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogEntry.text_payload)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (has_text_payload()) {
    clear_has_payload();
    return payload_.text_payload_.UnsafeArenaRelease(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
inline void LogEntry::set_allocated_text_payload(::std::string* text_payload) {
  if (!has_text_payload()) {
    payload_.text_payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_payload();
  if (text_payload != NULL) {
    set_has_text_payload();
    payload_.text_payload_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text_payload,
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntry.text_payload)
}
inline void LogEntry::unsafe_arena_set_allocated_text_payload(::std::string* text_payload) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (!has_text_payload()) {
    payload_.text_payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_payload();
  if (text_payload) {
    set_has_text_payload();
    payload_.text_payload_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text_payload, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntry.text_payload)
}

// optional .google.protobuf.Struct json_payload = 6;
inline bool LogEntry::has_json_payload() const {
  return payload_case() == kJsonPayload;
}
inline void LogEntry::set_has_json_payload() {
  _oneof_case_[0] = kJsonPayload;
}
inline void LogEntry::clear_json_payload() {
  if (has_json_payload()) {
    if (GetArenaNoVirtual() == NULL) {
      delete payload_.json_payload_;
    }
    clear_has_payload();
  }
}
inline  const ::google::protobuf::Struct& LogEntry::json_payload() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntry.json_payload)
  return has_json_payload()
      ? *payload_.json_payload_
      : ::google::protobuf::Struct::default_instance();
}
inline ::google::protobuf::Struct* LogEntry::mutable_json_payload() {
  if (!has_json_payload()) {
    clear_payload();
    set_has_json_payload();
    payload_.json_payload_ = 
      ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Struct >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntry.json_payload)
  return payload_.json_payload_;
}
inline ::google::protobuf::Struct* LogEntry::release_json_payload() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntry.json_payload)
  if (has_json_payload()) {
    clear_has_payload();
    if (GetArenaNoVirtual() != NULL) {
      ::google::protobuf::Struct* temp = new ::google::protobuf::Struct(*payload_.json_payload_);
      payload_.json_payload_ = NULL;
      return temp;
    } else {
      ::google::protobuf::Struct* temp = payload_.json_payload_;
      payload_.json_payload_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void LogEntry::set_allocated_json_payload(::google::protobuf::Struct* json_payload) {
  clear_payload();
  if (json_payload) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(json_payload) == NULL) {
      GetArenaNoVirtual()->Own(json_payload);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(json_payload)) {
      ::google::protobuf::Struct* new_json_payload = 
          ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Struct >(
          GetArenaNoVirtual());
      new_json_payload->CopyFrom(*json_payload);
      json_payload = new_json_payload;
    }
    set_has_json_payload();
    payload_.json_payload_ = json_payload;
  }
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntry.json_payload)
}
inline  ::google::protobuf::Struct* LogEntry::unsafe_arena_release_json_payload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogEntry.json_payload)
  if (has_json_payload()) {
    clear_has_payload();
    ::google::protobuf::Struct* temp = payload_.json_payload_;
    payload_.json_payload_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void LogEntry::unsafe_arena_set_allocated_json_payload(::google::protobuf::Struct* json_payload) {
  clear_payload();
  if (json_payload) {
    set_has_json_payload();
    payload_.json_payload_ = json_payload;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntry.json_payload)
}

// optional .google.protobuf.Timestamp timestamp = 9;
inline bool LogEntry::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
inline void LogEntry::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
inline const ::google::protobuf::Timestamp& LogEntry::timestamp() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntry.timestamp)
  return timestamp_ != NULL ? *timestamp_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
inline ::google::protobuf::Timestamp* LogEntry::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    _slow_mutable_timestamp();
  }
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntry.timestamp)
  return timestamp_;
}
inline ::google::protobuf::Timestamp* LogEntry::release_timestamp() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntry.timestamp)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_timestamp();
  } else {
    ::google::protobuf::Timestamp* temp = timestamp_;
    timestamp_ = NULL;
    return temp;
  }
}
inline  void LogEntry::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete timestamp_;
  }
  if (timestamp != NULL) {
    _slow_set_allocated_timestamp(message_arena, &timestamp);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntry.timestamp)
}

// optional .google.logging.type.LogSeverity severity = 10;
inline void LogEntry::clear_severity() {
  severity_ = 0;
}
inline ::google::logging::type::LogSeverity LogEntry::severity() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntry.severity)
  return static_cast< ::google::logging::type::LogSeverity >(severity_);
}
inline void LogEntry::set_severity(::google::logging::type::LogSeverity value) {
  
  severity_ = value;
  // @@protoc_insertion_point(field_set:google.logging.v2.LogEntry.severity)
}

// optional string insert_id = 4;
inline void LogEntry::clear_insert_id() {
  insert_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& LogEntry::insert_id() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntry.insert_id)
  return insert_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogEntry::set_insert_id(const ::std::string& value) {
  
  insert_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.LogEntry.insert_id)
}
inline void LogEntry::set_insert_id(const char* value) {
  
  insert_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogEntry.insert_id)
}
inline void LogEntry::set_insert_id(const char* value,
    size_t size) {
  
  insert_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogEntry.insert_id)
}
inline ::std::string* LogEntry::mutable_insert_id() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntry.insert_id)
  return insert_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LogEntry::release_insert_id() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntry.insert_id)
  
  return insert_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LogEntry::unsafe_arena_release_insert_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogEntry.insert_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return insert_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LogEntry::set_allocated_insert_id(::std::string* insert_id) {
  if (insert_id != NULL) {
    
  } else {
    
  }
  insert_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), insert_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntry.insert_id)
}
inline void LogEntry::unsafe_arena_set_allocated_insert_id(
    ::std::string* insert_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (insert_id != NULL) {
    
  } else {
    
  }
  insert_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      insert_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntry.insert_id)
}

// optional .google.logging.type.HttpRequest http_request = 7;
inline bool LogEntry::has_http_request() const {
  return this != internal_default_instance() && http_request_ != NULL;
}
inline void LogEntry::clear_http_request() {
  if (GetArenaNoVirtual() == NULL && http_request_ != NULL) delete http_request_;
  http_request_ = NULL;
}
inline const ::google::logging::type::HttpRequest& LogEntry::http_request() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntry.http_request)
  return http_request_ != NULL ? *http_request_
                         : *::google::logging::type::HttpRequest::internal_default_instance();
}
inline ::google::logging::type::HttpRequest* LogEntry::mutable_http_request() {
  
  if (http_request_ == NULL) {
    _slow_mutable_http_request();
  }
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntry.http_request)
  return http_request_;
}
inline ::google::logging::type::HttpRequest* LogEntry::release_http_request() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntry.http_request)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_http_request();
  } else {
    ::google::logging::type::HttpRequest* temp = http_request_;
    http_request_ = NULL;
    return temp;
  }
}
inline  void LogEntry::set_allocated_http_request(::google::logging::type::HttpRequest* http_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete http_request_;
  }
  if (http_request != NULL) {
    if (message_arena != NULL) {
      message_arena->Own(http_request);
    }
  }
  http_request_ = http_request;
  if (http_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntry.http_request)
}

// map<string, string> labels = 11;
inline int LogEntry::labels_size() const {
  return labels_.size();
}
inline void LogEntry::clear_labels() {
  labels_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
LogEntry::labels() const {
  // @@protoc_insertion_point(field_map:google.logging.v2.LogEntry.labels)
  return labels_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
LogEntry::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.logging.v2.LogEntry.labels)
  return labels_.MutableMap();
}

// optional .google.logging.v2.LogEntryOperation operation = 15;
inline bool LogEntry::has_operation() const {
  return this != internal_default_instance() && operation_ != NULL;
}
inline void LogEntry::clear_operation() {
  if (GetArenaNoVirtual() == NULL && operation_ != NULL) delete operation_;
  operation_ = NULL;
}
inline const ::google::logging::v2::LogEntryOperation& LogEntry::operation() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntry.operation)
  return operation_ != NULL ? *operation_
                         : *::google::logging::v2::LogEntryOperation::internal_default_instance();
}
inline ::google::logging::v2::LogEntryOperation* LogEntry::mutable_operation() {
  
  if (operation_ == NULL) {
    _slow_mutable_operation();
  }
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntry.operation)
  return operation_;
}
inline ::google::logging::v2::LogEntryOperation* LogEntry::release_operation() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntry.operation)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_operation();
  } else {
    ::google::logging::v2::LogEntryOperation* temp = operation_;
    operation_ = NULL;
    return temp;
  }
}
inline  void LogEntry::set_allocated_operation(::google::logging::v2::LogEntryOperation* operation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operation_;
  }
  if (operation != NULL) {
    _slow_set_allocated_operation(message_arena, &operation);
  }
  operation_ = operation;
  if (operation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntry.operation)
}

// optional string trace = 22;
inline void LogEntry::clear_trace() {
  trace_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& LogEntry::trace() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntry.trace)
  return trace_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogEntry::set_trace(const ::std::string& value) {
  
  trace_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.LogEntry.trace)
}
inline void LogEntry::set_trace(const char* value) {
  
  trace_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogEntry.trace)
}
inline void LogEntry::set_trace(const char* value,
    size_t size) {
  
  trace_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogEntry.trace)
}
inline ::std::string* LogEntry::mutable_trace() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntry.trace)
  return trace_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LogEntry::release_trace() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntry.trace)
  
  return trace_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LogEntry::unsafe_arena_release_trace() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogEntry.trace)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return trace_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LogEntry::set_allocated_trace(::std::string* trace) {
  if (trace != NULL) {
    
  } else {
    
  }
  trace_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trace,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntry.trace)
}
inline void LogEntry::unsafe_arena_set_allocated_trace(
    ::std::string* trace) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (trace != NULL) {
    
  } else {
    
  }
  trace_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      trace, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntry.trace)
}

// optional .google.logging.v2.LogEntrySourceLocation source_location = 23;
inline bool LogEntry::has_source_location() const {
  return this != internal_default_instance() && source_location_ != NULL;
}
inline void LogEntry::clear_source_location() {
  if (GetArenaNoVirtual() == NULL && source_location_ != NULL) delete source_location_;
  source_location_ = NULL;
}
inline const ::google::logging::v2::LogEntrySourceLocation& LogEntry::source_location() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntry.source_location)
  return source_location_ != NULL ? *source_location_
                         : *::google::logging::v2::LogEntrySourceLocation::internal_default_instance();
}
inline ::google::logging::v2::LogEntrySourceLocation* LogEntry::mutable_source_location() {
  
  if (source_location_ == NULL) {
    _slow_mutable_source_location();
  }
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntry.source_location)
  return source_location_;
}
inline ::google::logging::v2::LogEntrySourceLocation* LogEntry::release_source_location() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntry.source_location)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_source_location();
  } else {
    ::google::logging::v2::LogEntrySourceLocation* temp = source_location_;
    source_location_ = NULL;
    return temp;
  }
}
inline  void LogEntry::set_allocated_source_location(::google::logging::v2::LogEntrySourceLocation* source_location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete source_location_;
  }
  if (source_location != NULL) {
    _slow_set_allocated_source_location(message_arena, &source_location);
  }
  source_location_ = source_location;
  if (source_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntry.source_location)
}

inline bool LogEntry::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void LogEntry::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline LogEntry::PayloadCase LogEntry::payload_case() const {
  return LogEntry::PayloadCase(_oneof_case_[0]);
}
inline const LogEntry* LogEntry::internal_default_instance() {
  return &LogEntry_default_instance_.get();
}
// -------------------------------------------------------------------

// LogEntryOperation

// optional string id = 1;
inline void LogEntryOperation::clear_id() {
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& LogEntryOperation::id() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntryOperation.id)
  return id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogEntryOperation::set_id(const ::std::string& value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.LogEntryOperation.id)
}
inline void LogEntryOperation::set_id(const char* value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogEntryOperation.id)
}
inline void LogEntryOperation::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogEntryOperation.id)
}
inline ::std::string* LogEntryOperation::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntryOperation.id)
  return id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LogEntryOperation::release_id() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntryOperation.id)
  
  return id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LogEntryOperation::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogEntryOperation.id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LogEntryOperation::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntryOperation.id)
}
inline void LogEntryOperation::unsafe_arena_set_allocated_id(
    ::std::string* id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (id != NULL) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntryOperation.id)
}

// optional string producer = 2;
inline void LogEntryOperation::clear_producer() {
  producer_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& LogEntryOperation::producer() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntryOperation.producer)
  return producer_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogEntryOperation::set_producer(const ::std::string& value) {
  
  producer_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.LogEntryOperation.producer)
}
inline void LogEntryOperation::set_producer(const char* value) {
  
  producer_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogEntryOperation.producer)
}
inline void LogEntryOperation::set_producer(const char* value,
    size_t size) {
  
  producer_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogEntryOperation.producer)
}
inline ::std::string* LogEntryOperation::mutable_producer() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntryOperation.producer)
  return producer_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LogEntryOperation::release_producer() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntryOperation.producer)
  
  return producer_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LogEntryOperation::unsafe_arena_release_producer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogEntryOperation.producer)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return producer_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LogEntryOperation::set_allocated_producer(::std::string* producer) {
  if (producer != NULL) {
    
  } else {
    
  }
  producer_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), producer,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntryOperation.producer)
}
inline void LogEntryOperation::unsafe_arena_set_allocated_producer(
    ::std::string* producer) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (producer != NULL) {
    
  } else {
    
  }
  producer_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      producer, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntryOperation.producer)
}

// optional bool first = 3;
inline void LogEntryOperation::clear_first() {
  first_ = false;
}
inline bool LogEntryOperation::first() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntryOperation.first)
  return first_;
}
inline void LogEntryOperation::set_first(bool value) {
  
  first_ = value;
  // @@protoc_insertion_point(field_set:google.logging.v2.LogEntryOperation.first)
}

// optional bool last = 4;
inline void LogEntryOperation::clear_last() {
  last_ = false;
}
inline bool LogEntryOperation::last() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntryOperation.last)
  return last_;
}
inline void LogEntryOperation::set_last(bool value) {
  
  last_ = value;
  // @@protoc_insertion_point(field_set:google.logging.v2.LogEntryOperation.last)
}

inline const LogEntryOperation* LogEntryOperation::internal_default_instance() {
  return &LogEntryOperation_default_instance_.get();
}
// -------------------------------------------------------------------

// LogEntrySourceLocation

// optional string file = 1;
inline void LogEntrySourceLocation::clear_file() {
  file_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& LogEntrySourceLocation::file() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntrySourceLocation.file)
  return file_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogEntrySourceLocation::set_file(const ::std::string& value) {
  
  file_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.LogEntrySourceLocation.file)
}
inline void LogEntrySourceLocation::set_file(const char* value) {
  
  file_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogEntrySourceLocation.file)
}
inline void LogEntrySourceLocation::set_file(const char* value,
    size_t size) {
  
  file_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogEntrySourceLocation.file)
}
inline ::std::string* LogEntrySourceLocation::mutable_file() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntrySourceLocation.file)
  return file_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LogEntrySourceLocation::release_file() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntrySourceLocation.file)
  
  return file_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LogEntrySourceLocation::unsafe_arena_release_file() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogEntrySourceLocation.file)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return file_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LogEntrySourceLocation::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    
  } else {
    
  }
  file_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntrySourceLocation.file)
}
inline void LogEntrySourceLocation::unsafe_arena_set_allocated_file(
    ::std::string* file) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (file != NULL) {
    
  } else {
    
  }
  file_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      file, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntrySourceLocation.file)
}

// optional int64 line = 2;
inline void LogEntrySourceLocation::clear_line() {
  line_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LogEntrySourceLocation::line() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntrySourceLocation.line)
  return line_;
}
inline void LogEntrySourceLocation::set_line(::google::protobuf::int64 value) {
  
  line_ = value;
  // @@protoc_insertion_point(field_set:google.logging.v2.LogEntrySourceLocation.line)
}

// optional string function = 3;
inline void LogEntrySourceLocation::clear_function() {
  function_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& LogEntrySourceLocation::function() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntrySourceLocation.function)
  return function_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogEntrySourceLocation::set_function(const ::std::string& value) {
  
  function_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.LogEntrySourceLocation.function)
}
inline void LogEntrySourceLocation::set_function(const char* value) {
  
  function_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogEntrySourceLocation.function)
}
inline void LogEntrySourceLocation::set_function(const char* value,
    size_t size) {
  
  function_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogEntrySourceLocation.function)
}
inline ::std::string* LogEntrySourceLocation::mutable_function() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntrySourceLocation.function)
  return function_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LogEntrySourceLocation::release_function() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntrySourceLocation.function)
  
  return function_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LogEntrySourceLocation::unsafe_arena_release_function() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogEntrySourceLocation.function)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return function_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LogEntrySourceLocation::set_allocated_function(::std::string* function) {
  if (function != NULL) {
    
  } else {
    
  }
  function_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), function,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntrySourceLocation.function)
}
inline void LogEntrySourceLocation::unsafe_arena_set_allocated_function(
    ::std::string* function) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (function != NULL) {
    
  } else {
    
  }
  function_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      function, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntrySourceLocation.function)
}

inline const LogEntrySourceLocation* LogEntrySourceLocation::internal_default_instance() {
  return &LogEntrySourceLocation_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace logging
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2flogging_2fv2_2flog_5fentry_2eproto__INCLUDED
