// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/admin/table/v1/bigtable_table_data.proto

#ifndef PROTOBUF_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto__INCLUDED
#define PROTOBUF_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/longrunning/operations.pb.h"
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace bigtable {
namespace admin {
namespace table {
namespace v1 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto();
void protobuf_InitDefaults_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto();
void protobuf_AssignDesc_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto();
void protobuf_ShutdownFile_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto();

class ColumnFamily;
class GcRule;
class GcRule_Intersection;
class GcRule_Union;
class Table;

enum Table_TimestampGranularity {
  Table_TimestampGranularity_MILLIS = 0,
  Table_TimestampGranularity_Table_TimestampGranularity_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Table_TimestampGranularity_Table_TimestampGranularity_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Table_TimestampGranularity_IsValid(int value);
const Table_TimestampGranularity Table_TimestampGranularity_TimestampGranularity_MIN = Table_TimestampGranularity_MILLIS;
const Table_TimestampGranularity Table_TimestampGranularity_TimestampGranularity_MAX = Table_TimestampGranularity_MILLIS;
const int Table_TimestampGranularity_TimestampGranularity_ARRAYSIZE = Table_TimestampGranularity_TimestampGranularity_MAX + 1;

const ::google::protobuf::EnumDescriptor* Table_TimestampGranularity_descriptor();
inline const ::std::string& Table_TimestampGranularity_Name(Table_TimestampGranularity value) {
  return ::google::protobuf::internal::NameOfEnum(
    Table_TimestampGranularity_descriptor(), value);
}
inline bool Table_TimestampGranularity_Parse(
    const ::std::string& name, Table_TimestampGranularity* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Table_TimestampGranularity>(
    Table_TimestampGranularity_descriptor(), name, value);
}
// ===================================================================

class Table : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.table.v1.Table) */ {
 public:
  Table();
  virtual ~Table();

  Table(const Table& from);

  inline Table& operator=(const Table& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Table& default_instance();

  static const Table* internal_default_instance();

  void Swap(Table* other);

  // implements Message ----------------------------------------------

  inline Table* New() const { return New(NULL); }

  Table* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Table& from);
  void MergeFrom(const Table& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Table* other);
  void UnsafeMergeFrom(const Table& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  typedef Table_TimestampGranularity TimestampGranularity;
  static const TimestampGranularity MILLIS =
    Table_TimestampGranularity_MILLIS;
  static inline bool TimestampGranularity_IsValid(int value) {
    return Table_TimestampGranularity_IsValid(value);
  }
  static const TimestampGranularity TimestampGranularity_MIN =
    Table_TimestampGranularity_TimestampGranularity_MIN;
  static const TimestampGranularity TimestampGranularity_MAX =
    Table_TimestampGranularity_TimestampGranularity_MAX;
  static const int TimestampGranularity_ARRAYSIZE =
    Table_TimestampGranularity_TimestampGranularity_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TimestampGranularity_descriptor() {
    return Table_TimestampGranularity_descriptor();
  }
  static inline const ::std::string& TimestampGranularity_Name(TimestampGranularity value) {
    return Table_TimestampGranularity_Name(value);
  }
  static inline bool TimestampGranularity_Parse(const ::std::string& name,
      TimestampGranularity* value) {
    return Table_TimestampGranularity_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .google.longrunning.Operation current_operation = 2;
  bool has_current_operation() const;
  void clear_current_operation();
  static const int kCurrentOperationFieldNumber = 2;
  const ::google::longrunning::Operation& current_operation() const;
  ::google::longrunning::Operation* mutable_current_operation();
  ::google::longrunning::Operation* release_current_operation();
  void set_allocated_current_operation(::google::longrunning::Operation* current_operation);

  // map<string, .google.bigtable.admin.table.v1.ColumnFamily> column_families = 3;
  int column_families_size() const;
  void clear_column_families();
  static const int kColumnFamiliesFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::google::bigtable::admin::table::v1::ColumnFamily >&
      column_families() const;
  ::google::protobuf::Map< ::std::string, ::google::bigtable::admin::table::v1::ColumnFamily >*
      mutable_column_families();

  // optional .google.bigtable.admin.table.v1.Table.TimestampGranularity granularity = 4;
  void clear_granularity();
  static const int kGranularityFieldNumber = 4;
  ::google::bigtable::admin::table::v1::Table_TimestampGranularity granularity() const;
  void set_granularity(::google::bigtable::admin::table::v1::Table_TimestampGranularity value);

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.table.v1.Table)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::google::bigtable::admin::table::v1::ColumnFamily,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      Table_ColumnFamiliesEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::google::bigtable::admin::table::v1::ColumnFamily,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > column_families_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::longrunning::Operation* current_operation_;
  int granularity_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto();
  friend void protobuf_ShutdownFile_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Table> Table_default_instance_;

// -------------------------------------------------------------------

class ColumnFamily : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.table.v1.ColumnFamily) */ {
 public:
  ColumnFamily();
  virtual ~ColumnFamily();

  ColumnFamily(const ColumnFamily& from);

  inline ColumnFamily& operator=(const ColumnFamily& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ColumnFamily& default_instance();

  static const ColumnFamily* internal_default_instance();

  void Swap(ColumnFamily* other);

  // implements Message ----------------------------------------------

  inline ColumnFamily* New() const { return New(NULL); }

  ColumnFamily* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ColumnFamily& from);
  void MergeFrom(const ColumnFamily& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ColumnFamily* other);
  void UnsafeMergeFrom(const ColumnFamily& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string gc_expression = 2;
  void clear_gc_expression();
  static const int kGcExpressionFieldNumber = 2;
  const ::std::string& gc_expression() const;
  void set_gc_expression(const ::std::string& value);
  void set_gc_expression(const char* value);
  void set_gc_expression(const char* value, size_t size);
  ::std::string* mutable_gc_expression();
  ::std::string* release_gc_expression();
  void set_allocated_gc_expression(::std::string* gc_expression);

  // optional .google.bigtable.admin.table.v1.GcRule gc_rule = 3;
  bool has_gc_rule() const;
  void clear_gc_rule();
  static const int kGcRuleFieldNumber = 3;
  const ::google::bigtable::admin::table::v1::GcRule& gc_rule() const;
  ::google::bigtable::admin::table::v1::GcRule* mutable_gc_rule();
  ::google::bigtable::admin::table::v1::GcRule* release_gc_rule();
  void set_allocated_gc_rule(::google::bigtable::admin::table::v1::GcRule* gc_rule);

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.table.v1.ColumnFamily)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr gc_expression_;
  ::google::bigtable::admin::table::v1::GcRule* gc_rule_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto();
  friend void protobuf_ShutdownFile_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ColumnFamily> ColumnFamily_default_instance_;

// -------------------------------------------------------------------

class GcRule_Intersection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.table.v1.GcRule.Intersection) */ {
 public:
  GcRule_Intersection();
  virtual ~GcRule_Intersection();

  GcRule_Intersection(const GcRule_Intersection& from);

  inline GcRule_Intersection& operator=(const GcRule_Intersection& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GcRule_Intersection& default_instance();

  static const GcRule_Intersection* internal_default_instance();

  void Swap(GcRule_Intersection* other);

  // implements Message ----------------------------------------------

  inline GcRule_Intersection* New() const { return New(NULL); }

  GcRule_Intersection* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GcRule_Intersection& from);
  void MergeFrom(const GcRule_Intersection& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GcRule_Intersection* other);
  void UnsafeMergeFrom(const GcRule_Intersection& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.bigtable.admin.table.v1.GcRule rules = 1;
  int rules_size() const;
  void clear_rules();
  static const int kRulesFieldNumber = 1;
  const ::google::bigtable::admin::table::v1::GcRule& rules(int index) const;
  ::google::bigtable::admin::table::v1::GcRule* mutable_rules(int index);
  ::google::bigtable::admin::table::v1::GcRule* add_rules();
  ::google::protobuf::RepeatedPtrField< ::google::bigtable::admin::table::v1::GcRule >*
      mutable_rules();
  const ::google::protobuf::RepeatedPtrField< ::google::bigtable::admin::table::v1::GcRule >&
      rules() const;

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.table.v1.GcRule.Intersection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::bigtable::admin::table::v1::GcRule > rules_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto();
  friend void protobuf_ShutdownFile_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<GcRule_Intersection> GcRule_Intersection_default_instance_;

// -------------------------------------------------------------------

class GcRule_Union : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.table.v1.GcRule.Union) */ {
 public:
  GcRule_Union();
  virtual ~GcRule_Union();

  GcRule_Union(const GcRule_Union& from);

  inline GcRule_Union& operator=(const GcRule_Union& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GcRule_Union& default_instance();

  static const GcRule_Union* internal_default_instance();

  void Swap(GcRule_Union* other);

  // implements Message ----------------------------------------------

  inline GcRule_Union* New() const { return New(NULL); }

  GcRule_Union* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GcRule_Union& from);
  void MergeFrom(const GcRule_Union& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GcRule_Union* other);
  void UnsafeMergeFrom(const GcRule_Union& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.bigtable.admin.table.v1.GcRule rules = 1;
  int rules_size() const;
  void clear_rules();
  static const int kRulesFieldNumber = 1;
  const ::google::bigtable::admin::table::v1::GcRule& rules(int index) const;
  ::google::bigtable::admin::table::v1::GcRule* mutable_rules(int index);
  ::google::bigtable::admin::table::v1::GcRule* add_rules();
  ::google::protobuf::RepeatedPtrField< ::google::bigtable::admin::table::v1::GcRule >*
      mutable_rules();
  const ::google::protobuf::RepeatedPtrField< ::google::bigtable::admin::table::v1::GcRule >&
      rules() const;

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.table.v1.GcRule.Union)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::bigtable::admin::table::v1::GcRule > rules_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto();
  friend void protobuf_ShutdownFile_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<GcRule_Union> GcRule_Union_default_instance_;

// -------------------------------------------------------------------

class GcRule : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.table.v1.GcRule) */ {
 public:
  GcRule();
  virtual ~GcRule();

  GcRule(const GcRule& from);

  inline GcRule& operator=(const GcRule& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GcRule& default_instance();

  enum RuleCase {
    kMaxNumVersions = 1,
    kMaxAge = 2,
    kIntersection = 3,
    kUnion = 4,
    RULE_NOT_SET = 0,
  };

  static const GcRule* internal_default_instance();

  void Swap(GcRule* other);

  // implements Message ----------------------------------------------

  inline GcRule* New() const { return New(NULL); }

  GcRule* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GcRule& from);
  void MergeFrom(const GcRule& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GcRule* other);
  void UnsafeMergeFrom(const GcRule& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef GcRule_Intersection Intersection;
  typedef GcRule_Union Union;

  // accessors -------------------------------------------------------

  // optional int32 max_num_versions = 1;
  private:
  bool has_max_num_versions() const;
  public:
  void clear_max_num_versions();
  static const int kMaxNumVersionsFieldNumber = 1;
  ::google::protobuf::int32 max_num_versions() const;
  void set_max_num_versions(::google::protobuf::int32 value);

  // optional .google.protobuf.Duration max_age = 2;
  bool has_max_age() const;
  void clear_max_age();
  static const int kMaxAgeFieldNumber = 2;
  const ::google::protobuf::Duration& max_age() const;
  ::google::protobuf::Duration* mutable_max_age();
  ::google::protobuf::Duration* release_max_age();
  void set_allocated_max_age(::google::protobuf::Duration* max_age);

  // optional .google.bigtable.admin.table.v1.GcRule.Intersection intersection = 3;
  bool has_intersection() const;
  void clear_intersection();
  static const int kIntersectionFieldNumber = 3;
  const ::google::bigtable::admin::table::v1::GcRule_Intersection& intersection() const;
  ::google::bigtable::admin::table::v1::GcRule_Intersection* mutable_intersection();
  ::google::bigtable::admin::table::v1::GcRule_Intersection* release_intersection();
  void set_allocated_intersection(::google::bigtable::admin::table::v1::GcRule_Intersection* intersection);

  // optional .google.bigtable.admin.table.v1.GcRule.Union union = 4;
  bool has_union_() const;
  void clear_union_();
  static const int kUnionFieldNumber = 4;
  const ::google::bigtable::admin::table::v1::GcRule_Union& union_() const;
  ::google::bigtable::admin::table::v1::GcRule_Union* mutable_union_();
  ::google::bigtable::admin::table::v1::GcRule_Union* release_union_();
  void set_allocated_union_(::google::bigtable::admin::table::v1::GcRule_Union* union_);

  RuleCase rule_case() const;
  // @@protoc_insertion_point(class_scope:google.bigtable.admin.table.v1.GcRule)
 private:
  inline void set_has_max_num_versions();
  inline void set_has_max_age();
  inline void set_has_intersection();
  inline void set_has_union_();

  inline bool has_rule() const;
  void clear_rule();
  inline void clear_has_rule();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union RuleUnion {
    RuleUnion() {}
    ::google::protobuf::int32 max_num_versions_;
    ::google::protobuf::Duration* max_age_;
    ::google::bigtable::admin::table::v1::GcRule_Intersection* intersection_;
    ::google::bigtable::admin::table::v1::GcRule_Union* union__;
  } rule_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_InitDefaults_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto();
  friend void protobuf_ShutdownFile_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<GcRule> GcRule_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Table

// optional string name = 1;
inline void Table::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Table::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.Table.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Table::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.table.v1.Table.name)
}
inline void Table::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.table.v1.Table.name)
}
inline void Table::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.table.v1.Table.name)
}
inline ::std::string* Table::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.table.v1.Table.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Table::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.table.v1.Table.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Table::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.table.v1.Table.name)
}

// optional .google.longrunning.Operation current_operation = 2;
inline bool Table::has_current_operation() const {
  return this != internal_default_instance() && current_operation_ != NULL;
}
inline void Table::clear_current_operation() {
  if (GetArenaNoVirtual() == NULL && current_operation_ != NULL) delete current_operation_;
  current_operation_ = NULL;
}
inline const ::google::longrunning::Operation& Table::current_operation() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.Table.current_operation)
  return current_operation_ != NULL ? *current_operation_
                         : *::google::longrunning::Operation::internal_default_instance();
}
inline ::google::longrunning::Operation* Table::mutable_current_operation() {
  
  if (current_operation_ == NULL) {
    current_operation_ = new ::google::longrunning::Operation;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.table.v1.Table.current_operation)
  return current_operation_;
}
inline ::google::longrunning::Operation* Table::release_current_operation() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.table.v1.Table.current_operation)
  
  ::google::longrunning::Operation* temp = current_operation_;
  current_operation_ = NULL;
  return temp;
}
inline void Table::set_allocated_current_operation(::google::longrunning::Operation* current_operation) {
  delete current_operation_;
  current_operation_ = current_operation;
  if (current_operation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.table.v1.Table.current_operation)
}

// map<string, .google.bigtable.admin.table.v1.ColumnFamily> column_families = 3;
inline int Table::column_families_size() const {
  return column_families_.size();
}
inline void Table::clear_column_families() {
  column_families_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::bigtable::admin::table::v1::ColumnFamily >&
Table::column_families() const {
  // @@protoc_insertion_point(field_map:google.bigtable.admin.table.v1.Table.column_families)
  return column_families_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::bigtable::admin::table::v1::ColumnFamily >*
Table::mutable_column_families() {
  // @@protoc_insertion_point(field_mutable_map:google.bigtable.admin.table.v1.Table.column_families)
  return column_families_.MutableMap();
}

// optional .google.bigtable.admin.table.v1.Table.TimestampGranularity granularity = 4;
inline void Table::clear_granularity() {
  granularity_ = 0;
}
inline ::google::bigtable::admin::table::v1::Table_TimestampGranularity Table::granularity() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.Table.granularity)
  return static_cast< ::google::bigtable::admin::table::v1::Table_TimestampGranularity >(granularity_);
}
inline void Table::set_granularity(::google::bigtable::admin::table::v1::Table_TimestampGranularity value) {
  
  granularity_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.admin.table.v1.Table.granularity)
}

inline const Table* Table::internal_default_instance() {
  return &Table_default_instance_.get();
}
// -------------------------------------------------------------------

// ColumnFamily

// optional string name = 1;
inline void ColumnFamily::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ColumnFamily::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.ColumnFamily.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ColumnFamily::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.table.v1.ColumnFamily.name)
}
inline void ColumnFamily::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.table.v1.ColumnFamily.name)
}
inline void ColumnFamily::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.table.v1.ColumnFamily.name)
}
inline ::std::string* ColumnFamily::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.table.v1.ColumnFamily.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ColumnFamily::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.table.v1.ColumnFamily.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ColumnFamily::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.table.v1.ColumnFamily.name)
}

// optional string gc_expression = 2;
inline void ColumnFamily::clear_gc_expression() {
  gc_expression_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ColumnFamily::gc_expression() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.ColumnFamily.gc_expression)
  return gc_expression_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ColumnFamily::set_gc_expression(const ::std::string& value) {
  
  gc_expression_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.table.v1.ColumnFamily.gc_expression)
}
inline void ColumnFamily::set_gc_expression(const char* value) {
  
  gc_expression_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.table.v1.ColumnFamily.gc_expression)
}
inline void ColumnFamily::set_gc_expression(const char* value, size_t size) {
  
  gc_expression_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.table.v1.ColumnFamily.gc_expression)
}
inline ::std::string* ColumnFamily::mutable_gc_expression() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.table.v1.ColumnFamily.gc_expression)
  return gc_expression_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ColumnFamily::release_gc_expression() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.table.v1.ColumnFamily.gc_expression)
  
  return gc_expression_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ColumnFamily::set_allocated_gc_expression(::std::string* gc_expression) {
  if (gc_expression != NULL) {
    
  } else {
    
  }
  gc_expression_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gc_expression);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.table.v1.ColumnFamily.gc_expression)
}

// optional .google.bigtable.admin.table.v1.GcRule gc_rule = 3;
inline bool ColumnFamily::has_gc_rule() const {
  return this != internal_default_instance() && gc_rule_ != NULL;
}
inline void ColumnFamily::clear_gc_rule() {
  if (GetArenaNoVirtual() == NULL && gc_rule_ != NULL) delete gc_rule_;
  gc_rule_ = NULL;
}
inline const ::google::bigtable::admin::table::v1::GcRule& ColumnFamily::gc_rule() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.ColumnFamily.gc_rule)
  return gc_rule_ != NULL ? *gc_rule_
                         : *::google::bigtable::admin::table::v1::GcRule::internal_default_instance();
}
inline ::google::bigtable::admin::table::v1::GcRule* ColumnFamily::mutable_gc_rule() {
  
  if (gc_rule_ == NULL) {
    gc_rule_ = new ::google::bigtable::admin::table::v1::GcRule;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.table.v1.ColumnFamily.gc_rule)
  return gc_rule_;
}
inline ::google::bigtable::admin::table::v1::GcRule* ColumnFamily::release_gc_rule() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.table.v1.ColumnFamily.gc_rule)
  
  ::google::bigtable::admin::table::v1::GcRule* temp = gc_rule_;
  gc_rule_ = NULL;
  return temp;
}
inline void ColumnFamily::set_allocated_gc_rule(::google::bigtable::admin::table::v1::GcRule* gc_rule) {
  delete gc_rule_;
  gc_rule_ = gc_rule;
  if (gc_rule) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.table.v1.ColumnFamily.gc_rule)
}

inline const ColumnFamily* ColumnFamily::internal_default_instance() {
  return &ColumnFamily_default_instance_.get();
}
// -------------------------------------------------------------------

// GcRule_Intersection

// repeated .google.bigtable.admin.table.v1.GcRule rules = 1;
inline int GcRule_Intersection::rules_size() const {
  return rules_.size();
}
inline void GcRule_Intersection::clear_rules() {
  rules_.Clear();
}
inline const ::google::bigtable::admin::table::v1::GcRule& GcRule_Intersection::rules(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.GcRule.Intersection.rules)
  return rules_.Get(index);
}
inline ::google::bigtable::admin::table::v1::GcRule* GcRule_Intersection::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.table.v1.GcRule.Intersection.rules)
  return rules_.Mutable(index);
}
inline ::google::bigtable::admin::table::v1::GcRule* GcRule_Intersection::add_rules() {
  // @@protoc_insertion_point(field_add:google.bigtable.admin.table.v1.GcRule.Intersection.rules)
  return rules_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::bigtable::admin::table::v1::GcRule >*
GcRule_Intersection::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.admin.table.v1.GcRule.Intersection.rules)
  return &rules_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::bigtable::admin::table::v1::GcRule >&
GcRule_Intersection::rules() const {
  // @@protoc_insertion_point(field_list:google.bigtable.admin.table.v1.GcRule.Intersection.rules)
  return rules_;
}

inline const GcRule_Intersection* GcRule_Intersection::internal_default_instance() {
  return &GcRule_Intersection_default_instance_.get();
}
// -------------------------------------------------------------------

// GcRule_Union

// repeated .google.bigtable.admin.table.v1.GcRule rules = 1;
inline int GcRule_Union::rules_size() const {
  return rules_.size();
}
inline void GcRule_Union::clear_rules() {
  rules_.Clear();
}
inline const ::google::bigtable::admin::table::v1::GcRule& GcRule_Union::rules(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.GcRule.Union.rules)
  return rules_.Get(index);
}
inline ::google::bigtable::admin::table::v1::GcRule* GcRule_Union::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.table.v1.GcRule.Union.rules)
  return rules_.Mutable(index);
}
inline ::google::bigtable::admin::table::v1::GcRule* GcRule_Union::add_rules() {
  // @@protoc_insertion_point(field_add:google.bigtable.admin.table.v1.GcRule.Union.rules)
  return rules_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::bigtable::admin::table::v1::GcRule >*
GcRule_Union::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.admin.table.v1.GcRule.Union.rules)
  return &rules_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::bigtable::admin::table::v1::GcRule >&
GcRule_Union::rules() const {
  // @@protoc_insertion_point(field_list:google.bigtable.admin.table.v1.GcRule.Union.rules)
  return rules_;
}

inline const GcRule_Union* GcRule_Union::internal_default_instance() {
  return &GcRule_Union_default_instance_.get();
}
// -------------------------------------------------------------------

// GcRule

// optional int32 max_num_versions = 1;
inline bool GcRule::has_max_num_versions() const {
  return rule_case() == kMaxNumVersions;
}
inline void GcRule::set_has_max_num_versions() {
  _oneof_case_[0] = kMaxNumVersions;
}
inline void GcRule::clear_max_num_versions() {
  if (has_max_num_versions()) {
    rule_.max_num_versions_ = 0;
    clear_has_rule();
  }
}
inline ::google::protobuf::int32 GcRule::max_num_versions() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.GcRule.max_num_versions)
  if (has_max_num_versions()) {
    return rule_.max_num_versions_;
  }
  return 0;
}
inline void GcRule::set_max_num_versions(::google::protobuf::int32 value) {
  if (!has_max_num_versions()) {
    clear_rule();
    set_has_max_num_versions();
  }
  rule_.max_num_versions_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.admin.table.v1.GcRule.max_num_versions)
}

// optional .google.protobuf.Duration max_age = 2;
inline bool GcRule::has_max_age() const {
  return rule_case() == kMaxAge;
}
inline void GcRule::set_has_max_age() {
  _oneof_case_[0] = kMaxAge;
}
inline void GcRule::clear_max_age() {
  if (has_max_age()) {
    delete rule_.max_age_;
    clear_has_rule();
  }
}
inline  const ::google::protobuf::Duration& GcRule::max_age() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.GcRule.max_age)
  return has_max_age()
      ? *rule_.max_age_
      : ::google::protobuf::Duration::default_instance();
}
inline ::google::protobuf::Duration* GcRule::mutable_max_age() {
  if (!has_max_age()) {
    clear_rule();
    set_has_max_age();
    rule_.max_age_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.table.v1.GcRule.max_age)
  return rule_.max_age_;
}
inline ::google::protobuf::Duration* GcRule::release_max_age() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.table.v1.GcRule.max_age)
  if (has_max_age()) {
    clear_has_rule();
    ::google::protobuf::Duration* temp = rule_.max_age_;
    rule_.max_age_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GcRule::set_allocated_max_age(::google::protobuf::Duration* max_age) {
  clear_rule();
  if (max_age) {
    if (static_cast< ::google::protobuf::Duration*>(max_age)->GetArena() != NULL) {
      ::google::protobuf::Duration* new_max_age = new ::google::protobuf::Duration;
      new_max_age->CopyFrom(*max_age);
      max_age = new_max_age;
    }
    set_has_max_age();
    rule_.max_age_ = max_age;
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.table.v1.GcRule.max_age)
}

// optional .google.bigtable.admin.table.v1.GcRule.Intersection intersection = 3;
inline bool GcRule::has_intersection() const {
  return rule_case() == kIntersection;
}
inline void GcRule::set_has_intersection() {
  _oneof_case_[0] = kIntersection;
}
inline void GcRule::clear_intersection() {
  if (has_intersection()) {
    delete rule_.intersection_;
    clear_has_rule();
  }
}
inline  const ::google::bigtable::admin::table::v1::GcRule_Intersection& GcRule::intersection() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.GcRule.intersection)
  return has_intersection()
      ? *rule_.intersection_
      : ::google::bigtable::admin::table::v1::GcRule_Intersection::default_instance();
}
inline ::google::bigtable::admin::table::v1::GcRule_Intersection* GcRule::mutable_intersection() {
  if (!has_intersection()) {
    clear_rule();
    set_has_intersection();
    rule_.intersection_ = new ::google::bigtable::admin::table::v1::GcRule_Intersection;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.table.v1.GcRule.intersection)
  return rule_.intersection_;
}
inline ::google::bigtable::admin::table::v1::GcRule_Intersection* GcRule::release_intersection() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.table.v1.GcRule.intersection)
  if (has_intersection()) {
    clear_has_rule();
    ::google::bigtable::admin::table::v1::GcRule_Intersection* temp = rule_.intersection_;
    rule_.intersection_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GcRule::set_allocated_intersection(::google::bigtable::admin::table::v1::GcRule_Intersection* intersection) {
  clear_rule();
  if (intersection) {
    set_has_intersection();
    rule_.intersection_ = intersection;
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.table.v1.GcRule.intersection)
}

// optional .google.bigtable.admin.table.v1.GcRule.Union union = 4;
inline bool GcRule::has_union_() const {
  return rule_case() == kUnion;
}
inline void GcRule::set_has_union_() {
  _oneof_case_[0] = kUnion;
}
inline void GcRule::clear_union_() {
  if (has_union_()) {
    delete rule_.union__;
    clear_has_rule();
  }
}
inline  const ::google::bigtable::admin::table::v1::GcRule_Union& GcRule::union_() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.GcRule.union)
  return has_union_()
      ? *rule_.union__
      : ::google::bigtable::admin::table::v1::GcRule_Union::default_instance();
}
inline ::google::bigtable::admin::table::v1::GcRule_Union* GcRule::mutable_union_() {
  if (!has_union_()) {
    clear_rule();
    set_has_union_();
    rule_.union__ = new ::google::bigtable::admin::table::v1::GcRule_Union;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.table.v1.GcRule.union)
  return rule_.union__;
}
inline ::google::bigtable::admin::table::v1::GcRule_Union* GcRule::release_union_() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.table.v1.GcRule.union)
  if (has_union_()) {
    clear_has_rule();
    ::google::bigtable::admin::table::v1::GcRule_Union* temp = rule_.union__;
    rule_.union__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GcRule::set_allocated_union_(::google::bigtable::admin::table::v1::GcRule_Union* union_) {
  clear_rule();
  if (union_) {
    set_has_union_();
    rule_.union__ = union_;
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.table.v1.GcRule.union)
}

inline bool GcRule::has_rule() const {
  return rule_case() != RULE_NOT_SET;
}
inline void GcRule::clear_has_rule() {
  _oneof_case_[0] = RULE_NOT_SET;
}
inline GcRule::RuleCase GcRule::rule_case() const {
  return GcRule::RuleCase(_oneof_case_[0]);
}
inline const GcRule* GcRule::internal_default_instance() {
  return &GcRule_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace table
}  // namespace admin
}  // namespace bigtable
}  // namespace google

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::bigtable::admin::table::v1::Table_TimestampGranularity> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::bigtable::admin::table::v1::Table_TimestampGranularity>() {
  return ::google::bigtable::admin::table::v1::Table_TimestampGranularity_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto__INCLUDED
