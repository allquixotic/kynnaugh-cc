// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/servicecontrol/v1/log_entry.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/api/servicecontrol/v1/log_entry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace api {
namespace servicecontrol {
namespace v1 {
class LogEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LogEntry> {};
LogEntryDefaultTypeInternal _LogEntry_default_instance_;

namespace {

::google::protobuf::Metadata file_level_metadata[2];
struct LogEntryOneofInstance {
  const ::google::protobuf::Any* proto_payload_;
  ::google::protobuf::internal::ArenaStringPtr text_payload_;
  const ::google::protobuf::Struct* struct_payload_;
} LogEntry_default_oneof_instance_;

}  // namespace


const ::google::protobuf::uint32* protobuf_Offsets_google_2fapi_2fservicecontrol_2fv1_2flog_5fentry_2eproto() GOOGLE_ATTRIBUTE_COLD;
const ::google::protobuf::uint32* protobuf_Offsets_google_2fapi_2fservicecontrol_2fv1_2flog_5fentry_2eproto() {
  static const ::google::protobuf::uint32 offsets[] = {
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, _internal_metadata_),
    ~0u,  // no _extensions_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, _oneof_case_[0]),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, severity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, insert_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, labels_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&LogEntry_default_oneof_instance_), proto_payload_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&LogEntry_default_oneof_instance_), text_payload_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&LogEntry_default_oneof_instance_), struct_payload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, payload_),
  };
  return offsets;
}

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(LogEntry)},
};

static const ::google::protobuf::internal::DefaultInstanceData file_default_instances[] = {
  {reinterpret_cast<const ::google::protobuf::Message*>(&_LogEntry_default_instance_), &LogEntry_default_oneof_instance_},
};

namespace {

void protobuf_AssignDescriptors() {
  protobuf_AddDesc_google_2fapi_2fservicecontrol_2fv1_2flog_5fentry_2eproto();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/api/servicecontrol/v1/log_entry.proto", schemas, file_default_instances, protobuf_Offsets_google_2fapi_2fservicecontrol_2fv1_2flog_5fentry_2eproto(), factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
  const ::google::protobuf::Descriptor* LogEntry_LabelsEntry_descriptor = file_level_metadata[0].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        LogEntry_LabelsEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                LogEntry_LabelsEntry_descriptor));
}

}  // namespace

void protobuf_ShutdownFile_google_2fapi_2fservicecontrol_2fv1_2flog_5fentry_2eproto() {
  _LogEntry_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void protobuf_InitDefaults_google_2fapi_2fservicecontrol_2fv1_2flog_5fentry_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::api::protobuf_InitDefaults_google_2fapi_2fannotations_2eproto();
  ::google::logging::type::protobuf_InitDefaults_google_2flogging_2ftype_2flog_5fseverity_2eproto();
  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2fany_2eproto();
  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2fstruct_2eproto();
  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2ftimestamp_2eproto();
  ::google::protobuf::internal::InitProtobufDefaults();
  _LogEntry_default_instance_.DefaultConstruct();
  _LogEntry_default_instance_.get_mutable()->timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  LogEntry_default_oneof_instance_.proto_payload_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
  LogEntry_default_oneof_instance_.text_payload_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  LogEntry_default_oneof_instance_.struct_payload_ = const_cast< ::google::protobuf::Struct*>(
      ::google::protobuf::Struct::internal_default_instance());
}

void protobuf_InitDefaults_google_2fapi_2fservicecontrol_2fv1_2flog_5fentry_2eproto() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_InitDefaults_google_2fapi_2fservicecontrol_2fv1_2flog_5fentry_2eproto_impl);
}
void protobuf_AddDesc_google_2fapi_2fservicecontrol_2fv1_2flog_5fentry_2eproto_impl() {
  protobuf_InitDefaults_google_2fapi_2fservicecontrol_2fv1_2flog_5fentry_2eproto();
  static const char descriptor[] = {
      "\n,google/api/servicecontrol/v1/log_entry"
      ".proto\022\034google.api.servicecontrol.v1\032\034go"
      "ogle/api/annotations.proto\032&google/loggi"
      "ng/type/log_severity.proto\032\031google/proto"
      "buf/any.proto\032\034google/protobuf/struct.pr"
      "oto\032\037google/protobuf/timestamp.proto\"\206\003\n"
      "\010LogEntry\022\014\n\004name\030\n \001(\t\022-\n\ttimestamp\030\013 \001"
      "(\0132\032.google.protobuf.Timestamp\0222\n\010severi"
      "ty\030\014 \001(\0162 .google.logging.type.LogSeveri"
      "ty\022\021\n\tinsert_id\030\004 \001(\t\022B\n\006labels\030\r \003(\01322."
      "google.api.servicecontrol.v1.LogEntry.La"
      "belsEntry\022-\n\rproto_payload\030\002 \001(\0132\024.googl"
      "e.protobuf.AnyH\000\022\026\n\014text_payload\030\003 \001(\tH\000"
      "\0221\n\016struct_payload\030\006 \001(\0132\027.google.protob"
      "uf.StructH\000\032-\n\013LabelsEntry\022\013\n\003key\030\001 \001(\t\022"
      "\r\n\005value\030\002 \001(\t:\0028\001B\t\n\007payloadB3\n com.goo"
      "gle.api.servicecontrol.v1B\rLogEntryProto"
      "P\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 690);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/api/servicecontrol/v1/log_entry.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_AddDesc_google_2fapi_2fannotations_2eproto();
  ::google::logging::type::protobuf_AddDesc_google_2flogging_2ftype_2flog_5fseverity_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fany_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fstruct_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2ftimestamp_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_google_2fapi_2fservicecontrol_2fv1_2flog_5fentry_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_google_2fapi_2fservicecontrol_2fv1_2flog_5fentry_2eproto_once_);
void protobuf_AddDesc_google_2fapi_2fservicecontrol_2fv1_2flog_5fentry_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_google_2fapi_2fservicecontrol_2fv1_2flog_5fentry_2eproto_once_,
                 &protobuf_AddDesc_google_2fapi_2fservicecontrol_2fv1_2flog_5fentry_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_google_2fapi_2fservicecontrol_2fv1_2flog_5fentry_2eproto {
  StaticDescriptorInitializer_google_2fapi_2fservicecontrol_2fv1_2flog_5fentry_2eproto() {
    protobuf_AddDesc_google_2fapi_2fservicecontrol_2fv1_2flog_5fentry_2eproto();
  }
} static_descriptor_initializer_google_2fapi_2fservicecontrol_2fv1_2flog_5fentry_2eproto_;

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogEntry::kNameFieldNumber;
const int LogEntry::kTimestampFieldNumber;
const int LogEntry::kSeverityFieldNumber;
const int LogEntry::kInsertIdFieldNumber;
const int LogEntry::kLabelsFieldNumber;
const int LogEntry::kProtoPayloadFieldNumber;
const int LogEntry::kTextPayloadFieldNumber;
const int LogEntry::kStructPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogEntry::LogEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_google_2fapi_2fservicecontrol_2fv1_2flog_5fentry_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicecontrol.v1.LogEntry)
}
LogEntry::LogEntry(const LogEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  const ::google::protobuf::Descriptor*& LogEntry_LabelsEntry_descriptor = file_level_metadata[0].descriptor;
  labels_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  labels_.SetEntryDescriptor(
      &LogEntry_LabelsEntry_descriptor);
  labels_.MergeFrom(from.labels_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  insert_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.insert_id().size() > 0) {
    insert_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.insert_id_);
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::google::protobuf::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  severity_ = from.severity_;
  clear_has_payload();
  switch (from.payload_case()) {
    case kProtoPayload: {
      mutable_proto_payload()->::google::protobuf::Any::MergeFrom(from.proto_payload());
      break;
    }
    case kTextPayload: {
      set_text_payload(from.text_payload());
      break;
    }
    case kStructPayload: {
      mutable_struct_payload()->::google::protobuf::Struct::MergeFrom(from.struct_payload());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.api.servicecontrol.v1.LogEntry)
}

void LogEntry::SharedCtor() {
  const ::google::protobuf::Descriptor*& LogEntry_LabelsEntry_descriptor = file_level_metadata[0].descriptor;
  labels_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  labels_.SetEntryDescriptor(
      &LogEntry_LabelsEntry_descriptor);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  insert_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&severity_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(severity_));
  clear_has_payload();
  _cached_size_ = 0;
}

LogEntry::~LogEntry() {
  // @@protoc_insertion_point(destructor:google.api.servicecontrol.v1.LogEntry)
  SharedDtor();
}

void LogEntry::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  insert_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete timestamp_;
  }
  if (has_payload()) {
    clear_payload();
  }
}

void LogEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[1].descriptor;
}

const LogEntry& LogEntry::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fservicecontrol_2fv1_2flog_5fentry_2eproto();
  return *internal_default_instance();
}

LogEntry* LogEntry::New(::google::protobuf::Arena* arena) const {
  LogEntry* n = new LogEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogEntry::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:google.api.servicecontrol.v1.LogEntry)
  switch (payload_case()) {
    case kProtoPayload: {
      delete payload_.proto_payload_;
      break;
    }
    case kTextPayload: {
      payload_.text_payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kStructPayload: {
      delete payload_.struct_payload_;
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void LogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicecontrol.v1.LogEntry)
  labels_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  insert_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  severity_ = 0;
  clear_payload();
}

bool LogEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.servicecontrol.v1.LogEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Any proto_payload = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proto_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string text_payload = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text_payload()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text_payload().data(), this->text_payload().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicecontrol.v1.LogEntry.text_payload"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string insert_id = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_insert_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->insert_id().data(), this->insert_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicecontrol.v1.LogEntry.insert_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Struct struct_payload = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_struct_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicecontrol.v1.LogEntry.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp timestamp = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.logging.type.LogSeverity severity = 12;
      case 12: {
        if (tag == 96u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_severity(static_cast< ::google::logging::type::LogSeverity >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> labels = 13;
      case 13: {
        if (tag == 106u) {
          DO_(input->IncrementRecursionDepth());
          LogEntry_LabelsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicecontrol.v1.LogEntry.LabelsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.servicecontrol.v1.LogEntry.LabelsEntry.value"));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.servicecontrol.v1.LogEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.servicecontrol.v1.LogEntry)
  return false;
#undef DO_
}

void LogEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.servicecontrol.v1.LogEntry)
  // .google.protobuf.Any proto_payload = 2;
  if (has_proto_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *payload_.proto_payload_, output);
  }

  // string text_payload = 3;
  if (has_text_payload()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text_payload().data(), this->text_payload().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicecontrol.v1.LogEntry.text_payload");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->text_payload(), output);
  }

  // string insert_id = 4;
  if (this->insert_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->insert_id().data(), this->insert_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicecontrol.v1.LogEntry.insert_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->insert_id(), output);
  }

  // .google.protobuf.Struct struct_payload = 6;
  if (has_struct_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *payload_.struct_payload_, output);
  }

  // string name = 10;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicecontrol.v1.LogEntry.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->name(), output);
  }

  // .google.protobuf.Timestamp timestamp = 11;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->timestamp_, output);
  }

  // .google.logging.type.LogSeverity severity = 12;
  if (this->severity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->severity(), output);
  }

  // map<string, string> labels = 13;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.api.servicecontrol.v1.LogEntry.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.api.servicecontrol.v1.LogEntry.LabelsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<LogEntry_LabelsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            13, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<LogEntry_LabelsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            13, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:google.api.servicecontrol.v1.LogEntry)
}

::google::protobuf::uint8* LogEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicecontrol.v1.LogEntry)
  // .google.protobuf.Any proto_payload = 2;
  if (has_proto_payload()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *payload_.proto_payload_, false, target);
  }

  // string text_payload = 3;
  if (has_text_payload()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text_payload().data(), this->text_payload().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicecontrol.v1.LogEntry.text_payload");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text_payload(), target);
  }

  // string insert_id = 4;
  if (this->insert_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->insert_id().data(), this->insert_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicecontrol.v1.LogEntry.insert_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->insert_id(), target);
  }

  // .google.protobuf.Struct struct_payload = 6;
  if (has_struct_payload()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *payload_.struct_payload_, false, target);
  }

  // string name = 10;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.servicecontrol.v1.LogEntry.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }

  // .google.protobuf.Timestamp timestamp = 11;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->timestamp_, false, target);
  }

  // .google.logging.type.LogSeverity severity = 12;
  if (this->severity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->severity(), target);
  }

  // map<string, string> labels = 13;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.api.servicecontrol.v1.LogEntry.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.api.servicecontrol.v1.LogEntry.LabelsEntry.value");
      }
    };

    if (deterministic &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<LogEntry_LabelsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       13, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<LogEntry_LabelsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       13, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicecontrol.v1.LogEntry)
  return target;
}

size_t LogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicecontrol.v1.LogEntry)
  size_t total_size = 0;

  // map<string, string> labels = 13;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  {
    ::google::protobuf::scoped_ptr<LogEntry_LabelsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->labels().begin();
        it != this->labels().end(); ++it) {
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string name = 10;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string insert_id = 4;
  if (this->insert_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->insert_id());
  }

  // .google.protobuf.Timestamp timestamp = 11;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timestamp_);
  }

  // .google.logging.type.LogSeverity severity = 12;
  if (this->severity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->severity());
  }

  switch (payload_case()) {
    // .google.protobuf.Any proto_payload = 2;
    case kProtoPayload: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.proto_payload_);
      break;
    }
    // string text_payload = 3;
    case kTextPayload: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text_payload());
      break;
    }
    // .google.protobuf.Struct struct_payload = 6;
    case kStructPayload: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.struct_payload_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicecontrol.v1.LogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const LogEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicecontrol.v1.LogEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicecontrol.v1.LogEntry)
    MergeFrom(*source);
  }
}

void LogEntry::MergeFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicecontrol.v1.LogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.insert_id().size() > 0) {

    insert_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.insert_id_);
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.severity() != 0) {
    set_severity(from.severity());
  }
  switch (from.payload_case()) {
    case kProtoPayload: {
      mutable_proto_payload()->::google::protobuf::Any::MergeFrom(from.proto_payload());
      break;
    }
    case kTextPayload: {
      set_text_payload(from.text_payload());
      break;
    }
    case kStructPayload: {
      mutable_struct_payload()->::google::protobuf::Struct::MergeFrom(from.struct_payload());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void LogEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicecontrol.v1.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogEntry::CopyFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicecontrol.v1.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntry::IsInitialized() const {
  return true;
}

void LogEntry::Swap(LogEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogEntry::InternalSwap(LogEntry* other) {
  labels_.Swap(&other->labels_);
  name_.Swap(&other->name_);
  insert_id_.Swap(&other->insert_id_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(severity_, other->severity_);
  std::swap(payload_, other->payload_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogEntry

// string name = 10;
void LogEntry::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LogEntry::name() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.LogEntry.name)
  return name_.GetNoArena();
}
void LogEntry::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.LogEntry.name)
}
void LogEntry::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicecontrol.v1.LogEntry.name)
}
void LogEntry::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicecontrol.v1.LogEntry.name)
}
::std::string* LogEntry::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.LogEntry.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogEntry::release_name() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.LogEntry.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogEntry::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.LogEntry.name)
}

// .google.protobuf.Timestamp timestamp = 11;
bool LogEntry::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
void LogEntry::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
const ::google::protobuf::Timestamp& LogEntry::timestamp() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.LogEntry.timestamp)
  return timestamp_ != NULL ? *timestamp_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* LogEntry::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.LogEntry.timestamp)
  return timestamp_;
}
::google::protobuf::Timestamp* LogEntry::release_timestamp() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.LogEntry.timestamp)
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void LogEntry::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  delete timestamp_;
  if (timestamp != NULL && timestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_timestamp = new ::google::protobuf::Timestamp;
    new_timestamp->CopyFrom(*timestamp);
    timestamp = new_timestamp;
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.LogEntry.timestamp)
}

// .google.logging.type.LogSeverity severity = 12;
void LogEntry::clear_severity() {
  severity_ = 0;
}
::google::logging::type::LogSeverity LogEntry::severity() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.LogEntry.severity)
  return static_cast< ::google::logging::type::LogSeverity >(severity_);
}
void LogEntry::set_severity(::google::logging::type::LogSeverity value) {
  
  severity_ = value;
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.LogEntry.severity)
}

// string insert_id = 4;
void LogEntry::clear_insert_id() {
  insert_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LogEntry::insert_id() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.LogEntry.insert_id)
  return insert_id_.GetNoArena();
}
void LogEntry::set_insert_id(const ::std::string& value) {
  
  insert_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.LogEntry.insert_id)
}
void LogEntry::set_insert_id(const char* value) {
  
  insert_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicecontrol.v1.LogEntry.insert_id)
}
void LogEntry::set_insert_id(const char* value, size_t size) {
  
  insert_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicecontrol.v1.LogEntry.insert_id)
}
::std::string* LogEntry::mutable_insert_id() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.LogEntry.insert_id)
  return insert_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogEntry::release_insert_id() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.LogEntry.insert_id)
  
  return insert_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogEntry::set_allocated_insert_id(::std::string* insert_id) {
  if (insert_id != NULL) {
    
  } else {
    
  }
  insert_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), insert_id);
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.LogEntry.insert_id)
}

// map<string, string> labels = 13;
int LogEntry::labels_size() const {
  return labels_.size();
}
void LogEntry::clear_labels() {
  labels_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
LogEntry::labels() const {
  // @@protoc_insertion_point(field_map:google.api.servicecontrol.v1.LogEntry.labels)
  return labels_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
LogEntry::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.api.servicecontrol.v1.LogEntry.labels)
  return labels_.MutableMap();
}

// .google.protobuf.Any proto_payload = 2;
bool LogEntry::has_proto_payload() const {
  return payload_case() == kProtoPayload;
}
void LogEntry::set_has_proto_payload() {
  _oneof_case_[0] = kProtoPayload;
}
void LogEntry::clear_proto_payload() {
  if (has_proto_payload()) {
    delete payload_.proto_payload_;
    clear_has_payload();
  }
}
 const ::google::protobuf::Any& LogEntry::proto_payload() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.LogEntry.proto_payload)
  return has_proto_payload()
      ? *payload_.proto_payload_
      : ::google::protobuf::Any::default_instance();
}
::google::protobuf::Any* LogEntry::mutable_proto_payload() {
  if (!has_proto_payload()) {
    clear_payload();
    set_has_proto_payload();
    payload_.proto_payload_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.LogEntry.proto_payload)
  return payload_.proto_payload_;
}
::google::protobuf::Any* LogEntry::release_proto_payload() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.LogEntry.proto_payload)
  if (has_proto_payload()) {
    clear_has_payload();
    ::google::protobuf::Any* temp = payload_.proto_payload_;
    payload_.proto_payload_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LogEntry::set_allocated_proto_payload(::google::protobuf::Any* proto_payload) {
  clear_payload();
  if (proto_payload) {
    set_has_proto_payload();
    payload_.proto_payload_ = proto_payload;
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.LogEntry.proto_payload)
}

// string text_payload = 3;
bool LogEntry::has_text_payload() const {
  return payload_case() == kTextPayload;
}
void LogEntry::set_has_text_payload() {
  _oneof_case_[0] = kTextPayload;
}
void LogEntry::clear_text_payload() {
  if (has_text_payload()) {
    payload_.text_payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_payload();
  }
}
const ::std::string& LogEntry::text_payload() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.LogEntry.text_payload)
  if (has_text_payload()) {
    return payload_.text_payload_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void LogEntry::set_text_payload(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.LogEntry.text_payload)
  if (!has_text_payload()) {
    clear_payload();
    set_has_text_payload();
    payload_.text_payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.text_payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.LogEntry.text_payload)
}
void LogEntry::set_text_payload(const char* value) {
  if (!has_text_payload()) {
    clear_payload();
    set_has_text_payload();
    payload_.text_payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.text_payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicecontrol.v1.LogEntry.text_payload)
}
void LogEntry::set_text_payload(const char* value, size_t size) {
  if (!has_text_payload()) {
    clear_payload();
    set_has_text_payload();
    payload_.text_payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.text_payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicecontrol.v1.LogEntry.text_payload)
}
::std::string* LogEntry::mutable_text_payload() {
  if (!has_text_payload()) {
    clear_payload();
    set_has_text_payload();
    payload_.text_payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.LogEntry.text_payload)
  return payload_.text_payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogEntry::release_text_payload() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.LogEntry.text_payload)
  if (has_text_payload()) {
    clear_has_payload();
    return payload_.text_payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void LogEntry::set_allocated_text_payload(::std::string* text_payload) {
  if (!has_text_payload()) {
    payload_.text_payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_payload();
  if (text_payload != NULL) {
    set_has_text_payload();
    payload_.text_payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        text_payload);
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.LogEntry.text_payload)
}

// .google.protobuf.Struct struct_payload = 6;
bool LogEntry::has_struct_payload() const {
  return payload_case() == kStructPayload;
}
void LogEntry::set_has_struct_payload() {
  _oneof_case_[0] = kStructPayload;
}
void LogEntry::clear_struct_payload() {
  if (has_struct_payload()) {
    delete payload_.struct_payload_;
    clear_has_payload();
  }
}
 const ::google::protobuf::Struct& LogEntry::struct_payload() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.LogEntry.struct_payload)
  return has_struct_payload()
      ? *payload_.struct_payload_
      : ::google::protobuf::Struct::default_instance();
}
::google::protobuf::Struct* LogEntry::mutable_struct_payload() {
  if (!has_struct_payload()) {
    clear_payload();
    set_has_struct_payload();
    payload_.struct_payload_ = new ::google::protobuf::Struct;
  }
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.LogEntry.struct_payload)
  return payload_.struct_payload_;
}
::google::protobuf::Struct* LogEntry::release_struct_payload() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.LogEntry.struct_payload)
  if (has_struct_payload()) {
    clear_has_payload();
    ::google::protobuf::Struct* temp = payload_.struct_payload_;
    payload_.struct_payload_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LogEntry::set_allocated_struct_payload(::google::protobuf::Struct* struct_payload) {
  clear_payload();
  if (struct_payload) {
    if (static_cast< ::google::protobuf::Struct*>(struct_payload)->GetArena() != NULL) {
      ::google::protobuf::Struct* new_struct_payload = new ::google::protobuf::Struct;
      new_struct_payload->CopyFrom(*struct_payload);
      struct_payload = new_struct_payload;
    }
    set_has_struct_payload();
    payload_.struct_payload_ = struct_payload;
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.LogEntry.struct_payload)
}

bool LogEntry::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
void LogEntry::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
LogEntry::PayloadCase LogEntry::payload_case() const {
  return LogEntry::PayloadCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace servicecontrol
}  // namespace api
}  // namespace google

// @@protoc_insertion_point(global_scope)
