// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/appengine/v1/instance.proto

#ifndef PROTOBUF_google_2fappengine_2fv1_2finstance_2eproto__INCLUDED
#define PROTOBUF_google_2fappengine_2fv1_2finstance_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace appengine {
namespace v1 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_google_2fappengine_2fv1_2finstance_2eproto();
void protobuf_InitDefaults_google_2fappengine_2fv1_2finstance_2eproto();
void protobuf_AssignDesc_google_2fappengine_2fv1_2finstance_2eproto();
void protobuf_ShutdownFile_google_2fappengine_2fv1_2finstance_2eproto();

class Instance;

enum Instance_Availability {
  Instance_Availability_UNSPECIFIED = 0,
  Instance_Availability_RESIDENT = 1,
  Instance_Availability_DYNAMIC = 2,
  Instance_Availability_Instance_Availability_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Instance_Availability_Instance_Availability_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Instance_Availability_IsValid(int value);
const Instance_Availability Instance_Availability_Availability_MIN = Instance_Availability_UNSPECIFIED;
const Instance_Availability Instance_Availability_Availability_MAX = Instance_Availability_DYNAMIC;
const int Instance_Availability_Availability_ARRAYSIZE = Instance_Availability_Availability_MAX + 1;

const ::google::protobuf::EnumDescriptor* Instance_Availability_descriptor();
inline const ::std::string& Instance_Availability_Name(Instance_Availability value) {
  return ::google::protobuf::internal::NameOfEnum(
    Instance_Availability_descriptor(), value);
}
inline bool Instance_Availability_Parse(
    const ::std::string& name, Instance_Availability* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Instance_Availability>(
    Instance_Availability_descriptor(), name, value);
}
// ===================================================================

class Instance : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.appengine.v1.Instance) */ {
 public:
  Instance();
  virtual ~Instance();

  Instance(const Instance& from);

  inline Instance& operator=(const Instance& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Instance& default_instance();

  static const Instance* internal_default_instance();

  void Swap(Instance* other);

  // implements Message ----------------------------------------------

  inline Instance* New() const { return New(NULL); }

  Instance* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Instance& from);
  void MergeFrom(const Instance& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Instance* other);
  void UnsafeMergeFrom(const Instance& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Instance_Availability Availability;
  static const Availability UNSPECIFIED =
    Instance_Availability_UNSPECIFIED;
  static const Availability RESIDENT =
    Instance_Availability_RESIDENT;
  static const Availability DYNAMIC =
    Instance_Availability_DYNAMIC;
  static inline bool Availability_IsValid(int value) {
    return Instance_Availability_IsValid(value);
  }
  static const Availability Availability_MIN =
    Instance_Availability_Availability_MIN;
  static const Availability Availability_MAX =
    Instance_Availability_Availability_MAX;
  static const int Availability_ARRAYSIZE =
    Instance_Availability_Availability_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Availability_descriptor() {
    return Instance_Availability_descriptor();
  }
  static inline const ::std::string& Availability_Name(Availability value) {
    return Instance_Availability_Name(value);
  }
  static inline bool Availability_Parse(const ::std::string& name,
      Availability* value) {
    return Instance_Availability_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string app_engine_release = 3;
  void clear_app_engine_release();
  static const int kAppEngineReleaseFieldNumber = 3;
  const ::std::string& app_engine_release() const;
  void set_app_engine_release(const ::std::string& value);
  void set_app_engine_release(const char* value);
  void set_app_engine_release(const char* value, size_t size);
  ::std::string* mutable_app_engine_release();
  ::std::string* release_app_engine_release();
  void set_allocated_app_engine_release(::std::string* app_engine_release);

  // optional .google.appengine.v1.Instance.Availability availability = 4;
  void clear_availability();
  static const int kAvailabilityFieldNumber = 4;
  ::google::appengine::v1::Instance_Availability availability() const;
  void set_availability(::google::appengine::v1::Instance_Availability value);

  // optional string vm_name = 5;
  void clear_vm_name();
  static const int kVmNameFieldNumber = 5;
  const ::std::string& vm_name() const;
  void set_vm_name(const ::std::string& value);
  void set_vm_name(const char* value);
  void set_vm_name(const char* value, size_t size);
  ::std::string* mutable_vm_name();
  ::std::string* release_vm_name();
  void set_allocated_vm_name(::std::string* vm_name);

  // optional string vm_zone_name = 6;
  void clear_vm_zone_name();
  static const int kVmZoneNameFieldNumber = 6;
  const ::std::string& vm_zone_name() const;
  void set_vm_zone_name(const ::std::string& value);
  void set_vm_zone_name(const char* value);
  void set_vm_zone_name(const char* value, size_t size);
  ::std::string* mutable_vm_zone_name();
  ::std::string* release_vm_zone_name();
  void set_allocated_vm_zone_name(::std::string* vm_zone_name);

  // optional string vm_id = 7;
  void clear_vm_id();
  static const int kVmIdFieldNumber = 7;
  const ::std::string& vm_id() const;
  void set_vm_id(const ::std::string& value);
  void set_vm_id(const char* value);
  void set_vm_id(const char* value, size_t size);
  ::std::string* mutable_vm_id();
  ::std::string* release_vm_id();
  void set_allocated_vm_id(::std::string* vm_id);

  // optional .google.protobuf.Timestamp start_time = 8;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 8;
  const ::google::protobuf::Timestamp& start_time() const;
  ::google::protobuf::Timestamp* mutable_start_time();
  ::google::protobuf::Timestamp* release_start_time();
  void set_allocated_start_time(::google::protobuf::Timestamp* start_time);

  // optional int32 requests = 9;
  void clear_requests();
  static const int kRequestsFieldNumber = 9;
  ::google::protobuf::int32 requests() const;
  void set_requests(::google::protobuf::int32 value);

  // optional int32 errors = 10;
  void clear_errors();
  static const int kErrorsFieldNumber = 10;
  ::google::protobuf::int32 errors() const;
  void set_errors(::google::protobuf::int32 value);

  // optional float qps = 11;
  void clear_qps();
  static const int kQpsFieldNumber = 11;
  float qps() const;
  void set_qps(float value);

  // optional int32 average_latency = 12;
  void clear_average_latency();
  static const int kAverageLatencyFieldNumber = 12;
  ::google::protobuf::int32 average_latency() const;
  void set_average_latency(::google::protobuf::int32 value);

  // optional int64 memory_usage = 13;
  void clear_memory_usage();
  static const int kMemoryUsageFieldNumber = 13;
  ::google::protobuf::int64 memory_usage() const;
  void set_memory_usage(::google::protobuf::int64 value);

  // optional string vm_status = 14;
  void clear_vm_status();
  static const int kVmStatusFieldNumber = 14;
  const ::std::string& vm_status() const;
  void set_vm_status(const ::std::string& value);
  void set_vm_status(const char* value);
  void set_vm_status(const char* value, size_t size);
  ::std::string* mutable_vm_status();
  ::std::string* release_vm_status();
  void set_allocated_vm_status(::std::string* vm_status);

  // optional bool vm_debug_enabled = 15;
  void clear_vm_debug_enabled();
  static const int kVmDebugEnabledFieldNumber = 15;
  bool vm_debug_enabled() const;
  void set_vm_debug_enabled(bool value);

  // @@protoc_insertion_point(class_scope:google.appengine.v1.Instance)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr app_engine_release_;
  ::google::protobuf::internal::ArenaStringPtr vm_name_;
  ::google::protobuf::internal::ArenaStringPtr vm_zone_name_;
  ::google::protobuf::internal::ArenaStringPtr vm_id_;
  ::google::protobuf::internal::ArenaStringPtr vm_status_;
  ::google::protobuf::Timestamp* start_time_;
  int availability_;
  ::google::protobuf::int32 requests_;
  ::google::protobuf::int32 errors_;
  float qps_;
  ::google::protobuf::int64 memory_usage_;
  ::google::protobuf::int32 average_latency_;
  bool vm_debug_enabled_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fappengine_2fv1_2finstance_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fappengine_2fv1_2finstance_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fappengine_2fv1_2finstance_2eproto();
  friend void protobuf_ShutdownFile_google_2fappengine_2fv1_2finstance_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Instance> Instance_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Instance

// optional string name = 1;
inline void Instance::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Instance::name() const {
  // @@protoc_insertion_point(field_get:google.appengine.v1.Instance.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Instance::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.appengine.v1.Instance.name)
}
inline void Instance::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.appengine.v1.Instance.name)
}
inline void Instance::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.appengine.v1.Instance.name)
}
inline ::std::string* Instance::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.appengine.v1.Instance.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Instance::release_name() {
  // @@protoc_insertion_point(field_release:google.appengine.v1.Instance.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Instance::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.appengine.v1.Instance.name)
}

// optional string id = 2;
inline void Instance::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Instance::id() const {
  // @@protoc_insertion_point(field_get:google.appengine.v1.Instance.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Instance::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.appengine.v1.Instance.id)
}
inline void Instance::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.appengine.v1.Instance.id)
}
inline void Instance::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.appengine.v1.Instance.id)
}
inline ::std::string* Instance::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:google.appengine.v1.Instance.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Instance::release_id() {
  // @@protoc_insertion_point(field_release:google.appengine.v1.Instance.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Instance::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:google.appengine.v1.Instance.id)
}

// optional string app_engine_release = 3;
inline void Instance::clear_app_engine_release() {
  app_engine_release_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Instance::app_engine_release() const {
  // @@protoc_insertion_point(field_get:google.appengine.v1.Instance.app_engine_release)
  return app_engine_release_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Instance::set_app_engine_release(const ::std::string& value) {
  
  app_engine_release_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.appengine.v1.Instance.app_engine_release)
}
inline void Instance::set_app_engine_release(const char* value) {
  
  app_engine_release_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.appengine.v1.Instance.app_engine_release)
}
inline void Instance::set_app_engine_release(const char* value, size_t size) {
  
  app_engine_release_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.appengine.v1.Instance.app_engine_release)
}
inline ::std::string* Instance::mutable_app_engine_release() {
  
  // @@protoc_insertion_point(field_mutable:google.appengine.v1.Instance.app_engine_release)
  return app_engine_release_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Instance::release_app_engine_release() {
  // @@protoc_insertion_point(field_release:google.appengine.v1.Instance.app_engine_release)
  
  return app_engine_release_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Instance::set_allocated_app_engine_release(::std::string* app_engine_release) {
  if (app_engine_release != NULL) {
    
  } else {
    
  }
  app_engine_release_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_engine_release);
  // @@protoc_insertion_point(field_set_allocated:google.appengine.v1.Instance.app_engine_release)
}

// optional .google.appengine.v1.Instance.Availability availability = 4;
inline void Instance::clear_availability() {
  availability_ = 0;
}
inline ::google::appengine::v1::Instance_Availability Instance::availability() const {
  // @@protoc_insertion_point(field_get:google.appengine.v1.Instance.availability)
  return static_cast< ::google::appengine::v1::Instance_Availability >(availability_);
}
inline void Instance::set_availability(::google::appengine::v1::Instance_Availability value) {
  
  availability_ = value;
  // @@protoc_insertion_point(field_set:google.appengine.v1.Instance.availability)
}

// optional string vm_name = 5;
inline void Instance::clear_vm_name() {
  vm_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Instance::vm_name() const {
  // @@protoc_insertion_point(field_get:google.appengine.v1.Instance.vm_name)
  return vm_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Instance::set_vm_name(const ::std::string& value) {
  
  vm_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.appengine.v1.Instance.vm_name)
}
inline void Instance::set_vm_name(const char* value) {
  
  vm_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.appengine.v1.Instance.vm_name)
}
inline void Instance::set_vm_name(const char* value, size_t size) {
  
  vm_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.appengine.v1.Instance.vm_name)
}
inline ::std::string* Instance::mutable_vm_name() {
  
  // @@protoc_insertion_point(field_mutable:google.appengine.v1.Instance.vm_name)
  return vm_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Instance::release_vm_name() {
  // @@protoc_insertion_point(field_release:google.appengine.v1.Instance.vm_name)
  
  return vm_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Instance::set_allocated_vm_name(::std::string* vm_name) {
  if (vm_name != NULL) {
    
  } else {
    
  }
  vm_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vm_name);
  // @@protoc_insertion_point(field_set_allocated:google.appengine.v1.Instance.vm_name)
}

// optional string vm_zone_name = 6;
inline void Instance::clear_vm_zone_name() {
  vm_zone_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Instance::vm_zone_name() const {
  // @@protoc_insertion_point(field_get:google.appengine.v1.Instance.vm_zone_name)
  return vm_zone_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Instance::set_vm_zone_name(const ::std::string& value) {
  
  vm_zone_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.appengine.v1.Instance.vm_zone_name)
}
inline void Instance::set_vm_zone_name(const char* value) {
  
  vm_zone_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.appengine.v1.Instance.vm_zone_name)
}
inline void Instance::set_vm_zone_name(const char* value, size_t size) {
  
  vm_zone_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.appengine.v1.Instance.vm_zone_name)
}
inline ::std::string* Instance::mutable_vm_zone_name() {
  
  // @@protoc_insertion_point(field_mutable:google.appengine.v1.Instance.vm_zone_name)
  return vm_zone_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Instance::release_vm_zone_name() {
  // @@protoc_insertion_point(field_release:google.appengine.v1.Instance.vm_zone_name)
  
  return vm_zone_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Instance::set_allocated_vm_zone_name(::std::string* vm_zone_name) {
  if (vm_zone_name != NULL) {
    
  } else {
    
  }
  vm_zone_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vm_zone_name);
  // @@protoc_insertion_point(field_set_allocated:google.appengine.v1.Instance.vm_zone_name)
}

// optional string vm_id = 7;
inline void Instance::clear_vm_id() {
  vm_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Instance::vm_id() const {
  // @@protoc_insertion_point(field_get:google.appengine.v1.Instance.vm_id)
  return vm_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Instance::set_vm_id(const ::std::string& value) {
  
  vm_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.appengine.v1.Instance.vm_id)
}
inline void Instance::set_vm_id(const char* value) {
  
  vm_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.appengine.v1.Instance.vm_id)
}
inline void Instance::set_vm_id(const char* value, size_t size) {
  
  vm_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.appengine.v1.Instance.vm_id)
}
inline ::std::string* Instance::mutable_vm_id() {
  
  // @@protoc_insertion_point(field_mutable:google.appengine.v1.Instance.vm_id)
  return vm_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Instance::release_vm_id() {
  // @@protoc_insertion_point(field_release:google.appengine.v1.Instance.vm_id)
  
  return vm_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Instance::set_allocated_vm_id(::std::string* vm_id) {
  if (vm_id != NULL) {
    
  } else {
    
  }
  vm_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vm_id);
  // @@protoc_insertion_point(field_set_allocated:google.appengine.v1.Instance.vm_id)
}

// optional .google.protobuf.Timestamp start_time = 8;
inline bool Instance::has_start_time() const {
  return this != internal_default_instance() && start_time_ != NULL;
}
inline void Instance::clear_start_time() {
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) delete start_time_;
  start_time_ = NULL;
}
inline const ::google::protobuf::Timestamp& Instance::start_time() const {
  // @@protoc_insertion_point(field_get:google.appengine.v1.Instance.start_time)
  return start_time_ != NULL ? *start_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
inline ::google::protobuf::Timestamp* Instance::mutable_start_time() {
  
  if (start_time_ == NULL) {
    start_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.appengine.v1.Instance.start_time)
  return start_time_;
}
inline ::google::protobuf::Timestamp* Instance::release_start_time() {
  // @@protoc_insertion_point(field_release:google.appengine.v1.Instance.start_time)
  
  ::google::protobuf::Timestamp* temp = start_time_;
  start_time_ = NULL;
  return temp;
}
inline void Instance::set_allocated_start_time(::google::protobuf::Timestamp* start_time) {
  delete start_time_;
  if (start_time != NULL && start_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_start_time = new ::google::protobuf::Timestamp;
    new_start_time->CopyFrom(*start_time);
    start_time = new_start_time;
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.appengine.v1.Instance.start_time)
}

// optional int32 requests = 9;
inline void Instance::clear_requests() {
  requests_ = 0;
}
inline ::google::protobuf::int32 Instance::requests() const {
  // @@protoc_insertion_point(field_get:google.appengine.v1.Instance.requests)
  return requests_;
}
inline void Instance::set_requests(::google::protobuf::int32 value) {
  
  requests_ = value;
  // @@protoc_insertion_point(field_set:google.appengine.v1.Instance.requests)
}

// optional int32 errors = 10;
inline void Instance::clear_errors() {
  errors_ = 0;
}
inline ::google::protobuf::int32 Instance::errors() const {
  // @@protoc_insertion_point(field_get:google.appengine.v1.Instance.errors)
  return errors_;
}
inline void Instance::set_errors(::google::protobuf::int32 value) {
  
  errors_ = value;
  // @@protoc_insertion_point(field_set:google.appengine.v1.Instance.errors)
}

// optional float qps = 11;
inline void Instance::clear_qps() {
  qps_ = 0;
}
inline float Instance::qps() const {
  // @@protoc_insertion_point(field_get:google.appengine.v1.Instance.qps)
  return qps_;
}
inline void Instance::set_qps(float value) {
  
  qps_ = value;
  // @@protoc_insertion_point(field_set:google.appengine.v1.Instance.qps)
}

// optional int32 average_latency = 12;
inline void Instance::clear_average_latency() {
  average_latency_ = 0;
}
inline ::google::protobuf::int32 Instance::average_latency() const {
  // @@protoc_insertion_point(field_get:google.appengine.v1.Instance.average_latency)
  return average_latency_;
}
inline void Instance::set_average_latency(::google::protobuf::int32 value) {
  
  average_latency_ = value;
  // @@protoc_insertion_point(field_set:google.appengine.v1.Instance.average_latency)
}

// optional int64 memory_usage = 13;
inline void Instance::clear_memory_usage() {
  memory_usage_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Instance::memory_usage() const {
  // @@protoc_insertion_point(field_get:google.appengine.v1.Instance.memory_usage)
  return memory_usage_;
}
inline void Instance::set_memory_usage(::google::protobuf::int64 value) {
  
  memory_usage_ = value;
  // @@protoc_insertion_point(field_set:google.appengine.v1.Instance.memory_usage)
}

// optional string vm_status = 14;
inline void Instance::clear_vm_status() {
  vm_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Instance::vm_status() const {
  // @@protoc_insertion_point(field_get:google.appengine.v1.Instance.vm_status)
  return vm_status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Instance::set_vm_status(const ::std::string& value) {
  
  vm_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.appengine.v1.Instance.vm_status)
}
inline void Instance::set_vm_status(const char* value) {
  
  vm_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.appengine.v1.Instance.vm_status)
}
inline void Instance::set_vm_status(const char* value, size_t size) {
  
  vm_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.appengine.v1.Instance.vm_status)
}
inline ::std::string* Instance::mutable_vm_status() {
  
  // @@protoc_insertion_point(field_mutable:google.appengine.v1.Instance.vm_status)
  return vm_status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Instance::release_vm_status() {
  // @@protoc_insertion_point(field_release:google.appengine.v1.Instance.vm_status)
  
  return vm_status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Instance::set_allocated_vm_status(::std::string* vm_status) {
  if (vm_status != NULL) {
    
  } else {
    
  }
  vm_status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vm_status);
  // @@protoc_insertion_point(field_set_allocated:google.appengine.v1.Instance.vm_status)
}

// optional bool vm_debug_enabled = 15;
inline void Instance::clear_vm_debug_enabled() {
  vm_debug_enabled_ = false;
}
inline bool Instance::vm_debug_enabled() const {
  // @@protoc_insertion_point(field_get:google.appengine.v1.Instance.vm_debug_enabled)
  return vm_debug_enabled_;
}
inline void Instance::set_vm_debug_enabled(bool value) {
  
  vm_debug_enabled_ = value;
  // @@protoc_insertion_point(field_set:google.appengine.v1.Instance.vm_debug_enabled)
}

inline const Instance* Instance::internal_default_instance() {
  return &Instance_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace appengine
}  // namespace google

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::appengine::v1::Instance_Availability> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::appengine::v1::Instance_Availability>() {
  return ::google::appengine::v1::Instance_Availability_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fappengine_2fv1_2finstance_2eproto__INCLUDED
