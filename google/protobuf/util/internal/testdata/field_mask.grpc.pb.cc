// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: google/protobuf/util/internal/testdata/field_mask.proto

#include "google/protobuf/util/internal/testdata/field_mask.pb.h"
#include "google/protobuf/util/internal/testdata/field_mask.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace google {
namespace protobuf {
namespace testing {

static const char* FieldMaskTestService_method_names[] = {
  "/google.protobuf.testing.FieldMaskTestService/Call",
};

std::unique_ptr< FieldMaskTestService::Stub> FieldMaskTestService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< FieldMaskTestService::Stub> stub(new FieldMaskTestService::Stub(channel));
  return stub;
}

FieldMaskTestService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Call_(FieldMaskTestService_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FieldMaskTestService::Stub::Call(::grpc::ClientContext* context, const ::google::protobuf::testing::FieldMaskTestCases& request, ::google::protobuf::testing::FieldMaskTestCases* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Call_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::testing::FieldMaskTestCases>* FieldMaskTestService::Stub::AsyncCallRaw(::grpc::ClientContext* context, const ::google::protobuf::testing::FieldMaskTestCases& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::google::protobuf::testing::FieldMaskTestCases>(channel_.get(), cq, rpcmethod_Call_, context, request);
}

FieldMaskTestService::Service::Service() {
  (void)FieldMaskTestService_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      FieldMaskTestService_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< FieldMaskTestService::Service, ::google::protobuf::testing::FieldMaskTestCases, ::google::protobuf::testing::FieldMaskTestCases>(
          std::mem_fn(&FieldMaskTestService::Service::Call), this)));
}

FieldMaskTestService::Service::~Service() {
}

::grpc::Status FieldMaskTestService::Service::Call(::grpc::ServerContext* context, const ::google::protobuf::testing::FieldMaskTestCases* request, ::google::protobuf::testing::FieldMaskTestCases* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace protobuf
}  // namespace testing

