// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/genomics/v1/datasets.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/genomics/v1/datasets.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace genomics {
namespace v1 {

namespace {

const ::google::protobuf::Descriptor* Dataset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dataset_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListDatasetsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListDatasetsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListDatasetsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListDatasetsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateDatasetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateDatasetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateDatasetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateDatasetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteDatasetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteDatasetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UndeleteDatasetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UndeleteDatasetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDatasetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDatasetRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_google_2fgenomics_2fv1_2fdatasets_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_google_2fgenomics_2fv1_2fdatasets_2eproto() {
  protobuf_AddDesc_google_2fgenomics_2fv1_2fdatasets_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "google/genomics/v1/datasets.proto");
  GOOGLE_CHECK(file != NULL);
  Dataset_descriptor_ = file->message_type(0);
  static const int Dataset_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dataset, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dataset, project_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dataset, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dataset, create_time_),
  };
  Dataset_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Dataset_descriptor_,
      Dataset::internal_default_instance(),
      Dataset_offsets_,
      -1,
      -1,
      -1,
      sizeof(Dataset),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dataset, _internal_metadata_));
  ListDatasetsRequest_descriptor_ = file->message_type(1);
  static const int ListDatasetsRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDatasetsRequest, project_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDatasetsRequest, page_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDatasetsRequest, page_token_),
  };
  ListDatasetsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListDatasetsRequest_descriptor_,
      ListDatasetsRequest::internal_default_instance(),
      ListDatasetsRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListDatasetsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDatasetsRequest, _internal_metadata_));
  ListDatasetsResponse_descriptor_ = file->message_type(2);
  static const int ListDatasetsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDatasetsResponse, datasets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDatasetsResponse, next_page_token_),
  };
  ListDatasetsResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListDatasetsResponse_descriptor_,
      ListDatasetsResponse::internal_default_instance(),
      ListDatasetsResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListDatasetsResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDatasetsResponse, _internal_metadata_));
  CreateDatasetRequest_descriptor_ = file->message_type(3);
  static const int CreateDatasetRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDatasetRequest, dataset_),
  };
  CreateDatasetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateDatasetRequest_descriptor_,
      CreateDatasetRequest::internal_default_instance(),
      CreateDatasetRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateDatasetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDatasetRequest, _internal_metadata_));
  UpdateDatasetRequest_descriptor_ = file->message_type(4);
  static const int UpdateDatasetRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatasetRequest, dataset_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatasetRequest, dataset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatasetRequest, update_mask_),
  };
  UpdateDatasetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UpdateDatasetRequest_descriptor_,
      UpdateDatasetRequest::internal_default_instance(),
      UpdateDatasetRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(UpdateDatasetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatasetRequest, _internal_metadata_));
  DeleteDatasetRequest_descriptor_ = file->message_type(5);
  static const int DeleteDatasetRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteDatasetRequest, dataset_id_),
  };
  DeleteDatasetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeleteDatasetRequest_descriptor_,
      DeleteDatasetRequest::internal_default_instance(),
      DeleteDatasetRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeleteDatasetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteDatasetRequest, _internal_metadata_));
  UndeleteDatasetRequest_descriptor_ = file->message_type(6);
  static const int UndeleteDatasetRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndeleteDatasetRequest, dataset_id_),
  };
  UndeleteDatasetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UndeleteDatasetRequest_descriptor_,
      UndeleteDatasetRequest::internal_default_instance(),
      UndeleteDatasetRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(UndeleteDatasetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndeleteDatasetRequest, _internal_metadata_));
  GetDatasetRequest_descriptor_ = file->message_type(7);
  static const int GetDatasetRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetRequest, dataset_id_),
  };
  GetDatasetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetDatasetRequest_descriptor_,
      GetDatasetRequest::internal_default_instance(),
      GetDatasetRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetDatasetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetRequest, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_google_2fgenomics_2fv1_2fdatasets_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Dataset_descriptor_, Dataset::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListDatasetsRequest_descriptor_, ListDatasetsRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListDatasetsResponse_descriptor_, ListDatasetsResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateDatasetRequest_descriptor_, CreateDatasetRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpdateDatasetRequest_descriptor_, UpdateDatasetRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeleteDatasetRequest_descriptor_, DeleteDatasetRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UndeleteDatasetRequest_descriptor_, UndeleteDatasetRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetDatasetRequest_descriptor_, GetDatasetRequest::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_google_2fgenomics_2fv1_2fdatasets_2eproto() {
  Dataset_default_instance_.Shutdown();
  delete Dataset_reflection_;
  ListDatasetsRequest_default_instance_.Shutdown();
  delete ListDatasetsRequest_reflection_;
  ListDatasetsResponse_default_instance_.Shutdown();
  delete ListDatasetsResponse_reflection_;
  CreateDatasetRequest_default_instance_.Shutdown();
  delete CreateDatasetRequest_reflection_;
  UpdateDatasetRequest_default_instance_.Shutdown();
  delete UpdateDatasetRequest_reflection_;
  DeleteDatasetRequest_default_instance_.Shutdown();
  delete DeleteDatasetRequest_reflection_;
  UndeleteDatasetRequest_default_instance_.Shutdown();
  delete UndeleteDatasetRequest_reflection_;
  GetDatasetRequest_default_instance_.Shutdown();
  delete GetDatasetRequest_reflection_;
}

void protobuf_InitDefaults_google_2fgenomics_2fv1_2fdatasets_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::api::protobuf_InitDefaults_google_2fapi_2fannotations_2eproto();
  ::google::iam::v1::protobuf_InitDefaults_google_2fiam_2fv1_2fiam_5fpolicy_2eproto();
  ::google::iam::v1::protobuf_InitDefaults_google_2fiam_2fv1_2fpolicy_2eproto();
  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2fempty_2eproto();
  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2ffield_5fmask_2eproto();
  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2ftimestamp_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  Dataset_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ListDatasetsRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ListDatasetsResponse_default_instance_.DefaultConstruct();
  CreateDatasetRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  UpdateDatasetRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  DeleteDatasetRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  UndeleteDatasetRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  GetDatasetRequest_default_instance_.DefaultConstruct();
  Dataset_default_instance_.get_mutable()->InitAsDefaultInstance();
  ListDatasetsRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  ListDatasetsResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  CreateDatasetRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  UpdateDatasetRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  DeleteDatasetRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  UndeleteDatasetRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  GetDatasetRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_google_2fgenomics_2fv1_2fdatasets_2eproto_once_);
void protobuf_InitDefaults_google_2fgenomics_2fv1_2fdatasets_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_google_2fgenomics_2fv1_2fdatasets_2eproto_once_,
                 &protobuf_InitDefaults_google_2fgenomics_2fv1_2fdatasets_2eproto_impl);
}
void protobuf_AddDesc_google_2fgenomics_2fv1_2fdatasets_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_google_2fgenomics_2fv1_2fdatasets_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!google/genomics/v1/datasets.proto\022\022goo"
    "gle.genomics.v1\032\034google/api/annotations."
    "proto\032\036google/iam/v1/iam_policy.proto\032\032g"
    "oogle/iam/v1/policy.proto\032\033google/protob"
    "uf/empty.proto\032 google/protobuf/field_ma"
    "sk.proto\032\037google/protobuf/timestamp.prot"
    "o\"h\n\007Dataset\022\n\n\002id\030\001 \001(\t\022\022\n\nproject_id\030\002"
    " \001(\t\022\014\n\004name\030\003 \001(\t\022/\n\013create_time\030\004 \001(\0132"
    "\032.google.protobuf.Timestamp\"P\n\023ListDatas"
    "etsRequest\022\022\n\nproject_id\030\001 \001(\t\022\021\n\tpage_s"
    "ize\030\002 \001(\005\022\022\n\npage_token\030\003 \001(\t\"^\n\024ListDat"
    "asetsResponse\022-\n\010datasets\030\001 \003(\0132\033.google"
    ".genomics.v1.Dataset\022\027\n\017next_page_token\030"
    "\002 \001(\t\"D\n\024CreateDatasetRequest\022,\n\007dataset"
    "\030\001 \001(\0132\033.google.genomics.v1.Dataset\"\211\001\n\024"
    "UpdateDatasetRequest\022\022\n\ndataset_id\030\001 \001(\t"
    "\022,\n\007dataset\030\002 \001(\0132\033.google.genomics.v1.D"
    "ataset\022/\n\013update_mask\030\003 \001(\0132\032.google.pro"
    "tobuf.FieldMask\"*\n\024DeleteDatasetRequest\022"
    "\022\n\ndataset_id\030\001 \001(\t\",\n\026UndeleteDatasetRe"
    "quest\022\022\n\ndataset_id\030\001 \001(\t\"\'\n\021GetDatasetR"
    "equest\022\022\n\ndataset_id\030\001 \001(\t2\237\t\n\020DatasetSe"
    "rviceV1\022w\n\014ListDatasets\022\'.google.genomic"
    "s.v1.ListDatasetsRequest\032(.google.genomi"
    "cs.v1.ListDatasetsResponse\"\024\202\323\344\223\002\016\022\014/v1/"
    "datasets\022u\n\rCreateDataset\022(.google.genom"
    "ics.v1.CreateDatasetRequest\032\033.google.gen"
    "omics.v1.Dataset\"\035\202\323\344\223\002\027\"\014/v1/datasets:\007"
    "dataset\022s\n\nGetDataset\022%.google.genomics."
    "v1.GetDatasetRequest\032\033.google.genomics.v"
    "1.Dataset\"!\202\323\344\223\002\033\022\031/v1/datasets/{dataset"
    "_id}\022\202\001\n\rUpdateDataset\022(.google.genomics"
    ".v1.UpdateDatasetRequest\032\033.google.genomi"
    "cs.v1.Dataset\"*\202\323\344\223\002$2\031/v1/datasets/{dat"
    "aset_id}:\007dataset\022t\n\rDeleteDataset\022(.goo"
    "gle.genomics.v1.DeleteDatasetRequest\032\026.g"
    "oogle.protobuf.Empty\"!\202\323\344\223\002\033*\031/v1/datase"
    "ts/{dataset_id}\022\211\001\n\017UndeleteDataset\022*.go"
    "ogle.genomics.v1.UndeleteDatasetRequest\032"
    "\033.google.genomics.v1.Dataset\"-\202\323\344\223\002\'\"\"/v"
    "1/datasets/{dataset_id}:undelete:\001*\022|\n\014S"
    "etIamPolicy\022\".google.iam.v1.SetIamPolicy"
    "Request\032\025.google.iam.v1.Policy\"1\202\323\344\223\002+\"&"
    "/v1/{resource=datasets/*}:setIamPolicy:\001"
    "*\022|\n\014GetIamPolicy\022\".google.iam.v1.GetIam"
    "PolicyRequest\032\025.google.iam.v1.Policy\"1\202\323"
    "\344\223\002+\"&/v1/{resource=datasets/*}:getIamPo"
    "licy:\001*\022\242\001\n\022TestIamPermissions\022(.google."
    "iam.v1.TestIamPermissionsRequest\032).googl"
    "e.iam.v1.TestIamPermissionsResponse\"7\202\323\344"
    "\223\0021\",/v1/{resource=datasets/*}:testIamPe"
    "rmissions:\001*Bh\n\026com.google.genomics.v1B\r"
    "DatasetsProtoP\001Z:google.golang.org/genpr"
    "oto/googleapis/genomics/v1;genomics\370\001\001b\006"
    "proto3", 2166);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/genomics/v1/datasets.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_AddDesc_google_2fapi_2fannotations_2eproto();
  ::google::iam::v1::protobuf_AddDesc_google_2fiam_2fv1_2fiam_5fpolicy_2eproto();
  ::google::iam::v1::protobuf_AddDesc_google_2fiam_2fv1_2fpolicy_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fempty_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2ffield_5fmask_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2ftimestamp_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_google_2fgenomics_2fv1_2fdatasets_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_google_2fgenomics_2fv1_2fdatasets_2eproto_once_);
void protobuf_AddDesc_google_2fgenomics_2fv1_2fdatasets_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_google_2fgenomics_2fv1_2fdatasets_2eproto_once_,
                 &protobuf_AddDesc_google_2fgenomics_2fv1_2fdatasets_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_google_2fgenomics_2fv1_2fdatasets_2eproto {
  StaticDescriptorInitializer_google_2fgenomics_2fv1_2fdatasets_2eproto() {
    protobuf_AddDesc_google_2fgenomics_2fv1_2fdatasets_2eproto();
  }
} static_descriptor_initializer_google_2fgenomics_2fv1_2fdatasets_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

void Dataset::_slow_mutable_create_time() {
  create_time_ = ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Timestamp >(
      GetArenaNoVirtual());
}
::google::protobuf::Timestamp* Dataset::_slow_release_create_time() {
  if (create_time_ == NULL) {
    return NULL;
  } else {
    ::google::protobuf::Timestamp* temp = new ::google::protobuf::Timestamp(*create_time_);
    create_time_ = NULL;
    return temp;
  }
}
::google::protobuf::Timestamp* Dataset::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.Dataset.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
void Dataset::_slow_set_allocated_create_time(
    ::google::protobuf::Arena* message_arena, ::google::protobuf::Timestamp** create_time) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*create_time) == NULL) {
      message_arena->Own(*create_time);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*create_time)) {
      ::google::protobuf::Timestamp* new_create_time = 
            ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Timestamp >(
            message_arena);
      new_create_time->CopyFrom(**create_time);
      *create_time = new_create_time;
    }
}
void Dataset::unsafe_arena_set_allocated_create_time(
    ::google::protobuf::Timestamp* create_time) {
  if (GetArenaNoVirtual() == NULL) {
    delete create_time_;
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.Dataset.create_time)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dataset::kIdFieldNumber;
const int Dataset::kProjectIdFieldNumber;
const int Dataset::kNameFieldNumber;
const int Dataset::kCreateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dataset::Dataset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2fdatasets_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.Dataset)
}
Dataset::Dataset(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fdatasets_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.Dataset)
}

void Dataset::InitAsDefaultInstance() {
  create_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}

Dataset::Dataset(const Dataset& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.Dataset)
}

void Dataset::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  create_time_ = NULL;
  _cached_size_ = 0;
}

Dataset::~Dataset() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.Dataset)
  SharedDtor();
}

void Dataset::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  project_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != &Dataset_default_instance_.get()) {
    delete create_time_;
  }
}

void Dataset::ArenaDtor(void* object) {
  Dataset* _this = reinterpret_cast< Dataset* >(object);
  (void)_this;
}
void Dataset::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Dataset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dataset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dataset_descriptor_;
}

const Dataset& Dataset::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fdatasets_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Dataset> Dataset_default_instance_;

Dataset* Dataset::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Dataset>(arena);
}

void Dataset::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.Dataset)
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  project_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) delete create_time_;
  create_time_ = NULL;
}

bool Dataset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.Dataset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Dataset.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_project_id;
        break;
      }

      // optional string project_id = 2;
      case 2: {
        if (tag == 18) {
         parse_project_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Dataset.project_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Dataset.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_create_time;
        break;
      }

      // optional .google.protobuf.Timestamp create_time = 4;
      case 4: {
        if (tag == 34) {
         parse_create_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.Dataset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.Dataset)
  return false;
#undef DO_
}

void Dataset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.Dataset)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Dataset.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string project_id = 2;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Dataset.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->project_id(), output);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Dataset.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional .google.protobuf.Timestamp create_time = 4;
  if (this->has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->create_time_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.Dataset)
}

::google::protobuf::uint8* Dataset::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.Dataset)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Dataset.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string project_id = 2;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Dataset.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->project_id(), target);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Dataset.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional .google.protobuf.Timestamp create_time = 4;
  if (this->has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->create_time_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.Dataset)
  return target;
}

size_t Dataset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.Dataset)
  size_t total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional string project_id = 2;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .google.protobuf.Timestamp create_time = 4;
  if (this->has_create_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->create_time_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dataset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.Dataset)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Dataset* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Dataset>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.Dataset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.Dataset)
    UnsafeMergeFrom(*source);
  }
}

void Dataset::MergeFrom(const Dataset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.Dataset)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Dataset::UnsafeMergeFrom(const Dataset& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id().size() > 0) {
    set_id(from.id());
  }
  if (from.project_id().size() > 0) {
    set_project_id(from.project_id());
  }
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.has_create_time()) {
    mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(from.create_time());
  }
}

void Dataset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.Dataset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dataset::CopyFrom(const Dataset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.Dataset)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Dataset::IsInitialized() const {

  return true;
}

void Dataset::Swap(Dataset* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Dataset temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void Dataset::UnsafeArenaSwap(Dataset* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Dataset::InternalSwap(Dataset* other) {
  id_.Swap(&other->id_);
  project_id_.Swap(&other->project_id_);
  name_.Swap(&other->name_);
  std::swap(create_time_, other->create_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Dataset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dataset_descriptor_;
  metadata.reflection = Dataset_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Dataset

// optional string id = 1;
void Dataset::clear_id() {
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Dataset::id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Dataset.id)
  return id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Dataset::set_id(const ::std::string& value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.Dataset.id)
}
void Dataset::set_id(const char* value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.Dataset.id)
}
void Dataset::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.Dataset.id)
}
::std::string* Dataset::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Dataset.id)
  return id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Dataset::release_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.Dataset.id)
  
  return id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Dataset::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.Dataset.id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Dataset::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.Dataset.id)
}
void Dataset::unsafe_arena_set_allocated_id(
    ::std::string* id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (id != NULL) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.Dataset.id)
}

// optional string project_id = 2;
void Dataset::clear_project_id() {
  project_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Dataset::project_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Dataset.project_id)
  return project_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Dataset::set_project_id(const ::std::string& value) {
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.Dataset.project_id)
}
void Dataset::set_project_id(const char* value) {
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.Dataset.project_id)
}
void Dataset::set_project_id(const char* value,
    size_t size) {
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.Dataset.project_id)
}
::std::string* Dataset::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Dataset.project_id)
  return project_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Dataset::release_project_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.Dataset.project_id)
  
  return project_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Dataset::unsafe_arena_release_project_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.Dataset.project_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return project_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Dataset::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.Dataset.project_id)
}
void Dataset::unsafe_arena_set_allocated_project_id(
    ::std::string* project_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      project_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.Dataset.project_id)
}

// optional string name = 3;
void Dataset::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Dataset::name() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Dataset.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Dataset::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.Dataset.name)
}
void Dataset::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.Dataset.name)
}
void Dataset::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.Dataset.name)
}
::std::string* Dataset::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Dataset.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Dataset::release_name() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.Dataset.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Dataset::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.Dataset.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Dataset::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.Dataset.name)
}
void Dataset::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.Dataset.name)
}

// optional .google.protobuf.Timestamp create_time = 4;
bool Dataset::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
void Dataset::clear_create_time() {
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) delete create_time_;
  create_time_ = NULL;
}
const ::google::protobuf::Timestamp& Dataset::create_time() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.Dataset.create_time)
  return create_time_ != NULL ? *create_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* Dataset::mutable_create_time() {
  
  if (create_time_ == NULL) {
    _slow_mutable_create_time();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.Dataset.create_time)
  return create_time_;
}
::google::protobuf::Timestamp* Dataset::release_create_time() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.Dataset.create_time)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_create_time();
  } else {
    ::google::protobuf::Timestamp* temp = create_time_;
    create_time_ = NULL;
    return temp;
  }
}
 void Dataset::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete create_time_;
  }
  if (create_time != NULL) {
    _slow_set_allocated_create_time(message_arena, &create_time);
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.Dataset.create_time)
}

inline const Dataset* Dataset::internal_default_instance() {
  return &Dataset_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListDatasetsRequest::kProjectIdFieldNumber;
const int ListDatasetsRequest::kPageSizeFieldNumber;
const int ListDatasetsRequest::kPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListDatasetsRequest::ListDatasetsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2fdatasets_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.ListDatasetsRequest)
}
ListDatasetsRequest::ListDatasetsRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fdatasets_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.ListDatasetsRequest)
}

void ListDatasetsRequest::InitAsDefaultInstance() {
}

ListDatasetsRequest::ListDatasetsRequest(const ListDatasetsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.ListDatasetsRequest)
}

void ListDatasetsRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
  _cached_size_ = 0;
}

ListDatasetsRequest::~ListDatasetsRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.ListDatasetsRequest)
  SharedDtor();
}

void ListDatasetsRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  project_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  page_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void ListDatasetsRequest::ArenaDtor(void* object) {
  ListDatasetsRequest* _this = reinterpret_cast< ListDatasetsRequest* >(object);
  (void)_this;
}
void ListDatasetsRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ListDatasetsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListDatasetsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListDatasetsRequest_descriptor_;
}

const ListDatasetsRequest& ListDatasetsRequest::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fdatasets_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ListDatasetsRequest> ListDatasetsRequest_default_instance_;

ListDatasetsRequest* ListDatasetsRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ListDatasetsRequest>(arena);
}

void ListDatasetsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.ListDatasetsRequest)
  project_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_size_ = 0;
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool ListDatasetsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.ListDatasetsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string project_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ListDatasetsRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_page_size;
        break;
      }

      // optional int32 page_size = 2;
      case 2: {
        if (tag == 16) {
         parse_page_size:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_page_token;
        break;
      }

      // optional string page_token = 3;
      case 3: {
        if (tag == 26) {
         parse_page_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), this->page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ListDatasetsRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.ListDatasetsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.ListDatasetsRequest)
  return false;
#undef DO_
}

void ListDatasetsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.ListDatasetsRequest)
  // optional string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ListDatasetsRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // optional int32 page_size = 2;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page_size(), output);
  }

  // optional string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ListDatasetsRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.ListDatasetsRequest)
}

::google::protobuf::uint8* ListDatasetsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.ListDatasetsRequest)
  // optional string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ListDatasetsRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // optional int32 page_size = 2;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page_size(), target);
  }

  // optional string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ListDatasetsRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.ListDatasetsRequest)
  return target;
}

size_t ListDatasetsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.ListDatasetsRequest)
  size_t total_size = 0;

  // optional string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // optional int32 page_size = 2;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  // optional string page_token = 3;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListDatasetsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.ListDatasetsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListDatasetsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListDatasetsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.ListDatasetsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.ListDatasetsRequest)
    UnsafeMergeFrom(*source);
  }
}

void ListDatasetsRequest::MergeFrom(const ListDatasetsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.ListDatasetsRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ListDatasetsRequest::UnsafeMergeFrom(const ListDatasetsRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.project_id().size() > 0) {
    set_project_id(from.project_id());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
  if (from.page_token().size() > 0) {
    set_page_token(from.page_token());
  }
}

void ListDatasetsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.ListDatasetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDatasetsRequest::CopyFrom(const ListDatasetsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.ListDatasetsRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ListDatasetsRequest::IsInitialized() const {

  return true;
}

void ListDatasetsRequest::Swap(ListDatasetsRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListDatasetsRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ListDatasetsRequest::UnsafeArenaSwap(ListDatasetsRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListDatasetsRequest::InternalSwap(ListDatasetsRequest* other) {
  project_id_.Swap(&other->project_id_);
  std::swap(page_size_, other->page_size_);
  page_token_.Swap(&other->page_token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListDatasetsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListDatasetsRequest_descriptor_;
  metadata.reflection = ListDatasetsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListDatasetsRequest

// optional string project_id = 1;
void ListDatasetsRequest::clear_project_id() {
  project_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ListDatasetsRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListDatasetsRequest.project_id)
  return project_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListDatasetsRequest::set_project_id(const ::std::string& value) {
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ListDatasetsRequest.project_id)
}
void ListDatasetsRequest::set_project_id(const char* value) {
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ListDatasetsRequest.project_id)
}
void ListDatasetsRequest::set_project_id(const char* value,
    size_t size) {
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ListDatasetsRequest.project_id)
}
::std::string* ListDatasetsRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ListDatasetsRequest.project_id)
  return project_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListDatasetsRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ListDatasetsRequest.project_id)
  
  return project_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListDatasetsRequest::unsafe_arena_release_project_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ListDatasetsRequest.project_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return project_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ListDatasetsRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ListDatasetsRequest.project_id)
}
void ListDatasetsRequest::unsafe_arena_set_allocated_project_id(
    ::std::string* project_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      project_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ListDatasetsRequest.project_id)
}

// optional int32 page_size = 2;
void ListDatasetsRequest::clear_page_size() {
  page_size_ = 0;
}
::google::protobuf::int32 ListDatasetsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListDatasetsRequest.page_size)
  return page_size_;
}
void ListDatasetsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1.ListDatasetsRequest.page_size)
}

// optional string page_token = 3;
void ListDatasetsRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ListDatasetsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListDatasetsRequest.page_token)
  return page_token_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListDatasetsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ListDatasetsRequest.page_token)
}
void ListDatasetsRequest::set_page_token(const char* value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ListDatasetsRequest.page_token)
}
void ListDatasetsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ListDatasetsRequest.page_token)
}
::std::string* ListDatasetsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ListDatasetsRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListDatasetsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ListDatasetsRequest.page_token)
  
  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListDatasetsRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ListDatasetsRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ListDatasetsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ListDatasetsRequest.page_token)
}
void ListDatasetsRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ListDatasetsRequest.page_token)
}

inline const ListDatasetsRequest* ListDatasetsRequest::internal_default_instance() {
  return &ListDatasetsRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListDatasetsResponse::kDatasetsFieldNumber;
const int ListDatasetsResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListDatasetsResponse::ListDatasetsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2fdatasets_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.ListDatasetsResponse)
}
ListDatasetsResponse::ListDatasetsResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  datasets_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fdatasets_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.ListDatasetsResponse)
}

void ListDatasetsResponse::InitAsDefaultInstance() {
}

ListDatasetsResponse::ListDatasetsResponse(const ListDatasetsResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.ListDatasetsResponse)
}

void ListDatasetsResponse::SharedCtor() {
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ListDatasetsResponse::~ListDatasetsResponse() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.ListDatasetsResponse)
  SharedDtor();
}

void ListDatasetsResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  next_page_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void ListDatasetsResponse::ArenaDtor(void* object) {
  ListDatasetsResponse* _this = reinterpret_cast< ListDatasetsResponse* >(object);
  (void)_this;
}
void ListDatasetsResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ListDatasetsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListDatasetsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListDatasetsResponse_descriptor_;
}

const ListDatasetsResponse& ListDatasetsResponse::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fdatasets_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ListDatasetsResponse> ListDatasetsResponse_default_instance_;

ListDatasetsResponse* ListDatasetsResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ListDatasetsResponse>(arena);
}

void ListDatasetsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.ListDatasetsResponse)
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  datasets_.Clear();
}

bool ListDatasetsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.ListDatasetsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.genomics.v1.Dataset datasets = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_datasets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_datasets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_datasets;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_next_page_token;
        break;
      }

      // optional string next_page_token = 2;
      case 2: {
        if (tag == 18) {
         parse_next_page_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), this->next_page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ListDatasetsResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.ListDatasetsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.ListDatasetsResponse)
  return false;
#undef DO_
}

void ListDatasetsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.ListDatasetsResponse)
  // repeated .google.genomics.v1.Dataset datasets = 1;
  for (unsigned int i = 0, n = this->datasets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datasets(i), output);
  }

  // optional string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ListDatasetsResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.ListDatasetsResponse)
}

::google::protobuf::uint8* ListDatasetsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.ListDatasetsResponse)
  // repeated .google.genomics.v1.Dataset datasets = 1;
  for (unsigned int i = 0, n = this->datasets_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->datasets(i), false, target);
  }

  // optional string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ListDatasetsResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.ListDatasetsResponse)
  return target;
}

size_t ListDatasetsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.ListDatasetsResponse)
  size_t total_size = 0;

  // optional string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  // repeated .google.genomics.v1.Dataset datasets = 1;
  {
    unsigned int count = this->datasets_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->datasets(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListDatasetsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.ListDatasetsResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListDatasetsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListDatasetsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.ListDatasetsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.ListDatasetsResponse)
    UnsafeMergeFrom(*source);
  }
}

void ListDatasetsResponse::MergeFrom(const ListDatasetsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.ListDatasetsResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ListDatasetsResponse::UnsafeMergeFrom(const ListDatasetsResponse& from) {
  GOOGLE_DCHECK(&from != this);
  datasets_.MergeFrom(from.datasets_);
  if (from.next_page_token().size() > 0) {
    set_next_page_token(from.next_page_token());
  }
}

void ListDatasetsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.ListDatasetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDatasetsResponse::CopyFrom(const ListDatasetsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.ListDatasetsResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ListDatasetsResponse::IsInitialized() const {

  return true;
}

void ListDatasetsResponse::Swap(ListDatasetsResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListDatasetsResponse temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ListDatasetsResponse::UnsafeArenaSwap(ListDatasetsResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListDatasetsResponse::InternalSwap(ListDatasetsResponse* other) {
  datasets_.UnsafeArenaSwap(&other->datasets_);
  next_page_token_.Swap(&other->next_page_token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListDatasetsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListDatasetsResponse_descriptor_;
  metadata.reflection = ListDatasetsResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListDatasetsResponse

// repeated .google.genomics.v1.Dataset datasets = 1;
int ListDatasetsResponse::datasets_size() const {
  return datasets_.size();
}
void ListDatasetsResponse::clear_datasets() {
  datasets_.Clear();
}
const ::google::genomics::v1::Dataset& ListDatasetsResponse::datasets(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListDatasetsResponse.datasets)
  return datasets_.Get(index);
}
::google::genomics::v1::Dataset* ListDatasetsResponse::mutable_datasets(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ListDatasetsResponse.datasets)
  return datasets_.Mutable(index);
}
::google::genomics::v1::Dataset* ListDatasetsResponse::add_datasets() {
  // @@protoc_insertion_point(field_add:google.genomics.v1.ListDatasetsResponse.datasets)
  return datasets_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::genomics::v1::Dataset >*
ListDatasetsResponse::mutable_datasets() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1.ListDatasetsResponse.datasets)
  return &datasets_;
}
const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1::Dataset >&
ListDatasetsResponse::datasets() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1.ListDatasetsResponse.datasets)
  return datasets_;
}

// optional string next_page_token = 2;
void ListDatasetsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ListDatasetsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.ListDatasetsResponse.next_page_token)
  return next_page_token_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListDatasetsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.ListDatasetsResponse.next_page_token)
}
void ListDatasetsResponse::set_next_page_token(const char* value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.ListDatasetsResponse.next_page_token)
}
void ListDatasetsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.ListDatasetsResponse.next_page_token)
}
::std::string* ListDatasetsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.ListDatasetsResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListDatasetsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.ListDatasetsResponse.next_page_token)
  
  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ListDatasetsResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.ListDatasetsResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ListDatasetsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.ListDatasetsResponse.next_page_token)
}
void ListDatasetsResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.ListDatasetsResponse.next_page_token)
}

inline const ListDatasetsResponse* ListDatasetsResponse::internal_default_instance() {
  return &ListDatasetsResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void CreateDatasetRequest::_slow_mutable_dataset() {
  dataset_ = ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::Dataset >(
      GetArenaNoVirtual());
}
::google::genomics::v1::Dataset* CreateDatasetRequest::_slow_release_dataset() {
  if (dataset_ == NULL) {
    return NULL;
  } else {
    ::google::genomics::v1::Dataset* temp = new ::google::genomics::v1::Dataset(*dataset_);
    dataset_ = NULL;
    return temp;
  }
}
::google::genomics::v1::Dataset* CreateDatasetRequest::unsafe_arena_release_dataset() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.CreateDatasetRequest.dataset)
  
  ::google::genomics::v1::Dataset* temp = dataset_;
  dataset_ = NULL;
  return temp;
}
void CreateDatasetRequest::_slow_set_allocated_dataset(
    ::google::protobuf::Arena* message_arena, ::google::genomics::v1::Dataset** dataset) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*dataset) == NULL) {
      message_arena->Own(*dataset);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*dataset)) {
      ::google::genomics::v1::Dataset* new_dataset = 
            ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::Dataset >(
            message_arena);
      new_dataset->CopyFrom(**dataset);
      *dataset = new_dataset;
    }
}
void CreateDatasetRequest::unsafe_arena_set_allocated_dataset(
    ::google::genomics::v1::Dataset* dataset) {
  if (GetArenaNoVirtual() == NULL) {
    delete dataset_;
  }
  dataset_ = dataset;
  if (dataset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.CreateDatasetRequest.dataset)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateDatasetRequest::kDatasetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateDatasetRequest::CreateDatasetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2fdatasets_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.CreateDatasetRequest)
}
CreateDatasetRequest::CreateDatasetRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fdatasets_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.CreateDatasetRequest)
}

void CreateDatasetRequest::InitAsDefaultInstance() {
  dataset_ = const_cast< ::google::genomics::v1::Dataset*>(
      ::google::genomics::v1::Dataset::internal_default_instance());
}

CreateDatasetRequest::CreateDatasetRequest(const CreateDatasetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.CreateDatasetRequest)
}

void CreateDatasetRequest::SharedCtor() {
  dataset_ = NULL;
  _cached_size_ = 0;
}

CreateDatasetRequest::~CreateDatasetRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.CreateDatasetRequest)
  SharedDtor();
}

void CreateDatasetRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != &CreateDatasetRequest_default_instance_.get()) {
    delete dataset_;
  }
}

void CreateDatasetRequest::ArenaDtor(void* object) {
  CreateDatasetRequest* _this = reinterpret_cast< CreateDatasetRequest* >(object);
  (void)_this;
}
void CreateDatasetRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CreateDatasetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateDatasetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateDatasetRequest_descriptor_;
}

const CreateDatasetRequest& CreateDatasetRequest::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fdatasets_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CreateDatasetRequest> CreateDatasetRequest_default_instance_;

CreateDatasetRequest* CreateDatasetRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CreateDatasetRequest>(arena);
}

void CreateDatasetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.CreateDatasetRequest)
  if (GetArenaNoVirtual() == NULL && dataset_ != NULL) delete dataset_;
  dataset_ = NULL;
}

bool CreateDatasetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.CreateDatasetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.genomics.v1.Dataset dataset = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dataset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.CreateDatasetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.CreateDatasetRequest)
  return false;
#undef DO_
}

void CreateDatasetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.CreateDatasetRequest)
  // optional .google.genomics.v1.Dataset dataset = 1;
  if (this->has_dataset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->dataset_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.CreateDatasetRequest)
}

::google::protobuf::uint8* CreateDatasetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.CreateDatasetRequest)
  // optional .google.genomics.v1.Dataset dataset = 1;
  if (this->has_dataset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->dataset_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.CreateDatasetRequest)
  return target;
}

size_t CreateDatasetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.CreateDatasetRequest)
  size_t total_size = 0;

  // optional .google.genomics.v1.Dataset dataset = 1;
  if (this->has_dataset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dataset_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateDatasetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.CreateDatasetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CreateDatasetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateDatasetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.CreateDatasetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.CreateDatasetRequest)
    UnsafeMergeFrom(*source);
  }
}

void CreateDatasetRequest::MergeFrom(const CreateDatasetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.CreateDatasetRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CreateDatasetRequest::UnsafeMergeFrom(const CreateDatasetRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_dataset()) {
    mutable_dataset()->::google::genomics::v1::Dataset::MergeFrom(from.dataset());
  }
}

void CreateDatasetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.CreateDatasetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateDatasetRequest::CopyFrom(const CreateDatasetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.CreateDatasetRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CreateDatasetRequest::IsInitialized() const {

  return true;
}

void CreateDatasetRequest::Swap(CreateDatasetRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CreateDatasetRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void CreateDatasetRequest::UnsafeArenaSwap(CreateDatasetRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CreateDatasetRequest::InternalSwap(CreateDatasetRequest* other) {
  std::swap(dataset_, other->dataset_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateDatasetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateDatasetRequest_descriptor_;
  metadata.reflection = CreateDatasetRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateDatasetRequest

// optional .google.genomics.v1.Dataset dataset = 1;
bool CreateDatasetRequest::has_dataset() const {
  return this != internal_default_instance() && dataset_ != NULL;
}
void CreateDatasetRequest::clear_dataset() {
  if (GetArenaNoVirtual() == NULL && dataset_ != NULL) delete dataset_;
  dataset_ = NULL;
}
const ::google::genomics::v1::Dataset& CreateDatasetRequest::dataset() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.CreateDatasetRequest.dataset)
  return dataset_ != NULL ? *dataset_
                         : *::google::genomics::v1::Dataset::internal_default_instance();
}
::google::genomics::v1::Dataset* CreateDatasetRequest::mutable_dataset() {
  
  if (dataset_ == NULL) {
    _slow_mutable_dataset();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.CreateDatasetRequest.dataset)
  return dataset_;
}
::google::genomics::v1::Dataset* CreateDatasetRequest::release_dataset() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.CreateDatasetRequest.dataset)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_dataset();
  } else {
    ::google::genomics::v1::Dataset* temp = dataset_;
    dataset_ = NULL;
    return temp;
  }
}
 void CreateDatasetRequest::set_allocated_dataset(::google::genomics::v1::Dataset* dataset) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dataset_;
  }
  if (dataset != NULL) {
    _slow_set_allocated_dataset(message_arena, &dataset);
  }
  dataset_ = dataset;
  if (dataset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.CreateDatasetRequest.dataset)
}

inline const CreateDatasetRequest* CreateDatasetRequest::internal_default_instance() {
  return &CreateDatasetRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void UpdateDatasetRequest::_slow_mutable_dataset() {
  dataset_ = ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::Dataset >(
      GetArenaNoVirtual());
}
::google::genomics::v1::Dataset* UpdateDatasetRequest::_slow_release_dataset() {
  if (dataset_ == NULL) {
    return NULL;
  } else {
    ::google::genomics::v1::Dataset* temp = new ::google::genomics::v1::Dataset(*dataset_);
    dataset_ = NULL;
    return temp;
  }
}
::google::genomics::v1::Dataset* UpdateDatasetRequest::unsafe_arena_release_dataset() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.UpdateDatasetRequest.dataset)
  
  ::google::genomics::v1::Dataset* temp = dataset_;
  dataset_ = NULL;
  return temp;
}
void UpdateDatasetRequest::_slow_set_allocated_dataset(
    ::google::protobuf::Arena* message_arena, ::google::genomics::v1::Dataset** dataset) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*dataset) == NULL) {
      message_arena->Own(*dataset);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*dataset)) {
      ::google::genomics::v1::Dataset* new_dataset = 
            ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::Dataset >(
            message_arena);
      new_dataset->CopyFrom(**dataset);
      *dataset = new_dataset;
    }
}
void UpdateDatasetRequest::unsafe_arena_set_allocated_dataset(
    ::google::genomics::v1::Dataset* dataset) {
  if (GetArenaNoVirtual() == NULL) {
    delete dataset_;
  }
  dataset_ = dataset;
  if (dataset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.UpdateDatasetRequest.dataset)
}
void UpdateDatasetRequest::_slow_mutable_update_mask() {
  update_mask_ = ::google::protobuf::Arena::Create< ::google::protobuf::FieldMask >(
      GetArenaNoVirtual());
}
::google::protobuf::FieldMask* UpdateDatasetRequest::_slow_release_update_mask() {
  if (update_mask_ == NULL) {
    return NULL;
  } else {
    ::google::protobuf::FieldMask* temp = new ::google::protobuf::FieldMask(*update_mask_);
    update_mask_ = NULL;
    return temp;
  }
}
::google::protobuf::FieldMask* UpdateDatasetRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.UpdateDatasetRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  update_mask_ = NULL;
  return temp;
}
void UpdateDatasetRequest::unsafe_arena_set_allocated_update_mask(
    ::google::protobuf::FieldMask* update_mask) {
  if (GetArenaNoVirtual() == NULL) {
    delete update_mask_;
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.UpdateDatasetRequest.update_mask)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateDatasetRequest::kDatasetIdFieldNumber;
const int UpdateDatasetRequest::kDatasetFieldNumber;
const int UpdateDatasetRequest::kUpdateMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateDatasetRequest::UpdateDatasetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2fdatasets_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.UpdateDatasetRequest)
}
UpdateDatasetRequest::UpdateDatasetRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fdatasets_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.UpdateDatasetRequest)
}

void UpdateDatasetRequest::InitAsDefaultInstance() {
  dataset_ = const_cast< ::google::genomics::v1::Dataset*>(
      ::google::genomics::v1::Dataset::internal_default_instance());
  update_mask_ = const_cast< ::google::protobuf::FieldMask*>(
      ::google::protobuf::FieldMask::internal_default_instance());
}

UpdateDatasetRequest::UpdateDatasetRequest(const UpdateDatasetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.UpdateDatasetRequest)
}

void UpdateDatasetRequest::SharedCtor() {
  dataset_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dataset_ = NULL;
  update_mask_ = NULL;
  _cached_size_ = 0;
}

UpdateDatasetRequest::~UpdateDatasetRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.UpdateDatasetRequest)
  SharedDtor();
}

void UpdateDatasetRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  dataset_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != &UpdateDatasetRequest_default_instance_.get()) {
    delete dataset_;
    delete update_mask_;
  }
}

void UpdateDatasetRequest::ArenaDtor(void* object) {
  UpdateDatasetRequest* _this = reinterpret_cast< UpdateDatasetRequest* >(object);
  (void)_this;
}
void UpdateDatasetRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UpdateDatasetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateDatasetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateDatasetRequest_descriptor_;
}

const UpdateDatasetRequest& UpdateDatasetRequest::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fdatasets_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UpdateDatasetRequest> UpdateDatasetRequest_default_instance_;

UpdateDatasetRequest* UpdateDatasetRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UpdateDatasetRequest>(arena);
}

void UpdateDatasetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.UpdateDatasetRequest)
  dataset_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && dataset_ != NULL) delete dataset_;
  dataset_ = NULL;
  if (GetArenaNoVirtual() == NULL && update_mask_ != NULL) delete update_mask_;
  update_mask_ = NULL;
}

bool UpdateDatasetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.UpdateDatasetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string dataset_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataset_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dataset_id().data(), this->dataset_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.UpdateDatasetRequest.dataset_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dataset;
        break;
      }

      // optional .google.genomics.v1.Dataset dataset = 2;
      case 2: {
        if (tag == 18) {
         parse_dataset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dataset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_update_mask;
        break;
      }

      // optional .google.protobuf.FieldMask update_mask = 3;
      case 3: {
        if (tag == 26) {
         parse_update_mask:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_mask()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.UpdateDatasetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.UpdateDatasetRequest)
  return false;
#undef DO_
}

void UpdateDatasetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.UpdateDatasetRequest)
  // optional string dataset_id = 1;
  if (this->dataset_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dataset_id().data(), this->dataset_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.UpdateDatasetRequest.dataset_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dataset_id(), output);
  }

  // optional .google.genomics.v1.Dataset dataset = 2;
  if (this->has_dataset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->dataset_, output);
  }

  // optional .google.protobuf.FieldMask update_mask = 3;
  if (this->has_update_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->update_mask_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.UpdateDatasetRequest)
}

::google::protobuf::uint8* UpdateDatasetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.UpdateDatasetRequest)
  // optional string dataset_id = 1;
  if (this->dataset_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dataset_id().data(), this->dataset_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.UpdateDatasetRequest.dataset_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dataset_id(), target);
  }

  // optional .google.genomics.v1.Dataset dataset = 2;
  if (this->has_dataset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->dataset_, false, target);
  }

  // optional .google.protobuf.FieldMask update_mask = 3;
  if (this->has_update_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->update_mask_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.UpdateDatasetRequest)
  return target;
}

size_t UpdateDatasetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.UpdateDatasetRequest)
  size_t total_size = 0;

  // optional string dataset_id = 1;
  if (this->dataset_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dataset_id());
  }

  // optional .google.genomics.v1.Dataset dataset = 2;
  if (this->has_dataset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dataset_);
  }

  // optional .google.protobuf.FieldMask update_mask = 3;
  if (this->has_update_mask()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->update_mask_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateDatasetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.UpdateDatasetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UpdateDatasetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateDatasetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.UpdateDatasetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.UpdateDatasetRequest)
    UnsafeMergeFrom(*source);
  }
}

void UpdateDatasetRequest::MergeFrom(const UpdateDatasetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.UpdateDatasetRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UpdateDatasetRequest::UnsafeMergeFrom(const UpdateDatasetRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.dataset_id().size() > 0) {
    set_dataset_id(from.dataset_id());
  }
  if (from.has_dataset()) {
    mutable_dataset()->::google::genomics::v1::Dataset::MergeFrom(from.dataset());
  }
  if (from.has_update_mask()) {
    mutable_update_mask()->::google::protobuf::FieldMask::MergeFrom(from.update_mask());
  }
}

void UpdateDatasetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.UpdateDatasetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDatasetRequest::CopyFrom(const UpdateDatasetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.UpdateDatasetRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UpdateDatasetRequest::IsInitialized() const {

  return true;
}

void UpdateDatasetRequest::Swap(UpdateDatasetRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UpdateDatasetRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void UpdateDatasetRequest::UnsafeArenaSwap(UpdateDatasetRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UpdateDatasetRequest::InternalSwap(UpdateDatasetRequest* other) {
  dataset_id_.Swap(&other->dataset_id_);
  std::swap(dataset_, other->dataset_);
  std::swap(update_mask_, other->update_mask_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateDatasetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateDatasetRequest_descriptor_;
  metadata.reflection = UpdateDatasetRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateDatasetRequest

// optional string dataset_id = 1;
void UpdateDatasetRequest::clear_dataset_id() {
  dataset_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& UpdateDatasetRequest::dataset_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.UpdateDatasetRequest.dataset_id)
  return dataset_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateDatasetRequest::set_dataset_id(const ::std::string& value) {
  
  dataset_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.UpdateDatasetRequest.dataset_id)
}
void UpdateDatasetRequest::set_dataset_id(const char* value) {
  
  dataset_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.UpdateDatasetRequest.dataset_id)
}
void UpdateDatasetRequest::set_dataset_id(const char* value,
    size_t size) {
  
  dataset_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.UpdateDatasetRequest.dataset_id)
}
::std::string* UpdateDatasetRequest::mutable_dataset_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.UpdateDatasetRequest.dataset_id)
  return dataset_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* UpdateDatasetRequest::release_dataset_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.UpdateDatasetRequest.dataset_id)
  
  return dataset_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* UpdateDatasetRequest::unsafe_arena_release_dataset_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.UpdateDatasetRequest.dataset_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return dataset_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void UpdateDatasetRequest::set_allocated_dataset_id(::std::string* dataset_id) {
  if (dataset_id != NULL) {
    
  } else {
    
  }
  dataset_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dataset_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.UpdateDatasetRequest.dataset_id)
}
void UpdateDatasetRequest::unsafe_arena_set_allocated_dataset_id(
    ::std::string* dataset_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (dataset_id != NULL) {
    
  } else {
    
  }
  dataset_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      dataset_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.UpdateDatasetRequest.dataset_id)
}

// optional .google.genomics.v1.Dataset dataset = 2;
bool UpdateDatasetRequest::has_dataset() const {
  return this != internal_default_instance() && dataset_ != NULL;
}
void UpdateDatasetRequest::clear_dataset() {
  if (GetArenaNoVirtual() == NULL && dataset_ != NULL) delete dataset_;
  dataset_ = NULL;
}
const ::google::genomics::v1::Dataset& UpdateDatasetRequest::dataset() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.UpdateDatasetRequest.dataset)
  return dataset_ != NULL ? *dataset_
                         : *::google::genomics::v1::Dataset::internal_default_instance();
}
::google::genomics::v1::Dataset* UpdateDatasetRequest::mutable_dataset() {
  
  if (dataset_ == NULL) {
    _slow_mutable_dataset();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.UpdateDatasetRequest.dataset)
  return dataset_;
}
::google::genomics::v1::Dataset* UpdateDatasetRequest::release_dataset() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.UpdateDatasetRequest.dataset)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_dataset();
  } else {
    ::google::genomics::v1::Dataset* temp = dataset_;
    dataset_ = NULL;
    return temp;
  }
}
 void UpdateDatasetRequest::set_allocated_dataset(::google::genomics::v1::Dataset* dataset) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dataset_;
  }
  if (dataset != NULL) {
    _slow_set_allocated_dataset(message_arena, &dataset);
  }
  dataset_ = dataset;
  if (dataset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.UpdateDatasetRequest.dataset)
}

// optional .google.protobuf.FieldMask update_mask = 3;
bool UpdateDatasetRequest::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != NULL;
}
void UpdateDatasetRequest::clear_update_mask() {
  if (GetArenaNoVirtual() == NULL && update_mask_ != NULL) delete update_mask_;
  update_mask_ = NULL;
}
const ::google::protobuf::FieldMask& UpdateDatasetRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.UpdateDatasetRequest.update_mask)
  return update_mask_ != NULL ? *update_mask_
                         : *::google::protobuf::FieldMask::internal_default_instance();
}
::google::protobuf::FieldMask* UpdateDatasetRequest::mutable_update_mask() {
  
  if (update_mask_ == NULL) {
    _slow_mutable_update_mask();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.UpdateDatasetRequest.update_mask)
  return update_mask_;
}
::google::protobuf::FieldMask* UpdateDatasetRequest::release_update_mask() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.UpdateDatasetRequest.update_mask)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_update_mask();
  } else {
    ::google::protobuf::FieldMask* temp = update_mask_;
    update_mask_ = NULL;
    return temp;
  }
}
 void UpdateDatasetRequest::set_allocated_update_mask(::google::protobuf::FieldMask* update_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete update_mask_;
  }
  if (update_mask != NULL) {
    if (message_arena != NULL) {
      message_arena->Own(update_mask);
    }
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.UpdateDatasetRequest.update_mask)
}

inline const UpdateDatasetRequest* UpdateDatasetRequest::internal_default_instance() {
  return &UpdateDatasetRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteDatasetRequest::kDatasetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteDatasetRequest::DeleteDatasetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2fdatasets_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.DeleteDatasetRequest)
}
DeleteDatasetRequest::DeleteDatasetRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fdatasets_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.DeleteDatasetRequest)
}

void DeleteDatasetRequest::InitAsDefaultInstance() {
}

DeleteDatasetRequest::DeleteDatasetRequest(const DeleteDatasetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.DeleteDatasetRequest)
}

void DeleteDatasetRequest::SharedCtor() {
  dataset_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DeleteDatasetRequest::~DeleteDatasetRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.DeleteDatasetRequest)
  SharedDtor();
}

void DeleteDatasetRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  dataset_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void DeleteDatasetRequest::ArenaDtor(void* object) {
  DeleteDatasetRequest* _this = reinterpret_cast< DeleteDatasetRequest* >(object);
  (void)_this;
}
void DeleteDatasetRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DeleteDatasetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteDatasetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteDatasetRequest_descriptor_;
}

const DeleteDatasetRequest& DeleteDatasetRequest::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fdatasets_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DeleteDatasetRequest> DeleteDatasetRequest_default_instance_;

DeleteDatasetRequest* DeleteDatasetRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DeleteDatasetRequest>(arena);
}

void DeleteDatasetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.DeleteDatasetRequest)
  dataset_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool DeleteDatasetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.DeleteDatasetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string dataset_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataset_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dataset_id().data(), this->dataset_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.DeleteDatasetRequest.dataset_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.DeleteDatasetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.DeleteDatasetRequest)
  return false;
#undef DO_
}

void DeleteDatasetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.DeleteDatasetRequest)
  // optional string dataset_id = 1;
  if (this->dataset_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dataset_id().data(), this->dataset_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.DeleteDatasetRequest.dataset_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dataset_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.DeleteDatasetRequest)
}

::google::protobuf::uint8* DeleteDatasetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.DeleteDatasetRequest)
  // optional string dataset_id = 1;
  if (this->dataset_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dataset_id().data(), this->dataset_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.DeleteDatasetRequest.dataset_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dataset_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.DeleteDatasetRequest)
  return target;
}

size_t DeleteDatasetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.DeleteDatasetRequest)
  size_t total_size = 0;

  // optional string dataset_id = 1;
  if (this->dataset_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dataset_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteDatasetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.DeleteDatasetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DeleteDatasetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteDatasetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.DeleteDatasetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.DeleteDatasetRequest)
    UnsafeMergeFrom(*source);
  }
}

void DeleteDatasetRequest::MergeFrom(const DeleteDatasetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.DeleteDatasetRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DeleteDatasetRequest::UnsafeMergeFrom(const DeleteDatasetRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.dataset_id().size() > 0) {
    set_dataset_id(from.dataset_id());
  }
}

void DeleteDatasetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.DeleteDatasetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteDatasetRequest::CopyFrom(const DeleteDatasetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.DeleteDatasetRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DeleteDatasetRequest::IsInitialized() const {

  return true;
}

void DeleteDatasetRequest::Swap(DeleteDatasetRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeleteDatasetRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void DeleteDatasetRequest::UnsafeArenaSwap(DeleteDatasetRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeleteDatasetRequest::InternalSwap(DeleteDatasetRequest* other) {
  dataset_id_.Swap(&other->dataset_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteDatasetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteDatasetRequest_descriptor_;
  metadata.reflection = DeleteDatasetRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteDatasetRequest

// optional string dataset_id = 1;
void DeleteDatasetRequest::clear_dataset_id() {
  dataset_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& DeleteDatasetRequest::dataset_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.DeleteDatasetRequest.dataset_id)
  return dataset_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteDatasetRequest::set_dataset_id(const ::std::string& value) {
  
  dataset_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.DeleteDatasetRequest.dataset_id)
}
void DeleteDatasetRequest::set_dataset_id(const char* value) {
  
  dataset_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.DeleteDatasetRequest.dataset_id)
}
void DeleteDatasetRequest::set_dataset_id(const char* value,
    size_t size) {
  
  dataset_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.DeleteDatasetRequest.dataset_id)
}
::std::string* DeleteDatasetRequest::mutable_dataset_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.DeleteDatasetRequest.dataset_id)
  return dataset_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeleteDatasetRequest::release_dataset_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.DeleteDatasetRequest.dataset_id)
  
  return dataset_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeleteDatasetRequest::unsafe_arena_release_dataset_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.DeleteDatasetRequest.dataset_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return dataset_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void DeleteDatasetRequest::set_allocated_dataset_id(::std::string* dataset_id) {
  if (dataset_id != NULL) {
    
  } else {
    
  }
  dataset_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dataset_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.DeleteDatasetRequest.dataset_id)
}
void DeleteDatasetRequest::unsafe_arena_set_allocated_dataset_id(
    ::std::string* dataset_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (dataset_id != NULL) {
    
  } else {
    
  }
  dataset_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      dataset_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.DeleteDatasetRequest.dataset_id)
}

inline const DeleteDatasetRequest* DeleteDatasetRequest::internal_default_instance() {
  return &DeleteDatasetRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UndeleteDatasetRequest::kDatasetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UndeleteDatasetRequest::UndeleteDatasetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2fdatasets_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.UndeleteDatasetRequest)
}
UndeleteDatasetRequest::UndeleteDatasetRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fdatasets_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.UndeleteDatasetRequest)
}

void UndeleteDatasetRequest::InitAsDefaultInstance() {
}

UndeleteDatasetRequest::UndeleteDatasetRequest(const UndeleteDatasetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.UndeleteDatasetRequest)
}

void UndeleteDatasetRequest::SharedCtor() {
  dataset_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

UndeleteDatasetRequest::~UndeleteDatasetRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.UndeleteDatasetRequest)
  SharedDtor();
}

void UndeleteDatasetRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  dataset_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void UndeleteDatasetRequest::ArenaDtor(void* object) {
  UndeleteDatasetRequest* _this = reinterpret_cast< UndeleteDatasetRequest* >(object);
  (void)_this;
}
void UndeleteDatasetRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UndeleteDatasetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UndeleteDatasetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UndeleteDatasetRequest_descriptor_;
}

const UndeleteDatasetRequest& UndeleteDatasetRequest::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fdatasets_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UndeleteDatasetRequest> UndeleteDatasetRequest_default_instance_;

UndeleteDatasetRequest* UndeleteDatasetRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UndeleteDatasetRequest>(arena);
}

void UndeleteDatasetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.UndeleteDatasetRequest)
  dataset_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool UndeleteDatasetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.UndeleteDatasetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string dataset_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataset_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dataset_id().data(), this->dataset_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.UndeleteDatasetRequest.dataset_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.UndeleteDatasetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.UndeleteDatasetRequest)
  return false;
#undef DO_
}

void UndeleteDatasetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.UndeleteDatasetRequest)
  // optional string dataset_id = 1;
  if (this->dataset_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dataset_id().data(), this->dataset_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.UndeleteDatasetRequest.dataset_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dataset_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.UndeleteDatasetRequest)
}

::google::protobuf::uint8* UndeleteDatasetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.UndeleteDatasetRequest)
  // optional string dataset_id = 1;
  if (this->dataset_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dataset_id().data(), this->dataset_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.UndeleteDatasetRequest.dataset_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dataset_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.UndeleteDatasetRequest)
  return target;
}

size_t UndeleteDatasetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.UndeleteDatasetRequest)
  size_t total_size = 0;

  // optional string dataset_id = 1;
  if (this->dataset_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dataset_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UndeleteDatasetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.UndeleteDatasetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UndeleteDatasetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UndeleteDatasetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.UndeleteDatasetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.UndeleteDatasetRequest)
    UnsafeMergeFrom(*source);
  }
}

void UndeleteDatasetRequest::MergeFrom(const UndeleteDatasetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.UndeleteDatasetRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UndeleteDatasetRequest::UnsafeMergeFrom(const UndeleteDatasetRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.dataset_id().size() > 0) {
    set_dataset_id(from.dataset_id());
  }
}

void UndeleteDatasetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.UndeleteDatasetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UndeleteDatasetRequest::CopyFrom(const UndeleteDatasetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.UndeleteDatasetRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UndeleteDatasetRequest::IsInitialized() const {

  return true;
}

void UndeleteDatasetRequest::Swap(UndeleteDatasetRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UndeleteDatasetRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void UndeleteDatasetRequest::UnsafeArenaSwap(UndeleteDatasetRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UndeleteDatasetRequest::InternalSwap(UndeleteDatasetRequest* other) {
  dataset_id_.Swap(&other->dataset_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UndeleteDatasetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UndeleteDatasetRequest_descriptor_;
  metadata.reflection = UndeleteDatasetRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UndeleteDatasetRequest

// optional string dataset_id = 1;
void UndeleteDatasetRequest::clear_dataset_id() {
  dataset_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& UndeleteDatasetRequest::dataset_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.UndeleteDatasetRequest.dataset_id)
  return dataset_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UndeleteDatasetRequest::set_dataset_id(const ::std::string& value) {
  
  dataset_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.UndeleteDatasetRequest.dataset_id)
}
void UndeleteDatasetRequest::set_dataset_id(const char* value) {
  
  dataset_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.UndeleteDatasetRequest.dataset_id)
}
void UndeleteDatasetRequest::set_dataset_id(const char* value,
    size_t size) {
  
  dataset_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.UndeleteDatasetRequest.dataset_id)
}
::std::string* UndeleteDatasetRequest::mutable_dataset_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.UndeleteDatasetRequest.dataset_id)
  return dataset_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* UndeleteDatasetRequest::release_dataset_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.UndeleteDatasetRequest.dataset_id)
  
  return dataset_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* UndeleteDatasetRequest::unsafe_arena_release_dataset_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.UndeleteDatasetRequest.dataset_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return dataset_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void UndeleteDatasetRequest::set_allocated_dataset_id(::std::string* dataset_id) {
  if (dataset_id != NULL) {
    
  } else {
    
  }
  dataset_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dataset_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.UndeleteDatasetRequest.dataset_id)
}
void UndeleteDatasetRequest::unsafe_arena_set_allocated_dataset_id(
    ::std::string* dataset_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (dataset_id != NULL) {
    
  } else {
    
  }
  dataset_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      dataset_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.UndeleteDatasetRequest.dataset_id)
}

inline const UndeleteDatasetRequest* UndeleteDatasetRequest::internal_default_instance() {
  return &UndeleteDatasetRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetDatasetRequest::kDatasetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDatasetRequest::GetDatasetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fgenomics_2fv1_2fdatasets_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.GetDatasetRequest)
}
GetDatasetRequest::GetDatasetRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fdatasets_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.GetDatasetRequest)
}

void GetDatasetRequest::InitAsDefaultInstance() {
}

GetDatasetRequest::GetDatasetRequest(const GetDatasetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.GetDatasetRequest)
}

void GetDatasetRequest::SharedCtor() {
  dataset_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetDatasetRequest::~GetDatasetRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.GetDatasetRequest)
  SharedDtor();
}

void GetDatasetRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  dataset_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void GetDatasetRequest::ArenaDtor(void* object) {
  GetDatasetRequest* _this = reinterpret_cast< GetDatasetRequest* >(object);
  (void)_this;
}
void GetDatasetRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetDatasetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDatasetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDatasetRequest_descriptor_;
}

const GetDatasetRequest& GetDatasetRequest::default_instance() {
  protobuf_InitDefaults_google_2fgenomics_2fv1_2fdatasets_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetDatasetRequest> GetDatasetRequest_default_instance_;

GetDatasetRequest* GetDatasetRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetDatasetRequest>(arena);
}

void GetDatasetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.GetDatasetRequest)
  dataset_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool GetDatasetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.GetDatasetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string dataset_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataset_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dataset_id().data(), this->dataset_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.GetDatasetRequest.dataset_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.GetDatasetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.GetDatasetRequest)
  return false;
#undef DO_
}

void GetDatasetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.GetDatasetRequest)
  // optional string dataset_id = 1;
  if (this->dataset_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dataset_id().data(), this->dataset_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.GetDatasetRequest.dataset_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dataset_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.genomics.v1.GetDatasetRequest)
}

::google::protobuf::uint8* GetDatasetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.GetDatasetRequest)
  // optional string dataset_id = 1;
  if (this->dataset_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dataset_id().data(), this->dataset_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.GetDatasetRequest.dataset_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dataset_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.GetDatasetRequest)
  return target;
}

size_t GetDatasetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.GetDatasetRequest)
  size_t total_size = 0;

  // optional string dataset_id = 1;
  if (this->dataset_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dataset_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDatasetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.GetDatasetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetDatasetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetDatasetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.GetDatasetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.GetDatasetRequest)
    UnsafeMergeFrom(*source);
  }
}

void GetDatasetRequest::MergeFrom(const GetDatasetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.GetDatasetRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetDatasetRequest::UnsafeMergeFrom(const GetDatasetRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.dataset_id().size() > 0) {
    set_dataset_id(from.dataset_id());
  }
}

void GetDatasetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.GetDatasetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDatasetRequest::CopyFrom(const GetDatasetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.GetDatasetRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetDatasetRequest::IsInitialized() const {

  return true;
}

void GetDatasetRequest::Swap(GetDatasetRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetDatasetRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void GetDatasetRequest::UnsafeArenaSwap(GetDatasetRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetDatasetRequest::InternalSwap(GetDatasetRequest* other) {
  dataset_id_.Swap(&other->dataset_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetDatasetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDatasetRequest_descriptor_;
  metadata.reflection = GetDatasetRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetDatasetRequest

// optional string dataset_id = 1;
void GetDatasetRequest::clear_dataset_id() {
  dataset_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetDatasetRequest::dataset_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1.GetDatasetRequest.dataset_id)
  return dataset_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetDatasetRequest::set_dataset_id(const ::std::string& value) {
  
  dataset_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1.GetDatasetRequest.dataset_id)
}
void GetDatasetRequest::set_dataset_id(const char* value) {
  
  dataset_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1.GetDatasetRequest.dataset_id)
}
void GetDatasetRequest::set_dataset_id(const char* value,
    size_t size) {
  
  dataset_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1.GetDatasetRequest.dataset_id)
}
::std::string* GetDatasetRequest::mutable_dataset_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1.GetDatasetRequest.dataset_id)
  return dataset_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetDatasetRequest::release_dataset_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1.GetDatasetRequest.dataset_id)
  
  return dataset_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetDatasetRequest::unsafe_arena_release_dataset_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1.GetDatasetRequest.dataset_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return dataset_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetDatasetRequest::set_allocated_dataset_id(::std::string* dataset_id) {
  if (dataset_id != NULL) {
    
  } else {
    
  }
  dataset_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dataset_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1.GetDatasetRequest.dataset_id)
}
void GetDatasetRequest::unsafe_arena_set_allocated_dataset_id(
    ::std::string* dataset_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (dataset_id != NULL) {
    
  } else {
    
  }
  dataset_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      dataset_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.GetDatasetRequest.dataset_id)
}

inline const GetDatasetRequest* GetDatasetRequest::internal_default_instance() {
  return &GetDatasetRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace genomics
}  // namespace google

// @@protoc_insertion_point(global_scope)
