// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/admin/v2/table.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/bigtable/admin/v2/table.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace bigtable {
namespace admin {
namespace v2 {

namespace {

const ::google::protobuf::Descriptor* Table_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Table_reflection_ = NULL;
const ::google::protobuf::Descriptor* Table_ColumnFamiliesEntry_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Table_TimestampGranularity_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Table_View_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ColumnFamily_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColumnFamily_reflection_ = NULL;
const ::google::protobuf::Descriptor* GcRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GcRule_reflection_ = NULL;
struct GcRuleOneofInstance {
  ::google::protobuf::int32 max_num_versions_;
  const ::google::protobuf::Duration* max_age_;
  const ::google::bigtable::admin::v2::GcRule_Intersection* intersection_;
  const ::google::bigtable::admin::v2::GcRule_Union* union__;
}* GcRule_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* GcRule_Intersection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GcRule_Intersection_reflection_ = NULL;
const ::google::protobuf::Descriptor* GcRule_Union_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GcRule_Union_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto() {
  protobuf_AddDesc_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "google/bigtable/admin/v2/table.proto");
  GOOGLE_CHECK(file != NULL);
  Table_descriptor_ = file->message_type(0);
  static const int Table_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, column_families_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, granularity_),
  };
  Table_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Table_descriptor_,
      Table::internal_default_instance(),
      Table_offsets_,
      -1,
      -1,
      -1,
      sizeof(Table),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, _internal_metadata_));
  Table_ColumnFamiliesEntry_descriptor_ = Table_descriptor_->nested_type(0);
  Table_TimestampGranularity_descriptor_ = Table_descriptor_->enum_type(0);
  Table_View_descriptor_ = Table_descriptor_->enum_type(1);
  ColumnFamily_descriptor_ = file->message_type(1);
  static const int ColumnFamily_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnFamily, gc_rule_),
  };
  ColumnFamily_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ColumnFamily_descriptor_,
      ColumnFamily::internal_default_instance(),
      ColumnFamily_offsets_,
      -1,
      -1,
      -1,
      sizeof(ColumnFamily),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnFamily, _internal_metadata_));
  GcRule_descriptor_ = file->message_type(2);
  static const int GcRule_offsets_[5] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(GcRule_default_oneof_instance_, max_num_versions_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(GcRule_default_oneof_instance_, max_age_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(GcRule_default_oneof_instance_, intersection_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(GcRule_default_oneof_instance_, union__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GcRule, rule_),
  };
  GcRule_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GcRule_descriptor_,
      GcRule::internal_default_instance(),
      GcRule_offsets_,
      -1,
      -1,
      -1,
      GcRule_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GcRule, _oneof_case_[0]),
      sizeof(GcRule),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GcRule, _internal_metadata_));
  GcRule_Intersection_descriptor_ = GcRule_descriptor_->nested_type(0);
  static const int GcRule_Intersection_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GcRule_Intersection, rules_),
  };
  GcRule_Intersection_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GcRule_Intersection_descriptor_,
      GcRule_Intersection::internal_default_instance(),
      GcRule_Intersection_offsets_,
      -1,
      -1,
      -1,
      sizeof(GcRule_Intersection),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GcRule_Intersection, _internal_metadata_));
  GcRule_Union_descriptor_ = GcRule_descriptor_->nested_type(1);
  static const int GcRule_Union_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GcRule_Union, rules_),
  };
  GcRule_Union_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GcRule_Union_descriptor_,
      GcRule_Union::internal_default_instance(),
      GcRule_Union_offsets_,
      -1,
      -1,
      -1,
      sizeof(GcRule_Union),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GcRule_Union, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Table_descriptor_, Table::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Table_ColumnFamiliesEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::google::bigtable::admin::v2::ColumnFamily,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                Table_ColumnFamiliesEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ColumnFamily_descriptor_, ColumnFamily::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GcRule_descriptor_, GcRule::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GcRule_Intersection_descriptor_, GcRule_Intersection::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GcRule_Union_descriptor_, GcRule_Union::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto() {
  Table_default_instance_.Shutdown();
  delete Table_reflection_;
  ColumnFamily_default_instance_.Shutdown();
  delete ColumnFamily_reflection_;
  GcRule_default_instance_.Shutdown();
  delete GcRule_default_oneof_instance_;
  delete GcRule_reflection_;
  GcRule_Intersection_default_instance_.Shutdown();
  delete GcRule_Intersection_reflection_;
  GcRule_Union_default_instance_.Shutdown();
  delete GcRule_Union_reflection_;
}

void protobuf_InitDefaults_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::api::protobuf_InitDefaults_google_2fapi_2fannotations_2eproto();
  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2fduration_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  Table_default_instance_.DefaultConstruct();
  ColumnFamily_default_instance_.DefaultConstruct();
  GcRule_default_instance_.DefaultConstruct();
  GcRule_default_oneof_instance_ = new GcRuleOneofInstance();
  GcRule_Intersection_default_instance_.DefaultConstruct();
  GcRule_Union_default_instance_.DefaultConstruct();
  Table_default_instance_.get_mutable()->InitAsDefaultInstance();
  ColumnFamily_default_instance_.get_mutable()->InitAsDefaultInstance();
  GcRule_default_instance_.get_mutable()->InitAsDefaultInstance();
  GcRule_Intersection_default_instance_.get_mutable()->InitAsDefaultInstance();
  GcRule_Union_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto_once_);
void protobuf_InitDefaults_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto_once_,
                 &protobuf_InitDefaults_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto_impl);
}
void protobuf_AddDesc_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n$google/bigtable/admin/v2/table.proto\022\030"
    "google.bigtable.admin.v2\032\034google/api/ann"
    "otations.proto\032\036google/protobuf/duration"
    ".proto\"\240\003\n\005Table\022\014\n\004name\030\001 \001(\t\022L\n\017column"
    "_families\030\003 \003(\01323.google.bigtable.admin."
    "v2.Table.ColumnFamiliesEntry\022I\n\013granular"
    "ity\030\004 \001(\01624.google.bigtable.admin.v2.Tab"
    "le.TimestampGranularity\032]\n\023ColumnFamilie"
    "sEntry\022\013\n\003key\030\001 \001(\t\0225\n\005value\030\002 \001(\0132&.goo"
    "gle.bigtable.admin.v2.ColumnFamily:\0028\001\"I"
    "\n\024TimestampGranularity\022%\n!TIMESTAMP_GRAN"
    "ULARITY_UNSPECIFIED\020\000\022\n\n\006MILLIS\020\001\"F\n\004Vie"
    "w\022\024\n\020VIEW_UNSPECIFIED\020\000\022\r\n\tNAME_ONLY\020\001\022\017"
    "\n\013SCHEMA_VIEW\020\002\022\010\n\004FULL\020\004\"A\n\014ColumnFamil"
    "y\0221\n\007gc_rule\030\001 \001(\0132 .google.bigtable.adm"
    "in.v2.GcRule\"\325\002\n\006GcRule\022\032\n\020max_num_versi"
    "ons\030\001 \001(\005H\000\022,\n\007max_age\030\002 \001(\0132\031.google.pr"
    "otobuf.DurationH\000\022E\n\014intersection\030\003 \001(\0132"
    "-.google.bigtable.admin.v2.GcRule.Inters"
    "ectionH\000\0227\n\005union\030\004 \001(\0132&.google.bigtabl"
    "e.admin.v2.GcRule.UnionH\000\032\?\n\014Intersectio"
    "n\022/\n\005rules\030\001 \003(\0132 .google.bigtable.admin"
    ".v2.GcRule\0328\n\005Union\022/\n\005rules\030\001 \003(\0132 .goo"
    "gle.bigtable.admin.v2.GcRuleB\006\n\004ruleBk\n\034"
    "com.google.bigtable.admin.v2B\nTableProto"
    "P\001Z=google.golang.org/genproto/googleapi"
    "s/bigtable/admin/v2;adminb\006proto3", 1073);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/bigtable/admin/v2/table.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_AddDesc_google_2fapi_2fannotations_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fduration_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto_once_);
void protobuf_AddDesc_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto_once_,
                 &protobuf_AddDesc_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto {
  StaticDescriptorInitializer_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto() {
    protobuf_AddDesc_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto();
  }
} static_descriptor_initializer_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* Table_TimestampGranularity_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Table_TimestampGranularity_descriptor_;
}
bool Table_TimestampGranularity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Table_TimestampGranularity Table::TIMESTAMP_GRANULARITY_UNSPECIFIED;
const Table_TimestampGranularity Table::MILLIS;
const Table_TimestampGranularity Table::TimestampGranularity_MIN;
const Table_TimestampGranularity Table::TimestampGranularity_MAX;
const int Table::TimestampGranularity_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Table_View_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Table_View_descriptor_;
}
bool Table_View_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Table_View Table::VIEW_UNSPECIFIED;
const Table_View Table::NAME_ONLY;
const Table_View Table::SCHEMA_VIEW;
const Table_View Table::FULL;
const Table_View Table::View_MIN;
const Table_View Table::View_MAX;
const int Table::View_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Table::kNameFieldNumber;
const int Table::kColumnFamiliesFieldNumber;
const int Table::kGranularityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Table::Table()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.admin.v2.Table)
}

void Table::InitAsDefaultInstance() {
}

Table::Table(const Table& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.admin.v2.Table)
}

void Table::SharedCtor() {
  column_families_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  column_families_.SetEntryDescriptor(
      &::google::bigtable::admin::v2::Table_ColumnFamiliesEntry_descriptor_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  granularity_ = 0;
  _cached_size_ = 0;
}

Table::~Table() {
  // @@protoc_insertion_point(destructor:google.bigtable.admin.v2.Table)
  SharedDtor();
}

void Table::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Table::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Table::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Table_descriptor_;
}

const Table& Table::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Table> Table_default_instance_;

Table* Table::New(::google::protobuf::Arena* arena) const {
  Table* n = new Table;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Table::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.admin.v2.Table)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  granularity_ = 0;
  column_families_.Clear();
}

bool Table::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.admin.v2.Table)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.admin.v2.Table.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_column_families;
        break;
      }

      // map<string, .google.bigtable.admin.v2.ColumnFamily> column_families = 3;
      case 3: {
        if (tag == 26) {
         parse_column_families:
          DO_(input->IncrementRecursionDepth());
         parse_loop_column_families:
          Table_ColumnFamiliesEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::google::bigtable::admin::v2::ColumnFamily,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::ColumnFamily > > parser(&column_families_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.admin.v2.Table.ColumnFamiliesEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_column_families;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(32)) goto parse_granularity;
        break;
      }

      // optional .google.bigtable.admin.v2.Table.TimestampGranularity granularity = 4;
      case 4: {
        if (tag == 32) {
         parse_granularity:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_granularity(static_cast< ::google::bigtable::admin::v2::Table_TimestampGranularity >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.admin.v2.Table)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.admin.v2.Table)
  return false;
#undef DO_
}

void Table::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.admin.v2.Table)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.v2.Table.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // map<string, .google.bigtable.admin.v2.ColumnFamily> column_families = 3;
  if (!this->column_families().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::ColumnFamily >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.bigtable.admin.v2.Table.ColumnFamiliesEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->column_families().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->column_families().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::ColumnFamily >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::ColumnFamily >::const_iterator
          it = this->column_families().begin();
          it != this->column_families().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Table_ColumnFamiliesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(column_families_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Table_ColumnFamiliesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::ColumnFamily >::const_iterator
          it = this->column_families().begin();
          it != this->column_families().end(); ++it) {
        entry.reset(column_families_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional .google.bigtable.admin.v2.Table.TimestampGranularity granularity = 4;
  if (this->granularity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->granularity(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.admin.v2.Table)
}

::google::protobuf::uint8* Table::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.admin.v2.Table)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.v2.Table.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // map<string, .google.bigtable.admin.v2.ColumnFamily> column_families = 3;
  if (!this->column_families().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::ColumnFamily >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.bigtable.admin.v2.Table.ColumnFamiliesEntry.key");
      }
    };

    if (deterministic &&
        this->column_families().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->column_families().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::ColumnFamily >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::ColumnFamily >::const_iterator
          it = this->column_families().begin();
          it != this->column_families().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Table_ColumnFamiliesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(column_families_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Table_ColumnFamiliesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::ColumnFamily >::const_iterator
          it = this->column_families().begin();
          it != this->column_families().end(); ++it) {
        entry.reset(column_families_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional .google.bigtable.admin.v2.Table.TimestampGranularity granularity = 4;
  if (this->granularity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->granularity(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.admin.v2.Table)
  return target;
}

size_t Table::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.admin.v2.Table)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .google.bigtable.admin.v2.Table.TimestampGranularity granularity = 4;
  if (this->granularity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->granularity());
  }

  // map<string, .google.bigtable.admin.v2.ColumnFamily> column_families = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->column_families_size());
  {
    ::google::protobuf::scoped_ptr<Table_ColumnFamiliesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::ColumnFamily >::const_iterator
        it = this->column_families().begin();
        it != this->column_families().end(); ++it) {
      entry.reset(column_families_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Table::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.admin.v2.Table)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Table* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Table>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.admin.v2.Table)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.admin.v2.Table)
    UnsafeMergeFrom(*source);
  }
}

void Table::MergeFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.admin.v2.Table)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Table::UnsafeMergeFrom(const Table& from) {
  GOOGLE_DCHECK(&from != this);
  column_families_.MergeFrom(from.column_families_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.granularity() != 0) {
    set_granularity(from.granularity());
  }
}

void Table::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.admin.v2.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Table::CopyFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.admin.v2.Table)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Table::IsInitialized() const {

  return true;
}

void Table::Swap(Table* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Table::InternalSwap(Table* other) {
  name_.Swap(&other->name_);
  column_families_.Swap(&other->column_families_);
  std::swap(granularity_, other->granularity_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Table::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Table_descriptor_;
  metadata.reflection = Table_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Table

// optional string name = 1;
void Table::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Table::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.Table.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Table::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.Table.name)
}
void Table::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.v2.Table.name)
}
void Table::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.v2.Table.name)
}
::std::string* Table::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.Table.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Table::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.Table.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Table::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.Table.name)
}

// map<string, .google.bigtable.admin.v2.ColumnFamily> column_families = 3;
int Table::column_families_size() const {
  return column_families_.size();
}
void Table::clear_column_families() {
  column_families_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::ColumnFamily >&
Table::column_families() const {
  // @@protoc_insertion_point(field_map:google.bigtable.admin.v2.Table.column_families)
  return column_families_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::ColumnFamily >*
Table::mutable_column_families() {
  // @@protoc_insertion_point(field_mutable_map:google.bigtable.admin.v2.Table.column_families)
  return column_families_.MutableMap();
}

// optional .google.bigtable.admin.v2.Table.TimestampGranularity granularity = 4;
void Table::clear_granularity() {
  granularity_ = 0;
}
::google::bigtable::admin::v2::Table_TimestampGranularity Table::granularity() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.Table.granularity)
  return static_cast< ::google::bigtable::admin::v2::Table_TimestampGranularity >(granularity_);
}
void Table::set_granularity(::google::bigtable::admin::v2::Table_TimestampGranularity value) {
  
  granularity_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.Table.granularity)
}

inline const Table* Table::internal_default_instance() {
  return &Table_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ColumnFamily::kGcRuleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ColumnFamily::ColumnFamily()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.admin.v2.ColumnFamily)
}

void ColumnFamily::InitAsDefaultInstance() {
  gc_rule_ = const_cast< ::google::bigtable::admin::v2::GcRule*>(
      ::google::bigtable::admin::v2::GcRule::internal_default_instance());
}

ColumnFamily::ColumnFamily(const ColumnFamily& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.admin.v2.ColumnFamily)
}

void ColumnFamily::SharedCtor() {
  gc_rule_ = NULL;
  _cached_size_ = 0;
}

ColumnFamily::~ColumnFamily() {
  // @@protoc_insertion_point(destructor:google.bigtable.admin.v2.ColumnFamily)
  SharedDtor();
}

void ColumnFamily::SharedDtor() {
  if (this != &ColumnFamily_default_instance_.get()) {
    delete gc_rule_;
  }
}

void ColumnFamily::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColumnFamily::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColumnFamily_descriptor_;
}

const ColumnFamily& ColumnFamily::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ColumnFamily> ColumnFamily_default_instance_;

ColumnFamily* ColumnFamily::New(::google::protobuf::Arena* arena) const {
  ColumnFamily* n = new ColumnFamily;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ColumnFamily::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.admin.v2.ColumnFamily)
  if (GetArenaNoVirtual() == NULL && gc_rule_ != NULL) delete gc_rule_;
  gc_rule_ = NULL;
}

bool ColumnFamily::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.admin.v2.ColumnFamily)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.bigtable.admin.v2.GcRule gc_rule = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gc_rule()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.admin.v2.ColumnFamily)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.admin.v2.ColumnFamily)
  return false;
#undef DO_
}

void ColumnFamily::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.admin.v2.ColumnFamily)
  // optional .google.bigtable.admin.v2.GcRule gc_rule = 1;
  if (this->has_gc_rule()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->gc_rule_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.admin.v2.ColumnFamily)
}

::google::protobuf::uint8* ColumnFamily::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.admin.v2.ColumnFamily)
  // optional .google.bigtable.admin.v2.GcRule gc_rule = 1;
  if (this->has_gc_rule()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->gc_rule_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.admin.v2.ColumnFamily)
  return target;
}

size_t ColumnFamily::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.admin.v2.ColumnFamily)
  size_t total_size = 0;

  // optional .google.bigtable.admin.v2.GcRule gc_rule = 1;
  if (this->has_gc_rule()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gc_rule_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColumnFamily::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.admin.v2.ColumnFamily)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ColumnFamily* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ColumnFamily>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.admin.v2.ColumnFamily)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.admin.v2.ColumnFamily)
    UnsafeMergeFrom(*source);
  }
}

void ColumnFamily::MergeFrom(const ColumnFamily& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.admin.v2.ColumnFamily)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ColumnFamily::UnsafeMergeFrom(const ColumnFamily& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_gc_rule()) {
    mutable_gc_rule()->::google::bigtable::admin::v2::GcRule::MergeFrom(from.gc_rule());
  }
}

void ColumnFamily::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.admin.v2.ColumnFamily)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnFamily::CopyFrom(const ColumnFamily& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.admin.v2.ColumnFamily)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ColumnFamily::IsInitialized() const {

  return true;
}

void ColumnFamily::Swap(ColumnFamily* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ColumnFamily::InternalSwap(ColumnFamily* other) {
  std::swap(gc_rule_, other->gc_rule_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ColumnFamily::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColumnFamily_descriptor_;
  metadata.reflection = ColumnFamily_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ColumnFamily

// optional .google.bigtable.admin.v2.GcRule gc_rule = 1;
bool ColumnFamily::has_gc_rule() const {
  return this != internal_default_instance() && gc_rule_ != NULL;
}
void ColumnFamily::clear_gc_rule() {
  if (GetArenaNoVirtual() == NULL && gc_rule_ != NULL) delete gc_rule_;
  gc_rule_ = NULL;
}
const ::google::bigtable::admin::v2::GcRule& ColumnFamily::gc_rule() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.ColumnFamily.gc_rule)
  return gc_rule_ != NULL ? *gc_rule_
                         : *::google::bigtable::admin::v2::GcRule::internal_default_instance();
}
::google::bigtable::admin::v2::GcRule* ColumnFamily::mutable_gc_rule() {
  
  if (gc_rule_ == NULL) {
    gc_rule_ = new ::google::bigtable::admin::v2::GcRule;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.ColumnFamily.gc_rule)
  return gc_rule_;
}
::google::bigtable::admin::v2::GcRule* ColumnFamily::release_gc_rule() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.ColumnFamily.gc_rule)
  
  ::google::bigtable::admin::v2::GcRule* temp = gc_rule_;
  gc_rule_ = NULL;
  return temp;
}
void ColumnFamily::set_allocated_gc_rule(::google::bigtable::admin::v2::GcRule* gc_rule) {
  delete gc_rule_;
  gc_rule_ = gc_rule;
  if (gc_rule) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.ColumnFamily.gc_rule)
}

inline const ColumnFamily* ColumnFamily::internal_default_instance() {
  return &ColumnFamily_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GcRule_Intersection::kRulesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GcRule_Intersection::GcRule_Intersection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.admin.v2.GcRule.Intersection)
}

void GcRule_Intersection::InitAsDefaultInstance() {
}

GcRule_Intersection::GcRule_Intersection(const GcRule_Intersection& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.admin.v2.GcRule.Intersection)
}

void GcRule_Intersection::SharedCtor() {
  _cached_size_ = 0;
}

GcRule_Intersection::~GcRule_Intersection() {
  // @@protoc_insertion_point(destructor:google.bigtable.admin.v2.GcRule.Intersection)
  SharedDtor();
}

void GcRule_Intersection::SharedDtor() {
}

void GcRule_Intersection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GcRule_Intersection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GcRule_Intersection_descriptor_;
}

const GcRule_Intersection& GcRule_Intersection::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GcRule_Intersection> GcRule_Intersection_default_instance_;

GcRule_Intersection* GcRule_Intersection::New(::google::protobuf::Arena* arena) const {
  GcRule_Intersection* n = new GcRule_Intersection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GcRule_Intersection::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.admin.v2.GcRule.Intersection)
  rules_.Clear();
}

bool GcRule_Intersection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.admin.v2.GcRule.Intersection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.bigtable.admin.v2.GcRule rules = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_rules()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_rules;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.admin.v2.GcRule.Intersection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.admin.v2.GcRule.Intersection)
  return false;
#undef DO_
}

void GcRule_Intersection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.admin.v2.GcRule.Intersection)
  // repeated .google.bigtable.admin.v2.GcRule rules = 1;
  for (unsigned int i = 0, n = this->rules_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rules(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.admin.v2.GcRule.Intersection)
}

::google::protobuf::uint8* GcRule_Intersection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.admin.v2.GcRule.Intersection)
  // repeated .google.bigtable.admin.v2.GcRule rules = 1;
  for (unsigned int i = 0, n = this->rules_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->rules(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.admin.v2.GcRule.Intersection)
  return target;
}

size_t GcRule_Intersection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.admin.v2.GcRule.Intersection)
  size_t total_size = 0;

  // repeated .google.bigtable.admin.v2.GcRule rules = 1;
  {
    unsigned int count = this->rules_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rules(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GcRule_Intersection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.admin.v2.GcRule.Intersection)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GcRule_Intersection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GcRule_Intersection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.admin.v2.GcRule.Intersection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.admin.v2.GcRule.Intersection)
    UnsafeMergeFrom(*source);
  }
}

void GcRule_Intersection::MergeFrom(const GcRule_Intersection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.admin.v2.GcRule.Intersection)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GcRule_Intersection::UnsafeMergeFrom(const GcRule_Intersection& from) {
  GOOGLE_DCHECK(&from != this);
  rules_.MergeFrom(from.rules_);
}

void GcRule_Intersection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.admin.v2.GcRule.Intersection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GcRule_Intersection::CopyFrom(const GcRule_Intersection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.admin.v2.GcRule.Intersection)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GcRule_Intersection::IsInitialized() const {

  return true;
}

void GcRule_Intersection::Swap(GcRule_Intersection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GcRule_Intersection::InternalSwap(GcRule_Intersection* other) {
  rules_.UnsafeArenaSwap(&other->rules_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GcRule_Intersection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GcRule_Intersection_descriptor_;
  metadata.reflection = GcRule_Intersection_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GcRule_Union::kRulesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GcRule_Union::GcRule_Union()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.admin.v2.GcRule.Union)
}

void GcRule_Union::InitAsDefaultInstance() {
}

GcRule_Union::GcRule_Union(const GcRule_Union& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.admin.v2.GcRule.Union)
}

void GcRule_Union::SharedCtor() {
  _cached_size_ = 0;
}

GcRule_Union::~GcRule_Union() {
  // @@protoc_insertion_point(destructor:google.bigtable.admin.v2.GcRule.Union)
  SharedDtor();
}

void GcRule_Union::SharedDtor() {
}

void GcRule_Union::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GcRule_Union::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GcRule_Union_descriptor_;
}

const GcRule_Union& GcRule_Union::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GcRule_Union> GcRule_Union_default_instance_;

GcRule_Union* GcRule_Union::New(::google::protobuf::Arena* arena) const {
  GcRule_Union* n = new GcRule_Union;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GcRule_Union::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.admin.v2.GcRule.Union)
  rules_.Clear();
}

bool GcRule_Union::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.admin.v2.GcRule.Union)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.bigtable.admin.v2.GcRule rules = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_rules()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_rules;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.admin.v2.GcRule.Union)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.admin.v2.GcRule.Union)
  return false;
#undef DO_
}

void GcRule_Union::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.admin.v2.GcRule.Union)
  // repeated .google.bigtable.admin.v2.GcRule rules = 1;
  for (unsigned int i = 0, n = this->rules_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rules(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.admin.v2.GcRule.Union)
}

::google::protobuf::uint8* GcRule_Union::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.admin.v2.GcRule.Union)
  // repeated .google.bigtable.admin.v2.GcRule rules = 1;
  for (unsigned int i = 0, n = this->rules_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->rules(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.admin.v2.GcRule.Union)
  return target;
}

size_t GcRule_Union::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.admin.v2.GcRule.Union)
  size_t total_size = 0;

  // repeated .google.bigtable.admin.v2.GcRule rules = 1;
  {
    unsigned int count = this->rules_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rules(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GcRule_Union::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.admin.v2.GcRule.Union)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GcRule_Union* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GcRule_Union>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.admin.v2.GcRule.Union)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.admin.v2.GcRule.Union)
    UnsafeMergeFrom(*source);
  }
}

void GcRule_Union::MergeFrom(const GcRule_Union& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.admin.v2.GcRule.Union)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GcRule_Union::UnsafeMergeFrom(const GcRule_Union& from) {
  GOOGLE_DCHECK(&from != this);
  rules_.MergeFrom(from.rules_);
}

void GcRule_Union::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.admin.v2.GcRule.Union)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GcRule_Union::CopyFrom(const GcRule_Union& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.admin.v2.GcRule.Union)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GcRule_Union::IsInitialized() const {

  return true;
}

void GcRule_Union::Swap(GcRule_Union* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GcRule_Union::InternalSwap(GcRule_Union* other) {
  rules_.UnsafeArenaSwap(&other->rules_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GcRule_Union::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GcRule_Union_descriptor_;
  metadata.reflection = GcRule_Union_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GcRule::kMaxNumVersionsFieldNumber;
const int GcRule::kMaxAgeFieldNumber;
const int GcRule::kIntersectionFieldNumber;
const int GcRule::kUnionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GcRule::GcRule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.admin.v2.GcRule)
}

void GcRule::InitAsDefaultInstance() {
  GcRule_default_oneof_instance_->max_num_versions_ = 0;
  GcRule_default_oneof_instance_->max_age_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  GcRule_default_oneof_instance_->intersection_ = const_cast< ::google::bigtable::admin::v2::GcRule_Intersection*>(
      ::google::bigtable::admin::v2::GcRule_Intersection::internal_default_instance());
  GcRule_default_oneof_instance_->union__ = const_cast< ::google::bigtable::admin::v2::GcRule_Union*>(
      ::google::bigtable::admin::v2::GcRule_Union::internal_default_instance());
}

GcRule::GcRule(const GcRule& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.admin.v2.GcRule)
}

void GcRule::SharedCtor() {
  clear_has_rule();
  _cached_size_ = 0;
}

GcRule::~GcRule() {
  // @@protoc_insertion_point(destructor:google.bigtable.admin.v2.GcRule)
  SharedDtor();
}

void GcRule::SharedDtor() {
  if (has_rule()) {
    clear_rule();
  }
}

void GcRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GcRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GcRule_descriptor_;
}

const GcRule& GcRule::default_instance() {
  protobuf_InitDefaults_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GcRule> GcRule_default_instance_;

GcRule* GcRule::New(::google::protobuf::Arena* arena) const {
  GcRule* n = new GcRule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GcRule::clear_rule() {
// @@protoc_insertion_point(one_of_clear_start:google.bigtable.admin.v2.GcRule)
  switch (rule_case()) {
    case kMaxNumVersions: {
      // No need to clear
      break;
    }
    case kMaxAge: {
      delete rule_.max_age_;
      break;
    }
    case kIntersection: {
      delete rule_.intersection_;
      break;
    }
    case kUnion: {
      delete rule_.union__;
      break;
    }
    case RULE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RULE_NOT_SET;
}


void GcRule::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.admin.v2.GcRule)
  clear_rule();
}

bool GcRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.admin.v2.GcRule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 max_num_versions = 1;
      case 1: {
        if (tag == 8) {
          clear_rule();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rule_.max_num_versions_)));
          set_has_max_num_versions();
        } else {
          goto handle_unusual;
        }
        goto after_union_;
        break;
      }

      // optional .google.protobuf.Duration max_age = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_age()));
        } else {
          goto handle_unusual;
        }
        goto after_union_;
        break;
      }

      // optional .google.bigtable.admin.v2.GcRule.Intersection intersection = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_intersection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_union;
        break;
      }

      // optional .google.bigtable.admin.v2.GcRule.Union union = 4;
      case 4: {
        if (tag == 34) {
         parse_union:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_union_()));
        } else {
          goto handle_unusual;
        }
       after_union_:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.admin.v2.GcRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.admin.v2.GcRule)
  return false;
#undef DO_
}

void GcRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.admin.v2.GcRule)
  // optional int32 max_num_versions = 1;
  if (has_max_num_versions()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_num_versions(), output);
  }

  // optional .google.protobuf.Duration max_age = 2;
  if (has_max_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *rule_.max_age_, output);
  }

  // optional .google.bigtable.admin.v2.GcRule.Intersection intersection = 3;
  if (has_intersection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *rule_.intersection_, output);
  }

  // optional .google.bigtable.admin.v2.GcRule.Union union = 4;
  if (has_union_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *rule_.union__, output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.admin.v2.GcRule)
}

::google::protobuf::uint8* GcRule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.admin.v2.GcRule)
  // optional int32 max_num_versions = 1;
  if (has_max_num_versions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_num_versions(), target);
  }

  // optional .google.protobuf.Duration max_age = 2;
  if (has_max_age()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *rule_.max_age_, false, target);
  }

  // optional .google.bigtable.admin.v2.GcRule.Intersection intersection = 3;
  if (has_intersection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *rule_.intersection_, false, target);
  }

  // optional .google.bigtable.admin.v2.GcRule.Union union = 4;
  if (has_union_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *rule_.union__, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.admin.v2.GcRule)
  return target;
}

size_t GcRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.admin.v2.GcRule)
  size_t total_size = 0;

  switch (rule_case()) {
    // optional int32 max_num_versions = 1;
    case kMaxNumVersions: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_num_versions());
      break;
    }
    // optional .google.protobuf.Duration max_age = 2;
    case kMaxAge: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *rule_.max_age_);
      break;
    }
    // optional .google.bigtable.admin.v2.GcRule.Intersection intersection = 3;
    case kIntersection: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *rule_.intersection_);
      break;
    }
    // optional .google.bigtable.admin.v2.GcRule.Union union = 4;
    case kUnion: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *rule_.union__);
      break;
    }
    case RULE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GcRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.admin.v2.GcRule)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GcRule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GcRule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.admin.v2.GcRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.admin.v2.GcRule)
    UnsafeMergeFrom(*source);
  }
}

void GcRule::MergeFrom(const GcRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.admin.v2.GcRule)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GcRule::UnsafeMergeFrom(const GcRule& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.rule_case()) {
    case kMaxNumVersions: {
      set_max_num_versions(from.max_num_versions());
      break;
    }
    case kMaxAge: {
      mutable_max_age()->::google::protobuf::Duration::MergeFrom(from.max_age());
      break;
    }
    case kIntersection: {
      mutable_intersection()->::google::bigtable::admin::v2::GcRule_Intersection::MergeFrom(from.intersection());
      break;
    }
    case kUnion: {
      mutable_union_()->::google::bigtable::admin::v2::GcRule_Union::MergeFrom(from.union_());
      break;
    }
    case RULE_NOT_SET: {
      break;
    }
  }
}

void GcRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.admin.v2.GcRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GcRule::CopyFrom(const GcRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.admin.v2.GcRule)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GcRule::IsInitialized() const {

  return true;
}

void GcRule::Swap(GcRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GcRule::InternalSwap(GcRule* other) {
  std::swap(rule_, other->rule_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GcRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GcRule_descriptor_;
  metadata.reflection = GcRule_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GcRule_Intersection

// repeated .google.bigtable.admin.v2.GcRule rules = 1;
int GcRule_Intersection::rules_size() const {
  return rules_.size();
}
void GcRule_Intersection::clear_rules() {
  rules_.Clear();
}
const ::google::bigtable::admin::v2::GcRule& GcRule_Intersection::rules(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.GcRule.Intersection.rules)
  return rules_.Get(index);
}
::google::bigtable::admin::v2::GcRule* GcRule_Intersection::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.GcRule.Intersection.rules)
  return rules_.Mutable(index);
}
::google::bigtable::admin::v2::GcRule* GcRule_Intersection::add_rules() {
  // @@protoc_insertion_point(field_add:google.bigtable.admin.v2.GcRule.Intersection.rules)
  return rules_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::bigtable::admin::v2::GcRule >*
GcRule_Intersection::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.admin.v2.GcRule.Intersection.rules)
  return &rules_;
}
const ::google::protobuf::RepeatedPtrField< ::google::bigtable::admin::v2::GcRule >&
GcRule_Intersection::rules() const {
  // @@protoc_insertion_point(field_list:google.bigtable.admin.v2.GcRule.Intersection.rules)
  return rules_;
}

inline const GcRule_Intersection* GcRule_Intersection::internal_default_instance() {
  return &GcRule_Intersection_default_instance_.get();
}
// -------------------------------------------------------------------

// GcRule_Union

// repeated .google.bigtable.admin.v2.GcRule rules = 1;
int GcRule_Union::rules_size() const {
  return rules_.size();
}
void GcRule_Union::clear_rules() {
  rules_.Clear();
}
const ::google::bigtable::admin::v2::GcRule& GcRule_Union::rules(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.GcRule.Union.rules)
  return rules_.Get(index);
}
::google::bigtable::admin::v2::GcRule* GcRule_Union::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.GcRule.Union.rules)
  return rules_.Mutable(index);
}
::google::bigtable::admin::v2::GcRule* GcRule_Union::add_rules() {
  // @@protoc_insertion_point(field_add:google.bigtable.admin.v2.GcRule.Union.rules)
  return rules_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::bigtable::admin::v2::GcRule >*
GcRule_Union::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.admin.v2.GcRule.Union.rules)
  return &rules_;
}
const ::google::protobuf::RepeatedPtrField< ::google::bigtable::admin::v2::GcRule >&
GcRule_Union::rules() const {
  // @@protoc_insertion_point(field_list:google.bigtable.admin.v2.GcRule.Union.rules)
  return rules_;
}

inline const GcRule_Union* GcRule_Union::internal_default_instance() {
  return &GcRule_Union_default_instance_.get();
}
// -------------------------------------------------------------------

// GcRule

// optional int32 max_num_versions = 1;
bool GcRule::has_max_num_versions() const {
  return rule_case() == kMaxNumVersions;
}
void GcRule::set_has_max_num_versions() {
  _oneof_case_[0] = kMaxNumVersions;
}
void GcRule::clear_max_num_versions() {
  if (has_max_num_versions()) {
    rule_.max_num_versions_ = 0;
    clear_has_rule();
  }
}
::google::protobuf::int32 GcRule::max_num_versions() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.GcRule.max_num_versions)
  if (has_max_num_versions()) {
    return rule_.max_num_versions_;
  }
  return 0;
}
void GcRule::set_max_num_versions(::google::protobuf::int32 value) {
  if (!has_max_num_versions()) {
    clear_rule();
    set_has_max_num_versions();
  }
  rule_.max_num_versions_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.admin.v2.GcRule.max_num_versions)
}

// optional .google.protobuf.Duration max_age = 2;
bool GcRule::has_max_age() const {
  return rule_case() == kMaxAge;
}
void GcRule::set_has_max_age() {
  _oneof_case_[0] = kMaxAge;
}
void GcRule::clear_max_age() {
  if (has_max_age()) {
    delete rule_.max_age_;
    clear_has_rule();
  }
}
 const ::google::protobuf::Duration& GcRule::max_age() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.GcRule.max_age)
  return has_max_age()
      ? *rule_.max_age_
      : ::google::protobuf::Duration::default_instance();
}
::google::protobuf::Duration* GcRule::mutable_max_age() {
  if (!has_max_age()) {
    clear_rule();
    set_has_max_age();
    rule_.max_age_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.GcRule.max_age)
  return rule_.max_age_;
}
::google::protobuf::Duration* GcRule::release_max_age() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.GcRule.max_age)
  if (has_max_age()) {
    clear_has_rule();
    ::google::protobuf::Duration* temp = rule_.max_age_;
    rule_.max_age_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GcRule::set_allocated_max_age(::google::protobuf::Duration* max_age) {
  clear_rule();
  if (max_age) {
    if (static_cast< ::google::protobuf::Duration*>(max_age)->GetArena() != NULL) {
      ::google::protobuf::Duration* new_max_age = new ::google::protobuf::Duration;
      new_max_age->CopyFrom(*max_age);
      max_age = new_max_age;
    }
    set_has_max_age();
    rule_.max_age_ = max_age;
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.GcRule.max_age)
}

// optional .google.bigtable.admin.v2.GcRule.Intersection intersection = 3;
bool GcRule::has_intersection() const {
  return rule_case() == kIntersection;
}
void GcRule::set_has_intersection() {
  _oneof_case_[0] = kIntersection;
}
void GcRule::clear_intersection() {
  if (has_intersection()) {
    delete rule_.intersection_;
    clear_has_rule();
  }
}
 const ::google::bigtable::admin::v2::GcRule_Intersection& GcRule::intersection() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.GcRule.intersection)
  return has_intersection()
      ? *rule_.intersection_
      : ::google::bigtable::admin::v2::GcRule_Intersection::default_instance();
}
::google::bigtable::admin::v2::GcRule_Intersection* GcRule::mutable_intersection() {
  if (!has_intersection()) {
    clear_rule();
    set_has_intersection();
    rule_.intersection_ = new ::google::bigtable::admin::v2::GcRule_Intersection;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.GcRule.intersection)
  return rule_.intersection_;
}
::google::bigtable::admin::v2::GcRule_Intersection* GcRule::release_intersection() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.GcRule.intersection)
  if (has_intersection()) {
    clear_has_rule();
    ::google::bigtable::admin::v2::GcRule_Intersection* temp = rule_.intersection_;
    rule_.intersection_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GcRule::set_allocated_intersection(::google::bigtable::admin::v2::GcRule_Intersection* intersection) {
  clear_rule();
  if (intersection) {
    set_has_intersection();
    rule_.intersection_ = intersection;
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.GcRule.intersection)
}

// optional .google.bigtable.admin.v2.GcRule.Union union = 4;
bool GcRule::has_union_() const {
  return rule_case() == kUnion;
}
void GcRule::set_has_union_() {
  _oneof_case_[0] = kUnion;
}
void GcRule::clear_union_() {
  if (has_union_()) {
    delete rule_.union__;
    clear_has_rule();
  }
}
 const ::google::bigtable::admin::v2::GcRule_Union& GcRule::union_() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.v2.GcRule.union)
  return has_union_()
      ? *rule_.union__
      : ::google::bigtable::admin::v2::GcRule_Union::default_instance();
}
::google::bigtable::admin::v2::GcRule_Union* GcRule::mutable_union_() {
  if (!has_union_()) {
    clear_rule();
    set_has_union_();
    rule_.union__ = new ::google::bigtable::admin::v2::GcRule_Union;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.v2.GcRule.union)
  return rule_.union__;
}
::google::bigtable::admin::v2::GcRule_Union* GcRule::release_union_() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.v2.GcRule.union)
  if (has_union_()) {
    clear_has_rule();
    ::google::bigtable::admin::v2::GcRule_Union* temp = rule_.union__;
    rule_.union__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GcRule::set_allocated_union_(::google::bigtable::admin::v2::GcRule_Union* union_) {
  clear_rule();
  if (union_) {
    set_has_union_();
    rule_.union__ = union_;
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.GcRule.union)
}

bool GcRule::has_rule() const {
  return rule_case() != RULE_NOT_SET;
}
void GcRule::clear_has_rule() {
  _oneof_case_[0] = RULE_NOT_SET;
}
GcRule::RuleCase GcRule::rule_case() const {
  return GcRule::RuleCase(_oneof_case_[0]);
}
inline const GcRule* GcRule::internal_default_instance() {
  return &GcRule_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace admin
}  // namespace bigtable
}  // namespace google

// @@protoc_insertion_point(global_scope)
