// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: google/cloud/ml/v1beta1/model_service.proto
// Original file comments:
// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fcloud_2fml_2fv1beta1_2fmodel_5fservice_2eproto__INCLUDED
#define GRPC_google_2fcloud_2fml_2fv1beta1_2fmodel_5fservice_2eproto__INCLUDED

#include "google/cloud/ml/v1beta1/model_service.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace google {
namespace cloud {
namespace ml {
namespace v1beta1 {

// Copyright 2016 Google Inc. All Rights Reserved.
//
// Proto file for the Machine Learning Service
// Describes the 'models service' to work with the 'model' and 'version'
// resources.
//
// Provides methods that create and manage machine learning models and their
// versions.
//
// A model in this context is a container for versions. The model can't provide
// predictions without first having a version created for it.
//
// Each version is a trained machine learning model, and each is assumed to be
// an iteration of the same machine learning problem as the other versions of
// the same model.
//
// Your project can define multiple models, each with multiple versions.
//
// The basic life cycle of a model is:
//
// *   Create and train the machine learning model and save it to a
//     Google Cloud Storage location.
// *   Use
//     [projects.models.create](/ml/reference/rest/v1beta1/projects.models/create)
//     to make a new model in your project.
// *   Use
//     [projects.models.versions.create](/ml/reference/rest/v1beta1/projects.models.versions/create)
//     to deploy your saved model.
// *   Use [projects.predict](/ml/reference/rest/v1beta1/projects/predict to
//     request predictions of a version of your model, or use
//     [projects.jobs.create](/ml/reference/rest/v1beta1/projects.jobs/create)
//     to start a batch prediction job.
class ModelService GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Creates a model which will later contain one or more versions.
    //
    // You must add at least one version before you can request predictions from
    // the model. Add versions by calling
    // [projects.models.versions.create](/ml/reference/rest/v1beta1/projects.models.versions/create).
    virtual ::grpc::Status CreateModel(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::CreateModelRequest& request, ::google::cloud::ml::v1beta1::Model* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::ml::v1beta1::Model>> AsyncCreateModel(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::CreateModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::ml::v1beta1::Model>>(AsyncCreateModelRaw(context, request, cq));
    }
    // Lists the models in a project.
    //
    // Each project can contain multiple models, and each model can have multiple
    // versions.
    virtual ::grpc::Status ListModels(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::ListModelsRequest& request, ::google::cloud::ml::v1beta1::ListModelsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::ml::v1beta1::ListModelsResponse>> AsyncListModels(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::ListModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::ml::v1beta1::ListModelsResponse>>(AsyncListModelsRaw(context, request, cq));
    }
    // Gets information about a model, including its name, the description (if
    // set), and the default version (if at least one version of the model has
    // been deployed).
    virtual ::grpc::Status GetModel(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::GetModelRequest& request, ::google::cloud::ml::v1beta1::Model* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::ml::v1beta1::Model>> AsyncGetModel(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::GetModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::ml::v1beta1::Model>>(AsyncGetModelRaw(context, request, cq));
    }
    // Deletes a model.
    //
    // You can only delete a model if there are no versions in it. You can delete
    // versions by calling
    // [projects.models.versions.delete](/ml/reference/rest/v1beta1/projects.models.versions/delete).
    virtual ::grpc::Status DeleteModel(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::DeleteModelRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncDeleteModel(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::DeleteModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncDeleteModelRaw(context, request, cq));
    }
    // Creates a new version of a model from a trained TensorFlow model.
    //
    // If the version created in the cloud by this call is the first deployed
    // version of the specified model, it will be made the default version of the
    // model. When you add a version to a model that already has one or more
    // versions, the default version does not automatically change. If you want a
    // new version to be the default, you must call
    // [projects.models.versions.setDefault](/ml/reference/rest/v1beta1/projects.models.versions/setDefault).
    virtual ::grpc::Status CreateVersion(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::CreateVersionRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncCreateVersion(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::CreateVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncCreateVersionRaw(context, request, cq));
    }
    // Gets basic information about all the versions of a model.
    //
    // If you expect that a model has a lot of versions, or if you need to handle
    // only a limited number of results at a time, you can request that the list
    // be retrieved in batches (called pages):
    virtual ::grpc::Status ListVersions(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::ListVersionsRequest& request, ::google::cloud::ml::v1beta1::ListVersionsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::ml::v1beta1::ListVersionsResponse>> AsyncListVersions(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::ListVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::ml::v1beta1::ListVersionsResponse>>(AsyncListVersionsRaw(context, request, cq));
    }
    // Gets information about a model version.
    //
    // Models can have multiple versions. You can call
    // [projects.models.versions.list](/ml/reference/rest/v1beta1/projects.models.versions/list)
    // to get the same information that this method returns for all of the
    // versions of a model.
    virtual ::grpc::Status GetVersion(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::GetVersionRequest& request, ::google::cloud::ml::v1beta1::Version* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::ml::v1beta1::Version>> AsyncGetVersion(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::GetVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::ml::v1beta1::Version>>(AsyncGetVersionRaw(context, request, cq));
    }
    // Deletes a model version.
    //
    // Each model can have multiple versions deployed and in use at any given
    // time. Use this method to remove a single version.
    //
    // Note: You cannot delete the version that is set as the default version
    // of the model unless it is the only remaining version.
    virtual ::grpc::Status DeleteVersion(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::DeleteVersionRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncDeleteVersion(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::DeleteVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncDeleteVersionRaw(context, request, cq));
    }
    // Designates a version to be the default for the model.
    //
    // The default version is used for prediction requests made against the model
    // that don't specify a version.
    //
    // The first version to be created for a model is automatically set as the
    // default. You must make any subsequent changes to the default version
    // setting manually using this method.
    virtual ::grpc::Status SetDefaultVersion(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::SetDefaultVersionRequest& request, ::google::cloud::ml::v1beta1::Version* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::ml::v1beta1::Version>> AsyncSetDefaultVersion(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::SetDefaultVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::ml::v1beta1::Version>>(AsyncSetDefaultVersionRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::ml::v1beta1::Model>* AsyncCreateModelRaw(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::CreateModelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::ml::v1beta1::ListModelsResponse>* AsyncListModelsRaw(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::ListModelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::ml::v1beta1::Model>* AsyncGetModelRaw(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::GetModelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncDeleteModelRaw(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::DeleteModelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncCreateVersionRaw(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::CreateVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::ml::v1beta1::ListVersionsResponse>* AsyncListVersionsRaw(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::ListVersionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::ml::v1beta1::Version>* AsyncGetVersionRaw(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::GetVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncDeleteVersionRaw(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::DeleteVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::ml::v1beta1::Version>* AsyncSetDefaultVersionRaw(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::SetDefaultVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateModel(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::CreateModelRequest& request, ::google::cloud::ml::v1beta1::Model* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::ml::v1beta1::Model>> AsyncCreateModel(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::CreateModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::ml::v1beta1::Model>>(AsyncCreateModelRaw(context, request, cq));
    }
    ::grpc::Status ListModels(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::ListModelsRequest& request, ::google::cloud::ml::v1beta1::ListModelsResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::ml::v1beta1::ListModelsResponse>> AsyncListModels(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::ListModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::ml::v1beta1::ListModelsResponse>>(AsyncListModelsRaw(context, request, cq));
    }
    ::grpc::Status GetModel(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::GetModelRequest& request, ::google::cloud::ml::v1beta1::Model* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::ml::v1beta1::Model>> AsyncGetModel(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::GetModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::ml::v1beta1::Model>>(AsyncGetModelRaw(context, request, cq));
    }
    ::grpc::Status DeleteModel(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::DeleteModelRequest& request, ::google::longrunning::Operation* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncDeleteModel(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::DeleteModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncDeleteModelRaw(context, request, cq));
    }
    ::grpc::Status CreateVersion(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::CreateVersionRequest& request, ::google::longrunning::Operation* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncCreateVersion(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::CreateVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncCreateVersionRaw(context, request, cq));
    }
    ::grpc::Status ListVersions(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::ListVersionsRequest& request, ::google::cloud::ml::v1beta1::ListVersionsResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::ml::v1beta1::ListVersionsResponse>> AsyncListVersions(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::ListVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::ml::v1beta1::ListVersionsResponse>>(AsyncListVersionsRaw(context, request, cq));
    }
    ::grpc::Status GetVersion(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::GetVersionRequest& request, ::google::cloud::ml::v1beta1::Version* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::ml::v1beta1::Version>> AsyncGetVersion(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::GetVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::ml::v1beta1::Version>>(AsyncGetVersionRaw(context, request, cq));
    }
    ::grpc::Status DeleteVersion(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::DeleteVersionRequest& request, ::google::longrunning::Operation* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncDeleteVersion(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::DeleteVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncDeleteVersionRaw(context, request, cq));
    }
    ::grpc::Status SetDefaultVersion(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::SetDefaultVersionRequest& request, ::google::cloud::ml::v1beta1::Version* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::ml::v1beta1::Version>> AsyncSetDefaultVersion(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::SetDefaultVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::ml::v1beta1::Version>>(AsyncSetDefaultVersionRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::ml::v1beta1::Model>* AsyncCreateModelRaw(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::CreateModelRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::ml::v1beta1::ListModelsResponse>* AsyncListModelsRaw(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::ListModelsRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::ml::v1beta1::Model>* AsyncGetModelRaw(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::GetModelRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncDeleteModelRaw(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::DeleteModelRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncCreateVersionRaw(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::CreateVersionRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::ml::v1beta1::ListVersionsResponse>* AsyncListVersionsRaw(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::ListVersionsRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::ml::v1beta1::Version>* AsyncGetVersionRaw(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::GetVersionRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncDeleteVersionRaw(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::DeleteVersionRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::ml::v1beta1::Version>* AsyncSetDefaultVersionRaw(::grpc::ClientContext* context, const ::google::cloud::ml::v1beta1::SetDefaultVersionRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_CreateModel_;
    const ::grpc::RpcMethod rpcmethod_ListModels_;
    const ::grpc::RpcMethod rpcmethod_GetModel_;
    const ::grpc::RpcMethod rpcmethod_DeleteModel_;
    const ::grpc::RpcMethod rpcmethod_CreateVersion_;
    const ::grpc::RpcMethod rpcmethod_ListVersions_;
    const ::grpc::RpcMethod rpcmethod_GetVersion_;
    const ::grpc::RpcMethod rpcmethod_DeleteVersion_;
    const ::grpc::RpcMethod rpcmethod_SetDefaultVersion_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Creates a model which will later contain one or more versions.
    //
    // You must add at least one version before you can request predictions from
    // the model. Add versions by calling
    // [projects.models.versions.create](/ml/reference/rest/v1beta1/projects.models.versions/create).
    virtual ::grpc::Status CreateModel(::grpc::ServerContext* context, const ::google::cloud::ml::v1beta1::CreateModelRequest* request, ::google::cloud::ml::v1beta1::Model* response);
    // Lists the models in a project.
    //
    // Each project can contain multiple models, and each model can have multiple
    // versions.
    virtual ::grpc::Status ListModels(::grpc::ServerContext* context, const ::google::cloud::ml::v1beta1::ListModelsRequest* request, ::google::cloud::ml::v1beta1::ListModelsResponse* response);
    // Gets information about a model, including its name, the description (if
    // set), and the default version (if at least one version of the model has
    // been deployed).
    virtual ::grpc::Status GetModel(::grpc::ServerContext* context, const ::google::cloud::ml::v1beta1::GetModelRequest* request, ::google::cloud::ml::v1beta1::Model* response);
    // Deletes a model.
    //
    // You can only delete a model if there are no versions in it. You can delete
    // versions by calling
    // [projects.models.versions.delete](/ml/reference/rest/v1beta1/projects.models.versions/delete).
    virtual ::grpc::Status DeleteModel(::grpc::ServerContext* context, const ::google::cloud::ml::v1beta1::DeleteModelRequest* request, ::google::longrunning::Operation* response);
    // Creates a new version of a model from a trained TensorFlow model.
    //
    // If the version created in the cloud by this call is the first deployed
    // version of the specified model, it will be made the default version of the
    // model. When you add a version to a model that already has one or more
    // versions, the default version does not automatically change. If you want a
    // new version to be the default, you must call
    // [projects.models.versions.setDefault](/ml/reference/rest/v1beta1/projects.models.versions/setDefault).
    virtual ::grpc::Status CreateVersion(::grpc::ServerContext* context, const ::google::cloud::ml::v1beta1::CreateVersionRequest* request, ::google::longrunning::Operation* response);
    // Gets basic information about all the versions of a model.
    //
    // If you expect that a model has a lot of versions, or if you need to handle
    // only a limited number of results at a time, you can request that the list
    // be retrieved in batches (called pages):
    virtual ::grpc::Status ListVersions(::grpc::ServerContext* context, const ::google::cloud::ml::v1beta1::ListVersionsRequest* request, ::google::cloud::ml::v1beta1::ListVersionsResponse* response);
    // Gets information about a model version.
    //
    // Models can have multiple versions. You can call
    // [projects.models.versions.list](/ml/reference/rest/v1beta1/projects.models.versions/list)
    // to get the same information that this method returns for all of the
    // versions of a model.
    virtual ::grpc::Status GetVersion(::grpc::ServerContext* context, const ::google::cloud::ml::v1beta1::GetVersionRequest* request, ::google::cloud::ml::v1beta1::Version* response);
    // Deletes a model version.
    //
    // Each model can have multiple versions deployed and in use at any given
    // time. Use this method to remove a single version.
    //
    // Note: You cannot delete the version that is set as the default version
    // of the model unless it is the only remaining version.
    virtual ::grpc::Status DeleteVersion(::grpc::ServerContext* context, const ::google::cloud::ml::v1beta1::DeleteVersionRequest* request, ::google::longrunning::Operation* response);
    // Designates a version to be the default for the model.
    //
    // The default version is used for prediction requests made against the model
    // that don't specify a version.
    //
    // The first version to be created for a model is automatically set as the
    // default. You must make any subsequent changes to the default version
    // setting manually using this method.
    virtual ::grpc::Status SetDefaultVersion(::grpc::ServerContext* context, const ::google::cloud::ml::v1beta1::SetDefaultVersionRequest* request, ::google::cloud::ml::v1beta1::Version* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateModel() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateModel() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateModel(::grpc::ServerContext* context, const ::google::cloud::ml::v1beta1::CreateModelRequest* request, ::google::cloud::ml::v1beta1::Model* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateModel(::grpc::ServerContext* context, ::google::cloud::ml::v1beta1::CreateModelRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::ml::v1beta1::Model>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListModels() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListModels() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModels(::grpc::ServerContext* context, const ::google::cloud::ml::v1beta1::ListModelsRequest* request, ::google::cloud::ml::v1beta1::ListModelsResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListModels(::grpc::ServerContext* context, ::google::cloud::ml::v1beta1::ListModelsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::ml::v1beta1::ListModelsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetModel() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetModel() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModel(::grpc::ServerContext* context, const ::google::cloud::ml::v1beta1::GetModelRequest* request, ::google::cloud::ml::v1beta1::Model* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetModel(::grpc::ServerContext* context, ::google::cloud::ml::v1beta1::GetModelRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::ml::v1beta1::Model>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteModel() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteModel() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteModel(::grpc::ServerContext* context, const ::google::cloud::ml::v1beta1::DeleteModelRequest* request, ::google::longrunning::Operation* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteModel(::grpc::ServerContext* context, ::google::cloud::ml::v1beta1::DeleteModelRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateVersion() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_CreateVersion() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateVersion(::grpc::ServerContext* context, const ::google::cloud::ml::v1beta1::CreateVersionRequest* request, ::google::longrunning::Operation* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateVersion(::grpc::ServerContext* context, ::google::cloud::ml::v1beta1::CreateVersionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListVersions() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ListVersions() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListVersions(::grpc::ServerContext* context, const ::google::cloud::ml::v1beta1::ListVersionsRequest* request, ::google::cloud::ml::v1beta1::ListVersionsResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListVersions(::grpc::ServerContext* context, ::google::cloud::ml::v1beta1::ListVersionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::ml::v1beta1::ListVersionsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetVersion() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetVersion() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVersion(::grpc::ServerContext* context, const ::google::cloud::ml::v1beta1::GetVersionRequest* request, ::google::cloud::ml::v1beta1::Version* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVersion(::grpc::ServerContext* context, ::google::cloud::ml::v1beta1::GetVersionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::ml::v1beta1::Version>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteVersion() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_DeleteVersion() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteVersion(::grpc::ServerContext* context, const ::google::cloud::ml::v1beta1::DeleteVersionRequest* request, ::google::longrunning::Operation* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteVersion(::grpc::ServerContext* context, ::google::cloud::ml::v1beta1::DeleteVersionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetDefaultVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetDefaultVersion() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_SetDefaultVersion() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDefaultVersion(::grpc::ServerContext* context, const ::google::cloud::ml::v1beta1::SetDefaultVersionRequest* request, ::google::cloud::ml::v1beta1::Version* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDefaultVersion(::grpc::ServerContext* context, ::google::cloud::ml::v1beta1::SetDefaultVersionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::ml::v1beta1::Version>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateModel<WithAsyncMethod_ListModels<WithAsyncMethod_GetModel<WithAsyncMethod_DeleteModel<WithAsyncMethod_CreateVersion<WithAsyncMethod_ListVersions<WithAsyncMethod_GetVersion<WithAsyncMethod_DeleteVersion<WithAsyncMethod_SetDefaultVersion<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_CreateModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateModel() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateModel() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateModel(::grpc::ServerContext* context, const ::google::cloud::ml::v1beta1::CreateModelRequest* request, ::google::cloud::ml::v1beta1::Model* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListModels() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListModels() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModels(::grpc::ServerContext* context, const ::google::cloud::ml::v1beta1::ListModelsRequest* request, ::google::cloud::ml::v1beta1::ListModelsResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetModel() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetModel() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModel(::grpc::ServerContext* context, const ::google::cloud::ml::v1beta1::GetModelRequest* request, ::google::cloud::ml::v1beta1::Model* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteModel() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteModel() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteModel(::grpc::ServerContext* context, const ::google::cloud::ml::v1beta1::DeleteModelRequest* request, ::google::longrunning::Operation* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateVersion() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_CreateVersion() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateVersion(::grpc::ServerContext* context, const ::google::cloud::ml::v1beta1::CreateVersionRequest* request, ::google::longrunning::Operation* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListVersions() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ListVersions() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListVersions(::grpc::ServerContext* context, const ::google::cloud::ml::v1beta1::ListVersionsRequest* request, ::google::cloud::ml::v1beta1::ListVersionsResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetVersion() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetVersion() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVersion(::grpc::ServerContext* context, const ::google::cloud::ml::v1beta1::GetVersionRequest* request, ::google::cloud::ml::v1beta1::Version* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteVersion() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_DeleteVersion() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteVersion(::grpc::ServerContext* context, const ::google::cloud::ml::v1beta1::DeleteVersionRequest* request, ::google::longrunning::Operation* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetDefaultVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetDefaultVersion() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_SetDefaultVersion() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDefaultVersion(::grpc::ServerContext* context, const ::google::cloud::ml::v1beta1::SetDefaultVersionRequest* request, ::google::cloud::ml::v1beta1::Version* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

}  // namespace v1beta1
}  // namespace ml
}  // namespace cloud
}  // namespace google


#endif  // GRPC_google_2fcloud_2fml_2fv1beta1_2fmodel_5fservice_2eproto__INCLUDED
