// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/type/color.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/type/color.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace type {
class ColorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Color> {};
ColorDefaultTypeInternal _Color_default_instance_;

namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace


const ::google::protobuf::uint32* protobuf_Offsets_google_2ftype_2fcolor_2eproto() GOOGLE_ATTRIBUTE_COLD;
const ::google::protobuf::uint32* protobuf_Offsets_google_2ftype_2fcolor_2eproto() {
  static const ::google::protobuf::uint32 offsets[] = {
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, red_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, green_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, blue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, alpha_),
  };
  return offsets;
}

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Color)},
};

static const ::google::protobuf::internal::DefaultInstanceData file_default_instances[] = {
  {reinterpret_cast<const ::google::protobuf::Message*>(&_Color_default_instance_), NULL},
};

namespace {

void protobuf_AssignDescriptors() {
  protobuf_AddDesc_google_2ftype_2fcolor_2eproto();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/type/color.proto", schemas, file_default_instances, protobuf_Offsets_google_2ftype_2fcolor_2eproto(), factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void protobuf_ShutdownFile_google_2ftype_2fcolor_2eproto() {
  _Color_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void protobuf_InitDefaults_google_2ftype_2fcolor_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2fwrappers_2eproto();
  ::google::protobuf::internal::InitProtobufDefaults();
  _Color_default_instance_.DefaultConstruct();
  _Color_default_instance_.get_mutable()->alpha_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
}

void protobuf_InitDefaults_google_2ftype_2fcolor_2eproto() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_InitDefaults_google_2ftype_2fcolor_2eproto_impl);
}
void protobuf_AddDesc_google_2ftype_2fcolor_2eproto_impl() {
  protobuf_InitDefaults_google_2ftype_2fcolor_2eproto();
  static const char descriptor[] = {
      "\n\027google/type/color.proto\022\013google.type\032\036"
      "google/protobuf/wrappers.proto\"]\n\005Color\022"
      "\013\n\003red\030\001 \001(\002\022\r\n\005green\030\002 \001(\002\022\014\n\004blue\030\003 \001("
      "\002\022*\n\005alpha\030\004 \001(\0132\033.google.protobuf.Float"
      "ValueB%\n\017com.google.typeB\nColorProtoP\001\242\002"
      "\003GTPb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 212);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/type/color.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fwrappers_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_google_2ftype_2fcolor_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_google_2ftype_2fcolor_2eproto_once_);
void protobuf_AddDesc_google_2ftype_2fcolor_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_google_2ftype_2fcolor_2eproto_once_,
                 &protobuf_AddDesc_google_2ftype_2fcolor_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_google_2ftype_2fcolor_2eproto {
  StaticDescriptorInitializer_google_2ftype_2fcolor_2eproto() {
    protobuf_AddDesc_google_2ftype_2fcolor_2eproto();
  }
} static_descriptor_initializer_google_2ftype_2fcolor_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Color::kRedFieldNumber;
const int Color::kGreenFieldNumber;
const int Color::kBlueFieldNumber;
const int Color::kAlphaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Color::Color()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_google_2ftype_2fcolor_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.type.Color)
}
Color::Color(const Color& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_alpha()) {
    alpha_ = new ::google::protobuf::FloatValue(*from.alpha_);
  } else {
    alpha_ = NULL;
  }
  ::memcpy(&red_, &from.red_,
    reinterpret_cast<char*>(&blue_) -
    reinterpret_cast<char*>(&red_) + sizeof(blue_));
  // @@protoc_insertion_point(copy_constructor:google.type.Color)
}

void Color::SharedCtor() {
  ::memset(&alpha_, 0, reinterpret_cast<char*>(&blue_) -
    reinterpret_cast<char*>(&alpha_) + sizeof(blue_));
  _cached_size_ = 0;
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:google.type.Color)
  SharedDtor();
}

void Color::SharedDtor() {
  if (this != internal_default_instance()) {
    delete alpha_;
  }
}

void Color::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Color::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[0].descriptor;
}

const Color& Color::default_instance() {
  protobuf_InitDefaults_google_2ftype_2fcolor_2eproto();
  return *internal_default_instance();
}

Color* Color::New(::google::protobuf::Arena* arena) const {
  Color* n = new Color;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:google.type.Color)
  if (GetArenaNoVirtual() == NULL && alpha_ != NULL) {
    delete alpha_;
  }
  alpha_ = NULL;
  ::memset(&red_, 0, reinterpret_cast<char*>(&blue_) -
    reinterpret_cast<char*>(&red_) + sizeof(blue_));
}

bool Color::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.type.Color)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float red = 1;
      case 1: {
        if (tag == 13u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &red_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float green = 2;
      case 2: {
        if (tag == 21u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &green_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float blue = 3;
      case 3: {
        if (tag == 29u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue alpha = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alpha()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.type.Color)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.type.Color)
  return false;
#undef DO_
}

void Color::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.type.Color)
  // float red = 1;
  if (this->red() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->red(), output);
  }

  // float green = 2;
  if (this->green() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->green(), output);
  }

  // float blue = 3;
  if (this->blue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->blue(), output);
  }

  // .google.protobuf.FloatValue alpha = 4;
  if (this->has_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->alpha_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.type.Color)
}

::google::protobuf::uint8* Color::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.type.Color)
  // float red = 1;
  if (this->red() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->red(), target);
  }

  // float green = 2;
  if (this->green() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->green(), target);
  }

  // float blue = 3;
  if (this->blue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->blue(), target);
  }

  // .google.protobuf.FloatValue alpha = 4;
  if (this->has_alpha()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->alpha_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.type.Color)
  return target;
}

size_t Color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.type.Color)
  size_t total_size = 0;

  // .google.protobuf.FloatValue alpha = 4;
  if (this->has_alpha()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->alpha_);
  }

  // float red = 1;
  if (this->red() != 0) {
    total_size += 1 + 4;
  }

  // float green = 2;
  if (this->green() != 0) {
    total_size += 1 + 4;
  }

  // float blue = 3;
  if (this->blue() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Color::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.type.Color)
  GOOGLE_DCHECK_NE(&from, this);
  const Color* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Color>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.type.Color)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.type.Color)
    MergeFrom(*source);
  }
}

void Color::MergeFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.type.Color)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_alpha()) {
    mutable_alpha()->::google::protobuf::FloatValue::MergeFrom(from.alpha());
  }
  if (from.red() != 0) {
    set_red(from.red());
  }
  if (from.green() != 0) {
    set_green(from.green());
  }
  if (from.blue() != 0) {
    set_blue(from.blue());
  }
}

void Color::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.type.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.type.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {
  return true;
}

void Color::Swap(Color* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Color::InternalSwap(Color* other) {
  std::swap(alpha_, other->alpha_);
  std::swap(red_, other->red_);
  std::swap(green_, other->green_);
  std::swap(blue_, other->blue_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Color::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Color

// float red = 1;
void Color::clear_red() {
  red_ = 0;
}
float Color::red() const {
  // @@protoc_insertion_point(field_get:google.type.Color.red)
  return red_;
}
void Color::set_red(float value) {
  
  red_ = value;
  // @@protoc_insertion_point(field_set:google.type.Color.red)
}

// float green = 2;
void Color::clear_green() {
  green_ = 0;
}
float Color::green() const {
  // @@protoc_insertion_point(field_get:google.type.Color.green)
  return green_;
}
void Color::set_green(float value) {
  
  green_ = value;
  // @@protoc_insertion_point(field_set:google.type.Color.green)
}

// float blue = 3;
void Color::clear_blue() {
  blue_ = 0;
}
float Color::blue() const {
  // @@protoc_insertion_point(field_get:google.type.Color.blue)
  return blue_;
}
void Color::set_blue(float value) {
  
  blue_ = value;
  // @@protoc_insertion_point(field_set:google.type.Color.blue)
}

// .google.protobuf.FloatValue alpha = 4;
bool Color::has_alpha() const {
  return this != internal_default_instance() && alpha_ != NULL;
}
void Color::clear_alpha() {
  if (GetArenaNoVirtual() == NULL && alpha_ != NULL) delete alpha_;
  alpha_ = NULL;
}
const ::google::protobuf::FloatValue& Color::alpha() const {
  // @@protoc_insertion_point(field_get:google.type.Color.alpha)
  return alpha_ != NULL ? *alpha_
                         : *::google::protobuf::FloatValue::internal_default_instance();
}
::google::protobuf::FloatValue* Color::mutable_alpha() {
  
  if (alpha_ == NULL) {
    alpha_ = new ::google::protobuf::FloatValue;
  }
  // @@protoc_insertion_point(field_mutable:google.type.Color.alpha)
  return alpha_;
}
::google::protobuf::FloatValue* Color::release_alpha() {
  // @@protoc_insertion_point(field_release:google.type.Color.alpha)
  
  ::google::protobuf::FloatValue* temp = alpha_;
  alpha_ = NULL;
  return temp;
}
void Color::set_allocated_alpha(::google::protobuf::FloatValue* alpha) {
  delete alpha_;
  if (alpha != NULL && alpha->GetArena() != NULL) {
    ::google::protobuf::FloatValue* new_alpha = new ::google::protobuf::FloatValue;
    new_alpha->CopyFrom(*alpha);
    alpha = new_alpha;
  }
  alpha_ = alpha;
  if (alpha) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.type.Color.alpha)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace type
}  // namespace google

// @@protoc_insertion_point(global_scope)
