// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/language/v1/language_service.proto

#ifndef PROTOBUF_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto__INCLUDED
#define PROTOBUF_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)

namespace google {
namespace cloud {
namespace language {
namespace v1 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
void protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
void protobuf_AssignDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
void protobuf_ShutdownFile_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();

class AnalyzeEntitiesRequest;
class AnalyzeEntitiesResponse;
class AnalyzeSentimentRequest;
class AnalyzeSentimentResponse;
class AnalyzeSyntaxRequest;
class AnalyzeSyntaxResponse;
class AnnotateTextRequest;
class AnnotateTextRequest_Features;
class AnnotateTextResponse;
class DependencyEdge;
class Document;
class Entity;
class EntityMention;
class PartOfSpeech;
class Sentence;
class Sentiment;
class TextSpan;
class Token;

enum Document_Type {
  Document_Type_TYPE_UNSPECIFIED = 0,
  Document_Type_PLAIN_TEXT = 1,
  Document_Type_HTML = 2,
  Document_Type_Document_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Document_Type_Document_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Document_Type_IsValid(int value);
const Document_Type Document_Type_Type_MIN = Document_Type_TYPE_UNSPECIFIED;
const Document_Type Document_Type_Type_MAX = Document_Type_HTML;
const int Document_Type_Type_ARRAYSIZE = Document_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Document_Type_descriptor();
inline const ::std::string& Document_Type_Name(Document_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Document_Type_descriptor(), value);
}
inline bool Document_Type_Parse(
    const ::std::string& name, Document_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Document_Type>(
    Document_Type_descriptor(), name, value);
}
enum Entity_Type {
  Entity_Type_UNKNOWN = 0,
  Entity_Type_PERSON = 1,
  Entity_Type_LOCATION = 2,
  Entity_Type_ORGANIZATION = 3,
  Entity_Type_EVENT = 4,
  Entity_Type_WORK_OF_ART = 5,
  Entity_Type_CONSUMER_GOOD = 6,
  Entity_Type_OTHER = 7,
  Entity_Type_Entity_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Entity_Type_Entity_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Entity_Type_IsValid(int value);
const Entity_Type Entity_Type_Type_MIN = Entity_Type_UNKNOWN;
const Entity_Type Entity_Type_Type_MAX = Entity_Type_OTHER;
const int Entity_Type_Type_ARRAYSIZE = Entity_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Entity_Type_descriptor();
inline const ::std::string& Entity_Type_Name(Entity_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Entity_Type_descriptor(), value);
}
inline bool Entity_Type_Parse(
    const ::std::string& name, Entity_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Entity_Type>(
    Entity_Type_descriptor(), name, value);
}
enum PartOfSpeech_Tag {
  PartOfSpeech_Tag_UNKNOWN = 0,
  PartOfSpeech_Tag_ADJ = 1,
  PartOfSpeech_Tag_ADP = 2,
  PartOfSpeech_Tag_ADV = 3,
  PartOfSpeech_Tag_CONJ = 4,
  PartOfSpeech_Tag_DET = 5,
  PartOfSpeech_Tag_NOUN = 6,
  PartOfSpeech_Tag_NUM = 7,
  PartOfSpeech_Tag_PRON = 8,
  PartOfSpeech_Tag_PRT = 9,
  PartOfSpeech_Tag_PUNCT = 10,
  PartOfSpeech_Tag_VERB = 11,
  PartOfSpeech_Tag_X = 12,
  PartOfSpeech_Tag_AFFIX = 13,
  PartOfSpeech_Tag_PartOfSpeech_Tag_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PartOfSpeech_Tag_PartOfSpeech_Tag_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PartOfSpeech_Tag_IsValid(int value);
const PartOfSpeech_Tag PartOfSpeech_Tag_Tag_MIN = PartOfSpeech_Tag_UNKNOWN;
const PartOfSpeech_Tag PartOfSpeech_Tag_Tag_MAX = PartOfSpeech_Tag_AFFIX;
const int PartOfSpeech_Tag_Tag_ARRAYSIZE = PartOfSpeech_Tag_Tag_MAX + 1;

const ::google::protobuf::EnumDescriptor* PartOfSpeech_Tag_descriptor();
inline const ::std::string& PartOfSpeech_Tag_Name(PartOfSpeech_Tag value) {
  return ::google::protobuf::internal::NameOfEnum(
    PartOfSpeech_Tag_descriptor(), value);
}
inline bool PartOfSpeech_Tag_Parse(
    const ::std::string& name, PartOfSpeech_Tag* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PartOfSpeech_Tag>(
    PartOfSpeech_Tag_descriptor(), name, value);
}
enum PartOfSpeech_Aspect {
  PartOfSpeech_Aspect_ASPECT_UNKNOWN = 0,
  PartOfSpeech_Aspect_PERFECTIVE = 1,
  PartOfSpeech_Aspect_IMPERFECTIVE = 2,
  PartOfSpeech_Aspect_PROGRESSIVE = 3,
  PartOfSpeech_Aspect_PartOfSpeech_Aspect_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PartOfSpeech_Aspect_PartOfSpeech_Aspect_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PartOfSpeech_Aspect_IsValid(int value);
const PartOfSpeech_Aspect PartOfSpeech_Aspect_Aspect_MIN = PartOfSpeech_Aspect_ASPECT_UNKNOWN;
const PartOfSpeech_Aspect PartOfSpeech_Aspect_Aspect_MAX = PartOfSpeech_Aspect_PROGRESSIVE;
const int PartOfSpeech_Aspect_Aspect_ARRAYSIZE = PartOfSpeech_Aspect_Aspect_MAX + 1;

const ::google::protobuf::EnumDescriptor* PartOfSpeech_Aspect_descriptor();
inline const ::std::string& PartOfSpeech_Aspect_Name(PartOfSpeech_Aspect value) {
  return ::google::protobuf::internal::NameOfEnum(
    PartOfSpeech_Aspect_descriptor(), value);
}
inline bool PartOfSpeech_Aspect_Parse(
    const ::std::string& name, PartOfSpeech_Aspect* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PartOfSpeech_Aspect>(
    PartOfSpeech_Aspect_descriptor(), name, value);
}
enum PartOfSpeech_Case {
  PartOfSpeech_Case_CASE_UNKNOWN = 0,
  PartOfSpeech_Case_ACCUSATIVE = 1,
  PartOfSpeech_Case_ADVERBIAL = 2,
  PartOfSpeech_Case_COMPLEMENTIVE = 3,
  PartOfSpeech_Case_DATIVE = 4,
  PartOfSpeech_Case_GENITIVE = 5,
  PartOfSpeech_Case_INSTRUMENTAL = 6,
  PartOfSpeech_Case_LOCATIVE = 7,
  PartOfSpeech_Case_NOMINATIVE = 8,
  PartOfSpeech_Case_OBLIQUE = 9,
  PartOfSpeech_Case_PARTITIVE = 10,
  PartOfSpeech_Case_PREPOSITIONAL = 11,
  PartOfSpeech_Case_REFLEXIVE_CASE = 12,
  PartOfSpeech_Case_RELATIVE_CASE = 13,
  PartOfSpeech_Case_VOCATIVE = 14,
  PartOfSpeech_Case_PartOfSpeech_Case_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PartOfSpeech_Case_PartOfSpeech_Case_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PartOfSpeech_Case_IsValid(int value);
const PartOfSpeech_Case PartOfSpeech_Case_Case_MIN = PartOfSpeech_Case_CASE_UNKNOWN;
const PartOfSpeech_Case PartOfSpeech_Case_Case_MAX = PartOfSpeech_Case_VOCATIVE;
const int PartOfSpeech_Case_Case_ARRAYSIZE = PartOfSpeech_Case_Case_MAX + 1;

const ::google::protobuf::EnumDescriptor* PartOfSpeech_Case_descriptor();
inline const ::std::string& PartOfSpeech_Case_Name(PartOfSpeech_Case value) {
  return ::google::protobuf::internal::NameOfEnum(
    PartOfSpeech_Case_descriptor(), value);
}
inline bool PartOfSpeech_Case_Parse(
    const ::std::string& name, PartOfSpeech_Case* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PartOfSpeech_Case>(
    PartOfSpeech_Case_descriptor(), name, value);
}
enum PartOfSpeech_Form {
  PartOfSpeech_Form_FORM_UNKNOWN = 0,
  PartOfSpeech_Form_ADNOMIAL = 1,
  PartOfSpeech_Form_AUXILIARY = 2,
  PartOfSpeech_Form_COMPLEMENTIZER = 3,
  PartOfSpeech_Form_FINAL_ENDING = 4,
  PartOfSpeech_Form_GERUND = 5,
  PartOfSpeech_Form_REALIS = 6,
  PartOfSpeech_Form_IRREALIS = 7,
  PartOfSpeech_Form_SHORT = 8,
  PartOfSpeech_Form_LONG = 9,
  PartOfSpeech_Form_ORDER = 10,
  PartOfSpeech_Form_SPECIFIC = 11,
  PartOfSpeech_Form_PartOfSpeech_Form_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PartOfSpeech_Form_PartOfSpeech_Form_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PartOfSpeech_Form_IsValid(int value);
const PartOfSpeech_Form PartOfSpeech_Form_Form_MIN = PartOfSpeech_Form_FORM_UNKNOWN;
const PartOfSpeech_Form PartOfSpeech_Form_Form_MAX = PartOfSpeech_Form_SPECIFIC;
const int PartOfSpeech_Form_Form_ARRAYSIZE = PartOfSpeech_Form_Form_MAX + 1;

const ::google::protobuf::EnumDescriptor* PartOfSpeech_Form_descriptor();
inline const ::std::string& PartOfSpeech_Form_Name(PartOfSpeech_Form value) {
  return ::google::protobuf::internal::NameOfEnum(
    PartOfSpeech_Form_descriptor(), value);
}
inline bool PartOfSpeech_Form_Parse(
    const ::std::string& name, PartOfSpeech_Form* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PartOfSpeech_Form>(
    PartOfSpeech_Form_descriptor(), name, value);
}
enum PartOfSpeech_Gender {
  PartOfSpeech_Gender_GENDER_UNKNOWN = 0,
  PartOfSpeech_Gender_FEMININE = 1,
  PartOfSpeech_Gender_MASCULINE = 2,
  PartOfSpeech_Gender_NEUTER = 3,
  PartOfSpeech_Gender_PartOfSpeech_Gender_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PartOfSpeech_Gender_PartOfSpeech_Gender_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PartOfSpeech_Gender_IsValid(int value);
const PartOfSpeech_Gender PartOfSpeech_Gender_Gender_MIN = PartOfSpeech_Gender_GENDER_UNKNOWN;
const PartOfSpeech_Gender PartOfSpeech_Gender_Gender_MAX = PartOfSpeech_Gender_NEUTER;
const int PartOfSpeech_Gender_Gender_ARRAYSIZE = PartOfSpeech_Gender_Gender_MAX + 1;

const ::google::protobuf::EnumDescriptor* PartOfSpeech_Gender_descriptor();
inline const ::std::string& PartOfSpeech_Gender_Name(PartOfSpeech_Gender value) {
  return ::google::protobuf::internal::NameOfEnum(
    PartOfSpeech_Gender_descriptor(), value);
}
inline bool PartOfSpeech_Gender_Parse(
    const ::std::string& name, PartOfSpeech_Gender* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PartOfSpeech_Gender>(
    PartOfSpeech_Gender_descriptor(), name, value);
}
enum PartOfSpeech_Mood {
  PartOfSpeech_Mood_MOOD_UNKNOWN = 0,
  PartOfSpeech_Mood_CONDITIONAL_MOOD = 1,
  PartOfSpeech_Mood_IMPERATIVE = 2,
  PartOfSpeech_Mood_INDICATIVE = 3,
  PartOfSpeech_Mood_INTERROGATIVE = 4,
  PartOfSpeech_Mood_JUSSIVE = 5,
  PartOfSpeech_Mood_SUBJUNCTIVE = 6,
  PartOfSpeech_Mood_PartOfSpeech_Mood_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PartOfSpeech_Mood_PartOfSpeech_Mood_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PartOfSpeech_Mood_IsValid(int value);
const PartOfSpeech_Mood PartOfSpeech_Mood_Mood_MIN = PartOfSpeech_Mood_MOOD_UNKNOWN;
const PartOfSpeech_Mood PartOfSpeech_Mood_Mood_MAX = PartOfSpeech_Mood_SUBJUNCTIVE;
const int PartOfSpeech_Mood_Mood_ARRAYSIZE = PartOfSpeech_Mood_Mood_MAX + 1;

const ::google::protobuf::EnumDescriptor* PartOfSpeech_Mood_descriptor();
inline const ::std::string& PartOfSpeech_Mood_Name(PartOfSpeech_Mood value) {
  return ::google::protobuf::internal::NameOfEnum(
    PartOfSpeech_Mood_descriptor(), value);
}
inline bool PartOfSpeech_Mood_Parse(
    const ::std::string& name, PartOfSpeech_Mood* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PartOfSpeech_Mood>(
    PartOfSpeech_Mood_descriptor(), name, value);
}
enum PartOfSpeech_Number {
  PartOfSpeech_Number_NUMBER_UNKNOWN = 0,
  PartOfSpeech_Number_SINGULAR = 1,
  PartOfSpeech_Number_PLURAL = 2,
  PartOfSpeech_Number_DUAL = 3,
  PartOfSpeech_Number_PartOfSpeech_Number_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PartOfSpeech_Number_PartOfSpeech_Number_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PartOfSpeech_Number_IsValid(int value);
const PartOfSpeech_Number PartOfSpeech_Number_Number_MIN = PartOfSpeech_Number_NUMBER_UNKNOWN;
const PartOfSpeech_Number PartOfSpeech_Number_Number_MAX = PartOfSpeech_Number_DUAL;
const int PartOfSpeech_Number_Number_ARRAYSIZE = PartOfSpeech_Number_Number_MAX + 1;

const ::google::protobuf::EnumDescriptor* PartOfSpeech_Number_descriptor();
inline const ::std::string& PartOfSpeech_Number_Name(PartOfSpeech_Number value) {
  return ::google::protobuf::internal::NameOfEnum(
    PartOfSpeech_Number_descriptor(), value);
}
inline bool PartOfSpeech_Number_Parse(
    const ::std::string& name, PartOfSpeech_Number* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PartOfSpeech_Number>(
    PartOfSpeech_Number_descriptor(), name, value);
}
enum PartOfSpeech_Person {
  PartOfSpeech_Person_PERSON_UNKNOWN = 0,
  PartOfSpeech_Person_FIRST = 1,
  PartOfSpeech_Person_SECOND = 2,
  PartOfSpeech_Person_THIRD = 3,
  PartOfSpeech_Person_REFLEXIVE_PERSON = 4,
  PartOfSpeech_Person_PartOfSpeech_Person_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PartOfSpeech_Person_PartOfSpeech_Person_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PartOfSpeech_Person_IsValid(int value);
const PartOfSpeech_Person PartOfSpeech_Person_Person_MIN = PartOfSpeech_Person_PERSON_UNKNOWN;
const PartOfSpeech_Person PartOfSpeech_Person_Person_MAX = PartOfSpeech_Person_REFLEXIVE_PERSON;
const int PartOfSpeech_Person_Person_ARRAYSIZE = PartOfSpeech_Person_Person_MAX + 1;

const ::google::protobuf::EnumDescriptor* PartOfSpeech_Person_descriptor();
inline const ::std::string& PartOfSpeech_Person_Name(PartOfSpeech_Person value) {
  return ::google::protobuf::internal::NameOfEnum(
    PartOfSpeech_Person_descriptor(), value);
}
inline bool PartOfSpeech_Person_Parse(
    const ::std::string& name, PartOfSpeech_Person* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PartOfSpeech_Person>(
    PartOfSpeech_Person_descriptor(), name, value);
}
enum PartOfSpeech_Proper {
  PartOfSpeech_Proper_PROPER_UNKNOWN = 0,
  PartOfSpeech_Proper_PROPER = 1,
  PartOfSpeech_Proper_NOT_PROPER = 2,
  PartOfSpeech_Proper_PartOfSpeech_Proper_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PartOfSpeech_Proper_PartOfSpeech_Proper_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PartOfSpeech_Proper_IsValid(int value);
const PartOfSpeech_Proper PartOfSpeech_Proper_Proper_MIN = PartOfSpeech_Proper_PROPER_UNKNOWN;
const PartOfSpeech_Proper PartOfSpeech_Proper_Proper_MAX = PartOfSpeech_Proper_NOT_PROPER;
const int PartOfSpeech_Proper_Proper_ARRAYSIZE = PartOfSpeech_Proper_Proper_MAX + 1;

const ::google::protobuf::EnumDescriptor* PartOfSpeech_Proper_descriptor();
inline const ::std::string& PartOfSpeech_Proper_Name(PartOfSpeech_Proper value) {
  return ::google::protobuf::internal::NameOfEnum(
    PartOfSpeech_Proper_descriptor(), value);
}
inline bool PartOfSpeech_Proper_Parse(
    const ::std::string& name, PartOfSpeech_Proper* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PartOfSpeech_Proper>(
    PartOfSpeech_Proper_descriptor(), name, value);
}
enum PartOfSpeech_Reciprocity {
  PartOfSpeech_Reciprocity_RECIPROCITY_UNKNOWN = 0,
  PartOfSpeech_Reciprocity_RECIPROCAL = 1,
  PartOfSpeech_Reciprocity_NON_RECIPROCAL = 2,
  PartOfSpeech_Reciprocity_PartOfSpeech_Reciprocity_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PartOfSpeech_Reciprocity_PartOfSpeech_Reciprocity_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PartOfSpeech_Reciprocity_IsValid(int value);
const PartOfSpeech_Reciprocity PartOfSpeech_Reciprocity_Reciprocity_MIN = PartOfSpeech_Reciprocity_RECIPROCITY_UNKNOWN;
const PartOfSpeech_Reciprocity PartOfSpeech_Reciprocity_Reciprocity_MAX = PartOfSpeech_Reciprocity_NON_RECIPROCAL;
const int PartOfSpeech_Reciprocity_Reciprocity_ARRAYSIZE = PartOfSpeech_Reciprocity_Reciprocity_MAX + 1;

const ::google::protobuf::EnumDescriptor* PartOfSpeech_Reciprocity_descriptor();
inline const ::std::string& PartOfSpeech_Reciprocity_Name(PartOfSpeech_Reciprocity value) {
  return ::google::protobuf::internal::NameOfEnum(
    PartOfSpeech_Reciprocity_descriptor(), value);
}
inline bool PartOfSpeech_Reciprocity_Parse(
    const ::std::string& name, PartOfSpeech_Reciprocity* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PartOfSpeech_Reciprocity>(
    PartOfSpeech_Reciprocity_descriptor(), name, value);
}
enum PartOfSpeech_Tense {
  PartOfSpeech_Tense_TENSE_UNKNOWN = 0,
  PartOfSpeech_Tense_CONDITIONAL_TENSE = 1,
  PartOfSpeech_Tense_FUTURE = 2,
  PartOfSpeech_Tense_PAST = 3,
  PartOfSpeech_Tense_PRESENT = 4,
  PartOfSpeech_Tense_IMPERFECT = 5,
  PartOfSpeech_Tense_PLUPERFECT = 6,
  PartOfSpeech_Tense_PartOfSpeech_Tense_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PartOfSpeech_Tense_PartOfSpeech_Tense_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PartOfSpeech_Tense_IsValid(int value);
const PartOfSpeech_Tense PartOfSpeech_Tense_Tense_MIN = PartOfSpeech_Tense_TENSE_UNKNOWN;
const PartOfSpeech_Tense PartOfSpeech_Tense_Tense_MAX = PartOfSpeech_Tense_PLUPERFECT;
const int PartOfSpeech_Tense_Tense_ARRAYSIZE = PartOfSpeech_Tense_Tense_MAX + 1;

const ::google::protobuf::EnumDescriptor* PartOfSpeech_Tense_descriptor();
inline const ::std::string& PartOfSpeech_Tense_Name(PartOfSpeech_Tense value) {
  return ::google::protobuf::internal::NameOfEnum(
    PartOfSpeech_Tense_descriptor(), value);
}
inline bool PartOfSpeech_Tense_Parse(
    const ::std::string& name, PartOfSpeech_Tense* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PartOfSpeech_Tense>(
    PartOfSpeech_Tense_descriptor(), name, value);
}
enum PartOfSpeech_Voice {
  PartOfSpeech_Voice_VOICE_UNKNOWN = 0,
  PartOfSpeech_Voice_ACTIVE = 1,
  PartOfSpeech_Voice_CAUSATIVE = 2,
  PartOfSpeech_Voice_PASSIVE = 3,
  PartOfSpeech_Voice_PartOfSpeech_Voice_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PartOfSpeech_Voice_PartOfSpeech_Voice_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PartOfSpeech_Voice_IsValid(int value);
const PartOfSpeech_Voice PartOfSpeech_Voice_Voice_MIN = PartOfSpeech_Voice_VOICE_UNKNOWN;
const PartOfSpeech_Voice PartOfSpeech_Voice_Voice_MAX = PartOfSpeech_Voice_PASSIVE;
const int PartOfSpeech_Voice_Voice_ARRAYSIZE = PartOfSpeech_Voice_Voice_MAX + 1;

const ::google::protobuf::EnumDescriptor* PartOfSpeech_Voice_descriptor();
inline const ::std::string& PartOfSpeech_Voice_Name(PartOfSpeech_Voice value) {
  return ::google::protobuf::internal::NameOfEnum(
    PartOfSpeech_Voice_descriptor(), value);
}
inline bool PartOfSpeech_Voice_Parse(
    const ::std::string& name, PartOfSpeech_Voice* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PartOfSpeech_Voice>(
    PartOfSpeech_Voice_descriptor(), name, value);
}
enum DependencyEdge_Label {
  DependencyEdge_Label_UNKNOWN = 0,
  DependencyEdge_Label_ABBREV = 1,
  DependencyEdge_Label_ACOMP = 2,
  DependencyEdge_Label_ADVCL = 3,
  DependencyEdge_Label_ADVMOD = 4,
  DependencyEdge_Label_AMOD = 5,
  DependencyEdge_Label_APPOS = 6,
  DependencyEdge_Label_ATTR = 7,
  DependencyEdge_Label_AUX = 8,
  DependencyEdge_Label_AUXPASS = 9,
  DependencyEdge_Label_CC = 10,
  DependencyEdge_Label_CCOMP = 11,
  DependencyEdge_Label_CONJ = 12,
  DependencyEdge_Label_CSUBJ = 13,
  DependencyEdge_Label_CSUBJPASS = 14,
  DependencyEdge_Label_DEP = 15,
  DependencyEdge_Label_DET = 16,
  DependencyEdge_Label_DISCOURSE = 17,
  DependencyEdge_Label_DOBJ = 18,
  DependencyEdge_Label_EXPL = 19,
  DependencyEdge_Label_GOESWITH = 20,
  DependencyEdge_Label_IOBJ = 21,
  DependencyEdge_Label_MARK = 22,
  DependencyEdge_Label_MWE = 23,
  DependencyEdge_Label_MWV = 24,
  DependencyEdge_Label_NEG = 25,
  DependencyEdge_Label_NN = 26,
  DependencyEdge_Label_NPADVMOD = 27,
  DependencyEdge_Label_NSUBJ = 28,
  DependencyEdge_Label_NSUBJPASS = 29,
  DependencyEdge_Label_NUM = 30,
  DependencyEdge_Label_NUMBER = 31,
  DependencyEdge_Label_P = 32,
  DependencyEdge_Label_PARATAXIS = 33,
  DependencyEdge_Label_PARTMOD = 34,
  DependencyEdge_Label_PCOMP = 35,
  DependencyEdge_Label_POBJ = 36,
  DependencyEdge_Label_POSS = 37,
  DependencyEdge_Label_POSTNEG = 38,
  DependencyEdge_Label_PRECOMP = 39,
  DependencyEdge_Label_PRECONJ = 40,
  DependencyEdge_Label_PREDET = 41,
  DependencyEdge_Label_PREF = 42,
  DependencyEdge_Label_PREP = 43,
  DependencyEdge_Label_PRONL = 44,
  DependencyEdge_Label_PRT = 45,
  DependencyEdge_Label_PS = 46,
  DependencyEdge_Label_QUANTMOD = 47,
  DependencyEdge_Label_RCMOD = 48,
  DependencyEdge_Label_RCMODREL = 49,
  DependencyEdge_Label_RDROP = 50,
  DependencyEdge_Label_REF = 51,
  DependencyEdge_Label_REMNANT = 52,
  DependencyEdge_Label_REPARANDUM = 53,
  DependencyEdge_Label_ROOT = 54,
  DependencyEdge_Label_SNUM = 55,
  DependencyEdge_Label_SUFF = 56,
  DependencyEdge_Label_TMOD = 57,
  DependencyEdge_Label_TOPIC = 58,
  DependencyEdge_Label_VMOD = 59,
  DependencyEdge_Label_VOCATIVE = 60,
  DependencyEdge_Label_XCOMP = 61,
  DependencyEdge_Label_SUFFIX = 62,
  DependencyEdge_Label_TITLE = 63,
  DependencyEdge_Label_ADVPHMOD = 64,
  DependencyEdge_Label_AUXCAUS = 65,
  DependencyEdge_Label_AUXVV = 66,
  DependencyEdge_Label_DTMOD = 67,
  DependencyEdge_Label_FOREIGN = 68,
  DependencyEdge_Label_KW = 69,
  DependencyEdge_Label_LIST = 70,
  DependencyEdge_Label_NOMC = 71,
  DependencyEdge_Label_NOMCSUBJ = 72,
  DependencyEdge_Label_NOMCSUBJPASS = 73,
  DependencyEdge_Label_NUMC = 74,
  DependencyEdge_Label_COP = 75,
  DependencyEdge_Label_DISLOCATED = 76,
  DependencyEdge_Label_DependencyEdge_Label_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DependencyEdge_Label_DependencyEdge_Label_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DependencyEdge_Label_IsValid(int value);
const DependencyEdge_Label DependencyEdge_Label_Label_MIN = DependencyEdge_Label_UNKNOWN;
const DependencyEdge_Label DependencyEdge_Label_Label_MAX = DependencyEdge_Label_DISLOCATED;
const int DependencyEdge_Label_Label_ARRAYSIZE = DependencyEdge_Label_Label_MAX + 1;

const ::google::protobuf::EnumDescriptor* DependencyEdge_Label_descriptor();
inline const ::std::string& DependencyEdge_Label_Name(DependencyEdge_Label value) {
  return ::google::protobuf::internal::NameOfEnum(
    DependencyEdge_Label_descriptor(), value);
}
inline bool DependencyEdge_Label_Parse(
    const ::std::string& name, DependencyEdge_Label* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DependencyEdge_Label>(
    DependencyEdge_Label_descriptor(), name, value);
}
enum EntityMention_Type {
  EntityMention_Type_TYPE_UNKNOWN = 0,
  EntityMention_Type_PROPER = 1,
  EntityMention_Type_COMMON = 2,
  EntityMention_Type_EntityMention_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EntityMention_Type_EntityMention_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EntityMention_Type_IsValid(int value);
const EntityMention_Type EntityMention_Type_Type_MIN = EntityMention_Type_TYPE_UNKNOWN;
const EntityMention_Type EntityMention_Type_Type_MAX = EntityMention_Type_COMMON;
const int EntityMention_Type_Type_ARRAYSIZE = EntityMention_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* EntityMention_Type_descriptor();
inline const ::std::string& EntityMention_Type_Name(EntityMention_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    EntityMention_Type_descriptor(), value);
}
inline bool EntityMention_Type_Parse(
    const ::std::string& name, EntityMention_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EntityMention_Type>(
    EntityMention_Type_descriptor(), name, value);
}
enum EncodingType {
  NONE = 0,
  UTF8 = 1,
  UTF16 = 2,
  UTF32 = 3,
  EncodingType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EncodingType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EncodingType_IsValid(int value);
const EncodingType EncodingType_MIN = NONE;
const EncodingType EncodingType_MAX = UTF32;
const int EncodingType_ARRAYSIZE = EncodingType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EncodingType_descriptor();
inline const ::std::string& EncodingType_Name(EncodingType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EncodingType_descriptor(), value);
}
inline bool EncodingType_Parse(
    const ::std::string& name, EncodingType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EncodingType>(
    EncodingType_descriptor(), name, value);
}
// ===================================================================

class Document : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.language.v1.Document) */ {
 public:
  Document();
  virtual ~Document();

  Document(const Document& from);

  inline Document& operator=(const Document& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Document& default_instance();

  enum SourceCase {
    kContent = 2,
    kGcsContentUri = 3,
    SOURCE_NOT_SET = 0,
  };

  static const Document* internal_default_instance();

  void Swap(Document* other);

  // implements Message ----------------------------------------------

  inline Document* New() const { return New(NULL); }

  Document* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Document& from);
  void MergeFrom(const Document& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Document* other);
  void UnsafeMergeFrom(const Document& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Document_Type Type;
  static const Type TYPE_UNSPECIFIED =
    Document_Type_TYPE_UNSPECIFIED;
  static const Type PLAIN_TEXT =
    Document_Type_PLAIN_TEXT;
  static const Type HTML =
    Document_Type_HTML;
  static inline bool Type_IsValid(int value) {
    return Document_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Document_Type_Type_MIN;
  static const Type Type_MAX =
    Document_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Document_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Document_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Document_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Document_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .google.cloud.language.v1.Document.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::cloud::language::v1::Document_Type type() const;
  void set_type(::google::cloud::language::v1::Document_Type value);

  // optional string content = 2;
  private:
  bool has_content() const;
  public:
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // optional string gcs_content_uri = 3;
  private:
  bool has_gcs_content_uri() const;
  public:
  void clear_gcs_content_uri();
  static const int kGcsContentUriFieldNumber = 3;
  const ::std::string& gcs_content_uri() const;
  void set_gcs_content_uri(const ::std::string& value);
  void set_gcs_content_uri(const char* value);
  void set_gcs_content_uri(const char* value, size_t size);
  ::std::string* mutable_gcs_content_uri();
  ::std::string* release_gcs_content_uri();
  void set_allocated_gcs_content_uri(::std::string* gcs_content_uri);

  // optional string language = 4;
  void clear_language();
  static const int kLanguageFieldNumber = 4;
  const ::std::string& language() const;
  void set_language(const ::std::string& value);
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  ::std::string* mutable_language();
  ::std::string* release_language();
  void set_allocated_language(::std::string* language);

  SourceCase source_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.language.v1.Document)
 private:
  inline void set_has_content();
  inline void set_has_gcs_content_uri();

  inline bool has_source() const;
  void clear_source();
  inline void clear_has_source();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr language_;
  int type_;
  union SourceUnion {
    SourceUnion() {}
    ::google::protobuf::internal::ArenaStringPtr content_;
    ::google::protobuf::internal::ArenaStringPtr gcs_content_uri_;
  } source_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  friend void protobuf_ShutdownFile_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Document> Document_default_instance_;

// -------------------------------------------------------------------

class Sentence : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.language.v1.Sentence) */ {
 public:
  Sentence();
  virtual ~Sentence();

  Sentence(const Sentence& from);

  inline Sentence& operator=(const Sentence& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sentence& default_instance();

  static const Sentence* internal_default_instance();

  void Swap(Sentence* other);

  // implements Message ----------------------------------------------

  inline Sentence* New() const { return New(NULL); }

  Sentence* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sentence& from);
  void MergeFrom(const Sentence& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Sentence* other);
  void UnsafeMergeFrom(const Sentence& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .google.cloud.language.v1.TextSpan text = 1;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::google::cloud::language::v1::TextSpan& text() const;
  ::google::cloud::language::v1::TextSpan* mutable_text();
  ::google::cloud::language::v1::TextSpan* release_text();
  void set_allocated_text(::google::cloud::language::v1::TextSpan* text);

  // optional .google.cloud.language.v1.Sentiment sentiment = 2;
  bool has_sentiment() const;
  void clear_sentiment();
  static const int kSentimentFieldNumber = 2;
  const ::google::cloud::language::v1::Sentiment& sentiment() const;
  ::google::cloud::language::v1::Sentiment* mutable_sentiment();
  ::google::cloud::language::v1::Sentiment* release_sentiment();
  void set_allocated_sentiment(::google::cloud::language::v1::Sentiment* sentiment);

  // @@protoc_insertion_point(class_scope:google.cloud.language.v1.Sentence)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::cloud::language::v1::TextSpan* text_;
  ::google::cloud::language::v1::Sentiment* sentiment_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  friend void protobuf_ShutdownFile_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Sentence> Sentence_default_instance_;

// -------------------------------------------------------------------

class Entity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.language.v1.Entity) */ {
 public:
  Entity();
  virtual ~Entity();

  Entity(const Entity& from);

  inline Entity& operator=(const Entity& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Entity& default_instance();

  static const Entity* internal_default_instance();

  void Swap(Entity* other);

  // implements Message ----------------------------------------------

  inline Entity* New() const { return New(NULL); }

  Entity* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Entity& from);
  void MergeFrom(const Entity& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Entity* other);
  void UnsafeMergeFrom(const Entity& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  typedef Entity_Type Type;
  static const Type UNKNOWN =
    Entity_Type_UNKNOWN;
  static const Type PERSON =
    Entity_Type_PERSON;
  static const Type LOCATION =
    Entity_Type_LOCATION;
  static const Type ORGANIZATION =
    Entity_Type_ORGANIZATION;
  static const Type EVENT =
    Entity_Type_EVENT;
  static const Type WORK_OF_ART =
    Entity_Type_WORK_OF_ART;
  static const Type CONSUMER_GOOD =
    Entity_Type_CONSUMER_GOOD;
  static const Type OTHER =
    Entity_Type_OTHER;
  static inline bool Type_IsValid(int value) {
    return Entity_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Entity_Type_Type_MIN;
  static const Type Type_MAX =
    Entity_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Entity_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Entity_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Entity_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Entity_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .google.cloud.language.v1.Entity.Type type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::cloud::language::v1::Entity_Type type() const;
  void set_type(::google::cloud::language::v1::Entity_Type value);

  // map<string, string> metadata = 3;
  int metadata_size() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      metadata() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_metadata();

  // optional float salience = 4;
  void clear_salience();
  static const int kSalienceFieldNumber = 4;
  float salience() const;
  void set_salience(float value);

  // repeated .google.cloud.language.v1.EntityMention mentions = 5;
  int mentions_size() const;
  void clear_mentions();
  static const int kMentionsFieldNumber = 5;
  const ::google::cloud::language::v1::EntityMention& mentions(int index) const;
  ::google::cloud::language::v1::EntityMention* mutable_mentions(int index);
  ::google::cloud::language::v1::EntityMention* add_mentions();
  ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::EntityMention >*
      mutable_mentions();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::EntityMention >&
      mentions() const;

  // @@protoc_insertion_point(class_scope:google.cloud.language.v1.Entity)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      Entity_MetadataEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::EntityMention > mentions_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int type_;
  float salience_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  friend void protobuf_ShutdownFile_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Entity> Entity_default_instance_;

// -------------------------------------------------------------------

class Token : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.language.v1.Token) */ {
 public:
  Token();
  virtual ~Token();

  Token(const Token& from);

  inline Token& operator=(const Token& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Token& default_instance();

  static const Token* internal_default_instance();

  void Swap(Token* other);

  // implements Message ----------------------------------------------

  inline Token* New() const { return New(NULL); }

  Token* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Token& from);
  void MergeFrom(const Token& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Token* other);
  void UnsafeMergeFrom(const Token& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .google.cloud.language.v1.TextSpan text = 1;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::google::cloud::language::v1::TextSpan& text() const;
  ::google::cloud::language::v1::TextSpan* mutable_text();
  ::google::cloud::language::v1::TextSpan* release_text();
  void set_allocated_text(::google::cloud::language::v1::TextSpan* text);

  // optional .google.cloud.language.v1.PartOfSpeech part_of_speech = 2;
  bool has_part_of_speech() const;
  void clear_part_of_speech();
  static const int kPartOfSpeechFieldNumber = 2;
  const ::google::cloud::language::v1::PartOfSpeech& part_of_speech() const;
  ::google::cloud::language::v1::PartOfSpeech* mutable_part_of_speech();
  ::google::cloud::language::v1::PartOfSpeech* release_part_of_speech();
  void set_allocated_part_of_speech(::google::cloud::language::v1::PartOfSpeech* part_of_speech);

  // optional .google.cloud.language.v1.DependencyEdge dependency_edge = 3;
  bool has_dependency_edge() const;
  void clear_dependency_edge();
  static const int kDependencyEdgeFieldNumber = 3;
  const ::google::cloud::language::v1::DependencyEdge& dependency_edge() const;
  ::google::cloud::language::v1::DependencyEdge* mutable_dependency_edge();
  ::google::cloud::language::v1::DependencyEdge* release_dependency_edge();
  void set_allocated_dependency_edge(::google::cloud::language::v1::DependencyEdge* dependency_edge);

  // optional string lemma = 4;
  void clear_lemma();
  static const int kLemmaFieldNumber = 4;
  const ::std::string& lemma() const;
  void set_lemma(const ::std::string& value);
  void set_lemma(const char* value);
  void set_lemma(const char* value, size_t size);
  ::std::string* mutable_lemma();
  ::std::string* release_lemma();
  void set_allocated_lemma(::std::string* lemma);

  // @@protoc_insertion_point(class_scope:google.cloud.language.v1.Token)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr lemma_;
  ::google::cloud::language::v1::TextSpan* text_;
  ::google::cloud::language::v1::PartOfSpeech* part_of_speech_;
  ::google::cloud::language::v1::DependencyEdge* dependency_edge_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  friend void protobuf_ShutdownFile_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Token> Token_default_instance_;

// -------------------------------------------------------------------

class Sentiment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.language.v1.Sentiment) */ {
 public:
  Sentiment();
  virtual ~Sentiment();

  Sentiment(const Sentiment& from);

  inline Sentiment& operator=(const Sentiment& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sentiment& default_instance();

  static const Sentiment* internal_default_instance();

  void Swap(Sentiment* other);

  // implements Message ----------------------------------------------

  inline Sentiment* New() const { return New(NULL); }

  Sentiment* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sentiment& from);
  void MergeFrom(const Sentiment& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Sentiment* other);
  void UnsafeMergeFrom(const Sentiment& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float magnitude = 2;
  void clear_magnitude();
  static const int kMagnitudeFieldNumber = 2;
  float magnitude() const;
  void set_magnitude(float value);

  // optional float score = 3;
  void clear_score();
  static const int kScoreFieldNumber = 3;
  float score() const;
  void set_score(float value);

  // @@protoc_insertion_point(class_scope:google.cloud.language.v1.Sentiment)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float magnitude_;
  float score_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  friend void protobuf_ShutdownFile_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Sentiment> Sentiment_default_instance_;

// -------------------------------------------------------------------

class PartOfSpeech : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.language.v1.PartOfSpeech) */ {
 public:
  PartOfSpeech();
  virtual ~PartOfSpeech();

  PartOfSpeech(const PartOfSpeech& from);

  inline PartOfSpeech& operator=(const PartOfSpeech& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PartOfSpeech& default_instance();

  static const PartOfSpeech* internal_default_instance();

  void Swap(PartOfSpeech* other);

  // implements Message ----------------------------------------------

  inline PartOfSpeech* New() const { return New(NULL); }

  PartOfSpeech* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PartOfSpeech& from);
  void MergeFrom(const PartOfSpeech& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PartOfSpeech* other);
  void UnsafeMergeFrom(const PartOfSpeech& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PartOfSpeech_Tag Tag;
  static const Tag UNKNOWN =
    PartOfSpeech_Tag_UNKNOWN;
  static const Tag ADJ =
    PartOfSpeech_Tag_ADJ;
  static const Tag ADP =
    PartOfSpeech_Tag_ADP;
  static const Tag ADV =
    PartOfSpeech_Tag_ADV;
  static const Tag CONJ =
    PartOfSpeech_Tag_CONJ;
  static const Tag DET =
    PartOfSpeech_Tag_DET;
  static const Tag NOUN =
    PartOfSpeech_Tag_NOUN;
  static const Tag NUM =
    PartOfSpeech_Tag_NUM;
  static const Tag PRON =
    PartOfSpeech_Tag_PRON;
  static const Tag PRT =
    PartOfSpeech_Tag_PRT;
  static const Tag PUNCT =
    PartOfSpeech_Tag_PUNCT;
  static const Tag VERB =
    PartOfSpeech_Tag_VERB;
  static const Tag X =
    PartOfSpeech_Tag_X;
  static const Tag AFFIX =
    PartOfSpeech_Tag_AFFIX;
  static inline bool Tag_IsValid(int value) {
    return PartOfSpeech_Tag_IsValid(value);
  }
  static const Tag Tag_MIN =
    PartOfSpeech_Tag_Tag_MIN;
  static const Tag Tag_MAX =
    PartOfSpeech_Tag_Tag_MAX;
  static const int Tag_ARRAYSIZE =
    PartOfSpeech_Tag_Tag_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Tag_descriptor() {
    return PartOfSpeech_Tag_descriptor();
  }
  static inline const ::std::string& Tag_Name(Tag value) {
    return PartOfSpeech_Tag_Name(value);
  }
  static inline bool Tag_Parse(const ::std::string& name,
      Tag* value) {
    return PartOfSpeech_Tag_Parse(name, value);
  }

  typedef PartOfSpeech_Aspect Aspect;
  static const Aspect ASPECT_UNKNOWN =
    PartOfSpeech_Aspect_ASPECT_UNKNOWN;
  static const Aspect PERFECTIVE =
    PartOfSpeech_Aspect_PERFECTIVE;
  static const Aspect IMPERFECTIVE =
    PartOfSpeech_Aspect_IMPERFECTIVE;
  static const Aspect PROGRESSIVE =
    PartOfSpeech_Aspect_PROGRESSIVE;
  static inline bool Aspect_IsValid(int value) {
    return PartOfSpeech_Aspect_IsValid(value);
  }
  static const Aspect Aspect_MIN =
    PartOfSpeech_Aspect_Aspect_MIN;
  static const Aspect Aspect_MAX =
    PartOfSpeech_Aspect_Aspect_MAX;
  static const int Aspect_ARRAYSIZE =
    PartOfSpeech_Aspect_Aspect_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Aspect_descriptor() {
    return PartOfSpeech_Aspect_descriptor();
  }
  static inline const ::std::string& Aspect_Name(Aspect value) {
    return PartOfSpeech_Aspect_Name(value);
  }
  static inline bool Aspect_Parse(const ::std::string& name,
      Aspect* value) {
    return PartOfSpeech_Aspect_Parse(name, value);
  }

  typedef PartOfSpeech_Case Case;
  static const Case CASE_UNKNOWN =
    PartOfSpeech_Case_CASE_UNKNOWN;
  static const Case ACCUSATIVE =
    PartOfSpeech_Case_ACCUSATIVE;
  static const Case ADVERBIAL =
    PartOfSpeech_Case_ADVERBIAL;
  static const Case COMPLEMENTIVE =
    PartOfSpeech_Case_COMPLEMENTIVE;
  static const Case DATIVE =
    PartOfSpeech_Case_DATIVE;
  static const Case GENITIVE =
    PartOfSpeech_Case_GENITIVE;
  static const Case INSTRUMENTAL =
    PartOfSpeech_Case_INSTRUMENTAL;
  static const Case LOCATIVE =
    PartOfSpeech_Case_LOCATIVE;
  static const Case NOMINATIVE =
    PartOfSpeech_Case_NOMINATIVE;
  static const Case OBLIQUE =
    PartOfSpeech_Case_OBLIQUE;
  static const Case PARTITIVE =
    PartOfSpeech_Case_PARTITIVE;
  static const Case PREPOSITIONAL =
    PartOfSpeech_Case_PREPOSITIONAL;
  static const Case REFLEXIVE_CASE =
    PartOfSpeech_Case_REFLEXIVE_CASE;
  static const Case RELATIVE_CASE =
    PartOfSpeech_Case_RELATIVE_CASE;
  static const Case VOCATIVE =
    PartOfSpeech_Case_VOCATIVE;
  static inline bool Case_IsValid(int value) {
    return PartOfSpeech_Case_IsValid(value);
  }
  static const Case Case_MIN =
    PartOfSpeech_Case_Case_MIN;
  static const Case Case_MAX =
    PartOfSpeech_Case_Case_MAX;
  static const int Case_ARRAYSIZE =
    PartOfSpeech_Case_Case_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Case_descriptor() {
    return PartOfSpeech_Case_descriptor();
  }
  static inline const ::std::string& Case_Name(Case value) {
    return PartOfSpeech_Case_Name(value);
  }
  static inline bool Case_Parse(const ::std::string& name,
      Case* value) {
    return PartOfSpeech_Case_Parse(name, value);
  }

  typedef PartOfSpeech_Form Form;
  static const Form FORM_UNKNOWN =
    PartOfSpeech_Form_FORM_UNKNOWN;
  static const Form ADNOMIAL =
    PartOfSpeech_Form_ADNOMIAL;
  static const Form AUXILIARY =
    PartOfSpeech_Form_AUXILIARY;
  static const Form COMPLEMENTIZER =
    PartOfSpeech_Form_COMPLEMENTIZER;
  static const Form FINAL_ENDING =
    PartOfSpeech_Form_FINAL_ENDING;
  static const Form GERUND =
    PartOfSpeech_Form_GERUND;
  static const Form REALIS =
    PartOfSpeech_Form_REALIS;
  static const Form IRREALIS =
    PartOfSpeech_Form_IRREALIS;
  static const Form SHORT =
    PartOfSpeech_Form_SHORT;
  static const Form LONG =
    PartOfSpeech_Form_LONG;
  static const Form ORDER =
    PartOfSpeech_Form_ORDER;
  static const Form SPECIFIC =
    PartOfSpeech_Form_SPECIFIC;
  static inline bool Form_IsValid(int value) {
    return PartOfSpeech_Form_IsValid(value);
  }
  static const Form Form_MIN =
    PartOfSpeech_Form_Form_MIN;
  static const Form Form_MAX =
    PartOfSpeech_Form_Form_MAX;
  static const int Form_ARRAYSIZE =
    PartOfSpeech_Form_Form_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Form_descriptor() {
    return PartOfSpeech_Form_descriptor();
  }
  static inline const ::std::string& Form_Name(Form value) {
    return PartOfSpeech_Form_Name(value);
  }
  static inline bool Form_Parse(const ::std::string& name,
      Form* value) {
    return PartOfSpeech_Form_Parse(name, value);
  }

  typedef PartOfSpeech_Gender Gender;
  static const Gender GENDER_UNKNOWN =
    PartOfSpeech_Gender_GENDER_UNKNOWN;
  static const Gender FEMININE =
    PartOfSpeech_Gender_FEMININE;
  static const Gender MASCULINE =
    PartOfSpeech_Gender_MASCULINE;
  static const Gender NEUTER =
    PartOfSpeech_Gender_NEUTER;
  static inline bool Gender_IsValid(int value) {
    return PartOfSpeech_Gender_IsValid(value);
  }
  static const Gender Gender_MIN =
    PartOfSpeech_Gender_Gender_MIN;
  static const Gender Gender_MAX =
    PartOfSpeech_Gender_Gender_MAX;
  static const int Gender_ARRAYSIZE =
    PartOfSpeech_Gender_Gender_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Gender_descriptor() {
    return PartOfSpeech_Gender_descriptor();
  }
  static inline const ::std::string& Gender_Name(Gender value) {
    return PartOfSpeech_Gender_Name(value);
  }
  static inline bool Gender_Parse(const ::std::string& name,
      Gender* value) {
    return PartOfSpeech_Gender_Parse(name, value);
  }

  typedef PartOfSpeech_Mood Mood;
  static const Mood MOOD_UNKNOWN =
    PartOfSpeech_Mood_MOOD_UNKNOWN;
  static const Mood CONDITIONAL_MOOD =
    PartOfSpeech_Mood_CONDITIONAL_MOOD;
  static const Mood IMPERATIVE =
    PartOfSpeech_Mood_IMPERATIVE;
  static const Mood INDICATIVE =
    PartOfSpeech_Mood_INDICATIVE;
  static const Mood INTERROGATIVE =
    PartOfSpeech_Mood_INTERROGATIVE;
  static const Mood JUSSIVE =
    PartOfSpeech_Mood_JUSSIVE;
  static const Mood SUBJUNCTIVE =
    PartOfSpeech_Mood_SUBJUNCTIVE;
  static inline bool Mood_IsValid(int value) {
    return PartOfSpeech_Mood_IsValid(value);
  }
  static const Mood Mood_MIN =
    PartOfSpeech_Mood_Mood_MIN;
  static const Mood Mood_MAX =
    PartOfSpeech_Mood_Mood_MAX;
  static const int Mood_ARRAYSIZE =
    PartOfSpeech_Mood_Mood_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mood_descriptor() {
    return PartOfSpeech_Mood_descriptor();
  }
  static inline const ::std::string& Mood_Name(Mood value) {
    return PartOfSpeech_Mood_Name(value);
  }
  static inline bool Mood_Parse(const ::std::string& name,
      Mood* value) {
    return PartOfSpeech_Mood_Parse(name, value);
  }

  typedef PartOfSpeech_Number Number;
  static const Number NUMBER_UNKNOWN =
    PartOfSpeech_Number_NUMBER_UNKNOWN;
  static const Number SINGULAR =
    PartOfSpeech_Number_SINGULAR;
  static const Number PLURAL =
    PartOfSpeech_Number_PLURAL;
  static const Number DUAL =
    PartOfSpeech_Number_DUAL;
  static inline bool Number_IsValid(int value) {
    return PartOfSpeech_Number_IsValid(value);
  }
  static const Number Number_MIN =
    PartOfSpeech_Number_Number_MIN;
  static const Number Number_MAX =
    PartOfSpeech_Number_Number_MAX;
  static const int Number_ARRAYSIZE =
    PartOfSpeech_Number_Number_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Number_descriptor() {
    return PartOfSpeech_Number_descriptor();
  }
  static inline const ::std::string& Number_Name(Number value) {
    return PartOfSpeech_Number_Name(value);
  }
  static inline bool Number_Parse(const ::std::string& name,
      Number* value) {
    return PartOfSpeech_Number_Parse(name, value);
  }

  typedef PartOfSpeech_Person Person;
  static const Person PERSON_UNKNOWN =
    PartOfSpeech_Person_PERSON_UNKNOWN;
  static const Person FIRST =
    PartOfSpeech_Person_FIRST;
  static const Person SECOND =
    PartOfSpeech_Person_SECOND;
  static const Person THIRD =
    PartOfSpeech_Person_THIRD;
  static const Person REFLEXIVE_PERSON =
    PartOfSpeech_Person_REFLEXIVE_PERSON;
  static inline bool Person_IsValid(int value) {
    return PartOfSpeech_Person_IsValid(value);
  }
  static const Person Person_MIN =
    PartOfSpeech_Person_Person_MIN;
  static const Person Person_MAX =
    PartOfSpeech_Person_Person_MAX;
  static const int Person_ARRAYSIZE =
    PartOfSpeech_Person_Person_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Person_descriptor() {
    return PartOfSpeech_Person_descriptor();
  }
  static inline const ::std::string& Person_Name(Person value) {
    return PartOfSpeech_Person_Name(value);
  }
  static inline bool Person_Parse(const ::std::string& name,
      Person* value) {
    return PartOfSpeech_Person_Parse(name, value);
  }

  typedef PartOfSpeech_Proper Proper;
  static const Proper PROPER_UNKNOWN =
    PartOfSpeech_Proper_PROPER_UNKNOWN;
  static const Proper PROPER =
    PartOfSpeech_Proper_PROPER;
  static const Proper NOT_PROPER =
    PartOfSpeech_Proper_NOT_PROPER;
  static inline bool Proper_IsValid(int value) {
    return PartOfSpeech_Proper_IsValid(value);
  }
  static const Proper Proper_MIN =
    PartOfSpeech_Proper_Proper_MIN;
  static const Proper Proper_MAX =
    PartOfSpeech_Proper_Proper_MAX;
  static const int Proper_ARRAYSIZE =
    PartOfSpeech_Proper_Proper_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Proper_descriptor() {
    return PartOfSpeech_Proper_descriptor();
  }
  static inline const ::std::string& Proper_Name(Proper value) {
    return PartOfSpeech_Proper_Name(value);
  }
  static inline bool Proper_Parse(const ::std::string& name,
      Proper* value) {
    return PartOfSpeech_Proper_Parse(name, value);
  }

  typedef PartOfSpeech_Reciprocity Reciprocity;
  static const Reciprocity RECIPROCITY_UNKNOWN =
    PartOfSpeech_Reciprocity_RECIPROCITY_UNKNOWN;
  static const Reciprocity RECIPROCAL =
    PartOfSpeech_Reciprocity_RECIPROCAL;
  static const Reciprocity NON_RECIPROCAL =
    PartOfSpeech_Reciprocity_NON_RECIPROCAL;
  static inline bool Reciprocity_IsValid(int value) {
    return PartOfSpeech_Reciprocity_IsValid(value);
  }
  static const Reciprocity Reciprocity_MIN =
    PartOfSpeech_Reciprocity_Reciprocity_MIN;
  static const Reciprocity Reciprocity_MAX =
    PartOfSpeech_Reciprocity_Reciprocity_MAX;
  static const int Reciprocity_ARRAYSIZE =
    PartOfSpeech_Reciprocity_Reciprocity_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Reciprocity_descriptor() {
    return PartOfSpeech_Reciprocity_descriptor();
  }
  static inline const ::std::string& Reciprocity_Name(Reciprocity value) {
    return PartOfSpeech_Reciprocity_Name(value);
  }
  static inline bool Reciprocity_Parse(const ::std::string& name,
      Reciprocity* value) {
    return PartOfSpeech_Reciprocity_Parse(name, value);
  }

  typedef PartOfSpeech_Tense Tense;
  static const Tense TENSE_UNKNOWN =
    PartOfSpeech_Tense_TENSE_UNKNOWN;
  static const Tense CONDITIONAL_TENSE =
    PartOfSpeech_Tense_CONDITIONAL_TENSE;
  static const Tense FUTURE =
    PartOfSpeech_Tense_FUTURE;
  static const Tense PAST =
    PartOfSpeech_Tense_PAST;
  static const Tense PRESENT =
    PartOfSpeech_Tense_PRESENT;
  static const Tense IMPERFECT =
    PartOfSpeech_Tense_IMPERFECT;
  static const Tense PLUPERFECT =
    PartOfSpeech_Tense_PLUPERFECT;
  static inline bool Tense_IsValid(int value) {
    return PartOfSpeech_Tense_IsValid(value);
  }
  static const Tense Tense_MIN =
    PartOfSpeech_Tense_Tense_MIN;
  static const Tense Tense_MAX =
    PartOfSpeech_Tense_Tense_MAX;
  static const int Tense_ARRAYSIZE =
    PartOfSpeech_Tense_Tense_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Tense_descriptor() {
    return PartOfSpeech_Tense_descriptor();
  }
  static inline const ::std::string& Tense_Name(Tense value) {
    return PartOfSpeech_Tense_Name(value);
  }
  static inline bool Tense_Parse(const ::std::string& name,
      Tense* value) {
    return PartOfSpeech_Tense_Parse(name, value);
  }

  typedef PartOfSpeech_Voice Voice;
  static const Voice VOICE_UNKNOWN =
    PartOfSpeech_Voice_VOICE_UNKNOWN;
  static const Voice ACTIVE =
    PartOfSpeech_Voice_ACTIVE;
  static const Voice CAUSATIVE =
    PartOfSpeech_Voice_CAUSATIVE;
  static const Voice PASSIVE =
    PartOfSpeech_Voice_PASSIVE;
  static inline bool Voice_IsValid(int value) {
    return PartOfSpeech_Voice_IsValid(value);
  }
  static const Voice Voice_MIN =
    PartOfSpeech_Voice_Voice_MIN;
  static const Voice Voice_MAX =
    PartOfSpeech_Voice_Voice_MAX;
  static const int Voice_ARRAYSIZE =
    PartOfSpeech_Voice_Voice_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Voice_descriptor() {
    return PartOfSpeech_Voice_descriptor();
  }
  static inline const ::std::string& Voice_Name(Voice value) {
    return PartOfSpeech_Voice_Name(value);
  }
  static inline bool Voice_Parse(const ::std::string& name,
      Voice* value) {
    return PartOfSpeech_Voice_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .google.cloud.language.v1.PartOfSpeech.Tag tag = 1;
  void clear_tag();
  static const int kTagFieldNumber = 1;
  ::google::cloud::language::v1::PartOfSpeech_Tag tag() const;
  void set_tag(::google::cloud::language::v1::PartOfSpeech_Tag value);

  // optional .google.cloud.language.v1.PartOfSpeech.Aspect aspect = 2;
  void clear_aspect();
  static const int kAspectFieldNumber = 2;
  ::google::cloud::language::v1::PartOfSpeech_Aspect aspect() const;
  void set_aspect(::google::cloud::language::v1::PartOfSpeech_Aspect value);

  // optional .google.cloud.language.v1.PartOfSpeech.Case case = 3;
  void clear_case_();
  static const int kCaseFieldNumber = 3;
  ::google::cloud::language::v1::PartOfSpeech_Case case_() const;
  void set_case_(::google::cloud::language::v1::PartOfSpeech_Case value);

  // optional .google.cloud.language.v1.PartOfSpeech.Form form = 4;
  void clear_form();
  static const int kFormFieldNumber = 4;
  ::google::cloud::language::v1::PartOfSpeech_Form form() const;
  void set_form(::google::cloud::language::v1::PartOfSpeech_Form value);

  // optional .google.cloud.language.v1.PartOfSpeech.Gender gender = 5;
  void clear_gender();
  static const int kGenderFieldNumber = 5;
  ::google::cloud::language::v1::PartOfSpeech_Gender gender() const;
  void set_gender(::google::cloud::language::v1::PartOfSpeech_Gender value);

  // optional .google.cloud.language.v1.PartOfSpeech.Mood mood = 6;
  void clear_mood();
  static const int kMoodFieldNumber = 6;
  ::google::cloud::language::v1::PartOfSpeech_Mood mood() const;
  void set_mood(::google::cloud::language::v1::PartOfSpeech_Mood value);

  // optional .google.cloud.language.v1.PartOfSpeech.Number number = 7;
  void clear_number();
  static const int kNumberFieldNumber = 7;
  ::google::cloud::language::v1::PartOfSpeech_Number number() const;
  void set_number(::google::cloud::language::v1::PartOfSpeech_Number value);

  // optional .google.cloud.language.v1.PartOfSpeech.Person person = 8;
  void clear_person();
  static const int kPersonFieldNumber = 8;
  ::google::cloud::language::v1::PartOfSpeech_Person person() const;
  void set_person(::google::cloud::language::v1::PartOfSpeech_Person value);

  // optional .google.cloud.language.v1.PartOfSpeech.Proper proper = 9;
  void clear_proper();
  static const int kProperFieldNumber = 9;
  ::google::cloud::language::v1::PartOfSpeech_Proper proper() const;
  void set_proper(::google::cloud::language::v1::PartOfSpeech_Proper value);

  // optional .google.cloud.language.v1.PartOfSpeech.Reciprocity reciprocity = 10;
  void clear_reciprocity();
  static const int kReciprocityFieldNumber = 10;
  ::google::cloud::language::v1::PartOfSpeech_Reciprocity reciprocity() const;
  void set_reciprocity(::google::cloud::language::v1::PartOfSpeech_Reciprocity value);

  // optional .google.cloud.language.v1.PartOfSpeech.Tense tense = 11;
  void clear_tense();
  static const int kTenseFieldNumber = 11;
  ::google::cloud::language::v1::PartOfSpeech_Tense tense() const;
  void set_tense(::google::cloud::language::v1::PartOfSpeech_Tense value);

  // optional .google.cloud.language.v1.PartOfSpeech.Voice voice = 12;
  void clear_voice();
  static const int kVoiceFieldNumber = 12;
  ::google::cloud::language::v1::PartOfSpeech_Voice voice() const;
  void set_voice(::google::cloud::language::v1::PartOfSpeech_Voice value);

  // @@protoc_insertion_point(class_scope:google.cloud.language.v1.PartOfSpeech)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int tag_;
  int aspect_;
  int case__;
  int form_;
  int gender_;
  int mood_;
  int number_;
  int person_;
  int proper_;
  int reciprocity_;
  int tense_;
  int voice_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  friend void protobuf_ShutdownFile_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<PartOfSpeech> PartOfSpeech_default_instance_;

// -------------------------------------------------------------------

class DependencyEdge : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.language.v1.DependencyEdge) */ {
 public:
  DependencyEdge();
  virtual ~DependencyEdge();

  DependencyEdge(const DependencyEdge& from);

  inline DependencyEdge& operator=(const DependencyEdge& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DependencyEdge& default_instance();

  static const DependencyEdge* internal_default_instance();

  void Swap(DependencyEdge* other);

  // implements Message ----------------------------------------------

  inline DependencyEdge* New() const { return New(NULL); }

  DependencyEdge* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DependencyEdge& from);
  void MergeFrom(const DependencyEdge& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DependencyEdge* other);
  void UnsafeMergeFrom(const DependencyEdge& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DependencyEdge_Label Label;
  static const Label UNKNOWN =
    DependencyEdge_Label_UNKNOWN;
  static const Label ABBREV =
    DependencyEdge_Label_ABBREV;
  static const Label ACOMP =
    DependencyEdge_Label_ACOMP;
  static const Label ADVCL =
    DependencyEdge_Label_ADVCL;
  static const Label ADVMOD =
    DependencyEdge_Label_ADVMOD;
  static const Label AMOD =
    DependencyEdge_Label_AMOD;
  static const Label APPOS =
    DependencyEdge_Label_APPOS;
  static const Label ATTR =
    DependencyEdge_Label_ATTR;
  static const Label AUX =
    DependencyEdge_Label_AUX;
  static const Label AUXPASS =
    DependencyEdge_Label_AUXPASS;
  static const Label CC =
    DependencyEdge_Label_CC;
  static const Label CCOMP =
    DependencyEdge_Label_CCOMP;
  static const Label CONJ =
    DependencyEdge_Label_CONJ;
  static const Label CSUBJ =
    DependencyEdge_Label_CSUBJ;
  static const Label CSUBJPASS =
    DependencyEdge_Label_CSUBJPASS;
  static const Label DEP =
    DependencyEdge_Label_DEP;
  static const Label DET =
    DependencyEdge_Label_DET;
  static const Label DISCOURSE =
    DependencyEdge_Label_DISCOURSE;
  static const Label DOBJ =
    DependencyEdge_Label_DOBJ;
  static const Label EXPL =
    DependencyEdge_Label_EXPL;
  static const Label GOESWITH =
    DependencyEdge_Label_GOESWITH;
  static const Label IOBJ =
    DependencyEdge_Label_IOBJ;
  static const Label MARK =
    DependencyEdge_Label_MARK;
  static const Label MWE =
    DependencyEdge_Label_MWE;
  static const Label MWV =
    DependencyEdge_Label_MWV;
  static const Label NEG =
    DependencyEdge_Label_NEG;
  static const Label NN =
    DependencyEdge_Label_NN;
  static const Label NPADVMOD =
    DependencyEdge_Label_NPADVMOD;
  static const Label NSUBJ =
    DependencyEdge_Label_NSUBJ;
  static const Label NSUBJPASS =
    DependencyEdge_Label_NSUBJPASS;
  static const Label NUM =
    DependencyEdge_Label_NUM;
  static const Label NUMBER =
    DependencyEdge_Label_NUMBER;
  static const Label P =
    DependencyEdge_Label_P;
  static const Label PARATAXIS =
    DependencyEdge_Label_PARATAXIS;
  static const Label PARTMOD =
    DependencyEdge_Label_PARTMOD;
  static const Label PCOMP =
    DependencyEdge_Label_PCOMP;
  static const Label POBJ =
    DependencyEdge_Label_POBJ;
  static const Label POSS =
    DependencyEdge_Label_POSS;
  static const Label POSTNEG =
    DependencyEdge_Label_POSTNEG;
  static const Label PRECOMP =
    DependencyEdge_Label_PRECOMP;
  static const Label PRECONJ =
    DependencyEdge_Label_PRECONJ;
  static const Label PREDET =
    DependencyEdge_Label_PREDET;
  static const Label PREF =
    DependencyEdge_Label_PREF;
  static const Label PREP =
    DependencyEdge_Label_PREP;
  static const Label PRONL =
    DependencyEdge_Label_PRONL;
  static const Label PRT =
    DependencyEdge_Label_PRT;
  static const Label PS =
    DependencyEdge_Label_PS;
  static const Label QUANTMOD =
    DependencyEdge_Label_QUANTMOD;
  static const Label RCMOD =
    DependencyEdge_Label_RCMOD;
  static const Label RCMODREL =
    DependencyEdge_Label_RCMODREL;
  static const Label RDROP =
    DependencyEdge_Label_RDROP;
  static const Label REF =
    DependencyEdge_Label_REF;
  static const Label REMNANT =
    DependencyEdge_Label_REMNANT;
  static const Label REPARANDUM =
    DependencyEdge_Label_REPARANDUM;
  static const Label ROOT =
    DependencyEdge_Label_ROOT;
  static const Label SNUM =
    DependencyEdge_Label_SNUM;
  static const Label SUFF =
    DependencyEdge_Label_SUFF;
  static const Label TMOD =
    DependencyEdge_Label_TMOD;
  static const Label TOPIC =
    DependencyEdge_Label_TOPIC;
  static const Label VMOD =
    DependencyEdge_Label_VMOD;
  static const Label VOCATIVE =
    DependencyEdge_Label_VOCATIVE;
  static const Label XCOMP =
    DependencyEdge_Label_XCOMP;
  static const Label SUFFIX =
    DependencyEdge_Label_SUFFIX;
  static const Label TITLE =
    DependencyEdge_Label_TITLE;
  static const Label ADVPHMOD =
    DependencyEdge_Label_ADVPHMOD;
  static const Label AUXCAUS =
    DependencyEdge_Label_AUXCAUS;
  static const Label AUXVV =
    DependencyEdge_Label_AUXVV;
  static const Label DTMOD =
    DependencyEdge_Label_DTMOD;
  static const Label FOREIGN =
    DependencyEdge_Label_FOREIGN;
  static const Label KW =
    DependencyEdge_Label_KW;
  static const Label LIST =
    DependencyEdge_Label_LIST;
  static const Label NOMC =
    DependencyEdge_Label_NOMC;
  static const Label NOMCSUBJ =
    DependencyEdge_Label_NOMCSUBJ;
  static const Label NOMCSUBJPASS =
    DependencyEdge_Label_NOMCSUBJPASS;
  static const Label NUMC =
    DependencyEdge_Label_NUMC;
  static const Label COP =
    DependencyEdge_Label_COP;
  static const Label DISLOCATED =
    DependencyEdge_Label_DISLOCATED;
  static inline bool Label_IsValid(int value) {
    return DependencyEdge_Label_IsValid(value);
  }
  static const Label Label_MIN =
    DependencyEdge_Label_Label_MIN;
  static const Label Label_MAX =
    DependencyEdge_Label_Label_MAX;
  static const int Label_ARRAYSIZE =
    DependencyEdge_Label_Label_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Label_descriptor() {
    return DependencyEdge_Label_descriptor();
  }
  static inline const ::std::string& Label_Name(Label value) {
    return DependencyEdge_Label_Name(value);
  }
  static inline bool Label_Parse(const ::std::string& name,
      Label* value) {
    return DependencyEdge_Label_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 head_token_index = 1;
  void clear_head_token_index();
  static const int kHeadTokenIndexFieldNumber = 1;
  ::google::protobuf::int32 head_token_index() const;
  void set_head_token_index(::google::protobuf::int32 value);

  // optional .google.cloud.language.v1.DependencyEdge.Label label = 2;
  void clear_label();
  static const int kLabelFieldNumber = 2;
  ::google::cloud::language::v1::DependencyEdge_Label label() const;
  void set_label(::google::cloud::language::v1::DependencyEdge_Label value);

  // @@protoc_insertion_point(class_scope:google.cloud.language.v1.DependencyEdge)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 head_token_index_;
  int label_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  friend void protobuf_ShutdownFile_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<DependencyEdge> DependencyEdge_default_instance_;

// -------------------------------------------------------------------

class EntityMention : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.language.v1.EntityMention) */ {
 public:
  EntityMention();
  virtual ~EntityMention();

  EntityMention(const EntityMention& from);

  inline EntityMention& operator=(const EntityMention& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EntityMention& default_instance();

  static const EntityMention* internal_default_instance();

  void Swap(EntityMention* other);

  // implements Message ----------------------------------------------

  inline EntityMention* New() const { return New(NULL); }

  EntityMention* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EntityMention& from);
  void MergeFrom(const EntityMention& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EntityMention* other);
  void UnsafeMergeFrom(const EntityMention& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef EntityMention_Type Type;
  static const Type TYPE_UNKNOWN =
    EntityMention_Type_TYPE_UNKNOWN;
  static const Type PROPER =
    EntityMention_Type_PROPER;
  static const Type COMMON =
    EntityMention_Type_COMMON;
  static inline bool Type_IsValid(int value) {
    return EntityMention_Type_IsValid(value);
  }
  static const Type Type_MIN =
    EntityMention_Type_Type_MIN;
  static const Type Type_MAX =
    EntityMention_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    EntityMention_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return EntityMention_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return EntityMention_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return EntityMention_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .google.cloud.language.v1.TextSpan text = 1;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::google::cloud::language::v1::TextSpan& text() const;
  ::google::cloud::language::v1::TextSpan* mutable_text();
  ::google::cloud::language::v1::TextSpan* release_text();
  void set_allocated_text(::google::cloud::language::v1::TextSpan* text);

  // optional .google.cloud.language.v1.EntityMention.Type type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::cloud::language::v1::EntityMention_Type type() const;
  void set_type(::google::cloud::language::v1::EntityMention_Type value);

  // @@protoc_insertion_point(class_scope:google.cloud.language.v1.EntityMention)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::cloud::language::v1::TextSpan* text_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  friend void protobuf_ShutdownFile_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<EntityMention> EntityMention_default_instance_;

// -------------------------------------------------------------------

class TextSpan : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.language.v1.TextSpan) */ {
 public:
  TextSpan();
  virtual ~TextSpan();

  TextSpan(const TextSpan& from);

  inline TextSpan& operator=(const TextSpan& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TextSpan& default_instance();

  static const TextSpan* internal_default_instance();

  void Swap(TextSpan* other);

  // implements Message ----------------------------------------------

  inline TextSpan* New() const { return New(NULL); }

  TextSpan* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TextSpan& from);
  void MergeFrom(const TextSpan& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TextSpan* other);
  void UnsafeMergeFrom(const TextSpan& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string content = 1;
  void clear_content();
  static const int kContentFieldNumber = 1;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // optional int32 begin_offset = 2;
  void clear_begin_offset();
  static const int kBeginOffsetFieldNumber = 2;
  ::google::protobuf::int32 begin_offset() const;
  void set_begin_offset(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.cloud.language.v1.TextSpan)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::int32 begin_offset_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  friend void protobuf_ShutdownFile_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TextSpan> TextSpan_default_instance_;

// -------------------------------------------------------------------

class AnalyzeSentimentRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.language.v1.AnalyzeSentimentRequest) */ {
 public:
  AnalyzeSentimentRequest();
  virtual ~AnalyzeSentimentRequest();

  AnalyzeSentimentRequest(const AnalyzeSentimentRequest& from);

  inline AnalyzeSentimentRequest& operator=(const AnalyzeSentimentRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnalyzeSentimentRequest& default_instance();

  static const AnalyzeSentimentRequest* internal_default_instance();

  void Swap(AnalyzeSentimentRequest* other);

  // implements Message ----------------------------------------------

  inline AnalyzeSentimentRequest* New() const { return New(NULL); }

  AnalyzeSentimentRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnalyzeSentimentRequest& from);
  void MergeFrom(const AnalyzeSentimentRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AnalyzeSentimentRequest* other);
  void UnsafeMergeFrom(const AnalyzeSentimentRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .google.cloud.language.v1.Document document = 1;
  bool has_document() const;
  void clear_document();
  static const int kDocumentFieldNumber = 1;
  const ::google::cloud::language::v1::Document& document() const;
  ::google::cloud::language::v1::Document* mutable_document();
  ::google::cloud::language::v1::Document* release_document();
  void set_allocated_document(::google::cloud::language::v1::Document* document);

  // optional .google.cloud.language.v1.EncodingType encoding_type = 2;
  void clear_encoding_type();
  static const int kEncodingTypeFieldNumber = 2;
  ::google::cloud::language::v1::EncodingType encoding_type() const;
  void set_encoding_type(::google::cloud::language::v1::EncodingType value);

  // @@protoc_insertion_point(class_scope:google.cloud.language.v1.AnalyzeSentimentRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::cloud::language::v1::Document* document_;
  int encoding_type_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  friend void protobuf_ShutdownFile_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AnalyzeSentimentRequest> AnalyzeSentimentRequest_default_instance_;

// -------------------------------------------------------------------

class AnalyzeSentimentResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.language.v1.AnalyzeSentimentResponse) */ {
 public:
  AnalyzeSentimentResponse();
  virtual ~AnalyzeSentimentResponse();

  AnalyzeSentimentResponse(const AnalyzeSentimentResponse& from);

  inline AnalyzeSentimentResponse& operator=(const AnalyzeSentimentResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnalyzeSentimentResponse& default_instance();

  static const AnalyzeSentimentResponse* internal_default_instance();

  void Swap(AnalyzeSentimentResponse* other);

  // implements Message ----------------------------------------------

  inline AnalyzeSentimentResponse* New() const { return New(NULL); }

  AnalyzeSentimentResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnalyzeSentimentResponse& from);
  void MergeFrom(const AnalyzeSentimentResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AnalyzeSentimentResponse* other);
  void UnsafeMergeFrom(const AnalyzeSentimentResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .google.cloud.language.v1.Sentiment document_sentiment = 1;
  bool has_document_sentiment() const;
  void clear_document_sentiment();
  static const int kDocumentSentimentFieldNumber = 1;
  const ::google::cloud::language::v1::Sentiment& document_sentiment() const;
  ::google::cloud::language::v1::Sentiment* mutable_document_sentiment();
  ::google::cloud::language::v1::Sentiment* release_document_sentiment();
  void set_allocated_document_sentiment(::google::cloud::language::v1::Sentiment* document_sentiment);

  // optional string language = 2;
  void clear_language();
  static const int kLanguageFieldNumber = 2;
  const ::std::string& language() const;
  void set_language(const ::std::string& value);
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  ::std::string* mutable_language();
  ::std::string* release_language();
  void set_allocated_language(::std::string* language);

  // repeated .google.cloud.language.v1.Sentence sentences = 3;
  int sentences_size() const;
  void clear_sentences();
  static const int kSentencesFieldNumber = 3;
  const ::google::cloud::language::v1::Sentence& sentences(int index) const;
  ::google::cloud::language::v1::Sentence* mutable_sentences(int index);
  ::google::cloud::language::v1::Sentence* add_sentences();
  ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Sentence >*
      mutable_sentences();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Sentence >&
      sentences() const;

  // @@protoc_insertion_point(class_scope:google.cloud.language.v1.AnalyzeSentimentResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Sentence > sentences_;
  ::google::protobuf::internal::ArenaStringPtr language_;
  ::google::cloud::language::v1::Sentiment* document_sentiment_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  friend void protobuf_ShutdownFile_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AnalyzeSentimentResponse> AnalyzeSentimentResponse_default_instance_;

// -------------------------------------------------------------------

class AnalyzeEntitiesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.language.v1.AnalyzeEntitiesRequest) */ {
 public:
  AnalyzeEntitiesRequest();
  virtual ~AnalyzeEntitiesRequest();

  AnalyzeEntitiesRequest(const AnalyzeEntitiesRequest& from);

  inline AnalyzeEntitiesRequest& operator=(const AnalyzeEntitiesRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnalyzeEntitiesRequest& default_instance();

  static const AnalyzeEntitiesRequest* internal_default_instance();

  void Swap(AnalyzeEntitiesRequest* other);

  // implements Message ----------------------------------------------

  inline AnalyzeEntitiesRequest* New() const { return New(NULL); }

  AnalyzeEntitiesRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnalyzeEntitiesRequest& from);
  void MergeFrom(const AnalyzeEntitiesRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AnalyzeEntitiesRequest* other);
  void UnsafeMergeFrom(const AnalyzeEntitiesRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .google.cloud.language.v1.Document document = 1;
  bool has_document() const;
  void clear_document();
  static const int kDocumentFieldNumber = 1;
  const ::google::cloud::language::v1::Document& document() const;
  ::google::cloud::language::v1::Document* mutable_document();
  ::google::cloud::language::v1::Document* release_document();
  void set_allocated_document(::google::cloud::language::v1::Document* document);

  // optional .google.cloud.language.v1.EncodingType encoding_type = 2;
  void clear_encoding_type();
  static const int kEncodingTypeFieldNumber = 2;
  ::google::cloud::language::v1::EncodingType encoding_type() const;
  void set_encoding_type(::google::cloud::language::v1::EncodingType value);

  // @@protoc_insertion_point(class_scope:google.cloud.language.v1.AnalyzeEntitiesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::cloud::language::v1::Document* document_;
  int encoding_type_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  friend void protobuf_ShutdownFile_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AnalyzeEntitiesRequest> AnalyzeEntitiesRequest_default_instance_;

// -------------------------------------------------------------------

class AnalyzeEntitiesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.language.v1.AnalyzeEntitiesResponse) */ {
 public:
  AnalyzeEntitiesResponse();
  virtual ~AnalyzeEntitiesResponse();

  AnalyzeEntitiesResponse(const AnalyzeEntitiesResponse& from);

  inline AnalyzeEntitiesResponse& operator=(const AnalyzeEntitiesResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnalyzeEntitiesResponse& default_instance();

  static const AnalyzeEntitiesResponse* internal_default_instance();

  void Swap(AnalyzeEntitiesResponse* other);

  // implements Message ----------------------------------------------

  inline AnalyzeEntitiesResponse* New() const { return New(NULL); }

  AnalyzeEntitiesResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnalyzeEntitiesResponse& from);
  void MergeFrom(const AnalyzeEntitiesResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AnalyzeEntitiesResponse* other);
  void UnsafeMergeFrom(const AnalyzeEntitiesResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.language.v1.Entity entities = 1;
  int entities_size() const;
  void clear_entities();
  static const int kEntitiesFieldNumber = 1;
  const ::google::cloud::language::v1::Entity& entities(int index) const;
  ::google::cloud::language::v1::Entity* mutable_entities(int index);
  ::google::cloud::language::v1::Entity* add_entities();
  ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Entity >*
      mutable_entities();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Entity >&
      entities() const;

  // optional string language = 2;
  void clear_language();
  static const int kLanguageFieldNumber = 2;
  const ::std::string& language() const;
  void set_language(const ::std::string& value);
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  ::std::string* mutable_language();
  ::std::string* release_language();
  void set_allocated_language(::std::string* language);

  // @@protoc_insertion_point(class_scope:google.cloud.language.v1.AnalyzeEntitiesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Entity > entities_;
  ::google::protobuf::internal::ArenaStringPtr language_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  friend void protobuf_ShutdownFile_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AnalyzeEntitiesResponse> AnalyzeEntitiesResponse_default_instance_;

// -------------------------------------------------------------------

class AnalyzeSyntaxRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.language.v1.AnalyzeSyntaxRequest) */ {
 public:
  AnalyzeSyntaxRequest();
  virtual ~AnalyzeSyntaxRequest();

  AnalyzeSyntaxRequest(const AnalyzeSyntaxRequest& from);

  inline AnalyzeSyntaxRequest& operator=(const AnalyzeSyntaxRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnalyzeSyntaxRequest& default_instance();

  static const AnalyzeSyntaxRequest* internal_default_instance();

  void Swap(AnalyzeSyntaxRequest* other);

  // implements Message ----------------------------------------------

  inline AnalyzeSyntaxRequest* New() const { return New(NULL); }

  AnalyzeSyntaxRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnalyzeSyntaxRequest& from);
  void MergeFrom(const AnalyzeSyntaxRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AnalyzeSyntaxRequest* other);
  void UnsafeMergeFrom(const AnalyzeSyntaxRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .google.cloud.language.v1.Document document = 1;
  bool has_document() const;
  void clear_document();
  static const int kDocumentFieldNumber = 1;
  const ::google::cloud::language::v1::Document& document() const;
  ::google::cloud::language::v1::Document* mutable_document();
  ::google::cloud::language::v1::Document* release_document();
  void set_allocated_document(::google::cloud::language::v1::Document* document);

  // optional .google.cloud.language.v1.EncodingType encoding_type = 2;
  void clear_encoding_type();
  static const int kEncodingTypeFieldNumber = 2;
  ::google::cloud::language::v1::EncodingType encoding_type() const;
  void set_encoding_type(::google::cloud::language::v1::EncodingType value);

  // @@protoc_insertion_point(class_scope:google.cloud.language.v1.AnalyzeSyntaxRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::cloud::language::v1::Document* document_;
  int encoding_type_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  friend void protobuf_ShutdownFile_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AnalyzeSyntaxRequest> AnalyzeSyntaxRequest_default_instance_;

// -------------------------------------------------------------------

class AnalyzeSyntaxResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.language.v1.AnalyzeSyntaxResponse) */ {
 public:
  AnalyzeSyntaxResponse();
  virtual ~AnalyzeSyntaxResponse();

  AnalyzeSyntaxResponse(const AnalyzeSyntaxResponse& from);

  inline AnalyzeSyntaxResponse& operator=(const AnalyzeSyntaxResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnalyzeSyntaxResponse& default_instance();

  static const AnalyzeSyntaxResponse* internal_default_instance();

  void Swap(AnalyzeSyntaxResponse* other);

  // implements Message ----------------------------------------------

  inline AnalyzeSyntaxResponse* New() const { return New(NULL); }

  AnalyzeSyntaxResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnalyzeSyntaxResponse& from);
  void MergeFrom(const AnalyzeSyntaxResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AnalyzeSyntaxResponse* other);
  void UnsafeMergeFrom(const AnalyzeSyntaxResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.language.v1.Sentence sentences = 1;
  int sentences_size() const;
  void clear_sentences();
  static const int kSentencesFieldNumber = 1;
  const ::google::cloud::language::v1::Sentence& sentences(int index) const;
  ::google::cloud::language::v1::Sentence* mutable_sentences(int index);
  ::google::cloud::language::v1::Sentence* add_sentences();
  ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Sentence >*
      mutable_sentences();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Sentence >&
      sentences() const;

  // repeated .google.cloud.language.v1.Token tokens = 2;
  int tokens_size() const;
  void clear_tokens();
  static const int kTokensFieldNumber = 2;
  const ::google::cloud::language::v1::Token& tokens(int index) const;
  ::google::cloud::language::v1::Token* mutable_tokens(int index);
  ::google::cloud::language::v1::Token* add_tokens();
  ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Token >*
      mutable_tokens();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Token >&
      tokens() const;

  // optional string language = 3;
  void clear_language();
  static const int kLanguageFieldNumber = 3;
  const ::std::string& language() const;
  void set_language(const ::std::string& value);
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  ::std::string* mutable_language();
  ::std::string* release_language();
  void set_allocated_language(::std::string* language);

  // @@protoc_insertion_point(class_scope:google.cloud.language.v1.AnalyzeSyntaxResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Sentence > sentences_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Token > tokens_;
  ::google::protobuf::internal::ArenaStringPtr language_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  friend void protobuf_ShutdownFile_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AnalyzeSyntaxResponse> AnalyzeSyntaxResponse_default_instance_;

// -------------------------------------------------------------------

class AnnotateTextRequest_Features : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.language.v1.AnnotateTextRequest.Features) */ {
 public:
  AnnotateTextRequest_Features();
  virtual ~AnnotateTextRequest_Features();

  AnnotateTextRequest_Features(const AnnotateTextRequest_Features& from);

  inline AnnotateTextRequest_Features& operator=(const AnnotateTextRequest_Features& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnnotateTextRequest_Features& default_instance();

  static const AnnotateTextRequest_Features* internal_default_instance();

  void Swap(AnnotateTextRequest_Features* other);

  // implements Message ----------------------------------------------

  inline AnnotateTextRequest_Features* New() const { return New(NULL); }

  AnnotateTextRequest_Features* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnnotateTextRequest_Features& from);
  void MergeFrom(const AnnotateTextRequest_Features& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AnnotateTextRequest_Features* other);
  void UnsafeMergeFrom(const AnnotateTextRequest_Features& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool extract_syntax = 1;
  void clear_extract_syntax();
  static const int kExtractSyntaxFieldNumber = 1;
  bool extract_syntax() const;
  void set_extract_syntax(bool value);

  // optional bool extract_entities = 2;
  void clear_extract_entities();
  static const int kExtractEntitiesFieldNumber = 2;
  bool extract_entities() const;
  void set_extract_entities(bool value);

  // optional bool extract_document_sentiment = 3;
  void clear_extract_document_sentiment();
  static const int kExtractDocumentSentimentFieldNumber = 3;
  bool extract_document_sentiment() const;
  void set_extract_document_sentiment(bool value);

  // @@protoc_insertion_point(class_scope:google.cloud.language.v1.AnnotateTextRequest.Features)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool extract_syntax_;
  bool extract_entities_;
  bool extract_document_sentiment_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  friend void protobuf_ShutdownFile_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AnnotateTextRequest_Features> AnnotateTextRequest_Features_default_instance_;

// -------------------------------------------------------------------

class AnnotateTextRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.language.v1.AnnotateTextRequest) */ {
 public:
  AnnotateTextRequest();
  virtual ~AnnotateTextRequest();

  AnnotateTextRequest(const AnnotateTextRequest& from);

  inline AnnotateTextRequest& operator=(const AnnotateTextRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnnotateTextRequest& default_instance();

  static const AnnotateTextRequest* internal_default_instance();

  void Swap(AnnotateTextRequest* other);

  // implements Message ----------------------------------------------

  inline AnnotateTextRequest* New() const { return New(NULL); }

  AnnotateTextRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnnotateTextRequest& from);
  void MergeFrom(const AnnotateTextRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AnnotateTextRequest* other);
  void UnsafeMergeFrom(const AnnotateTextRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AnnotateTextRequest_Features Features;

  // accessors -------------------------------------------------------

  // optional .google.cloud.language.v1.Document document = 1;
  bool has_document() const;
  void clear_document();
  static const int kDocumentFieldNumber = 1;
  const ::google::cloud::language::v1::Document& document() const;
  ::google::cloud::language::v1::Document* mutable_document();
  ::google::cloud::language::v1::Document* release_document();
  void set_allocated_document(::google::cloud::language::v1::Document* document);

  // optional .google.cloud.language.v1.AnnotateTextRequest.Features features = 2;
  bool has_features() const;
  void clear_features();
  static const int kFeaturesFieldNumber = 2;
  const ::google::cloud::language::v1::AnnotateTextRequest_Features& features() const;
  ::google::cloud::language::v1::AnnotateTextRequest_Features* mutable_features();
  ::google::cloud::language::v1::AnnotateTextRequest_Features* release_features();
  void set_allocated_features(::google::cloud::language::v1::AnnotateTextRequest_Features* features);

  // optional .google.cloud.language.v1.EncodingType encoding_type = 3;
  void clear_encoding_type();
  static const int kEncodingTypeFieldNumber = 3;
  ::google::cloud::language::v1::EncodingType encoding_type() const;
  void set_encoding_type(::google::cloud::language::v1::EncodingType value);

  // @@protoc_insertion_point(class_scope:google.cloud.language.v1.AnnotateTextRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::cloud::language::v1::Document* document_;
  ::google::cloud::language::v1::AnnotateTextRequest_Features* features_;
  int encoding_type_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  friend void protobuf_ShutdownFile_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AnnotateTextRequest> AnnotateTextRequest_default_instance_;

// -------------------------------------------------------------------

class AnnotateTextResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.language.v1.AnnotateTextResponse) */ {
 public:
  AnnotateTextResponse();
  virtual ~AnnotateTextResponse();

  AnnotateTextResponse(const AnnotateTextResponse& from);

  inline AnnotateTextResponse& operator=(const AnnotateTextResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnnotateTextResponse& default_instance();

  static const AnnotateTextResponse* internal_default_instance();

  void Swap(AnnotateTextResponse* other);

  // implements Message ----------------------------------------------

  inline AnnotateTextResponse* New() const { return New(NULL); }

  AnnotateTextResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnnotateTextResponse& from);
  void MergeFrom(const AnnotateTextResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AnnotateTextResponse* other);
  void UnsafeMergeFrom(const AnnotateTextResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.language.v1.Sentence sentences = 1;
  int sentences_size() const;
  void clear_sentences();
  static const int kSentencesFieldNumber = 1;
  const ::google::cloud::language::v1::Sentence& sentences(int index) const;
  ::google::cloud::language::v1::Sentence* mutable_sentences(int index);
  ::google::cloud::language::v1::Sentence* add_sentences();
  ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Sentence >*
      mutable_sentences();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Sentence >&
      sentences() const;

  // repeated .google.cloud.language.v1.Token tokens = 2;
  int tokens_size() const;
  void clear_tokens();
  static const int kTokensFieldNumber = 2;
  const ::google::cloud::language::v1::Token& tokens(int index) const;
  ::google::cloud::language::v1::Token* mutable_tokens(int index);
  ::google::cloud::language::v1::Token* add_tokens();
  ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Token >*
      mutable_tokens();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Token >&
      tokens() const;

  // repeated .google.cloud.language.v1.Entity entities = 3;
  int entities_size() const;
  void clear_entities();
  static const int kEntitiesFieldNumber = 3;
  const ::google::cloud::language::v1::Entity& entities(int index) const;
  ::google::cloud::language::v1::Entity* mutable_entities(int index);
  ::google::cloud::language::v1::Entity* add_entities();
  ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Entity >*
      mutable_entities();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Entity >&
      entities() const;

  // optional .google.cloud.language.v1.Sentiment document_sentiment = 4;
  bool has_document_sentiment() const;
  void clear_document_sentiment();
  static const int kDocumentSentimentFieldNumber = 4;
  const ::google::cloud::language::v1::Sentiment& document_sentiment() const;
  ::google::cloud::language::v1::Sentiment* mutable_document_sentiment();
  ::google::cloud::language::v1::Sentiment* release_document_sentiment();
  void set_allocated_document_sentiment(::google::cloud::language::v1::Sentiment* document_sentiment);

  // optional string language = 5;
  void clear_language();
  static const int kLanguageFieldNumber = 5;
  const ::std::string& language() const;
  void set_language(const ::std::string& value);
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  ::std::string* mutable_language();
  ::std::string* release_language();
  void set_allocated_language(::std::string* language);

  // @@protoc_insertion_point(class_scope:google.cloud.language.v1.AnnotateTextResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Sentence > sentences_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Token > tokens_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Entity > entities_;
  ::google::protobuf::internal::ArenaStringPtr language_;
  ::google::cloud::language::v1::Sentiment* document_sentiment_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();
  friend void protobuf_ShutdownFile_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AnnotateTextResponse> AnnotateTextResponse_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Document

// optional .google.cloud.language.v1.Document.Type type = 1;
inline void Document::clear_type() {
  type_ = 0;
}
inline ::google::cloud::language::v1::Document_Type Document::type() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.Document.type)
  return static_cast< ::google::cloud::language::v1::Document_Type >(type_);
}
inline void Document::set_type(::google::cloud::language::v1::Document_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.Document.type)
}

// optional string content = 2;
inline bool Document::has_content() const {
  return source_case() == kContent;
}
inline void Document::set_has_content() {
  _oneof_case_[0] = kContent;
}
inline void Document::clear_content() {
  if (has_content()) {
    source_.content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_source();
  }
}
inline const ::std::string& Document::content() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.Document.content)
  if (has_content()) {
    return source_.content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Document::set_content(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.Document.content)
  if (!has_content()) {
    clear_source();
    set_has_content();
    source_.content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  source_.content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.Document.content)
}
inline void Document::set_content(const char* value) {
  if (!has_content()) {
    clear_source();
    set_has_content();
    source_.content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  source_.content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.language.v1.Document.content)
}
inline void Document::set_content(const char* value, size_t size) {
  if (!has_content()) {
    clear_source();
    set_has_content();
    source_.content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  source_.content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.language.v1.Document.content)
}
inline ::std::string* Document::mutable_content() {
  if (!has_content()) {
    clear_source();
    set_has_content();
    source_.content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.Document.content)
  return source_.content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Document::release_content() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.Document.content)
  if (has_content()) {
    clear_has_source();
    return source_.content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Document::set_allocated_content(::std::string* content) {
  if (!has_content()) {
    source_.content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_source();
  if (content != NULL) {
    set_has_content();
    source_.content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        content);
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.Document.content)
}

// optional string gcs_content_uri = 3;
inline bool Document::has_gcs_content_uri() const {
  return source_case() == kGcsContentUri;
}
inline void Document::set_has_gcs_content_uri() {
  _oneof_case_[0] = kGcsContentUri;
}
inline void Document::clear_gcs_content_uri() {
  if (has_gcs_content_uri()) {
    source_.gcs_content_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_source();
  }
}
inline const ::std::string& Document::gcs_content_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.Document.gcs_content_uri)
  if (has_gcs_content_uri()) {
    return source_.gcs_content_uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Document::set_gcs_content_uri(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.Document.gcs_content_uri)
  if (!has_gcs_content_uri()) {
    clear_source();
    set_has_gcs_content_uri();
    source_.gcs_content_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  source_.gcs_content_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.Document.gcs_content_uri)
}
inline void Document::set_gcs_content_uri(const char* value) {
  if (!has_gcs_content_uri()) {
    clear_source();
    set_has_gcs_content_uri();
    source_.gcs_content_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  source_.gcs_content_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.language.v1.Document.gcs_content_uri)
}
inline void Document::set_gcs_content_uri(const char* value, size_t size) {
  if (!has_gcs_content_uri()) {
    clear_source();
    set_has_gcs_content_uri();
    source_.gcs_content_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  source_.gcs_content_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.language.v1.Document.gcs_content_uri)
}
inline ::std::string* Document::mutable_gcs_content_uri() {
  if (!has_gcs_content_uri()) {
    clear_source();
    set_has_gcs_content_uri();
    source_.gcs_content_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.Document.gcs_content_uri)
  return source_.gcs_content_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Document::release_gcs_content_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.Document.gcs_content_uri)
  if (has_gcs_content_uri()) {
    clear_has_source();
    return source_.gcs_content_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Document::set_allocated_gcs_content_uri(::std::string* gcs_content_uri) {
  if (!has_gcs_content_uri()) {
    source_.gcs_content_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_source();
  if (gcs_content_uri != NULL) {
    set_has_gcs_content_uri();
    source_.gcs_content_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        gcs_content_uri);
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.Document.gcs_content_uri)
}

// optional string language = 4;
inline void Document::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Document::language() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.Document.language)
  return language_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Document::set_language(const ::std::string& value) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.Document.language)
}
inline void Document::set_language(const char* value) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.language.v1.Document.language)
}
inline void Document::set_language(const char* value, size_t size) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.language.v1.Document.language)
}
inline ::std::string* Document::mutable_language() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.Document.language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Document::release_language() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.Document.language)
  
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Document::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    
  } else {
    
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.Document.language)
}

inline bool Document::has_source() const {
  return source_case() != SOURCE_NOT_SET;
}
inline void Document::clear_has_source() {
  _oneof_case_[0] = SOURCE_NOT_SET;
}
inline Document::SourceCase Document::source_case() const {
  return Document::SourceCase(_oneof_case_[0]);
}
inline const Document* Document::internal_default_instance() {
  return &Document_default_instance_.get();
}
// -------------------------------------------------------------------

// Sentence

// optional .google.cloud.language.v1.TextSpan text = 1;
inline bool Sentence::has_text() const {
  return this != internal_default_instance() && text_ != NULL;
}
inline void Sentence::clear_text() {
  if (GetArenaNoVirtual() == NULL && text_ != NULL) delete text_;
  text_ = NULL;
}
inline const ::google::cloud::language::v1::TextSpan& Sentence::text() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.Sentence.text)
  return text_ != NULL ? *text_
                         : *::google::cloud::language::v1::TextSpan::internal_default_instance();
}
inline ::google::cloud::language::v1::TextSpan* Sentence::mutable_text() {
  
  if (text_ == NULL) {
    text_ = new ::google::cloud::language::v1::TextSpan;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.Sentence.text)
  return text_;
}
inline ::google::cloud::language::v1::TextSpan* Sentence::release_text() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.Sentence.text)
  
  ::google::cloud::language::v1::TextSpan* temp = text_;
  text_ = NULL;
  return temp;
}
inline void Sentence::set_allocated_text(::google::cloud::language::v1::TextSpan* text) {
  delete text_;
  text_ = text;
  if (text) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.Sentence.text)
}

// optional .google.cloud.language.v1.Sentiment sentiment = 2;
inline bool Sentence::has_sentiment() const {
  return this != internal_default_instance() && sentiment_ != NULL;
}
inline void Sentence::clear_sentiment() {
  if (GetArenaNoVirtual() == NULL && sentiment_ != NULL) delete sentiment_;
  sentiment_ = NULL;
}
inline const ::google::cloud::language::v1::Sentiment& Sentence::sentiment() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.Sentence.sentiment)
  return sentiment_ != NULL ? *sentiment_
                         : *::google::cloud::language::v1::Sentiment::internal_default_instance();
}
inline ::google::cloud::language::v1::Sentiment* Sentence::mutable_sentiment() {
  
  if (sentiment_ == NULL) {
    sentiment_ = new ::google::cloud::language::v1::Sentiment;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.Sentence.sentiment)
  return sentiment_;
}
inline ::google::cloud::language::v1::Sentiment* Sentence::release_sentiment() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.Sentence.sentiment)
  
  ::google::cloud::language::v1::Sentiment* temp = sentiment_;
  sentiment_ = NULL;
  return temp;
}
inline void Sentence::set_allocated_sentiment(::google::cloud::language::v1::Sentiment* sentiment) {
  delete sentiment_;
  sentiment_ = sentiment;
  if (sentiment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.Sentence.sentiment)
}

inline const Sentence* Sentence::internal_default_instance() {
  return &Sentence_default_instance_.get();
}
// -------------------------------------------------------------------

// Entity

// optional string name = 1;
inline void Entity::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Entity::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.Entity.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Entity::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.Entity.name)
}
inline void Entity::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.language.v1.Entity.name)
}
inline void Entity::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.language.v1.Entity.name)
}
inline ::std::string* Entity::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.Entity.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Entity::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.Entity.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Entity::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.Entity.name)
}

// optional .google.cloud.language.v1.Entity.Type type = 2;
inline void Entity::clear_type() {
  type_ = 0;
}
inline ::google::cloud::language::v1::Entity_Type Entity::type() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.Entity.type)
  return static_cast< ::google::cloud::language::v1::Entity_Type >(type_);
}
inline void Entity::set_type(::google::cloud::language::v1::Entity_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.Entity.type)
}

// map<string, string> metadata = 3;
inline int Entity::metadata_size() const {
  return metadata_.size();
}
inline void Entity::clear_metadata() {
  metadata_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Entity::metadata() const {
  // @@protoc_insertion_point(field_map:google.cloud.language.v1.Entity.metadata)
  return metadata_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Entity::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.language.v1.Entity.metadata)
  return metadata_.MutableMap();
}

// optional float salience = 4;
inline void Entity::clear_salience() {
  salience_ = 0;
}
inline float Entity::salience() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.Entity.salience)
  return salience_;
}
inline void Entity::set_salience(float value) {
  
  salience_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.Entity.salience)
}

// repeated .google.cloud.language.v1.EntityMention mentions = 5;
inline int Entity::mentions_size() const {
  return mentions_.size();
}
inline void Entity::clear_mentions() {
  mentions_.Clear();
}
inline const ::google::cloud::language::v1::EntityMention& Entity::mentions(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.Entity.mentions)
  return mentions_.Get(index);
}
inline ::google::cloud::language::v1::EntityMention* Entity::mutable_mentions(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.Entity.mentions)
  return mentions_.Mutable(index);
}
inline ::google::cloud::language::v1::EntityMention* Entity::add_mentions() {
  // @@protoc_insertion_point(field_add:google.cloud.language.v1.Entity.mentions)
  return mentions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::EntityMention >*
Entity::mutable_mentions() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.language.v1.Entity.mentions)
  return &mentions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::EntityMention >&
Entity::mentions() const {
  // @@protoc_insertion_point(field_list:google.cloud.language.v1.Entity.mentions)
  return mentions_;
}

inline const Entity* Entity::internal_default_instance() {
  return &Entity_default_instance_.get();
}
// -------------------------------------------------------------------

// Token

// optional .google.cloud.language.v1.TextSpan text = 1;
inline bool Token::has_text() const {
  return this != internal_default_instance() && text_ != NULL;
}
inline void Token::clear_text() {
  if (GetArenaNoVirtual() == NULL && text_ != NULL) delete text_;
  text_ = NULL;
}
inline const ::google::cloud::language::v1::TextSpan& Token::text() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.Token.text)
  return text_ != NULL ? *text_
                         : *::google::cloud::language::v1::TextSpan::internal_default_instance();
}
inline ::google::cloud::language::v1::TextSpan* Token::mutable_text() {
  
  if (text_ == NULL) {
    text_ = new ::google::cloud::language::v1::TextSpan;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.Token.text)
  return text_;
}
inline ::google::cloud::language::v1::TextSpan* Token::release_text() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.Token.text)
  
  ::google::cloud::language::v1::TextSpan* temp = text_;
  text_ = NULL;
  return temp;
}
inline void Token::set_allocated_text(::google::cloud::language::v1::TextSpan* text) {
  delete text_;
  text_ = text;
  if (text) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.Token.text)
}

// optional .google.cloud.language.v1.PartOfSpeech part_of_speech = 2;
inline bool Token::has_part_of_speech() const {
  return this != internal_default_instance() && part_of_speech_ != NULL;
}
inline void Token::clear_part_of_speech() {
  if (GetArenaNoVirtual() == NULL && part_of_speech_ != NULL) delete part_of_speech_;
  part_of_speech_ = NULL;
}
inline const ::google::cloud::language::v1::PartOfSpeech& Token::part_of_speech() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.Token.part_of_speech)
  return part_of_speech_ != NULL ? *part_of_speech_
                         : *::google::cloud::language::v1::PartOfSpeech::internal_default_instance();
}
inline ::google::cloud::language::v1::PartOfSpeech* Token::mutable_part_of_speech() {
  
  if (part_of_speech_ == NULL) {
    part_of_speech_ = new ::google::cloud::language::v1::PartOfSpeech;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.Token.part_of_speech)
  return part_of_speech_;
}
inline ::google::cloud::language::v1::PartOfSpeech* Token::release_part_of_speech() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.Token.part_of_speech)
  
  ::google::cloud::language::v1::PartOfSpeech* temp = part_of_speech_;
  part_of_speech_ = NULL;
  return temp;
}
inline void Token::set_allocated_part_of_speech(::google::cloud::language::v1::PartOfSpeech* part_of_speech) {
  delete part_of_speech_;
  part_of_speech_ = part_of_speech;
  if (part_of_speech) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.Token.part_of_speech)
}

// optional .google.cloud.language.v1.DependencyEdge dependency_edge = 3;
inline bool Token::has_dependency_edge() const {
  return this != internal_default_instance() && dependency_edge_ != NULL;
}
inline void Token::clear_dependency_edge() {
  if (GetArenaNoVirtual() == NULL && dependency_edge_ != NULL) delete dependency_edge_;
  dependency_edge_ = NULL;
}
inline const ::google::cloud::language::v1::DependencyEdge& Token::dependency_edge() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.Token.dependency_edge)
  return dependency_edge_ != NULL ? *dependency_edge_
                         : *::google::cloud::language::v1::DependencyEdge::internal_default_instance();
}
inline ::google::cloud::language::v1::DependencyEdge* Token::mutable_dependency_edge() {
  
  if (dependency_edge_ == NULL) {
    dependency_edge_ = new ::google::cloud::language::v1::DependencyEdge;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.Token.dependency_edge)
  return dependency_edge_;
}
inline ::google::cloud::language::v1::DependencyEdge* Token::release_dependency_edge() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.Token.dependency_edge)
  
  ::google::cloud::language::v1::DependencyEdge* temp = dependency_edge_;
  dependency_edge_ = NULL;
  return temp;
}
inline void Token::set_allocated_dependency_edge(::google::cloud::language::v1::DependencyEdge* dependency_edge) {
  delete dependency_edge_;
  dependency_edge_ = dependency_edge;
  if (dependency_edge) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.Token.dependency_edge)
}

// optional string lemma = 4;
inline void Token::clear_lemma() {
  lemma_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Token::lemma() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.Token.lemma)
  return lemma_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Token::set_lemma(const ::std::string& value) {
  
  lemma_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.Token.lemma)
}
inline void Token::set_lemma(const char* value) {
  
  lemma_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.language.v1.Token.lemma)
}
inline void Token::set_lemma(const char* value, size_t size) {
  
  lemma_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.language.v1.Token.lemma)
}
inline ::std::string* Token::mutable_lemma() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.Token.lemma)
  return lemma_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Token::release_lemma() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.Token.lemma)
  
  return lemma_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Token::set_allocated_lemma(::std::string* lemma) {
  if (lemma != NULL) {
    
  } else {
    
  }
  lemma_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lemma);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.Token.lemma)
}

inline const Token* Token::internal_default_instance() {
  return &Token_default_instance_.get();
}
// -------------------------------------------------------------------

// Sentiment

// optional float magnitude = 2;
inline void Sentiment::clear_magnitude() {
  magnitude_ = 0;
}
inline float Sentiment::magnitude() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.Sentiment.magnitude)
  return magnitude_;
}
inline void Sentiment::set_magnitude(float value) {
  
  magnitude_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.Sentiment.magnitude)
}

// optional float score = 3;
inline void Sentiment::clear_score() {
  score_ = 0;
}
inline float Sentiment::score() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.Sentiment.score)
  return score_;
}
inline void Sentiment::set_score(float value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.Sentiment.score)
}

inline const Sentiment* Sentiment::internal_default_instance() {
  return &Sentiment_default_instance_.get();
}
// -------------------------------------------------------------------

// PartOfSpeech

// optional .google.cloud.language.v1.PartOfSpeech.Tag tag = 1;
inline void PartOfSpeech::clear_tag() {
  tag_ = 0;
}
inline ::google::cloud::language::v1::PartOfSpeech_Tag PartOfSpeech::tag() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.PartOfSpeech.tag)
  return static_cast< ::google::cloud::language::v1::PartOfSpeech_Tag >(tag_);
}
inline void PartOfSpeech::set_tag(::google::cloud::language::v1::PartOfSpeech_Tag value) {
  
  tag_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.PartOfSpeech.tag)
}

// optional .google.cloud.language.v1.PartOfSpeech.Aspect aspect = 2;
inline void PartOfSpeech::clear_aspect() {
  aspect_ = 0;
}
inline ::google::cloud::language::v1::PartOfSpeech_Aspect PartOfSpeech::aspect() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.PartOfSpeech.aspect)
  return static_cast< ::google::cloud::language::v1::PartOfSpeech_Aspect >(aspect_);
}
inline void PartOfSpeech::set_aspect(::google::cloud::language::v1::PartOfSpeech_Aspect value) {
  
  aspect_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.PartOfSpeech.aspect)
}

// optional .google.cloud.language.v1.PartOfSpeech.Case case = 3;
inline void PartOfSpeech::clear_case_() {
  case__ = 0;
}
inline ::google::cloud::language::v1::PartOfSpeech_Case PartOfSpeech::case_() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.PartOfSpeech.case)
  return static_cast< ::google::cloud::language::v1::PartOfSpeech_Case >(case__);
}
inline void PartOfSpeech::set_case_(::google::cloud::language::v1::PartOfSpeech_Case value) {
  
  case__ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.PartOfSpeech.case)
}

// optional .google.cloud.language.v1.PartOfSpeech.Form form = 4;
inline void PartOfSpeech::clear_form() {
  form_ = 0;
}
inline ::google::cloud::language::v1::PartOfSpeech_Form PartOfSpeech::form() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.PartOfSpeech.form)
  return static_cast< ::google::cloud::language::v1::PartOfSpeech_Form >(form_);
}
inline void PartOfSpeech::set_form(::google::cloud::language::v1::PartOfSpeech_Form value) {
  
  form_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.PartOfSpeech.form)
}

// optional .google.cloud.language.v1.PartOfSpeech.Gender gender = 5;
inline void PartOfSpeech::clear_gender() {
  gender_ = 0;
}
inline ::google::cloud::language::v1::PartOfSpeech_Gender PartOfSpeech::gender() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.PartOfSpeech.gender)
  return static_cast< ::google::cloud::language::v1::PartOfSpeech_Gender >(gender_);
}
inline void PartOfSpeech::set_gender(::google::cloud::language::v1::PartOfSpeech_Gender value) {
  
  gender_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.PartOfSpeech.gender)
}

// optional .google.cloud.language.v1.PartOfSpeech.Mood mood = 6;
inline void PartOfSpeech::clear_mood() {
  mood_ = 0;
}
inline ::google::cloud::language::v1::PartOfSpeech_Mood PartOfSpeech::mood() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.PartOfSpeech.mood)
  return static_cast< ::google::cloud::language::v1::PartOfSpeech_Mood >(mood_);
}
inline void PartOfSpeech::set_mood(::google::cloud::language::v1::PartOfSpeech_Mood value) {
  
  mood_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.PartOfSpeech.mood)
}

// optional .google.cloud.language.v1.PartOfSpeech.Number number = 7;
inline void PartOfSpeech::clear_number() {
  number_ = 0;
}
inline ::google::cloud::language::v1::PartOfSpeech_Number PartOfSpeech::number() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.PartOfSpeech.number)
  return static_cast< ::google::cloud::language::v1::PartOfSpeech_Number >(number_);
}
inline void PartOfSpeech::set_number(::google::cloud::language::v1::PartOfSpeech_Number value) {
  
  number_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.PartOfSpeech.number)
}

// optional .google.cloud.language.v1.PartOfSpeech.Person person = 8;
inline void PartOfSpeech::clear_person() {
  person_ = 0;
}
inline ::google::cloud::language::v1::PartOfSpeech_Person PartOfSpeech::person() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.PartOfSpeech.person)
  return static_cast< ::google::cloud::language::v1::PartOfSpeech_Person >(person_);
}
inline void PartOfSpeech::set_person(::google::cloud::language::v1::PartOfSpeech_Person value) {
  
  person_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.PartOfSpeech.person)
}

// optional .google.cloud.language.v1.PartOfSpeech.Proper proper = 9;
inline void PartOfSpeech::clear_proper() {
  proper_ = 0;
}
inline ::google::cloud::language::v1::PartOfSpeech_Proper PartOfSpeech::proper() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.PartOfSpeech.proper)
  return static_cast< ::google::cloud::language::v1::PartOfSpeech_Proper >(proper_);
}
inline void PartOfSpeech::set_proper(::google::cloud::language::v1::PartOfSpeech_Proper value) {
  
  proper_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.PartOfSpeech.proper)
}

// optional .google.cloud.language.v1.PartOfSpeech.Reciprocity reciprocity = 10;
inline void PartOfSpeech::clear_reciprocity() {
  reciprocity_ = 0;
}
inline ::google::cloud::language::v1::PartOfSpeech_Reciprocity PartOfSpeech::reciprocity() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.PartOfSpeech.reciprocity)
  return static_cast< ::google::cloud::language::v1::PartOfSpeech_Reciprocity >(reciprocity_);
}
inline void PartOfSpeech::set_reciprocity(::google::cloud::language::v1::PartOfSpeech_Reciprocity value) {
  
  reciprocity_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.PartOfSpeech.reciprocity)
}

// optional .google.cloud.language.v1.PartOfSpeech.Tense tense = 11;
inline void PartOfSpeech::clear_tense() {
  tense_ = 0;
}
inline ::google::cloud::language::v1::PartOfSpeech_Tense PartOfSpeech::tense() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.PartOfSpeech.tense)
  return static_cast< ::google::cloud::language::v1::PartOfSpeech_Tense >(tense_);
}
inline void PartOfSpeech::set_tense(::google::cloud::language::v1::PartOfSpeech_Tense value) {
  
  tense_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.PartOfSpeech.tense)
}

// optional .google.cloud.language.v1.PartOfSpeech.Voice voice = 12;
inline void PartOfSpeech::clear_voice() {
  voice_ = 0;
}
inline ::google::cloud::language::v1::PartOfSpeech_Voice PartOfSpeech::voice() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.PartOfSpeech.voice)
  return static_cast< ::google::cloud::language::v1::PartOfSpeech_Voice >(voice_);
}
inline void PartOfSpeech::set_voice(::google::cloud::language::v1::PartOfSpeech_Voice value) {
  
  voice_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.PartOfSpeech.voice)
}

inline const PartOfSpeech* PartOfSpeech::internal_default_instance() {
  return &PartOfSpeech_default_instance_.get();
}
// -------------------------------------------------------------------

// DependencyEdge

// optional int32 head_token_index = 1;
inline void DependencyEdge::clear_head_token_index() {
  head_token_index_ = 0;
}
inline ::google::protobuf::int32 DependencyEdge::head_token_index() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.DependencyEdge.head_token_index)
  return head_token_index_;
}
inline void DependencyEdge::set_head_token_index(::google::protobuf::int32 value) {
  
  head_token_index_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.DependencyEdge.head_token_index)
}

// optional .google.cloud.language.v1.DependencyEdge.Label label = 2;
inline void DependencyEdge::clear_label() {
  label_ = 0;
}
inline ::google::cloud::language::v1::DependencyEdge_Label DependencyEdge::label() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.DependencyEdge.label)
  return static_cast< ::google::cloud::language::v1::DependencyEdge_Label >(label_);
}
inline void DependencyEdge::set_label(::google::cloud::language::v1::DependencyEdge_Label value) {
  
  label_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.DependencyEdge.label)
}

inline const DependencyEdge* DependencyEdge::internal_default_instance() {
  return &DependencyEdge_default_instance_.get();
}
// -------------------------------------------------------------------

// EntityMention

// optional .google.cloud.language.v1.TextSpan text = 1;
inline bool EntityMention::has_text() const {
  return this != internal_default_instance() && text_ != NULL;
}
inline void EntityMention::clear_text() {
  if (GetArenaNoVirtual() == NULL && text_ != NULL) delete text_;
  text_ = NULL;
}
inline const ::google::cloud::language::v1::TextSpan& EntityMention::text() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.EntityMention.text)
  return text_ != NULL ? *text_
                         : *::google::cloud::language::v1::TextSpan::internal_default_instance();
}
inline ::google::cloud::language::v1::TextSpan* EntityMention::mutable_text() {
  
  if (text_ == NULL) {
    text_ = new ::google::cloud::language::v1::TextSpan;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.EntityMention.text)
  return text_;
}
inline ::google::cloud::language::v1::TextSpan* EntityMention::release_text() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.EntityMention.text)
  
  ::google::cloud::language::v1::TextSpan* temp = text_;
  text_ = NULL;
  return temp;
}
inline void EntityMention::set_allocated_text(::google::cloud::language::v1::TextSpan* text) {
  delete text_;
  text_ = text;
  if (text) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.EntityMention.text)
}

// optional .google.cloud.language.v1.EntityMention.Type type = 2;
inline void EntityMention::clear_type() {
  type_ = 0;
}
inline ::google::cloud::language::v1::EntityMention_Type EntityMention::type() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.EntityMention.type)
  return static_cast< ::google::cloud::language::v1::EntityMention_Type >(type_);
}
inline void EntityMention::set_type(::google::cloud::language::v1::EntityMention_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.EntityMention.type)
}

inline const EntityMention* EntityMention::internal_default_instance() {
  return &EntityMention_default_instance_.get();
}
// -------------------------------------------------------------------

// TextSpan

// optional string content = 1;
inline void TextSpan::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TextSpan::content() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.TextSpan.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TextSpan::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.TextSpan.content)
}
inline void TextSpan::set_content(const char* value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.language.v1.TextSpan.content)
}
inline void TextSpan::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.language.v1.TextSpan.content)
}
inline ::std::string* TextSpan::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.TextSpan.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TextSpan::release_content() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.TextSpan.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TextSpan::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.TextSpan.content)
}

// optional int32 begin_offset = 2;
inline void TextSpan::clear_begin_offset() {
  begin_offset_ = 0;
}
inline ::google::protobuf::int32 TextSpan::begin_offset() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.TextSpan.begin_offset)
  return begin_offset_;
}
inline void TextSpan::set_begin_offset(::google::protobuf::int32 value) {
  
  begin_offset_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.TextSpan.begin_offset)
}

inline const TextSpan* TextSpan::internal_default_instance() {
  return &TextSpan_default_instance_.get();
}
// -------------------------------------------------------------------

// AnalyzeSentimentRequest

// optional .google.cloud.language.v1.Document document = 1;
inline bool AnalyzeSentimentRequest::has_document() const {
  return this != internal_default_instance() && document_ != NULL;
}
inline void AnalyzeSentimentRequest::clear_document() {
  if (GetArenaNoVirtual() == NULL && document_ != NULL) delete document_;
  document_ = NULL;
}
inline const ::google::cloud::language::v1::Document& AnalyzeSentimentRequest::document() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnalyzeSentimentRequest.document)
  return document_ != NULL ? *document_
                         : *::google::cloud::language::v1::Document::internal_default_instance();
}
inline ::google::cloud::language::v1::Document* AnalyzeSentimentRequest::mutable_document() {
  
  if (document_ == NULL) {
    document_ = new ::google::cloud::language::v1::Document;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.AnalyzeSentimentRequest.document)
  return document_;
}
inline ::google::cloud::language::v1::Document* AnalyzeSentimentRequest::release_document() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.AnalyzeSentimentRequest.document)
  
  ::google::cloud::language::v1::Document* temp = document_;
  document_ = NULL;
  return temp;
}
inline void AnalyzeSentimentRequest::set_allocated_document(::google::cloud::language::v1::Document* document) {
  delete document_;
  document_ = document;
  if (document) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.AnalyzeSentimentRequest.document)
}

// optional .google.cloud.language.v1.EncodingType encoding_type = 2;
inline void AnalyzeSentimentRequest::clear_encoding_type() {
  encoding_type_ = 0;
}
inline ::google::cloud::language::v1::EncodingType AnalyzeSentimentRequest::encoding_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnalyzeSentimentRequest.encoding_type)
  return static_cast< ::google::cloud::language::v1::EncodingType >(encoding_type_);
}
inline void AnalyzeSentimentRequest::set_encoding_type(::google::cloud::language::v1::EncodingType value) {
  
  encoding_type_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.AnalyzeSentimentRequest.encoding_type)
}

inline const AnalyzeSentimentRequest* AnalyzeSentimentRequest::internal_default_instance() {
  return &AnalyzeSentimentRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// AnalyzeSentimentResponse

// optional .google.cloud.language.v1.Sentiment document_sentiment = 1;
inline bool AnalyzeSentimentResponse::has_document_sentiment() const {
  return this != internal_default_instance() && document_sentiment_ != NULL;
}
inline void AnalyzeSentimentResponse::clear_document_sentiment() {
  if (GetArenaNoVirtual() == NULL && document_sentiment_ != NULL) delete document_sentiment_;
  document_sentiment_ = NULL;
}
inline const ::google::cloud::language::v1::Sentiment& AnalyzeSentimentResponse::document_sentiment() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnalyzeSentimentResponse.document_sentiment)
  return document_sentiment_ != NULL ? *document_sentiment_
                         : *::google::cloud::language::v1::Sentiment::internal_default_instance();
}
inline ::google::cloud::language::v1::Sentiment* AnalyzeSentimentResponse::mutable_document_sentiment() {
  
  if (document_sentiment_ == NULL) {
    document_sentiment_ = new ::google::cloud::language::v1::Sentiment;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.AnalyzeSentimentResponse.document_sentiment)
  return document_sentiment_;
}
inline ::google::cloud::language::v1::Sentiment* AnalyzeSentimentResponse::release_document_sentiment() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.AnalyzeSentimentResponse.document_sentiment)
  
  ::google::cloud::language::v1::Sentiment* temp = document_sentiment_;
  document_sentiment_ = NULL;
  return temp;
}
inline void AnalyzeSentimentResponse::set_allocated_document_sentiment(::google::cloud::language::v1::Sentiment* document_sentiment) {
  delete document_sentiment_;
  document_sentiment_ = document_sentiment;
  if (document_sentiment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.AnalyzeSentimentResponse.document_sentiment)
}

// optional string language = 2;
inline void AnalyzeSentimentResponse::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AnalyzeSentimentResponse::language() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnalyzeSentimentResponse.language)
  return language_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnalyzeSentimentResponse::set_language(const ::std::string& value) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.AnalyzeSentimentResponse.language)
}
inline void AnalyzeSentimentResponse::set_language(const char* value) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.language.v1.AnalyzeSentimentResponse.language)
}
inline void AnalyzeSentimentResponse::set_language(const char* value, size_t size) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.language.v1.AnalyzeSentimentResponse.language)
}
inline ::std::string* AnalyzeSentimentResponse::mutable_language() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.AnalyzeSentimentResponse.language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnalyzeSentimentResponse::release_language() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.AnalyzeSentimentResponse.language)
  
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnalyzeSentimentResponse::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    
  } else {
    
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.AnalyzeSentimentResponse.language)
}

// repeated .google.cloud.language.v1.Sentence sentences = 3;
inline int AnalyzeSentimentResponse::sentences_size() const {
  return sentences_.size();
}
inline void AnalyzeSentimentResponse::clear_sentences() {
  sentences_.Clear();
}
inline const ::google::cloud::language::v1::Sentence& AnalyzeSentimentResponse::sentences(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnalyzeSentimentResponse.sentences)
  return sentences_.Get(index);
}
inline ::google::cloud::language::v1::Sentence* AnalyzeSentimentResponse::mutable_sentences(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.AnalyzeSentimentResponse.sentences)
  return sentences_.Mutable(index);
}
inline ::google::cloud::language::v1::Sentence* AnalyzeSentimentResponse::add_sentences() {
  // @@protoc_insertion_point(field_add:google.cloud.language.v1.AnalyzeSentimentResponse.sentences)
  return sentences_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Sentence >*
AnalyzeSentimentResponse::mutable_sentences() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.language.v1.AnalyzeSentimentResponse.sentences)
  return &sentences_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Sentence >&
AnalyzeSentimentResponse::sentences() const {
  // @@protoc_insertion_point(field_list:google.cloud.language.v1.AnalyzeSentimentResponse.sentences)
  return sentences_;
}

inline const AnalyzeSentimentResponse* AnalyzeSentimentResponse::internal_default_instance() {
  return &AnalyzeSentimentResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// AnalyzeEntitiesRequest

// optional .google.cloud.language.v1.Document document = 1;
inline bool AnalyzeEntitiesRequest::has_document() const {
  return this != internal_default_instance() && document_ != NULL;
}
inline void AnalyzeEntitiesRequest::clear_document() {
  if (GetArenaNoVirtual() == NULL && document_ != NULL) delete document_;
  document_ = NULL;
}
inline const ::google::cloud::language::v1::Document& AnalyzeEntitiesRequest::document() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnalyzeEntitiesRequest.document)
  return document_ != NULL ? *document_
                         : *::google::cloud::language::v1::Document::internal_default_instance();
}
inline ::google::cloud::language::v1::Document* AnalyzeEntitiesRequest::mutable_document() {
  
  if (document_ == NULL) {
    document_ = new ::google::cloud::language::v1::Document;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.AnalyzeEntitiesRequest.document)
  return document_;
}
inline ::google::cloud::language::v1::Document* AnalyzeEntitiesRequest::release_document() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.AnalyzeEntitiesRequest.document)
  
  ::google::cloud::language::v1::Document* temp = document_;
  document_ = NULL;
  return temp;
}
inline void AnalyzeEntitiesRequest::set_allocated_document(::google::cloud::language::v1::Document* document) {
  delete document_;
  document_ = document;
  if (document) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.AnalyzeEntitiesRequest.document)
}

// optional .google.cloud.language.v1.EncodingType encoding_type = 2;
inline void AnalyzeEntitiesRequest::clear_encoding_type() {
  encoding_type_ = 0;
}
inline ::google::cloud::language::v1::EncodingType AnalyzeEntitiesRequest::encoding_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnalyzeEntitiesRequest.encoding_type)
  return static_cast< ::google::cloud::language::v1::EncodingType >(encoding_type_);
}
inline void AnalyzeEntitiesRequest::set_encoding_type(::google::cloud::language::v1::EncodingType value) {
  
  encoding_type_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.AnalyzeEntitiesRequest.encoding_type)
}

inline const AnalyzeEntitiesRequest* AnalyzeEntitiesRequest::internal_default_instance() {
  return &AnalyzeEntitiesRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// AnalyzeEntitiesResponse

// repeated .google.cloud.language.v1.Entity entities = 1;
inline int AnalyzeEntitiesResponse::entities_size() const {
  return entities_.size();
}
inline void AnalyzeEntitiesResponse::clear_entities() {
  entities_.Clear();
}
inline const ::google::cloud::language::v1::Entity& AnalyzeEntitiesResponse::entities(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnalyzeEntitiesResponse.entities)
  return entities_.Get(index);
}
inline ::google::cloud::language::v1::Entity* AnalyzeEntitiesResponse::mutable_entities(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.AnalyzeEntitiesResponse.entities)
  return entities_.Mutable(index);
}
inline ::google::cloud::language::v1::Entity* AnalyzeEntitiesResponse::add_entities() {
  // @@protoc_insertion_point(field_add:google.cloud.language.v1.AnalyzeEntitiesResponse.entities)
  return entities_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Entity >*
AnalyzeEntitiesResponse::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.language.v1.AnalyzeEntitiesResponse.entities)
  return &entities_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Entity >&
AnalyzeEntitiesResponse::entities() const {
  // @@protoc_insertion_point(field_list:google.cloud.language.v1.AnalyzeEntitiesResponse.entities)
  return entities_;
}

// optional string language = 2;
inline void AnalyzeEntitiesResponse::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AnalyzeEntitiesResponse::language() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnalyzeEntitiesResponse.language)
  return language_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnalyzeEntitiesResponse::set_language(const ::std::string& value) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.AnalyzeEntitiesResponse.language)
}
inline void AnalyzeEntitiesResponse::set_language(const char* value) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.language.v1.AnalyzeEntitiesResponse.language)
}
inline void AnalyzeEntitiesResponse::set_language(const char* value, size_t size) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.language.v1.AnalyzeEntitiesResponse.language)
}
inline ::std::string* AnalyzeEntitiesResponse::mutable_language() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.AnalyzeEntitiesResponse.language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnalyzeEntitiesResponse::release_language() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.AnalyzeEntitiesResponse.language)
  
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnalyzeEntitiesResponse::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    
  } else {
    
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.AnalyzeEntitiesResponse.language)
}

inline const AnalyzeEntitiesResponse* AnalyzeEntitiesResponse::internal_default_instance() {
  return &AnalyzeEntitiesResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// AnalyzeSyntaxRequest

// optional .google.cloud.language.v1.Document document = 1;
inline bool AnalyzeSyntaxRequest::has_document() const {
  return this != internal_default_instance() && document_ != NULL;
}
inline void AnalyzeSyntaxRequest::clear_document() {
  if (GetArenaNoVirtual() == NULL && document_ != NULL) delete document_;
  document_ = NULL;
}
inline const ::google::cloud::language::v1::Document& AnalyzeSyntaxRequest::document() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnalyzeSyntaxRequest.document)
  return document_ != NULL ? *document_
                         : *::google::cloud::language::v1::Document::internal_default_instance();
}
inline ::google::cloud::language::v1::Document* AnalyzeSyntaxRequest::mutable_document() {
  
  if (document_ == NULL) {
    document_ = new ::google::cloud::language::v1::Document;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.AnalyzeSyntaxRequest.document)
  return document_;
}
inline ::google::cloud::language::v1::Document* AnalyzeSyntaxRequest::release_document() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.AnalyzeSyntaxRequest.document)
  
  ::google::cloud::language::v1::Document* temp = document_;
  document_ = NULL;
  return temp;
}
inline void AnalyzeSyntaxRequest::set_allocated_document(::google::cloud::language::v1::Document* document) {
  delete document_;
  document_ = document;
  if (document) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.AnalyzeSyntaxRequest.document)
}

// optional .google.cloud.language.v1.EncodingType encoding_type = 2;
inline void AnalyzeSyntaxRequest::clear_encoding_type() {
  encoding_type_ = 0;
}
inline ::google::cloud::language::v1::EncodingType AnalyzeSyntaxRequest::encoding_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnalyzeSyntaxRequest.encoding_type)
  return static_cast< ::google::cloud::language::v1::EncodingType >(encoding_type_);
}
inline void AnalyzeSyntaxRequest::set_encoding_type(::google::cloud::language::v1::EncodingType value) {
  
  encoding_type_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.AnalyzeSyntaxRequest.encoding_type)
}

inline const AnalyzeSyntaxRequest* AnalyzeSyntaxRequest::internal_default_instance() {
  return &AnalyzeSyntaxRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// AnalyzeSyntaxResponse

// repeated .google.cloud.language.v1.Sentence sentences = 1;
inline int AnalyzeSyntaxResponse::sentences_size() const {
  return sentences_.size();
}
inline void AnalyzeSyntaxResponse::clear_sentences() {
  sentences_.Clear();
}
inline const ::google::cloud::language::v1::Sentence& AnalyzeSyntaxResponse::sentences(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnalyzeSyntaxResponse.sentences)
  return sentences_.Get(index);
}
inline ::google::cloud::language::v1::Sentence* AnalyzeSyntaxResponse::mutable_sentences(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.AnalyzeSyntaxResponse.sentences)
  return sentences_.Mutable(index);
}
inline ::google::cloud::language::v1::Sentence* AnalyzeSyntaxResponse::add_sentences() {
  // @@protoc_insertion_point(field_add:google.cloud.language.v1.AnalyzeSyntaxResponse.sentences)
  return sentences_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Sentence >*
AnalyzeSyntaxResponse::mutable_sentences() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.language.v1.AnalyzeSyntaxResponse.sentences)
  return &sentences_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Sentence >&
AnalyzeSyntaxResponse::sentences() const {
  // @@protoc_insertion_point(field_list:google.cloud.language.v1.AnalyzeSyntaxResponse.sentences)
  return sentences_;
}

// repeated .google.cloud.language.v1.Token tokens = 2;
inline int AnalyzeSyntaxResponse::tokens_size() const {
  return tokens_.size();
}
inline void AnalyzeSyntaxResponse::clear_tokens() {
  tokens_.Clear();
}
inline const ::google::cloud::language::v1::Token& AnalyzeSyntaxResponse::tokens(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnalyzeSyntaxResponse.tokens)
  return tokens_.Get(index);
}
inline ::google::cloud::language::v1::Token* AnalyzeSyntaxResponse::mutable_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.AnalyzeSyntaxResponse.tokens)
  return tokens_.Mutable(index);
}
inline ::google::cloud::language::v1::Token* AnalyzeSyntaxResponse::add_tokens() {
  // @@protoc_insertion_point(field_add:google.cloud.language.v1.AnalyzeSyntaxResponse.tokens)
  return tokens_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Token >*
AnalyzeSyntaxResponse::mutable_tokens() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.language.v1.AnalyzeSyntaxResponse.tokens)
  return &tokens_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Token >&
AnalyzeSyntaxResponse::tokens() const {
  // @@protoc_insertion_point(field_list:google.cloud.language.v1.AnalyzeSyntaxResponse.tokens)
  return tokens_;
}

// optional string language = 3;
inline void AnalyzeSyntaxResponse::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AnalyzeSyntaxResponse::language() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnalyzeSyntaxResponse.language)
  return language_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnalyzeSyntaxResponse::set_language(const ::std::string& value) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.AnalyzeSyntaxResponse.language)
}
inline void AnalyzeSyntaxResponse::set_language(const char* value) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.language.v1.AnalyzeSyntaxResponse.language)
}
inline void AnalyzeSyntaxResponse::set_language(const char* value, size_t size) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.language.v1.AnalyzeSyntaxResponse.language)
}
inline ::std::string* AnalyzeSyntaxResponse::mutable_language() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.AnalyzeSyntaxResponse.language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnalyzeSyntaxResponse::release_language() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.AnalyzeSyntaxResponse.language)
  
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnalyzeSyntaxResponse::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    
  } else {
    
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.AnalyzeSyntaxResponse.language)
}

inline const AnalyzeSyntaxResponse* AnalyzeSyntaxResponse::internal_default_instance() {
  return &AnalyzeSyntaxResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// AnnotateTextRequest_Features

// optional bool extract_syntax = 1;
inline void AnnotateTextRequest_Features::clear_extract_syntax() {
  extract_syntax_ = false;
}
inline bool AnnotateTextRequest_Features::extract_syntax() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnnotateTextRequest.Features.extract_syntax)
  return extract_syntax_;
}
inline void AnnotateTextRequest_Features::set_extract_syntax(bool value) {
  
  extract_syntax_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.AnnotateTextRequest.Features.extract_syntax)
}

// optional bool extract_entities = 2;
inline void AnnotateTextRequest_Features::clear_extract_entities() {
  extract_entities_ = false;
}
inline bool AnnotateTextRequest_Features::extract_entities() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnnotateTextRequest.Features.extract_entities)
  return extract_entities_;
}
inline void AnnotateTextRequest_Features::set_extract_entities(bool value) {
  
  extract_entities_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.AnnotateTextRequest.Features.extract_entities)
}

// optional bool extract_document_sentiment = 3;
inline void AnnotateTextRequest_Features::clear_extract_document_sentiment() {
  extract_document_sentiment_ = false;
}
inline bool AnnotateTextRequest_Features::extract_document_sentiment() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnnotateTextRequest.Features.extract_document_sentiment)
  return extract_document_sentiment_;
}
inline void AnnotateTextRequest_Features::set_extract_document_sentiment(bool value) {
  
  extract_document_sentiment_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.AnnotateTextRequest.Features.extract_document_sentiment)
}

inline const AnnotateTextRequest_Features* AnnotateTextRequest_Features::internal_default_instance() {
  return &AnnotateTextRequest_Features_default_instance_.get();
}
// -------------------------------------------------------------------

// AnnotateTextRequest

// optional .google.cloud.language.v1.Document document = 1;
inline bool AnnotateTextRequest::has_document() const {
  return this != internal_default_instance() && document_ != NULL;
}
inline void AnnotateTextRequest::clear_document() {
  if (GetArenaNoVirtual() == NULL && document_ != NULL) delete document_;
  document_ = NULL;
}
inline const ::google::cloud::language::v1::Document& AnnotateTextRequest::document() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnnotateTextRequest.document)
  return document_ != NULL ? *document_
                         : *::google::cloud::language::v1::Document::internal_default_instance();
}
inline ::google::cloud::language::v1::Document* AnnotateTextRequest::mutable_document() {
  
  if (document_ == NULL) {
    document_ = new ::google::cloud::language::v1::Document;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.AnnotateTextRequest.document)
  return document_;
}
inline ::google::cloud::language::v1::Document* AnnotateTextRequest::release_document() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.AnnotateTextRequest.document)
  
  ::google::cloud::language::v1::Document* temp = document_;
  document_ = NULL;
  return temp;
}
inline void AnnotateTextRequest::set_allocated_document(::google::cloud::language::v1::Document* document) {
  delete document_;
  document_ = document;
  if (document) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.AnnotateTextRequest.document)
}

// optional .google.cloud.language.v1.AnnotateTextRequest.Features features = 2;
inline bool AnnotateTextRequest::has_features() const {
  return this != internal_default_instance() && features_ != NULL;
}
inline void AnnotateTextRequest::clear_features() {
  if (GetArenaNoVirtual() == NULL && features_ != NULL) delete features_;
  features_ = NULL;
}
inline const ::google::cloud::language::v1::AnnotateTextRequest_Features& AnnotateTextRequest::features() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnnotateTextRequest.features)
  return features_ != NULL ? *features_
                         : *::google::cloud::language::v1::AnnotateTextRequest_Features::internal_default_instance();
}
inline ::google::cloud::language::v1::AnnotateTextRequest_Features* AnnotateTextRequest::mutable_features() {
  
  if (features_ == NULL) {
    features_ = new ::google::cloud::language::v1::AnnotateTextRequest_Features;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.AnnotateTextRequest.features)
  return features_;
}
inline ::google::cloud::language::v1::AnnotateTextRequest_Features* AnnotateTextRequest::release_features() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.AnnotateTextRequest.features)
  
  ::google::cloud::language::v1::AnnotateTextRequest_Features* temp = features_;
  features_ = NULL;
  return temp;
}
inline void AnnotateTextRequest::set_allocated_features(::google::cloud::language::v1::AnnotateTextRequest_Features* features) {
  delete features_;
  features_ = features;
  if (features) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.AnnotateTextRequest.features)
}

// optional .google.cloud.language.v1.EncodingType encoding_type = 3;
inline void AnnotateTextRequest::clear_encoding_type() {
  encoding_type_ = 0;
}
inline ::google::cloud::language::v1::EncodingType AnnotateTextRequest::encoding_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnnotateTextRequest.encoding_type)
  return static_cast< ::google::cloud::language::v1::EncodingType >(encoding_type_);
}
inline void AnnotateTextRequest::set_encoding_type(::google::cloud::language::v1::EncodingType value) {
  
  encoding_type_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.AnnotateTextRequest.encoding_type)
}

inline const AnnotateTextRequest* AnnotateTextRequest::internal_default_instance() {
  return &AnnotateTextRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// AnnotateTextResponse

// repeated .google.cloud.language.v1.Sentence sentences = 1;
inline int AnnotateTextResponse::sentences_size() const {
  return sentences_.size();
}
inline void AnnotateTextResponse::clear_sentences() {
  sentences_.Clear();
}
inline const ::google::cloud::language::v1::Sentence& AnnotateTextResponse::sentences(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnnotateTextResponse.sentences)
  return sentences_.Get(index);
}
inline ::google::cloud::language::v1::Sentence* AnnotateTextResponse::mutable_sentences(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.AnnotateTextResponse.sentences)
  return sentences_.Mutable(index);
}
inline ::google::cloud::language::v1::Sentence* AnnotateTextResponse::add_sentences() {
  // @@protoc_insertion_point(field_add:google.cloud.language.v1.AnnotateTextResponse.sentences)
  return sentences_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Sentence >*
AnnotateTextResponse::mutable_sentences() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.language.v1.AnnotateTextResponse.sentences)
  return &sentences_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Sentence >&
AnnotateTextResponse::sentences() const {
  // @@protoc_insertion_point(field_list:google.cloud.language.v1.AnnotateTextResponse.sentences)
  return sentences_;
}

// repeated .google.cloud.language.v1.Token tokens = 2;
inline int AnnotateTextResponse::tokens_size() const {
  return tokens_.size();
}
inline void AnnotateTextResponse::clear_tokens() {
  tokens_.Clear();
}
inline const ::google::cloud::language::v1::Token& AnnotateTextResponse::tokens(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnnotateTextResponse.tokens)
  return tokens_.Get(index);
}
inline ::google::cloud::language::v1::Token* AnnotateTextResponse::mutable_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.AnnotateTextResponse.tokens)
  return tokens_.Mutable(index);
}
inline ::google::cloud::language::v1::Token* AnnotateTextResponse::add_tokens() {
  // @@protoc_insertion_point(field_add:google.cloud.language.v1.AnnotateTextResponse.tokens)
  return tokens_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Token >*
AnnotateTextResponse::mutable_tokens() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.language.v1.AnnotateTextResponse.tokens)
  return &tokens_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Token >&
AnnotateTextResponse::tokens() const {
  // @@protoc_insertion_point(field_list:google.cloud.language.v1.AnnotateTextResponse.tokens)
  return tokens_;
}

// repeated .google.cloud.language.v1.Entity entities = 3;
inline int AnnotateTextResponse::entities_size() const {
  return entities_.size();
}
inline void AnnotateTextResponse::clear_entities() {
  entities_.Clear();
}
inline const ::google::cloud::language::v1::Entity& AnnotateTextResponse::entities(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnnotateTextResponse.entities)
  return entities_.Get(index);
}
inline ::google::cloud::language::v1::Entity* AnnotateTextResponse::mutable_entities(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.AnnotateTextResponse.entities)
  return entities_.Mutable(index);
}
inline ::google::cloud::language::v1::Entity* AnnotateTextResponse::add_entities() {
  // @@protoc_insertion_point(field_add:google.cloud.language.v1.AnnotateTextResponse.entities)
  return entities_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Entity >*
AnnotateTextResponse::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.language.v1.AnnotateTextResponse.entities)
  return &entities_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1::Entity >&
AnnotateTextResponse::entities() const {
  // @@protoc_insertion_point(field_list:google.cloud.language.v1.AnnotateTextResponse.entities)
  return entities_;
}

// optional .google.cloud.language.v1.Sentiment document_sentiment = 4;
inline bool AnnotateTextResponse::has_document_sentiment() const {
  return this != internal_default_instance() && document_sentiment_ != NULL;
}
inline void AnnotateTextResponse::clear_document_sentiment() {
  if (GetArenaNoVirtual() == NULL && document_sentiment_ != NULL) delete document_sentiment_;
  document_sentiment_ = NULL;
}
inline const ::google::cloud::language::v1::Sentiment& AnnotateTextResponse::document_sentiment() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnnotateTextResponse.document_sentiment)
  return document_sentiment_ != NULL ? *document_sentiment_
                         : *::google::cloud::language::v1::Sentiment::internal_default_instance();
}
inline ::google::cloud::language::v1::Sentiment* AnnotateTextResponse::mutable_document_sentiment() {
  
  if (document_sentiment_ == NULL) {
    document_sentiment_ = new ::google::cloud::language::v1::Sentiment;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.AnnotateTextResponse.document_sentiment)
  return document_sentiment_;
}
inline ::google::cloud::language::v1::Sentiment* AnnotateTextResponse::release_document_sentiment() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.AnnotateTextResponse.document_sentiment)
  
  ::google::cloud::language::v1::Sentiment* temp = document_sentiment_;
  document_sentiment_ = NULL;
  return temp;
}
inline void AnnotateTextResponse::set_allocated_document_sentiment(::google::cloud::language::v1::Sentiment* document_sentiment) {
  delete document_sentiment_;
  document_sentiment_ = document_sentiment;
  if (document_sentiment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.AnnotateTextResponse.document_sentiment)
}

// optional string language = 5;
inline void AnnotateTextResponse::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AnnotateTextResponse::language() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1.AnnotateTextResponse.language)
  return language_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnnotateTextResponse::set_language(const ::std::string& value) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.language.v1.AnnotateTextResponse.language)
}
inline void AnnotateTextResponse::set_language(const char* value) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.language.v1.AnnotateTextResponse.language)
}
inline void AnnotateTextResponse::set_language(const char* value, size_t size) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.language.v1.AnnotateTextResponse.language)
}
inline ::std::string* AnnotateTextResponse::mutable_language() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1.AnnotateTextResponse.language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnnotateTextResponse::release_language() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1.AnnotateTextResponse.language)
  
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnnotateTextResponse::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    
  } else {
    
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1.AnnotateTextResponse.language)
}

inline const AnnotateTextResponse* AnnotateTextResponse::internal_default_instance() {
  return &AnnotateTextResponse_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace language
}  // namespace cloud
}  // namespace google

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::cloud::language::v1::Document_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::language::v1::Document_Type>() {
  return ::google::cloud::language::v1::Document_Type_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::language::v1::Entity_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::language::v1::Entity_Type>() {
  return ::google::cloud::language::v1::Entity_Type_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::language::v1::PartOfSpeech_Tag> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::language::v1::PartOfSpeech_Tag>() {
  return ::google::cloud::language::v1::PartOfSpeech_Tag_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::language::v1::PartOfSpeech_Aspect> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::language::v1::PartOfSpeech_Aspect>() {
  return ::google::cloud::language::v1::PartOfSpeech_Aspect_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::language::v1::PartOfSpeech_Case> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::language::v1::PartOfSpeech_Case>() {
  return ::google::cloud::language::v1::PartOfSpeech_Case_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::language::v1::PartOfSpeech_Form> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::language::v1::PartOfSpeech_Form>() {
  return ::google::cloud::language::v1::PartOfSpeech_Form_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::language::v1::PartOfSpeech_Gender> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::language::v1::PartOfSpeech_Gender>() {
  return ::google::cloud::language::v1::PartOfSpeech_Gender_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::language::v1::PartOfSpeech_Mood> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::language::v1::PartOfSpeech_Mood>() {
  return ::google::cloud::language::v1::PartOfSpeech_Mood_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::language::v1::PartOfSpeech_Number> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::language::v1::PartOfSpeech_Number>() {
  return ::google::cloud::language::v1::PartOfSpeech_Number_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::language::v1::PartOfSpeech_Person> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::language::v1::PartOfSpeech_Person>() {
  return ::google::cloud::language::v1::PartOfSpeech_Person_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::language::v1::PartOfSpeech_Proper> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::language::v1::PartOfSpeech_Proper>() {
  return ::google::cloud::language::v1::PartOfSpeech_Proper_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::language::v1::PartOfSpeech_Reciprocity> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::language::v1::PartOfSpeech_Reciprocity>() {
  return ::google::cloud::language::v1::PartOfSpeech_Reciprocity_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::language::v1::PartOfSpeech_Tense> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::language::v1::PartOfSpeech_Tense>() {
  return ::google::cloud::language::v1::PartOfSpeech_Tense_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::language::v1::PartOfSpeech_Voice> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::language::v1::PartOfSpeech_Voice>() {
  return ::google::cloud::language::v1::PartOfSpeech_Voice_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::language::v1::DependencyEdge_Label> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::language::v1::DependencyEdge_Label>() {
  return ::google::cloud::language::v1::DependencyEdge_Label_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::language::v1::EntityMention_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::language::v1::EntityMention_Type>() {
  return ::google::cloud::language::v1::EntityMention_Type_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::language::v1::EncodingType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::language::v1::EncodingType>() {
  return ::google::cloud::language::v1::EncodingType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fcloud_2flanguage_2fv1_2flanguage_5fservice_2eproto__INCLUDED
