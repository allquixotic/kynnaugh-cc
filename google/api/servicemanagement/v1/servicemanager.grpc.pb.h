// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: google/api/servicemanagement/v1/servicemanager.proto
// Original file comments:
// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto__INCLUDED
#define GRPC_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto__INCLUDED

#include "google/api/servicemanagement/v1/servicemanager.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace google {
namespace api {
namespace servicemanagement {
namespace v1 {

// [Google Service Management API](/service-management/overview)
class ServiceManager GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Lists all managed services.
    virtual ::grpc::Status ListServices(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServicesRequest& request, ::google::api::servicemanagement::v1::ListServicesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::ListServicesResponse>> AsyncListServices(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::ListServicesResponse>>(AsyncListServicesRaw(context, request, cq));
    }
    // Gets a managed service.
    virtual ::grpc::Status GetService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceRequest& request, ::google::api::servicemanagement::v1::ManagedService* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::ManagedService>> AsyncGetService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::ManagedService>>(AsyncGetServiceRaw(context, request, cq));
    }
    // Creates a new managed service.
    // Please note one producer project can own no more than 20 services.
    //
    // Operation<response: ManagedService>
    virtual ::grpc::Status CreateService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncCreateService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncCreateServiceRaw(context, request, cq));
    }
    // Deletes a managed service. This method will change the serivce in the
    // `Soft-Delete` state for 30 days. Within this period, service producers may
    // call [UndeleteService][google.api.servicemanagement.v1.ServiceManager.UndeleteService] to restore the service.
    // After 30 days, the service will be permanently deleted.
    //
    // Operation<response: google.protobuf.Empty>
    virtual ::grpc::Status DeleteService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::DeleteServiceRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncDeleteService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::DeleteServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncDeleteServiceRaw(context, request, cq));
    }
    // Revives a previously deleted managed service. The method restores the
    // service using the configuration at the time the service was deleted.
    // The target service must exist and must have been deleted within the
    // last 30 days.
    //
    // Operation<response: UndeleteServiceResponse>
    virtual ::grpc::Status UndeleteService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::UndeleteServiceRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncUndeleteService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::UndeleteServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncUndeleteServiceRaw(context, request, cq));
    }
    // Lists the history of the service configuration for a managed service,
    // from the newest to the oldest.
    virtual ::grpc::Status ListServiceConfigs(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServiceConfigsRequest& request, ::google::api::servicemanagement::v1::ListServiceConfigsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::ListServiceConfigsResponse>> AsyncListServiceConfigs(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServiceConfigsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::ListServiceConfigsResponse>>(AsyncListServiceConfigsRaw(context, request, cq));
    }
    // Gets a service configuration (version) for a managed service.
    virtual ::grpc::Status GetServiceConfig(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceConfigRequest& request, ::google::api::Service* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::Service>> AsyncGetServiceConfig(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::Service>>(AsyncGetServiceConfigRaw(context, request, cq));
    }
    // Creates a new service configuration (version) for a managed service.
    // This method only stores the service configuration. To roll out the service
    // configuration to backend systems please call
    // [CreateServiceRollout][google.api.servicemanagement.v1.ServiceManager.CreateServiceRollout].
    virtual ::grpc::Status CreateServiceConfig(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceConfigRequest& request, ::google::api::Service* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::Service>> AsyncCreateServiceConfig(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::Service>>(AsyncCreateServiceConfigRaw(context, request, cq));
    }
    // Creates a new service configuration (version) for a managed service based
    // on
    // user-supplied configuration source files (for example: OpenAPI
    // Specification). This method stores the source configurations as well as the
    // generated service configuration. To rollout the service configuration to
    // other services,
    // please call [CreateServiceRollout][google.api.servicemanagement.v1.ServiceManager.CreateServiceRollout].
    //
    // Operation<response: SubmitConfigSourceResponse>
    virtual ::grpc::Status SubmitConfigSource(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::SubmitConfigSourceRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncSubmitConfigSource(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::SubmitConfigSourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncSubmitConfigSourceRaw(context, request, cq));
    }
    // Lists the history of the service configuration rollouts for a managed
    // service, from the newest to the oldest.
    virtual ::grpc::Status ListServiceRollouts(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServiceRolloutsRequest& request, ::google::api::servicemanagement::v1::ListServiceRolloutsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::ListServiceRolloutsResponse>> AsyncListServiceRollouts(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServiceRolloutsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::ListServiceRolloutsResponse>>(AsyncListServiceRolloutsRaw(context, request, cq));
    }
    // Gets a service configuration [rollout][google.api.servicemanagement.v1.Rollout].
    virtual ::grpc::Status GetServiceRollout(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceRolloutRequest& request, ::google::api::servicemanagement::v1::Rollout* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::Rollout>> AsyncGetServiceRollout(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceRolloutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::Rollout>>(AsyncGetServiceRolloutRaw(context, request, cq));
    }
    // Creates a new service configuration rollout. Based on rollout, the
    // Google Service Management will roll out the service configurations to
    // different backend services. For example, the logging configuration will be
    // pushed to Google Cloud Logging.
    //
    // Please note that any previous pending and running Rollouts and associated
    // Operations will be automatically cancelled so that the latest Rollout will
    // not be blocked by previous Rollouts.
    //
    // Operation<response: Rollout>
    virtual ::grpc::Status CreateServiceRollout(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceRolloutRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncCreateServiceRollout(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceRolloutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncCreateServiceRolloutRaw(context, request, cq));
    }
    // Generates and returns a report (errors, warnings and changes from
    // existing configurations) associated with
    // GenerateConfigReportRequest.new_value
    //
    // If GenerateConfigReportRequest.old_value is specified,
    // GenerateConfigReportRequest will contain a single ChangeReport based on the
    // comparison between GenerateConfigReportRequest.new_value and
    // GenerateConfigReportRequest.old_value.
    // If GenerateConfigReportRequest.old_value is not specified, this method
    // will compare GenerateConfigReportRequest.new_value with the last pushed
    // service configuration.
    virtual ::grpc::Status GenerateConfigReport(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GenerateConfigReportRequest& request, ::google::api::servicemanagement::v1::GenerateConfigReportResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::GenerateConfigReportResponse>> AsyncGenerateConfigReport(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GenerateConfigReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::GenerateConfigReportResponse>>(AsyncGenerateConfigReportRaw(context, request, cq));
    }
    // Enable a managed service for a project with default setting.
    //
    // Operation<response: EnableServiceResponse>
    //
    // [google.rpc.Status][google.rpc.Status] errors may contain a
    // [google.rpc.PreconditionFailure][] error detail.
    virtual ::grpc::Status EnableService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::EnableServiceRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncEnableService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::EnableServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncEnableServiceRaw(context, request, cq));
    }
    // Disable a managed service for a project.
    //
    // Operation<response: DisableServiceResponse>
    virtual ::grpc::Status DisableService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::DisableServiceRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncDisableService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::DisableServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncDisableServiceRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::ListServicesResponse>* AsyncListServicesRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServicesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::ManagedService>* AsyncGetServiceRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncCreateServiceRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncDeleteServiceRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::DeleteServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncUndeleteServiceRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::UndeleteServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::ListServiceConfigsResponse>* AsyncListServiceConfigsRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServiceConfigsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::api::Service>* AsyncGetServiceConfigRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::api::Service>* AsyncCreateServiceConfigRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncSubmitConfigSourceRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::SubmitConfigSourceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::ListServiceRolloutsResponse>* AsyncListServiceRolloutsRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServiceRolloutsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::Rollout>* AsyncGetServiceRolloutRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceRolloutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncCreateServiceRolloutRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceRolloutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::GenerateConfigReportResponse>* AsyncGenerateConfigReportRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GenerateConfigReportRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncEnableServiceRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::EnableServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncDisableServiceRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::DisableServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ListServices(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServicesRequest& request, ::google::api::servicemanagement::v1::ListServicesResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::ListServicesResponse>> AsyncListServices(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::ListServicesResponse>>(AsyncListServicesRaw(context, request, cq));
    }
    ::grpc::Status GetService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceRequest& request, ::google::api::servicemanagement::v1::ManagedService* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::ManagedService>> AsyncGetService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::ManagedService>>(AsyncGetServiceRaw(context, request, cq));
    }
    ::grpc::Status CreateService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceRequest& request, ::google::longrunning::Operation* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncCreateService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncCreateServiceRaw(context, request, cq));
    }
    ::grpc::Status DeleteService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::DeleteServiceRequest& request, ::google::longrunning::Operation* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncDeleteService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::DeleteServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncDeleteServiceRaw(context, request, cq));
    }
    ::grpc::Status UndeleteService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::UndeleteServiceRequest& request, ::google::longrunning::Operation* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncUndeleteService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::UndeleteServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncUndeleteServiceRaw(context, request, cq));
    }
    ::grpc::Status ListServiceConfigs(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServiceConfigsRequest& request, ::google::api::servicemanagement::v1::ListServiceConfigsResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::ListServiceConfigsResponse>> AsyncListServiceConfigs(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServiceConfigsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::ListServiceConfigsResponse>>(AsyncListServiceConfigsRaw(context, request, cq));
    }
    ::grpc::Status GetServiceConfig(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceConfigRequest& request, ::google::api::Service* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::Service>> AsyncGetServiceConfig(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::Service>>(AsyncGetServiceConfigRaw(context, request, cq));
    }
    ::grpc::Status CreateServiceConfig(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceConfigRequest& request, ::google::api::Service* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::Service>> AsyncCreateServiceConfig(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::Service>>(AsyncCreateServiceConfigRaw(context, request, cq));
    }
    ::grpc::Status SubmitConfigSource(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::SubmitConfigSourceRequest& request, ::google::longrunning::Operation* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncSubmitConfigSource(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::SubmitConfigSourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncSubmitConfigSourceRaw(context, request, cq));
    }
    ::grpc::Status ListServiceRollouts(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServiceRolloutsRequest& request, ::google::api::servicemanagement::v1::ListServiceRolloutsResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::ListServiceRolloutsResponse>> AsyncListServiceRollouts(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServiceRolloutsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::ListServiceRolloutsResponse>>(AsyncListServiceRolloutsRaw(context, request, cq));
    }
    ::grpc::Status GetServiceRollout(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceRolloutRequest& request, ::google::api::servicemanagement::v1::Rollout* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::Rollout>> AsyncGetServiceRollout(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceRolloutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::Rollout>>(AsyncGetServiceRolloutRaw(context, request, cq));
    }
    ::grpc::Status CreateServiceRollout(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceRolloutRequest& request, ::google::longrunning::Operation* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncCreateServiceRollout(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceRolloutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncCreateServiceRolloutRaw(context, request, cq));
    }
    ::grpc::Status GenerateConfigReport(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GenerateConfigReportRequest& request, ::google::api::servicemanagement::v1::GenerateConfigReportResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::GenerateConfigReportResponse>> AsyncGenerateConfigReport(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GenerateConfigReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::GenerateConfigReportResponse>>(AsyncGenerateConfigReportRaw(context, request, cq));
    }
    ::grpc::Status EnableService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::EnableServiceRequest& request, ::google::longrunning::Operation* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncEnableService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::EnableServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncEnableServiceRaw(context, request, cq));
    }
    ::grpc::Status DisableService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::DisableServiceRequest& request, ::google::longrunning::Operation* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncDisableService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::DisableServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncDisableServiceRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::ListServicesResponse>* AsyncListServicesRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServicesRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::ManagedService>* AsyncGetServiceRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncCreateServiceRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncDeleteServiceRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::DeleteServiceRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncUndeleteServiceRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::UndeleteServiceRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::ListServiceConfigsResponse>* AsyncListServiceConfigsRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServiceConfigsRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::api::Service>* AsyncGetServiceConfigRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceConfigRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::api::Service>* AsyncCreateServiceConfigRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceConfigRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncSubmitConfigSourceRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::SubmitConfigSourceRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::ListServiceRolloutsResponse>* AsyncListServiceRolloutsRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServiceRolloutsRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::Rollout>* AsyncGetServiceRolloutRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceRolloutRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncCreateServiceRolloutRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceRolloutRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::GenerateConfigReportResponse>* AsyncGenerateConfigReportRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GenerateConfigReportRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncEnableServiceRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::EnableServiceRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncDisableServiceRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::DisableServiceRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_ListServices_;
    const ::grpc::RpcMethod rpcmethod_GetService_;
    const ::grpc::RpcMethod rpcmethod_CreateService_;
    const ::grpc::RpcMethod rpcmethod_DeleteService_;
    const ::grpc::RpcMethod rpcmethod_UndeleteService_;
    const ::grpc::RpcMethod rpcmethod_ListServiceConfigs_;
    const ::grpc::RpcMethod rpcmethod_GetServiceConfig_;
    const ::grpc::RpcMethod rpcmethod_CreateServiceConfig_;
    const ::grpc::RpcMethod rpcmethod_SubmitConfigSource_;
    const ::grpc::RpcMethod rpcmethod_ListServiceRollouts_;
    const ::grpc::RpcMethod rpcmethod_GetServiceRollout_;
    const ::grpc::RpcMethod rpcmethod_CreateServiceRollout_;
    const ::grpc::RpcMethod rpcmethod_GenerateConfigReport_;
    const ::grpc::RpcMethod rpcmethod_EnableService_;
    const ::grpc::RpcMethod rpcmethod_DisableService_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Lists all managed services.
    virtual ::grpc::Status ListServices(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::ListServicesRequest* request, ::google::api::servicemanagement::v1::ListServicesResponse* response);
    // Gets a managed service.
    virtual ::grpc::Status GetService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GetServiceRequest* request, ::google::api::servicemanagement::v1::ManagedService* response);
    // Creates a new managed service.
    // Please note one producer project can own no more than 20 services.
    //
    // Operation<response: ManagedService>
    virtual ::grpc::Status CreateService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::CreateServiceRequest* request, ::google::longrunning::Operation* response);
    // Deletes a managed service. This method will change the serivce in the
    // `Soft-Delete` state for 30 days. Within this period, service producers may
    // call [UndeleteService][google.api.servicemanagement.v1.ServiceManager.UndeleteService] to restore the service.
    // After 30 days, the service will be permanently deleted.
    //
    // Operation<response: google.protobuf.Empty>
    virtual ::grpc::Status DeleteService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::DeleteServiceRequest* request, ::google::longrunning::Operation* response);
    // Revives a previously deleted managed service. The method restores the
    // service using the configuration at the time the service was deleted.
    // The target service must exist and must have been deleted within the
    // last 30 days.
    //
    // Operation<response: UndeleteServiceResponse>
    virtual ::grpc::Status UndeleteService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::UndeleteServiceRequest* request, ::google::longrunning::Operation* response);
    // Lists the history of the service configuration for a managed service,
    // from the newest to the oldest.
    virtual ::grpc::Status ListServiceConfigs(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::ListServiceConfigsRequest* request, ::google::api::servicemanagement::v1::ListServiceConfigsResponse* response);
    // Gets a service configuration (version) for a managed service.
    virtual ::grpc::Status GetServiceConfig(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GetServiceConfigRequest* request, ::google::api::Service* response);
    // Creates a new service configuration (version) for a managed service.
    // This method only stores the service configuration. To roll out the service
    // configuration to backend systems please call
    // [CreateServiceRollout][google.api.servicemanagement.v1.ServiceManager.CreateServiceRollout].
    virtual ::grpc::Status CreateServiceConfig(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::CreateServiceConfigRequest* request, ::google::api::Service* response);
    // Creates a new service configuration (version) for a managed service based
    // on
    // user-supplied configuration source files (for example: OpenAPI
    // Specification). This method stores the source configurations as well as the
    // generated service configuration. To rollout the service configuration to
    // other services,
    // please call [CreateServiceRollout][google.api.servicemanagement.v1.ServiceManager.CreateServiceRollout].
    //
    // Operation<response: SubmitConfigSourceResponse>
    virtual ::grpc::Status SubmitConfigSource(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::SubmitConfigSourceRequest* request, ::google::longrunning::Operation* response);
    // Lists the history of the service configuration rollouts for a managed
    // service, from the newest to the oldest.
    virtual ::grpc::Status ListServiceRollouts(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::ListServiceRolloutsRequest* request, ::google::api::servicemanagement::v1::ListServiceRolloutsResponse* response);
    // Gets a service configuration [rollout][google.api.servicemanagement.v1.Rollout].
    virtual ::grpc::Status GetServiceRollout(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GetServiceRolloutRequest* request, ::google::api::servicemanagement::v1::Rollout* response);
    // Creates a new service configuration rollout. Based on rollout, the
    // Google Service Management will roll out the service configurations to
    // different backend services. For example, the logging configuration will be
    // pushed to Google Cloud Logging.
    //
    // Please note that any previous pending and running Rollouts and associated
    // Operations will be automatically cancelled so that the latest Rollout will
    // not be blocked by previous Rollouts.
    //
    // Operation<response: Rollout>
    virtual ::grpc::Status CreateServiceRollout(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::CreateServiceRolloutRequest* request, ::google::longrunning::Operation* response);
    // Generates and returns a report (errors, warnings and changes from
    // existing configurations) associated with
    // GenerateConfigReportRequest.new_value
    //
    // If GenerateConfigReportRequest.old_value is specified,
    // GenerateConfigReportRequest will contain a single ChangeReport based on the
    // comparison between GenerateConfigReportRequest.new_value and
    // GenerateConfigReportRequest.old_value.
    // If GenerateConfigReportRequest.old_value is not specified, this method
    // will compare GenerateConfigReportRequest.new_value with the last pushed
    // service configuration.
    virtual ::grpc::Status GenerateConfigReport(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GenerateConfigReportRequest* request, ::google::api::servicemanagement::v1::GenerateConfigReportResponse* response);
    // Enable a managed service for a project with default setting.
    //
    // Operation<response: EnableServiceResponse>
    //
    // [google.rpc.Status][google.rpc.Status] errors may contain a
    // [google.rpc.PreconditionFailure][] error detail.
    virtual ::grpc::Status EnableService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::EnableServiceRequest* request, ::google::longrunning::Operation* response);
    // Disable a managed service for a project.
    //
    // Operation<response: DisableServiceResponse>
    virtual ::grpc::Status DisableService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::DisableServiceRequest* request, ::google::longrunning::Operation* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListServices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListServices() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListServices() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServices(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::ListServicesRequest* request, ::google::api::servicemanagement::v1::ListServicesResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListServices(::grpc::ServerContext* context, ::google::api::servicemanagement::v1::ListServicesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::api::servicemanagement::v1::ListServicesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetService() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetService() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GetServiceRequest* request, ::google::api::servicemanagement::v1::ManagedService* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetService(::grpc::ServerContext* context, ::google::api::servicemanagement::v1::GetServiceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::api::servicemanagement::v1::ManagedService>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateService() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateService() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::CreateServiceRequest* request, ::google::longrunning::Operation* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateService(::grpc::ServerContext* context, ::google::api::servicemanagement::v1::CreateServiceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteService() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteService() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::DeleteServiceRequest* request, ::google::longrunning::Operation* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteService(::grpc::ServerContext* context, ::google::api::servicemanagement::v1::DeleteServiceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UndeleteService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UndeleteService() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_UndeleteService() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UndeleteService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::UndeleteServiceRequest* request, ::google::longrunning::Operation* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUndeleteService(::grpc::ServerContext* context, ::google::api::servicemanagement::v1::UndeleteServiceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListServiceConfigs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListServiceConfigs() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ListServiceConfigs() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServiceConfigs(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::ListServiceConfigsRequest* request, ::google::api::servicemanagement::v1::ListServiceConfigsResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListServiceConfigs(::grpc::ServerContext* context, ::google::api::servicemanagement::v1::ListServiceConfigsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::api::servicemanagement::v1::ListServiceConfigsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetServiceConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetServiceConfig() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetServiceConfig() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceConfig(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GetServiceConfigRequest* request, ::google::api::Service* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServiceConfig(::grpc::ServerContext* context, ::google::api::servicemanagement::v1::GetServiceConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::api::Service>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateServiceConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateServiceConfig() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_CreateServiceConfig() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateServiceConfig(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::CreateServiceConfigRequest* request, ::google::api::Service* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateServiceConfig(::grpc::ServerContext* context, ::google::api::servicemanagement::v1::CreateServiceConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::api::Service>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitConfigSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SubmitConfigSource() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_SubmitConfigSource() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitConfigSource(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::SubmitConfigSourceRequest* request, ::google::longrunning::Operation* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitConfigSource(::grpc::ServerContext* context, ::google::api::servicemanagement::v1::SubmitConfigSourceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListServiceRollouts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListServiceRollouts() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_ListServiceRollouts() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServiceRollouts(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::ListServiceRolloutsRequest* request, ::google::api::servicemanagement::v1::ListServiceRolloutsResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListServiceRollouts(::grpc::ServerContext* context, ::google::api::servicemanagement::v1::ListServiceRolloutsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::api::servicemanagement::v1::ListServiceRolloutsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetServiceRollout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetServiceRollout() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_GetServiceRollout() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceRollout(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GetServiceRolloutRequest* request, ::google::api::servicemanagement::v1::Rollout* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServiceRollout(::grpc::ServerContext* context, ::google::api::servicemanagement::v1::GetServiceRolloutRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::api::servicemanagement::v1::Rollout>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateServiceRollout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateServiceRollout() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_CreateServiceRollout() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateServiceRollout(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::CreateServiceRolloutRequest* request, ::google::longrunning::Operation* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateServiceRollout(::grpc::ServerContext* context, ::google::api::servicemanagement::v1::CreateServiceRolloutRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GenerateConfigReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GenerateConfigReport() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_GenerateConfigReport() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateConfigReport(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GenerateConfigReportRequest* request, ::google::api::servicemanagement::v1::GenerateConfigReportResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateConfigReport(::grpc::ServerContext* context, ::google::api::servicemanagement::v1::GenerateConfigReportRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::api::servicemanagement::v1::GenerateConfigReportResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EnableService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_EnableService() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_EnableService() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EnableService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::EnableServiceRequest* request, ::google::longrunning::Operation* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEnableService(::grpc::ServerContext* context, ::google::api::servicemanagement::v1::EnableServiceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DisableService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DisableService() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_DisableService() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DisableService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::DisableServiceRequest* request, ::google::longrunning::Operation* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDisableService(::grpc::ServerContext* context, ::google::api::servicemanagement::v1::DisableServiceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListServices<WithAsyncMethod_GetService<WithAsyncMethod_CreateService<WithAsyncMethod_DeleteService<WithAsyncMethod_UndeleteService<WithAsyncMethod_ListServiceConfigs<WithAsyncMethod_GetServiceConfig<WithAsyncMethod_CreateServiceConfig<WithAsyncMethod_SubmitConfigSource<WithAsyncMethod_ListServiceRollouts<WithAsyncMethod_GetServiceRollout<WithAsyncMethod_CreateServiceRollout<WithAsyncMethod_GenerateConfigReport<WithAsyncMethod_EnableService<WithAsyncMethod_DisableService<Service > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_ListServices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListServices() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListServices() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServices(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::ListServicesRequest* request, ::google::api::servicemanagement::v1::ListServicesResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetService() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetService() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GetServiceRequest* request, ::google::api::servicemanagement::v1::ManagedService* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateService() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateService() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::CreateServiceRequest* request, ::google::longrunning::Operation* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteService() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteService() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::DeleteServiceRequest* request, ::google::longrunning::Operation* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UndeleteService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UndeleteService() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_UndeleteService() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UndeleteService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::UndeleteServiceRequest* request, ::google::longrunning::Operation* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListServiceConfigs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListServiceConfigs() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ListServiceConfigs() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServiceConfigs(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::ListServiceConfigsRequest* request, ::google::api::servicemanagement::v1::ListServiceConfigsResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetServiceConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetServiceConfig() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetServiceConfig() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceConfig(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GetServiceConfigRequest* request, ::google::api::Service* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateServiceConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateServiceConfig() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_CreateServiceConfig() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateServiceConfig(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::CreateServiceConfigRequest* request, ::google::api::Service* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubmitConfigSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SubmitConfigSource() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_SubmitConfigSource() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitConfigSource(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::SubmitConfigSourceRequest* request, ::google::longrunning::Operation* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListServiceRollouts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListServiceRollouts() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_ListServiceRollouts() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServiceRollouts(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::ListServiceRolloutsRequest* request, ::google::api::servicemanagement::v1::ListServiceRolloutsResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetServiceRollout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetServiceRollout() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_GetServiceRollout() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceRollout(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GetServiceRolloutRequest* request, ::google::api::servicemanagement::v1::Rollout* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateServiceRollout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateServiceRollout() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_CreateServiceRollout() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateServiceRollout(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::CreateServiceRolloutRequest* request, ::google::longrunning::Operation* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GenerateConfigReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GenerateConfigReport() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_GenerateConfigReport() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateConfigReport(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GenerateConfigReportRequest* request, ::google::api::servicemanagement::v1::GenerateConfigReportResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EnableService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_EnableService() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_EnableService() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EnableService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::EnableServiceRequest* request, ::google::longrunning::Operation* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DisableService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DisableService() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_DisableService() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DisableService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::DisableServiceRequest* request, ::google::longrunning::Operation* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

}  // namespace v1
}  // namespace servicemanagement
}  // namespace api
}  // namespace google


#endif  // GRPC_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto__INCLUDED
